!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	2	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
address	/usr/include/boost/pool/pool_alloc.hpp	/^    static const_pointer address(const_reference s)$/;"	f	class:boost::fast_pool_allocator	access:public	signature:(const_reference s)
address	/usr/include/boost/pool/pool_alloc.hpp	/^    static const_pointer address(const_reference s)$/;"	f	class:boost::pool_allocator	access:public	signature:(const_reference s)
address	/usr/include/boost/pool/pool_alloc.hpp	/^    static pointer address(reference r)$/;"	f	class:boost::fast_pool_allocator	access:public	signature:(reference r)
address	/usr/include/boost/pool/pool_alloc.hpp	/^    static pointer address(reference r)$/;"	f	class:boost::pool_allocator	access:public	signature:(reference r)
add_block	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void add_block(void * const block,$/;"	f	class:boost::simple_segregated_storage	access:public	signature:(void * const block, const size_type nsz, const size_type npartition_sz)
add_ordered_block	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void add_ordered_block(void * const block,$/;"	f	class:boost::simple_segregated_storage	access:public	signature:(void * const block, const size_type nsz, const size_type npartition_sz)
allocate	/usr/include/boost/pool/pool_alloc.hpp	/^    static pointer allocate()$/;"	f	class:boost::fast_pool_allocator	access:public	signature:()
allocate	/usr/include/boost/pool/pool_alloc.hpp	/^    static pointer allocate(const size_type n)$/;"	f	class:boost::fast_pool_allocator	access:public	signature:(const size_type n)
allocate	/usr/include/boost/pool/pool_alloc.hpp	/^    static pointer allocate(const size_type n)$/;"	f	class:boost::pool_allocator	access:public	signature:(const size_type n)
allocate	/usr/include/boost/pool/pool_alloc.hpp	/^    static pointer allocate(const size_type n, const void * const)$/;"	f	class:boost::fast_pool_allocator	access:public	signature:(const size_type n, const void * const)
allocate	/usr/include/boost/pool/pool_alloc.hpp	/^    static pointer allocate(const size_type n, const void * const)$/;"	f	class:boost::pool_allocator	access:public	signature:(const size_type n, const void * const)
alloc_size	/usr/include/boost/pool/pool.hpp	/^    size_type alloc_size() const$/;"	f	class:boost::pool	access:protected	signature:() const
begin	/usr/include/boost/pool/pool.hpp	/^    char * & begin() { return ptr; }$/;"	f	class:boost::details::PODptr	access:public	signature:()
begin	/usr/include/boost/pool/pool.hpp	/^    char * begin() const { return ptr; }$/;"	f	class:boost::details::PODptr	access:public	signature:() const
boost	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/pool/detail/gcd_lcm.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/pool/detail/guard.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/pool/detail/mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/pool/detail/singleton.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/pool/object_pool.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/pool/pool.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/pool/poolfwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/pool/pool_alloc.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/pool/simple_segregated_storage.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/pool/singleton_pool.hpp	/^namespace boost {$/;"	n
boost::default_user_allocator_malloc_free	/usr/include/boost/pool/pool.hpp	/^struct default_user_allocator_malloc_free$/;"	s	namespace:boost
boost::default_user_allocator_malloc_free::difference_type	/usr/include/boost/pool/pool.hpp	/^  typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::default_user_allocator_malloc_free	access:public
boost::default_user_allocator_malloc_free::free	/usr/include/boost/pool/pool.hpp	/^  static void free(char * const block)$/;"	f	struct:boost::default_user_allocator_malloc_free	access:public	signature:(char * const block)
boost::default_user_allocator_malloc_free::malloc	/usr/include/boost/pool/pool.hpp	/^  static char * malloc(const size_type bytes)$/;"	f	struct:boost::default_user_allocator_malloc_free	access:public	signature:(const size_type bytes)
boost::default_user_allocator_malloc_free::size_type	/usr/include/boost/pool/pool.hpp	/^  typedef std::size_t size_type;$/;"	t	struct:boost::default_user_allocator_malloc_free	access:public
boost::default_user_allocator_new_delete	/usr/include/boost/pool/pool.hpp	/^struct default_user_allocator_new_delete$/;"	s	namespace:boost
boost::default_user_allocator_new_delete::difference_type	/usr/include/boost/pool/pool.hpp	/^  typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::default_user_allocator_new_delete	access:public
boost::default_user_allocator_new_delete::free	/usr/include/boost/pool/pool.hpp	/^  static void free(char * const block)$/;"	f	struct:boost::default_user_allocator_new_delete	access:public	signature:(char * const block)
boost::default_user_allocator_new_delete::malloc	/usr/include/boost/pool/pool.hpp	/^  static char * malloc(const size_type bytes)$/;"	f	struct:boost::default_user_allocator_new_delete	access:public	signature:(const size_type bytes)
boost::default_user_allocator_new_delete::size_type	/usr/include/boost/pool/pool.hpp	/^  typedef std::size_t size_type;$/;"	t	struct:boost::default_user_allocator_new_delete	access:public
boost::details	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^namespace details {$/;"	n	namespace:boost
boost::details	/usr/include/boost/pool/detail/gcd_lcm.hpp	/^namespace details {$/;"	n	namespace:boost
boost::details	/usr/include/boost/pool/detail/guard.hpp	/^namespace details {$/;"	n	namespace:boost
boost::details	/usr/include/boost/pool/detail/mutex.hpp	/^namespace details {$/;"	n	namespace:boost
boost::details	/usr/include/boost/pool/detail/singleton.hpp	/^namespace details {$/;"	n	namespace:boost
boost::details	/usr/include/boost/pool/pool.hpp	/^namespace details {$/;"	n	namespace:boost
boost::details::PODptr	/usr/include/boost/pool/pool.hpp	/^class PODptr$/;"	c	namespace:boost::details
boost::details::PODptr::begin	/usr/include/boost/pool/pool.hpp	/^    char * & begin() { return ptr; }$/;"	f	class:boost::details::PODptr	access:public	signature:()
boost::details::PODptr::begin	/usr/include/boost/pool/pool.hpp	/^    char * begin() const { return ptr; }$/;"	f	class:boost::details::PODptr	access:public	signature:() const
boost::details::PODptr::element_size	/usr/include/boost/pool/pool.hpp	/^    size_type element_size() const$/;"	f	class:boost::details::PODptr	access:public	signature:() const
boost::details::PODptr::end	/usr/include/boost/pool/pool.hpp	/^    char * end() const { return ptr_next_ptr(); }$/;"	f	class:boost::details::PODptr	access:public	signature:() const
boost::details::PODptr::invalidate	/usr/include/boost/pool/pool.hpp	/^    void invalidate() { begin() = 0; }$/;"	f	class:boost::details::PODptr	access:public	signature:()
boost::details::PODptr::next	/usr/include/boost/pool/pool.hpp	/^    PODptr next() const$/;"	f	class:boost::details::PODptr	access:public	signature:() const
boost::details::PODptr::next	/usr/include/boost/pool/pool.hpp	/^    void next(const PODptr & arg) const$/;"	f	class:boost::details::PODptr	access:public	signature:(const PODptr & arg) const
boost::details::PODptr::next_ptr	/usr/include/boost/pool/pool.hpp	/^    char * & next_ptr() const$/;"	f	class:boost::details::PODptr	access:public	signature:() const
boost::details::PODptr::next_size	/usr/include/boost/pool/pool.hpp	/^    size_type & next_size() const$/;"	f	class:boost::details::PODptr	access:public	signature:() const
boost::details::PODptr::PODptr	/usr/include/boost/pool/pool.hpp	/^    PODptr()$/;"	f	class:boost::details::PODptr	access:public	signature:()
boost::details::PODptr::PODptr	/usr/include/boost/pool/pool.hpp	/^    PODptr(char * const nptr, const size_type nsize)$/;"	f	class:boost::details::PODptr	access:public	signature:(char * const nptr, const size_type nsize)
boost::details::PODptr::ptr	/usr/include/boost/pool/pool.hpp	/^    char * ptr;$/;"	m	class:boost::details::PODptr	access:private
boost::details::PODptr::ptr_next_ptr	/usr/include/boost/pool/pool.hpp	/^    char * ptr_next_ptr() const$/;"	f	class:boost::details::PODptr	access:private	signature:() const
boost::details::PODptr::ptr_next_size	/usr/include/boost/pool/pool.hpp	/^    char * ptr_next_size() const$/;"	f	class:boost::details::PODptr	access:private	signature:() const
boost::details::PODptr::size_type	/usr/include/boost/pool/pool.hpp	/^    typedef SizeType size_type;$/;"	t	class:boost::details::PODptr	access:public
boost::details::PODptr::sz	/usr/include/boost/pool/pool.hpp	/^    size_type sz;$/;"	m	class:boost::details::PODptr	access:private
boost::details::PODptr::total_size	/usr/include/boost/pool/pool.hpp	/^    size_type total_size() const { return sz; }$/;"	f	class:boost::details::PODptr	access:public	signature:() const
boost::details::PODptr::valid	/usr/include/boost/pool/pool.hpp	/^    bool valid() const { return (begin() != 0); }$/;"	f	class:boost::details::PODptr	access:public	signature:() const
boost::details::pool	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^namespace pool {$/;"	n	namespace:boost::details
boost::details::pool	/usr/include/boost/pool/detail/gcd_lcm.hpp	/^namespace pool {$/;"	n	namespace:boost::details
boost::details::pool	/usr/include/boost/pool/detail/guard.hpp	/^namespace pool {$/;"	n	namespace:boost::details
boost::details::pool	/usr/include/boost/pool/detail/mutex.hpp	/^namespace pool {$/;"	n	namespace:boost::details
boost::details::pool	/usr/include/boost/pool/detail/singleton.hpp	/^namespace pool {$/;"	n	namespace:boost::details
boost::details::pool::ct_gcd	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^struct ct_gcd$/;"	s	namespace:boost::details::pool
boost::details::pool::ct_gcd::BOOST_STATIC_CONSTANT	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^  BOOST_STATIC_CONSTANT(unsigned, value =$/;"	p	struct:boost::details::pool::ct_gcd	access:public	signature:(unsigned, value = (::boost::details::pool::details::ct_gcd_helper<A, B, false>::value) )
boost::details::pool::ct_lcm	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^struct ct_lcm$/;"	s	namespace:boost::details::pool
boost::details::pool::ct_lcm::BOOST_STATIC_CONSTANT	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^  BOOST_STATIC_CONSTANT(unsigned, value =$/;"	p	struct:boost::details::pool::ct_lcm	access:public	signature:(unsigned, value = (A / ::boost::details::pool::ct_gcd<A, B>::value * B) )
boost::details::pool::default_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^  typedef null_mutex default_mutex;$/;"	t	namespace:boost::details::pool
boost::details::pool::default_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^  typedef pthread_mutex default_mutex;$/;"	t	namespace:boost::details::pool
boost::details::pool::default_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^  typedef win32_mutex default_mutex;$/;"	t	namespace:boost::details::pool
boost::details::pool::details	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^namespace details {$/;"	n	namespace:boost::details::pool
boost::details::pool::details::ct_gcd_helper	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^struct ct_gcd_helper<A, B, false>$/;"	s	namespace:boost::details::pool::details
boost::details::pool::details::ct_gcd_helper	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^struct ct_gcd_helper<A, B, true>$/;"	s	namespace:boost::details::pool::details
boost::details::pool::details::ct_gcd_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^  BOOST_STATIC_CONSTANT(unsigned, A_mod_B_ = A % B);$/;"	p	struct:boost::details::pool::details::ct_gcd_helper	access:public	signature:(unsigned, A_mod_B_ = A % B)
boost::details::pool::details::ct_gcd_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^  BOOST_STATIC_CONSTANT(unsigned, value = A);$/;"	p	struct:boost::details::pool::details::ct_gcd_helper	access:public	signature:(unsigned, value = A)
boost::details::pool::details::ct_gcd_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^  BOOST_STATIC_CONSTANT(unsigned, value =$/;"	p	struct:boost::details::pool::details::ct_gcd_helper	access:public	signature:(unsigned, value = (::boost::details::pool::details::ct_gcd_helper< B, static_cast<unsigned>(A_mod_B_), ::boost::type_traits::ice_eq<A_mod_B_, 0>::value >::value) )
boost::details::pool::gcd	/usr/include/boost/pool/detail/gcd_lcm.hpp	/^Integer gcd(Integer A, Integer B)$/;"	f	namespace:boost::details::pool	signature:(Integer A, Integer B)
boost::details::pool::guard	/usr/include/boost/pool/detail/guard.hpp	/^class guard$/;"	c	namespace:boost::details::pool
boost::details::pool::guard::guard	/usr/include/boost/pool/detail/guard.hpp	/^    explicit guard(Mutex & nmtx)$/;"	f	class:boost::details::pool::guard	access:public	signature:(Mutex & nmtx)
boost::details::pool::guard::guard	/usr/include/boost/pool/detail/guard.hpp	/^    guard(const guard &);$/;"	p	class:boost::details::pool::guard	access:private	signature:(const guard &)
boost::details::pool::guard::mtx	/usr/include/boost/pool/detail/guard.hpp	/^    Mutex & mtx;$/;"	m	class:boost::details::pool::guard	access:private
boost::details::pool::guard::operator =	/usr/include/boost/pool/detail/guard.hpp	/^    void operator=(const guard &);$/;"	p	class:boost::details::pool::guard	access:private	signature:(const guard &)
boost::details::pool::guard::~guard	/usr/include/boost/pool/detail/guard.hpp	/^    ~guard() { mtx.unlock(); }$/;"	f	class:boost::details::pool::guard	access:public	signature:()
boost::details::pool::lcm	/usr/include/boost/pool/detail/gcd_lcm.hpp	/^Integer lcm(const Integer & A, const Integer & B)$/;"	f	namespace:boost::details::pool	signature:(const Integer & A, const Integer & B)
boost::details::pool::null_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^class null_mutex$/;"	c	namespace:boost::details::pool
boost::details::pool::null_mutex::lock	/usr/include/boost/pool/detail/mutex.hpp	/^    static void lock() { }$/;"	f	class:boost::details::pool::null_mutex	access:public	signature:()
boost::details::pool::null_mutex::null_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^    null_mutex() { }$/;"	f	class:boost::details::pool::null_mutex	access:public	signature:()
boost::details::pool::null_mutex::null_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^    null_mutex(const null_mutex &);$/;"	p	class:boost::details::pool::null_mutex	access:private	signature:(const null_mutex &)
boost::details::pool::null_mutex::operator =	/usr/include/boost/pool/detail/mutex.hpp	/^    void operator=(const null_mutex &);$/;"	p	class:boost::details::pool::null_mutex	access:private	signature:(const null_mutex &)
boost::details::pool::null_mutex::unlock	/usr/include/boost/pool/detail/mutex.hpp	/^    static void unlock() { }$/;"	f	class:boost::details::pool::null_mutex	access:public	signature:()
boost::details::pool::pthread_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^class pthread_mutex$/;"	c	namespace:boost::details::pool
boost::details::pool::pthread_mutex::lock	/usr/include/boost/pool/detail/mutex.hpp	/^    void lock()$/;"	f	class:boost::details::pool::pthread_mutex	access:public	signature:()
boost::details::pool::pthread_mutex::mtx	/usr/include/boost/pool/detail/mutex.hpp	/^    ::pthread_mutex_t mtx;$/;"	m	class:boost::details::pool::pthread_mutex	access:private
boost::details::pool::pthread_mutex::operator =	/usr/include/boost/pool/detail/mutex.hpp	/^    void operator=(const pthread_mutex &);$/;"	p	class:boost::details::pool::pthread_mutex	access:private	signature:(const pthread_mutex &)
boost::details::pool::pthread_mutex::pthread_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^    pthread_mutex()$/;"	f	class:boost::details::pool::pthread_mutex	access:public	signature:()
boost::details::pool::pthread_mutex::pthread_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^    pthread_mutex(const pthread_mutex &);$/;"	p	class:boost::details::pool::pthread_mutex	access:private	signature:(const pthread_mutex &)
boost::details::pool::pthread_mutex::unlock	/usr/include/boost/pool/detail/mutex.hpp	/^    void unlock()$/;"	f	class:boost::details::pool::pthread_mutex	access:public	signature:()
boost::details::pool::pthread_mutex::~pthread_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^    ~pthread_mutex()$/;"	f	class:boost::details::pool::pthread_mutex	access:public	signature:()
boost::details::pool::singleton_default	/usr/include/boost/pool/detail/singleton.hpp	/^struct singleton_default$/;"	s	namespace:boost::details::pool
boost::details::pool::singleton_default::create_object	/usr/include/boost/pool/detail/singleton.hpp	/^    static object_creator create_object;$/;"	m	struct:boost::details::pool::singleton_default	access:private
boost::details::pool::singleton_default::create_object	/usr/include/boost/pool/detail/singleton.hpp	/^singleton_default<T>::create_object;$/;"	m	class:boost::details::pool::singleton_default
boost::details::pool::singleton_default::instance	/usr/include/boost/pool/detail/singleton.hpp	/^    static object_type & instance()$/;"	f	struct:boost::details::pool::singleton_default	access:public	signature:()
boost::details::pool::singleton_default::object_creator	/usr/include/boost/pool/detail/singleton.hpp	/^    struct object_creator$/;"	s	struct:boost::details::pool::singleton_default	access:private
boost::details::pool::singleton_default::object_creator::do_nothing	/usr/include/boost/pool/detail/singleton.hpp	/^      inline void do_nothing() const { }$/;"	f	struct:boost::details::pool::singleton_default::object_creator	access:public	signature:() const
boost::details::pool::singleton_default::object_creator::object_creator	/usr/include/boost/pool/detail/singleton.hpp	/^      object_creator() { singleton_default<T>::instance(); }$/;"	f	struct:boost::details::pool::singleton_default::object_creator	access:public	signature:()
boost::details::pool::singleton_default::object_type	/usr/include/boost/pool/detail/singleton.hpp	/^    typedef T object_type;$/;"	t	struct:boost::details::pool::singleton_default	access:public
boost::details::pool::singleton_default::singleton_default	/usr/include/boost/pool/detail/singleton.hpp	/^    singleton_default();$/;"	p	struct:boost::details::pool::singleton_default	access:private	signature:()
boost::details::pool::win32_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^class win32_mutex$/;"	c	namespace:boost::details::pool
boost::details::pool::win32_mutex::lock	/usr/include/boost/pool/detail/mutex.hpp	/^    void lock()$/;"	f	class:boost::details::pool::win32_mutex	access:public	signature:()
boost::details::pool::win32_mutex::mtx	/usr/include/boost/pool/detail/mutex.hpp	/^    ::CRITICAL_SECTION mtx;$/;"	m	class:boost::details::pool::win32_mutex	access:private
boost::details::pool::win32_mutex::operator =	/usr/include/boost/pool/detail/mutex.hpp	/^    void operator=(const win32_mutex &);$/;"	p	class:boost::details::pool::win32_mutex	access:private	signature:(const win32_mutex &)
boost::details::pool::win32_mutex::unlock	/usr/include/boost/pool/detail/mutex.hpp	/^    void unlock()$/;"	f	class:boost::details::pool::win32_mutex	access:public	signature:()
boost::details::pool::win32_mutex::win32_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^    win32_mutex()$/;"	f	class:boost::details::pool::win32_mutex	access:public	signature:()
boost::details::pool::win32_mutex::win32_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^    win32_mutex(const win32_mutex &);$/;"	p	class:boost::details::pool::win32_mutex	access:private	signature:(const win32_mutex &)
boost::details::pool::win32_mutex::~win32_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^    ~win32_mutex()$/;"	f	class:boost::details::pool::win32_mutex	access:public	signature:()
boost::fast_pool_allocator	/usr/include/boost/pool/pool_alloc.hpp	/^class fast_pool_allocator$/;"	c	namespace:boost
boost::fast_pool_allocator	/usr/include/boost/pool/pool_alloc.hpp	/^class fast_pool_allocator<void, UserAllocator, Mutex, NextSize>$/;"	c	namespace:boost
boost::fast_pool_allocator::address	/usr/include/boost/pool/pool_alloc.hpp	/^    static const_pointer address(const_reference s)$/;"	f	class:boost::fast_pool_allocator	access:public	signature:(const_reference s)
boost::fast_pool_allocator::address	/usr/include/boost/pool/pool_alloc.hpp	/^    static pointer address(reference r)$/;"	f	class:boost::fast_pool_allocator	access:public	signature:(reference r)
boost::fast_pool_allocator::allocate	/usr/include/boost/pool/pool_alloc.hpp	/^    static pointer allocate()$/;"	f	class:boost::fast_pool_allocator	access:public	signature:()
boost::fast_pool_allocator::allocate	/usr/include/boost/pool/pool_alloc.hpp	/^    static pointer allocate(const size_type n)$/;"	f	class:boost::fast_pool_allocator	access:public	signature:(const size_type n)
boost::fast_pool_allocator::allocate	/usr/include/boost/pool/pool_alloc.hpp	/^    static pointer allocate(const size_type n, const void * const)$/;"	f	class:boost::fast_pool_allocator	access:public	signature:(const size_type n, const void * const)
boost::fast_pool_allocator::BOOST_STATIC_CONSTANT	/usr/include/boost/pool/pool_alloc.hpp	/^    BOOST_STATIC_CONSTANT(unsigned, next_size = NextSize);$/;"	p	class:boost::fast_pool_allocator	access:public	signature:(unsigned, next_size = NextSize)
boost::fast_pool_allocator::construct	/usr/include/boost/pool/pool_alloc.hpp	/^    void construct(const pointer ptr, const value_type & t)$/;"	f	class:boost::fast_pool_allocator	access:public	signature:(const pointer ptr, const value_type & t)
boost::fast_pool_allocator::const_pointer	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef const value_type * const_pointer;$/;"	t	class:boost::fast_pool_allocator	access:public
boost::fast_pool_allocator::const_pointer	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef const void* const_pointer;$/;"	t	class:boost::fast_pool_allocator	access:public
boost::fast_pool_allocator::const_reference	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef const value_type & const_reference;$/;"	t	class:boost::fast_pool_allocator	access:public
boost::fast_pool_allocator::deallocate	/usr/include/boost/pool/pool_alloc.hpp	/^    static void deallocate(const pointer ptr)$/;"	f	class:boost::fast_pool_allocator	access:public	signature:(const pointer ptr)
boost::fast_pool_allocator::deallocate	/usr/include/boost/pool/pool_alloc.hpp	/^    static void deallocate(const pointer ptr, const size_type n)$/;"	f	class:boost::fast_pool_allocator	access:public	signature:(const pointer ptr, const size_type n)
boost::fast_pool_allocator::destroy	/usr/include/boost/pool/pool_alloc.hpp	/^    void destroy(const pointer ptr)$/;"	f	class:boost::fast_pool_allocator	access:public	signature:(const pointer ptr)
boost::fast_pool_allocator::difference_type	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef typename pool<UserAllocator>::difference_type difference_type;$/;"	t	class:boost::fast_pool_allocator	access:public
boost::fast_pool_allocator::fast_pool_allocator	/usr/include/boost/pool/pool_alloc.hpp	/^    fast_pool_allocator($/;"	f	class:boost::fast_pool_allocator	access:public	signature:( const fast_pool_allocator<U, UserAllocator, Mutex, NextSize> &)
boost::fast_pool_allocator::fast_pool_allocator	/usr/include/boost/pool/pool_alloc.hpp	/^    fast_pool_allocator()$/;"	f	class:boost::fast_pool_allocator	access:public	signature:()
boost::fast_pool_allocator::max_size	/usr/include/boost/pool/pool_alloc.hpp	/^    static size_type max_size()$/;"	f	class:boost::fast_pool_allocator	access:public	signature:()
boost::fast_pool_allocator::mutex	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef Mutex mutex;$/;"	t	class:boost::fast_pool_allocator	access:public
boost::fast_pool_allocator::operator !=	/usr/include/boost/pool/pool_alloc.hpp	/^    bool operator!=(const fast_pool_allocator &) const$/;"	f	class:boost::fast_pool_allocator	access:public	signature:(const fast_pool_allocator &) const
boost::fast_pool_allocator::operator ==	/usr/include/boost/pool/pool_alloc.hpp	/^    bool operator==(const fast_pool_allocator &) const$/;"	f	class:boost::fast_pool_allocator	access:public	signature:(const fast_pool_allocator &) const
boost::fast_pool_allocator::pointer	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef value_type * pointer;$/;"	t	class:boost::fast_pool_allocator	access:public
boost::fast_pool_allocator::pointer	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef void*       pointer;$/;"	t	class:boost::fast_pool_allocator	access:public
boost::fast_pool_allocator::rebind	/usr/include/boost/pool/pool_alloc.hpp	/^    struct rebind$/;"	s	class:boost::fast_pool_allocator	access:public
boost::fast_pool_allocator::rebind	/usr/include/boost/pool/pool_alloc.hpp	/^    template <class U> struct rebind {$/;"	s	class:boost::fast_pool_allocator	access:public
boost::fast_pool_allocator::rebind::other	/usr/include/boost/pool/pool_alloc.hpp	/^        typedef fast_pool_allocator<U, UserAllocator, Mutex, NextSize> other;$/;"	t	struct:boost::fast_pool_allocator::rebind	access:public
boost::fast_pool_allocator::rebind::other	/usr/include/boost/pool/pool_alloc.hpp	/^      typedef fast_pool_allocator<U, UserAllocator, Mutex, NextSize> other;$/;"	t	struct:boost::fast_pool_allocator::rebind	access:public
boost::fast_pool_allocator::reference	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef value_type & reference;$/;"	t	class:boost::fast_pool_allocator	access:public
boost::fast_pool_allocator::size_type	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef typename pool<UserAllocator>::size_type size_type;$/;"	t	class:boost::fast_pool_allocator	access:public
boost::fast_pool_allocator::user_allocator	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef UserAllocator user_allocator;$/;"	t	class:boost::fast_pool_allocator	access:public
boost::fast_pool_allocator::value_type	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef T value_type;$/;"	t	class:boost::fast_pool_allocator	access:public
boost::fast_pool_allocator::value_type	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef void        value_type;$/;"	t	class:boost::fast_pool_allocator	access:public
boost::fast_pool_allocator_tag	/usr/include/boost/pool/pool_alloc.hpp	/^struct fast_pool_allocator_tag { };$/;"	s	namespace:boost
boost::object_pool	/usr/include/boost/pool/object_pool.hpp	/^class object_pool: protected pool<UserAllocator>$/;"	c	namespace:boost	inherits:pool
boost::object_pool::construct	/usr/include/boost/pool/object_pool.hpp	/^    element_type * construct()$/;"	f	class:boost::object_pool	access:public	signature:()
boost::object_pool::destroy	/usr/include/boost/pool/object_pool.hpp	/^    void destroy(element_type * const chunk)$/;"	f	class:boost::object_pool	access:public	signature:(element_type * const chunk)
boost::object_pool::difference_type	/usr/include/boost/pool/object_pool.hpp	/^    typedef typename pool<UserAllocator>::difference_type difference_type;$/;"	t	class:boost::object_pool	access:public
boost::object_pool::element_type	/usr/include/boost/pool/object_pool.hpp	/^    typedef T element_type;$/;"	t	class:boost::object_pool	access:public
boost::object_pool::free	/usr/include/boost/pool/object_pool.hpp	/^    void free(element_type * const chunk)$/;"	f	class:boost::object_pool	access:public	signature:(element_type * const chunk)
boost::object_pool::get_next_size	/usr/include/boost/pool/object_pool.hpp	/^    size_type get_next_size() const { return store().get_next_size(); }$/;"	f	class:boost::object_pool	access:public	signature:() const
boost::object_pool::is_from	/usr/include/boost/pool/object_pool.hpp	/^    bool is_from(element_type * const chunk) const$/;"	f	class:boost::object_pool	access:public	signature:(element_type * const chunk) const
boost::object_pool::malloc	/usr/include/boost/pool/object_pool.hpp	/^    element_type * malloc()$/;"	f	class:boost::object_pool	access:public	signature:()
boost::object_pool::nextof	/usr/include/boost/pool/object_pool.hpp	/^    static void * & nextof(void * const ptr)$/;"	f	class:boost::object_pool	access:protected	signature:(void * const ptr)
boost::object_pool::object_pool	/usr/include/boost/pool/object_pool.hpp	/^    explicit object_pool(const size_type next_size = 32)$/;"	f	class:boost::object_pool	access:public	signature:(const size_type next_size = 32)
boost::object_pool::set_next_size	/usr/include/boost/pool/object_pool.hpp	/^    void set_next_size(const size_type x) { store().set_next_size(x); }$/;"	f	class:boost::object_pool	access:public	signature:(const size_type x)
boost::object_pool::size_type	/usr/include/boost/pool/object_pool.hpp	/^    typedef typename pool<UserAllocator>::size_type size_type;$/;"	t	class:boost::object_pool	access:public
boost::object_pool::store	/usr/include/boost/pool/object_pool.hpp	/^    const pool<UserAllocator> & store() const { return *this; }$/;"	f	class:boost::object_pool	access:protected	signature:() const
boost::object_pool::store	/usr/include/boost/pool/object_pool.hpp	/^    pool<UserAllocator> & store() { return *this; }$/;"	f	class:boost::object_pool	access:protected	signature:()
boost::object_pool::user_allocator	/usr/include/boost/pool/object_pool.hpp	/^    typedef UserAllocator user_allocator;$/;"	t	class:boost::object_pool	access:public
boost::object_pool::~object_pool	/usr/include/boost/pool/object_pool.hpp	/^    ~object_pool();$/;"	p	class:boost::object_pool	access:public	signature:()
boost::object_pool::~object_pool	/usr/include/boost/pool/object_pool.hpp	/^object_pool<T, UserAllocator>::~object_pool()$/;"	f	class:boost::object_pool	signature:()
boost::pool	/usr/include/boost/pool/pool.hpp	/^class pool: protected simple_segregated_storage<$/;"	c	namespace:boost	inherits:simple_segregated_storage
boost::pool::alloc_size	/usr/include/boost/pool/pool.hpp	/^    size_type alloc_size() const$/;"	f	class:boost::pool	access:protected	signature:() const
boost::pool::BOOST_STATIC_CONSTANT	/usr/include/boost/pool/pool.hpp	/^    BOOST_STATIC_CONSTANT(unsigned, min_alloc_size =$/;"	p	class:boost::pool	access:private	signature:(unsigned, min_alloc_size = (::boost::details::pool::ct_lcm<sizeof(void *), sizeof(size_type)>::value) )
boost::pool::difference_type	/usr/include/boost/pool/pool.hpp	/^    typedef typename UserAllocator::difference_type difference_type;$/;"	t	class:boost::pool	access:public
boost::pool::find_POD	/usr/include/boost/pool/pool.hpp	/^    details::PODptr<size_type> find_POD(void * const chunk) const;$/;"	p	class:boost::pool	access:protected	signature:(void * const chunk) const
boost::pool::find_POD	/usr/include/boost/pool/pool.hpp	/^pool<UserAllocator>::find_POD(void * const chunk) const$/;"	f	class:boost::pool	signature:(void * const chunk) const
boost::pool::free	/usr/include/boost/pool/pool.hpp	/^    void free(void * const chunk)$/;"	f	class:boost::pool	access:public	signature:(void * const chunk)
boost::pool::free	/usr/include/boost/pool/pool.hpp	/^    void free(void * const chunks, const size_type n)$/;"	f	class:boost::pool	access:public	signature:(void * const chunks, const size_type n)
boost::pool::get_next_size	/usr/include/boost/pool/pool.hpp	/^    size_type get_next_size() const { return next_size; }$/;"	f	class:boost::pool	access:public	signature:() const
boost::pool::get_requested_size	/usr/include/boost/pool/pool.hpp	/^    size_type get_requested_size() const { return requested_size; }$/;"	f	class:boost::pool	access:public	signature:() const
boost::pool::is_from	/usr/include/boost/pool/pool.hpp	/^    bool is_from(void * const chunk) const$/;"	f	class:boost::pool	access:public	signature:(void * const chunk) const
boost::pool::is_from	/usr/include/boost/pool/pool.hpp	/^    static bool is_from(void * const chunk, char * const i,$/;"	f	class:boost::pool	access:protected	signature:(void * const chunk, char * const i, const size_type sizeof_i)
boost::pool::list	/usr/include/boost/pool/pool.hpp	/^    details::PODptr<size_type> list;$/;"	m	class:boost::pool	access:protected
boost::pool::malloc	/usr/include/boost/pool/pool.hpp	/^    void * malloc()$/;"	f	class:boost::pool	access:public	signature:()
boost::pool::malloc_need_resize	/usr/include/boost/pool/pool.hpp	/^    void * malloc_need_resize();$/;"	p	class:boost::pool	access:private	signature:()
boost::pool::malloc_need_resize	/usr/include/boost/pool/pool.hpp	/^void * pool<UserAllocator>::malloc_need_resize()$/;"	f	class:boost::pool	signature:()
boost::pool::nextof	/usr/include/boost/pool/pool.hpp	/^    static void * & nextof(void * const ptr)$/;"	f	class:boost::pool	access:protected	signature:(void * const ptr)
boost::pool::next_size	/usr/include/boost/pool/pool.hpp	/^    size_type next_size;$/;"	m	class:boost::pool	access:protected
boost::pool::ordered_free	/usr/include/boost/pool/pool.hpp	/^    void ordered_free(void * const chunk)$/;"	f	class:boost::pool	access:public	signature:(void * const chunk)
boost::pool::ordered_free	/usr/include/boost/pool/pool.hpp	/^    void ordered_free(void * const chunks, const size_type n)$/;"	f	class:boost::pool	access:public	signature:(void * const chunks, const size_type n)
boost::pool::ordered_malloc	/usr/include/boost/pool/pool.hpp	/^    void * ordered_malloc()$/;"	f	class:boost::pool	access:public	signature:()
boost::pool::ordered_malloc	/usr/include/boost/pool/pool.hpp	/^    void * ordered_malloc(size_type n);$/;"	p	class:boost::pool	access:public	signature:(size_type n)
boost::pool::ordered_malloc	/usr/include/boost/pool/pool.hpp	/^void * pool<UserAllocator>::ordered_malloc(const size_type n)$/;"	f	class:boost::pool	signature:(const size_type n)
boost::pool::ordered_malloc_need_resize	/usr/include/boost/pool/pool.hpp	/^    void * ordered_malloc_need_resize();$/;"	p	class:boost::pool	access:private	signature:()
boost::pool::ordered_malloc_need_resize	/usr/include/boost/pool/pool.hpp	/^void * pool<UserAllocator>::ordered_malloc_need_resize()$/;"	f	class:boost::pool	signature:()
boost::pool::pool	/usr/include/boost/pool/pool.hpp	/^    explicit pool(const size_type nrequested_size,$/;"	f	class:boost::pool	access:public	signature:(const size_type nrequested_size, const size_type nnext_size = 32)
boost::pool::purge_memory	/usr/include/boost/pool/pool.hpp	/^    bool purge_memory();$/;"	p	class:boost::pool	access:public	signature:()
boost::pool::purge_memory	/usr/include/boost/pool/pool.hpp	/^bool pool<UserAllocator>::purge_memory()$/;"	f	class:boost::pool	signature:()
boost::pool::release_memory	/usr/include/boost/pool/pool.hpp	/^    bool release_memory();$/;"	p	class:boost::pool	access:public	signature:()
boost::pool::release_memory	/usr/include/boost/pool/pool.hpp	/^bool pool<UserAllocator>::release_memory()$/;"	f	class:boost::pool	signature:()
boost::pool::requested_size	/usr/include/boost/pool/pool.hpp	/^    const size_type requested_size;$/;"	m	class:boost::pool	access:protected
boost::pool::set_next_size	/usr/include/boost/pool/pool.hpp	/^    void set_next_size(const size_type nnext_size) { next_size = start_size = nnext_size; }$/;"	f	class:boost::pool	access:public	signature:(const size_type nnext_size)
boost::pool::size_type	/usr/include/boost/pool/pool.hpp	/^    typedef typename UserAllocator::size_type size_type;$/;"	t	class:boost::pool	access:public
boost::pool::start_size	/usr/include/boost/pool/pool.hpp	/^    size_type start_size;$/;"	m	class:boost::pool	access:protected
boost::pool::store	/usr/include/boost/pool/pool.hpp	/^    const simple_segregated_storage<size_type> & store() const { return *this; }$/;"	f	class:boost::pool	access:protected	signature:() const
boost::pool::store	/usr/include/boost/pool/pool.hpp	/^    simple_segregated_storage<size_type> & store() { return *this; }$/;"	f	class:boost::pool	access:protected	signature:()
boost::pool::user_allocator	/usr/include/boost/pool/pool.hpp	/^    typedef UserAllocator user_allocator;$/;"	t	class:boost::pool	access:public
boost::pool::~pool	/usr/include/boost/pool/pool.hpp	/^    ~pool() { purge_memory(); }$/;"	f	class:boost::pool	access:public	signature:()
boost::pool_allocator	/usr/include/boost/pool/pool_alloc.hpp	/^class pool_allocator$/;"	c	namespace:boost
boost::pool_allocator	/usr/include/boost/pool/pool_alloc.hpp	/^class pool_allocator<void, UserAllocator, Mutex, NextSize>$/;"	c	namespace:boost
boost::pool_allocator::address	/usr/include/boost/pool/pool_alloc.hpp	/^    static const_pointer address(const_reference s)$/;"	f	class:boost::pool_allocator	access:public	signature:(const_reference s)
boost::pool_allocator::address	/usr/include/boost/pool/pool_alloc.hpp	/^    static pointer address(reference r)$/;"	f	class:boost::pool_allocator	access:public	signature:(reference r)
boost::pool_allocator::allocate	/usr/include/boost/pool/pool_alloc.hpp	/^    static pointer allocate(const size_type n)$/;"	f	class:boost::pool_allocator	access:public	signature:(const size_type n)
boost::pool_allocator::allocate	/usr/include/boost/pool/pool_alloc.hpp	/^    static pointer allocate(const size_type n, const void * const)$/;"	f	class:boost::pool_allocator	access:public	signature:(const size_type n, const void * const)
boost::pool_allocator::BOOST_STATIC_CONSTANT	/usr/include/boost/pool/pool_alloc.hpp	/^    BOOST_STATIC_CONSTANT(unsigned, next_size = NextSize);$/;"	p	class:boost::pool_allocator	access:public	signature:(unsigned, next_size = NextSize)
boost::pool_allocator::construct	/usr/include/boost/pool/pool_alloc.hpp	/^    static void construct(const pointer ptr, const value_type & t)$/;"	f	class:boost::pool_allocator	access:public	signature:(const pointer ptr, const value_type & t)
boost::pool_allocator::const_pointer	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef const value_type * const_pointer;$/;"	t	class:boost::pool_allocator	access:public
boost::pool_allocator::const_pointer	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef const void* const_pointer;$/;"	t	class:boost::pool_allocator	access:public
boost::pool_allocator::const_reference	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef const value_type & const_reference;$/;"	t	class:boost::pool_allocator	access:public
boost::pool_allocator::deallocate	/usr/include/boost/pool/pool_alloc.hpp	/^    static void deallocate(const pointer ptr, const size_type n)$/;"	f	class:boost::pool_allocator	access:public	signature:(const pointer ptr, const size_type n)
boost::pool_allocator::destroy	/usr/include/boost/pool/pool_alloc.hpp	/^    static void destroy(const pointer ptr)$/;"	f	class:boost::pool_allocator	access:public	signature:(const pointer ptr)
boost::pool_allocator::difference_type	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef typename pool<UserAllocator>::difference_type difference_type;$/;"	t	class:boost::pool_allocator	access:public
boost::pool_allocator::max_size	/usr/include/boost/pool/pool_alloc.hpp	/^    static size_type max_size()$/;"	f	class:boost::pool_allocator	access:public	signature:()
boost::pool_allocator::mutex	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef Mutex mutex;$/;"	t	class:boost::pool_allocator	access:public
boost::pool_allocator::operator !=	/usr/include/boost/pool/pool_alloc.hpp	/^    bool operator!=(const pool_allocator &) const$/;"	f	class:boost::pool_allocator	access:public	signature:(const pool_allocator &) const
boost::pool_allocator::operator ==	/usr/include/boost/pool/pool_alloc.hpp	/^    bool operator==(const pool_allocator &) const$/;"	f	class:boost::pool_allocator	access:public	signature:(const pool_allocator &) const
boost::pool_allocator::pointer	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef value_type * pointer;$/;"	t	class:boost::pool_allocator	access:public
boost::pool_allocator::pointer	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef void*       pointer;$/;"	t	class:boost::pool_allocator	access:public
boost::pool_allocator::pool_allocator	/usr/include/boost/pool/pool_alloc.hpp	/^    pool_allocator()$/;"	f	class:boost::pool_allocator	access:public	signature:()
boost::pool_allocator::pool_allocator	/usr/include/boost/pool/pool_alloc.hpp	/^    pool_allocator(const pool_allocator<U, UserAllocator, Mutex, NextSize> &)$/;"	f	class:boost::pool_allocator	access:public	signature:(const pool_allocator<U, UserAllocator, Mutex, NextSize> &)
boost::pool_allocator::rebind	/usr/include/boost/pool/pool_alloc.hpp	/^    struct rebind$/;"	s	class:boost::pool_allocator	access:public
boost::pool_allocator::rebind	/usr/include/boost/pool/pool_alloc.hpp	/^    template <class U> struct rebind {$/;"	s	class:boost::pool_allocator	access:public
boost::pool_allocator::rebind::other	/usr/include/boost/pool/pool_alloc.hpp	/^        typedef pool_allocator<U, UserAllocator, Mutex, NextSize> other;$/;"	t	struct:boost::pool_allocator::rebind	access:public
boost::pool_allocator::rebind::other	/usr/include/boost/pool/pool_alloc.hpp	/^      typedef pool_allocator<U, UserAllocator, Mutex, NextSize> other;$/;"	t	struct:boost::pool_allocator::rebind	access:public
boost::pool_allocator::reference	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef value_type & reference;$/;"	t	class:boost::pool_allocator	access:public
boost::pool_allocator::size_type	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef typename pool<UserAllocator>::size_type size_type;$/;"	t	class:boost::pool_allocator	access:public
boost::pool_allocator::user_allocator	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef UserAllocator user_allocator;$/;"	t	class:boost::pool_allocator	access:public
boost::pool_allocator::value_type	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef T value_type;$/;"	t	class:boost::pool_allocator	access:public
boost::pool_allocator::value_type	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef void        value_type;$/;"	t	class:boost::pool_allocator	access:public
boost::pool_allocator_tag	/usr/include/boost/pool/pool_alloc.hpp	/^struct pool_allocator_tag { };$/;"	s	namespace:boost
boost::simple_segregated_storage	/usr/include/boost/pool/simple_segregated_storage.hpp	/^class simple_segregated_storage$/;"	c	namespace:boost
boost::simple_segregated_storage::add_block	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void add_block(void * const block,$/;"	f	class:boost::simple_segregated_storage	access:public	signature:(void * const block, const size_type nsz, const size_type npartition_sz)
boost::simple_segregated_storage::add_ordered_block	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void add_ordered_block(void * const block,$/;"	f	class:boost::simple_segregated_storage	access:public	signature:(void * const block, const size_type nsz, const size_type npartition_sz)
boost::simple_segregated_storage::empty	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    bool empty() const { return (first == 0); }$/;"	f	class:boost::simple_segregated_storage	access:public	signature:() const
boost::simple_segregated_storage::find_prev	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void * find_prev(void * ptr);$/;"	p	class:boost::simple_segregated_storage	access:protected	signature:(void * ptr)
boost::simple_segregated_storage::find_prev	/usr/include/boost/pool/simple_segregated_storage.hpp	/^void * simple_segregated_storage<SizeType>::find_prev(void * const ptr)$/;"	f	class:boost::simple_segregated_storage	signature:(void * const ptr)
boost::simple_segregated_storage::first	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void * first;$/;"	m	class:boost::simple_segregated_storage	access:protected
boost::simple_segregated_storage::free	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void free(void * const chunk)$/;"	f	class:boost::simple_segregated_storage	access:public	signature:(void * const chunk)
boost::simple_segregated_storage::free_n	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void free_n(void * const chunks, const size_type n,$/;"	f	class:boost::simple_segregated_storage	access:public	signature:(void * const chunks, const size_type n, const size_type partition_size)
boost::simple_segregated_storage::malloc	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void * malloc()$/;"	f	class:boost::simple_segregated_storage	access:public	signature:()
boost::simple_segregated_storage::malloc_n	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void * malloc_n(size_type n, size_type partition_size);$/;"	p	class:boost::simple_segregated_storage	access:public	signature:(size_type n, size_type partition_size)
boost::simple_segregated_storage::malloc_n	/usr/include/boost/pool/simple_segregated_storage.hpp	/^void * simple_segregated_storage<SizeType>::malloc_n(const size_type n,$/;"	f	class:boost::simple_segregated_storage	signature:(const size_type n, const size_type partition_size)
boost::simple_segregated_storage::nextof	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    static void * & nextof(void * const ptr)$/;"	f	class:boost::simple_segregated_storage	access:protected	signature:(void * const ptr)
boost::simple_segregated_storage::operator =	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void operator=(const simple_segregated_storage &);$/;"	p	class:boost::simple_segregated_storage	access:private	signature:(const simple_segregated_storage &)
boost::simple_segregated_storage::ordered_free	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void ordered_free(void * const chunk)$/;"	f	class:boost::simple_segregated_storage	access:public	signature:(void * const chunk)
boost::simple_segregated_storage::ordered_free_n	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void ordered_free_n(void * const chunks, const size_type n,$/;"	f	class:boost::simple_segregated_storage	access:public	signature:(void * const chunks, const size_type n, const size_type partition_size)
boost::simple_segregated_storage::segregate	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    static void * segregate(void * block,$/;"	p	class:boost::simple_segregated_storage	access:public	signature:(void * block, size_type nsz, size_type npartition_sz, void * end = 0)
boost::simple_segregated_storage::segregate	/usr/include/boost/pool/simple_segregated_storage.hpp	/^void * simple_segregated_storage<SizeType>::segregate($/;"	f	class:boost::simple_segregated_storage	signature:( void * const block, const size_type sz, const size_type partition_sz, void * const end)
boost::simple_segregated_storage::simple_segregated_storage	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    simple_segregated_storage()$/;"	f	class:boost::simple_segregated_storage	access:public	signature:()
boost::simple_segregated_storage::simple_segregated_storage	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    simple_segregated_storage(const simple_segregated_storage &);$/;"	p	class:boost::simple_segregated_storage	access:private	signature:(const simple_segregated_storage &)
boost::simple_segregated_storage::size_type	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    typedef SizeType size_type;$/;"	t	class:boost::simple_segregated_storage	access:public
boost::simple_segregated_storage::try_malloc_n	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    static void * try_malloc_n(void * & start, size_type n,$/;"	p	class:boost::simple_segregated_storage	access:private	signature:(void * & start, size_type n, size_type partition_size)
boost::simple_segregated_storage::try_malloc_n	/usr/include/boost/pool/simple_segregated_storage.hpp	/^void * simple_segregated_storage<SizeType>::try_malloc_n($/;"	f	class:boost::simple_segregated_storage	signature:( void * & start, size_type n, const size_type partition_size)
boost::singleton_pool	/usr/include/boost/pool/singleton_pool.hpp	/^struct singleton_pool$/;"	s	namespace:boost
boost::singleton_pool::BOOST_STATIC_CONSTANT	/usr/include/boost/pool/singleton_pool.hpp	/^    BOOST_STATIC_CONSTANT(unsigned, next_size = NextSize);$/;"	p	struct:boost::singleton_pool	access:public	signature:(unsigned, next_size = NextSize)
boost::singleton_pool::BOOST_STATIC_CONSTANT	/usr/include/boost/pool/singleton_pool.hpp	/^    BOOST_STATIC_CONSTANT(unsigned, requested_size = RequestedSize);$/;"	p	struct:boost::singleton_pool	access:public	signature:(unsigned, requested_size = RequestedSize)
boost::singleton_pool::difference_type	/usr/include/boost/pool/singleton_pool.hpp	/^    typedef typename pool<UserAllocator>::difference_type difference_type;$/;"	t	struct:boost::singleton_pool	access:public
boost::singleton_pool::free	/usr/include/boost/pool/singleton_pool.hpp	/^    static void free(void * const ptr)$/;"	f	struct:boost::singleton_pool	access:public	signature:(void * const ptr)
boost::singleton_pool::free	/usr/include/boost/pool/singleton_pool.hpp	/^    static void free(void * const ptr, const size_type n)$/;"	f	struct:boost::singleton_pool	access:public	signature:(void * const ptr, const size_type n)
boost::singleton_pool::is_from	/usr/include/boost/pool/singleton_pool.hpp	/^    static bool is_from(void * const ptr)$/;"	f	struct:boost::singleton_pool	access:public	signature:(void * const ptr)
boost::singleton_pool::malloc	/usr/include/boost/pool/singleton_pool.hpp	/^    static void * malloc()$/;"	f	struct:boost::singleton_pool	access:public	signature:()
boost::singleton_pool::mutex	/usr/include/boost/pool/singleton_pool.hpp	/^    typedef Mutex mutex;$/;"	t	struct:boost::singleton_pool	access:public
boost::singleton_pool::ordered_free	/usr/include/boost/pool/singleton_pool.hpp	/^    static void ordered_free(void * const ptr)$/;"	f	struct:boost::singleton_pool	access:public	signature:(void * const ptr)
boost::singleton_pool::ordered_free	/usr/include/boost/pool/singleton_pool.hpp	/^    static void ordered_free(void * const ptr, const size_type n)$/;"	f	struct:boost::singleton_pool	access:public	signature:(void * const ptr, const size_type n)
boost::singleton_pool::ordered_malloc	/usr/include/boost/pool/singleton_pool.hpp	/^    static void * ordered_malloc()$/;"	f	struct:boost::singleton_pool	access:public	signature:()
boost::singleton_pool::ordered_malloc	/usr/include/boost/pool/singleton_pool.hpp	/^    static void * ordered_malloc(const size_type n)$/;"	f	struct:boost::singleton_pool	access:public	signature:(const size_type n)
boost::singleton_pool::pool_type	/usr/include/boost/pool/singleton_pool.hpp	/^    struct pool_type: Mutex$/;"	s	struct:boost::singleton_pool	inherits:Mutex	access:private
boost::singleton_pool::pool_type::p	/usr/include/boost/pool/singleton_pool.hpp	/^      pool<UserAllocator> p;$/;"	m	struct:boost::singleton_pool::pool_type	access:public
boost::singleton_pool::pool_type::pool_type	/usr/include/boost/pool/singleton_pool.hpp	/^      pool_type():p(RequestedSize, NextSize) { }$/;"	f	struct:boost::singleton_pool::pool_type	access:public	signature:()
boost::singleton_pool::purge_memory	/usr/include/boost/pool/singleton_pool.hpp	/^    static bool purge_memory()$/;"	f	struct:boost::singleton_pool	access:public	signature:()
boost::singleton_pool::release_memory	/usr/include/boost/pool/singleton_pool.hpp	/^    static bool release_memory()$/;"	f	struct:boost::singleton_pool	access:public	signature:()
boost::singleton_pool::singleton	/usr/include/boost/pool/singleton_pool.hpp	/^    typedef details::pool::singleton_default<pool_type> singleton;$/;"	t	struct:boost::singleton_pool	access:private
boost::singleton_pool::singleton_pool	/usr/include/boost/pool/singleton_pool.hpp	/^    singleton_pool();$/;"	p	struct:boost::singleton_pool	access:private	signature:()
boost::singleton_pool::size_type	/usr/include/boost/pool/singleton_pool.hpp	/^    typedef typename pool<UserAllocator>::size_type size_type;$/;"	t	struct:boost::singleton_pool	access:public
boost::singleton_pool::tag	/usr/include/boost/pool/singleton_pool.hpp	/^    typedef Tag tag;$/;"	t	struct:boost::singleton_pool	access:public
boost::singleton_pool::user_allocator	/usr/include/boost/pool/singleton_pool.hpp	/^    typedef UserAllocator user_allocator;$/;"	t	struct:boost::singleton_pool	access:public
BOOST_MUTEX_HELPER	/usr/include/boost/pool/detail/mutex.hpp	145;"	d
BOOST_MUTEX_HELPER	/usr/include/boost/pool/detail/mutex.hpp	28;"	d
BOOST_MUTEX_HELPER	/usr/include/boost/pool/detail/mutex.hpp	31;"	d
BOOST_MUTEX_HELPER	/usr/include/boost/pool/detail/mutex.hpp	37;"	d
BOOST_MUTEX_HELPER_NONE	/usr/include/boost/pool/detail/mutex.hpp	144;"	d
BOOST_MUTEX_HELPER_NONE	/usr/include/boost/pool/detail/mutex.hpp	18;"	d
BOOST_MUTEX_HELPER_PTHREAD	/usr/include/boost/pool/detail/mutex.hpp	143;"	d
BOOST_MUTEX_HELPER_PTHREAD	/usr/include/boost/pool/detail/mutex.hpp	20;"	d
BOOST_MUTEX_HELPER_WIN32	/usr/include/boost/pool/detail/mutex.hpp	142;"	d
BOOST_MUTEX_HELPER_WIN32	/usr/include/boost/pool/detail/mutex.hpp	19;"	d
BOOST_NO_MT	/usr/include/boost/pool/detail/mutex.hpp	23;"	d
BOOST_NO_PROPER_STL_DEALLOCATE	/usr/include/boost/pool/pool_alloc.hpp	28;"	d
BOOST_NO_TEMPLATE_CV_REF_OVERLOADS	/usr/include/boost/pool/object_pool.hpp	19;"	d
BOOST_OBJECT_POOL_HPP	/usr/include/boost/pool/object_pool.hpp	10;"	d
BOOST_POOLFWD_HPP	/usr/include/boost/pool/poolfwd.hpp	10;"	d
BOOST_POOL_ALLOC_HPP	/usr/include/boost/pool/pool_alloc.hpp	10;"	d
BOOST_POOL_CT_GCD_LCM_HPP	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	10;"	d
BOOST_POOL_GCD_LCM_HPP	/usr/include/boost/pool/detail/gcd_lcm.hpp	10;"	d
BOOST_POOL_GUARD_HPP	/usr/include/boost/pool/detail/guard.hpp	10;"	d
BOOST_POOL_HPP	/usr/include/boost/pool/pool.hpp	10;"	d
BOOST_POOL_MUTEX_HPP	/usr/include/boost/pool/detail/mutex.hpp	10;"	d
BOOST_POOL_SINGLETON_HPP	/usr/include/boost/pool/detail/singleton.hpp	10;"	d
BOOST_SIMPLE_SEGREGATED_STORAGE_HPP	/usr/include/boost/pool/simple_segregated_storage.hpp	10;"	d
BOOST_SINGLETON_POOL_HPP	/usr/include/boost/pool/singleton_pool.hpp	10;"	d
BOOST_STATIC_CONSTANT	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^  BOOST_STATIC_CONSTANT(unsigned, A_mod_B_ = A % B);$/;"	p	struct:boost::details::pool::details::ct_gcd_helper	access:public	signature:(unsigned, A_mod_B_ = A % B)
BOOST_STATIC_CONSTANT	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^  BOOST_STATIC_CONSTANT(unsigned, value = A);$/;"	p	struct:boost::details::pool::details::ct_gcd_helper	access:public	signature:(unsigned, value = A)
BOOST_STATIC_CONSTANT	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^  BOOST_STATIC_CONSTANT(unsigned, value =$/;"	p	struct:boost::details::pool::ct_gcd	access:public	signature:(unsigned, value = (::boost::details::pool::details::ct_gcd_helper<A, B, false>::value) )
BOOST_STATIC_CONSTANT	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^  BOOST_STATIC_CONSTANT(unsigned, value =$/;"	p	struct:boost::details::pool::ct_lcm	access:public	signature:(unsigned, value = (A / ::boost::details::pool::ct_gcd<A, B>::value * B) )
BOOST_STATIC_CONSTANT	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^  BOOST_STATIC_CONSTANT(unsigned, value =$/;"	p	struct:boost::details::pool::details::ct_gcd_helper	access:public	signature:(unsigned, value = (::boost::details::pool::details::ct_gcd_helper< B, static_cast<unsigned>(A_mod_B_), ::boost::type_traits::ice_eq<A_mod_B_, 0>::value >::value) )
BOOST_STATIC_CONSTANT	/usr/include/boost/pool/pool.hpp	/^    BOOST_STATIC_CONSTANT(unsigned, min_alloc_size =$/;"	p	class:boost::pool	access:private	signature:(unsigned, min_alloc_size = (::boost::details::pool::ct_lcm<sizeof(void *), sizeof(size_type)>::value) )
BOOST_STATIC_CONSTANT	/usr/include/boost/pool/pool_alloc.hpp	/^    BOOST_STATIC_CONSTANT(unsigned, next_size = NextSize);$/;"	p	class:boost::fast_pool_allocator	access:public	signature:(unsigned, next_size = NextSize)
BOOST_STATIC_CONSTANT	/usr/include/boost/pool/pool_alloc.hpp	/^    BOOST_STATIC_CONSTANT(unsigned, next_size = NextSize);$/;"	p	class:boost::pool_allocator	access:public	signature:(unsigned, next_size = NextSize)
BOOST_STATIC_CONSTANT	/usr/include/boost/pool/singleton_pool.hpp	/^    BOOST_STATIC_CONSTANT(unsigned, next_size = NextSize);$/;"	p	struct:boost::singleton_pool	access:public	signature:(unsigned, next_size = NextSize)
BOOST_STATIC_CONSTANT	/usr/include/boost/pool/singleton_pool.hpp	/^    BOOST_STATIC_CONSTANT(unsigned, requested_size = RequestedSize);$/;"	p	struct:boost::singleton_pool	access:public	signature:(unsigned, requested_size = RequestedSize)
construct	/usr/include/boost/pool/object_pool.hpp	/^    element_type * construct()$/;"	f	class:boost::object_pool	access:public	signature:()
construct	/usr/include/boost/pool/pool_alloc.hpp	/^    static void construct(const pointer ptr, const value_type & t)$/;"	f	class:boost::pool_allocator	access:public	signature:(const pointer ptr, const value_type & t)
construct	/usr/include/boost/pool/pool_alloc.hpp	/^    void construct(const pointer ptr, const value_type & t)$/;"	f	class:boost::fast_pool_allocator	access:public	signature:(const pointer ptr, const value_type & t)
const_pointer	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef const value_type * const_pointer;$/;"	t	class:boost::fast_pool_allocator	access:public
const_pointer	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef const value_type * const_pointer;$/;"	t	class:boost::pool_allocator	access:public
const_pointer	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef const void* const_pointer;$/;"	t	class:boost::fast_pool_allocator	access:public
const_pointer	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef const void* const_pointer;$/;"	t	class:boost::pool_allocator	access:public
const_reference	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef const value_type & const_reference;$/;"	t	class:boost::fast_pool_allocator	access:public
const_reference	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef const value_type & const_reference;$/;"	t	class:boost::pool_allocator	access:public
create_object	/usr/include/boost/pool/detail/singleton.hpp	/^    static object_creator create_object;$/;"	m	struct:boost::details::pool::singleton_default	access:private
create_object	/usr/include/boost/pool/detail/singleton.hpp	/^singleton_default<T>::create_object;$/;"	m	class:boost::details::pool::singleton_default
ct_gcd	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^struct ct_gcd$/;"	s	namespace:boost::details::pool
ct_gcd_helper	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^struct ct_gcd_helper<A, B, false>$/;"	s	namespace:boost::details::pool::details
ct_gcd_helper	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^struct ct_gcd_helper<A, B, true>$/;"	s	namespace:boost::details::pool::details
ct_lcm	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^struct ct_lcm$/;"	s	namespace:boost::details::pool
deallocate	/usr/include/boost/pool/pool_alloc.hpp	/^    static void deallocate(const pointer ptr)$/;"	f	class:boost::fast_pool_allocator	access:public	signature:(const pointer ptr)
deallocate	/usr/include/boost/pool/pool_alloc.hpp	/^    static void deallocate(const pointer ptr, const size_type n)$/;"	f	class:boost::fast_pool_allocator	access:public	signature:(const pointer ptr, const size_type n)
deallocate	/usr/include/boost/pool/pool_alloc.hpp	/^    static void deallocate(const pointer ptr, const size_type n)$/;"	f	class:boost::pool_allocator	access:public	signature:(const pointer ptr, const size_type n)
default_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^  typedef null_mutex default_mutex;$/;"	t	namespace:boost::details::pool
default_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^  typedef pthread_mutex default_mutex;$/;"	t	namespace:boost::details::pool
default_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^  typedef win32_mutex default_mutex;$/;"	t	namespace:boost::details::pool
default_user_allocator_malloc_free	/usr/include/boost/pool/pool.hpp	/^struct default_user_allocator_malloc_free$/;"	s	namespace:boost
default_user_allocator_new_delete	/usr/include/boost/pool/pool.hpp	/^struct default_user_allocator_new_delete$/;"	s	namespace:boost
destroy	/usr/include/boost/pool/object_pool.hpp	/^    void destroy(element_type * const chunk)$/;"	f	class:boost::object_pool	access:public	signature:(element_type * const chunk)
destroy	/usr/include/boost/pool/pool_alloc.hpp	/^    static void destroy(const pointer ptr)$/;"	f	class:boost::pool_allocator	access:public	signature:(const pointer ptr)
destroy	/usr/include/boost/pool/pool_alloc.hpp	/^    void destroy(const pointer ptr)$/;"	f	class:boost::fast_pool_allocator	access:public	signature:(const pointer ptr)
details	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^namespace details {$/;"	n	namespace:boost
details	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^namespace details {$/;"	n	namespace:boost::details::pool
details	/usr/include/boost/pool/detail/gcd_lcm.hpp	/^namespace details {$/;"	n	namespace:boost
details	/usr/include/boost/pool/detail/guard.hpp	/^namespace details {$/;"	n	namespace:boost
details	/usr/include/boost/pool/detail/mutex.hpp	/^namespace details {$/;"	n	namespace:boost
details	/usr/include/boost/pool/detail/singleton.hpp	/^namespace details {$/;"	n	namespace:boost
details	/usr/include/boost/pool/pool.hpp	/^namespace details {$/;"	n	namespace:boost
difference_type	/usr/include/boost/pool/object_pool.hpp	/^    typedef typename pool<UserAllocator>::difference_type difference_type;$/;"	t	class:boost::object_pool	access:public
difference_type	/usr/include/boost/pool/pool.hpp	/^    typedef typename UserAllocator::difference_type difference_type;$/;"	t	class:boost::pool	access:public
difference_type	/usr/include/boost/pool/pool.hpp	/^  typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::default_user_allocator_malloc_free	access:public
difference_type	/usr/include/boost/pool/pool.hpp	/^  typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::default_user_allocator_new_delete	access:public
difference_type	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef typename pool<UserAllocator>::difference_type difference_type;$/;"	t	class:boost::fast_pool_allocator	access:public
difference_type	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef typename pool<UserAllocator>::difference_type difference_type;$/;"	t	class:boost::pool_allocator	access:public
difference_type	/usr/include/boost/pool/singleton_pool.hpp	/^    typedef typename pool<UserAllocator>::difference_type difference_type;$/;"	t	struct:boost::singleton_pool	access:public
do_nothing	/usr/include/boost/pool/detail/singleton.hpp	/^      inline void do_nothing() const { }$/;"	f	struct:boost::details::pool::singleton_default::object_creator	access:public	signature:() const
element_size	/usr/include/boost/pool/pool.hpp	/^    size_type element_size() const$/;"	f	class:boost::details::PODptr	access:public	signature:() const
element_type	/usr/include/boost/pool/object_pool.hpp	/^    typedef T element_type;$/;"	t	class:boost::object_pool	access:public
empty	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    bool empty() const { return (first == 0); }$/;"	f	class:boost::simple_segregated_storage	access:public	signature:() const
end	/usr/include/boost/pool/pool.hpp	/^    char * end() const { return ptr_next_ptr(); }$/;"	f	class:boost::details::PODptr	access:public	signature:() const
fast_pool_allocator	/usr/include/boost/pool/pool_alloc.hpp	/^    fast_pool_allocator($/;"	f	class:boost::fast_pool_allocator	access:public	signature:( const fast_pool_allocator<U, UserAllocator, Mutex, NextSize> &)
fast_pool_allocator	/usr/include/boost/pool/pool_alloc.hpp	/^    fast_pool_allocator()$/;"	f	class:boost::fast_pool_allocator	access:public	signature:()
fast_pool_allocator	/usr/include/boost/pool/pool_alloc.hpp	/^class fast_pool_allocator$/;"	c	namespace:boost
fast_pool_allocator	/usr/include/boost/pool/pool_alloc.hpp	/^class fast_pool_allocator<void, UserAllocator, Mutex, NextSize>$/;"	c	namespace:boost
fast_pool_allocator_tag	/usr/include/boost/pool/pool_alloc.hpp	/^struct fast_pool_allocator_tag { };$/;"	s	namespace:boost
find_POD	/usr/include/boost/pool/pool.hpp	/^    details::PODptr<size_type> find_POD(void * const chunk) const;$/;"	p	class:boost::pool	access:protected	signature:(void * const chunk) const
find_POD	/usr/include/boost/pool/pool.hpp	/^pool<UserAllocator>::find_POD(void * const chunk) const$/;"	f	class:boost::pool	signature:(void * const chunk) const
find_prev	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void * find_prev(void * ptr);$/;"	p	class:boost::simple_segregated_storage	access:protected	signature:(void * ptr)
find_prev	/usr/include/boost/pool/simple_segregated_storage.hpp	/^void * simple_segregated_storage<SizeType>::find_prev(void * const ptr)$/;"	f	class:boost::simple_segregated_storage	signature:(void * const ptr)
first	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void * first;$/;"	m	class:boost::simple_segregated_storage	access:protected
free	/usr/include/boost/pool/object_pool.hpp	/^    void free(element_type * const chunk)$/;"	f	class:boost::object_pool	access:public	signature:(element_type * const chunk)
free	/usr/include/boost/pool/pool.hpp	/^    void free(void * const chunk)$/;"	f	class:boost::pool	access:public	signature:(void * const chunk)
free	/usr/include/boost/pool/pool.hpp	/^    void free(void * const chunks, const size_type n)$/;"	f	class:boost::pool	access:public	signature:(void * const chunks, const size_type n)
free	/usr/include/boost/pool/pool.hpp	/^  static void free(char * const block)$/;"	f	struct:boost::default_user_allocator_malloc_free	access:public	signature:(char * const block)
free	/usr/include/boost/pool/pool.hpp	/^  static void free(char * const block)$/;"	f	struct:boost::default_user_allocator_new_delete	access:public	signature:(char * const block)
free	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void free(void * const chunk)$/;"	f	class:boost::simple_segregated_storage	access:public	signature:(void * const chunk)
free	/usr/include/boost/pool/singleton_pool.hpp	/^    static void free(void * const ptr)$/;"	f	struct:boost::singleton_pool	access:public	signature:(void * const ptr)
free	/usr/include/boost/pool/singleton_pool.hpp	/^    static void free(void * const ptr, const size_type n)$/;"	f	struct:boost::singleton_pool	access:public	signature:(void * const ptr, const size_type n)
free_n	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void free_n(void * const chunks, const size_type n,$/;"	f	class:boost::simple_segregated_storage	access:public	signature:(void * const chunks, const size_type n, const size_type partition_size)
gcd	/usr/include/boost/pool/detail/gcd_lcm.hpp	/^Integer gcd(Integer A, Integer B)$/;"	f	namespace:boost::details::pool	signature:(Integer A, Integer B)
get_next_size	/usr/include/boost/pool/object_pool.hpp	/^    size_type get_next_size() const { return store().get_next_size(); }$/;"	f	class:boost::object_pool	access:public	signature:() const
get_next_size	/usr/include/boost/pool/pool.hpp	/^    size_type get_next_size() const { return next_size; }$/;"	f	class:boost::pool	access:public	signature:() const
get_requested_size	/usr/include/boost/pool/pool.hpp	/^    size_type get_requested_size() const { return requested_size; }$/;"	f	class:boost::pool	access:public	signature:() const
guard	/usr/include/boost/pool/detail/guard.hpp	/^    explicit guard(Mutex & nmtx)$/;"	f	class:boost::details::pool::guard	access:public	signature:(Mutex & nmtx)
guard	/usr/include/boost/pool/detail/guard.hpp	/^    guard(const guard &);$/;"	p	class:boost::details::pool::guard	access:private	signature:(const guard &)
guard	/usr/include/boost/pool/detail/guard.hpp	/^class guard$/;"	c	namespace:boost::details::pool
instance	/usr/include/boost/pool/detail/singleton.hpp	/^    static object_type & instance()$/;"	f	struct:boost::details::pool::singleton_default	access:public	signature:()
invalidate	/usr/include/boost/pool/pool.hpp	/^    void invalidate() { begin() = 0; }$/;"	f	class:boost::details::PODptr	access:public	signature:()
is_from	/usr/include/boost/pool/object_pool.hpp	/^    bool is_from(element_type * const chunk) const$/;"	f	class:boost::object_pool	access:public	signature:(element_type * const chunk) const
is_from	/usr/include/boost/pool/pool.hpp	/^    bool is_from(void * const chunk) const$/;"	f	class:boost::pool	access:public	signature:(void * const chunk) const
is_from	/usr/include/boost/pool/pool.hpp	/^    static bool is_from(void * const chunk, char * const i,$/;"	f	class:boost::pool	access:protected	signature:(void * const chunk, char * const i, const size_type sizeof_i)
is_from	/usr/include/boost/pool/singleton_pool.hpp	/^    static bool is_from(void * const ptr)$/;"	f	struct:boost::singleton_pool	access:public	signature:(void * const ptr)
lcm	/usr/include/boost/pool/detail/gcd_lcm.hpp	/^Integer lcm(const Integer & A, const Integer & B)$/;"	f	namespace:boost::details::pool	signature:(const Integer & A, const Integer & B)
list	/usr/include/boost/pool/pool.hpp	/^    details::PODptr<size_type> list;$/;"	m	class:boost::pool	access:protected
lock	/usr/include/boost/pool/detail/mutex.hpp	/^    static void lock() { }$/;"	f	class:boost::details::pool::null_mutex	access:public	signature:()
lock	/usr/include/boost/pool/detail/mutex.hpp	/^    void lock()$/;"	f	class:boost::details::pool::pthread_mutex	access:public	signature:()
lock	/usr/include/boost/pool/detail/mutex.hpp	/^    void lock()$/;"	f	class:boost::details::pool::win32_mutex	access:public	signature:()
malloc	/usr/include/boost/pool/object_pool.hpp	/^    element_type * malloc()$/;"	f	class:boost::object_pool	access:public	signature:()
malloc	/usr/include/boost/pool/pool.hpp	/^    void * malloc()$/;"	f	class:boost::pool	access:public	signature:()
malloc	/usr/include/boost/pool/pool.hpp	/^  static char * malloc(const size_type bytes)$/;"	f	struct:boost::default_user_allocator_malloc_free	access:public	signature:(const size_type bytes)
malloc	/usr/include/boost/pool/pool.hpp	/^  static char * malloc(const size_type bytes)$/;"	f	struct:boost::default_user_allocator_new_delete	access:public	signature:(const size_type bytes)
malloc	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void * malloc()$/;"	f	class:boost::simple_segregated_storage	access:public	signature:()
malloc	/usr/include/boost/pool/singleton_pool.hpp	/^    static void * malloc()$/;"	f	struct:boost::singleton_pool	access:public	signature:()
malloc_n	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void * malloc_n(size_type n, size_type partition_size);$/;"	p	class:boost::simple_segregated_storage	access:public	signature:(size_type n, size_type partition_size)
malloc_n	/usr/include/boost/pool/simple_segregated_storage.hpp	/^void * simple_segregated_storage<SizeType>::malloc_n(const size_type n,$/;"	f	class:boost::simple_segregated_storage	signature:(const size_type n, const size_type partition_size)
malloc_need_resize	/usr/include/boost/pool/pool.hpp	/^    void * malloc_need_resize();$/;"	p	class:boost::pool	access:private	signature:()
malloc_need_resize	/usr/include/boost/pool/pool.hpp	/^void * pool<UserAllocator>::malloc_need_resize()$/;"	f	class:boost::pool	signature:()
max_size	/usr/include/boost/pool/pool_alloc.hpp	/^    static size_type max_size()$/;"	f	class:boost::fast_pool_allocator	access:public	signature:()
max_size	/usr/include/boost/pool/pool_alloc.hpp	/^    static size_type max_size()$/;"	f	class:boost::pool_allocator	access:public	signature:()
mtx	/usr/include/boost/pool/detail/guard.hpp	/^    Mutex & mtx;$/;"	m	class:boost::details::pool::guard	access:private
mtx	/usr/include/boost/pool/detail/mutex.hpp	/^    ::CRITICAL_SECTION mtx;$/;"	m	class:boost::details::pool::win32_mutex	access:private
mtx	/usr/include/boost/pool/detail/mutex.hpp	/^    ::pthread_mutex_t mtx;$/;"	m	class:boost::details::pool::pthread_mutex	access:private
mutex	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef Mutex mutex;$/;"	t	class:boost::fast_pool_allocator	access:public
mutex	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef Mutex mutex;$/;"	t	class:boost::pool_allocator	access:public
mutex	/usr/include/boost/pool/singleton_pool.hpp	/^    typedef Mutex mutex;$/;"	t	struct:boost::singleton_pool	access:public
next	/usr/include/boost/pool/pool.hpp	/^    PODptr next() const$/;"	f	class:boost::details::PODptr	access:public	signature:() const
next	/usr/include/boost/pool/pool.hpp	/^    void next(const PODptr & arg) const$/;"	f	class:boost::details::PODptr	access:public	signature:(const PODptr & arg) const
nextof	/usr/include/boost/pool/object_pool.hpp	/^    static void * & nextof(void * const ptr)$/;"	f	class:boost::object_pool	access:protected	signature:(void * const ptr)
nextof	/usr/include/boost/pool/pool.hpp	/^    static void * & nextof(void * const ptr)$/;"	f	class:boost::pool	access:protected	signature:(void * const ptr)
nextof	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    static void * & nextof(void * const ptr)$/;"	f	class:boost::simple_segregated_storage	access:protected	signature:(void * const ptr)
next_ptr	/usr/include/boost/pool/pool.hpp	/^    char * & next_ptr() const$/;"	f	class:boost::details::PODptr	access:public	signature:() const
next_size	/usr/include/boost/pool/pool.hpp	/^    size_type & next_size() const$/;"	f	class:boost::details::PODptr	access:public	signature:() const
next_size	/usr/include/boost/pool/pool.hpp	/^    size_type next_size;$/;"	m	class:boost::pool	access:protected
null_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^    null_mutex() { }$/;"	f	class:boost::details::pool::null_mutex	access:public	signature:()
null_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^    null_mutex(const null_mutex &);$/;"	p	class:boost::details::pool::null_mutex	access:private	signature:(const null_mutex &)
null_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^class null_mutex$/;"	c	namespace:boost::details::pool
object_creator	/usr/include/boost/pool/detail/singleton.hpp	/^      object_creator() { singleton_default<T>::instance(); }$/;"	f	struct:boost::details::pool::singleton_default::object_creator	access:public	signature:()
object_creator	/usr/include/boost/pool/detail/singleton.hpp	/^    struct object_creator$/;"	s	struct:boost::details::pool::singleton_default	access:private
object_pool	/usr/include/boost/pool/object_pool.hpp	/^    explicit object_pool(const size_type next_size = 32)$/;"	f	class:boost::object_pool	access:public	signature:(const size_type next_size = 32)
object_pool	/usr/include/boost/pool/object_pool.hpp	/^class object_pool: protected pool<UserAllocator>$/;"	c	namespace:boost	inherits:pool
object_type	/usr/include/boost/pool/detail/singleton.hpp	/^    typedef T object_type;$/;"	t	struct:boost::details::pool::singleton_default	access:public
operator !=	/usr/include/boost/pool/pool_alloc.hpp	/^    bool operator!=(const fast_pool_allocator &) const$/;"	f	class:boost::fast_pool_allocator	access:public	signature:(const fast_pool_allocator &) const
operator !=	/usr/include/boost/pool/pool_alloc.hpp	/^    bool operator!=(const pool_allocator &) const$/;"	f	class:boost::pool_allocator	access:public	signature:(const pool_allocator &) const
operator =	/usr/include/boost/pool/detail/guard.hpp	/^    void operator=(const guard &);$/;"	p	class:boost::details::pool::guard	access:private	signature:(const guard &)
operator =	/usr/include/boost/pool/detail/mutex.hpp	/^    void operator=(const null_mutex &);$/;"	p	class:boost::details::pool::null_mutex	access:private	signature:(const null_mutex &)
operator =	/usr/include/boost/pool/detail/mutex.hpp	/^    void operator=(const pthread_mutex &);$/;"	p	class:boost::details::pool::pthread_mutex	access:private	signature:(const pthread_mutex &)
operator =	/usr/include/boost/pool/detail/mutex.hpp	/^    void operator=(const win32_mutex &);$/;"	p	class:boost::details::pool::win32_mutex	access:private	signature:(const win32_mutex &)
operator =	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void operator=(const simple_segregated_storage &);$/;"	p	class:boost::simple_segregated_storage	access:private	signature:(const simple_segregated_storage &)
operator ==	/usr/include/boost/pool/pool_alloc.hpp	/^    bool operator==(const fast_pool_allocator &) const$/;"	f	class:boost::fast_pool_allocator	access:public	signature:(const fast_pool_allocator &) const
operator ==	/usr/include/boost/pool/pool_alloc.hpp	/^    bool operator==(const pool_allocator &) const$/;"	f	class:boost::pool_allocator	access:public	signature:(const pool_allocator &) const
ordered_free	/usr/include/boost/pool/pool.hpp	/^    void ordered_free(void * const chunk)$/;"	f	class:boost::pool	access:public	signature:(void * const chunk)
ordered_free	/usr/include/boost/pool/pool.hpp	/^    void ordered_free(void * const chunks, const size_type n)$/;"	f	class:boost::pool	access:public	signature:(void * const chunks, const size_type n)
ordered_free	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void ordered_free(void * const chunk)$/;"	f	class:boost::simple_segregated_storage	access:public	signature:(void * const chunk)
ordered_free	/usr/include/boost/pool/singleton_pool.hpp	/^    static void ordered_free(void * const ptr)$/;"	f	struct:boost::singleton_pool	access:public	signature:(void * const ptr)
ordered_free	/usr/include/boost/pool/singleton_pool.hpp	/^    static void ordered_free(void * const ptr, const size_type n)$/;"	f	struct:boost::singleton_pool	access:public	signature:(void * const ptr, const size_type n)
ordered_free_n	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    void ordered_free_n(void * const chunks, const size_type n,$/;"	f	class:boost::simple_segregated_storage	access:public	signature:(void * const chunks, const size_type n, const size_type partition_size)
ordered_malloc	/usr/include/boost/pool/pool.hpp	/^    void * ordered_malloc()$/;"	f	class:boost::pool	access:public	signature:()
ordered_malloc	/usr/include/boost/pool/pool.hpp	/^    void * ordered_malloc(size_type n);$/;"	p	class:boost::pool	access:public	signature:(size_type n)
ordered_malloc	/usr/include/boost/pool/pool.hpp	/^void * pool<UserAllocator>::ordered_malloc(const size_type n)$/;"	f	class:boost::pool	signature:(const size_type n)
ordered_malloc	/usr/include/boost/pool/singleton_pool.hpp	/^    static void * ordered_malloc()$/;"	f	struct:boost::singleton_pool	access:public	signature:()
ordered_malloc	/usr/include/boost/pool/singleton_pool.hpp	/^    static void * ordered_malloc(const size_type n)$/;"	f	struct:boost::singleton_pool	access:public	signature:(const size_type n)
ordered_malloc_need_resize	/usr/include/boost/pool/pool.hpp	/^    void * ordered_malloc_need_resize();$/;"	p	class:boost::pool	access:private	signature:()
ordered_malloc_need_resize	/usr/include/boost/pool/pool.hpp	/^void * pool<UserAllocator>::ordered_malloc_need_resize()$/;"	f	class:boost::pool	signature:()
other	/usr/include/boost/pool/pool_alloc.hpp	/^        typedef fast_pool_allocator<U, UserAllocator, Mutex, NextSize> other;$/;"	t	struct:boost::fast_pool_allocator::rebind	access:public
other	/usr/include/boost/pool/pool_alloc.hpp	/^        typedef pool_allocator<U, UserAllocator, Mutex, NextSize> other;$/;"	t	struct:boost::pool_allocator::rebind	access:public
other	/usr/include/boost/pool/pool_alloc.hpp	/^      typedef fast_pool_allocator<U, UserAllocator, Mutex, NextSize> other;$/;"	t	struct:boost::fast_pool_allocator::rebind	access:public
other	/usr/include/boost/pool/pool_alloc.hpp	/^      typedef pool_allocator<U, UserAllocator, Mutex, NextSize> other;$/;"	t	struct:boost::pool_allocator::rebind	access:public
p	/usr/include/boost/pool/singleton_pool.hpp	/^      pool<UserAllocator> p;$/;"	m	struct:boost::singleton_pool::pool_type	access:public
PODptr	/usr/include/boost/pool/pool.hpp	/^    PODptr()$/;"	f	class:boost::details::PODptr	access:public	signature:()
PODptr	/usr/include/boost/pool/pool.hpp	/^    PODptr(char * const nptr, const size_type nsize)$/;"	f	class:boost::details::PODptr	access:public	signature:(char * const nptr, const size_type nsize)
PODptr	/usr/include/boost/pool/pool.hpp	/^class PODptr$/;"	c	namespace:boost::details
pointer	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef value_type * pointer;$/;"	t	class:boost::fast_pool_allocator	access:public
pointer	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef value_type * pointer;$/;"	t	class:boost::pool_allocator	access:public
pointer	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef void*       pointer;$/;"	t	class:boost::fast_pool_allocator	access:public
pointer	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef void*       pointer;$/;"	t	class:boost::pool_allocator	access:public
pool	/usr/include/boost/pool/detail/ct_gcd_lcm.hpp	/^namespace pool {$/;"	n	namespace:boost::details
pool	/usr/include/boost/pool/detail/gcd_lcm.hpp	/^namespace pool {$/;"	n	namespace:boost::details
pool	/usr/include/boost/pool/detail/guard.hpp	/^namespace pool {$/;"	n	namespace:boost::details
pool	/usr/include/boost/pool/detail/mutex.hpp	/^namespace pool {$/;"	n	namespace:boost::details
pool	/usr/include/boost/pool/detail/singleton.hpp	/^namespace pool {$/;"	n	namespace:boost::details
pool	/usr/include/boost/pool/pool.hpp	/^    explicit pool(const size_type nrequested_size,$/;"	f	class:boost::pool	access:public	signature:(const size_type nrequested_size, const size_type nnext_size = 32)
pool	/usr/include/boost/pool/pool.hpp	/^class pool: protected simple_segregated_storage<$/;"	c	namespace:boost	inherits:simple_segregated_storage
pool_allocator	/usr/include/boost/pool/pool_alloc.hpp	/^    pool_allocator()$/;"	f	class:boost::pool_allocator	access:public	signature:()
pool_allocator	/usr/include/boost/pool/pool_alloc.hpp	/^    pool_allocator(const pool_allocator<U, UserAllocator, Mutex, NextSize> &)$/;"	f	class:boost::pool_allocator	access:public	signature:(const pool_allocator<U, UserAllocator, Mutex, NextSize> &)
pool_allocator	/usr/include/boost/pool/pool_alloc.hpp	/^class pool_allocator$/;"	c	namespace:boost
pool_allocator	/usr/include/boost/pool/pool_alloc.hpp	/^class pool_allocator<void, UserAllocator, Mutex, NextSize>$/;"	c	namespace:boost
pool_allocator_tag	/usr/include/boost/pool/pool_alloc.hpp	/^struct pool_allocator_tag { };$/;"	s	namespace:boost
pool_type	/usr/include/boost/pool/singleton_pool.hpp	/^      pool_type():p(RequestedSize, NextSize) { }$/;"	f	struct:boost::singleton_pool::pool_type	access:public	signature:()
pool_type	/usr/include/boost/pool/singleton_pool.hpp	/^    struct pool_type: Mutex$/;"	s	struct:boost::singleton_pool	inherits:Mutex	access:private
pthread_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^    pthread_mutex()$/;"	f	class:boost::details::pool::pthread_mutex	access:public	signature:()
pthread_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^    pthread_mutex(const pthread_mutex &);$/;"	p	class:boost::details::pool::pthread_mutex	access:private	signature:(const pthread_mutex &)
pthread_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^class pthread_mutex$/;"	c	namespace:boost::details::pool
ptr	/usr/include/boost/pool/pool.hpp	/^    char * ptr;$/;"	m	class:boost::details::PODptr	access:private
ptr_next_ptr	/usr/include/boost/pool/pool.hpp	/^    char * ptr_next_ptr() const$/;"	f	class:boost::details::PODptr	access:private	signature:() const
ptr_next_size	/usr/include/boost/pool/pool.hpp	/^    char * ptr_next_size() const$/;"	f	class:boost::details::PODptr	access:private	signature:() const
purge_memory	/usr/include/boost/pool/pool.hpp	/^    bool purge_memory();$/;"	p	class:boost::pool	access:public	signature:()
purge_memory	/usr/include/boost/pool/pool.hpp	/^bool pool<UserAllocator>::purge_memory()$/;"	f	class:boost::pool	signature:()
purge_memory	/usr/include/boost/pool/singleton_pool.hpp	/^    static bool purge_memory()$/;"	f	struct:boost::singleton_pool	access:public	signature:()
rebind	/usr/include/boost/pool/pool_alloc.hpp	/^    struct rebind$/;"	s	class:boost::fast_pool_allocator	access:public
rebind	/usr/include/boost/pool/pool_alloc.hpp	/^    struct rebind$/;"	s	class:boost::pool_allocator	access:public
rebind	/usr/include/boost/pool/pool_alloc.hpp	/^    template <class U> struct rebind {$/;"	s	class:boost::fast_pool_allocator	access:public
rebind	/usr/include/boost/pool/pool_alloc.hpp	/^    template <class U> struct rebind {$/;"	s	class:boost::pool_allocator	access:public
reference	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef value_type & reference;$/;"	t	class:boost::fast_pool_allocator	access:public
reference	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef value_type & reference;$/;"	t	class:boost::pool_allocator	access:public
release_memory	/usr/include/boost/pool/pool.hpp	/^    bool release_memory();$/;"	p	class:boost::pool	access:public	signature:()
release_memory	/usr/include/boost/pool/pool.hpp	/^bool pool<UserAllocator>::release_memory()$/;"	f	class:boost::pool	signature:()
release_memory	/usr/include/boost/pool/singleton_pool.hpp	/^    static bool release_memory()$/;"	f	struct:boost::singleton_pool	access:public	signature:()
requested_size	/usr/include/boost/pool/pool.hpp	/^    const size_type requested_size;$/;"	m	class:boost::pool	access:protected
segregate	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    static void * segregate(void * block,$/;"	p	class:boost::simple_segregated_storage	access:public	signature:(void * block, size_type nsz, size_type npartition_sz, void * end = 0)
segregate	/usr/include/boost/pool/simple_segregated_storage.hpp	/^void * simple_segregated_storage<SizeType>::segregate($/;"	f	class:boost::simple_segregated_storage	signature:( void * const block, const size_type sz, const size_type partition_sz, void * const end)
set_next_size	/usr/include/boost/pool/object_pool.hpp	/^    void set_next_size(const size_type x) { store().set_next_size(x); }$/;"	f	class:boost::object_pool	access:public	signature:(const size_type x)
set_next_size	/usr/include/boost/pool/pool.hpp	/^    void set_next_size(const size_type nnext_size) { next_size = start_size = nnext_size; }$/;"	f	class:boost::pool	access:public	signature:(const size_type nnext_size)
simple_segregated_storage	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    simple_segregated_storage()$/;"	f	class:boost::simple_segregated_storage	access:public	signature:()
simple_segregated_storage	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    simple_segregated_storage(const simple_segregated_storage &);$/;"	p	class:boost::simple_segregated_storage	access:private	signature:(const simple_segregated_storage &)
simple_segregated_storage	/usr/include/boost/pool/simple_segregated_storage.hpp	/^class simple_segregated_storage$/;"	c	namespace:boost
singleton	/usr/include/boost/pool/singleton_pool.hpp	/^    typedef details::pool::singleton_default<pool_type> singleton;$/;"	t	struct:boost::singleton_pool	access:private
singleton_default	/usr/include/boost/pool/detail/singleton.hpp	/^    singleton_default();$/;"	p	struct:boost::details::pool::singleton_default	access:private	signature:()
singleton_default	/usr/include/boost/pool/detail/singleton.hpp	/^struct singleton_default$/;"	s	namespace:boost::details::pool
singleton_pool	/usr/include/boost/pool/singleton_pool.hpp	/^    singleton_pool();$/;"	p	struct:boost::singleton_pool	access:private	signature:()
singleton_pool	/usr/include/boost/pool/singleton_pool.hpp	/^struct singleton_pool$/;"	s	namespace:boost
size_type	/usr/include/boost/pool/object_pool.hpp	/^    typedef typename pool<UserAllocator>::size_type size_type;$/;"	t	class:boost::object_pool	access:public
size_type	/usr/include/boost/pool/pool.hpp	/^    typedef SizeType size_type;$/;"	t	class:boost::details::PODptr	access:public
size_type	/usr/include/boost/pool/pool.hpp	/^    typedef typename UserAllocator::size_type size_type;$/;"	t	class:boost::pool	access:public
size_type	/usr/include/boost/pool/pool.hpp	/^  typedef std::size_t size_type;$/;"	t	struct:boost::default_user_allocator_malloc_free	access:public
size_type	/usr/include/boost/pool/pool.hpp	/^  typedef std::size_t size_type;$/;"	t	struct:boost::default_user_allocator_new_delete	access:public
size_type	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef typename pool<UserAllocator>::size_type size_type;$/;"	t	class:boost::fast_pool_allocator	access:public
size_type	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef typename pool<UserAllocator>::size_type size_type;$/;"	t	class:boost::pool_allocator	access:public
size_type	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    typedef SizeType size_type;$/;"	t	class:boost::simple_segregated_storage	access:public
size_type	/usr/include/boost/pool/singleton_pool.hpp	/^    typedef typename pool<UserAllocator>::size_type size_type;$/;"	t	struct:boost::singleton_pool	access:public
start_size	/usr/include/boost/pool/pool.hpp	/^    size_type start_size;$/;"	m	class:boost::pool	access:protected
std	/usr/include/boost/pool/pool.hpp	/^ namespace std { using ::malloc; using ::free; }$/;"	n
store	/usr/include/boost/pool/object_pool.hpp	/^    const pool<UserAllocator> & store() const { return *this; }$/;"	f	class:boost::object_pool	access:protected	signature:() const
store	/usr/include/boost/pool/object_pool.hpp	/^    pool<UserAllocator> & store() { return *this; }$/;"	f	class:boost::object_pool	access:protected	signature:()
store	/usr/include/boost/pool/pool.hpp	/^    const simple_segregated_storage<size_type> & store() const { return *this; }$/;"	f	class:boost::pool	access:protected	signature:() const
store	/usr/include/boost/pool/pool.hpp	/^    simple_segregated_storage<size_type> & store() { return *this; }$/;"	f	class:boost::pool	access:protected	signature:()
sz	/usr/include/boost/pool/pool.hpp	/^    size_type sz;$/;"	m	class:boost::details::PODptr	access:private
tag	/usr/include/boost/pool/singleton_pool.hpp	/^    typedef Tag tag;$/;"	t	struct:boost::singleton_pool	access:public
total_size	/usr/include/boost/pool/pool.hpp	/^    size_type total_size() const { return sz; }$/;"	f	class:boost::details::PODptr	access:public	signature:() const
try_malloc_n	/usr/include/boost/pool/simple_segregated_storage.hpp	/^    static void * try_malloc_n(void * & start, size_type n,$/;"	p	class:boost::simple_segregated_storage	access:private	signature:(void * & start, size_type n, size_type partition_size)
try_malloc_n	/usr/include/boost/pool/simple_segregated_storage.hpp	/^void * simple_segregated_storage<SizeType>::try_malloc_n($/;"	f	class:boost::simple_segregated_storage	signature:( void * & start, size_type n, const size_type partition_size)
unlock	/usr/include/boost/pool/detail/mutex.hpp	/^    static void unlock() { }$/;"	f	class:boost::details::pool::null_mutex	access:public	signature:()
unlock	/usr/include/boost/pool/detail/mutex.hpp	/^    void unlock()$/;"	f	class:boost::details::pool::pthread_mutex	access:public	signature:()
unlock	/usr/include/boost/pool/detail/mutex.hpp	/^    void unlock()$/;"	f	class:boost::details::pool::win32_mutex	access:public	signature:()
user_allocator	/usr/include/boost/pool/object_pool.hpp	/^    typedef UserAllocator user_allocator;$/;"	t	class:boost::object_pool	access:public
user_allocator	/usr/include/boost/pool/pool.hpp	/^    typedef UserAllocator user_allocator;$/;"	t	class:boost::pool	access:public
user_allocator	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef UserAllocator user_allocator;$/;"	t	class:boost::fast_pool_allocator	access:public
user_allocator	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef UserAllocator user_allocator;$/;"	t	class:boost::pool_allocator	access:public
user_allocator	/usr/include/boost/pool/singleton_pool.hpp	/^    typedef UserAllocator user_allocator;$/;"	t	struct:boost::singleton_pool	access:public
valid	/usr/include/boost/pool/pool.hpp	/^    bool valid() const { return (begin() != 0); }$/;"	f	class:boost::details::PODptr	access:public	signature:() const
value_type	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef T value_type;$/;"	t	class:boost::fast_pool_allocator	access:public
value_type	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef T value_type;$/;"	t	class:boost::pool_allocator	access:public
value_type	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef void        value_type;$/;"	t	class:boost::fast_pool_allocator	access:public
value_type	/usr/include/boost/pool/pool_alloc.hpp	/^    typedef void        value_type;$/;"	t	class:boost::pool_allocator	access:public
win32_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^    win32_mutex()$/;"	f	class:boost::details::pool::win32_mutex	access:public	signature:()
win32_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^    win32_mutex(const win32_mutex &);$/;"	p	class:boost::details::pool::win32_mutex	access:private	signature:(const win32_mutex &)
win32_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^class win32_mutex$/;"	c	namespace:boost::details::pool
~guard	/usr/include/boost/pool/detail/guard.hpp	/^    ~guard() { mtx.unlock(); }$/;"	f	class:boost::details::pool::guard	access:public	signature:()
~object_pool	/usr/include/boost/pool/object_pool.hpp	/^    ~object_pool();$/;"	p	class:boost::object_pool	access:public	signature:()
~object_pool	/usr/include/boost/pool/object_pool.hpp	/^object_pool<T, UserAllocator>::~object_pool()$/;"	f	class:boost::object_pool	signature:()
~pool	/usr/include/boost/pool/pool.hpp	/^    ~pool() { purge_memory(); }$/;"	f	class:boost::pool	access:public	signature:()
~pthread_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^    ~pthread_mutex()$/;"	f	class:boost::details::pool::pthread_mutex	access:public	signature:()
~win32_mutex	/usr/include/boost/pool/detail/mutex.hpp	/^    ~win32_mutex()$/;"	f	class:boost::details::pool::win32_mutex	access:public	signature:()
