!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	2	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
a	/usr/include/boost/asio/read_until.hpp	/^        struct big { char a[100]; };$/;"	m	struct:boost::asio::detail::has_result_type::inner::big	access:public
accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code accept($/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:( basic_socket<protocol_type, SocketService>& peer, boost::system::error_code& ec)
accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code accept($/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:( basic_socket<protocol_type, SocketService>& peer, endpoint_type& peer_endpoint, boost::system::error_code& ec)
accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void accept(basic_socket<protocol_type, SocketService>& peer)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(basic_socket<protocol_type, SocketService>& peer)
accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void accept(basic_socket<protocol_type, SocketService>& peer,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(basic_socket<protocol_type, SocketService>& peer, endpoint_type& peer_endpoint)
accept	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  boost::system::error_code accept(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, Socket& peer, endpoint_type* peer_endpoint, boost::system::error_code& ec)
accept	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline socket_type accept(socket_type s, socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
accept	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code accept(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, basic_socket<protocol_type, SocketService>& peer, endpoint_type* peer_endpoint, boost::system::error_code& ec)
acceptor	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_socket_acceptor<tcp> acceptor;$/;"	t	class:boost::asio::ip::tcp	access:public
acceptor	/usr/include/boost/asio/local/stream_protocol.hpp	/^  typedef basic_socket_acceptor<stream_protocol> acceptor;$/;"	t	class:boost::asio::local::stream_protocol	access:public
access_denied	/usr/include/boost/asio/error.hpp	/^  access_denied = BOOST_ASIO_SOCKET_ERROR(EACCES),$/;"	e	enum:boost::asio::error::basic_errors
adapt_completion_condition_result	/usr/include/boost/asio/completion_condition.hpp	/^inline std::size_t adapt_completion_condition_result(bool result)$/;"	f	namespace:boost::asio::detail	signature:(bool result)
adapt_completion_condition_result	/usr/include/boost/asio/completion_condition.hpp	/^inline std::size_t adapt_completion_condition_result(std::size_t result)$/;"	f	namespace:boost::asio::detail	signature:(std::size_t result)
add	/usr/include/boost/asio/time_traits.hpp	/^  static time_type add(const time_type& t, const duration_type& d)$/;"	f	struct:boost::asio::time_traits	access:public	signature:(const time_type& t, const duration_type& d)
address	/usr/include/boost/asio/ip/address.hpp	/^  address()$/;"	f	class:boost::asio::ip::address	access:public	signature:()
address	/usr/include/boost/asio/ip/address.hpp	/^  address(const address& other)$/;"	f	class:boost::asio::ip::address	access:public	signature:(const address& other)
address	/usr/include/boost/asio/ip/address.hpp	/^  address(const boost::asio::ip::address_v4& ipv4_address)$/;"	f	class:boost::asio::ip::address	access:public	signature:(const boost::asio::ip::address_v4& ipv4_address)
address	/usr/include/boost/asio/ip/address.hpp	/^  address(const boost::asio::ip::address_v6& ipv6_address)$/;"	f	class:boost::asio::ip::address	access:public	signature:(const boost::asio::ip::address_v6& ipv6_address)
address	/usr/include/boost/asio/ip/address.hpp	/^class address$/;"	c	namespace:boost::asio::ip
address	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  boost::asio::ip::address address() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
address	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  void address(const boost::asio::ip::address& addr)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(const boost::asio::ip::address& addr)
address_configured	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const int address_configured = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
address_family_not_supported	/usr/include/boost/asio/error.hpp	/^  address_family_not_supported = BOOST_ASIO_SOCKET_ERROR(EAFNOSUPPORT),$/;"	e	enum:boost::asio::error::basic_errors
address_in_use	/usr/include/boost/asio/error.hpp	/^  address_in_use = BOOST_ASIO_SOCKET_ERROR(EADDRINUSE),$/;"	e	enum:boost::asio::error::basic_errors
address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^  address_v4()$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:()
address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^  address_v4(const address_v4& other)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const address_v4& other)
address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^  explicit address_v4(const bytes_type& bytes)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const bytes_type& bytes)
address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^  explicit address_v4(unsigned long addr)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(unsigned long addr)
address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^class address_v4$/;"	c	namespace:boost::asio::ip
address_v6	/usr/include/boost/asio/ip/address_v6.hpp	/^  address_v6()$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:()
address_v6	/usr/include/boost/asio/ip/address_v6.hpp	/^  address_v6(const address_v6& other)$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(const address_v6& other)
address_v6	/usr/include/boost/asio/ip/address_v6.hpp	/^  explicit address_v6(const bytes_type& bytes, unsigned long scope_id = 0)$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(const bytes_type& bytes, unsigned long scope_id = 0)
address_v6	/usr/include/boost/asio/ip/address_v6.hpp	/^class address_v6$/;"	c	namespace:boost::asio::ip
addrinfo_category	/usr/include/boost/asio/error.hpp	/^class addrinfo_category : public boost::system::error_category$/;"	c	namespace:boost::asio::error::detail	inherits:boost::system::error_category
addrinfo_category	/usr/include/boost/asio/error.hpp	/^static const boost::system::error_category& addrinfo_category$/;"	m	namespace:boost::asio::error
addrinfo_emulation	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^struct addrinfo_emulation$/;"	s	namespace:boost::asio::detail
addrinfo_errors	/usr/include/boost/asio/error.hpp	/^enum addrinfo_errors$/;"	g	namespace:boost::asio::error
addrinfo_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef addrinfo addrinfo_type;$/;"	t	namespace:boost::asio::detail
addrinfo_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef addrinfo_emulation addrinfo_type;$/;"	t	namespace:boost::asio::detail
addr_	/usr/include/boost/asio/ip/address_v4.hpp	/^  boost::asio::detail::in4_addr_type addr_;$/;"	m	class:boost::asio::ip::address_v4	access:private
addr_	/usr/include/boost/asio/ip/address_v6.hpp	/^  boost::asio::detail::in6_addr_type addr_;$/;"	m	class:boost::asio::ip::address_v6	access:private
add_pending_event_change	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  ::pollfd& add_pending_event_change(int descriptor)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:private	signature:(int descriptor)
add_service	/usr/include/boost/asio/detail/service_registry.hpp	/^  bool add_service(Service* new_service)$/;"	f	class:boost::asio::detail::service_registry	access:public	signature:(Service* new_service)
add_service	/usr/include/boost/asio/io_service.hpp	/^  friend void add_service(io_service& ios, Service* svc);$/;"	p	class:boost::asio::io_service	access:friend	signature:(io_service& ios, Service* svc)
add_service	/usr/include/boost/asio/io_service.hpp	/^template <typename Service> void add_service(io_service& ios, Service* svc);$/;"	p	namespace:boost::asio	signature:(io_service& ios, Service* svc)
add_timer_queue	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void add_timer_queue(timer_queue<Time_Traits>& timer_queue)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
add_timer_queue	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void add_timer_queue(timer_queue<Time_Traits>& timer_queue)$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
add_timer_queue	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void add_timer_queue(timer_queue<Time_Traits>& timer_queue)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
add_timer_queue	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void add_timer_queue(timer_queue<Time_Traits>& timer_queue)$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
add_timer_queue	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void add_timer_queue(timer_queue<Time_Traits>& timer_queue)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
add_verify_path	/usr/include/boost/asio/ssl/basic_context.hpp	/^  boost::system::error_code add_verify_path(const std::string& path,$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& path, boost::system::error_code& ec)
add_verify_path	/usr/include/boost/asio/ssl/basic_context.hpp	/^  void add_verify_path(const std::string& path)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& path)
add_verify_path	/usr/include/boost/asio/ssl/context_service.hpp	/^  boost::system::error_code add_verify_path(impl_type& impl,$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, const std::string& path, boost::system::error_code& ec)
add_verify_path	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  boost::system::error_code add_verify_path(impl_type& impl,$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& path, boost::system::error_code& ec)
advance	/usr/include/boost/asio/buffers_iterator.hpp	/^  void advance(std::ptrdiff_t n)$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:(std::ptrdiff_t n)
ai_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    boost::asio::detail::addrinfo_type* ai_;$/;"	m	class:boost::asio::detail::resolver_service::auto_addrinfo	access:private
ai_addr	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  sockaddr* ai_addr;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
ai_addrlen	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  size_t ai_addrlen;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
ai_canonname	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  char* ai_canonname;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
AI_CANONNAME	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	115;"	d
ai_family	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  int ai_family;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
ai_flags	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  int ai_flags;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
ai_next	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  addrinfo_emulation* ai_next;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
AI_NUMERICHOST	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	119;"	d
AI_PASSIVE	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	111;"	d
ai_protocol	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  int ai_protocol;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
ai_socktype	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  int ai_socktype;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
allocate	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^inline void* allocate(std::size_t s, Handler& h)$/;"	f	namespace:boost_asio_handler_alloc_helpers	signature:(std::size_t s, Handler& h)
allow_speculative_read	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    bool allow_speculative_read;$/;"	m	struct:boost::asio::detail::epoll_reactor::per_descriptor_data	access:public
allow_speculative_read	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    bool allow_speculative_read;$/;"	m	struct:boost::asio::detail::kqueue_reactor::per_descriptor_data	access:public
allow_speculative_write	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    bool allow_speculative_write;$/;"	m	struct:boost::asio::detail::epoll_reactor::per_descriptor_data	access:public
allow_speculative_write	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    bool allow_speculative_write;$/;"	m	struct:boost::asio::detail::kqueue_reactor::per_descriptor_data	access:public
all_matching	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const int all_matching = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
all_timer_queues_are_empty	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  bool all_timer_queues_are_empty() const$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:private	signature:() const
all_timer_queues_are_empty	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  bool all_timer_queues_are_empty() const$/;"	f	class:boost::asio::detail::epoll_reactor	access:private	signature:() const
all_timer_queues_are_empty	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  bool all_timer_queues_are_empty() const$/;"	f	class:boost::asio::detail::kqueue_reactor	access:private	signature:() const
all_timer_queues_are_empty	/usr/include/boost/asio/detail/select_reactor.hpp	/^  bool all_timer_queues_are_empty() const$/;"	f	class:boost::asio::detail::select_reactor	access:private	signature:() const
all_timer_queues_are_empty	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  bool all_timer_queues_are_empty() const$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:private	signature:() const
already_connected	/usr/include/boost/asio/error.hpp	/^  already_connected = BOOST_ASIO_SOCKET_ERROR(EISCONN),$/;"	e	enum:boost::asio::error::basic_errors
already_open	/usr/include/boost/asio/error.hpp	/^  already_open = 1,$/;"	e	enum:boost::asio::error::misc_errors
already_started	/usr/include/boost/asio/error.hpp	/^  already_started = BOOST_ASIO_SOCKET_ERROR(EALREADY),$/;"	e	enum:boost::asio::error::basic_errors
always_fail_option	/usr/include/boost/asio/detail/socket_types.hpp	/^const int always_fail_option = 2;$/;"	m	namespace:boost::asio::detail
any	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 any()$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:()
any	/usr/include/boost/asio/ip/address_v6.hpp	/^  static address_v6 any()$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:()
apc_function	/usr/include/boost/asio/detail/win_thread.hpp	/^  friend void __stdcall apc_function(ULONG);$/;"	p	class:boost::asio::detail::win_thread	access:friend	signature:(ULONG)
apc_function	/usr/include/boost/asio/detail/win_thread.hpp	/^  friend void __stdcall apc_function(ULONG_PTR);$/;"	p	class:boost::asio::detail::win_thread	access:friend	signature:(ULONG_PTR)
apc_function	/usr/include/boost/asio/detail/win_thread.hpp	/^inline void __stdcall apc_function(ULONG) {}$/;"	f	namespace:boost::asio::detail	signature:(ULONG)
apc_function	/usr/include/boost/asio/detail/win_thread.hpp	/^inline void __stdcall apc_function(ULONG_PTR) {}$/;"	f	namespace:boost::asio::detail	signature:(ULONG_PTR)
apc_function	/usr/include/boost/asio/detail/win_thread.hpp	/^void __stdcall apc_function(ULONG data);$/;"	p	namespace:boost::asio::detail	signature:(ULONG data)
apc_function	/usr/include/boost/asio/detail/win_thread.hpp	/^void __stdcall apc_function(ULONG_PTR data);$/;"	p	namespace:boost::asio::detail	signature:(ULONG_PTR data)
arg1_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:boost::asio::detail::binder1	access:public
arg1_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:boost::asio::detail::binder2	access:public
arg1_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:boost::asio::detail::binder3	access:public
arg1_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:boost::asio::detail::binder4	access:public
arg1_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:boost::asio::detail::binder5	access:public
arg2_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg2 arg2_;$/;"	m	class:boost::asio::detail::binder2	access:public
arg2_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg2 arg2_;$/;"	m	class:boost::asio::detail::binder3	access:public
arg2_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg2 arg2_;$/;"	m	class:boost::asio::detail::binder4	access:public
arg2_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg2 arg2_;$/;"	m	class:boost::asio::detail::binder5	access:public
arg3_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg3 arg3_;$/;"	m	class:boost::asio::detail::binder3	access:public
arg3_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg3 arg3_;$/;"	m	class:boost::asio::detail::binder4	access:public
arg3_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg3 arg3_;$/;"	m	class:boost::asio::detail::binder5	access:public
arg4_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg4 arg4_;$/;"	m	class:boost::asio::detail::binder4	access:public
arg4_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg4 arg4_;$/;"	m	class:boost::asio::detail::binder5	access:public
arg5_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg5 arg5_;$/;"	m	class:boost::asio::detail::binder5	access:public
asio	/usr/include/boost/asio/basic_datagram_socket.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_deadline_timer.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_io_object.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_raw_socket.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_serial_port.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_socket.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_socket_iostream.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_streambuf.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/basic_stream_socket.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/buffer.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/buffered_read_stream.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/buffered_read_stream_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/buffered_stream.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/buffered_stream_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/buffered_write_stream.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/buffered_write_stream_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/buffers_iterator.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/completion_condition.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/datagram_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/deadline_timer.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/deadline_timer_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/bind_handler.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/call_stack.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/dev_poll_reactor_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/epoll_reactor_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/event.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/fd_set_adapter.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/handler_base_from_member.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/handler_queue.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/hash_map.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/io_control.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/kqueue_reactor_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/noncopyable.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/null_event.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/null_mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/null_thread.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/posix_event.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/posix_mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/posix_thread.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/resolver_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/scoped_lock.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/select_interrupter.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/select_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/select_reactor_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/service_base.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/service_id.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/service_registry.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/service_registry_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/signal_blocker.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/signal_init.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/socket_holder.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/socket_ops.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/socket_option.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/socket_types.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/strand_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/task_io_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/task_io_service_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/thread.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/throw_error.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/timer_queue.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/tss_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/wince_thread.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/winsock_init.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_event.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_io_service_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_signal_blocker.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_thread.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/error.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/handler_alloc_hook.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/handler_invoke_hook.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/io_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/address.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/address_v4.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/address_v6.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/basic_resolver.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/host_name.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/icmp.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/multicast.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/resolver_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/tcp.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/udp.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/unicast.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ip/v6_only.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/is_read_buffered.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/is_write_buffered.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/local/basic_endpoint.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/local/connect_pair.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/local/datagram_protocol.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/local/stream_protocol.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/placeholders.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/posix/descriptor_base.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/posix/stream_descriptor.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/raw_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/read.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/read_at.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/read_until.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/serial_port.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/serial_port_base.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/serial_port_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/socket_acceptor_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/socket_base.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/basic_context.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/context.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/context_base.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/context_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/stream.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/stream_base.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/ssl/stream_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/strand.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/streambuf.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/stream_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/time_traits.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/windows/basic_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/windows/random_access_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/windows/stream_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/write.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	/usr/include/boost/asio/write_at.hpp	/^namespace asio {$/;"	n	namespace:boost
asio_handler_allocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, binder1<Handler, Arg1>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, binder2<Handler, Arg1, Arg2>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, binder3<Handler, Arg1, Arg2, Arg3>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, binder4<Handler, Arg1, Arg2, Arg3, Arg4>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/detail/handler_base_from_member.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, handler_base_from_member<Handler>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/detail/strand_service.hpp	/^    friend void* asio_handler_allocate(std::size_t size,$/;"	f	class:boost::asio::detail::strand_service::invoke_current_handler	access:friend	signature:(std::size_t size, invoke_current_handler* this_handler)
asio_handler_allocate	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, rewrapped_handler<Handler, Context>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, wrapped_handler<Dispatcher, Handler>* this_handler)
asio_handler_allocate	/usr/include/boost/asio/handler_alloc_hook.hpp	/^inline void* asio_handler_allocate(std::size_t size, ...)$/;"	f	namespace:boost::asio	signature:(std::size_t size, ...)
asio_handler_deallocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, binder1<Handler, Arg1>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, binder2<Handler, Arg1, Arg2>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, binder3<Handler, Arg1, Arg2, Arg3>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, binder4<Handler, Arg1, Arg2, Arg3, Arg4>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/detail/handler_base_from_member.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, handler_base_from_member<Handler>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/detail/strand_service.hpp	/^    friend void asio_handler_deallocate(void*, std::size_t,$/;"	f	class:boost::asio::detail::strand_service::invoke_current_handler	access:friend	signature:(void*, std::size_t, invoke_current_handler*)
asio_handler_deallocate	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, rewrapped_handler<Handler, Context>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, wrapped_handler<Dispatcher, Handler>* this_handler)
asio_handler_deallocate	/usr/include/boost/asio/handler_alloc_hook.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size, ...)$/;"	f	namespace:boost::asio	signature:(void* pointer, std::size_t size, ...)
asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, binder1<Handler, Arg1>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, binder2<Handler, Arg1, Arg2>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, binder3<Handler, Arg1, Arg2, Arg3>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, binder4<Handler, Arg1, Arg2, Arg3, Arg4>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/detail/handler_base_from_member.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, handler_base_from_member<Handler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, rewrapped_handler<Handler, Context>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, wrapped_handler<Dispatcher, Handler>* this_handler)
asio_handler_invoke	/usr/include/boost/asio/handler_invoke_hook.hpp	/^inline void asio_handler_invoke(Function function, ...)$/;"	f	namespace:boost::asio	signature:(Function function, ...)
asn1	/usr/include/boost/asio/ssl/context_base.hpp	/^    asn1,$/;"	e	enum:boost::asio::ssl::context_base::file_format
assign	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code assign(const native_type& native_serial_port,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const native_type& native_serial_port, boost::system::error_code& ec)
assign	/usr/include/boost/asio/basic_serial_port.hpp	/^  void assign(const native_type& native_serial_port)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const native_type& native_serial_port)
assign	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code assign(const protocol_type& protocol,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const protocol_type& protocol, const native_type& native_socket, boost::system::error_code& ec)
assign	/usr/include/boost/asio/basic_socket.hpp	/^  void assign(const protocol_type& protocol, const native_type& native_socket)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const protocol_type& protocol, const native_type& native_socket)
assign	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code assign(const protocol_type& protocol,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const protocol_type& protocol, const native_type& native_acceptor, boost::system::error_code& ec)
assign	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void assign(const protocol_type& protocol, const native_type& native_acceptor)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const protocol_type& protocol, const native_type& native_acceptor)
assign	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_type& native_socket, boost::system::error_code& ec)
assign	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const native_type& native_descriptor, boost::system::error_code& ec)
assign	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, const native_type& native_handle, boost::system::error_code& ec)
assign	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const native_type& native_handle, boost::system::error_code& ec)
assign	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const protocol_type& protocol, const native_type& native_socket, boost::system::error_code& ec)
assign	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  boost::system::error_code assign(const native_type& native_descriptor,$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(const native_type& native_descriptor, boost::system::error_code& ec)
assign	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  void assign(const native_type& native_descriptor)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(const native_type& native_descriptor)
assign	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, const native_type& native_descriptor, boost::system::error_code& ec)
assign	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_type& native_socket, boost::system::error_code& ec)
assign	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const native_type& native_handle, boost::system::error_code& ec)
assign	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_type& native_acceptor, boost::system::error_code& ec)
assign	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_type& native_socket, boost::system::error_code& ec)
assign	/usr/include/boost/asio/windows/basic_handle.hpp	/^  boost::system::error_code assign(const native_type& native_handle,$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(const native_type& native_handle, boost::system::error_code& ec)
assign	/usr/include/boost/asio/windows/basic_handle.hpp	/^  void assign(const native_type& native_handle)$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(const native_type& native_handle)
assign	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, const native_type& native_handle, boost::system::error_code& ec)
assign	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, const native_type& native_handle, boost::system::error_code& ec)
async_accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void async_accept(basic_socket<protocol_type, SocketService>& peer,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(basic_socket<protocol_type, SocketService>& peer, AcceptHandler handler)
async_accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void async_accept(basic_socket<protocol_type, SocketService>& peer,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(basic_socket<protocol_type, SocketService>& peer, endpoint_type& peer_endpoint, AcceptHandler handler)
async_accept	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  void async_accept(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, basic_socket<protocol_type, SocketService>& peer, endpoint_type* peer_endpoint, AcceptHandler handler)
async_connect	/usr/include/boost/asio/basic_socket.hpp	/^  void async_connect(const endpoint_type& peer_endpoint, ConnectHandler handler)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const endpoint_type& peer_endpoint, ConnectHandler handler)
async_connect	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void async_connect(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, ConnectHandler handler)
async_connect	/usr/include/boost/asio/raw_socket_service.hpp	/^  void async_connect(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, ConnectHandler handler)
async_connect	/usr/include/boost/asio/stream_socket_service.hpp	/^  void async_connect(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, ConnectHandler handler)
async_fill	/usr/include/boost/asio/buffered_read_stream.hpp	/^  void async_fill(ReadHandler handler)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(ReadHandler handler)
async_fill	/usr/include/boost/asio/buffered_stream.hpp	/^  void async_fill(ReadHandler handler)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(ReadHandler handler)
async_flush	/usr/include/boost/asio/buffered_stream.hpp	/^  void async_flush(WriteHandler handler)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(WriteHandler handler)
async_flush	/usr/include/boost/asio/buffered_write_stream.hpp	/^  void async_flush(WriteHandler handler)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(WriteHandler handler)
async_handshake	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  void async_handshake(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, stream_base::handshake_type type, Handler handler)
async_handshake	/usr/include/boost/asio/ssl/stream.hpp	/^  void async_handshake(handshake_type type, HandshakeHandler handler)$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(handshake_type type, HandshakeHandler handler)
async_handshake	/usr/include/boost/asio/ssl/stream_service.hpp	/^  void async_handshake(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, stream_base::handshake_type type, HandshakeHandler handler)
async_read	/usr/include/boost/asio/read.hpp	/^void async_read(AsyncReadStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, ReadHandler handler)
async_read	/usr/include/boost/asio/read.hpp	/^void async_read(AsyncReadStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, basic_streambuf<Allocator>& b, ReadHandler handler)
async_read	/usr/include/boost/asio/read.hpp	/^void async_read(AsyncReadStream& s, const MutableBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, const MutableBufferSequence& buffers, CompletionCondition completion_condition, ReadHandler handler)
async_read	/usr/include/boost/asio/read.hpp	/^void async_read(AsyncReadStream& s, const MutableBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, const MutableBufferSequence& buffers, ReadHandler handler)
async_read_at	/usr/include/boost/asio/read_at.hpp	/^void async_read_at(AsyncRandomAccessReadDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, ReadHandler handler)
async_read_at	/usr/include/boost/asio/read_at.hpp	/^void async_read_at(AsyncRandomAccessReadDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, ReadHandler handler)
async_read_at	/usr/include/boost/asio/read_at.hpp	/^void async_read_at(AsyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, ReadHandler handler)
async_read_at	/usr/include/boost/asio/read_at.hpp	/^void async_read_at(AsyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition, ReadHandler handler)
async_read_handler	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  void async_read_handler(const boost::system::error_code& error,$/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:private	signature:(const boost::system::error_code& error, size_t bytes_recvd)
async_read_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
async_read_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
async_read_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
async_read_some	/usr/include/boost/asio/buffered_stream.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
async_read_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
async_read_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const MutableBufferSequence& buffers, Handler handler)
async_read_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const null_buffers&, Handler handler)
async_read_some	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, Handler handler)
async_read_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, Handler handler)
async_read_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, const null_buffers& buffers, Handler handler)
async_read_some	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, Handler handler)
async_read_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
async_read_some	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, ReadHandler descriptorr)
async_read_some	/usr/include/boost/asio/serial_port_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, ReadHandler handler)
async_read_some	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  void async_read_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const Mutable_Buffers& buffers, Handler handler)
async_read_some	/usr/include/boost/asio/ssl/stream.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
async_read_some	/usr/include/boost/asio/ssl/stream_service.hpp	/^  void async_read_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const MutableBufferSequence& buffers, ReadHandler handler)
async_read_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
async_read_some	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, ReadHandler handler)
async_read_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const MutableBufferSequence& buffers, Handler handler)
async_read_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const null_buffers& buffers, Handler handler)
async_read_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  void async_read_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const MutableBufferSequence& buffers, ReadHandler handler)
async_read_some_at	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void async_read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const MutableBufferSequence& buffers, ReadHandler handler)
async_read_until	/usr/include/boost/asio/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, char delim, ReadHandler handler)
async_read_until	/usr/include/boost/asio/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const boost::regex& expr, ReadHandler handler)
async_read_until	/usr/include/boost/asio/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const std::string& delim, ReadHandler handler)
async_read_until	/usr/include/boost/asio/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, MatchCondition match_condition, ReadHandler handler, typename boost::enable_if<is_match_condition<MatchCondition> >::type* = 0)
async_receive	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers, ReadHandler handler)$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
async_receive	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, ReadHandler handler)
async_receive	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers, ReadHandler handler)$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
async_receive	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, ReadHandler handler)
async_receive	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers, ReadHandler handler)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
async_receive	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, ReadHandler handler)
async_receive	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void async_receive(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, ReadHandler handler)
async_receive	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_receive(implementation_type& impl, const null_buffers&,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const null_buffers&, socket_base::message_flags flags, Handler handler)
async_receive	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_receive(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, Handler handler)
async_receive	/usr/include/boost/asio/raw_socket_service.hpp	/^  void async_receive(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, ReadHandler handler)
async_receive	/usr/include/boost/asio/stream_socket_service.hpp	/^  void async_receive(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, ReadHandler handler)
async_receive_from	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, ReadHandler handler)
async_receive_from	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, ReadHandler handler)
async_receive_from	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, ReadHandler handler)
async_receive_from	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, ReadHandler handler)
async_receive_from	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, ReadHandler handler)
async_receive_from	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, Handler handler)
async_receive_from	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const null_buffers&, endpoint_type& sender_endpoint, socket_base::message_flags flags, Handler handler)
async_receive_from	/usr/include/boost/asio/raw_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, ReadHandler handler)
async_resolve	/usr/include/boost/asio/detail/resolver_service.hpp	/^  void async_resolve(implementation_type& impl, const endpoint_type& endpoint,$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, Handler handler)
async_resolve	/usr/include/boost/asio/detail/resolver_service.hpp	/^  void async_resolve(implementation_type& impl, const query_type& query,$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type& impl, const query_type& query, Handler handler)
async_resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  void async_resolve(const endpoint_type& e, ResolveHandler handler)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const endpoint_type& e, ResolveHandler handler)
async_resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  void async_resolve(const query& q, ResolveHandler handler)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const query& q, ResolveHandler handler)
async_resolve	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void async_resolve(implementation_type& impl, const endpoint_type& endpoint,$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, ResolveHandler handler)
async_resolve	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void async_resolve(implementation_type& impl, const query_type& query,$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl, const query_type& query, Handler handler)
async_send	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers, WriteHandler handler)$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
async_send	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, WriteHandler handler)
async_send	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers, WriteHandler handler)$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
async_send	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, WriteHandler handler)
async_send	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers, WriteHandler handler)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
async_send	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, WriteHandler handler)
async_send	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void async_send(implementation_type& impl, const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, WriteHandler handler)
async_send	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_send(implementation_type& impl, const null_buffers&,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const null_buffers&, socket_base::message_flags, Handler handler)
async_send	/usr/include/boost/asio/raw_socket_service.hpp	/^  void async_send(implementation_type& impl, const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, WriteHandler handler)
async_send	/usr/include/boost/asio/stream_socket_service.hpp	/^  void async_send(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, WriteHandler handler)
async_send_to	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, WriteHandler handler)
async_send_to	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, WriteHandler handler)
async_send_to	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, WriteHandler handler)
async_send_to	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, WriteHandler handler)
async_send_to	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void async_send_to(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, WriteHandler handler)
async_send_to	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_send_to(implementation_type& impl, const null_buffers&,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const null_buffers&, socket_base::message_flags, const endpoint_type&, Handler handler)
async_send_to	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_send_to(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, Handler handler)
async_send_to	/usr/include/boost/asio/raw_socket_service.hpp	/^  void async_send_to(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, WriteHandler handler)
async_shutdown	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  void async_shutdown(impl_type& impl, Stream& next_layer, Handler handler)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, Handler handler)
async_shutdown	/usr/include/boost/asio/ssl/stream.hpp	/^  void async_shutdown(ShutdownHandler handler)$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(ShutdownHandler handler)
async_shutdown	/usr/include/boost/asio/ssl/stream_service.hpp	/^  void async_shutdown(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, ShutdownHandler handler)
async_user_handler	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  int async_user_handler(boost::system::error_code error, int rc)$/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:private	signature:(boost::system::error_code error, int rc)
async_wait	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  void async_wait(WaitHandler handler)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(WaitHandler handler)
async_wait	/usr/include/boost/asio/deadline_timer_service.hpp	/^  void async_wait(implementation_type& impl, WaitHandler handler)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, WaitHandler handler)
async_wait	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void async_wait(implementation_type& impl, Handler handler)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, Handler handler)
async_write	/usr/include/boost/asio/write.hpp	/^void async_write(AsyncWriteStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(AsyncWriteStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, WriteHandler handler)
async_write	/usr/include/boost/asio/write.hpp	/^void async_write(AsyncWriteStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(AsyncWriteStream& s, basic_streambuf<Allocator>& b, WriteHandler handler)
async_write	/usr/include/boost/asio/write.hpp	/^void async_write(AsyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(AsyncWriteStream& s, const ConstBufferSequence& buffers, CompletionCondition completion_condition, WriteHandler handler)
async_write	/usr/include/boost/asio/write.hpp	/^void async_write(AsyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(AsyncWriteStream& s, const ConstBufferSequence& buffers, WriteHandler handler)
async_write_at	/usr/include/boost/asio/write_at.hpp	/^void async_write_at(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, WriteHandler handler)
async_write_at	/usr/include/boost/asio/write_at.hpp	/^void async_write_at(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, WriteHandler handler)
async_write_at	/usr/include/boost/asio/write_at.hpp	/^void async_write_at(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, WriteHandler handler)
async_write_at	/usr/include/boost/asio/write_at.hpp	/^void async_write_at(AsyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition, WriteHandler handler)
async_write_handler	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  void async_write_handler(bool is_operation_done, int rc, $/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:private	signature:(bool is_operation_done, int rc, const boost::system::error_code& error, size_t bytes_sent)
async_write_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
async_write_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
async_write_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
async_write_some	/usr/include/boost/asio/buffered_stream.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
async_write_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
async_write_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const null_buffers&, Handler handler)
async_write_some	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, Handler handler)
async_write_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, Handler handler)
async_write_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, const null_buffers& buffers, Handler handler)
async_write_some	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, Handler handler)
async_write_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
async_write_some	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, WriteHandler descriptorr)
async_write_some	/usr/include/boost/asio/serial_port_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, WriteHandler handler)
async_write_some	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  void async_write_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const Const_Buffers& buffers, Handler handler)
async_write_some	/usr/include/boost/asio/ssl/stream.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
async_write_some	/usr/include/boost/asio/ssl/stream_service.hpp	/^  void async_write_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const ConstBufferSequence& buffers, WriteHandler handler)
async_write_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
async_write_some	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, WriteHandler handler)
async_write_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const ConstBufferSequence& buffers, Handler handler)
async_write_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const null_buffers& buffers, Handler handler)
async_write_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  void async_write_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const ConstBufferSequence& buffers, WriteHandler handler)
async_write_some_at	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void async_write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const ConstBufferSequence& buffers, WriteHandler handler)
as_handle	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    HANDLE as_handle() const$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_type	access:public	signature:() const
at_end_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  bool at_end_;$/;"	m	class:boost::asio::detail::consuming_buffers	access:private
at_end_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  bool at_end_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
at_mark	/usr/include/boost/asio/basic_socket.hpp	/^  bool at_mark() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
at_mark	/usr/include/boost/asio/basic_socket.hpp	/^  bool at_mark(boost::system::error_code& ec) const$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec) const
at_mark	/usr/include/boost/asio/datagram_socket_service.hpp	/^  bool at_mark(const implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
at_mark	/usr/include/boost/asio/raw_socket_service.hpp	/^  bool at_mark(const implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
at_mark	/usr/include/boost/asio/stream_socket_service.hpp	/^  bool at_mark(const implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
auto_addrinfo	/usr/include/boost/asio/detail/resolver_service.hpp	/^    explicit auto_addrinfo(boost::asio::detail::addrinfo_type* ai)$/;"	f	class:boost::asio::detail::resolver_service::auto_addrinfo	access:public	signature:(boost::asio::detail::addrinfo_type* ai)
auto_addrinfo	/usr/include/boost/asio/detail/resolver_service.hpp	/^  class auto_addrinfo$/;"	c	class:boost::asio::detail::resolver_service	inherits:boost::asio::detail::noncopyable	access:private
auto_work	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    auto_work(win_iocp_io_service& io_service)$/;"	f	struct:boost::asio::detail::win_iocp_io_service::auto_work	access:public	signature:(win_iocp_io_service& io_service)
auto_work	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  struct auto_work$/;"	s	class:boost::asio::detail::win_iocp_io_service	access:private
available	/usr/include/boost/asio/basic_socket.hpp	/^  std::size_t available() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
available	/usr/include/boost/asio/basic_socket.hpp	/^  std::size_t available(boost::system::error_code& ec) const$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec) const
available	/usr/include/boost/asio/datagram_socket_service.hpp	/^  std::size_t available(const implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
available	/usr/include/boost/asio/raw_socket_service.hpp	/^  std::size_t available(const implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
available	/usr/include/boost/asio/stream_socket_service.hpp	/^  std::size_t available(const implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
back_	/usr/include/boost/asio/detail/handler_queue.hpp	/^  handler* back_;$/;"	m	class:boost::asio::detail::handler_queue	access:private
back_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  node* back_;$/;"	m	class:boost::asio::detail::indirect_handler_queue	access:private
back_first_idle_thread_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  idle_thread_info* back_first_idle_thread_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
back_mutex_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  boost::asio::detail::mutex back_mutex_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
back_shutdown_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  bool back_shutdown_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
back_stopped_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  bool back_stopped_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
back_task_thread_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  idle_thread_info* back_task_thread_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
back_version	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  unsigned long back_version()$/;"	f	class:boost::asio::detail::indirect_handler_queue	access:public	signature:()
bad_descriptor	/usr/include/boost/asio/error.hpp	/^  bad_descriptor = BOOST_ASIO_SOCKET_ERROR(EBADF),$/;"	e	enum:boost::asio::error::basic_errors
base	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^    boost::asio::detail::socket_addr_type base;$/;"	m	union:boost::asio::ip::basic_endpoint::data_union	access:public
base	/usr/include/boost/asio/local/basic_endpoint.hpp	/^    boost::asio::detail::socket_addr_type base;$/;"	m	union:boost::asio::local::basic_endpoint::data_union	access:public
base_handler	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    base_handler(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::base_handler	access:public	signature:(boost::asio::io_service& io_service)
base_handler	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  class base_handler$/;"	c	class:boost::asio::ssl::detail::openssl_stream_service	access:private
basic_context	/usr/include/boost/asio/ssl/basic_context.hpp	/^  basic_context(boost::asio::io_service& io_service, method m)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(boost::asio::io_service& io_service, method m)
basic_context	/usr/include/boost/asio/ssl/basic_context.hpp	/^class basic_context$/;"	c	namespace:boost::asio::ssl	inherits:context_base,boost::noncopyable
basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  basic_datagram_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint)
basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  basic_datagram_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  basic_datagram_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_type& native_socket)
basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  explicit basic_datagram_socket(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(boost::asio::io_service& io_service)
basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^class basic_datagram_socket$/;"	c	namespace:boost::asio	inherits:basic_socket
basic_deadline_timer	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  basic_deadline_timer(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::asio::io_service& io_service, const duration_type& expiry_time)
basic_deadline_timer	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  basic_deadline_timer(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::asio::io_service& io_service, const time_type& expiry_time)
basic_deadline_timer	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  explicit basic_deadline_timer(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::asio::io_service& io_service)
basic_deadline_timer	/usr/include/boost/asio/basic_deadline_timer.hpp	/^class basic_deadline_timer$/;"	c	namespace:boost::asio	inherits:basic_io_object
basic_descriptor	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  basic_descriptor(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(boost::asio::io_service& io_service, const native_type& native_descriptor)
basic_descriptor	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  explicit basic_descriptor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(boost::asio::io_service& io_service)
basic_descriptor	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^class basic_descriptor$/;"	c	namespace:boost::asio::posix	inherits:basic_io_object,descriptor_base
basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint()$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:()
basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint(const basic_endpoint& other)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(const basic_endpoint& other)
basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint(const boost::asio::ip::address& addr, unsigned short port_num)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(const boost::asio::ip::address& addr, unsigned short port_num)
basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint(const InternetProtocol& protocol, unsigned short port_num)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(const InternetProtocol& protocol, unsigned short port_num)
basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^class basic_endpoint$/;"	c	namespace:boost::asio::ip
basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint()$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:()
basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint(const basic_endpoint& other)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const basic_endpoint& other)
basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint(const char* path)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const char* path)
basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint(const std::string& path)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const std::string& path)
basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^class basic_endpoint$/;"	c	namespace:boost::asio::local
basic_errors	/usr/include/boost/asio/error.hpp	/^enum basic_errors$/;"	g	namespace:boost::asio::error
basic_handle	/usr/include/boost/asio/windows/basic_handle.hpp	/^  basic_handle(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(boost::asio::io_service& io_service, const native_type& native_handle)
basic_handle	/usr/include/boost/asio/windows/basic_handle.hpp	/^  explicit basic_handle(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(boost::asio::io_service& io_service)
basic_handle	/usr/include/boost/asio/windows/basic_handle.hpp	/^class basic_handle$/;"	c	namespace:boost::asio::windows	inherits:basic_io_object
basic_io_object	/usr/include/boost/asio/basic_io_object.hpp	/^  explicit basic_io_object(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_io_object	access:protected	signature:(boost::asio::io_service& io_service)
basic_io_object	/usr/include/boost/asio/basic_io_object.hpp	/^class basic_io_object$/;"	c	namespace:boost::asio	inherits:noncopyable
basic_random_access_handle	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  basic_random_access_handle(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::asio::io_service& io_service, const native_type& native_handle)
basic_random_access_handle	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  explicit basic_random_access_handle(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::asio::io_service& io_service)
basic_random_access_handle	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^class basic_random_access_handle$/;"	c	namespace:boost::asio::windows	inherits:basic_handle
basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^  basic_raw_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint)
basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^  basic_raw_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^  basic_raw_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_type& native_socket)
basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^  explicit basic_raw_socket(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(boost::asio::io_service& io_service)
basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^class basic_raw_socket$/;"	c	namespace:boost::asio	inherits:basic_socket
basic_resolver	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  explicit basic_resolver(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(boost::asio::io_service& io_service)
basic_resolver	/usr/include/boost/asio/ip/basic_resolver.hpp	/^class basic_resolver$/;"	c	namespace:boost::asio::ip	inherits:basic_io_object
basic_resolver_entry	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  basic_resolver_entry()$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:()
basic_resolver_entry	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  basic_resolver_entry(const endpoint_type& endpoint,$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:(const endpoint_type& endpoint, const std::string& host_name, const std::string& service_name)
basic_resolver_entry	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^class basic_resolver_entry$/;"	c	namespace:boost::asio::ip
basic_resolver_iterator	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  basic_resolver_iterator()$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:public	signature:()
basic_resolver_iterator	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^class basic_resolver_iterator$/;"	c	namespace:boost::asio::ip	inherits:boost::iterator_facade
basic_resolver_query	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  basic_resolver_query(const protocol_type& protocol,$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:(const protocol_type& protocol, const std::string& host_name, const std::string& service_name, int flags = address_configured)
basic_resolver_query	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  basic_resolver_query(const protocol_type& protocol,$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:(const protocol_type& protocol, const std::string& service_name, int flags = passive | address_configured)
basic_resolver_query	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  basic_resolver_query(const std::string& host_name,$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:(const std::string& host_name, const std::string& service_name, int flags = address_configured)
basic_resolver_query	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  basic_resolver_query(const std::string& service_name,$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:(const std::string& service_name, int flags = passive | address_configured)
basic_resolver_query	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^class basic_resolver_query$/;"	c	namespace:boost::asio::ip	inherits:resolver_query_base
basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^  basic_serial_port(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::asio::io_service& io_service, const native_type& native_serial_port)
basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^  explicit basic_serial_port(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::asio::io_service& io_service)
basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^  explicit basic_serial_port(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::asio::io_service& io_service, const char* device)
basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^  explicit basic_serial_port(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::asio::io_service& io_service, const std::string& device)
basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^class basic_serial_port$/;"	c	namespace:boost::asio	inherits:basic_io_object,serial_port_base
basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  basic_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint)
basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  basic_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  basic_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_type& native_socket)
basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  explicit basic_socket(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::asio::io_service& io_service)
basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^class basic_socket$/;"	c	namespace:boost::asio	inherits:basic_io_object,socket_base
basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  basic_socket_acceptor(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint, bool reuse_addr = true)
basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  basic_socket_acceptor(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  basic_socket_acceptor(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_type& native_acceptor)
basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  explicit basic_socket_acceptor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::asio::io_service& io_service)
basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^class basic_socket_acceptor$/;"	c	namespace:boost::asio	inherits:basic_io_object,socket_base
basic_socket_iostream	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  basic_socket_iostream()$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:()
basic_socket_iostream	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  explicit basic_socket_iostream(T1 t1, ..., TN tn);$/;"	p	class:boost::asio::basic_socket_iostream	access:public	signature:(T1 t1, ..., TN tn)
basic_socket_iostream	/usr/include/boost/asio/basic_socket_iostream.hpp	/^class basic_socket_iostream$/;"	c	namespace:boost::asio	inherits:boost::base_from_member,std::basic_iostream
basic_socket_streambuf	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  basic_socket_streambuf()$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:()
basic_socket_streambuf	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^class basic_socket_streambuf$/;"	c	namespace:boost::asio	inherits:std::streambuf,boost::base_from_member,basic_socket
basic_streambuf	/usr/include/boost/asio/basic_streambuf.hpp	/^  explicit basic_streambuf($/;"	f	class:boost::asio::basic_streambuf	access:public	signature:( std::size_t max_size = (std::numeric_limits<std::size_t>::max)(), const Allocator& allocator = Allocator())
basic_streambuf	/usr/include/boost/asio/basic_streambuf.hpp	/^class basic_streambuf$/;"	c	namespace:boost::asio	inherits:std::streambuf,noncopyable
basic_stream_descriptor	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  basic_stream_descriptor(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(boost::asio::io_service& io_service, const native_type& native_descriptor)
basic_stream_descriptor	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  explicit basic_stream_descriptor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(boost::asio::io_service& io_service)
basic_stream_descriptor	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^class basic_stream_descriptor$/;"	c	namespace:boost::asio::posix	inherits:basic_descriptor
basic_stream_handle	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  basic_stream_handle(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(boost::asio::io_service& io_service, const native_type& native_handle)
basic_stream_handle	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  explicit basic_stream_handle(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(boost::asio::io_service& io_service)
basic_stream_handle	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^class basic_stream_handle$/;"	c	namespace:boost::asio::windows	inherits:basic_handle
basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^  basic_stream_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint)
basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^  basic_stream_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^  basic_stream_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_type& native_socket)
basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^  explicit basic_stream_socket(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(boost::asio::io_service& io_service)
basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^class basic_stream_socket$/;"	c	namespace:boost::asio	inherits:basic_socket
baud_rate	/usr/include/boost/asio/serial_port_base.hpp	/^    explicit baud_rate(unsigned int rate = 0);$/;"	p	class:boost::asio::serial_port_base::baud_rate	access:public	signature:(unsigned int rate = 0)
baud_rate	/usr/include/boost/asio/serial_port_base.hpp	/^  class baud_rate$/;"	c	class:boost::asio::serial_port_base	access:public
begin	/usr/include/boost/asio/buffer.hpp	/^  const_iterator begin() const$/;"	f	class:boost::asio::const_buffers_1	access:public	signature:() const
begin	/usr/include/boost/asio/buffer.hpp	/^  const_iterator begin() const$/;"	f	class:boost::asio::mutable_buffers_1	access:public	signature:() const
begin	/usr/include/boost/asio/buffer.hpp	/^  const_iterator begin() const$/;"	f	class:boost::asio::null_buffers	access:public	signature:() const
begin	/usr/include/boost/asio/buffers_iterator.hpp	/^  static buffers_iterator begin(const BufferSequence& buffers)$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:(const BufferSequence& buffers)
begin	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  const_iterator begin() const$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:() const
begin	/usr/include/boost/asio/detail/hash_map.hpp	/^  const_iterator begin() const$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:() const
begin	/usr/include/boost/asio/detail/hash_map.hpp	/^  iterator begin()$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:()
begin_	/usr/include/boost/asio/buffers_iterator.hpp	/^  typename BufferSequence::const_iterator begin_;$/;"	m	class:boost::asio::buffers_iterator	access:private
begin_	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  typename ConstBufferSequence::const_iterator begin_;$/;"	m	class:boost::asio::detail::const_buffers_iterator	access:private
begin_offset_	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  size_type begin_offset_;$/;"	m	class:boost::asio::detail::buffered_stream_storage	access:private
begin_remainder_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  Buffer_Iterator begin_remainder_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
begin_remainder_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  typename Buffers::const_iterator begin_remainder_;$/;"	m	class:boost::asio::detail::consuming_buffers	access:private
big	/usr/include/boost/asio/read_until.hpp	/^        struct big { char a[100]; };$/;"	s	struct:boost::asio::detail::has_result_type::inner	access:public
bind	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code bind(const endpoint_type& endpoint,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const endpoint_type& endpoint, boost::system::error_code& ec)
bind	/usr/include/boost/asio/basic_socket.hpp	/^  void bind(const endpoint_type& endpoint)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const endpoint_type& endpoint)
bind	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code bind(const endpoint_type& endpoint,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const endpoint_type& endpoint, boost::system::error_code& ec)
bind	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void bind(const endpoint_type& endpoint)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const endpoint_type& endpoint)
bind	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
bind	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int bind(socket_type s, const socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
bind	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
bind	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
bind	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
binder1	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder1(const Handler& handler, const Arg1& arg1)$/;"	f	class:boost::asio::detail::binder1	access:public	signature:(const Handler& handler, const Arg1& arg1)
binder1	/usr/include/boost/asio/detail/bind_handler.hpp	/^class binder1$/;"	c	namespace:boost::asio::detail
binder2	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder2(const Handler& handler, const Arg1& arg1, const Arg2& arg2)$/;"	f	class:boost::asio::detail::binder2	access:public	signature:(const Handler& handler, const Arg1& arg1, const Arg2& arg2)
binder2	/usr/include/boost/asio/detail/bind_handler.hpp	/^class binder2$/;"	c	namespace:boost::asio::detail
binder3	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder3(const Handler& handler, const Arg1& arg1, const Arg2& arg2,$/;"	f	class:boost::asio::detail::binder3	access:public	signature:(const Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3)
binder3	/usr/include/boost/asio/detail/bind_handler.hpp	/^class binder3$/;"	c	namespace:boost::asio::detail
binder4	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder4(const Handler& handler, const Arg1& arg1, const Arg2& arg2,$/;"	f	class:boost::asio::detail::binder4	access:public	signature:(const Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4)
binder4	/usr/include/boost/asio/detail/bind_handler.hpp	/^class binder4$/;"	c	namespace:boost::asio::detail
binder5	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder5(const Handler& handler, const Arg1& arg1, const Arg2& arg2,$/;"	f	class:boost::asio::detail::binder5	access:public	signature:(const Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5)
binder5	/usr/include/boost/asio/detail/bind_handler.hpp	/^class binder5$/;"	c	namespace:boost::asio::detail
bind_handler	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline binder1<Handler, Arg1> bind_handler(const Handler& handler,$/;"	f	namespace:boost::asio::detail	signature:(const Handler& handler, const Arg1& arg1)
bind_handler	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline binder2<Handler, Arg1, Arg2> bind_handler(const Handler& handler,$/;"	f	namespace:boost::asio::detail	signature:(const Handler& handler, const Arg1& arg1, const Arg2& arg2)
bind_handler	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline binder3<Handler, Arg1, Arg2, Arg3> bind_handler(const Handler& handler,$/;"	f	namespace:boost::asio::detail	signature:(const Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3)
bind_handler	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline binder4<Handler, Arg1, Arg2, Arg3, Arg4> bind_handler($/;"	f	namespace:boost::asio::detail	signature:( const Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4)
bind_handler	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5> bind_handler($/;"	f	namespace:boost::asio::detail	signature:( const Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5)
block	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^  void block()$/;"	f	class:boost::asio::detail::null_signal_blocker	access:public	signature:()
block	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  void block()$/;"	f	class:boost::asio::detail::posix_signal_blocker	access:public	signature:()
block	/usr/include/boost/asio/detail/win_signal_blocker.hpp	/^  void block()$/;"	f	class:boost::asio::detail::win_signal_blocker	access:public	signature:()
blocked_	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  bool blocked_;$/;"	m	class:boost::asio::detail::posix_signal_blocker	access:private
boolean	/usr/include/boost/asio/detail/socket_option.hpp	/^  boolean()$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:()
boolean	/usr/include/boost/asio/detail/socket_option.hpp	/^  explicit boolean(bool v)$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(bool v)
boolean	/usr/include/boost/asio/detail/socket_option.hpp	/^class boolean$/;"	c	namespace:boost::asio::detail::socket_option
boost	/usr/include/boost/asio/basic_datagram_socket.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_deadline_timer.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_io_object.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_raw_socket.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_serial_port.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_socket.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_socket_iostream.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_streambuf.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/basic_stream_socket.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/buffer.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/buffered_read_stream.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/buffered_read_stream_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/buffered_stream.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/buffered_stream_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/buffered_write_stream.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/buffered_write_stream_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/buffers_iterator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/completion_condition.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/datagram_socket_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/deadline_timer.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/deadline_timer_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/bind_handler.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/call_stack.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/dev_poll_reactor_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/epoll_reactor_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/event.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/fd_set_adapter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/handler_base_from_member.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/handler_queue.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/hash_map.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/io_control.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/kqueue_reactor_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/noncopyable.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/null_event.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/null_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/null_thread.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/posix_event.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/posix_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/posix_thread.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/resolver_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/scoped_lock.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/select_interrupter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/select_reactor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/select_reactor_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/service_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/service_id.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/service_registry.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/service_registry_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/signal_blocker.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/signal_init.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/socket_holder.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/socket_ops.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/socket_option.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/socket_types.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/strand_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/task_io_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/task_io_service_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/thread.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/throw_error.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/timer_queue.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/tss_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/wince_thread.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/winsock_init.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_event.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_io_service_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_signal_blocker.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_thread.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/error.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/handler_alloc_hook.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/handler_invoke_hook.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/io_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/address.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/address_v4.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/address_v6.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/basic_resolver.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/host_name.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/icmp.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/multicast.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/resolver_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/tcp.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/udp.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/unicast.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ip/v6_only.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/is_read_buffered.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/is_write_buffered.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/local/basic_endpoint.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/local/connect_pair.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/local/datagram_protocol.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/local/stream_protocol.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/placeholders.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/posix/descriptor_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/posix/stream_descriptor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/raw_socket_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/read.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/read_at.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/read_until.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/serial_port.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/serial_port_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/serial_port_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/socket_acceptor_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/socket_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/basic_context.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/context.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/context_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/context_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/stream.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/stream_base.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/ssl/stream_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/strand.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/streambuf.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/stream_socket_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/time_traits.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/windows/basic_handle.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/windows/random_access_handle.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/windows/stream_handle.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/write.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/asio/write_at.hpp	/^namespace boost {$/;"	n
boost::asio	/usr/include/boost/asio/basic_datagram_socket.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_deadline_timer.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_io_object.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_raw_socket.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_serial_port.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_socket.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_socket_iostream.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_streambuf.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/basic_stream_socket.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/buffer.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/buffered_read_stream.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/buffered_read_stream_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/buffered_stream.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/buffered_stream_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/buffered_write_stream.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/buffered_write_stream_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/buffers_iterator.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/completion_condition.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/datagram_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/deadline_timer.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/deadline_timer_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/bind_handler.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/call_stack.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/dev_poll_reactor_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/epoll_reactor_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/event.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/fd_set_adapter.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/handler_base_from_member.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/handler_queue.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/hash_map.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/io_control.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/kqueue_reactor_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/noncopyable.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/null_event.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/null_mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/null_thread.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/posix_event.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/posix_mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/posix_thread.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/resolver_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/scoped_lock.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/select_interrupter.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/select_reactor.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/select_reactor_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/service_base.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/service_id.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/service_registry.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/service_registry_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/signal_blocker.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/signal_init.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/socket_holder.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/socket_ops.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/socket_option.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/socket_types.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/strand_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/task_io_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/task_io_service_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/thread.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/throw_error.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/timer_queue.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/tss_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/wince_thread.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/winsock_init.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_event.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_io_service_fwd.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_mutex.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_signal_blocker.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_thread.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/error.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/handler_alloc_hook.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/handler_invoke_hook.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/io_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/address.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/address_v4.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/address_v6.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/basic_resolver.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/host_name.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/icmp.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/multicast.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/resolver_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/tcp.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/udp.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/unicast.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ip/v6_only.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/is_read_buffered.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/is_write_buffered.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/local/basic_endpoint.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/local/connect_pair.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/local/datagram_protocol.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/local/stream_protocol.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/placeholders.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/posix/descriptor_base.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/posix/stream_descriptor.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/raw_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/read.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/read_at.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/read_until.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/serial_port.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/serial_port_base.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/serial_port_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/socket_acceptor_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/socket_base.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/basic_context.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/context.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/context_base.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/context_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/stream.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/stream_base.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/ssl/stream_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/strand.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/streambuf.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/stream_socket_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/time_traits.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/windows/basic_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/windows/random_access_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/windows/stream_handle.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/write.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio	/usr/include/boost/asio/write_at.hpp	/^namespace asio {$/;"	n	namespace:boost
boost::asio::add_service	/usr/include/boost/asio/io_service.hpp	/^template <typename Service> void add_service(io_service& ios, Service* svc);$/;"	p	namespace:boost::asio	signature:(io_service& ios, Service* svc)
boost::asio::asio_handler_allocate	/usr/include/boost/asio/handler_alloc_hook.hpp	/^inline void* asio_handler_allocate(std::size_t size, ...)$/;"	f	namespace:boost::asio	signature:(std::size_t size, ...)
boost::asio::asio_handler_deallocate	/usr/include/boost/asio/handler_alloc_hook.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size, ...)$/;"	f	namespace:boost::asio	signature:(void* pointer, std::size_t size, ...)
boost::asio::asio_handler_invoke	/usr/include/boost/asio/handler_invoke_hook.hpp	/^inline void asio_handler_invoke(Function function, ...)$/;"	f	namespace:boost::asio	signature:(Function function, ...)
boost::asio::async_read	/usr/include/boost/asio/read.hpp	/^void async_read(AsyncReadStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, ReadHandler handler)
boost::asio::async_read	/usr/include/boost/asio/read.hpp	/^void async_read(AsyncReadStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, basic_streambuf<Allocator>& b, ReadHandler handler)
boost::asio::async_read	/usr/include/boost/asio/read.hpp	/^void async_read(AsyncReadStream& s, const MutableBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, const MutableBufferSequence& buffers, CompletionCondition completion_condition, ReadHandler handler)
boost::asio::async_read	/usr/include/boost/asio/read.hpp	/^void async_read(AsyncReadStream& s, const MutableBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::async_read_at	/usr/include/boost/asio/read_at.hpp	/^void async_read_at(AsyncRandomAccessReadDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, ReadHandler handler)
boost::asio::async_read_at	/usr/include/boost/asio/read_at.hpp	/^void async_read_at(AsyncRandomAccessReadDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::async_read_at	/usr/include/boost/asio/read_at.hpp	/^void async_read_at(AsyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, ReadHandler handler)
boost::asio::async_read_at	/usr/include/boost/asio/read_at.hpp	/^void async_read_at(AsyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition, ReadHandler handler)
boost::asio::async_read_until	/usr/include/boost/asio/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, char delim, ReadHandler handler)
boost::asio::async_read_until	/usr/include/boost/asio/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const boost::regex& expr, ReadHandler handler)
boost::asio::async_read_until	/usr/include/boost/asio/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const std::string& delim, ReadHandler handler)
boost::asio::async_read_until	/usr/include/boost/asio/read_until.hpp	/^void async_read_until(AsyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(AsyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, MatchCondition match_condition, ReadHandler handler, typename boost::enable_if<is_match_condition<MatchCondition> >::type* = 0)
boost::asio::async_write	/usr/include/boost/asio/write.hpp	/^void async_write(AsyncWriteStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(AsyncWriteStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, WriteHandler handler)
boost::asio::async_write	/usr/include/boost/asio/write.hpp	/^void async_write(AsyncWriteStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(AsyncWriteStream& s, basic_streambuf<Allocator>& b, WriteHandler handler)
boost::asio::async_write	/usr/include/boost/asio/write.hpp	/^void async_write(AsyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(AsyncWriteStream& s, const ConstBufferSequence& buffers, CompletionCondition completion_condition, WriteHandler handler)
boost::asio::async_write	/usr/include/boost/asio/write.hpp	/^void async_write(AsyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(AsyncWriteStream& s, const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::async_write_at	/usr/include/boost/asio/write_at.hpp	/^void async_write_at(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, WriteHandler handler)
boost::asio::async_write_at	/usr/include/boost/asio/write_at.hpp	/^void async_write_at(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, WriteHandler handler)
boost::asio::async_write_at	/usr/include/boost/asio/write_at.hpp	/^void async_write_at(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::async_write_at	/usr/include/boost/asio/write_at.hpp	/^void async_write_at(AsyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(AsyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition, WriteHandler handler)
boost::asio::basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^class basic_datagram_socket$/;"	c	namespace:boost::asio	inherits:basic_socket
boost::asio::basic_datagram_socket::async_receive	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers, ReadHandler handler)$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::basic_datagram_socket::async_receive	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, ReadHandler handler)
boost::asio::basic_datagram_socket::async_receive_from	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, ReadHandler handler)
boost::asio::basic_datagram_socket::async_receive_from	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, ReadHandler handler)
boost::asio::basic_datagram_socket::async_send	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers, WriteHandler handler)$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::basic_datagram_socket::async_send	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, WriteHandler handler)
boost::asio::basic_datagram_socket::async_send_to	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, WriteHandler handler)
boost::asio::basic_datagram_socket::async_send_to	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  void async_send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, WriteHandler handler)
boost::asio::basic_datagram_socket::basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  basic_datagram_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint)
boost::asio::basic_datagram_socket::basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  basic_datagram_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
boost::asio::basic_datagram_socket::basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  basic_datagram_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_type& native_socket)
boost::asio::basic_datagram_socket::basic_datagram_socket	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  explicit basic_datagram_socket(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::basic_datagram_socket::endpoint_type	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_datagram_socket	access:public
boost::asio::basic_datagram_socket::native_type	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  typedef typename DatagramSocketService::native_type native_type;$/;"	t	class:boost::asio::basic_datagram_socket	access:public
boost::asio::basic_datagram_socket::protocol_type	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_datagram_socket	access:public
boost::asio::basic_datagram_socket::receive	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::basic_datagram_socket::receive	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags)
boost::asio::basic_datagram_socket::receive	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::basic_datagram_socket::receive_from	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint)
boost::asio::basic_datagram_socket::receive_from	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags)
boost::asio::basic_datagram_socket::receive_from	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::basic_datagram_socket::send	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::basic_datagram_socket::send	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags)
boost::asio::basic_datagram_socket::send	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::basic_datagram_socket::send_to	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination)
boost::asio::basic_datagram_socket::send_to	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags)
boost::asio::basic_datagram_socket::send_to	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::basic_deadline_timer	/usr/include/boost/asio/basic_deadline_timer.hpp	/^class basic_deadline_timer$/;"	c	namespace:boost::asio	inherits:basic_io_object
boost::asio::basic_deadline_timer::async_wait	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  void async_wait(WaitHandler handler)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(WaitHandler handler)
boost::asio::basic_deadline_timer::basic_deadline_timer	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  basic_deadline_timer(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::asio::io_service& io_service, const duration_type& expiry_time)
boost::asio::basic_deadline_timer::basic_deadline_timer	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  basic_deadline_timer(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::asio::io_service& io_service, const time_type& expiry_time)
boost::asio::basic_deadline_timer::basic_deadline_timer	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  explicit basic_deadline_timer(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::basic_deadline_timer::cancel	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t cancel()$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:()
boost::asio::basic_deadline_timer::cancel	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_deadline_timer::duration_type	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  typedef typename traits_type::duration_type duration_type;$/;"	t	class:boost::asio::basic_deadline_timer	access:public
boost::asio::basic_deadline_timer::expires_at	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t expires_at(const time_type& expiry_time)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(const time_type& expiry_time)
boost::asio::basic_deadline_timer::expires_at	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t expires_at(const time_type& expiry_time,$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(const time_type& expiry_time, boost::system::error_code& ec)
boost::asio::basic_deadline_timer::expires_at	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  time_type expires_at() const$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:() const
boost::asio::basic_deadline_timer::expires_from_now	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  duration_type expires_from_now() const$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:() const
boost::asio::basic_deadline_timer::expires_from_now	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t expires_from_now(const duration_type& expiry_time)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(const duration_type& expiry_time)
boost::asio::basic_deadline_timer::expires_from_now	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t expires_from_now(const duration_type& expiry_time,$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(const duration_type& expiry_time, boost::system::error_code& ec)
boost::asio::basic_deadline_timer::time_type	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  typedef typename traits_type::time_type time_type;$/;"	t	class:boost::asio::basic_deadline_timer	access:public
boost::asio::basic_deadline_timer::traits_type	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  typedef TimeTraits traits_type;$/;"	t	class:boost::asio::basic_deadline_timer	access:public
boost::asio::basic_deadline_timer::wait	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  void wait()$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:()
boost::asio::basic_deadline_timer::wait	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  void wait(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_io_object	/usr/include/boost/asio/basic_io_object.hpp	/^class basic_io_object$/;"	c	namespace:boost::asio	inherits:noncopyable
boost::asio::basic_io_object::basic_io_object	/usr/include/boost/asio/basic_io_object.hpp	/^  explicit basic_io_object(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_io_object	access:protected	signature:(boost::asio::io_service& io_service)
boost::asio::basic_io_object::get_io_service	/usr/include/boost/asio/basic_io_object.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::basic_io_object	access:public	signature:()
boost::asio::basic_io_object::implementation	/usr/include/boost/asio/basic_io_object.hpp	/^  implementation_type implementation;$/;"	m	class:boost::asio::basic_io_object	access:protected
boost::asio::basic_io_object::implementation_type	/usr/include/boost/asio/basic_io_object.hpp	/^  typedef typename service_type::implementation_type implementation_type;$/;"	t	class:boost::asio::basic_io_object	access:public
boost::asio::basic_io_object::io_service	/usr/include/boost/asio/basic_io_object.hpp	/^  boost::asio::io_service& io_service()$/;"	f	class:boost::asio::basic_io_object	access:public	signature:()
boost::asio::basic_io_object::service	/usr/include/boost/asio/basic_io_object.hpp	/^  service_type& service;$/;"	m	class:boost::asio::basic_io_object	access:protected
boost::asio::basic_io_object::service_type	/usr/include/boost/asio/basic_io_object.hpp	/^  typedef IoObjectService service_type;$/;"	t	class:boost::asio::basic_io_object	access:public
boost::asio::basic_io_object::~basic_io_object	/usr/include/boost/asio/basic_io_object.hpp	/^  ~basic_io_object()$/;"	f	class:boost::asio::basic_io_object	access:protected	signature:()
boost::asio::basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^class basic_raw_socket$/;"	c	namespace:boost::asio	inherits:basic_socket
boost::asio::basic_raw_socket::async_receive	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers, ReadHandler handler)$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::basic_raw_socket::async_receive	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, ReadHandler handler)
boost::asio::basic_raw_socket::async_receive_from	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, ReadHandler handler)
boost::asio::basic_raw_socket::async_receive_from	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, ReadHandler handler)
boost::asio::basic_raw_socket::async_send	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers, WriteHandler handler)$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::basic_raw_socket::async_send	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, WriteHandler handler)
boost::asio::basic_raw_socket::async_send_to	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, WriteHandler handler)
boost::asio::basic_raw_socket::async_send_to	/usr/include/boost/asio/basic_raw_socket.hpp	/^  void async_send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, WriteHandler handler)
boost::asio::basic_raw_socket::basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^  basic_raw_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint)
boost::asio::basic_raw_socket::basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^  basic_raw_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
boost::asio::basic_raw_socket::basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^  basic_raw_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_type& native_socket)
boost::asio::basic_raw_socket::basic_raw_socket	/usr/include/boost/asio/basic_raw_socket.hpp	/^  explicit basic_raw_socket(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::basic_raw_socket::endpoint_type	/usr/include/boost/asio/basic_raw_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_raw_socket	access:public
boost::asio::basic_raw_socket::native_type	/usr/include/boost/asio/basic_raw_socket.hpp	/^  typedef typename RawSocketService::native_type native_type;$/;"	t	class:boost::asio::basic_raw_socket	access:public
boost::asio::basic_raw_socket::protocol_type	/usr/include/boost/asio/basic_raw_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_raw_socket	access:public
boost::asio::basic_raw_socket::receive	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::basic_raw_socket::receive	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags)
boost::asio::basic_raw_socket::receive	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::basic_raw_socket::receive_from	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint)
boost::asio::basic_raw_socket::receive_from	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags)
boost::asio::basic_raw_socket::receive_from	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::basic_raw_socket::send	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::basic_raw_socket::send	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags)
boost::asio::basic_raw_socket::send	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::basic_raw_socket::send_to	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination)
boost::asio::basic_raw_socket::send_to	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags)
boost::asio::basic_raw_socket::send_to	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^class basic_serial_port$/;"	c	namespace:boost::asio	inherits:basic_io_object,serial_port_base
boost::asio::basic_serial_port::assign	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code assign(const native_type& native_serial_port,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const native_type& native_serial_port, boost::system::error_code& ec)
boost::asio::basic_serial_port::assign	/usr/include/boost/asio/basic_serial_port.hpp	/^  void assign(const native_type& native_serial_port)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const native_type& native_serial_port)
boost::asio::basic_serial_port::async_read_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::basic_serial_port::async_write_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::basic_serial_port::basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^  basic_serial_port(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::asio::io_service& io_service, const native_type& native_serial_port)
boost::asio::basic_serial_port::basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^  explicit basic_serial_port(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::basic_serial_port::basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^  explicit basic_serial_port(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::asio::io_service& io_service, const char* device)
boost::asio::basic_serial_port::basic_serial_port	/usr/include/boost/asio/basic_serial_port.hpp	/^  explicit basic_serial_port(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::asio::io_service& io_service, const std::string& device)
boost::asio::basic_serial_port::cancel	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_serial_port::cancel	/usr/include/boost/asio/basic_serial_port.hpp	/^  void cancel()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
boost::asio::basic_serial_port::close	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_serial_port::close	/usr/include/boost/asio/basic_serial_port.hpp	/^  void close()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
boost::asio::basic_serial_port::get_option	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code get_option(GettableSerialPortOption& option,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(GettableSerialPortOption& option, boost::system::error_code& ec)
boost::asio::basic_serial_port::get_option	/usr/include/boost/asio/basic_serial_port.hpp	/^  void get_option(GettableSerialPortOption& option)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(GettableSerialPortOption& option)
boost::asio::basic_serial_port::is_open	/usr/include/boost/asio/basic_serial_port.hpp	/^  bool is_open() const$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:() const
boost::asio::basic_serial_port::lowest_layer	/usr/include/boost/asio/basic_serial_port.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:() const
boost::asio::basic_serial_port::lowest_layer	/usr/include/boost/asio/basic_serial_port.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
boost::asio::basic_serial_port::lowest_layer_type	/usr/include/boost/asio/basic_serial_port.hpp	/^  typedef basic_serial_port<SerialPortService> lowest_layer_type;$/;"	t	class:boost::asio::basic_serial_port	access:public
boost::asio::basic_serial_port::native	/usr/include/boost/asio/basic_serial_port.hpp	/^  native_type native()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
boost::asio::basic_serial_port::native_type	/usr/include/boost/asio/basic_serial_port.hpp	/^  typedef typename SerialPortService::native_type native_type;$/;"	t	class:boost::asio::basic_serial_port	access:public
boost::asio::basic_serial_port::open	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code open(const std::string& device,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const std::string& device, boost::system::error_code& ec)
boost::asio::basic_serial_port::open	/usr/include/boost/asio/basic_serial_port.hpp	/^  void open(const std::string& device)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const std::string& device)
boost::asio::basic_serial_port::read_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::basic_serial_port::read_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::basic_serial_port::send_break	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code send_break(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_serial_port::send_break	/usr/include/boost/asio/basic_serial_port.hpp	/^  void send_break()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
boost::asio::basic_serial_port::set_option	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code set_option(const SettableSerialPortOption& option,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const SettableSerialPortOption& option, boost::system::error_code& ec)
boost::asio::basic_serial_port::set_option	/usr/include/boost/asio/basic_serial_port.hpp	/^  void set_option(const SettableSerialPortOption& option)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const SettableSerialPortOption& option)
boost::asio::basic_serial_port::write_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::basic_serial_port::write_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^class basic_socket$/;"	c	namespace:boost::asio	inherits:basic_io_object,socket_base
boost::asio::basic_socket::assign	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code assign(const protocol_type& protocol,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const protocol_type& protocol, const native_type& native_socket, boost::system::error_code& ec)
boost::asio::basic_socket::assign	/usr/include/boost/asio/basic_socket.hpp	/^  void assign(const protocol_type& protocol, const native_type& native_socket)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const protocol_type& protocol, const native_type& native_socket)
boost::asio::basic_socket::async_connect	/usr/include/boost/asio/basic_socket.hpp	/^  void async_connect(const endpoint_type& peer_endpoint, ConnectHandler handler)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const endpoint_type& peer_endpoint, ConnectHandler handler)
boost::asio::basic_socket::at_mark	/usr/include/boost/asio/basic_socket.hpp	/^  bool at_mark() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
boost::asio::basic_socket::at_mark	/usr/include/boost/asio/basic_socket.hpp	/^  bool at_mark(boost::system::error_code& ec) const$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec) const
boost::asio::basic_socket::available	/usr/include/boost/asio/basic_socket.hpp	/^  std::size_t available() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
boost::asio::basic_socket::available	/usr/include/boost/asio/basic_socket.hpp	/^  std::size_t available(boost::system::error_code& ec) const$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec) const
boost::asio::basic_socket::basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  basic_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint)
boost::asio::basic_socket::basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  basic_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
boost::asio::basic_socket::basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  basic_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_type& native_socket)
boost::asio::basic_socket::basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  explicit basic_socket(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::basic_socket::bind	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code bind(const endpoint_type& endpoint,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const endpoint_type& endpoint, boost::system::error_code& ec)
boost::asio::basic_socket::bind	/usr/include/boost/asio/basic_socket.hpp	/^  void bind(const endpoint_type& endpoint)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const endpoint_type& endpoint)
boost::asio::basic_socket::cancel	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_socket::cancel	/usr/include/boost/asio/basic_socket.hpp	/^  void cancel()$/;"	f	class:boost::asio::basic_socket	access:public	signature:()
boost::asio::basic_socket::close	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_socket::close	/usr/include/boost/asio/basic_socket.hpp	/^  void close()$/;"	f	class:boost::asio::basic_socket	access:public	signature:()
boost::asio::basic_socket::connect	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code connect(const endpoint_type& peer_endpoint,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const endpoint_type& peer_endpoint, boost::system::error_code& ec)
boost::asio::basic_socket::connect	/usr/include/boost/asio/basic_socket.hpp	/^  void connect(const endpoint_type& peer_endpoint)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const endpoint_type& peer_endpoint)
boost::asio::basic_socket::endpoint_type	/usr/include/boost/asio/basic_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_socket	access:public
boost::asio::basic_socket::get_option	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code get_option(GettableSocketOption& option,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(GettableSocketOption& option, boost::system::error_code& ec) const
boost::asio::basic_socket::get_option	/usr/include/boost/asio/basic_socket.hpp	/^  void get_option(GettableSocketOption& option) const$/;"	f	class:boost::asio::basic_socket	access:public	signature:(GettableSocketOption& option) const
boost::asio::basic_socket::io_control	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code io_control(IoControlCommand& command,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(IoControlCommand& command, boost::system::error_code& ec)
boost::asio::basic_socket::io_control	/usr/include/boost/asio/basic_socket.hpp	/^  void io_control(IoControlCommand& command)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(IoControlCommand& command)
boost::asio::basic_socket::is_open	/usr/include/boost/asio/basic_socket.hpp	/^  bool is_open() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
boost::asio::basic_socket::local_endpoint	/usr/include/boost/asio/basic_socket.hpp	/^  endpoint_type local_endpoint() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
boost::asio::basic_socket::local_endpoint	/usr/include/boost/asio/basic_socket.hpp	/^  endpoint_type local_endpoint(boost::system::error_code& ec) const$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec) const
boost::asio::basic_socket::lowest_layer	/usr/include/boost/asio/basic_socket.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
boost::asio::basic_socket::lowest_layer	/usr/include/boost/asio/basic_socket.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::basic_socket	access:public	signature:()
boost::asio::basic_socket::lowest_layer_type	/usr/include/boost/asio/basic_socket.hpp	/^  typedef basic_socket<Protocol, SocketService> lowest_layer_type;$/;"	t	class:boost::asio::basic_socket	access:public
boost::asio::basic_socket::native	/usr/include/boost/asio/basic_socket.hpp	/^  native_type native()$/;"	f	class:boost::asio::basic_socket	access:public	signature:()
boost::asio::basic_socket::native_type	/usr/include/boost/asio/basic_socket.hpp	/^  typedef typename SocketService::native_type native_type;$/;"	t	class:boost::asio::basic_socket	access:public
boost::asio::basic_socket::open	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code open(const protocol_type& protocol,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const protocol_type& protocol, boost::system::error_code& ec)
boost::asio::basic_socket::open	/usr/include/boost/asio/basic_socket.hpp	/^  void open(const protocol_type& protocol = protocol_type())$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const protocol_type& protocol = protocol_type())
boost::asio::basic_socket::protocol_type	/usr/include/boost/asio/basic_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_socket	access:public
boost::asio::basic_socket::remote_endpoint	/usr/include/boost/asio/basic_socket.hpp	/^  endpoint_type remote_endpoint() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
boost::asio::basic_socket::remote_endpoint	/usr/include/boost/asio/basic_socket.hpp	/^  endpoint_type remote_endpoint(boost::system::error_code& ec) const$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec) const
boost::asio::basic_socket::set_option	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code set_option(const SettableSocketOption& option,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const SettableSocketOption& option, boost::system::error_code& ec)
boost::asio::basic_socket::set_option	/usr/include/boost/asio/basic_socket.hpp	/^  void set_option(const SettableSocketOption& option)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const SettableSocketOption& option)
boost::asio::basic_socket::shutdown	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code shutdown(shutdown_type what,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(shutdown_type what, boost::system::error_code& ec)
boost::asio::basic_socket::shutdown	/usr/include/boost/asio/basic_socket.hpp	/^  void shutdown(shutdown_type what)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(shutdown_type what)
boost::asio::basic_socket::~basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  ~basic_socket()$/;"	f	class:boost::asio::basic_socket	access:protected	signature:()
boost::asio::basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^class basic_socket_acceptor$/;"	c	namespace:boost::asio	inherits:basic_io_object,socket_base
boost::asio::basic_socket_acceptor::accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code accept($/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:( basic_socket<protocol_type, SocketService>& peer, boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code accept($/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:( basic_socket<protocol_type, SocketService>& peer, endpoint_type& peer_endpoint, boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void accept(basic_socket<protocol_type, SocketService>& peer)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(basic_socket<protocol_type, SocketService>& peer)
boost::asio::basic_socket_acceptor::accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void accept(basic_socket<protocol_type, SocketService>& peer,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(basic_socket<protocol_type, SocketService>& peer, endpoint_type& peer_endpoint)
boost::asio::basic_socket_acceptor::assign	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code assign(const protocol_type& protocol,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const protocol_type& protocol, const native_type& native_acceptor, boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::assign	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void assign(const protocol_type& protocol, const native_type& native_acceptor)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const protocol_type& protocol, const native_type& native_acceptor)
boost::asio::basic_socket_acceptor::async_accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void async_accept(basic_socket<protocol_type, SocketService>& peer,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(basic_socket<protocol_type, SocketService>& peer, AcceptHandler handler)
boost::asio::basic_socket_acceptor::async_accept	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void async_accept(basic_socket<protocol_type, SocketService>& peer,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(basic_socket<protocol_type, SocketService>& peer, endpoint_type& peer_endpoint, AcceptHandler handler)
boost::asio::basic_socket_acceptor::basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  basic_socket_acceptor(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint, bool reuse_addr = true)
boost::asio::basic_socket_acceptor::basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  basic_socket_acceptor(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
boost::asio::basic_socket_acceptor::basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  basic_socket_acceptor(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_type& native_acceptor)
boost::asio::basic_socket_acceptor::basic_socket_acceptor	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  explicit basic_socket_acceptor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::basic_socket_acceptor::bind	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code bind(const endpoint_type& endpoint,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const endpoint_type& endpoint, boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::bind	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void bind(const endpoint_type& endpoint)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const endpoint_type& endpoint)
boost::asio::basic_socket_acceptor::cancel	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::cancel	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void cancel()$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:()
boost::asio::basic_socket_acceptor::close	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::close	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void close()$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:()
boost::asio::basic_socket_acceptor::endpoint_type	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_socket_acceptor	access:public
boost::asio::basic_socket_acceptor::get_option	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code get_option(GettableSocketOption& option,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(GettableSocketOption& option, boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::get_option	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void get_option(GettableSocketOption& option)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(GettableSocketOption& option)
boost::asio::basic_socket_acceptor::is_open	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  bool is_open() const$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:() const
boost::asio::basic_socket_acceptor::listen	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code listen(int backlog, boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(int backlog, boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::listen	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void listen(int backlog = socket_base::max_connections)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(int backlog = socket_base::max_connections)
boost::asio::basic_socket_acceptor::local_endpoint	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  endpoint_type local_endpoint() const$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:() const
boost::asio::basic_socket_acceptor::local_endpoint	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  endpoint_type local_endpoint(boost::system::error_code& ec) const$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::system::error_code& ec) const
boost::asio::basic_socket_acceptor::native	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  native_type native()$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:()
boost::asio::basic_socket_acceptor::native_type	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  typedef typename SocketAcceptorService::native_type native_type;$/;"	t	class:boost::asio::basic_socket_acceptor	access:public
boost::asio::basic_socket_acceptor::open	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code open(const protocol_type& protocol,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const protocol_type& protocol, boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::open	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void open(const protocol_type& protocol = protocol_type())$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const protocol_type& protocol = protocol_type())
boost::asio::basic_socket_acceptor::protocol_type	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_socket_acceptor	access:public
boost::asio::basic_socket_acceptor::set_option	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code set_option(const SettableSocketOption& option,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const SettableSocketOption& option, boost::system::error_code& ec)
boost::asio::basic_socket_acceptor::set_option	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void set_option(const SettableSocketOption& option)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const SettableSocketOption& option)
boost::asio::basic_socket_iostream	/usr/include/boost/asio/basic_socket_iostream.hpp	/^class basic_socket_iostream$/;"	c	namespace:boost::asio	inherits:boost::base_from_member,std::basic_iostream
boost::asio::basic_socket_iostream::basic_socket_iostream	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  basic_socket_iostream()$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:()
boost::asio::basic_socket_iostream::basic_socket_iostream	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  explicit basic_socket_iostream(T1 t1, ..., TN tn);$/;"	p	class:boost::asio::basic_socket_iostream	access:public	signature:(T1 t1, ..., TN tn)
boost::asio::basic_socket_iostream::close	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  void close()$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:()
boost::asio::basic_socket_iostream::connect	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  void connect(T1 t1, ..., TN tn);$/;"	p	class:boost::asio::basic_socket_iostream	access:public	signature:(T1 t1, ..., TN tn)
boost::asio::basic_socket_iostream::rdbuf	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  basic_socket_streambuf<Protocol, StreamSocketService>* rdbuf() const$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:() const
boost::asio::basic_socket_streambuf	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^class basic_socket_streambuf$/;"	c	namespace:boost::asio	inherits:std::streambuf,boost::base_from_member,basic_socket
boost::asio::basic_socket_streambuf::basic_socket_streambuf	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  basic_socket_streambuf()$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:()
boost::asio::basic_socket_streambuf::buffer_size	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  enum { buffer_size = 512 };$/;"	e	enum:boost::asio::basic_socket_streambuf::__anon2
boost::asio::basic_socket_streambuf::close	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  basic_socket_streambuf<Protocol, StreamSocketService>* close()$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:()
boost::asio::basic_socket_streambuf::connect	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  basic_socket_streambuf<Protocol, StreamSocketService>* connect($/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:( const endpoint_type& endpoint)
boost::asio::basic_socket_streambuf::connect	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  basic_socket_streambuf<Protocol, StreamSocketService>* connect($/;"	p	class:boost::asio::basic_socket_streambuf	access:public	signature:( T1 t1, ..., TN tn)
boost::asio::basic_socket_streambuf::endpoint_type	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_socket_streambuf	access:public
boost::asio::basic_socket_streambuf::get_buffer_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  boost::array<char, buffer_size> get_buffer_;$/;"	m	class:boost::asio::basic_socket_streambuf	access:private
boost::asio::basic_socket_streambuf::init_buffers	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  void init_buffers()$/;"	f	class:boost::asio::basic_socket_streambuf	access:private	signature:()
boost::asio::basic_socket_streambuf::overflow	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  int_type overflow(int_type c)$/;"	f	class:boost::asio::basic_socket_streambuf	access:protected	signature:(int_type c)
boost::asio::basic_socket_streambuf::putback_max	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  enum { putback_max = 8 };$/;"	e	enum:boost::asio::basic_socket_streambuf::__anon1
boost::asio::basic_socket_streambuf::put_buffer_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  boost::array<char, buffer_size> put_buffer_;$/;"	m	class:boost::asio::basic_socket_streambuf	access:private
boost::asio::basic_socket_streambuf::resolve_and_connect	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  void resolve_and_connect(const ResolverQuery& query,$/;"	f	class:boost::asio::basic_socket_streambuf	access:private	signature:(const ResolverQuery& query, boost::system::error_code& ec)
boost::asio::basic_socket_streambuf::setbuf	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  std::streambuf* setbuf(char_type* s, std::streamsize n)$/;"	f	class:boost::asio::basic_socket_streambuf	access:protected	signature:(char_type* s, std::streamsize n)
boost::asio::basic_socket_streambuf::sync	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  int sync()$/;"	f	class:boost::asio::basic_socket_streambuf	access:protected	signature:()
boost::asio::basic_socket_streambuf::unbuffered_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  bool unbuffered_;$/;"	m	class:boost::asio::basic_socket_streambuf	access:private
boost::asio::basic_socket_streambuf::underflow	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  int_type underflow()$/;"	f	class:boost::asio::basic_socket_streambuf	access:protected	signature:()
boost::asio::basic_socket_streambuf::~basic_socket_streambuf	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  virtual ~basic_socket_streambuf()$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:()
boost::asio::basic_streambuf	/usr/include/boost/asio/basic_streambuf.hpp	/^class basic_streambuf$/;"	c	namespace:boost::asio	inherits:std::streambuf,noncopyable
boost::asio::basic_streambuf::basic_streambuf	/usr/include/boost/asio/basic_streambuf.hpp	/^  explicit basic_streambuf($/;"	f	class:boost::asio::basic_streambuf	access:public	signature:( std::size_t max_size = (std::numeric_limits<std::size_t>::max)(), const Allocator& allocator = Allocator())
boost::asio::basic_streambuf::buffer_	/usr/include/boost/asio/basic_streambuf.hpp	/^  std::vector<char_type, Allocator> buffer_;$/;"	m	class:boost::asio::basic_streambuf	access:private
boost::asio::basic_streambuf::buffer_delta	/usr/include/boost/asio/basic_streambuf.hpp	/^  enum { buffer_delta = 128 };$/;"	e	enum:boost::asio::basic_streambuf::__anon3
boost::asio::basic_streambuf::commit	/usr/include/boost/asio/basic_streambuf.hpp	/^  void commit(std::size_t n)$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:(std::size_t n)
boost::asio::basic_streambuf::const_buffers_type	/usr/include/boost/asio/basic_streambuf.hpp	/^  typedef implementation_defined const_buffers_type;$/;"	t	class:boost::asio::basic_streambuf	access:public
boost::asio::basic_streambuf::consume	/usr/include/boost/asio/basic_streambuf.hpp	/^  void consume(std::size_t n)$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:(std::size_t n)
boost::asio::basic_streambuf::data	/usr/include/boost/asio/basic_streambuf.hpp	/^  const_buffers_type data() const$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:() const
boost::asio::basic_streambuf::max_size	/usr/include/boost/asio/basic_streambuf.hpp	/^  std::size_t max_size() const$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:() const
boost::asio::basic_streambuf::max_size_	/usr/include/boost/asio/basic_streambuf.hpp	/^  std::size_t max_size_;$/;"	m	class:boost::asio::basic_streambuf	access:private
boost::asio::basic_streambuf::mutable_buffers_type	/usr/include/boost/asio/basic_streambuf.hpp	/^  typedef implementation_defined mutable_buffers_type;$/;"	t	class:boost::asio::basic_streambuf	access:public
boost::asio::basic_streambuf::overflow	/usr/include/boost/asio/basic_streambuf.hpp	/^  int_type overflow(int_type c)$/;"	f	class:boost::asio::basic_streambuf	access:protected	signature:(int_type c)
boost::asio::basic_streambuf::prepare	/usr/include/boost/asio/basic_streambuf.hpp	/^  mutable_buffers_type prepare(std::size_t n)$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:(std::size_t n)
boost::asio::basic_streambuf::reserve	/usr/include/boost/asio/basic_streambuf.hpp	/^  void reserve(std::size_t n)$/;"	f	class:boost::asio::basic_streambuf	access:protected	signature:(std::size_t n)
boost::asio::basic_streambuf::size	/usr/include/boost/asio/basic_streambuf.hpp	/^  std::size_t size() const$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:() const
boost::asio::basic_streambuf::underflow	/usr/include/boost/asio/basic_streambuf.hpp	/^  int_type underflow()$/;"	f	class:boost::asio::basic_streambuf	access:protected	signature:()
boost::asio::basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^class basic_stream_socket$/;"	c	namespace:boost::asio	inherits:basic_socket
boost::asio::basic_stream_socket::async_read_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::basic_stream_socket::async_receive	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers, ReadHandler handler)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::basic_stream_socket::async_receive	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, ReadHandler handler)
boost::asio::basic_stream_socket::async_send	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers, WriteHandler handler)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::basic_stream_socket::async_send	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, WriteHandler handler)
boost::asio::basic_stream_socket::async_write_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::basic_stream_socket::basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^  basic_stream_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(boost::asio::io_service& io_service, const endpoint_type& endpoint)
boost::asio::basic_stream_socket::basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^  basic_stream_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol)
boost::asio::basic_stream_socket::basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^  basic_stream_socket(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(boost::asio::io_service& io_service, const protocol_type& protocol, const native_type& native_socket)
boost::asio::basic_stream_socket::basic_stream_socket	/usr/include/boost/asio/basic_stream_socket.hpp	/^  explicit basic_stream_socket(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::basic_stream_socket::endpoint_type	/usr/include/boost/asio/basic_stream_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_stream_socket	access:public
boost::asio::basic_stream_socket::native_type	/usr/include/boost/asio/basic_stream_socket.hpp	/^  typedef typename StreamSocketService::native_type native_type;$/;"	t	class:boost::asio::basic_stream_socket	access:public
boost::asio::basic_stream_socket::protocol_type	/usr/include/boost/asio/basic_stream_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_stream_socket	access:public
boost::asio::basic_stream_socket::read_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::basic_stream_socket::read_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::basic_stream_socket::receive	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::basic_stream_socket::receive	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags)
boost::asio::basic_stream_socket::receive	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::basic_stream_socket::send	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::basic_stream_socket::send	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags)
boost::asio::basic_stream_socket::send	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::basic_stream_socket::write_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::basic_stream_socket::write_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^buffer(boost::array<PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(boost::array<PodType, N>& data)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^buffer(boost::array<PodType, N>& data, std::size_t max_size_in_bytes)$/;"	f	namespace:boost::asio	signature:(boost::array<PodType, N>& data, std::size_t max_size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer($/;"	f	namespace:boost::asio	signature:( const std::vector<PodType, Allocator>& data)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer($/;"	f	namespace:boost::asio	signature:( const std::vector<PodType, Allocator>& data, std::size_t max_size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(boost::array<const PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(boost::array<const PodType, N>& data)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(boost::array<const PodType, N>& data,$/;"	f	namespace:boost::asio	signature:(boost::array<const PodType, N>& data, std::size_t max_size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const boost::array<PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(const boost::array<PodType, N>& data)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const boost::array<PodType, N>& data,$/;"	f	namespace:boost::asio	signature:(const boost::array<PodType, N>& data, std::size_t max_size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const const_buffer& b)$/;"	f	namespace:boost::asio	signature:(const const_buffer& b)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const const_buffer& b,$/;"	f	namespace:boost::asio	signature:(const const_buffer& b, std::size_t max_size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const std::string& data)$/;"	f	namespace:boost::asio	signature:(const std::string& data)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const std::string& data,$/;"	f	namespace:boost::asio	signature:(const std::string& data, std::size_t max_size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const void* data,$/;"	f	namespace:boost::asio	signature:(const void* data, std::size_t size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(boost::array<PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(boost::array<PodType, N>& data)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(boost::array<PodType, N>& data,$/;"	f	namespace:boost::asio	signature:(boost::array<PodType, N>& data, std::size_t max_size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(const mutable_buffer& b)$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& b)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(const mutable_buffer& b,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& b, std::size_t max_size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(std::vector<PodType, Allocator>& data)$/;"	f	namespace:boost::asio	signature:(std::vector<PodType, Allocator>& data)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(std::vector<PodType, Allocator>& data,$/;"	f	namespace:boost::asio	signature:(std::vector<PodType, Allocator>& data, std::size_t max_size_in_bytes)
boost::asio::buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(void* data, std::size_t size_in_bytes)$/;"	f	namespace:boost::asio	signature:(void* data, std::size_t size_in_bytes)
boost::asio::buffered_read_stream	/usr/include/boost/asio/buffered_read_stream.hpp	/^class buffered_read_stream$/;"	c	namespace:boost::asio	inherits:noncopyable
boost::asio::buffered_read_stream::async_fill	/usr/include/boost/asio/buffered_read_stream.hpp	/^  void async_fill(ReadHandler handler)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(ReadHandler handler)
boost::asio::buffered_read_stream::async_read_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::buffered_read_stream::async_write_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::buffered_read_stream::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/buffered_read_stream.hpp	/^  BOOST_STATIC_CONSTANT(std::size_t, default_buffer_size = 1024);$/;"	p	class:boost::asio::buffered_read_stream	access:public	signature:(std::size_t, default_buffer_size = 1024)
boost::asio::buffered_read_stream::buffered_read_stream	/usr/include/boost/asio/buffered_read_stream.hpp	/^  buffered_read_stream(Arg& a, std::size_t buffer_size)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(Arg& a, std::size_t buffer_size)
boost::asio::buffered_read_stream::buffered_read_stream	/usr/include/boost/asio/buffered_read_stream.hpp	/^  explicit buffered_read_stream(Arg& a)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(Arg& a)
boost::asio::buffered_read_stream::close	/usr/include/boost/asio/buffered_read_stream.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::buffered_read_stream::close	/usr/include/boost/asio/buffered_read_stream.hpp	/^  void close()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
boost::asio::buffered_read_stream::copy	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t copy(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_read_stream	access:private	signature:(const MutableBufferSequence& buffers)
boost::asio::buffered_read_stream::default_buffer_size	/usr/include/boost/asio/buffered_read_stream.hpp	/^  static const std::size_t default_buffer_size = implementation_defined;$/;"	m	class:boost::asio::buffered_read_stream	access:public
boost::asio::buffered_read_stream::fill	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t fill()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
boost::asio::buffered_read_stream::fill	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t fill(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::buffered_read_stream::fill_handler	/usr/include/boost/asio/buffered_read_stream.hpp	/^  class fill_handler$/;"	c	class:boost::asio::buffered_read_stream	access:public
boost::asio::buffered_read_stream::fill_handler::fill_handler	/usr/include/boost/asio/buffered_read_stream.hpp	/^    fill_handler(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::buffered_read_stream::fill_handler	access:public	signature:(boost::asio::io_service& io_service, detail::buffered_stream_storage& storage, std::size_t previous_size, ReadHandler handler)
boost::asio::buffered_read_stream::fill_handler::handler_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::buffered_read_stream::fill_handler	access:private
boost::asio::buffered_read_stream::fill_handler::io_service_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::buffered_read_stream::fill_handler	access:private
boost::asio::buffered_read_stream::fill_handler::operator ()	/usr/include/boost/asio/buffered_read_stream.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::buffered_read_stream::fill_handler	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::buffered_read_stream::fill_handler::previous_size_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    std::size_t previous_size_;$/;"	m	class:boost::asio::buffered_read_stream::fill_handler	access:private
boost::asio::buffered_read_stream::fill_handler::storage_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    detail::buffered_stream_storage& storage_;$/;"	m	class:boost::asio::buffered_read_stream::fill_handler	access:private
boost::asio::buffered_read_stream::get_io_service	/usr/include/boost/asio/buffered_read_stream.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
boost::asio::buffered_read_stream::in_avail	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t in_avail()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
boost::asio::buffered_read_stream::in_avail	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t in_avail(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::buffered_read_stream::io_service	/usr/include/boost/asio/buffered_read_stream.hpp	/^  boost::asio::io_service& io_service()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
boost::asio::buffered_read_stream::lowest_layer	/usr/include/boost/asio/buffered_read_stream.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:() const
boost::asio::buffered_read_stream::lowest_layer	/usr/include/boost/asio/buffered_read_stream.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
boost::asio::buffered_read_stream::lowest_layer_type	/usr/include/boost/asio/buffered_read_stream.hpp	/^  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;$/;"	t	class:boost::asio::buffered_read_stream	access:public
boost::asio::buffered_read_stream::next_layer	/usr/include/boost/asio/buffered_read_stream.hpp	/^  next_layer_type& next_layer()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
boost::asio::buffered_read_stream::next_layer_	/usr/include/boost/asio/buffered_read_stream.hpp	/^  Stream next_layer_;$/;"	m	class:boost::asio::buffered_read_stream	access:private
boost::asio::buffered_read_stream::next_layer_type	/usr/include/boost/asio/buffered_read_stream.hpp	/^  typedef typename boost::remove_reference<Stream>::type next_layer_type;$/;"	t	class:boost::asio::buffered_read_stream	access:public
boost::asio::buffered_read_stream::peek	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::buffered_read_stream::peek	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::buffered_read_stream::peek_copy	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t peek_copy(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_read_stream	access:private	signature:(const MutableBufferSequence& buffers)
boost::asio::buffered_read_stream::read_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::buffered_read_stream::read_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::buffered_read_stream::read_some_handler	/usr/include/boost/asio/buffered_read_stream.hpp	/^  class read_some_handler$/;"	c	class:boost::asio::buffered_read_stream	access:public
boost::asio::buffered_read_stream::read_some_handler::buffers_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    MutableBufferSequence buffers_;$/;"	m	class:boost::asio::buffered_read_stream::read_some_handler	access:private
boost::asio::buffered_read_stream::read_some_handler::handler_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::buffered_read_stream::read_some_handler	access:private
boost::asio::buffered_read_stream::read_some_handler::io_service_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::buffered_read_stream::read_some_handler	access:private
boost::asio::buffered_read_stream::read_some_handler::operator ()	/usr/include/boost/asio/buffered_read_stream.hpp	/^    void operator()(const boost::system::error_code& ec, std::size_t)$/;"	f	class:boost::asio::buffered_read_stream::read_some_handler	access:public	signature:(const boost::system::error_code& ec, std::size_t)
boost::asio::buffered_read_stream::read_some_handler::read_some_handler	/usr/include/boost/asio/buffered_read_stream.hpp	/^    read_some_handler(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::buffered_read_stream::read_some_handler	access:public	signature:(boost::asio::io_service& io_service, detail::buffered_stream_storage& storage, const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::buffered_read_stream::read_some_handler::storage_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    detail::buffered_stream_storage& storage_;$/;"	m	class:boost::asio::buffered_read_stream::read_some_handler	access:private
boost::asio::buffered_read_stream::storage_	/usr/include/boost/asio/buffered_read_stream.hpp	/^  detail::buffered_stream_storage storage_;$/;"	m	class:boost::asio::buffered_read_stream	access:private
boost::asio::buffered_read_stream::write_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::buffered_read_stream::write_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::buffered_stream	/usr/include/boost/asio/buffered_stream.hpp	/^class buffered_stream$/;"	c	namespace:boost::asio	inherits:noncopyable
boost::asio::buffered_stream::async_fill	/usr/include/boost/asio/buffered_stream.hpp	/^  void async_fill(ReadHandler handler)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(ReadHandler handler)
boost::asio::buffered_stream::async_flush	/usr/include/boost/asio/buffered_stream.hpp	/^  void async_flush(WriteHandler handler)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(WriteHandler handler)
boost::asio::buffered_stream::async_read_some	/usr/include/boost/asio/buffered_stream.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::buffered_stream::async_write_some	/usr/include/boost/asio/buffered_stream.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::buffered_stream::buffered_stream	/usr/include/boost/asio/buffered_stream.hpp	/^  explicit buffered_stream(Arg& a)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(Arg& a)
boost::asio::buffered_stream::buffered_stream	/usr/include/boost/asio/buffered_stream.hpp	/^  explicit buffered_stream(Arg& a, std::size_t read_buffer_size,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(Arg& a, std::size_t read_buffer_size, std::size_t write_buffer_size)
boost::asio::buffered_stream::close	/usr/include/boost/asio/buffered_stream.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::buffered_stream::close	/usr/include/boost/asio/buffered_stream.hpp	/^  void close()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
boost::asio::buffered_stream::fill	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t fill()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
boost::asio::buffered_stream::fill	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t fill(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::buffered_stream::flush	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t flush()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
boost::asio::buffered_stream::flush	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t flush(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::buffered_stream::get_io_service	/usr/include/boost/asio/buffered_stream.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
boost::asio::buffered_stream::inner_stream_impl_	/usr/include/boost/asio/buffered_stream.hpp	/^  write_stream_type inner_stream_impl_;$/;"	m	class:boost::asio::buffered_stream	access:private
boost::asio::buffered_stream::in_avail	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t in_avail()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
boost::asio::buffered_stream::in_avail	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t in_avail(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::buffered_stream::io_service	/usr/include/boost/asio/buffered_stream.hpp	/^  boost::asio::io_service& io_service()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
boost::asio::buffered_stream::lowest_layer	/usr/include/boost/asio/buffered_stream.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::buffered_stream	access:public	signature:() const
boost::asio::buffered_stream::lowest_layer	/usr/include/boost/asio/buffered_stream.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
boost::asio::buffered_stream::lowest_layer_type	/usr/include/boost/asio/buffered_stream.hpp	/^  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;$/;"	t	class:boost::asio::buffered_stream	access:public
boost::asio::buffered_stream::next_layer	/usr/include/boost/asio/buffered_stream.hpp	/^  next_layer_type& next_layer()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
boost::asio::buffered_stream::next_layer_type	/usr/include/boost/asio/buffered_stream.hpp	/^  typedef typename boost::remove_reference<Stream>::type next_layer_type;$/;"	t	class:boost::asio::buffered_stream	access:public
boost::asio::buffered_stream::peek	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::buffered_stream::peek	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::buffered_stream::read_some	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::buffered_stream::read_some	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::buffered_stream::read_stream_type	/usr/include/boost/asio/buffered_stream.hpp	/^  typedef buffered_read_stream<write_stream_type&> read_stream_type;$/;"	t	class:boost::asio::buffered_stream	access:private
boost::asio::buffered_stream::stream_impl_	/usr/include/boost/asio/buffered_stream.hpp	/^  read_stream_type stream_impl_;$/;"	m	class:boost::asio::buffered_stream	access:private
boost::asio::buffered_stream::write_some	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::buffered_stream::write_some	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::buffered_stream::write_stream_type	/usr/include/boost/asio/buffered_stream.hpp	/^  typedef buffered_write_stream<Stream> write_stream_type;$/;"	t	class:boost::asio::buffered_stream	access:private
boost::asio::buffered_write_stream	/usr/include/boost/asio/buffered_write_stream.hpp	/^class buffered_write_stream$/;"	c	namespace:boost::asio	inherits:noncopyable
boost::asio::buffered_write_stream::async_flush	/usr/include/boost/asio/buffered_write_stream.hpp	/^  void async_flush(WriteHandler handler)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(WriteHandler handler)
boost::asio::buffered_write_stream::async_read_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::buffered_write_stream::async_write_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::buffered_write_stream::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/buffered_write_stream.hpp	/^  BOOST_STATIC_CONSTANT(std::size_t, default_buffer_size = 1024);$/;"	p	class:boost::asio::buffered_write_stream	access:public	signature:(std::size_t, default_buffer_size = 1024)
boost::asio::buffered_write_stream::buffered_write_stream	/usr/include/boost/asio/buffered_write_stream.hpp	/^  buffered_write_stream(Arg& a, std::size_t buffer_size)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(Arg& a, std::size_t buffer_size)
boost::asio::buffered_write_stream::buffered_write_stream	/usr/include/boost/asio/buffered_write_stream.hpp	/^  explicit buffered_write_stream(Arg& a)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(Arg& a)
boost::asio::buffered_write_stream::close	/usr/include/boost/asio/buffered_write_stream.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::buffered_write_stream::close	/usr/include/boost/asio/buffered_write_stream.hpp	/^  void close()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
boost::asio::buffered_write_stream::copy	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t copy(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_write_stream	access:private	signature:(const ConstBufferSequence& buffers)
boost::asio::buffered_write_stream::default_buffer_size	/usr/include/boost/asio/buffered_write_stream.hpp	/^  static const std::size_t default_buffer_size = implementation_defined;$/;"	m	class:boost::asio::buffered_write_stream	access:public
boost::asio::buffered_write_stream::flush	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t flush()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
boost::asio::buffered_write_stream::flush	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t flush(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::buffered_write_stream::flush_handler	/usr/include/boost/asio/buffered_write_stream.hpp	/^  class flush_handler$/;"	c	class:boost::asio::buffered_write_stream	access:public
boost::asio::buffered_write_stream::flush_handler::flush_handler	/usr/include/boost/asio/buffered_write_stream.hpp	/^    flush_handler(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::buffered_write_stream::flush_handler	access:public	signature:(boost::asio::io_service& io_service, detail::buffered_stream_storage& storage, WriteHandler handler)
boost::asio::buffered_write_stream::flush_handler::handler_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    WriteHandler handler_;$/;"	m	class:boost::asio::buffered_write_stream::flush_handler	access:private
boost::asio::buffered_write_stream::flush_handler::io_service_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::buffered_write_stream::flush_handler	access:private
boost::asio::buffered_write_stream::flush_handler::operator ()	/usr/include/boost/asio/buffered_write_stream.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::buffered_write_stream::flush_handler	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_written)
boost::asio::buffered_write_stream::flush_handler::storage_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    detail::buffered_stream_storage& storage_;$/;"	m	class:boost::asio::buffered_write_stream::flush_handler	access:private
boost::asio::buffered_write_stream::get_io_service	/usr/include/boost/asio/buffered_write_stream.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
boost::asio::buffered_write_stream::in_avail	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t in_avail()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
boost::asio::buffered_write_stream::in_avail	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t in_avail(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::buffered_write_stream::io_service	/usr/include/boost/asio/buffered_write_stream.hpp	/^  boost::asio::io_service& io_service()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
boost::asio::buffered_write_stream::lowest_layer	/usr/include/boost/asio/buffered_write_stream.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:() const
boost::asio::buffered_write_stream::lowest_layer	/usr/include/boost/asio/buffered_write_stream.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
boost::asio::buffered_write_stream::lowest_layer_type	/usr/include/boost/asio/buffered_write_stream.hpp	/^  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;$/;"	t	class:boost::asio::buffered_write_stream	access:public
boost::asio::buffered_write_stream::next_layer	/usr/include/boost/asio/buffered_write_stream.hpp	/^  next_layer_type& next_layer()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
boost::asio::buffered_write_stream::next_layer_	/usr/include/boost/asio/buffered_write_stream.hpp	/^  Stream next_layer_;$/;"	m	class:boost::asio::buffered_write_stream	access:private
boost::asio::buffered_write_stream::next_layer_type	/usr/include/boost/asio/buffered_write_stream.hpp	/^  typedef typename boost::remove_reference<Stream>::type next_layer_type;$/;"	t	class:boost::asio::buffered_write_stream	access:public
boost::asio::buffered_write_stream::peek	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::buffered_write_stream::peek	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::buffered_write_stream::read_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::buffered_write_stream::read_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::buffered_write_stream::storage_	/usr/include/boost/asio/buffered_write_stream.hpp	/^  detail::buffered_stream_storage storage_;$/;"	m	class:boost::asio::buffered_write_stream	access:private
boost::asio::buffered_write_stream::write_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::buffered_write_stream::write_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::buffered_write_stream::write_some_handler	/usr/include/boost/asio/buffered_write_stream.hpp	/^  class write_some_handler$/;"	c	class:boost::asio::buffered_write_stream	access:public
boost::asio::buffered_write_stream::write_some_handler::buffers_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    ConstBufferSequence buffers_;$/;"	m	class:boost::asio::buffered_write_stream::write_some_handler	access:private
boost::asio::buffered_write_stream::write_some_handler::handler_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    WriteHandler handler_;$/;"	m	class:boost::asio::buffered_write_stream::write_some_handler	access:private
boost::asio::buffered_write_stream::write_some_handler::io_service_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::buffered_write_stream::write_some_handler	access:private
boost::asio::buffered_write_stream::write_some_handler::operator ()	/usr/include/boost/asio/buffered_write_stream.hpp	/^    void operator()(const boost::system::error_code& ec, std::size_t)$/;"	f	class:boost::asio::buffered_write_stream::write_some_handler	access:public	signature:(const boost::system::error_code& ec, std::size_t)
boost::asio::buffered_write_stream::write_some_handler::storage_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    detail::buffered_stream_storage& storage_;$/;"	m	class:boost::asio::buffered_write_stream::write_some_handler	access:private
boost::asio::buffered_write_stream::write_some_handler::write_some_handler	/usr/include/boost/asio/buffered_write_stream.hpp	/^    write_some_handler(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::buffered_write_stream::write_some_handler	access:public	signature:(boost::asio::io_service& io_service, detail::buffered_stream_storage& storage, const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::buffers_begin	/usr/include/boost/asio/buffers_iterator.hpp	/^inline buffers_iterator<BufferSequence> buffers_begin($/;"	f	namespace:boost::asio	signature:( const BufferSequence& buffers)
boost::asio::buffers_end	/usr/include/boost/asio/buffers_iterator.hpp	/^inline buffers_iterator<BufferSequence> buffers_end($/;"	f	namespace:boost::asio	signature:( const BufferSequence& buffers)
boost::asio::buffers_iterator	/usr/include/boost/asio/buffers_iterator.hpp	/^class buffers_iterator$/;"	c	namespace:boost::asio	inherits:boost::iterator_facade
boost::asio::buffers_iterator::advance	/usr/include/boost/asio/buffers_iterator.hpp	/^  void advance(std::ptrdiff_t n)$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:(std::ptrdiff_t n)
boost::asio::buffers_iterator::begin	/usr/include/boost/asio/buffers_iterator.hpp	/^  static buffers_iterator begin(const BufferSequence& buffers)$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:(const BufferSequence& buffers)
boost::asio::buffers_iterator::begin_	/usr/include/boost/asio/buffers_iterator.hpp	/^  typename BufferSequence::const_iterator begin_;$/;"	m	class:boost::asio::buffers_iterator	access:private
boost::asio::buffers_iterator::buffers_iterator	/usr/include/boost/asio/buffers_iterator.hpp	/^  buffers_iterator()$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:()
boost::asio::buffers_iterator::buffer_type	/usr/include/boost/asio/buffers_iterator.hpp	/^      BufferSequence, ByteType>::buffer_type buffer_type;$/;"	t	class:boost::asio::buffers_iterator	access:private
boost::asio::buffers_iterator::byte_type	/usr/include/boost/asio/buffers_iterator.hpp	/^      BufferSequence, ByteType>::byte_type byte_type;$/;"	t	class:boost::asio::buffers_iterator	access:private
boost::asio::buffers_iterator::current_	/usr/include/boost/asio/buffers_iterator.hpp	/^  typename BufferSequence::const_iterator current_;$/;"	m	class:boost::asio::buffers_iterator	access:private
boost::asio::buffers_iterator::current_buffer_	/usr/include/boost/asio/buffers_iterator.hpp	/^  buffer_type current_buffer_;$/;"	m	class:boost::asio::buffers_iterator	access:private
boost::asio::buffers_iterator::current_buffer_position_	/usr/include/boost/asio/buffers_iterator.hpp	/^  std::size_t current_buffer_position_;$/;"	m	class:boost::asio::buffers_iterator	access:private
boost::asio::buffers_iterator::decrement	/usr/include/boost/asio/buffers_iterator.hpp	/^  void decrement()$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:()
boost::asio::buffers_iterator::dereference	/usr/include/boost/asio/buffers_iterator.hpp	/^  byte_type& dereference() const$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:() const
boost::asio::buffers_iterator::distance_to	/usr/include/boost/asio/buffers_iterator.hpp	/^  std::ptrdiff_t distance_to(const buffers_iterator& other) const$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:(const buffers_iterator& other) const
boost::asio::buffers_iterator::end	/usr/include/boost/asio/buffers_iterator.hpp	/^  static buffers_iterator end(const BufferSequence& buffers)$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:(const BufferSequence& buffers)
boost::asio::buffers_iterator::end_	/usr/include/boost/asio/buffers_iterator.hpp	/^  typename BufferSequence::const_iterator end_;$/;"	m	class:boost::asio::buffers_iterator	access:private
boost::asio::buffers_iterator::equal	/usr/include/boost/asio/buffers_iterator.hpp	/^  bool equal(const buffers_iterator& other) const$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:(const buffers_iterator& other) const
boost::asio::buffers_iterator::increment	/usr/include/boost/asio/buffers_iterator.hpp	/^  void increment()$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:()
boost::asio::buffers_iterator::position_	/usr/include/boost/asio/buffers_iterator.hpp	/^  std::size_t position_;$/;"	m	class:boost::asio::buffers_iterator	access:private
boost::asio::buffer_cast	/usr/include/boost/asio/buffer.hpp	/^inline PointerToPodType buffer_cast(const const_buffer& b)$/;"	f	namespace:boost::asio	signature:(const const_buffer& b)
boost::asio::buffer_cast	/usr/include/boost/asio/buffer.hpp	/^inline PointerToPodType buffer_cast(const mutable_buffer& b)$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& b)
boost::asio::buffer_size	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size(const const_buffer& b)$/;"	f	namespace:boost::asio	signature:(const const_buffer& b)
boost::asio::buffer_size	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size(const mutable_buffer& b)$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& b)
boost::asio::const_buffer	/usr/include/boost/asio/buffer.hpp	/^class const_buffer$/;"	c	namespace:boost::asio
boost::asio::const_buffer::boost::asio::detail::buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^  friend const void* boost::asio::detail::buffer_cast_helper($/;"	p	class:boost::asio::const_buffer::boost::asio::detail	access:friend	signature:( const const_buffer& b)
boost::asio::const_buffer::boost::asio::detail::buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^  friend std::size_t boost::asio::detail::buffer_size_helper($/;"	p	class:boost::asio::const_buffer::boost::asio::detail	access:friend	signature:( const const_buffer& b)
boost::asio::const_buffer::const_buffer	/usr/include/boost/asio/buffer.hpp	/^  const_buffer()$/;"	f	class:boost::asio::const_buffer	access:public	signature:()
boost::asio::const_buffer::const_buffer	/usr/include/boost/asio/buffer.hpp	/^  const_buffer(const mutable_buffer& b)$/;"	f	class:boost::asio::const_buffer	access:public	signature:(const mutable_buffer& b)
boost::asio::const_buffer::const_buffer	/usr/include/boost/asio/buffer.hpp	/^  const_buffer(const void* data, std::size_t size)$/;"	f	class:boost::asio::const_buffer	access:public	signature:(const void* data, std::size_t size)
boost::asio::const_buffer::const_buffer	/usr/include/boost/asio/buffer.hpp	/^  const_buffer(const void* data, std::size_t size,$/;"	f	class:boost::asio::const_buffer	access:public	signature:(const void* data, std::size_t size, boost::function<void()> debug_check)
boost::asio::const_buffer::data_	/usr/include/boost/asio/buffer.hpp	/^  const void* data_;$/;"	m	class:boost::asio::const_buffer	access:private
boost::asio::const_buffer::debug_check_	/usr/include/boost/asio/buffer.hpp	/^  boost::function<void()> debug_check_;$/;"	m	class:boost::asio::const_buffer	access:private
boost::asio::const_buffer::get_debug_check	/usr/include/boost/asio/buffer.hpp	/^  const boost::function<void()>& get_debug_check() const$/;"	f	class:boost::asio::const_buffer	access:public	signature:() const
boost::asio::const_buffer::size_	/usr/include/boost/asio/buffer.hpp	/^  std::size_t size_;$/;"	m	class:boost::asio::const_buffer	access:private
boost::asio::const_buffers_1	/usr/include/boost/asio/buffer.hpp	/^class const_buffers_1$/;"	c	namespace:boost::asio	inherits:const_buffer
boost::asio::const_buffers_1::begin	/usr/include/boost/asio/buffer.hpp	/^  const_iterator begin() const$/;"	f	class:boost::asio::const_buffers_1	access:public	signature:() const
boost::asio::const_buffers_1::const_buffers_1	/usr/include/boost/asio/buffer.hpp	/^  const_buffers_1(const void* data, std::size_t size)$/;"	f	class:boost::asio::const_buffers_1	access:public	signature:(const void* data, std::size_t size)
boost::asio::const_buffers_1::const_buffers_1	/usr/include/boost/asio/buffer.hpp	/^  explicit const_buffers_1(const const_buffer& b)$/;"	f	class:boost::asio::const_buffers_1	access:public	signature:(const const_buffer& b)
boost::asio::const_buffers_1::const_iterator	/usr/include/boost/asio/buffer.hpp	/^  typedef const const_buffer* const_iterator;$/;"	t	class:boost::asio::const_buffers_1	access:public
boost::asio::const_buffers_1::end	/usr/include/boost/asio/buffer.hpp	/^  const_iterator end() const$/;"	f	class:boost::asio::const_buffers_1	access:public	signature:() const
boost::asio::const_buffers_1::value_type	/usr/include/boost/asio/buffer.hpp	/^  typedef const_buffer value_type;$/;"	t	class:boost::asio::const_buffers_1	access:public
boost::asio::datagram_socket_service	/usr/include/boost/asio/datagram_socket_service.hpp	/^class datagram_socket_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
boost::asio::datagram_socket_service::assign	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_type& native_socket, boost::system::error_code& ec)
boost::asio::datagram_socket_service::async_connect	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void async_connect(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, ConnectHandler handler)
boost::asio::datagram_socket_service::async_receive	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void async_receive(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, ReadHandler handler)
boost::asio::datagram_socket_service::async_receive_from	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, ReadHandler handler)
boost::asio::datagram_socket_service::async_send	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void async_send(implementation_type& impl, const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, WriteHandler handler)
boost::asio::datagram_socket_service::async_send_to	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void async_send_to(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, WriteHandler handler)
boost::asio::datagram_socket_service::at_mark	/usr/include/boost/asio/datagram_socket_service.hpp	/^  bool at_mark(const implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::datagram_socket_service::available	/usr/include/boost/asio/datagram_socket_service.hpp	/^  std::size_t available(const implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::datagram_socket_service::bind	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
boost::asio::datagram_socket_service::cancel	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::datagram_socket_service::close	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::datagram_socket_service::connect	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code connect(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, boost::system::error_code& ec)
boost::asio::datagram_socket_service::construct	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::datagram_socket_service::datagram_socket_service	/usr/include/boost/asio/datagram_socket_service.hpp	/^  explicit datagram_socket_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::datagram_socket_service::destroy	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::datagram_socket_service::endpoint_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
boost::asio::datagram_socket_service::get_option	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl, GettableSocketOption& option, boost::system::error_code& ec) const
boost::asio::datagram_socket_service::id	/usr/include/boost/asio/datagram_socket_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::datagram_socket_service	access:public
boost::asio::datagram_socket_service::implementation_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
boost::asio::datagram_socket_service::implementation_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
boost::asio::datagram_socket_service::io_control	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
boost::asio::datagram_socket_service::is_open	/usr/include/boost/asio/datagram_socket_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl) const
boost::asio::datagram_socket_service::local_endpoint	/usr/include/boost/asio/datagram_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::datagram_socket_service::native	/usr/include/boost/asio/datagram_socket_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::datagram_socket_service::native_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
boost::asio::datagram_socket_service::native_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef typename service_impl_type::native_type native_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
boost::asio::datagram_socket_service::open	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
boost::asio::datagram_socket_service::protocol_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
boost::asio::datagram_socket_service::receive	/usr/include/boost/asio/datagram_socket_service.hpp	/^  std::size_t receive(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::datagram_socket_service::receive_from	/usr/include/boost/asio/datagram_socket_service.hpp	/^  std::size_t receive_from(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::datagram_socket_service::remote_endpoint	/usr/include/boost/asio/datagram_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::datagram_socket_service::send	/usr/include/boost/asio/datagram_socket_service.hpp	/^  std::size_t send(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::datagram_socket_service::send_to	/usr/include/boost/asio/datagram_socket_service.hpp	/^  std::size_t send_to(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::datagram_socket_service::service_impl_	/usr/include/boost/asio/datagram_socket_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::datagram_socket_service	access:private
boost::asio::datagram_socket_service::service_impl_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^      Protocol, detail::dev_poll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::datagram_socket_service	access:private
boost::asio::datagram_socket_service::service_impl_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^      Protocol, detail::epoll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::datagram_socket_service	access:private
boost::asio::datagram_socket_service::service_impl_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^      Protocol, detail::kqueue_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::datagram_socket_service	access:private
boost::asio::datagram_socket_service::service_impl_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^      Protocol, detail::select_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::datagram_socket_service	access:private
boost::asio::datagram_socket_service::service_impl_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::datagram_socket_service	access:private
boost::asio::datagram_socket_service::set_option	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const SettableSocketOption& option, boost::system::error_code& ec)
boost::asio::datagram_socket_service::shutdown	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code shutdown(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, socket_base::shutdown_type what, boost::system::error_code& ec)
boost::asio::datagram_socket_service::shutdown_service	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:()
boost::asio::deadline_timer	/usr/include/boost/asio/deadline_timer.hpp	/^typedef basic_deadline_timer<boost::posix_time::ptime> deadline_timer;$/;"	t	namespace:boost::asio
boost::asio::deadline_timer_service	/usr/include/boost/asio/deadline_timer_service.hpp	/^class deadline_timer_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
boost::asio::deadline_timer_service::async_wait	/usr/include/boost/asio/deadline_timer_service.hpp	/^  void async_wait(implementation_type& impl, WaitHandler handler)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, WaitHandler handler)
boost::asio::deadline_timer_service::cancel	/usr/include/boost/asio/deadline_timer_service.hpp	/^  std::size_t cancel(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::deadline_timer_service::construct	/usr/include/boost/asio/deadline_timer_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl)
boost::asio::deadline_timer_service::deadline_timer_service	/usr/include/boost/asio/deadline_timer_service.hpp	/^  explicit deadline_timer_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::deadline_timer_service::destroy	/usr/include/boost/asio/deadline_timer_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl)
boost::asio::deadline_timer_service::duration_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef typename traits_type::duration_type duration_type;$/;"	t	class:boost::asio::deadline_timer_service	access:public
boost::asio::deadline_timer_service::expires_at	/usr/include/boost/asio/deadline_timer_service.hpp	/^  std::size_t expires_at(implementation_type& impl,$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, const time_type& expiry_time, boost::system::error_code& ec)
boost::asio::deadline_timer_service::expires_at	/usr/include/boost/asio/deadline_timer_service.hpp	/^  time_type expires_at(const implementation_type& impl) const$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(const implementation_type& impl) const
boost::asio::deadline_timer_service::expires_from_now	/usr/include/boost/asio/deadline_timer_service.hpp	/^  duration_type expires_from_now(const implementation_type& impl) const$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(const implementation_type& impl) const
boost::asio::deadline_timer_service::expires_from_now	/usr/include/boost/asio/deadline_timer_service.hpp	/^  std::size_t expires_from_now(implementation_type& impl,$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, const duration_type& expiry_time, boost::system::error_code& ec)
boost::asio::deadline_timer_service::id	/usr/include/boost/asio/deadline_timer_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::deadline_timer_service	access:public
boost::asio::deadline_timer_service::implementation_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::deadline_timer_service	access:public
boost::asio::deadline_timer_service::implementation_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::deadline_timer_service	access:public
boost::asio::deadline_timer_service::service_impl_	/usr/include/boost/asio/deadline_timer_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::deadline_timer_service	access:private
boost::asio::deadline_timer_service::service_impl_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^    traits_type, detail::dev_poll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::deadline_timer_service	access:private
boost::asio::deadline_timer_service::service_impl_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^    traits_type, detail::epoll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::deadline_timer_service	access:private
boost::asio::deadline_timer_service::service_impl_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^    traits_type, detail::kqueue_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::deadline_timer_service	access:private
boost::asio::deadline_timer_service::service_impl_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^    traits_type, detail::select_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::deadline_timer_service	access:private
boost::asio::deadline_timer_service::service_impl_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^    traits_type, detail::win_iocp_io_service> service_impl_type;$/;"	t	class:boost::asio::deadline_timer_service	access:private
boost::asio::deadline_timer_service::shutdown_service	/usr/include/boost/asio/deadline_timer_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:()
boost::asio::deadline_timer_service::time_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef typename traits_type::time_type time_type;$/;"	t	class:boost::asio::deadline_timer_service	access:public
boost::asio::deadline_timer_service::traits_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef TimeTraits traits_type;$/;"	t	class:boost::asio::deadline_timer_service	access:public
boost::asio::deadline_timer_service::wait	/usr/include/boost/asio/deadline_timer_service.hpp	/^  void wait(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail	/usr/include/boost/asio/buffer.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/buffers_iterator.hpp	/^namespace detail$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/completion_condition.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/bind_handler.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/call_stack.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/dev_poll_reactor_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/epoll_reactor_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/event.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/fd_set_adapter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/handler_base_from_member.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/handler_queue.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/hash_map.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/io_control.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/kqueue_reactor_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/noncopyable.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/null_event.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/null_mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/null_thread.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/posix_event.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/posix_mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/posix_thread.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/resolver_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/scoped_lock.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/select_interrupter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/select_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/select_reactor_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/service_base.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/service_id.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/service_registry.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/service_registry_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/signal_blocker.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/signal_init.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/socket_holder.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/socket_ops.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/socket_option.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/socket_types.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/strand_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/task_io_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/task_io_service_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/thread.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/throw_error.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/timer_queue.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/wince_thread.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/winsock_init.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_event.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_io_service_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_signal_blocker.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_thread.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/is_read_buffered.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/is_write_buffered.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
boost::asio::detail	/usr/include/boost/asio/read_until.hpp	/^namespace detail$/;"	n	namespace:boost::asio
boost::asio::detail::accept	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  boost::system::error_code accept(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, Socket& peer, endpoint_type* peer_endpoint, boost::system::error_code& ec)
boost::asio::detail::adapt_completion_condition_result	/usr/include/boost/asio/completion_condition.hpp	/^inline std::size_t adapt_completion_condition_result(bool result)$/;"	f	namespace:boost::asio::detail	signature:(bool result)
boost::asio::detail::adapt_completion_condition_result	/usr/include/boost/asio/completion_condition.hpp	/^inline std::size_t adapt_completion_condition_result(std::size_t result)$/;"	f	namespace:boost::asio::detail	signature:(std::size_t result)
boost::asio::detail::addrinfo_emulation	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^struct addrinfo_emulation$/;"	s	namespace:boost::asio::detail
boost::asio::detail::addrinfo_emulation::ai_addr	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  sockaddr* ai_addr;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
boost::asio::detail::addrinfo_emulation::ai_addrlen	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  size_t ai_addrlen;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
boost::asio::detail::addrinfo_emulation::ai_canonname	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  char* ai_canonname;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
boost::asio::detail::addrinfo_emulation::ai_family	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  int ai_family;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
boost::asio::detail::addrinfo_emulation::ai_flags	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  int ai_flags;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
boost::asio::detail::addrinfo_emulation::ai_next	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  addrinfo_emulation* ai_next;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
boost::asio::detail::addrinfo_emulation::ai_protocol	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  int ai_protocol;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
boost::asio::detail::addrinfo_emulation::ai_socktype	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  int ai_socktype;$/;"	m	struct:boost::asio::detail::addrinfo_emulation	access:public
boost::asio::detail::addrinfo_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef addrinfo addrinfo_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::addrinfo_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef addrinfo_emulation addrinfo_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::always_fail_option	/usr/include/boost/asio/detail/socket_types.hpp	/^const int always_fail_option = 2;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::apc_function	/usr/include/boost/asio/detail/win_thread.hpp	/^inline void __stdcall apc_function(ULONG) {}$/;"	f	namespace:boost::asio::detail	signature:(ULONG)
boost::asio::detail::apc_function	/usr/include/boost/asio/detail/win_thread.hpp	/^inline void __stdcall apc_function(ULONG_PTR) {}$/;"	f	namespace:boost::asio::detail	signature:(ULONG_PTR)
boost::asio::detail::apc_function	/usr/include/boost/asio/detail/win_thread.hpp	/^void __stdcall apc_function(ULONG data);$/;"	p	namespace:boost::asio::detail	signature:(ULONG data)
boost::asio::detail::apc_function	/usr/include/boost/asio/detail/win_thread.hpp	/^void __stdcall apc_function(ULONG_PTR data);$/;"	p	namespace:boost::asio::detail	signature:(ULONG_PTR data)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, binder1<Handler, Arg1>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, binder2<Handler, Arg1, Arg2>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, binder3<Handler, Arg1, Arg2, Arg3>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, binder4<Handler, Arg1, Arg2, Arg3, Arg4>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/detail/handler_base_from_member.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, handler_base_from_member<Handler>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, rewrapped_handler<Handler, Context>* this_handler)
boost::asio::detail::asio_handler_allocate	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void* asio_handler_allocate(std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(std::size_t size, wrapped_handler<Dispatcher, Handler>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, binder1<Handler, Arg1>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, binder2<Handler, Arg1, Arg2>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, binder3<Handler, Arg1, Arg2, Arg3>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, binder4<Handler, Arg1, Arg2, Arg3, Arg4>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/detail/handler_base_from_member.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, handler_base_from_member<Handler>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, rewrapped_handler<Handler, Context>* this_handler)
boost::asio::detail::asio_handler_deallocate	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void asio_handler_deallocate(void* pointer, std::size_t size,$/;"	f	namespace:boost::asio::detail	signature:(void* pointer, std::size_t size, wrapped_handler<Dispatcher, Handler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, binder1<Handler, Arg1>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, binder2<Handler, Arg1, Arg2>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, binder3<Handler, Arg1, Arg2, Arg3>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, binder4<Handler, Arg1, Arg2, Arg3, Arg4>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/handler_base_from_member.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, handler_base_from_member<Handler>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, rewrapped_handler<Handler, Context>* this_handler)
boost::asio::detail::asio_handler_invoke	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^inline void asio_handler_invoke(const Function& function,$/;"	f	namespace:boost::asio::detail	signature:(const Function& function, wrapped_handler<Dispatcher, Handler>* this_handler)
boost::asio::detail::assign	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const protocol_type& protocol, const native_type& native_socket, boost::system::error_code& ec)
boost::asio::detail::async_read_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const MutableBufferSequence& buffers, Handler handler)
boost::asio::detail::async_read_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const null_buffers&, Handler handler)
boost::asio::detail::async_receive	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_receive(implementation_type& impl, const null_buffers&,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const null_buffers&, socket_base::message_flags flags, Handler handler)
boost::asio::detail::async_receive	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_receive(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, Handler handler)
boost::asio::detail::async_receive_from	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, Handler handler)
boost::asio::detail::async_receive_from	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const null_buffers&, endpoint_type& sender_endpoint, socket_base::message_flags flags, Handler handler)
boost::asio::detail::async_send	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_send(implementation_type& impl, const null_buffers&,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const null_buffers&, socket_base::message_flags, Handler handler)
boost::asio::detail::async_send_to	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_send_to(implementation_type& impl, const null_buffers&,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const null_buffers&, socket_base::message_flags, const endpoint_type&, Handler handler)
boost::asio::detail::async_send_to	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  void async_send_to(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, Handler handler)
boost::asio::detail::async_write_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const null_buffers&, Handler handler)
boost::asio::detail::binder1	/usr/include/boost/asio/detail/bind_handler.hpp	/^class binder1$/;"	c	namespace:boost::asio::detail
boost::asio::detail::binder1::arg1_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:boost::asio::detail::binder1	access:public
boost::asio::detail::binder1::binder1	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder1(const Handler& handler, const Arg1& arg1)$/;"	f	class:boost::asio::detail::binder1	access:public	signature:(const Handler& handler, const Arg1& arg1)
boost::asio::detail::binder1::handler_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::binder1	access:public
boost::asio::detail::binder1::operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::binder1	access:public	signature:() const
boost::asio::detail::binder1::operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::binder1	access:public	signature:()
boost::asio::detail::binder2	/usr/include/boost/asio/detail/bind_handler.hpp	/^class binder2$/;"	c	namespace:boost::asio::detail
boost::asio::detail::binder2::arg1_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:boost::asio::detail::binder2	access:public
boost::asio::detail::binder2::arg2_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg2 arg2_;$/;"	m	class:boost::asio::detail::binder2	access:public
boost::asio::detail::binder2::binder2	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder2(const Handler& handler, const Arg1& arg1, const Arg2& arg2)$/;"	f	class:boost::asio::detail::binder2	access:public	signature:(const Handler& handler, const Arg1& arg1, const Arg2& arg2)
boost::asio::detail::binder2::handler_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::binder2	access:public
boost::asio::detail::binder2::operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::binder2	access:public	signature:() const
boost::asio::detail::binder2::operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::binder2	access:public	signature:()
boost::asio::detail::binder3	/usr/include/boost/asio/detail/bind_handler.hpp	/^class binder3$/;"	c	namespace:boost::asio::detail
boost::asio::detail::binder3::arg1_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:boost::asio::detail::binder3	access:public
boost::asio::detail::binder3::arg2_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg2 arg2_;$/;"	m	class:boost::asio::detail::binder3	access:public
boost::asio::detail::binder3::arg3_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg3 arg3_;$/;"	m	class:boost::asio::detail::binder3	access:public
boost::asio::detail::binder3::binder3	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder3(const Handler& handler, const Arg1& arg1, const Arg2& arg2,$/;"	f	class:boost::asio::detail::binder3	access:public	signature:(const Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3)
boost::asio::detail::binder3::handler_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::binder3	access:public
boost::asio::detail::binder3::operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::binder3	access:public	signature:() const
boost::asio::detail::binder3::operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::binder3	access:public	signature:()
boost::asio::detail::binder4	/usr/include/boost/asio/detail/bind_handler.hpp	/^class binder4$/;"	c	namespace:boost::asio::detail
boost::asio::detail::binder4::arg1_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:boost::asio::detail::binder4	access:public
boost::asio::detail::binder4::arg2_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg2 arg2_;$/;"	m	class:boost::asio::detail::binder4	access:public
boost::asio::detail::binder4::arg3_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg3 arg3_;$/;"	m	class:boost::asio::detail::binder4	access:public
boost::asio::detail::binder4::arg4_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg4 arg4_;$/;"	m	class:boost::asio::detail::binder4	access:public
boost::asio::detail::binder4::binder4	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder4(const Handler& handler, const Arg1& arg1, const Arg2& arg2,$/;"	f	class:boost::asio::detail::binder4	access:public	signature:(const Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4)
boost::asio::detail::binder4::handler_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::binder4	access:public
boost::asio::detail::binder4::operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::binder4	access:public	signature:() const
boost::asio::detail::binder4::operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::binder4	access:public	signature:()
boost::asio::detail::binder5	/usr/include/boost/asio/detail/bind_handler.hpp	/^class binder5$/;"	c	namespace:boost::asio::detail
boost::asio::detail::binder5::arg1_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg1 arg1_;$/;"	m	class:boost::asio::detail::binder5	access:public
boost::asio::detail::binder5::arg2_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg2 arg2_;$/;"	m	class:boost::asio::detail::binder5	access:public
boost::asio::detail::binder5::arg3_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg3 arg3_;$/;"	m	class:boost::asio::detail::binder5	access:public
boost::asio::detail::binder5::arg4_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg4 arg4_;$/;"	m	class:boost::asio::detail::binder5	access:public
boost::asio::detail::binder5::arg5_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Arg5 arg5_;$/;"	m	class:boost::asio::detail::binder5	access:public
boost::asio::detail::binder5::binder5	/usr/include/boost/asio/detail/bind_handler.hpp	/^  binder5(const Handler& handler, const Arg1& arg1, const Arg2& arg2,$/;"	f	class:boost::asio::detail::binder5	access:public	signature:(const Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5)
boost::asio::detail::binder5::handler_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::binder5	access:public
boost::asio::detail::binder5::operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::binder5	access:public	signature:() const
boost::asio::detail::binder5::operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::binder5	access:public	signature:()
boost::asio::detail::bind_handler	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline binder1<Handler, Arg1> bind_handler(const Handler& handler,$/;"	f	namespace:boost::asio::detail	signature:(const Handler& handler, const Arg1& arg1)
boost::asio::detail::bind_handler	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline binder2<Handler, Arg1, Arg2> bind_handler(const Handler& handler,$/;"	f	namespace:boost::asio::detail	signature:(const Handler& handler, const Arg1& arg1, const Arg2& arg2)
boost::asio::detail::bind_handler	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline binder3<Handler, Arg1, Arg2, Arg3> bind_handler(const Handler& handler,$/;"	f	namespace:boost::asio::detail	signature:(const Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3)
boost::asio::detail::bind_handler	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline binder4<Handler, Arg1, Arg2, Arg3, Arg4> bind_handler($/;"	f	namespace:boost::asio::detail	signature:( const Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4)
boost::asio::detail::bind_handler	/usr/include/boost/asio/detail/bind_handler.hpp	/^inline binder5<Handler, Arg1, Arg2, Arg3, Arg4, Arg5> bind_handler($/;"	f	namespace:boost::asio::detail	signature:( const Handler& handler, const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5)
boost::asio::detail::boost_asio_detail_posix_thread_function	/usr/include/boost/asio/detail/posix_thread.hpp	/^extern "C" void* boost_asio_detail_posix_thread_function(void* arg);$/;"	p	namespace:boost::asio::detail	signature:(void* arg)
boost::asio::detail::boost_asio_detail_posix_thread_function	/usr/include/boost/asio/detail/posix_thread.hpp	/^inline void* boost_asio_detail_posix_thread_function(void* arg)$/;"	f	namespace:boost::asio::detail	signature:(void* arg)
boost::asio::detail::buffered_stream_storage	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^class buffered_stream_storage$/;"	c	namespace:boost::asio::detail
boost::asio::detail::buffered_stream_storage::begin_offset_	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  size_type begin_offset_;$/;"	m	class:boost::asio::detail::buffered_stream_storage	access:private
boost::asio::detail::buffered_stream_storage::buffered_stream_storage	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  explicit buffered_stream_storage(std::size_t capacity)$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:(std::size_t capacity)
boost::asio::detail::buffered_stream_storage::buffer_	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  std::vector<byte_type> buffer_;$/;"	m	class:boost::asio::detail::buffered_stream_storage	access:private
boost::asio::detail::buffered_stream_storage::byte_type	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  typedef unsigned char byte_type;$/;"	t	class:boost::asio::detail::buffered_stream_storage	access:public
boost::asio::detail::buffered_stream_storage::capacity	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  size_type capacity() const$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:() const
boost::asio::detail::buffered_stream_storage::clear	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  void clear()$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:()
boost::asio::detail::buffered_stream_storage::consume	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  void consume(size_type count)$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:(size_type count)
boost::asio::detail::buffered_stream_storage::data	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  byte_type* data()$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:()
boost::asio::detail::buffered_stream_storage::data	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  const byte_type* data() const$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:() const
boost::asio::detail::buffered_stream_storage::empty	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  bool empty() const$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:() const
boost::asio::detail::buffered_stream_storage::end_offset_	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  size_type end_offset_;$/;"	m	class:boost::asio::detail::buffered_stream_storage	access:private
boost::asio::detail::buffered_stream_storage::resize	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  void resize(size_type length)$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:(size_type length)
boost::asio::detail::buffered_stream_storage::size	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  size_type size() const$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:() const
boost::asio::detail::buffered_stream_storage::size_type	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  typedef std::size_t size_type;$/;"	t	class:boost::asio::detail::buffered_stream_storage	access:public
boost::asio::detail::buffers_iterator_types	/usr/include/boost/asio/buffers_iterator.hpp	/^  struct buffers_iterator_types$/;"	s	namespace:boost::asio::detail
boost::asio::detail::buffers_iterator_types::buffer_type	/usr/include/boost/asio/buffers_iterator.hpp	/^    typedef typename helper::buffer_type buffer_type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types	access:public
boost::asio::detail::buffers_iterator_types::byte_type	/usr/include/boost/asio/buffers_iterator.hpp	/^    typedef typename helper::template byte_type<ByteType>::type byte_type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types	access:public
boost::asio::detail::buffers_iterator_types::helper	/usr/include/boost/asio/buffers_iterator.hpp	/^    typedef buffers_iterator_types_helper<is_mutable> helper;$/;"	t	struct:boost::asio::detail::buffers_iterator_types	access:public
boost::asio::detail::buffers_iterator_types::is_mutable	/usr/include/boost/asio/buffers_iterator.hpp	/^      is_mutable = boost::is_convertible<$/;"	e	enum:boost::asio::detail::buffers_iterator_types::__anon4
boost::asio::detail::buffers_iterator_types_helper	/usr/include/boost/asio/buffers_iterator.hpp	/^  struct buffers_iterator_types_helper<false>$/;"	s	namespace:boost::asio::detail
boost::asio::detail::buffers_iterator_types_helper	/usr/include/boost/asio/buffers_iterator.hpp	/^  struct buffers_iterator_types_helper<true>$/;"	s	namespace:boost::asio::detail
boost::asio::detail::buffers_iterator_types_helper::buffer_type	/usr/include/boost/asio/buffers_iterator.hpp	/^    typedef const_buffer buffer_type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types_helper	access:public
boost::asio::detail::buffers_iterator_types_helper::buffer_type	/usr/include/boost/asio/buffers_iterator.hpp	/^    typedef mutable_buffer buffer_type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types_helper	access:public
boost::asio::detail::buffers_iterator_types_helper::byte_type	/usr/include/boost/asio/buffers_iterator.hpp	/^    struct byte_type$/;"	s	struct:boost::asio::detail::buffers_iterator_types_helper	access:public
boost::asio::detail::buffers_iterator_types_helper::byte_type::type	/usr/include/boost/asio/buffers_iterator.hpp	/^      typedef ByteType type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types_helper::byte_type	access:public
boost::asio::detail::buffers_iterator_types_helper::byte_type::type	/usr/include/boost/asio/buffers_iterator.hpp	/^      typedef typename boost::add_const<ByteType>::type type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types_helper::byte_type	access:public
boost::asio::detail::buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^const void* buffer_cast_helper(const const_buffer&);$/;"	p	namespace:boost::asio::detail	signature:(const const_buffer&)
boost::asio::detail::buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^inline const void* buffer_cast_helper(const const_buffer& b)$/;"	f	namespace:boost::asio::detail	signature:(const const_buffer& b)
boost::asio::detail::buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^inline void* buffer_cast_helper(const mutable_buffer& b)$/;"	f	namespace:boost::asio::detail	signature:(const mutable_buffer& b)
boost::asio::detail::buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^void* buffer_cast_helper(const mutable_buffer&);$/;"	p	namespace:boost::asio::detail	signature:(const mutable_buffer&)
boost::asio::detail::buffer_debug_check	/usr/include/boost/asio/buffer.hpp	/^class buffer_debug_check$/;"	c	namespace:boost::asio::detail
boost::asio::detail::buffer_debug_check::buffer_debug_check	/usr/include/boost/asio/buffer.hpp	/^  buffer_debug_check(Iterator iter)$/;"	f	class:boost::asio::detail::buffer_debug_check	access:public	signature:(Iterator iter)
boost::asio::detail::buffer_debug_check::iter_	/usr/include/boost/asio/buffer.hpp	/^  Iterator iter_;$/;"	m	class:boost::asio::detail::buffer_debug_check	access:private
boost::asio::detail::buffer_debug_check::operator ()	/usr/include/boost/asio/buffer.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::buffer_debug_check	access:public	signature:()
boost::asio::detail::buffer_debug_check::~buffer_debug_check	/usr/include/boost/asio/buffer.hpp	/^  ~buffer_debug_check()$/;"	f	class:boost::asio::detail::buffer_debug_check	access:public	signature:()
boost::asio::detail::buffer_resize_guard	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^class buffer_resize_guard$/;"	c	namespace:boost::asio::detail
boost::asio::detail::buffer_resize_guard::buffer_	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^  Buffer& buffer_;$/;"	m	class:boost::asio::detail::buffer_resize_guard	access:private
boost::asio::detail::buffer_resize_guard::buffer_resize_guard	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^  buffer_resize_guard(Buffer& buffer)$/;"	f	class:boost::asio::detail::buffer_resize_guard	access:public	signature:(Buffer& buffer)
boost::asio::detail::buffer_resize_guard::commit	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^  void commit()$/;"	f	class:boost::asio::detail::buffer_resize_guard	access:public	signature:()
boost::asio::detail::buffer_resize_guard::old_size_	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^  size_t old_size_;$/;"	m	class:boost::asio::detail::buffer_resize_guard	access:private
boost::asio::detail::buffer_resize_guard::~buffer_resize_guard	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^  ~buffer_resize_guard()$/;"	f	class:boost::asio::detail::buffer_resize_guard	access:public	signature:()
boost::asio::detail::buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size_helper(const const_buffer& b)$/;"	f	namespace:boost::asio::detail	signature:(const const_buffer& b)
boost::asio::detail::buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size_helper(const mutable_buffer& b)$/;"	f	namespace:boost::asio::detail	signature:(const mutable_buffer& b)
boost::asio::detail::buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^std::size_t buffer_size_helper(const const_buffer&);$/;"	p	namespace:boost::asio::detail	signature:(const const_buffer&)
boost::asio::detail::buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^std::size_t buffer_size_helper(const mutable_buffer&);$/;"	p	namespace:boost::asio::detail	signature:(const mutable_buffer&)
boost::asio::detail::buffer_types	/usr/include/boost/asio/buffer.hpp	/^struct buffer_types$/;"	s	namespace:boost::asio::detail	inherits:buffer_types_base
boost::asio::detail::buffer_types_base	/usr/include/boost/asio/buffer.hpp	/^struct buffer_types_base<false>$/;"	s	namespace:boost::asio::detail
boost::asio::detail::buffer_types_base	/usr/include/boost/asio/buffer.hpp	/^struct buffer_types_base<true>$/;"	s	namespace:boost::asio::detail
boost::asio::detail::buffer_types_base::buffer_type	/usr/include/boost/asio/buffer.hpp	/^  typedef const_buffer buffer_type;$/;"	t	struct:boost::asio::detail::buffer_types_base	access:public
boost::asio::detail::buffer_types_base::buffer_type	/usr/include/boost/asio/buffer.hpp	/^  typedef mutable_buffer buffer_type;$/;"	t	struct:boost::asio::detail::buffer_types_base	access:public
boost::asio::detail::buffer_types_base::container_type	/usr/include/boost/asio/buffer.hpp	/^  typedef const_buffers_1 container_type;$/;"	t	struct:boost::asio::detail::buffer_types_base	access:public
boost::asio::detail::buffer_types_base::container_type	/usr/include/boost/asio/buffer.hpp	/^  typedef mutable_buffers_1 container_type;$/;"	t	struct:boost::asio::detail::buffer_types_base	access:public
boost::asio::detail::calculate_hash_value	/usr/include/boost/asio/detail/hash_map.hpp	/^inline std::size_t calculate_hash_value(const T& t)$/;"	f	namespace:boost::asio::detail	signature:(const T& t)
boost::asio::detail::calculate_hash_value	/usr/include/boost/asio/detail/hash_map.hpp	/^inline std::size_t calculate_hash_value(SOCKET s)$/;"	f	namespace:boost::asio::detail	signature:(SOCKET s)
boost::asio::detail::call_stack	/usr/include/boost/asio/detail/call_stack.hpp	/^class call_stack$/;"	c	namespace:boost::asio::detail
boost::asio::detail::call_stack::contains	/usr/include/boost/asio/detail/call_stack.hpp	/^  static bool contains(Owner* d)$/;"	f	class:boost::asio::detail::call_stack	access:public	signature:(Owner* d)
boost::asio::detail::call_stack::context	/usr/include/boost/asio/detail/call_stack.hpp	/^  class context$/;"	c	class:boost::asio::detail::call_stack	inherits:noncopyable	access:public
boost::asio::detail::call_stack::context::context	/usr/include/boost/asio/detail/call_stack.hpp	/^    explicit context(Owner* d)$/;"	f	class:boost::asio::detail::call_stack::context	access:public	signature:(Owner* d)
boost::asio::detail::call_stack::context::next_	/usr/include/boost/asio/detail/call_stack.hpp	/^    context* next_;$/;"	m	class:boost::asio::detail::call_stack::context	access:private
boost::asio::detail::call_stack::context::owner_	/usr/include/boost/asio/detail/call_stack.hpp	/^    Owner* owner_;$/;"	m	class:boost::asio::detail::call_stack::context	access:private
boost::asio::detail::call_stack::context::~context	/usr/include/boost/asio/detail/call_stack.hpp	/^    ~context()$/;"	f	class:boost::asio::detail::call_stack::context	access:public	signature:()
boost::asio::detail::call_stack::top_	/usr/include/boost/asio/detail/call_stack.hpp	/^  static tss_ptr<context> top_;$/;"	m	class:boost::asio::detail::call_stack	access:private
boost::asio::detail::call_stack::top_	/usr/include/boost/asio/detail/call_stack.hpp	/^call_stack<Owner>::top_;$/;"	m	class:boost::asio::detail::call_stack
boost::asio::detail::cancel	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::close	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::construct	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl)
boost::asio::detail::const_buffers_iterator	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^class const_buffers_iterator$/;"	c	namespace:boost::asio::detail	inherits:boost::iterator_facade
boost::asio::detail::const_buffers_iterator::begin_	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  typename ConstBufferSequence::const_iterator begin_;$/;"	m	class:boost::asio::detail::const_buffers_iterator	access:private
boost::asio::detail::const_buffers_iterator::const_buffers_iterator	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  const_buffers_iterator()$/;"	f	class:boost::asio::detail::const_buffers_iterator	access:public	signature:()
boost::asio::detail::const_buffers_iterator::const_buffers_iterator	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  const_buffers_iterator(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::detail::const_buffers_iterator	access:public	signature:(const ConstBufferSequence& buffers, std::size_t position)
boost::asio::detail::const_buffers_iterator::current_	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  typename ConstBufferSequence::const_iterator current_;$/;"	m	class:boost::asio::detail::const_buffers_iterator	access:private
boost::asio::detail::const_buffers_iterator::current_buffer_	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  boost::asio::const_buffer current_buffer_;$/;"	m	class:boost::asio::detail::const_buffers_iterator	access:private
boost::asio::detail::const_buffers_iterator::current_buffer_position_	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  std::size_t current_buffer_position_;$/;"	m	class:boost::asio::detail::const_buffers_iterator	access:private
boost::asio::detail::const_buffers_iterator::decrement	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  void decrement()$/;"	f	class:boost::asio::detail::const_buffers_iterator	access:private	signature:()
boost::asio::detail::const_buffers_iterator::dereference	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  const char& dereference() const$/;"	f	class:boost::asio::detail::const_buffers_iterator	access:private	signature:() const
boost::asio::detail::const_buffers_iterator::end_	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  typename ConstBufferSequence::const_iterator end_;$/;"	m	class:boost::asio::detail::const_buffers_iterator	access:private
boost::asio::detail::const_buffers_iterator::equal	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  bool equal(const const_buffers_iterator& other) const$/;"	f	class:boost::asio::detail::const_buffers_iterator	access:private	signature:(const const_buffers_iterator& other) const
boost::asio::detail::const_buffers_iterator::increment	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  void increment()$/;"	f	class:boost::asio::detail::const_buffers_iterator	access:private	signature:()
boost::asio::detail::const_buffers_iterator::position	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  std::size_t position() const$/;"	f	class:boost::asio::detail::const_buffers_iterator	access:public	signature:() const
boost::asio::detail::const_buffers_iterator::position_	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  std::size_t position_;$/;"	m	class:boost::asio::detail::const_buffers_iterator	access:private
boost::asio::detail::consuming_buffers	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^class consuming_buffers$/;"	c	namespace:boost::asio::detail
boost::asio::detail::consuming_buffers	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^class consuming_buffers<Buffer, boost::asio::null_buffers>$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::null_buffers
boost::asio::detail::consuming_buffers::at_end_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  bool at_end_;$/;"	m	class:boost::asio::detail::consuming_buffers	access:private
boost::asio::detail::consuming_buffers::begin	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  const_iterator begin() const$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:() const
boost::asio::detail::consuming_buffers::begin_remainder_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  typename Buffers::const_iterator begin_remainder_;$/;"	m	class:boost::asio::detail::consuming_buffers	access:private
boost::asio::detail::consuming_buffers::buffers_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  Buffers buffers_;$/;"	m	class:boost::asio::detail::consuming_buffers	access:private
boost::asio::detail::consuming_buffers::const_iterator	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^    const_iterator;$/;"	t	class:boost::asio::detail::consuming_buffers	access:public
boost::asio::detail::consuming_buffers::consume	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  void consume(std::size_t size)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(std::size_t size)
boost::asio::detail::consuming_buffers::consume	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  void consume(std::size_t)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(std::size_t)
boost::asio::detail::consuming_buffers::consuming_buffers	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers(const boost::asio::null_buffers&)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(const boost::asio::null_buffers&)
boost::asio::detail::consuming_buffers::consuming_buffers	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers(const Buffers& buffers)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(const Buffers& buffers)
boost::asio::detail::consuming_buffers::consuming_buffers	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers(const consuming_buffers& other)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(const consuming_buffers& other)
boost::asio::detail::consuming_buffers::end	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  const_iterator end() const$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:() const
boost::asio::detail::consuming_buffers::first_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  Buffer first_;$/;"	m	class:boost::asio::detail::consuming_buffers	access:private
boost::asio::detail::consuming_buffers::max_size_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  std::size_t max_size_;$/;"	m	class:boost::asio::detail::consuming_buffers	access:private
boost::asio::detail::consuming_buffers::operator =	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers& operator=(const consuming_buffers& other)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(const consuming_buffers& other)
boost::asio::detail::consuming_buffers::set_max_size	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  void set_max_size(std::size_t max_size)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(std::size_t max_size)
boost::asio::detail::consuming_buffers::set_max_size	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  void set_max_size(std::size_t)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(std::size_t)
boost::asio::detail::consuming_buffers::value_type	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  typedef Buffer value_type;$/;"	t	class:boost::asio::detail::consuming_buffers	access:public
boost::asio::detail::consuming_buffers_iterator	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^class consuming_buffers_iterator$/;"	c	namespace:boost::asio::detail	inherits:boost::iterator_facade
boost::asio::detail::consuming_buffers_iterator::at_end_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  bool at_end_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
boost::asio::detail::consuming_buffers_iterator::begin_remainder_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  Buffer_Iterator begin_remainder_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
boost::asio::detail::consuming_buffers_iterator::consuming_buffers_iterator	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers_iterator()$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:public	signature:()
boost::asio::detail::consuming_buffers_iterator::consuming_buffers_iterator	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers_iterator(bool at_end, const Buffer& first,$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:public	signature:(bool at_end, const Buffer& first, Buffer_Iterator begin_remainder, Buffer_Iterator end_remainder, std::size_t max_size)
boost::asio::detail::consuming_buffers_iterator::dereference	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  const Buffer& dereference() const$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:private	signature:() const
boost::asio::detail::consuming_buffers_iterator::end_remainder_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  Buffer_Iterator end_remainder_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
boost::asio::detail::consuming_buffers_iterator::equal	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  bool equal(const consuming_buffers_iterator& other) const$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:private	signature:(const consuming_buffers_iterator& other) const
boost::asio::detail::consuming_buffers_iterator::first_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  Buffer first_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
boost::asio::detail::consuming_buffers_iterator::increment	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  void increment()$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:private	signature:()
boost::asio::detail::consuming_buffers_iterator::max_size_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  std::size_t max_size_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
boost::asio::detail::consuming_buffers_iterator::offset_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  std::size_t offset_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
boost::asio::detail::custom_socket_option_level	/usr/include/boost/asio/detail/socket_types.hpp	/^const int custom_socket_option_level = 0xA5100000;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::deadline_timer_service	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^class deadline_timer_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::deadline_timer_service::async_wait	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void async_wait(implementation_type& impl, Handler handler)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, Handler handler)
boost::asio::detail::deadline_timer_service::cancel	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  std::size_t cancel(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::deadline_timer_service::construct	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::deadline_timer_service::deadline_timer_service	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  deadline_timer_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::deadline_timer_service::destroy	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::deadline_timer_service::duration_type	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  typedef typename Time_Traits::duration_type duration_type;$/;"	t	class:boost::asio::detail::deadline_timer_service	access:public
boost::asio::detail::deadline_timer_service::expires_at	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  std::size_t expires_at(implementation_type& impl,$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, const time_type& expiry_time, boost::system::error_code& ec)
boost::asio::detail::deadline_timer_service::expires_at	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  time_type expires_at(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(const implementation_type& impl) const
boost::asio::detail::deadline_timer_service::expires_from_now	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  duration_type expires_from_now(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(const implementation_type& impl) const
boost::asio::detail::deadline_timer_service::expires_from_now	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  std::size_t expires_from_now(implementation_type& impl,$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, const duration_type& expiry_time, boost::system::error_code& ec)
boost::asio::detail::deadline_timer_service::implementation_type	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  struct implementation_type$/;"	s	class:boost::asio::detail::deadline_timer_service	inherits:boost::asio::detail::noncopyable	access:public
boost::asio::detail::deadline_timer_service::implementation_type::expiry	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^    time_type expiry;$/;"	m	struct:boost::asio::detail::deadline_timer_service::implementation_type	access:public
boost::asio::detail::deadline_timer_service::implementation_type::might_have_pending_waits	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^    bool might_have_pending_waits;$/;"	m	struct:boost::asio::detail::deadline_timer_service::implementation_type	access:public
boost::asio::detail::deadline_timer_service::scheduler_	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  Timer_Scheduler& scheduler_;$/;"	m	class:boost::asio::detail::deadline_timer_service	access:private
boost::asio::detail::deadline_timer_service::shutdown_service	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:()
boost::asio::detail::deadline_timer_service::timer_queue_	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  timer_queue<Time_Traits> timer_queue_;$/;"	m	class:boost::asio::detail::deadline_timer_service	access:private
boost::asio::detail::deadline_timer_service::time_type	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  typedef typename Time_Traits::time_type time_type;$/;"	t	class:boost::asio::detail::deadline_timer_service	access:public
boost::asio::detail::deadline_timer_service::wait	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void wait(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::deadline_timer_service::wait_handler	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  class wait_handler : $/;"	c	class:boost::asio::detail::deadline_timer_service	inherits:handler_base_from_member	access:public
boost::asio::detail::deadline_timer_service::wait_handler::io_service_	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::detail::deadline_timer_service::wait_handler	access:private
boost::asio::detail::deadline_timer_service::wait_handler::operator ()	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^    void operator()(const boost::system::error_code& result)$/;"	f	class:boost::asio::detail::deadline_timer_service::wait_handler	access:public	signature:(const boost::system::error_code& result)
boost::asio::detail::deadline_timer_service::wait_handler::wait_handler	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^    wait_handler(boost::asio::io_service& io_service, Handler handler)$/;"	f	class:boost::asio::detail::deadline_timer_service::wait_handler	access:public	signature:(boost::asio::io_service& io_service, Handler handler)
boost::asio::detail::deadline_timer_service::wait_handler::work_	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::deadline_timer_service::wait_handler	access:private
boost::asio::detail::deadline_timer_service::~deadline_timer_service	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  ~deadline_timer_service()$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:()
boost::asio::detail::default_max_transfer_size	/usr/include/boost/asio/completion_condition.hpp	/^enum { default_max_transfer_size = 65536 };$/;"	e	enum:boost::asio::detail::__anon5
boost::asio::detail::descriptor_ops	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^namespace descriptor_ops {$/;"	n	namespace:boost::asio::detail
boost::asio::detail::descriptor_ops::buf	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^typedef iovec buf;$/;"	t	namespace:boost::asio::detail::descriptor_ops
boost::asio::detail::descriptor_ops::clear_error	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline void clear_error(boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::close	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline int close(int d, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::error_wrapper	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline ReturnType error_wrapper(ReturnType return_value,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(ReturnType return_value, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::fcntl	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline int fcntl(int d, long cmd, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, long cmd, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::fcntl	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline int fcntl(int d, long cmd, long arg, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, long cmd, long arg, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::gather_write	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline int gather_write(int d, const buf* bufs, size_t count,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, const buf* bufs, size_t count, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::init_buf	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline void init_buf(buf& b, const void* data, size_t size)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(buf& b, const void* data, size_t size)
boost::asio::detail::descriptor_ops::init_buf	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline void init_buf(buf& b, void* data, size_t size)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(buf& b, void* data, size_t size)
boost::asio::detail::descriptor_ops::init_buf_iov_base	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline void init_buf_iov_base(T& base, void* addr)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(T& base, void* addr)
boost::asio::detail::descriptor_ops::init_buf_iov_base	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline void init_buf_iov_base(void*& base, void* addr)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(void*& base, void* addr)
boost::asio::detail::descriptor_ops::ioctl	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline int ioctl(int d, long cmd, ioctl_arg_type* arg,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, long cmd, ioctl_arg_type* arg, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::open	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline int open(const char* path, int flags, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(const char* path, int flags, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::poll_read	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline int poll_read(int d, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::poll_write	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline int poll_write(int d, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, boost::system::error_code& ec)
boost::asio::detail::descriptor_ops::scatter_read	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline int scatter_read(int d, buf* bufs, size_t count,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, buf* bufs, size_t count, boost::system::error_code& ec)
boost::asio::detail::destroy	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl)
boost::asio::detail::dev_poll_reactor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^class dev_poll_reactor$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::dev_poll_reactor::add_pending_event_change	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  ::pollfd& add_pending_event_change(int descriptor)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:private	signature:(int descriptor)
boost::asio::detail::dev_poll_reactor::add_timer_queue	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void add_timer_queue(timer_queue<Time_Traits>& timer_queue)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
boost::asio::detail::dev_poll_reactor::all_timer_queues_are_empty	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  bool all_timer_queues_are_empty() const$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:private	signature:() const
boost::asio::detail::dev_poll_reactor::call_run_thread	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  static void call_run_thread(dev_poll_reactor* reactor)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:private	signature:(dev_poll_reactor* reactor)
boost::asio::detail::dev_poll_reactor::cancel_ops	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void cancel_ops(socket_type descriptor, per_descriptor_data&)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&)
boost::asio::detail::dev_poll_reactor::cancel_ops_unlocked	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void cancel_ops_unlocked(socket_type descriptor)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:private	signature:(socket_type descriptor)
boost::asio::detail::dev_poll_reactor::cancel_timer	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  std::size_t cancel_timer(timer_queue<Time_Traits>& timer_queue, void* token)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue, void* token)
boost::asio::detail::dev_poll_reactor::close_descriptor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void close_descriptor(socket_type descriptor, per_descriptor_data&)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&)
boost::asio::detail::dev_poll_reactor::complete_operations_and_timers	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void complete_operations_and_timers($/;"	f	class:boost::asio::detail::dev_poll_reactor	access:private	signature:( boost::asio::detail::mutex::scoped_lock& lock)
boost::asio::detail::dev_poll_reactor::dev_poll_fd_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  int dev_poll_fd_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::dev_poll_reactor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  dev_poll_reactor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::dev_poll_reactor::do_dev_poll_create	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  static int do_dev_poll_create()$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:private	signature:()
boost::asio::detail::dev_poll_reactor::except_op_queue_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  reactor_op_queue<socket_type> except_op_queue_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::get_timeout	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  int get_timeout()$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:private	signature:()
boost::asio::detail::dev_poll_reactor::init_task	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void init_task()$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:()
boost::asio::detail::dev_poll_reactor::interrupt	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void interrupt()$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:private	signature:()
boost::asio::detail::dev_poll_reactor::interrupter_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  select_interrupter interrupter_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::mutex_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::pending_cancellations_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  std::vector<socket_type> pending_cancellations_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::pending_event_changes_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  std::vector< ::pollfd> pending_event_changes_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::pending_event_change_index_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  hash_map<int, std::size_t> pending_event_change_index_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::per_descriptor_data	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  struct per_descriptor_data$/;"	s	class:boost::asio::detail::dev_poll_reactor	access:public
boost::asio::detail::dev_poll_reactor::read_op_queue_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  reactor_op_queue<socket_type> read_op_queue_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::register_descriptor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  int register_descriptor(socket_type, per_descriptor_data&)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type, per_descriptor_data&)
boost::asio::detail::dev_poll_reactor::remove_timer_queue	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void remove_timer_queue(timer_queue<Time_Traits>& timer_queue)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
boost::asio::detail::dev_poll_reactor::run	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void run(bool block)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:private	signature:(bool block)
boost::asio::detail::dev_poll_reactor::run_thread	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void run_thread()$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:private	signature:()
boost::asio::detail::dev_poll_reactor::schedule_timer	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void schedule_timer(timer_queue<Time_Traits>& timer_queue,$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue, const typename Time_Traits::time_type& time, Handler handler, void* token)
boost::asio::detail::dev_poll_reactor::shutdown_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::shutdown_service	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:()
boost::asio::detail::dev_poll_reactor::start_connect_op	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void start_connect_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, Handler handler)
boost::asio::detail::dev_poll_reactor::start_except_op	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void start_except_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, Handler handler)
boost::asio::detail::dev_poll_reactor::start_read_op	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void start_read_op(socket_type descriptor, per_descriptor_data&,$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, Handler handler, bool allow_speculative_read = true)
boost::asio::detail::dev_poll_reactor::start_write_op	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void start_write_op(socket_type descriptor, per_descriptor_data&,$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, Handler handler, bool allow_speculative_write = true)
boost::asio::detail::dev_poll_reactor::stop_thread_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  bool stop_thread_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::thread_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  boost::asio::detail::thread* thread_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::timer_queues_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  std::vector<timer_queue_base*> timer_queues_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::timer_queues_for_cleanup_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  std::vector<timer_queue_base*> timer_queues_for_cleanup_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::wait_in_progress_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  bool wait_in_progress_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::write_op_queue_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  reactor_op_queue<socket_type> write_op_queue_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
boost::asio::detail::dev_poll_reactor::~dev_poll_reactor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  ~dev_poll_reactor()$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:()
boost::asio::detail::enable_connection_aborted_option	/usr/include/boost/asio/detail/socket_types.hpp	/^const int enable_connection_aborted_option = 1;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::epoll_reactor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^class epoll_reactor$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::epoll_reactor::add_timer_queue	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void add_timer_queue(timer_queue<Time_Traits>& timer_queue)$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
boost::asio::detail::epoll_reactor::all_timer_queues_are_empty	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  bool all_timer_queues_are_empty() const$/;"	f	class:boost::asio::detail::epoll_reactor	access:private	signature:() const
boost::asio::detail::epoll_reactor::call_run_thread	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  static void call_run_thread(epoll_reactor* reactor)$/;"	f	class:boost::asio::detail::epoll_reactor	access:private	signature:(epoll_reactor* reactor)
boost::asio::detail::epoll_reactor::cancel_ops	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void cancel_ops(socket_type descriptor, per_descriptor_data&)$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&)
boost::asio::detail::epoll_reactor::cancel_ops_unlocked	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void cancel_ops_unlocked(socket_type descriptor)$/;"	f	class:boost::asio::detail::epoll_reactor	access:private	signature:(socket_type descriptor)
boost::asio::detail::epoll_reactor::cancel_timer	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  std::size_t cancel_timer(timer_queue<Time_Traits>& timer_queue, void* token)$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue, void* token)
boost::asio::detail::epoll_reactor::close_descriptor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void close_descriptor(socket_type descriptor, per_descriptor_data&)$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&)
boost::asio::detail::epoll_reactor::complete_operations_and_timers	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void complete_operations_and_timers($/;"	f	class:boost::asio::detail::epoll_reactor	access:private	signature:( boost::asio::detail::mutex::scoped_lock& lock)
boost::asio::detail::epoll_reactor::do_epoll_create	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  static int do_epoll_create()$/;"	f	class:boost::asio::detail::epoll_reactor	access:private	signature:()
boost::asio::detail::epoll_reactor::epoll_fd_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  int epoll_fd_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::epoll_reactor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  epoll_reactor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::epoll_reactor::epoll_size	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  enum { epoll_size = 20000 };$/;"	e	enum:boost::asio::detail::epoll_reactor::__anon6
boost::asio::detail::epoll_reactor::except_op_queue_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  reactor_op_queue<socket_type> except_op_queue_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::get_timeout	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  int get_timeout()$/;"	f	class:boost::asio::detail::epoll_reactor	access:private	signature:()
boost::asio::detail::epoll_reactor::init_task	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void init_task()$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:()
boost::asio::detail::epoll_reactor::interrupt	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void interrupt()$/;"	f	class:boost::asio::detail::epoll_reactor	access:private	signature:()
boost::asio::detail::epoll_reactor::interrupter_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  select_interrupter interrupter_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::mutex_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::need_epoll_wait_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  bool need_epoll_wait_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::pending_cancellations_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  std::vector<socket_type> pending_cancellations_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::per_descriptor_data	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  struct per_descriptor_data$/;"	s	class:boost::asio::detail::epoll_reactor	access:public
boost::asio::detail::epoll_reactor::per_descriptor_data::allow_speculative_read	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    bool allow_speculative_read;$/;"	m	struct:boost::asio::detail::epoll_reactor::per_descriptor_data	access:public
boost::asio::detail::epoll_reactor::per_descriptor_data::allow_speculative_write	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^    bool allow_speculative_write;$/;"	m	struct:boost::asio::detail::epoll_reactor::per_descriptor_data	access:public
boost::asio::detail::epoll_reactor::read_op_queue_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  reactor_op_queue<socket_type> read_op_queue_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::register_descriptor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  int register_descriptor(socket_type descriptor,$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data)
boost::asio::detail::epoll_reactor::remove_timer_queue	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void remove_timer_queue(timer_queue<Time_Traits>& timer_queue)$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
boost::asio::detail::epoll_reactor::run	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void run(bool block)$/;"	f	class:boost::asio::detail::epoll_reactor	access:private	signature:(bool block)
boost::asio::detail::epoll_reactor::run_thread	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void run_thread()$/;"	f	class:boost::asio::detail::epoll_reactor	access:private	signature:()
boost::asio::detail::epoll_reactor::schedule_timer	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void schedule_timer(timer_queue<Time_Traits>& timer_queue,$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue, const typename Time_Traits::time_type& time, Handler handler, void* token)
boost::asio::detail::epoll_reactor::shutdown_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::shutdown_service	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:()
boost::asio::detail::epoll_reactor::start_connect_op	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void start_connect_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data, Handler handler)
boost::asio::detail::epoll_reactor::start_except_op	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void start_except_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, Handler handler)
boost::asio::detail::epoll_reactor::start_read_op	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void start_read_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data, Handler handler, bool allow_speculative_read = true)
boost::asio::detail::epoll_reactor::start_write_op	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void start_write_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data, Handler handler, bool allow_speculative_write = true)
boost::asio::detail::epoll_reactor::stop_thread_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  bool stop_thread_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::thread_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  boost::asio::detail::thread* thread_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::timer_queues_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  std::vector<timer_queue_base*> timer_queues_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::timer_queues_for_cleanup_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  std::vector<timer_queue_base*> timer_queues_for_cleanup_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::wait_in_progress_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  bool wait_in_progress_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::write_op_queue_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  reactor_op_queue<socket_type> write_op_queue_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
boost::asio::detail::epoll_reactor::~epoll_reactor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  ~epoll_reactor()$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:()
boost::asio::detail::event	/usr/include/boost/asio/detail/event.hpp	/^typedef null_event event;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::eventfd_select_interrupter	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^class eventfd_select_interrupter$/;"	c	namespace:boost::asio::detail
boost::asio::detail::eventfd_select_interrupter::eventfd_select_interrupter	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  eventfd_select_interrupter()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:()
boost::asio::detail::eventfd_select_interrupter::interrupt	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  void interrupt()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:()
boost::asio::detail::eventfd_select_interrupter::read_descriptor	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  int read_descriptor() const$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:() const
boost::asio::detail::eventfd_select_interrupter::read_descriptor_	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  int read_descriptor_;$/;"	m	class:boost::asio::detail::eventfd_select_interrupter	access:private
boost::asio::detail::eventfd_select_interrupter::reset	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  bool reset()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:()
boost::asio::detail::eventfd_select_interrupter::write_descriptor_	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  int write_descriptor_;$/;"	m	class:boost::asio::detail::eventfd_select_interrupter	access:private
boost::asio::detail::eventfd_select_interrupter::~eventfd_select_interrupter	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  ~eventfd_select_interrupter()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:()
boost::asio::detail::fd_set_adapter	/usr/include/boost/asio/detail/fd_set_adapter.hpp	/^typedef win_fd_set_adapter fd_set_adapter;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::handler_alloc_traits	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^struct handler_alloc_traits$/;"	s	namespace:boost::asio::detail
boost::asio::detail::handler_alloc_traits::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  BOOST_STATIC_CONSTANT(std::size_t, value_size = sizeof(Object));$/;"	p	struct:boost::asio::detail::handler_alloc_traits	access:public	signature:(std::size_t, value_size = sizeof(Object))
boost::asio::detail::handler_alloc_traits::handler_type	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  typedef Handler handler_type;$/;"	t	struct:boost::asio::detail::handler_alloc_traits	access:public
boost::asio::detail::handler_alloc_traits::pointer_type	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  typedef Object* pointer_type;$/;"	t	struct:boost::asio::detail::handler_alloc_traits	access:public
boost::asio::detail::handler_alloc_traits::value_type	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  typedef Object value_type;$/;"	t	struct:boost::asio::detail::handler_alloc_traits	access:public
boost::asio::detail::handler_base_from_member	/usr/include/boost/asio/detail/handler_base_from_member.hpp	/^class handler_base_from_member$/;"	c	namespace:boost::asio::detail
boost::asio::detail::handler_base_from_member::handler_	/usr/include/boost/asio/detail/handler_base_from_member.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::handler_base_from_member	access:public
boost::asio::detail::handler_base_from_member::handler_base_from_member	/usr/include/boost/asio/detail/handler_base_from_member.hpp	/^  handler_base_from_member(Handler handler)$/;"	f	class:boost::asio::detail::handler_base_from_member	access:public	signature:(Handler handler)
boost::asio::detail::handler_base_from_member::~handler_base_from_member	/usr/include/boost/asio/detail/handler_base_from_member.hpp	/^  ~handler_base_from_member()$/;"	f	class:boost::asio::detail::handler_base_from_member	access:protected	signature:()
boost::asio::detail::handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^class handler_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::handler_ptr::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  BOOST_STATIC_CONSTANT(std::size_t, value_size = Alloc_Traits::value_size);$/;"	p	class:boost::asio::detail::handler_ptr	access:public	signature:(std::size_t, value_size = Alloc_Traits::value_size)
boost::asio::detail::handler_ptr::get	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  pointer_type get() const$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:() const
boost::asio::detail::handler_ptr::handler_	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_type& handler_;$/;"	m	class:boost::asio::detail::handler_ptr	access:private
boost::asio::detail::handler_ptr::handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_ptr(handler_type& handler, pointer_type pointer)$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:(handler_type& handler, pointer_type pointer)
boost::asio::detail::handler_ptr::handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_ptr(raw_ptr_type& raw_ptr)$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:(raw_ptr_type& raw_ptr)
boost::asio::detail::handler_ptr::handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_ptr(raw_ptr_type& raw_ptr, Arg1& a1)$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:(raw_ptr_type& raw_ptr, Arg1& a1)
boost::asio::detail::handler_ptr::handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_ptr(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2)$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2)
boost::asio::detail::handler_ptr::handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_ptr(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3)$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3)
boost::asio::detail::handler_ptr::handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_ptr(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3, Arg4& a4)$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3, Arg4& a4)
boost::asio::detail::handler_ptr::handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_ptr(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3, Arg4& a4,$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3, Arg4& a4, Arg5& a5)
boost::asio::detail::handler_ptr::handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_ptr(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3, Arg4& a4,$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3, Arg4& a4, Arg5& a5, Arg6& a6)
boost::asio::detail::handler_ptr::handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_ptr(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3, Arg4& a4,$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3, Arg4& a4, Arg5& a5, Arg6& a6, Arg7& a7)
boost::asio::detail::handler_ptr::handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_ptr(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3, Arg4& a4,$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3, Arg4& a4, Arg5& a5, Arg6& a6, Arg7& a7, Arg8& a8)
boost::asio::detail::handler_ptr::handler_type	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  typedef typename Alloc_Traits::handler_type handler_type;$/;"	t	class:boost::asio::detail::handler_ptr	access:public
boost::asio::detail::handler_ptr::pointer_	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  pointer_type pointer_;$/;"	m	class:boost::asio::detail::handler_ptr	access:private
boost::asio::detail::handler_ptr::pointer_type	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  typedef typename Alloc_Traits::pointer_type pointer_type;$/;"	t	class:boost::asio::detail::handler_ptr	access:public
boost::asio::detail::handler_ptr::raw_ptr_type	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  typedef raw_handler_ptr<Alloc_Traits> raw_ptr_type;$/;"	t	class:boost::asio::detail::handler_ptr	access:public
boost::asio::detail::handler_ptr::release	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  pointer_type release()$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:()
boost::asio::detail::handler_ptr::reset	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:()
boost::asio::detail::handler_ptr::value_type	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  typedef typename Alloc_Traits::value_type value_type;$/;"	t	class:boost::asio::detail::handler_ptr	access:public
boost::asio::detail::handler_ptr::~handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  ~handler_ptr()$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:()
boost::asio::detail::handler_queue	/usr/include/boost/asio/detail/handler_queue.hpp	/^class handler_queue$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::handler_queue::back_	/usr/include/boost/asio/detail/handler_queue.hpp	/^  handler* back_;$/;"	m	class:boost::asio::detail::handler_queue	access:private
boost::asio::detail::handler_queue::empty	/usr/include/boost/asio/detail/handler_queue.hpp	/^  bool empty() const$/;"	f	class:boost::asio::detail::handler_queue	access:public	signature:() const
boost::asio::detail::handler_queue::front	/usr/include/boost/asio/detail/handler_queue.hpp	/^  handler* front()$/;"	f	class:boost::asio::detail::handler_queue	access:public	signature:()
boost::asio::detail::handler_queue::front_	/usr/include/boost/asio/detail/handler_queue.hpp	/^  handler* front_;$/;"	m	class:boost::asio::detail::handler_queue	access:private
boost::asio::detail::handler_queue::handler	/usr/include/boost/asio/detail/handler_queue.hpp	/^  class handler$/;"	c	class:boost::asio::detail::handler_queue	inherits:noncopyable	access:public
boost::asio::detail::handler_queue::handler::destroy	/usr/include/boost/asio/detail/handler_queue.hpp	/^    void destroy()$/;"	f	class:boost::asio::detail::handler_queue::handler	access:public	signature:()
boost::asio::detail::handler_queue::handler::destroy_func_	/usr/include/boost/asio/detail/handler_queue.hpp	/^    destroy_func_type destroy_func_;$/;"	m	class:boost::asio::detail::handler_queue::handler	access:private
boost::asio::detail::handler_queue::handler::destroy_func_type	/usr/include/boost/asio/detail/handler_queue.hpp	/^    typedef void (*destroy_func_type)(handler*);$/;"	t	class:boost::asio::detail::handler_queue::handler	access:protected
boost::asio::detail::handler_queue::handler::handler	/usr/include/boost/asio/detail/handler_queue.hpp	/^    handler(invoke_func_type invoke_func,$/;"	f	class:boost::asio::detail::handler_queue::handler	access:protected	signature:(invoke_func_type invoke_func, destroy_func_type destroy_func)
boost::asio::detail::handler_queue::handler::invoke	/usr/include/boost/asio/detail/handler_queue.hpp	/^    void invoke()$/;"	f	class:boost::asio::detail::handler_queue::handler	access:public	signature:()
boost::asio::detail::handler_queue::handler::invoke_func_	/usr/include/boost/asio/detail/handler_queue.hpp	/^    invoke_func_type invoke_func_;$/;"	m	class:boost::asio::detail::handler_queue::handler	access:private
boost::asio::detail::handler_queue::handler::invoke_func_type	/usr/include/boost/asio/detail/handler_queue.hpp	/^    typedef void (*invoke_func_type)(handler*);$/;"	t	class:boost::asio::detail::handler_queue::handler	access:protected
boost::asio::detail::handler_queue::handler::next_	/usr/include/boost/asio/detail/handler_queue.hpp	/^    handler* next_;$/;"	m	class:boost::asio::detail::handler_queue::handler	access:private
boost::asio::detail::handler_queue::handler::~handler	/usr/include/boost/asio/detail/handler_queue.hpp	/^    ~handler()$/;"	f	class:boost::asio::detail::handler_queue::handler	access:protected	signature:()
boost::asio::detail::handler_queue::handler_queue	/usr/include/boost/asio/detail/handler_queue.hpp	/^  handler_queue()$/;"	f	class:boost::asio::detail::handler_queue	access:public	signature:()
boost::asio::detail::handler_queue::handler_wrapper	/usr/include/boost/asio/detail/handler_queue.hpp	/^  class handler_wrapper$/;"	c	class:boost::asio::detail::handler_queue	inherits:handler	access:private
boost::asio::detail::handler_queue::handler_wrapper::do_call	/usr/include/boost/asio/detail/handler_queue.hpp	/^    static void do_call(handler* base)$/;"	f	class:boost::asio::detail::handler_queue::handler_wrapper	access:public	signature:(handler* base)
boost::asio::detail::handler_queue::handler_wrapper::do_destroy	/usr/include/boost/asio/detail/handler_queue.hpp	/^    static void do_destroy(handler* base)$/;"	f	class:boost::asio::detail::handler_queue::handler_wrapper	access:public	signature:(handler* base)
boost::asio::detail::handler_queue::handler_wrapper::handler_	/usr/include/boost/asio/detail/handler_queue.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::detail::handler_queue::handler_wrapper	access:private
boost::asio::detail::handler_queue::handler_wrapper::handler_wrapper	/usr/include/boost/asio/detail/handler_queue.hpp	/^    handler_wrapper(Handler h)$/;"	f	class:boost::asio::detail::handler_queue::handler_wrapper	access:public	signature:(Handler h)
boost::asio::detail::handler_queue::pop	/usr/include/boost/asio/detail/handler_queue.hpp	/^  void pop()$/;"	f	class:boost::asio::detail::handler_queue	access:public	signature:()
boost::asio::detail::handler_queue::push	/usr/include/boost/asio/detail/handler_queue.hpp	/^  void push(handler* h)$/;"	f	class:boost::asio::detail::handler_queue	access:public	signature:(handler* h)
boost::asio::detail::handler_queue::scoped_ptr	/usr/include/boost/asio/detail/handler_queue.hpp	/^  class scoped_ptr$/;"	c	class:boost::asio::detail::handler_queue	inherits:noncopyable	access:public
boost::asio::detail::handler_queue::scoped_ptr::get	/usr/include/boost/asio/detail/handler_queue.hpp	/^    handler* get() const$/;"	f	class:boost::asio::detail::handler_queue::scoped_ptr	access:public	signature:() const
boost::asio::detail::handler_queue::scoped_ptr::handler_	/usr/include/boost/asio/detail/handler_queue.hpp	/^    handler* handler_;$/;"	m	class:boost::asio::detail::handler_queue::scoped_ptr	access:private
boost::asio::detail::handler_queue::scoped_ptr::release	/usr/include/boost/asio/detail/handler_queue.hpp	/^    handler* release()$/;"	f	class:boost::asio::detail::handler_queue::scoped_ptr	access:public	signature:()
boost::asio::detail::handler_queue::scoped_ptr::scoped_ptr	/usr/include/boost/asio/detail/handler_queue.hpp	/^    explicit scoped_ptr(handler* h)$/;"	f	class:boost::asio::detail::handler_queue::scoped_ptr	access:public	signature:(handler* h)
boost::asio::detail::handler_queue::scoped_ptr::~scoped_ptr	/usr/include/boost/asio/detail/handler_queue.hpp	/^    ~scoped_ptr()$/;"	f	class:boost::asio::detail::handler_queue::scoped_ptr	access:public	signature:()
boost::asio::detail::handler_queue::wrap	/usr/include/boost/asio/detail/handler_queue.hpp	/^  static handler* wrap(Handler h)$/;"	f	class:boost::asio::detail::handler_queue	access:public	signature:(Handler h)
boost::asio::detail::hash_map	/usr/include/boost/asio/detail/hash_map.hpp	/^class hash_map$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::hash_map::begin	/usr/include/boost/asio/detail/hash_map.hpp	/^  const_iterator begin() const$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:() const
boost::asio::detail::hash_map::begin	/usr/include/boost/asio/detail/hash_map.hpp	/^  iterator begin()$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:()
boost::asio::detail::hash_map::buckets_	/usr/include/boost/asio/detail/hash_map.hpp	/^  std::vector<bucket_type> buckets_;$/;"	m	class:boost::asio::detail::hash_map	access:private
boost::asio::detail::hash_map::bucket_type	/usr/include/boost/asio/detail/hash_map.hpp	/^  struct bucket_type$/;"	s	class:boost::asio::detail::hash_map	access:private
boost::asio::detail::hash_map::bucket_type::bucket_type	/usr/include/boost/asio/detail/hash_map.hpp	/^    bucket_type() {}$/;"	f	struct:boost::asio::detail::hash_map::bucket_type	access:public	signature:()
boost::asio::detail::hash_map::bucket_type::bucket_type	/usr/include/boost/asio/detail/hash_map.hpp	/^    bucket_type(const bucket_type&) { \/* noop *\/ }$/;"	f	struct:boost::asio::detail::hash_map::bucket_type	access:public	signature:(const bucket_type&)
boost::asio::detail::hash_map::bucket_type::first	/usr/include/boost/asio/detail/hash_map.hpp	/^    iterator first;$/;"	m	struct:boost::asio::detail::hash_map::bucket_type	access:public
boost::asio::detail::hash_map::bucket_type::last	/usr/include/boost/asio/detail/hash_map.hpp	/^    iterator last;$/;"	m	struct:boost::asio::detail::hash_map::bucket_type	access:public
boost::asio::detail::hash_map::clear	/usr/include/boost/asio/detail/hash_map.hpp	/^  void clear()$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:()
boost::asio::detail::hash_map::const_iterator	/usr/include/boost/asio/detail/hash_map.hpp	/^  typedef typename std::list<value_type>::const_iterator const_iterator;$/;"	t	class:boost::asio::detail::hash_map	access:public
boost::asio::detail::hash_map::empty	/usr/include/boost/asio/detail/hash_map.hpp	/^  bool empty() const$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:() const
boost::asio::detail::hash_map::end	/usr/include/boost/asio/detail/hash_map.hpp	/^  const_iterator end() const$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:() const
boost::asio::detail::hash_map::end	/usr/include/boost/asio/detail/hash_map.hpp	/^  iterator end()$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:()
boost::asio::detail::hash_map::erase	/usr/include/boost/asio/detail/hash_map.hpp	/^  void erase(iterator it)$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:(iterator it)
boost::asio::detail::hash_map::find	/usr/include/boost/asio/detail/hash_map.hpp	/^  const_iterator find(const K& k) const$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:(const K& k) const
boost::asio::detail::hash_map::find	/usr/include/boost/asio/detail/hash_map.hpp	/^  iterator find(const K& k)$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:(const K& k)
boost::asio::detail::hash_map::hash_map	/usr/include/boost/asio/detail/hash_map.hpp	/^  hash_map()$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:()
boost::asio::detail::hash_map::hash_size	/usr/include/boost/asio/detail/hash_map.hpp	/^  static std::size_t hash_size(std::size_t num_elems)$/;"	f	class:boost::asio::detail::hash_map	access:private	signature:(std::size_t num_elems)
boost::asio::detail::hash_map::insert	/usr/include/boost/asio/detail/hash_map.hpp	/^  std::pair<iterator, bool> insert(const value_type& v)$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:(const value_type& v)
boost::asio::detail::hash_map::iterator	/usr/include/boost/asio/detail/hash_map.hpp	/^  typedef typename std::list<value_type>::iterator iterator;$/;"	t	class:boost::asio::detail::hash_map	access:public
boost::asio::detail::hash_map::rehash	/usr/include/boost/asio/detail/hash_map.hpp	/^  void rehash(std::size_t num_buckets)$/;"	f	class:boost::asio::detail::hash_map	access:private	signature:(std::size_t num_buckets)
boost::asio::detail::hash_map::size_	/usr/include/boost/asio/detail/hash_map.hpp	/^  std::size_t size_;$/;"	m	class:boost::asio::detail::hash_map	access:private
boost::asio::detail::hash_map::spares_	/usr/include/boost/asio/detail/hash_map.hpp	/^  std::list<value_type> spares_;$/;"	m	class:boost::asio::detail::hash_map	access:private
boost::asio::detail::hash_map::values_	/usr/include/boost/asio/detail/hash_map.hpp	/^  std::list<value_type> values_;$/;"	m	class:boost::asio::detail::hash_map	access:private
boost::asio::detail::hash_map::values_erase	/usr/include/boost/asio/detail/hash_map.hpp	/^  void values_erase(iterator it)$/;"	f	class:boost::asio::detail::hash_map	access:private	signature:(iterator it)
boost::asio::detail::hash_map::values_insert	/usr/include/boost/asio/detail/hash_map.hpp	/^  iterator values_insert(iterator it, const value_type& v)$/;"	f	class:boost::asio::detail::hash_map	access:private	signature:(iterator it, const value_type& v)
boost::asio::detail::hash_map::value_type	/usr/include/boost/asio/detail/hash_map.hpp	/^  typedef std::pair<K, V> value_type;$/;"	t	class:boost::asio::detail::hash_map	access:public
boost::asio::detail::has_result_type	/usr/include/boost/asio/read_until.hpp	/^  struct has_result_type$/;"	s	namespace:boost::asio::detail
boost::asio::detail::has_result_type::inner	/usr/include/boost/asio/read_until.hpp	/^    template <typename U> struct inner$/;"	s	struct:boost::asio::detail::has_result_type	access:public
boost::asio::detail::has_result_type::inner::big	/usr/include/boost/asio/read_until.hpp	/^        struct big { char a[100]; };$/;"	s	struct:boost::asio::detail::has_result_type::inner	access:public
boost::asio::detail::has_result_type::inner::big::a	/usr/include/boost/asio/read_until.hpp	/^        struct big { char a[100]; };$/;"	m	struct:boost::asio::detail::has_result_type::inner::big	access:public
boost::asio::detail::has_result_type::inner::helper	/usr/include/boost/asio/read_until.hpp	/^        static big helper(U, ...);$/;"	p	struct:boost::asio::detail::has_result_type::inner	access:public	signature:(U, ...)
boost::asio::detail::has_result_type::inner::helper	/usr/include/boost/asio/read_until.hpp	/^        static char helper(U, typename U::result_type* = 0);$/;"	p	struct:boost::asio::detail::has_result_type::inner	access:public	signature:(U, typename U::result_type* = 0)
boost::asio::detail::has_result_type::ref	/usr/include/boost/asio/read_until.hpp	/^    static const T& ref();$/;"	p	struct:boost::asio::detail::has_result_type	access:public	signature:()
boost::asio::detail::has_result_type::value	/usr/include/boost/asio/read_until.hpp	/^    enum { value = (sizeof((inner<const T&>::helper)((ref)())) == 1) };$/;"	e	enum:boost::asio::detail::has_result_type::__anon27
boost::asio::detail::in4_addr_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef in_addr in4_addr_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::in4_mreq_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef ip_mreq in4_mreq_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::in6_addr_emulation	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^struct in6_addr_emulation$/;"	s	namespace:boost::asio::detail
boost::asio::detail::in6_addr_emulation::u	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  } u;$/;"	m	struct:boost::asio::detail::in6_addr_emulation	typeref:union:boost::asio::detail::in6_addr_emulation::__anon8	access:public
boost::asio::detail::in6_addr_emulation::__anon8::Byte	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^    u_char Byte[16];$/;"	m	union:boost::asio::detail::in6_addr_emulation::__anon8	access:public
boost::asio::detail::in6_addr_emulation::__anon8::Word	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^    u_short Word[8];$/;"	m	union:boost::asio::detail::in6_addr_emulation::__anon8	access:public
boost::asio::detail::in6_addr_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef in6_addr in6_addr_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::in6_addr_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef in6_addr_emulation in6_addr_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::IN6_IS_ADDR_LINKLOCAL	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_LINKLOCAL(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
boost::asio::detail::IN6_IS_ADDR_LOOPBACK	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_LOOPBACK(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
boost::asio::detail::IN6_IS_ADDR_MC_GLOBAL	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_MC_GLOBAL(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
boost::asio::detail::IN6_IS_ADDR_MC_LINKLOCAL	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_MC_LINKLOCAL(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
boost::asio::detail::IN6_IS_ADDR_MC_NODELOCAL	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_MC_NODELOCAL(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
boost::asio::detail::IN6_IS_ADDR_MC_ORGLOCAL	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_MC_ORGLOCAL(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
boost::asio::detail::IN6_IS_ADDR_MC_SITELOCAL	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_MC_SITELOCAL(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
boost::asio::detail::IN6_IS_ADDR_MULTICAST	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_MULTICAST(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
boost::asio::detail::IN6_IS_ADDR_SITELOCAL	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_SITELOCAL(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
boost::asio::detail::IN6_IS_ADDR_UNSPECIFIED	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_UNSPECIFIED(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
boost::asio::detail::IN6_IS_ADDR_V4COMPAT	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_V4COMPAT(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
boost::asio::detail::IN6_IS_ADDR_V4MAPPED	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_V4MAPPED(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
boost::asio::detail::in6_mreq_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef ipv6_mreq in6_mreq_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::in6_mreq_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef ipv6_mreq_emulation in6_mreq_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::indirect_handler_queue	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^class indirect_handler_queue$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::indirect_handler_queue::back_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  node* back_;$/;"	m	class:boost::asio::detail::indirect_handler_queue	access:private
boost::asio::detail::indirect_handler_queue::back_version	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  unsigned long back_version()$/;"	f	class:boost::asio::detail::indirect_handler_queue	access:public	signature:()
boost::asio::detail::indirect_handler_queue::front_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  node* front_;$/;"	m	class:boost::asio::detail::indirect_handler_queue	access:private
boost::asio::detail::indirect_handler_queue::front_version	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  unsigned long front_version()$/;"	f	class:boost::asio::detail::indirect_handler_queue	access:public	signature:()
boost::asio::detail::indirect_handler_queue::handler	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  class handler$/;"	c	class:boost::asio::detail::indirect_handler_queue	inherits:noncopyable	access:public
boost::asio::detail::indirect_handler_queue::handler::destroy	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    void destroy()$/;"	f	class:boost::asio::detail::indirect_handler_queue::handler	access:public	signature:()
boost::asio::detail::indirect_handler_queue::handler::destroy_func_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    destroy_func_type destroy_func_;$/;"	m	class:boost::asio::detail::indirect_handler_queue::handler	access:private
boost::asio::detail::indirect_handler_queue::handler::destroy_func_type	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    typedef void (*destroy_func_type)(handler*);$/;"	t	class:boost::asio::detail::indirect_handler_queue::handler	access:protected
boost::asio::detail::indirect_handler_queue::handler::handler	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    handler(invoke_func_type invoke_func,$/;"	f	class:boost::asio::detail::indirect_handler_queue::handler	access:protected	signature:(invoke_func_type invoke_func, destroy_func_type destroy_func)
boost::asio::detail::indirect_handler_queue::handler::invoke	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    void invoke()$/;"	f	class:boost::asio::detail::indirect_handler_queue::handler	access:public	signature:()
boost::asio::detail::indirect_handler_queue::handler::invoke_func_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    invoke_func_type invoke_func_;$/;"	m	class:boost::asio::detail::indirect_handler_queue::handler	access:private
boost::asio::detail::indirect_handler_queue::handler::invoke_func_type	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    typedef void (*invoke_func_type)(handler*);$/;"	t	class:boost::asio::detail::indirect_handler_queue::handler	access:protected
boost::asio::detail::indirect_handler_queue::handler::node_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    node* node_;$/;"	m	class:boost::asio::detail::indirect_handler_queue::handler	access:private
boost::asio::detail::indirect_handler_queue::handler::~handler	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    ~handler()$/;"	f	class:boost::asio::detail::indirect_handler_queue::handler	access:protected	signature:()
boost::asio::detail::indirect_handler_queue::handler_wrapper	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  class handler_wrapper$/;"	c	class:boost::asio::detail::indirect_handler_queue	inherits:handler	access:private
boost::asio::detail::indirect_handler_queue::handler_wrapper::do_call	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    static void do_call(handler* base)$/;"	f	class:boost::asio::detail::indirect_handler_queue::handler_wrapper	access:public	signature:(handler* base)
boost::asio::detail::indirect_handler_queue::handler_wrapper::do_destroy	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    static void do_destroy(handler* base)$/;"	f	class:boost::asio::detail::indirect_handler_queue::handler_wrapper	access:public	signature:(handler* base)
boost::asio::detail::indirect_handler_queue::handler_wrapper::handler_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::detail::indirect_handler_queue::handler_wrapper	access:private
boost::asio::detail::indirect_handler_queue::handler_wrapper::handler_wrapper	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    handler_wrapper(Handler h)$/;"	f	class:boost::asio::detail::indirect_handler_queue::handler_wrapper	access:public	signature:(Handler h)
boost::asio::detail::indirect_handler_queue::indirect_handler_queue	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  indirect_handler_queue()$/;"	f	class:boost::asio::detail::indirect_handler_queue	access:public	signature:()
boost::asio::detail::indirect_handler_queue::memory_barrier	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  static void memory_barrier()$/;"	f	class:boost::asio::detail::indirect_handler_queue	access:private	signature:()
boost::asio::detail::indirect_handler_queue::next_version_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  unsigned long next_version_;$/;"	m	class:boost::asio::detail::indirect_handler_queue	access:private
boost::asio::detail::indirect_handler_queue::node	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  class node$/;"	c	class:boost::asio::detail::indirect_handler_queue	access:public
boost::asio::detail::indirect_handler_queue::node::handler_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    handler* handler_;$/;"	m	class:boost::asio::detail::indirect_handler_queue::node	access:private
boost::asio::detail::indirect_handler_queue::node::next_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    node* next_;$/;"	m	class:boost::asio::detail::indirect_handler_queue::node	access:private
boost::asio::detail::indirect_handler_queue::node::node	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    node()$/;"	f	class:boost::asio::detail::indirect_handler_queue::node	access:public	signature:()
boost::asio::detail::indirect_handler_queue::node::version_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    unsigned long version_;$/;"	m	class:boost::asio::detail::indirect_handler_queue::node	access:private
boost::asio::detail::indirect_handler_queue::pop	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  handler* pop()$/;"	f	class:boost::asio::detail::indirect_handler_queue	access:public	signature:()
boost::asio::detail::indirect_handler_queue::poppable	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  bool poppable()$/;"	f	class:boost::asio::detail::indirect_handler_queue	access:public	signature:()
boost::asio::detail::indirect_handler_queue::push	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  void push(handler* h)$/;"	f	class:boost::asio::detail::indirect_handler_queue	access:public	signature:(handler* h)
boost::asio::detail::indirect_handler_queue::scoped_ptr	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  class scoped_ptr$/;"	c	class:boost::asio::detail::indirect_handler_queue	inherits:noncopyable	access:public
boost::asio::detail::indirect_handler_queue::scoped_ptr::get	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    handler* get() const$/;"	f	class:boost::asio::detail::indirect_handler_queue::scoped_ptr	access:public	signature:() const
boost::asio::detail::indirect_handler_queue::scoped_ptr::handler_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    handler* handler_;$/;"	m	class:boost::asio::detail::indirect_handler_queue::scoped_ptr	access:private
boost::asio::detail::indirect_handler_queue::scoped_ptr::release	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    handler* release()$/;"	f	class:boost::asio::detail::indirect_handler_queue::scoped_ptr	access:public	signature:()
boost::asio::detail::indirect_handler_queue::scoped_ptr::scoped_ptr	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    explicit scoped_ptr(handler* h)$/;"	f	class:boost::asio::detail::indirect_handler_queue::scoped_ptr	access:public	signature:(handler* h)
boost::asio::detail::indirect_handler_queue::scoped_ptr::~scoped_ptr	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    ~scoped_ptr()$/;"	f	class:boost::asio::detail::indirect_handler_queue::scoped_ptr	access:public	signature:()
boost::asio::detail::indirect_handler_queue::wrap	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  static handler* wrap(Handler h)$/;"	f	class:boost::asio::detail::indirect_handler_queue	access:public	signature:(Handler h)
boost::asio::detail::indirect_handler_queue::~indirect_handler_queue	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  ~indirect_handler_queue()$/;"	f	class:boost::asio::detail::indirect_handler_queue	access:public	signature:()
boost::asio::detail::invalid_socket	/usr/include/boost/asio/detail/socket_types.hpp	/^const SOCKET invalid_socket = INVALID_SOCKET;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::ioctl_arg_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef unsigned long ioctl_arg_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::io_control	/usr/include/boost/asio/detail/io_control.hpp	/^namespace io_control {$/;"	n	namespace:boost::asio::detail
boost::asio::detail::io_control::bytes_readable	/usr/include/boost/asio/detail/io_control.hpp	/^class bytes_readable$/;"	c	namespace:boost::asio::detail::io_control
boost::asio::detail::io_control::bytes_readable::bytes_readable	/usr/include/boost/asio/detail/io_control.hpp	/^  bytes_readable()$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:()
boost::asio::detail::io_control::bytes_readable::bytes_readable	/usr/include/boost/asio/detail/io_control.hpp	/^  bytes_readable(std::size_t value)$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:(std::size_t value)
boost::asio::detail::io_control::bytes_readable::data	/usr/include/boost/asio/detail/io_control.hpp	/^  const detail::ioctl_arg_type* data() const$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:() const
boost::asio::detail::io_control::bytes_readable::data	/usr/include/boost/asio/detail/io_control.hpp	/^  detail::ioctl_arg_type* data()$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:()
boost::asio::detail::io_control::bytes_readable::get	/usr/include/boost/asio/detail/io_control.hpp	/^  std::size_t get() const$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:() const
boost::asio::detail::io_control::bytes_readable::name	/usr/include/boost/asio/detail/io_control.hpp	/^  int name() const$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:() const
boost::asio::detail::io_control::bytes_readable::set	/usr/include/boost/asio/detail/io_control.hpp	/^  void set(std::size_t value)$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:(std::size_t value)
boost::asio::detail::io_control::bytes_readable::value_	/usr/include/boost/asio/detail/io_control.hpp	/^  detail::ioctl_arg_type value_;$/;"	m	class:boost::asio::detail::io_control::bytes_readable	access:private
boost::asio::detail::io_control::non_blocking_io	/usr/include/boost/asio/detail/io_control.hpp	/^class non_blocking_io$/;"	c	namespace:boost::asio::detail::io_control
boost::asio::detail::io_control::non_blocking_io::data	/usr/include/boost/asio/detail/io_control.hpp	/^  const detail::ioctl_arg_type* data() const$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:() const
boost::asio::detail::io_control::non_blocking_io::data	/usr/include/boost/asio/detail/io_control.hpp	/^  detail::ioctl_arg_type* data()$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:()
boost::asio::detail::io_control::non_blocking_io::get	/usr/include/boost/asio/detail/io_control.hpp	/^  bool get() const$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:() const
boost::asio::detail::io_control::non_blocking_io::name	/usr/include/boost/asio/detail/io_control.hpp	/^  int name() const$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:() const
boost::asio::detail::io_control::non_blocking_io::non_blocking_io	/usr/include/boost/asio/detail/io_control.hpp	/^  non_blocking_io()$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:()
boost::asio::detail::io_control::non_blocking_io::non_blocking_io	/usr/include/boost/asio/detail/io_control.hpp	/^  non_blocking_io(bool value)$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:(bool value)
boost::asio::detail::io_control::non_blocking_io::set	/usr/include/boost/asio/detail/io_control.hpp	/^  void set(bool value)$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:(bool value)
boost::asio::detail::io_control::non_blocking_io::value_	/usr/include/boost/asio/detail/io_control.hpp	/^  detail::ioctl_arg_type value_;$/;"	m	class:boost::asio::detail::io_control::non_blocking_io	access:private
boost::asio::detail::ipv6_mreq_emulation	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^struct ipv6_mreq_emulation$/;"	s	namespace:boost::asio::detail
boost::asio::detail::ipv6_mreq_emulation::ipv6mr_interface	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  unsigned int ipv6mr_interface;$/;"	m	struct:boost::asio::detail::ipv6_mreq_emulation	access:public
boost::asio::detail::ipv6_mreq_emulation::ipv6mr_multiaddr	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  in6_addr_emulation ipv6mr_multiaddr;$/;"	m	struct:boost::asio::detail::ipv6_mreq_emulation	access:public
boost::asio::detail::is_open	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	namespace:boost::asio::detail	signature:(const implementation_type& impl) const
boost::asio::detail::is_read_buffered_big_type	/usr/include/boost/asio/is_read_buffered.hpp	/^struct is_read_buffered_big_type { char data[10]; };$/;"	s	namespace:boost::asio::detail
boost::asio::detail::is_read_buffered_big_type::data	/usr/include/boost/asio/is_read_buffered.hpp	/^struct is_read_buffered_big_type { char data[10]; };$/;"	m	struct:boost::asio::detail::is_read_buffered_big_type	access:public
boost::asio::detail::is_read_buffered_helper	/usr/include/boost/asio/is_read_buffered.hpp	/^char is_read_buffered_helper(buffered_read_stream<Stream>* s);$/;"	p	namespace:boost::asio::detail	signature:(buffered_read_stream<Stream>* s)
boost::asio::detail::is_read_buffered_helper	/usr/include/boost/asio/is_read_buffered.hpp	/^char is_read_buffered_helper(buffered_stream<Stream>* s);$/;"	p	namespace:boost::asio::detail	signature:(buffered_stream<Stream>* s)
boost::asio::detail::is_read_buffered_helper	/usr/include/boost/asio/is_read_buffered.hpp	/^is_read_buffered_big_type is_read_buffered_helper(...);$/;"	p	namespace:boost::asio::detail	signature:(....)
boost::asio::detail::is_write_buffered_big_type	/usr/include/boost/asio/is_write_buffered.hpp	/^struct is_write_buffered_big_type { char data[10]; };$/;"	s	namespace:boost::asio::detail
boost::asio::detail::is_write_buffered_big_type::data	/usr/include/boost/asio/is_write_buffered.hpp	/^struct is_write_buffered_big_type { char data[10]; };$/;"	m	struct:boost::asio::detail::is_write_buffered_big_type	access:public
boost::asio::detail::is_write_buffered_helper	/usr/include/boost/asio/is_write_buffered.hpp	/^char is_write_buffered_helper(buffered_stream<Stream>* s);$/;"	p	namespace:boost::asio::detail	signature:(buffered_stream<Stream>* s)
boost::asio::detail::is_write_buffered_helper	/usr/include/boost/asio/is_write_buffered.hpp	/^char is_write_buffered_helper(buffered_write_stream<Stream>* s);$/;"	p	namespace:boost::asio::detail	signature:(buffered_write_stream<Stream>* s)
boost::asio::detail::is_write_buffered_helper	/usr/include/boost/asio/is_write_buffered.hpp	/^is_write_buffered_big_type is_write_buffered_helper(...);$/;"	p	namespace:boost::asio::detail	signature:(....)
boost::asio::detail::kqueue_reactor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^class kqueue_reactor$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::kqueue_reactor::add_timer_queue	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void add_timer_queue(timer_queue<Time_Traits>& timer_queue)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
boost::asio::detail::kqueue_reactor::all_timer_queues_are_empty	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  bool all_timer_queues_are_empty() const$/;"	f	class:boost::asio::detail::kqueue_reactor	access:private	signature:() const
boost::asio::detail::kqueue_reactor::call_run_thread	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  static void call_run_thread(kqueue_reactor* reactor)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:private	signature:(kqueue_reactor* reactor)
boost::asio::detail::kqueue_reactor::cancel_ops	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void cancel_ops(socket_type descriptor, per_descriptor_data&)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&)
boost::asio::detail::kqueue_reactor::cancel_ops_unlocked	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void cancel_ops_unlocked(socket_type descriptor)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:private	signature:(socket_type descriptor)
boost::asio::detail::kqueue_reactor::cancel_timer	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  std::size_t cancel_timer(timer_queue<Time_Traits>& timer_queue, void* token)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue, void* token)
boost::asio::detail::kqueue_reactor::close_descriptor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void close_descriptor(socket_type descriptor, per_descriptor_data&)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&)
boost::asio::detail::kqueue_reactor::complete_operations_and_timers	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void complete_operations_and_timers($/;"	f	class:boost::asio::detail::kqueue_reactor	access:private	signature:( boost::asio::detail::mutex::scoped_lock& lock)
boost::asio::detail::kqueue_reactor::do_kqueue_create	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  static int do_kqueue_create()$/;"	f	class:boost::asio::detail::kqueue_reactor	access:private	signature:()
boost::asio::detail::kqueue_reactor::except_op_queue_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  reactor_op_queue<socket_type> except_op_queue_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::get_timeout	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  timespec* get_timeout(timespec& ts)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:private	signature:(timespec& ts)
boost::asio::detail::kqueue_reactor::init_task	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void init_task()$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:()
boost::asio::detail::kqueue_reactor::interrupt	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void interrupt()$/;"	f	class:boost::asio::detail::kqueue_reactor	access:private	signature:()
boost::asio::detail::kqueue_reactor::interrupter_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  select_interrupter interrupter_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::kqueue_fd_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  int kqueue_fd_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::kqueue_reactor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  kqueue_reactor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::kqueue_reactor::mutex_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::need_kqueue_wait_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  bool need_kqueue_wait_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::pending_cancellations_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  std::vector<socket_type> pending_cancellations_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::per_descriptor_data	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  struct per_descriptor_data$/;"	s	class:boost::asio::detail::kqueue_reactor	access:public
boost::asio::detail::kqueue_reactor::per_descriptor_data::allow_speculative_read	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    bool allow_speculative_read;$/;"	m	struct:boost::asio::detail::kqueue_reactor::per_descriptor_data	access:public
boost::asio::detail::kqueue_reactor::per_descriptor_data::allow_speculative_write	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^    bool allow_speculative_write;$/;"	m	struct:boost::asio::detail::kqueue_reactor::per_descriptor_data	access:public
boost::asio::detail::kqueue_reactor::read_op_queue_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  reactor_op_queue<socket_type> read_op_queue_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::register_descriptor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  int register_descriptor(socket_type, per_descriptor_data& descriptor_data)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type, per_descriptor_data& descriptor_data)
boost::asio::detail::kqueue_reactor::remove_timer_queue	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void remove_timer_queue(timer_queue<Time_Traits>& timer_queue)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
boost::asio::detail::kqueue_reactor::run	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void run(bool block)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:private	signature:(bool block)
boost::asio::detail::kqueue_reactor::run_thread	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void run_thread()$/;"	f	class:boost::asio::detail::kqueue_reactor	access:private	signature:()
boost::asio::detail::kqueue_reactor::schedule_timer	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void schedule_timer(timer_queue<Time_Traits>& timer_queue,$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue, const typename Time_Traits::time_type& time, Handler handler, void* token)
boost::asio::detail::kqueue_reactor::shutdown_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::shutdown_service	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:()
boost::asio::detail::kqueue_reactor::start_connect_op	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void start_connect_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data, Handler handler)
boost::asio::detail::kqueue_reactor::start_except_op	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void start_except_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, Handler handler)
boost::asio::detail::kqueue_reactor::start_read_op	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void start_read_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data, Handler handler, bool allow_speculative_read = true)
boost::asio::detail::kqueue_reactor::start_write_op	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void start_write_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data, Handler handler, bool allow_speculative_write = true)
boost::asio::detail::kqueue_reactor::stop_thread_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  bool stop_thread_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::thread_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  boost::asio::detail::thread* thread_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::timer_queues_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  std::vector<timer_queue_base*> timer_queues_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::timer_queues_for_cleanup_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  std::vector<timer_queue_base*> timer_queues_for_cleanup_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::wait_in_progress_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  bool wait_in_progress_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::write_op_queue_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  reactor_op_queue<socket_type> write_op_queue_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
boost::asio::detail::kqueue_reactor::~kqueue_reactor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  ~kqueue_reactor()$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:()
boost::asio::detail::local_free_on_block_exit	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^class local_free_on_block_exit$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::local_free_on_block_exit::local_free_on_block_exit	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^  explicit local_free_on_block_exit(void* p)$/;"	f	class:boost::asio::detail::local_free_on_block_exit	access:public	signature:(void* p)
boost::asio::detail::local_free_on_block_exit::p_	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^  void* p_;$/;"	m	class:boost::asio::detail::local_free_on_block_exit	access:private
boost::asio::detail::local_free_on_block_exit::~local_free_on_block_exit	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^  ~local_free_on_block_exit()$/;"	f	class:boost::asio::detail::local_free_on_block_exit	access:public	signature:()
boost::asio::detail::max_addr_v4_str_len	/usr/include/boost/asio/detail/socket_types.hpp	/^const int max_addr_v4_str_len = 256;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::max_addr_v6_str_len	/usr/include/boost/asio/detail/socket_types.hpp	/^const int max_addr_v6_str_len = 256;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::max_iov_len	/usr/include/boost/asio/detail/socket_types.hpp	/^const int max_iov_len = 16;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::max_iov_len	/usr/include/boost/asio/detail/socket_types.hpp	/^const int max_iov_len = 64;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::message_do_not_route	/usr/include/boost/asio/detail/socket_types.hpp	/^const int message_do_not_route = MSG_DONTROUTE;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::message_out_of_band	/usr/include/boost/asio/detail/socket_types.hpp	/^const int message_out_of_band = MSG_OOB;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::message_peek	/usr/include/boost/asio/detail/socket_types.hpp	/^const int message_peek = MSG_PEEK;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::mutex	/usr/include/boost/asio/detail/mutex.hpp	/^typedef null_mutex mutex;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::native	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl)
boost::asio::detail::noncopyable	/usr/include/boost/asio/detail/noncopyable.hpp	/^class noncopyable$/;"	c	namespace:boost::asio::detail
boost::asio::detail::noncopyable::dummy_	/usr/include/boost/asio/detail/noncopyable.hpp	/^  char dummy_;$/;"	m	class:boost::asio::detail::noncopyable	access:private
boost::asio::detail::noncopyable::noncopyable	/usr/include/boost/asio/detail/noncopyable.hpp	/^  noncopyable() {}$/;"	f	class:boost::asio::detail::noncopyable	access:protected	signature:()
boost::asio::detail::noncopyable::noncopyable	/usr/include/boost/asio/detail/noncopyable.hpp	/^  noncopyable(const noncopyable&);$/;"	p	class:boost::asio::detail::noncopyable	access:private	signature:(const noncopyable&)
boost::asio::detail::noncopyable::operator =	/usr/include/boost/asio/detail/noncopyable.hpp	/^  const noncopyable& operator=(const noncopyable&);$/;"	p	class:boost::asio::detail::noncopyable	access:private	signature:(const noncopyable&)
boost::asio::detail::noncopyable::~noncopyable	/usr/include/boost/asio/detail/noncopyable.hpp	/^  ~noncopyable() {}$/;"	f	class:boost::asio::detail::noncopyable	access:protected	signature:()
boost::asio::detail::null_buffers_operation	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  class null_buffers_operation :$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base,handler_base_from_member
boost::asio::detail::null_buffers_operation	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  class null_buffers_operation :$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base,handler_base_from_member
boost::asio::detail::null_buffers_operation::complete	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::null_buffers_operation	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::detail::null_buffers_operation::complete	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::null_buffers_operation	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::detail::null_buffers_operation::null_buffers_operation	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    null_buffers_operation(boost::asio::io_service& io_service, Handler handler)$/;"	f	class:boost::asio::detail::null_buffers_operation	access:public	signature:(boost::asio::io_service& io_service, Handler handler)
boost::asio::detail::null_buffers_operation::null_buffers_operation	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    null_buffers_operation(boost::asio::io_service& io_service, Handler handler)$/;"	f	class:boost::asio::detail::null_buffers_operation	access:public	signature:(boost::asio::io_service& io_service, Handler handler)
boost::asio::detail::null_buffers_operation::perform	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    bool perform(boost::system::error_code&,$/;"	f	class:boost::asio::detail::null_buffers_operation	access:public	signature:(boost::system::error_code&, std::size_t& bytes_transferred)
boost::asio::detail::null_buffers_operation::perform	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    bool perform(boost::system::error_code&,$/;"	f	class:boost::asio::detail::null_buffers_operation	access:public	signature:(boost::system::error_code&, std::size_t& bytes_transferred)
boost::asio::detail::null_buffers_operation::work_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::null_buffers_operation	access:private
boost::asio::detail::null_buffers_operation::work_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::null_buffers_operation	access:private
boost::asio::detail::null_event	/usr/include/boost/asio/detail/null_event.hpp	/^class null_event$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::null_event::clear	/usr/include/boost/asio/detail/null_event.hpp	/^  void clear(Lock&)$/;"	f	class:boost::asio::detail::null_event	access:public	signature:(Lock&)
boost::asio::detail::null_event::null_event	/usr/include/boost/asio/detail/null_event.hpp	/^  null_event()$/;"	f	class:boost::asio::detail::null_event	access:public	signature:()
boost::asio::detail::null_event::signal	/usr/include/boost/asio/detail/null_event.hpp	/^  void signal(Lock&)$/;"	f	class:boost::asio::detail::null_event	access:public	signature:(Lock&)
boost::asio::detail::null_event::wait	/usr/include/boost/asio/detail/null_event.hpp	/^  void wait(Lock&)$/;"	f	class:boost::asio::detail::null_event	access:public	signature:(Lock&)
boost::asio::detail::null_event::~null_event	/usr/include/boost/asio/detail/null_event.hpp	/^  ~null_event()$/;"	f	class:boost::asio::detail::null_event	access:public	signature:()
boost::asio::detail::null_mutex	/usr/include/boost/asio/detail/null_mutex.hpp	/^class null_mutex$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::null_mutex::lock	/usr/include/boost/asio/detail/null_mutex.hpp	/^  void lock()$/;"	f	class:boost::asio::detail::null_mutex	access:public	signature:()
boost::asio::detail::null_mutex::null_mutex	/usr/include/boost/asio/detail/null_mutex.hpp	/^  null_mutex()$/;"	f	class:boost::asio::detail::null_mutex	access:public	signature:()
boost::asio::detail::null_mutex::scoped_lock	/usr/include/boost/asio/detail/null_mutex.hpp	/^  typedef boost::asio::detail::scoped_lock<null_mutex> scoped_lock;$/;"	t	class:boost::asio::detail::null_mutex	access:public
boost::asio::detail::null_mutex::unlock	/usr/include/boost/asio/detail/null_mutex.hpp	/^  void unlock()$/;"	f	class:boost::asio::detail::null_mutex	access:public	signature:()
boost::asio::detail::null_mutex::~null_mutex	/usr/include/boost/asio/detail/null_mutex.hpp	/^  ~null_mutex()$/;"	f	class:boost::asio::detail::null_mutex	access:public	signature:()
boost::asio::detail::null_signal_blocker	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^class null_signal_blocker$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::null_signal_blocker::block	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^  void block()$/;"	f	class:boost::asio::detail::null_signal_blocker	access:public	signature:()
boost::asio::detail::null_signal_blocker::null_signal_blocker	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^  null_signal_blocker()$/;"	f	class:boost::asio::detail::null_signal_blocker	access:public	signature:()
boost::asio::detail::null_signal_blocker::unblock	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^  void unblock()$/;"	f	class:boost::asio::detail::null_signal_blocker	access:public	signature:()
boost::asio::detail::null_signal_blocker::~null_signal_blocker	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^  ~null_signal_blocker()$/;"	f	class:boost::asio::detail::null_signal_blocker	access:public	signature:()
boost::asio::detail::null_thread	/usr/include/boost/asio/detail/null_thread.hpp	/^class null_thread$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::null_thread::join	/usr/include/boost/asio/detail/null_thread.hpp	/^  void join()$/;"	f	class:boost::asio::detail::null_thread	access:public	signature:()
boost::asio::detail::null_thread::null_thread	/usr/include/boost/asio/detail/null_thread.hpp	/^  null_thread(Function f)$/;"	f	class:boost::asio::detail::null_thread	access:public	signature:(Function f)
boost::asio::detail::null_thread::~null_thread	/usr/include/boost/asio/detail/null_thread.hpp	/^  ~null_thread()$/;"	f	class:boost::asio::detail::null_thread	access:public	signature:()
boost::asio::detail::null_tss_ptr	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^class null_tss_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::null_tss_ptr::null_tss_ptr	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^  null_tss_ptr()$/;"	f	class:boost::asio::detail::null_tss_ptr	access:public	signature:()
boost::asio::detail::null_tss_ptr::operator =	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:boost::asio::detail::null_tss_ptr	access:public	signature:(T* value)
boost::asio::detail::null_tss_ptr::operator T*	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^  operator T*() const$/;"	f	class:boost::asio::detail::null_tss_ptr	access:public	signature:() const
boost::asio::detail::null_tss_ptr::value_	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^  T* value_;$/;"	m	class:boost::asio::detail::null_tss_ptr	access:private
boost::asio::detail::null_tss_ptr::~null_tss_ptr	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^  ~null_tss_ptr()$/;"	f	class:boost::asio::detail::null_tss_ptr	access:public	signature:()
boost::asio::detail::open	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
boost::asio::detail::pipe_select_interrupter	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^class pipe_select_interrupter$/;"	c	namespace:boost::asio::detail
boost::asio::detail::pipe_select_interrupter::interrupt	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  void interrupt()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:()
boost::asio::detail::pipe_select_interrupter::pipe_select_interrupter	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  pipe_select_interrupter()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:()
boost::asio::detail::pipe_select_interrupter::read_descriptor	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  int read_descriptor() const$/;"	f	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:() const
boost::asio::detail::pipe_select_interrupter::read_descriptor_	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  int read_descriptor_;$/;"	m	class:boost::asio::detail::pipe_select_interrupter	access:private
boost::asio::detail::pipe_select_interrupter::reset	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  bool reset()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:()
boost::asio::detail::pipe_select_interrupter::write_descriptor_	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  int write_descriptor_;$/;"	m	class:boost::asio::detail::pipe_select_interrupter	access:private
boost::asio::detail::pipe_select_interrupter::~pipe_select_interrupter	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  ~pipe_select_interrupter()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:()
boost::asio::detail::posix_event	/usr/include/boost/asio/detail/posix_event.hpp	/^class posix_event$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::posix_event::clear	/usr/include/boost/asio/detail/posix_event.hpp	/^  void clear(Lock& lock)$/;"	f	class:boost::asio::detail::posix_event	access:public	signature:(Lock& lock)
boost::asio::detail::posix_event::cond_	/usr/include/boost/asio/detail/posix_event.hpp	/^  ::pthread_cond_t cond_;$/;"	m	class:boost::asio::detail::posix_event	access:private
boost::asio::detail::posix_event::posix_event	/usr/include/boost/asio/detail/posix_event.hpp	/^  posix_event()$/;"	f	class:boost::asio::detail::posix_event	access:public	signature:()
boost::asio::detail::posix_event::signal	/usr/include/boost/asio/detail/posix_event.hpp	/^  void signal(Lock& lock)$/;"	f	class:boost::asio::detail::posix_event	access:public	signature:(Lock& lock)
boost::asio::detail::posix_event::signalled_	/usr/include/boost/asio/detail/posix_event.hpp	/^  bool signalled_;$/;"	m	class:boost::asio::detail::posix_event	access:private
boost::asio::detail::posix_event::wait	/usr/include/boost/asio/detail/posix_event.hpp	/^  void wait(Lock& lock)$/;"	f	class:boost::asio::detail::posix_event	access:public	signature:(Lock& lock)
boost::asio::detail::posix_event::~posix_event	/usr/include/boost/asio/detail/posix_event.hpp	/^  ~posix_event()$/;"	f	class:boost::asio::detail::posix_event	access:public	signature:()
boost::asio::detail::posix_fd_set_adapter	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^class posix_fd_set_adapter$/;"	c	namespace:boost::asio::detail
boost::asio::detail::posix_fd_set_adapter::fd_set_	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  mutable fd_set fd_set_;$/;"	m	class:boost::asio::detail::posix_fd_set_adapter	access:private
boost::asio::detail::posix_fd_set_adapter::is_set	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  bool is_set(socket_type descriptor) const$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:(socket_type descriptor) const
boost::asio::detail::posix_fd_set_adapter::max_descriptor	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  socket_type max_descriptor() const$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:() const
boost::asio::detail::posix_fd_set_adapter::max_descriptor_	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  socket_type max_descriptor_;$/;"	m	class:boost::asio::detail::posix_fd_set_adapter	access:private
boost::asio::detail::posix_fd_set_adapter::operator fd_set*	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  operator fd_set*()$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:()
boost::asio::detail::posix_fd_set_adapter::posix_fd_set_adapter	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  posix_fd_set_adapter()$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:()
boost::asio::detail::posix_fd_set_adapter::set	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  bool set(socket_type descriptor)$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:(socket_type descriptor)
boost::asio::detail::posix_mutex	/usr/include/boost/asio/detail/posix_mutex.hpp	/^class posix_mutex$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::posix_mutex::lock	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  void lock()$/;"	f	class:boost::asio::detail::posix_mutex	access:public	signature:()
boost::asio::detail::posix_mutex::mutex_	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  ::pthread_mutex_t mutex_;$/;"	m	class:boost::asio::detail::posix_mutex	access:private
boost::asio::detail::posix_mutex::posix_mutex	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  posix_mutex()$/;"	f	class:boost::asio::detail::posix_mutex	access:public	signature:()
boost::asio::detail::posix_mutex::scoped_lock	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  typedef boost::asio::detail::scoped_lock<posix_mutex> scoped_lock;$/;"	t	class:boost::asio::detail::posix_mutex	access:public
boost::asio::detail::posix_mutex::unlock	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  void unlock()$/;"	f	class:boost::asio::detail::posix_mutex	access:public	signature:()
boost::asio::detail::posix_mutex::~posix_mutex	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  ~posix_mutex()$/;"	f	class:boost::asio::detail::posix_mutex	access:public	signature:()
boost::asio::detail::posix_signal_blocker	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^class posix_signal_blocker$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::posix_signal_blocker::block	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  void block()$/;"	f	class:boost::asio::detail::posix_signal_blocker	access:public	signature:()
boost::asio::detail::posix_signal_blocker::blocked_	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  bool blocked_;$/;"	m	class:boost::asio::detail::posix_signal_blocker	access:private
boost::asio::detail::posix_signal_blocker::old_mask_	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  sigset_t old_mask_;$/;"	m	class:boost::asio::detail::posix_signal_blocker	access:private
boost::asio::detail::posix_signal_blocker::posix_signal_blocker	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  posix_signal_blocker()$/;"	f	class:boost::asio::detail::posix_signal_blocker	access:public	signature:()
boost::asio::detail::posix_signal_blocker::unblock	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  void unblock()$/;"	f	class:boost::asio::detail::posix_signal_blocker	access:public	signature:()
boost::asio::detail::posix_signal_blocker::~posix_signal_blocker	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  ~posix_signal_blocker()$/;"	f	class:boost::asio::detail::posix_signal_blocker	access:public	signature:()
boost::asio::detail::posix_thread	/usr/include/boost/asio/detail/posix_thread.hpp	/^class posix_thread$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::posix_thread::boost_asio_detail_posix_thread_function	/usr/include/boost/asio/detail/posix_thread.hpp	/^  friend void* boost_asio_detail_posix_thread_function(void* arg);$/;"	p	class:boost::asio::detail::posix_thread	access:friend	signature:(void* arg)
boost::asio::detail::posix_thread::func	/usr/include/boost/asio/detail/posix_thread.hpp	/^  class func$/;"	c	class:boost::asio::detail::posix_thread	inherits:func_base	access:private
boost::asio::detail::posix_thread::func::func	/usr/include/boost/asio/detail/posix_thread.hpp	/^    func(Function f)$/;"	f	class:boost::asio::detail::posix_thread::func	access:public	signature:(Function f)
boost::asio::detail::posix_thread::func::f_	/usr/include/boost/asio/detail/posix_thread.hpp	/^    Function f_;$/;"	m	class:boost::asio::detail::posix_thread::func	access:private
boost::asio::detail::posix_thread::func::run	/usr/include/boost/asio/detail/posix_thread.hpp	/^    virtual void run()$/;"	f	class:boost::asio::detail::posix_thread::func	access:public	signature:()
boost::asio::detail::posix_thread::func_base	/usr/include/boost/asio/detail/posix_thread.hpp	/^  class func_base$/;"	c	class:boost::asio::detail::posix_thread	access:private
boost::asio::detail::posix_thread::func_base::run	/usr/include/boost/asio/detail/posix_thread.hpp	/^    virtual void run() = 0;$/;"	p	class:boost::asio::detail::posix_thread::func_base	access:public	signature:()
boost::asio::detail::posix_thread::func_base::~func_base	/usr/include/boost/asio/detail/posix_thread.hpp	/^    virtual ~func_base() {}$/;"	f	class:boost::asio::detail::posix_thread::func_base	access:public	signature:()
boost::asio::detail::posix_thread::join	/usr/include/boost/asio/detail/posix_thread.hpp	/^  void join()$/;"	f	class:boost::asio::detail::posix_thread	access:public	signature:()
boost::asio::detail::posix_thread::joined_	/usr/include/boost/asio/detail/posix_thread.hpp	/^  bool joined_;$/;"	m	class:boost::asio::detail::posix_thread	access:private
boost::asio::detail::posix_thread::posix_thread	/usr/include/boost/asio/detail/posix_thread.hpp	/^  posix_thread(Function f)$/;"	f	class:boost::asio::detail::posix_thread	access:public	signature:(Function f)
boost::asio::detail::posix_thread::thread_	/usr/include/boost/asio/detail/posix_thread.hpp	/^  ::pthread_t thread_;$/;"	m	class:boost::asio::detail::posix_thread	access:private
boost::asio::detail::posix_thread::~posix_thread	/usr/include/boost/asio/detail/posix_thread.hpp	/^  ~posix_thread()$/;"	f	class:boost::asio::detail::posix_thread	access:public	signature:()
boost::asio::detail::posix_tss_ptr	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^class posix_tss_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::posix_tss_ptr::operator =	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:boost::asio::detail::posix_tss_ptr	access:public	signature:(T* value)
boost::asio::detail::posix_tss_ptr::operator T*	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^  operator T*() const$/;"	f	class:boost::asio::detail::posix_tss_ptr	access:public	signature:() const
boost::asio::detail::posix_tss_ptr::posix_tss_ptr	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^  posix_tss_ptr()$/;"	f	class:boost::asio::detail::posix_tss_ptr	access:public	signature:()
boost::asio::detail::posix_tss_ptr::tss_key_	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^  pthread_key_t tss_key_;$/;"	m	class:boost::asio::detail::posix_tss_ptr	access:private
boost::asio::detail::posix_tss_ptr::~posix_tss_ptr	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^  ~posix_tss_ptr()$/;"	f	class:boost::asio::detail::posix_tss_ptr	access:public	signature:()
boost::asio::detail::raw_handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^class raw_handler_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::raw_handler_ptr::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  BOOST_STATIC_CONSTANT(std::size_t, value_size = Alloc_Traits::value_size);$/;"	p	class:boost::asio::detail::raw_handler_ptr	access:public	signature:(std::size_t, value_size = Alloc_Traits::value_size)
boost::asio::detail::raw_handler_ptr::handler_	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_type& handler_;$/;"	m	class:boost::asio::detail::raw_handler_ptr	access:private
boost::asio::detail::raw_handler_ptr::handler_type	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  typedef typename Alloc_Traits::handler_type handler_type;$/;"	t	class:boost::asio::detail::raw_handler_ptr	access:public
boost::asio::detail::raw_handler_ptr::pointer_	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  pointer_type pointer_;$/;"	m	class:boost::asio::detail::raw_handler_ptr	access:private
boost::asio::detail::raw_handler_ptr::pointer_type	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  typedef typename Alloc_Traits::pointer_type pointer_type;$/;"	t	class:boost::asio::detail::raw_handler_ptr	access:public
boost::asio::detail::raw_handler_ptr::raw_handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  raw_handler_ptr(handler_type& handler)$/;"	f	class:boost::asio::detail::raw_handler_ptr	access:public	signature:(handler_type& handler)
boost::asio::detail::raw_handler_ptr::value_type	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  typedef typename Alloc_Traits::value_type value_type;$/;"	t	class:boost::asio::detail::raw_handler_ptr	access:public
boost::asio::detail::raw_handler_ptr::~raw_handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  ~raw_handler_ptr()$/;"	f	class:boost::asio::detail::raw_handler_ptr	access:public	signature:()
boost::asio::detail::reactive_descriptor_service	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^class reactive_descriptor_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::reactive_descriptor_service::buffers	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^            impl.descriptor_, this->get_io_service(), buffers, handler));$/;"	e	enum:boost::asio::detail::reactive_descriptor_service::__anon12
boost::asio::detail::reactive_descriptor_service::handler	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^            impl.descriptor_, this->get_io_service(), buffers, handler));$/;"	e	enum:boost::asio::detail::reactive_descriptor_service::__anon12
boost::asio::detail::reactive_descriptor_service::implementation_type	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  class implementation_type$/;"	c	class:boost::asio::detail::reactive_descriptor_service	inherits:boost::asio::detail::noncopyable	access:public
boost::asio::detail::reactive_descriptor_service::implementation_type::descriptor_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    int descriptor_;$/;"	m	class:boost::asio::detail::reactive_descriptor_service::implementation_type	access:private
boost::asio::detail::reactive_descriptor_service::implementation_type::flags_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    unsigned char flags_;$/;"	m	class:boost::asio::detail::reactive_descriptor_service::implementation_type	access:private
boost::asio::detail::reactive_descriptor_service::implementation_type::implementation_type	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    implementation_type()$/;"	f	class:boost::asio::detail::reactive_descriptor_service::implementation_type	access:public	signature:()
boost::asio::detail::reactive_descriptor_service::implementation_type::internal_non_blocking	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^      internal_non_blocking = 2  \/\/ The descriptor has been set non-blocking.$/;"	e	enum:boost::asio::detail::reactive_descriptor_service::implementation_type::__anon11
boost::asio::detail::reactive_descriptor_service::implementation_type::reactor_data_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    typename Reactor::per_descriptor_data reactor_data_;$/;"	m	class:boost::asio::detail::reactive_descriptor_service::implementation_type	access:private
boost::asio::detail::reactive_descriptor_service::implementation_type::user_set_non_blocking	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^      user_set_non_blocking = 1, \/\/ The user wants a non-blocking descriptor.$/;"	e	enum:boost::asio::detail::reactive_descriptor_service::implementation_type::__anon11
boost::asio::detail::reactive_descriptor_service::max_buffers	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  enum { max_buffers = 64 < max_iov_len ? 64 : max_iov_len };$/;"	e	enum:boost::asio::detail::reactive_descriptor_service::__anon12
boost::asio::detail::reactive_descriptor_service::native_type	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  typedef int native_type;$/;"	t	class:boost::asio::detail::reactive_descriptor_service	access:public
boost::asio::detail::reactive_serial_port_service	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^class reactive_serial_port_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::reactive_serial_port_service::assign	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const native_type& native_descriptor, boost::system::error_code& ec)
boost::asio::detail::reactive_serial_port_service::async_read_some	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, Handler handler)
boost::asio::detail::reactive_serial_port_service::async_write_some	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, Handler handler)
boost::asio::detail::reactive_serial_port_service::cancel	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::reactive_serial_port_service::close	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::reactive_serial_port_service::construct	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::reactive_serial_port_service::descriptor_service_	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  reactive_descriptor_service<Reactor>& descriptor_service_;$/;"	m	class:boost::asio::detail::reactive_serial_port_service	access:private
boost::asio::detail::reactive_serial_port_service::destroy	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::reactive_serial_port_service::get_option	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(const implementation_type& impl, GettableSerialPortOption& option, boost::system::error_code& ec) const
boost::asio::detail::reactive_serial_port_service::implementation_type	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^    implementation_type;$/;"	t	class:boost::asio::detail::reactive_serial_port_service	access:public
boost::asio::detail::reactive_serial_port_service::is_open	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(const implementation_type& impl) const
boost::asio::detail::reactive_serial_port_service::native	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::reactive_serial_port_service::native_type	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^    native_type;$/;"	t	class:boost::asio::detail::reactive_serial_port_service	access:public
boost::asio::detail::reactive_serial_port_service::open	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const std::string& device, boost::system::error_code& ec)
boost::asio::detail::reactive_serial_port_service::reactive_serial_port_service	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  reactive_serial_port_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::reactive_serial_port_service::read_some	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::detail::reactive_serial_port_service::send_break	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code send_break(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::reactive_serial_port_service::set_option	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const SettableSerialPortOption& option, boost::system::error_code& ec)
boost::asio::detail::reactive_serial_port_service::shutdown_service	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:()
boost::asio::detail::reactive_serial_port_service::write_some	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::detail::reactive_socket_service	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^class reactive_socket_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::reactive_socket_service::buffers	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^            impl.socket_, this->get_io_service(), buffers, flags, handler));$/;"	e	enum:boost::asio::detail::reactive_socket_service::__anon16
boost::asio::detail::reactive_socket_service::endpoint_type	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::detail::reactive_socket_service	access:public
boost::asio::detail::reactive_socket_service::flags	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^            impl.socket_, this->get_io_service(), buffers, flags, handler));$/;"	e	enum:boost::asio::detail::reactive_socket_service::__anon16
boost::asio::detail::reactive_socket_service::handler	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^            impl.socket_, this->get_io_service(), buffers, flags, handler));$/;"	e	enum:boost::asio::detail::reactive_socket_service::__anon16
boost::asio::detail::reactive_socket_service::implementation_type	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  class implementation_type$/;"	c	class:boost::asio::detail::reactive_socket_service	inherits:boost::asio::detail::noncopyable	access:public
boost::asio::detail::reactive_socket_service::implementation_type::enable_connection_aborted	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^      enable_connection_aborted = 4,$/;"	e	enum:boost::asio::detail::reactive_socket_service::implementation_type::__anon15
boost::asio::detail::reactive_socket_service::implementation_type::flags_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    unsigned char flags_;$/;"	m	class:boost::asio::detail::reactive_socket_service::implementation_type	access:private
boost::asio::detail::reactive_socket_service::implementation_type::implementation_type	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    implementation_type()$/;"	f	class:boost::asio::detail::reactive_socket_service::implementation_type	access:public	signature:()
boost::asio::detail::reactive_socket_service::implementation_type::internal_non_blocking	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^      internal_non_blocking = 2,$/;"	e	enum:boost::asio::detail::reactive_socket_service::implementation_type::__anon15
boost::asio::detail::reactive_socket_service::implementation_type::non_blocking	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^      non_blocking = user_set_non_blocking | internal_non_blocking,$/;"	e	enum:boost::asio::detail::reactive_socket_service::implementation_type::__anon15
boost::asio::detail::reactive_socket_service::implementation_type::protocol_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    protocol_type protocol_;$/;"	m	class:boost::asio::detail::reactive_socket_service::implementation_type	access:private
boost::asio::detail::reactive_socket_service::implementation_type::reactor_data_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    typename Reactor::per_descriptor_data reactor_data_;$/;"	m	class:boost::asio::detail::reactive_socket_service::implementation_type	access:private
boost::asio::detail::reactive_socket_service::implementation_type::socket_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    socket_type socket_;$/;"	m	class:boost::asio::detail::reactive_socket_service::implementation_type	access:private
boost::asio::detail::reactive_socket_service::implementation_type::user_set_linger	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^      user_set_linger = 8$/;"	e	enum:boost::asio::detail::reactive_socket_service::implementation_type::__anon15
boost::asio::detail::reactive_socket_service::implementation_type::user_set_non_blocking	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^      user_set_non_blocking = 1,$/;"	e	enum:boost::asio::detail::reactive_socket_service::implementation_type::__anon15
boost::asio::detail::reactive_socket_service::max_buffers	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  enum { max_buffers = 64 < max_iov_len ? 64 : max_iov_len };$/;"	e	enum:boost::asio::detail::reactive_socket_service::__anon16
boost::asio::detail::reactive_socket_service::native_type	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  typedef socket_type native_type;$/;"	t	class:boost::asio::detail::reactive_socket_service	access:public
boost::asio::detail::reactive_socket_service::protocol_type	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::detail::reactive_socket_service	access:public
boost::asio::detail::reactor_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  Reactor& reactor_;$/;"	m	namespace:boost::asio::detail	access:private
boost::asio::detail::reactor_op_queue	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^class reactor_op_queue$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::reactor_op_queue::cancelled_operations_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  op_base* cancelled_operations_;$/;"	m	class:boost::asio::detail::reactor_op_queue	access:private
boost::asio::detail::reactor_op_queue::cancel_operations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  bool cancel_operations(Descriptor descriptor)$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor descriptor)
boost::asio::detail::reactor_op_queue::complete_operations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  void complete_operations()$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:()
boost::asio::detail::reactor_op_queue::complete_operations_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  op_base* complete_operations_;$/;"	m	class:boost::asio::detail::reactor_op_queue	access:private
boost::asio::detail::reactor_op_queue::destroy_operations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  void destroy_operations()$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:()
boost::asio::detail::reactor_op_queue::empty	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  bool empty() const$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:() const
boost::asio::detail::reactor_op_queue::enqueue_operation	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  bool enqueue_operation(Descriptor descriptor, Operation operation)$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor descriptor, Operation operation)
boost::asio::detail::reactor_op_queue::get_descriptors	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  void get_descriptors(Descriptor_Set& descriptors)$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor_Set& descriptors)
boost::asio::detail::reactor_op_queue::has_operation	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  bool has_operation(Descriptor descriptor) const$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor descriptor) const
boost::asio::detail::reactor_op_queue::op	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  class op$/;"	c	class:boost::asio::detail::reactor_op_queue	inherits:op_base	access:private
boost::asio::detail::reactor_op_queue::op::do_complete	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    static void do_complete(op_base* base,$/;"	f	class:boost::asio::detail::reactor_op_queue::op	access:public	signature:(op_base* base, const boost::system::error_code& result, std::size_t bytes_transferred)
boost::asio::detail::reactor_op_queue::op::do_destroy	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    static void do_destroy(op_base* base)$/;"	f	class:boost::asio::detail::reactor_op_queue::op	access:public	signature:(op_base* base)
boost::asio::detail::reactor_op_queue::op::do_perform	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    static bool do_perform(op_base* base,$/;"	f	class:boost::asio::detail::reactor_op_queue::op	access:public	signature:(op_base* base, boost::system::error_code& result, std::size_t& bytes_transferred)
boost::asio::detail::reactor_op_queue::op::op	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    op(Descriptor descriptor, Operation operation)$/;"	f	class:boost::asio::detail::reactor_op_queue::op	access:public	signature:(Descriptor descriptor, Operation operation)
boost::asio::detail::reactor_op_queue::op::operation_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    Operation operation_;$/;"	m	class:boost::asio::detail::reactor_op_queue::op	access:private
boost::asio::detail::reactor_op_queue::operations_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  operation_map operations_;$/;"	m	class:boost::asio::detail::reactor_op_queue	access:private
boost::asio::detail::reactor_op_queue::operation_map	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  typedef hash_map<Descriptor, op_base*> operation_map;$/;"	t	class:boost::asio::detail::reactor_op_queue	access:private
boost::asio::detail::reactor_op_queue::op_base	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  class op_base$/;"	c	class:boost::asio::detail::reactor_op_queue	access:private
boost::asio::detail::reactor_op_queue::op_base::bytes_transferred_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    std::size_t bytes_transferred_;$/;"	m	class:boost::asio::detail::reactor_op_queue::op_base	access:private
boost::asio::detail::reactor_op_queue::op_base::complete	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    void complete()$/;"	f	class:boost::asio::detail::reactor_op_queue::op_base	access:public	signature:()
boost::asio::detail::reactor_op_queue::op_base::complete_func_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    complete_func_type complete_func_;$/;"	m	class:boost::asio::detail::reactor_op_queue::op_base	access:private
boost::asio::detail::reactor_op_queue::op_base::complete_func_type	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    typedef void (*complete_func_type)(op_base*,$/;"	t	class:boost::asio::detail::reactor_op_queue::op_base	access:protected
boost::asio::detail::reactor_op_queue::op_base::descriptor	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    Descriptor descriptor() const$/;"	f	class:boost::asio::detail::reactor_op_queue::op_base	access:public	signature:() const
boost::asio::detail::reactor_op_queue::op_base::descriptor_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    Descriptor descriptor_;$/;"	m	class:boost::asio::detail::reactor_op_queue::op_base	access:private
boost::asio::detail::reactor_op_queue::op_base::destroy	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    void destroy()$/;"	f	class:boost::asio::detail::reactor_op_queue::op_base	access:public	signature:()
boost::asio::detail::reactor_op_queue::op_base::destroy_func_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    destroy_func_type destroy_func_;$/;"	m	class:boost::asio::detail::reactor_op_queue::op_base	access:private
boost::asio::detail::reactor_op_queue::op_base::destroy_func_type	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    typedef void (*destroy_func_type)(op_base*);$/;"	t	class:boost::asio::detail::reactor_op_queue::op_base	access:protected
boost::asio::detail::reactor_op_queue::op_base::next_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    op_base* next_;$/;"	m	class:boost::asio::detail::reactor_op_queue::op_base	access:private
boost::asio::detail::reactor_op_queue::op_base::op_base	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    op_base(perform_func_type perform_func, complete_func_type complete_func,$/;"	f	class:boost::asio::detail::reactor_op_queue::op_base	access:protected	signature:(perform_func_type perform_func, complete_func_type complete_func, destroy_func_type destroy_func, Descriptor descriptor)
boost::asio::detail::reactor_op_queue::op_base::perform	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    bool perform(const boost::system::error_code& result)$/;"	f	class:boost::asio::detail::reactor_op_queue::op_base	access:public	signature:(const boost::system::error_code& result)
boost::asio::detail::reactor_op_queue::op_base::perform_func_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    perform_func_type perform_func_;$/;"	m	class:boost::asio::detail::reactor_op_queue::op_base	access:private
boost::asio::detail::reactor_op_queue::op_base::perform_func_type	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    typedef bool (*perform_func_type)(op_base*,$/;"	t	class:boost::asio::detail::reactor_op_queue::op_base	access:protected
boost::asio::detail::reactor_op_queue::op_base::result_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    boost::system::error_code result_;$/;"	m	class:boost::asio::detail::reactor_op_queue::op_base	access:private
boost::asio::detail::reactor_op_queue::op_base::~op_base	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    ~op_base()$/;"	f	class:boost::asio::detail::reactor_op_queue::op_base	access:protected	signature:()
boost::asio::detail::reactor_op_queue::perform_all_operations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  void perform_all_operations(Descriptor descriptor,$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor descriptor, const boost::system::error_code& result)
boost::asio::detail::reactor_op_queue::perform_cancellations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  void perform_cancellations()$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:()
boost::asio::detail::reactor_op_queue::perform_operation	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  bool perform_operation(Descriptor descriptor,$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor descriptor, const boost::system::error_code& result)
boost::asio::detail::reactor_op_queue::perform_operations_for_descriptors	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  void perform_operations_for_descriptors(const Descriptor_Set& descriptors,$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(const Descriptor_Set& descriptors, const boost::system::error_code& result)
boost::asio::detail::reactor_op_queue::reactor_op_queue	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  reactor_op_queue()$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:()
boost::asio::detail::read_operation	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  class read_operation :$/;"	c	namespace:boost::asio::detail	inherits:handler_base_from_member
boost::asio::detail::read_operation::buffers_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::read_operation	access:private
boost::asio::detail::read_operation::complete	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::read_operation	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::detail::read_operation::descriptor_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    int descriptor_;$/;"	m	class:boost::asio::detail::read_operation	access:private
boost::asio::detail::read_operation::io_service_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::detail::read_operation	access:private
boost::asio::detail::read_operation::perform	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    bool perform(boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::read_operation	access:public	signature:(boost::system::error_code& ec, std::size_t& bytes_transferred)
boost::asio::detail::read_operation::read_operation	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    read_operation(int descriptor, boost::asio::io_service& io_service,$/;"	f	class:boost::asio::detail::read_operation	access:public	signature:(int descriptor, boost::asio::io_service& io_service, const MutableBufferSequence& buffers, Handler handler)
boost::asio::detail::read_operation::work_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::read_operation	access:private
boost::asio::detail::read_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::detail::read_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const null_buffers&, boost::system::error_code& ec)
boost::asio::detail::receive	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  size_t receive(implementation_type& impl, const null_buffers&,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const null_buffers&, socket_base::message_flags, boost::system::error_code& ec)
boost::asio::detail::receive	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  size_t receive(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::detail::receive_from	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  size_t receive_from(implementation_type& impl, const null_buffers&,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const null_buffers&, endpoint_type& sender_endpoint, socket_base::message_flags, boost::system::error_code& ec)
boost::asio::detail::receive_from	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  size_t receive_from(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::detail::receive_from_operation	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  class receive_from_operation :$/;"	c	namespace:boost::asio::detail	inherits:handler_base_from_member
boost::asio::detail::receive_from_operation::buffers_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::receive_from_operation	access:private
boost::asio::detail::receive_from_operation::complete	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::receive_from_operation	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::detail::receive_from_operation::flags_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    socket_base::message_flags flags_;$/;"	m	class:boost::asio::detail::receive_from_operation	access:private
boost::asio::detail::receive_from_operation::io_service_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::detail::receive_from_operation	access:private
boost::asio::detail::receive_from_operation::perform	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    bool perform(boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::receive_from_operation	access:public	signature:(boost::system::error_code& ec, std::size_t& bytes_transferred)
boost::asio::detail::receive_from_operation::protocol_type_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    int protocol_type_;$/;"	m	class:boost::asio::detail::receive_from_operation	access:private
boost::asio::detail::receive_from_operation::receive_from_operation	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    receive_from_operation(socket_type socket, int protocol_type,$/;"	f	class:boost::asio::detail::receive_from_operation	access:public	signature:(socket_type socket, int protocol_type, boost::asio::io_service& io_service, const MutableBufferSequence& buffers, endpoint_type& endpoint, socket_base::message_flags flags, Handler handler)
boost::asio::detail::receive_from_operation::sender_endpoint_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    endpoint_type& sender_endpoint_;$/;"	m	class:boost::asio::detail::receive_from_operation	access:private
boost::asio::detail::receive_from_operation::socket_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    socket_type socket_;$/;"	m	class:boost::asio::detail::receive_from_operation	access:private
boost::asio::detail::receive_from_operation::work_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::receive_from_operation	access:private
boost::asio::detail::receive_operation	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  class receive_operation :$/;"	c	namespace:boost::asio::detail	inherits:handler_base_from_member
boost::asio::detail::receive_operation::buffers_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::receive_operation	access:private
boost::asio::detail::receive_operation::complete	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::receive_operation	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::detail::receive_operation::flags_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    socket_base::message_flags flags_;$/;"	m	class:boost::asio::detail::receive_operation	access:private
boost::asio::detail::receive_operation::io_service_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::detail::receive_operation	access:private
boost::asio::detail::receive_operation::perform	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    bool perform(boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::receive_operation	access:public	signature:(boost::system::error_code& ec, std::size_t& bytes_transferred)
boost::asio::detail::receive_operation::protocol_type_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    int protocol_type_;$/;"	m	class:boost::asio::detail::receive_operation	access:private
boost::asio::detail::receive_operation::receive_operation	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    receive_operation(socket_type socket, int protocol_type,$/;"	f	class:boost::asio::detail::receive_operation	access:public	signature:(socket_type socket, int protocol_type, boost::asio::io_service& io_service, const MutableBufferSequence& buffers, socket_base::message_flags flags, Handler handler)
boost::asio::detail::receive_operation::socket_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    socket_type socket_;$/;"	m	class:boost::asio::detail::receive_operation	access:private
boost::asio::detail::receive_operation::work_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::receive_operation	access:private
boost::asio::detail::resolver_service	/usr/include/boost/asio/detail/resolver_service.hpp	/^class resolver_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::resolver_service::async_resolve	/usr/include/boost/asio/detail/resolver_service.hpp	/^  void async_resolve(implementation_type& impl, const endpoint_type& endpoint,$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, Handler handler)
boost::asio::detail::resolver_service::async_resolve	/usr/include/boost/asio/detail/resolver_service.hpp	/^  void async_resolve(implementation_type& impl, const query_type& query,$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type& impl, const query_type& query, Handler handler)
boost::asio::detail::resolver_service::auto_addrinfo	/usr/include/boost/asio/detail/resolver_service.hpp	/^  class auto_addrinfo$/;"	c	class:boost::asio::detail::resolver_service	inherits:boost::asio::detail::noncopyable	access:private
boost::asio::detail::resolver_service::auto_addrinfo::ai_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    boost::asio::detail::addrinfo_type* ai_;$/;"	m	class:boost::asio::detail::resolver_service::auto_addrinfo	access:private
boost::asio::detail::resolver_service::auto_addrinfo::auto_addrinfo	/usr/include/boost/asio/detail/resolver_service.hpp	/^    explicit auto_addrinfo(boost::asio::detail::addrinfo_type* ai)$/;"	f	class:boost::asio::detail::resolver_service::auto_addrinfo	access:public	signature:(boost::asio::detail::addrinfo_type* ai)
boost::asio::detail::resolver_service::auto_addrinfo::operator boost::asio::detail::addrinfo_type*	/usr/include/boost/asio/detail/resolver_service.hpp	/^    operator boost::asio::detail::addrinfo_type*()$/;"	f	class:boost::asio::detail::resolver_service::auto_addrinfo	access:public	signature:()
boost::asio::detail::resolver_service::auto_addrinfo::~auto_addrinfo	/usr/include/boost/asio/detail/resolver_service.hpp	/^    ~auto_addrinfo()$/;"	f	class:boost::asio::detail::resolver_service::auto_addrinfo	access:public	signature:()
boost::asio::detail::resolver_service::cancel	/usr/include/boost/asio/detail/resolver_service.hpp	/^  void cancel(implementation_type& impl)$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::resolver_service::construct	/usr/include/boost/asio/detail/resolver_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::resolver_service::destroy	/usr/include/boost/asio/detail/resolver_service.hpp	/^  void destroy(implementation_type&)$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type&)
boost::asio::detail::resolver_service::endpoint_type	/usr/include/boost/asio/detail/resolver_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::detail::resolver_service	access:public
boost::asio::detail::resolver_service::implementation_type	/usr/include/boost/asio/detail/resolver_service.hpp	/^  typedef boost::shared_ptr<void> implementation_type;$/;"	t	class:boost::asio::detail::resolver_service	access:public
boost::asio::detail::resolver_service::iterator_type	/usr/include/boost/asio/detail/resolver_service.hpp	/^  typedef typename Protocol::resolver_iterator iterator_type;$/;"	t	class:boost::asio::detail::resolver_service	access:public
boost::asio::detail::resolver_service::mutex_	/usr/include/boost/asio/detail/resolver_service.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::resolver_service	access:private
boost::asio::detail::resolver_service::noop_deleter	/usr/include/boost/asio/detail/resolver_service.hpp	/^  struct noop_deleter { void operator()(void*) {} };$/;"	s	class:boost::asio::detail::resolver_service	access:public
boost::asio::detail::resolver_service::noop_deleter::operator ()	/usr/include/boost/asio/detail/resolver_service.hpp	/^  struct noop_deleter { void operator()(void*) {} };$/;"	f	struct:boost::asio::detail::resolver_service::noop_deleter	access:public	signature:(void*)
boost::asio::detail::resolver_service::query_type	/usr/include/boost/asio/detail/resolver_service.hpp	/^  typedef typename Protocol::resolver_query query_type;$/;"	t	class:boost::asio::detail::resolver_service	access:public
boost::asio::detail::resolver_service::resolve	/usr/include/boost/asio/detail/resolver_service.hpp	/^  iterator_type resolve(implementation_type&, const query_type& query,$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type&, const query_type& query, boost::system::error_code& ec)
boost::asio::detail::resolver_service::resolve	/usr/include/boost/asio/detail/resolver_service.hpp	/^  iterator_type resolve(implementation_type&,$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type&, const endpoint_type& endpoint, boost::system::error_code& ec)
boost::asio::detail::resolver_service::resolver_service	/usr/include/boost/asio/detail/resolver_service.hpp	/^  resolver_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::resolver_service::resolve_endpoint_handler	/usr/include/boost/asio/detail/resolver_service.hpp	/^  class resolve_endpoint_handler$/;"	c	class:boost::asio::detail::resolver_service	access:public
boost::asio::detail::resolver_service::resolve_endpoint_handler::endpoint_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    endpoint_type endpoint_;$/;"	m	class:boost::asio::detail::resolver_service::resolve_endpoint_handler	access:private
boost::asio::detail::resolver_service::resolve_endpoint_handler::handler_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::detail::resolver_service::resolve_endpoint_handler	access:private
boost::asio::detail::resolver_service::resolve_endpoint_handler::impl_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    boost::weak_ptr<void> impl_;$/;"	m	class:boost::asio::detail::resolver_service::resolve_endpoint_handler	access:private
boost::asio::detail::resolver_service::resolve_endpoint_handler::io_service_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::detail::resolver_service::resolve_endpoint_handler	access:private
boost::asio::detail::resolver_service::resolve_endpoint_handler::operator ()	/usr/include/boost/asio/detail/resolver_service.hpp	/^    void operator()()$/;"	f	class:boost::asio::detail::resolver_service::resolve_endpoint_handler	access:public	signature:()
boost::asio::detail::resolver_service::resolve_endpoint_handler::resolve_endpoint_handler	/usr/include/boost/asio/detail/resolver_service.hpp	/^    resolve_endpoint_handler(implementation_type impl,$/;"	f	class:boost::asio::detail::resolver_service::resolve_endpoint_handler	access:public	signature:(implementation_type impl, const endpoint_type& endpoint, boost::asio::io_service& io_service, Handler handler)
boost::asio::detail::resolver_service::resolve_endpoint_handler::work_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::resolver_service::resolve_endpoint_handler	access:private
boost::asio::detail::resolver_service::resolve_query_handler	/usr/include/boost/asio/detail/resolver_service.hpp	/^  class resolve_query_handler$/;"	c	class:boost::asio::detail::resolver_service	access:public
boost::asio::detail::resolver_service::resolve_query_handler::handler_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::detail::resolver_service::resolve_query_handler	access:private
boost::asio::detail::resolver_service::resolve_query_handler::impl_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    boost::weak_ptr<void> impl_;$/;"	m	class:boost::asio::detail::resolver_service::resolve_query_handler	access:private
boost::asio::detail::resolver_service::resolve_query_handler::io_service_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::detail::resolver_service::resolve_query_handler	access:private
boost::asio::detail::resolver_service::resolve_query_handler::operator ()	/usr/include/boost/asio/detail/resolver_service.hpp	/^    void operator()()$/;"	f	class:boost::asio::detail::resolver_service::resolve_query_handler	access:public	signature:()
boost::asio::detail::resolver_service::resolve_query_handler::query_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    query_type query_;$/;"	m	class:boost::asio::detail::resolver_service::resolve_query_handler	access:private
boost::asio::detail::resolver_service::resolve_query_handler::resolve_query_handler	/usr/include/boost/asio/detail/resolver_service.hpp	/^    resolve_query_handler(implementation_type impl, const query_type& query,$/;"	f	class:boost::asio::detail::resolver_service::resolve_query_handler	access:public	signature:(implementation_type impl, const query_type& query, boost::asio::io_service& io_service, Handler handler)
boost::asio::detail::resolver_service::resolve_query_handler::work_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::resolver_service::resolve_query_handler	access:private
boost::asio::detail::resolver_service::shutdown_service	/usr/include/boost/asio/detail/resolver_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:()
boost::asio::detail::resolver_service::start_work_thread	/usr/include/boost/asio/detail/resolver_service.hpp	/^  void start_work_thread()$/;"	f	class:boost::asio::detail::resolver_service	access:private	signature:()
boost::asio::detail::resolver_service::work_	/usr/include/boost/asio/detail/resolver_service.hpp	/^  boost::scoped_ptr<boost::asio::io_service::work> work_;$/;"	m	class:boost::asio::detail::resolver_service	access:private
boost::asio::detail::resolver_service::work_io_service_	/usr/include/boost/asio/detail/resolver_service.hpp	/^  boost::scoped_ptr<boost::asio::io_service> work_io_service_;$/;"	m	class:boost::asio::detail::resolver_service	access:private
boost::asio::detail::resolver_service::work_io_service_runner	/usr/include/boost/asio/detail/resolver_service.hpp	/^  class work_io_service_runner$/;"	c	class:boost::asio::detail::resolver_service	access:private
boost::asio::detail::resolver_service::work_io_service_runner::io_service_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::detail::resolver_service::work_io_service_runner	access:private
boost::asio::detail::resolver_service::work_io_service_runner::operator ()	/usr/include/boost/asio/detail/resolver_service.hpp	/^    void operator()() { io_service_.run(); }$/;"	f	class:boost::asio::detail::resolver_service::work_io_service_runner	access:public	signature:()
boost::asio::detail::resolver_service::work_io_service_runner::work_io_service_runner	/usr/include/boost/asio/detail/resolver_service.hpp	/^    work_io_service_runner(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::resolver_service::work_io_service_runner	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::resolver_service::work_thread_	/usr/include/boost/asio/detail/resolver_service.hpp	/^  boost::scoped_ptr<boost::asio::detail::thread> work_thread_;$/;"	m	class:boost::asio::detail::resolver_service	access:private
boost::asio::detail::resolver_service::~resolver_service	/usr/include/boost/asio/detail/resolver_service.hpp	/^  ~resolver_service()$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:()
boost::asio::detail::rewrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^class rewrapped_handler$/;"	c	namespace:boost::asio::detail
boost::asio::detail::rewrapped_handler::context_	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  Context context_;$/;"	m	class:boost::asio::detail::rewrapped_handler	access:public
boost::asio::detail::rewrapped_handler::handler_	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::rewrapped_handler	access:public
boost::asio::detail::rewrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::rewrapped_handler	access:public	signature:() const
boost::asio::detail::rewrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::rewrapped_handler	access:public	signature:()
boost::asio::detail::rewrapped_handler::rewrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  explicit rewrapped_handler(const Handler& handler, const Context& context)$/;"	f	class:boost::asio::detail::rewrapped_handler	access:public	signature:(const Handler& handler, const Context& context)
boost::asio::detail::scoped_lock	/usr/include/boost/asio/detail/scoped_lock.hpp	/^class scoped_lock$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::scoped_lock::lock	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  void lock()$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:()
boost::asio::detail::scoped_lock::locked	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  bool locked() const$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:() const
boost::asio::detail::scoped_lock::locked_	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  bool locked_;$/;"	m	class:boost::asio::detail::scoped_lock	access:private
boost::asio::detail::scoped_lock::mutex	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  Mutex& mutex()$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:()
boost::asio::detail::scoped_lock::mutex_	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  Mutex& mutex_;$/;"	m	class:boost::asio::detail::scoped_lock	access:private
boost::asio::detail::scoped_lock::scoped_lock	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  scoped_lock(Mutex& m)$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:(Mutex& m)
boost::asio::detail::scoped_lock::unlock	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  void unlock()$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:()
boost::asio::detail::scoped_lock::~scoped_lock	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  ~scoped_lock()$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:()
boost::asio::detail::select_interrupter	/usr/include/boost/asio/detail/select_interrupter.hpp	/^typedef socket_select_interrupter select_interrupter;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::select_reactor	/usr/include/boost/asio/detail/select_reactor.hpp	/^class select_reactor$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::select_reactor::add_timer_queue	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void add_timer_queue(timer_queue<Time_Traits>& timer_queue)$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
boost::asio::detail::select_reactor::all_timer_queues_are_empty	/usr/include/boost/asio/detail/select_reactor.hpp	/^  bool all_timer_queues_are_empty() const$/;"	f	class:boost::asio::detail::select_reactor	access:private	signature:() const
boost::asio::detail::select_reactor::call_run_thread	/usr/include/boost/asio/detail/select_reactor.hpp	/^  static void call_run_thread(select_reactor* reactor)$/;"	f	class:boost::asio::detail::select_reactor	access:private	signature:(select_reactor* reactor)
boost::asio::detail::select_reactor::cancel_ops	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void cancel_ops(socket_type descriptor, per_descriptor_data&)$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&)
boost::asio::detail::select_reactor::cancel_ops_unlocked	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void cancel_ops_unlocked(socket_type descriptor)$/;"	f	class:boost::asio::detail::select_reactor	access:private	signature:(socket_type descriptor)
boost::asio::detail::select_reactor::cancel_timer	/usr/include/boost/asio/detail/select_reactor.hpp	/^  std::size_t cancel_timer(timer_queue<Time_Traits>& timer_queue, void* token)$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue, void* token)
boost::asio::detail::select_reactor::close_descriptor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void close_descriptor(socket_type descriptor, per_descriptor_data&)$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&)
boost::asio::detail::select_reactor::complete_operations_and_timers	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void complete_operations_and_timers($/;"	f	class:boost::asio::detail::select_reactor	access:private	signature:( boost::asio::detail::mutex::scoped_lock& lock)
boost::asio::detail::select_reactor::connect_handler_wrapper	/usr/include/boost/asio/detail/select_reactor.hpp	/^  class connect_handler_wrapper$/;"	c	class:boost::asio::detail::select_reactor	access:public
boost::asio::detail::select_reactor::connect_handler_wrapper::complete	/usr/include/boost/asio/detail/select_reactor.hpp	/^    void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::select_reactor::connect_handler_wrapper	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::detail::select_reactor::connect_handler_wrapper::completed_	/usr/include/boost/asio/detail/select_reactor.hpp	/^    boost::shared_ptr<bool> completed_;$/;"	m	class:boost::asio::detail::select_reactor::connect_handler_wrapper	access:private
boost::asio::detail::select_reactor::connect_handler_wrapper::connect_handler_wrapper	/usr/include/boost/asio/detail/select_reactor.hpp	/^    connect_handler_wrapper(socket_type descriptor,$/;"	f	class:boost::asio::detail::select_reactor::connect_handler_wrapper	access:public	signature:(socket_type descriptor, boost::shared_ptr<bool> completed, select_reactor<Own_Thread>& reactor, Handler handler)
boost::asio::detail::select_reactor::connect_handler_wrapper::descriptor_	/usr/include/boost/asio/detail/select_reactor.hpp	/^    socket_type descriptor_;$/;"	m	class:boost::asio::detail::select_reactor::connect_handler_wrapper	access:private
boost::asio::detail::select_reactor::connect_handler_wrapper::handler_	/usr/include/boost/asio/detail/select_reactor.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::detail::select_reactor::connect_handler_wrapper	access:private
boost::asio::detail::select_reactor::connect_handler_wrapper::perform	/usr/include/boost/asio/detail/select_reactor.hpp	/^    bool perform(boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::select_reactor::connect_handler_wrapper	access:public	signature:(boost::system::error_code& ec, std::size_t& bytes_transferred)
boost::asio::detail::select_reactor::connect_handler_wrapper::reactor_	/usr/include/boost/asio/detail/select_reactor.hpp	/^    select_reactor<Own_Thread>& reactor_;$/;"	m	class:boost::asio::detail::select_reactor::connect_handler_wrapper	access:private
boost::asio::detail::select_reactor::enqueue_cancel_ops_unlocked	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void enqueue_cancel_ops_unlocked(socket_type descriptor)$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type descriptor)
boost::asio::detail::select_reactor::except_op_queue_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  reactor_op_queue<socket_type> except_op_queue_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
boost::asio::detail::select_reactor::get_timeout	/usr/include/boost/asio/detail/select_reactor.hpp	/^  timeval* get_timeout(timeval& tv)$/;"	f	class:boost::asio::detail::select_reactor	access:private	signature:(timeval& tv)
boost::asio::detail::select_reactor::init_task	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void init_task()$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:()
boost::asio::detail::select_reactor::interrupt	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void interrupt()$/;"	f	class:boost::asio::detail::select_reactor	access:private	signature:()
boost::asio::detail::select_reactor::interrupter_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  select_interrupter interrupter_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
boost::asio::detail::select_reactor::mutex_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
boost::asio::detail::select_reactor::pending_cancellations_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  std::vector<socket_type> pending_cancellations_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
boost::asio::detail::select_reactor::per_descriptor_data	/usr/include/boost/asio/detail/select_reactor.hpp	/^  struct per_descriptor_data$/;"	s	class:boost::asio::detail::select_reactor	access:public
boost::asio::detail::select_reactor::read_op_queue_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  reactor_op_queue<socket_type> read_op_queue_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
boost::asio::detail::select_reactor::register_descriptor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  int register_descriptor(socket_type, per_descriptor_data&)$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type, per_descriptor_data&)
boost::asio::detail::select_reactor::remove_timer_queue	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void remove_timer_queue(timer_queue<Time_Traits>& timer_queue)$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
boost::asio::detail::select_reactor::run	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void run(bool block)$/;"	f	class:boost::asio::detail::select_reactor	access:private	signature:(bool block)
boost::asio::detail::select_reactor::run_thread	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void run_thread()$/;"	f	class:boost::asio::detail::select_reactor	access:private	signature:()
boost::asio::detail::select_reactor::schedule_timer	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void schedule_timer(timer_queue<Time_Traits>& timer_queue,$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue, const typename Time_Traits::time_type& time, Handler handler, void* token)
boost::asio::detail::select_reactor::select_in_progress_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  bool select_in_progress_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
boost::asio::detail::select_reactor::select_reactor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  select_reactor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::select_reactor::shutdown_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
boost::asio::detail::select_reactor::shutdown_service	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:()
boost::asio::detail::select_reactor::start_connect_op	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void start_connect_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, Handler handler)
boost::asio::detail::select_reactor::start_except_op	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void start_except_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, Handler handler)
boost::asio::detail::select_reactor::start_read_op	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void start_read_op(socket_type descriptor, per_descriptor_data&,$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, Handler handler, bool = true)
boost::asio::detail::select_reactor::start_write_op	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void start_write_op(socket_type descriptor, per_descriptor_data&,$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, Handler handler, bool = true)
boost::asio::detail::select_reactor::stop_thread_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  bool stop_thread_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
boost::asio::detail::select_reactor::thread_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  boost::asio::detail::thread* thread_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
boost::asio::detail::select_reactor::timer_queues_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  std::vector<timer_queue_base*> timer_queues_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
boost::asio::detail::select_reactor::timer_queues_for_cleanup_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  std::vector<timer_queue_base*> timer_queues_for_cleanup_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
boost::asio::detail::select_reactor::write_op_queue_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  reactor_op_queue<socket_type> write_op_queue_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
boost::asio::detail::select_reactor::~select_reactor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  ~select_reactor()$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:()
boost::asio::detail::send_to	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  size_t send_to(implementation_type& impl, const ConstBufferSequence& buffers,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::detail::send_to	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  size_t send_to(implementation_type& impl, const null_buffers&,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const null_buffers&, socket_base::message_flags, const endpoint_type&, boost::system::error_code& ec)
boost::asio::detail::send_to_operation	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  class send_to_operation :$/;"	c	namespace:boost::asio::detail	inherits:handler_base_from_member
boost::asio::detail::send_to_operation::buffers_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    ConstBufferSequence buffers_;$/;"	m	class:boost::asio::detail::send_to_operation	access:private
boost::asio::detail::send_to_operation::complete	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::send_to_operation	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::detail::send_to_operation::destination_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    endpoint_type destination_;$/;"	m	class:boost::asio::detail::send_to_operation	access:private
boost::asio::detail::send_to_operation::flags_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    socket_base::message_flags flags_;$/;"	m	class:boost::asio::detail::send_to_operation	access:private
boost::asio::detail::send_to_operation::io_service_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::detail::send_to_operation	access:private
boost::asio::detail::send_to_operation::perform	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    bool perform(boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::send_to_operation	access:public	signature:(boost::system::error_code& ec, std::size_t& bytes_transferred)
boost::asio::detail::send_to_operation::send_to_operation	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    send_to_operation(socket_type socket, boost::asio::io_service& io_service,$/;"	f	class:boost::asio::detail::send_to_operation	access:public	signature:(socket_type socket, boost::asio::io_service& io_service, const ConstBufferSequence& buffers, const endpoint_type& endpoint, socket_base::message_flags flags, Handler handler)
boost::asio::detail::send_to_operation::socket_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    socket_type socket_;$/;"	m	class:boost::asio::detail::send_to_operation	access:private
boost::asio::detail::send_to_operation::work_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::send_to_operation	access:private
boost::asio::detail::service_base	/usr/include/boost/asio/detail/service_base.hpp	/^class service_base$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::io_service::service
boost::asio::detail::service_base::id	/usr/include/boost/asio/detail/service_base.hpp	/^  static boost::asio::detail::service_id<Type> id;$/;"	m	class:boost::asio::detail::service_base	access:public
boost::asio::detail::service_base::id	/usr/include/boost/asio/detail/service_base.hpp	/^boost::asio::detail::service_id<Type> service_base<Type>::id;$/;"	m	class:boost::asio::detail::service_base
boost::asio::detail::service_base::service_base	/usr/include/boost/asio/detail/service_base.hpp	/^  service_base(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::service_base	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::service_id	/usr/include/boost/asio/detail/service_id.hpp	/^class service_id$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::io_service::id
boost::asio::detail::service_registry	/usr/include/boost/asio/detail/service_registry.hpp	/^class service_registry$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::service_registry::add_service	/usr/include/boost/asio/detail/service_registry.hpp	/^  bool add_service(Service* new_service)$/;"	f	class:boost::asio::detail::service_registry	access:public	signature:(Service* new_service)
boost::asio::detail::service_registry::first_service_	/usr/include/boost/asio/detail/service_registry.hpp	/^  boost::asio::io_service::service* first_service_;$/;"	m	class:boost::asio::detail::service_registry	access:private
boost::asio::detail::service_registry::has_service	/usr/include/boost/asio/detail/service_registry.hpp	/^  bool has_service() const$/;"	f	class:boost::asio::detail::service_registry	access:public	signature:() const
boost::asio::detail::service_registry::init_service_id	/usr/include/boost/asio/detail/service_registry.hpp	/^  void init_service_id(boost::asio::io_service::service& service,$/;"	f	class:boost::asio::detail::service_registry	access:private	signature:(boost::asio::io_service::service& service, const boost::asio::detail::service_id<Service>& )
boost::asio::detail::service_registry::init_service_id	/usr/include/boost/asio/detail/service_registry.hpp	/^  void init_service_id(boost::asio::io_service::service& service,$/;"	f	class:boost::asio::detail::service_registry	access:private	signature:(boost::asio::io_service::service& service, const boost::asio::io_service::id& id)
boost::asio::detail::service_registry::mutex_	/usr/include/boost/asio/detail/service_registry.hpp	/^  mutable boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::service_registry	access:private
boost::asio::detail::service_registry::owner_	/usr/include/boost/asio/detail/service_registry.hpp	/^  boost::asio::io_service& owner_;$/;"	m	class:boost::asio::detail::service_registry	access:private
boost::asio::detail::service_registry::service_id_matches	/usr/include/boost/asio/detail/service_registry.hpp	/^  static bool service_id_matches($/;"	f	class:boost::asio::detail::service_registry	access:private	signature:( const boost::asio::io_service::service& service, const boost::asio::detail::service_id<Service>& )
boost::asio::detail::service_registry::service_id_matches	/usr/include/boost/asio/detail/service_registry.hpp	/^  static bool service_id_matches($/;"	f	class:boost::asio::detail::service_registry	access:private	signature:( const boost::asio::io_service::service& service, const boost::asio::io_service::id& id)
boost::asio::detail::service_registry::service_registry	/usr/include/boost/asio/detail/service_registry.hpp	/^  service_registry(boost::asio::io_service& o)$/;"	f	class:boost::asio::detail::service_registry	access:public	signature:(boost::asio::io_service& o)
boost::asio::detail::service_registry::use_service	/usr/include/boost/asio/detail/service_registry.hpp	/^  Service& use_service()$/;"	f	class:boost::asio::detail::service_registry	access:public	signature:()
boost::asio::detail::service_registry::~service_registry	/usr/include/boost/asio/detail/service_registry.hpp	/^  ~service_registry()$/;"	f	class:boost::asio::detail::service_registry	access:public	signature:()
boost::asio::detail::shutdown_both	/usr/include/boost/asio/detail/socket_types.hpp	/^const int shutdown_both = SD_BOTH;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::shutdown_receive	/usr/include/boost/asio/detail/socket_types.hpp	/^const int shutdown_receive = SD_RECEIVE;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::shutdown_send	/usr/include/boost/asio/detail/socket_types.hpp	/^const int shutdown_send = SD_SEND;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::signal_blocker	/usr/include/boost/asio/detail/signal_blocker.hpp	/^typedef null_signal_blocker signal_blocker;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::signal_init	/usr/include/boost/asio/detail/signal_init.hpp	/^class signal_init$/;"	c	namespace:boost::asio::detail
boost::asio::detail::signal_init::signal_init	/usr/include/boost/asio/detail/signal_init.hpp	/^  signal_init()$/;"	f	class:boost::asio::detail::signal_init	access:public	signature:()
boost::asio::detail::sockaddr_in4_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr_in sockaddr_in4_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::sockaddr_in6_emulation	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^struct sockaddr_in6_emulation$/;"	s	namespace:boost::asio::detail
boost::asio::detail::sockaddr_in6_emulation::sin6_addr	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  in6_addr_emulation sin6_addr;$/;"	m	struct:boost::asio::detail::sockaddr_in6_emulation	access:public
boost::asio::detail::sockaddr_in6_emulation::sin6_family	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  short sin6_family;$/;"	m	struct:boost::asio::detail::sockaddr_in6_emulation	access:public
boost::asio::detail::sockaddr_in6_emulation::sin6_flowinfo	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  u_long sin6_flowinfo;$/;"	m	struct:boost::asio::detail::sockaddr_in6_emulation	access:public
boost::asio::detail::sockaddr_in6_emulation::sin6_port	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  u_short sin6_port;$/;"	m	struct:boost::asio::detail::sockaddr_in6_emulation	access:public
boost::asio::detail::sockaddr_in6_emulation::sin6_scope_id	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  u_long sin6_scope_id;$/;"	m	struct:boost::asio::detail::sockaddr_in6_emulation	access:public
boost::asio::detail::sockaddr_in6_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr_in6 sockaddr_in6_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::sockaddr_in6_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr_in6_emulation sockaddr_in6_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::sockaddr_storage_alignsize	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  sockaddr_storage_alignsize = (sizeof(__int64)), \/\/ Desired alignment.$/;"	e	enum:boost::asio::detail::__anon7
boost::asio::detail::sockaddr_storage_emulation	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^struct sockaddr_storage_emulation$/;"	s	namespace:boost::asio::detail
boost::asio::detail::sockaddr_storage_emulation::ss_family	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  short ss_family;$/;"	m	struct:boost::asio::detail::sockaddr_storage_emulation	access:public
boost::asio::detail::sockaddr_storage_emulation::__ss_align	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  __int64 __ss_align;$/;"	m	struct:boost::asio::detail::sockaddr_storage_emulation	access:public
boost::asio::detail::sockaddr_storage_emulation::__ss_pad1	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  char __ss_pad1[sockaddr_storage_pad1size];$/;"	m	struct:boost::asio::detail::sockaddr_storage_emulation	access:public
boost::asio::detail::sockaddr_storage_emulation::__ss_pad2	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  char __ss_pad2[sockaddr_storage_pad2size];$/;"	m	struct:boost::asio::detail::sockaddr_storage_emulation	access:public
boost::asio::detail::sockaddr_storage_maxsize	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  sockaddr_storage_maxsize = 128, \/\/ Maximum size.$/;"	e	enum:boost::asio::detail::__anon7
boost::asio::detail::sockaddr_storage_pad1size	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  sockaddr_storage_pad1size = (sockaddr_storage_alignsize - sizeof(short)),$/;"	e	enum:boost::asio::detail::__anon7
boost::asio::detail::sockaddr_storage_pad2size	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  sockaddr_storage_pad2size = (sockaddr_storage_maxsize -$/;"	e	enum:boost::asio::detail::__anon7
boost::asio::detail::sockaddr_storage_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr_storage sockaddr_storage_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::sockaddr_storage_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr_storage_emulation sockaddr_storage_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::socket_addr_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr socket_addr_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::socket_error_retval	/usr/include/boost/asio/detail/socket_types.hpp	/^const int socket_error_retval = SOCKET_ERROR;$/;"	m	namespace:boost::asio::detail
boost::asio::detail::socket_holder	/usr/include/boost/asio/detail/socket_holder.hpp	/^class socket_holder$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::socket_holder::get	/usr/include/boost/asio/detail/socket_holder.hpp	/^  socket_type get() const$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:() const
boost::asio::detail::socket_holder::release	/usr/include/boost/asio/detail/socket_holder.hpp	/^  socket_type release()$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:()
boost::asio::detail::socket_holder::reset	/usr/include/boost/asio/detail/socket_holder.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:()
boost::asio::detail::socket_holder::reset	/usr/include/boost/asio/detail/socket_holder.hpp	/^  void reset(socket_type s)$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:(socket_type s)
boost::asio::detail::socket_holder::socket_	/usr/include/boost/asio/detail/socket_holder.hpp	/^  socket_type socket_;$/;"	m	class:boost::asio::detail::socket_holder	access:private
boost::asio::detail::socket_holder::socket_holder	/usr/include/boost/asio/detail/socket_holder.hpp	/^  explicit socket_holder(socket_type s)$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:(socket_type s)
boost::asio::detail::socket_holder::socket_holder	/usr/include/boost/asio/detail/socket_holder.hpp	/^  socket_holder()$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:()
boost::asio::detail::socket_holder::~socket_holder	/usr/include/boost/asio/detail/socket_holder.hpp	/^  ~socket_holder()$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:()
boost::asio::detail::socket_ops	/usr/include/boost/asio/detail/socket_ops.hpp	/^namespace socket_ops {$/;"	n	namespace:boost::asio::detail
boost::asio::detail::socket_ops::accept	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline socket_type accept(socket_type s, socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::bind	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int bind(socket_type s, const socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::buf	/usr/include/boost/asio/detail/socket_ops.hpp	/^typedef iovec buf;$/;"	t	namespace:boost::asio::detail::socket_ops
boost::asio::detail::socket_ops::buf	/usr/include/boost/asio/detail/socket_ops.hpp	/^typedef WSABUF buf;$/;"	t	namespace:boost::asio::detail::socket_ops
boost::asio::detail::socket_ops::call_accept	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline socket_type call_accept(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, socket_addr_type* addr, std::size_t* addrlen)
boost::asio::detail::socket_ops::call_bind	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int call_bind(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, const socket_addr_type* addr, std::size_t addrlen)
boost::asio::detail::socket_ops::call_connect	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int call_connect(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, const socket_addr_type* addr, std::size_t addrlen)
boost::asio::detail::socket_ops::call_getpeername	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int call_getpeername(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, socket_addr_type* addr, std::size_t* addrlen)
boost::asio::detail::socket_ops::call_getsockname	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int call_getsockname(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, socket_addr_type* addr, std::size_t* addrlen)
boost::asio::detail::socket_ops::call_getsockopt	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int call_getsockopt(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, int level, int optname, void* optval, std::size_t* optlen)
boost::asio::detail::socket_ops::call_setsockopt	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int call_setsockopt(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, int level, int optname, const void* optval, std::size_t optlen)
boost::asio::detail::socket_ops::clear_error	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void clear_error(boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(boost::system::error_code& ec)
boost::asio::detail::socket_ops::close	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int close(socket_type s, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
boost::asio::detail::socket_ops::connect	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int connect(socket_type s, const socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::error_wrapper	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline ReturnType error_wrapper(ReturnType return_value,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(ReturnType return_value, boost::system::error_code& ec)
boost::asio::detail::socket_ops::freeaddrinfo	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void freeaddrinfo(addrinfo_type* ai)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* ai)
boost::asio::detail::socket_ops::freeaddrinfo_emulation	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void freeaddrinfo_emulation(addrinfo_type* aihead)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* aihead)
boost::asio::detail::socket_ops::freehostent	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void freehostent(hostent* h)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(hostent* h)
boost::asio::detail::socket_ops::gai_aistruct	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int gai_aistruct(addrinfo_type*** next, const addrinfo_type* hints,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type*** next, const addrinfo_type* hints, const void* addr, int family)
boost::asio::detail::socket_ops::gai_alloc	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline T* gai_alloc(std::size_t size = sizeof(T))$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(std::size_t size = sizeof(T))
boost::asio::detail::socket_ops::gai_clone	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline addrinfo_type* gai_clone(addrinfo_type* ai)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* ai)
boost::asio::detail::socket_ops::gai_clone_flag	/usr/include/boost/asio/detail/socket_ops.hpp	/^enum { gai_clone_flag = 1 << 30 };$/;"	e	enum:boost::asio::detail::socket_ops::__anon17
boost::asio::detail::socket_ops::gai_echeck	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int gai_echeck(const char* host, const char* service,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* host, const char* service, int flags, int family, int socktype, int protocol)
boost::asio::detail::socket_ops::gai_free	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void gai_free(void* p)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(void* p)
boost::asio::detail::socket_ops::gai_nsearch	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int gai_nsearch(const char* host,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* host, const addrinfo_type* hints, gai_search (&search)[2])
boost::asio::detail::socket_ops::gai_port	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int gai_port(addrinfo_type* aihead, int port, int socktype)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* aihead, int port, int socktype)
boost::asio::detail::socket_ops::gai_search	/usr/include/boost/asio/detail/socket_ops.hpp	/^struct gai_search$/;"	s	namespace:boost::asio::detail::socket_ops
boost::asio::detail::socket_ops::gai_search::family	/usr/include/boost/asio/detail/socket_ops.hpp	/^  int family;$/;"	m	struct:boost::asio::detail::socket_ops::gai_search	access:public
boost::asio::detail::socket_ops::gai_search::host	/usr/include/boost/asio/detail/socket_ops.hpp	/^  const char* host;$/;"	m	struct:boost::asio::detail::socket_ops::gai_search	access:public
boost::asio::detail::socket_ops::gai_serv	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int gai_serv(addrinfo_type* aihead,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* aihead, const addrinfo_type* hints, const char* serv)
boost::asio::detail::socket_ops::gai_strcpy	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void gai_strcpy(char* target, const char* source, std::size_t max_size)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(char* target, const char* source, std::size_t max_size)
boost::asio::detail::socket_ops::getaddrinfo	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline boost::system::error_code getaddrinfo(const char* host,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* host, const char* service, const addrinfo_type* hints, addrinfo_type** result, boost::system::error_code& ec)
boost::asio::detail::socket_ops::getaddrinfo_emulation	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int getaddrinfo_emulation(const char* host, const char* service,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* host, const char* service, const addrinfo_type* hintsp, addrinfo_type** result)
boost::asio::detail::socket_ops::gethostbyaddr	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline hostent* gethostbyaddr(const char* addr, int length, int af,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* addr, int length, int af, hostent* result, char* buffer, int buflength, boost::system::error_code& ec)
boost::asio::detail::socket_ops::gethostbyname	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline hostent* gethostbyname(const char* name, int af, struct hostent* result,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* name, int af, struct hostent* result, char* buffer, int buflength, int ai_flags, boost::system::error_code& ec)
boost::asio::detail::socket_ops::gethostname	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int gethostname(char* name, int namelen, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(char* name, int namelen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::getnameinfo	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline boost::system::error_code getnameinfo(const socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const socket_addr_type* addr, std::size_t addrlen, char* host, std::size_t hostlen, char* serv, std::size_t servlen, int flags, boost::system::error_code& ec)
boost::asio::detail::socket_ops::getnameinfo_emulation	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline boost::system::error_code getnameinfo_emulation($/;"	f	namespace:boost::asio::detail::socket_ops	signature:( const socket_addr_type* sa, std::size_t salen, char* host, std::size_t hostlen, char* serv, std::size_t servlen, int flags, boost::system::error_code& ec)
boost::asio::detail::socket_ops::getpeername	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int getpeername(socket_type s, socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::getsockname	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int getsockname(socket_type s, socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::getsockopt	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int getsockopt(socket_type s, int level, int optname, void* optval,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, int level, int optname, void* optval, size_t* optlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::host_to_network_long	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline u_long_type host_to_network_long(u_long_type value)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(u_long_type value)
boost::asio::detail::socket_ops::host_to_network_short	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline u_short_type host_to_network_short(u_short_type value)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(u_short_type value)
boost::asio::detail::socket_ops::if_indextoname	/usr/include/boost/asio/detail/socket_ops.hpp	/^extern "C" char* if_indextoname(unsigned int, char*);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(unsigned int, char*)
boost::asio::detail::socket_ops::if_nametoindex	/usr/include/boost/asio/detail/socket_ops.hpp	/^extern "C" unsigned int if_nametoindex(const char*);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(const char*)
boost::asio::detail::socket_ops::inet_ntop	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline const char* inet_ntop(int af, const void* src, char* dest, size_t length,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int af, const void* src, char* dest, size_t length, unsigned long scope_id, boost::system::error_code& ec)
boost::asio::detail::socket_ops::inet_pton	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int inet_pton(int af, const char* src, void* dest,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int af, const char* src, void* dest, unsigned long* scope_id, boost::system::error_code& ec)
boost::asio::detail::socket_ops::init_buf	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void init_buf(buf& b, const void* data, size_t size)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(buf& b, const void* data, size_t size)
boost::asio::detail::socket_ops::init_buf	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void init_buf(buf& b, void* data, size_t size)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(buf& b, void* data, size_t size)
boost::asio::detail::socket_ops::init_buf_iov_base	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void init_buf_iov_base(T& base, void* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(T& base, void* addr)
boost::asio::detail::socket_ops::init_buf_iov_base	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void init_buf_iov_base(void*& base, void* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(void*& base, void* addr)
boost::asio::detail::socket_ops::init_msghdr_msg_name	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void init_msghdr_msg_name(T& name, const socket_addr_type* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(T& name, const socket_addr_type* addr)
boost::asio::detail::socket_ops::init_msghdr_msg_name	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void init_msghdr_msg_name(T& name, socket_addr_type* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(T& name, socket_addr_type* addr)
boost::asio::detail::socket_ops::init_msghdr_msg_name	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void init_msghdr_msg_name(void*& name, const socket_addr_type* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(void*& name, const socket_addr_type* addr)
boost::asio::detail::socket_ops::init_msghdr_msg_name	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void init_msghdr_msg_name(void*& name, socket_addr_type* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(void*& name, socket_addr_type* addr)
boost::asio::detail::socket_ops::ioctl	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int ioctl(socket_type s, long cmd, ioctl_arg_type* arg,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, long cmd, ioctl_arg_type* arg, boost::system::error_code& ec)
boost::asio::detail::socket_ops::listen	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int listen(socket_type s, int backlog, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, int backlog, boost::system::error_code& ec)
boost::asio::detail::socket_ops::msghdr	/usr/include/boost/asio/detail/socket_ops.hpp	/^struct msghdr { int msg_namelen; };$/;"	s	namespace:boost::asio::detail::socket_ops
boost::asio::detail::socket_ops::msghdr::msg_namelen	/usr/include/boost/asio/detail/socket_ops.hpp	/^struct msghdr { int msg_namelen; };$/;"	m	struct:boost::asio::detail::socket_ops::msghdr	access:public
boost::asio::detail::socket_ops::network_to_host_long	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline u_long_type network_to_host_long(u_long_type value)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(u_long_type value)
boost::asio::detail::socket_ops::network_to_host_short	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline u_short_type network_to_host_short(u_short_type value)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(u_short_type value)
boost::asio::detail::socket_ops::poll_connect	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int poll_connect(socket_type s, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
boost::asio::detail::socket_ops::poll_read	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int poll_read(socket_type s, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
boost::asio::detail::socket_ops::poll_write	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int poll_write(socket_type s, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
boost::asio::detail::socket_ops::recv	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int recv(socket_type s, buf* bufs, size_t count, int flags,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int flags, boost::system::error_code& ec)
boost::asio::detail::socket_ops::recvfrom	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int recvfrom(socket_type s, buf* bufs, size_t count, int flags,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int flags, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::select	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int select(int nfds, fd_set* readfds, fd_set* writefds,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, timeval* timeout, boost::system::error_code& ec)
boost::asio::detail::socket_ops::send	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int send(socket_type s, const buf* bufs, size_t count, int flags,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const buf* bufs, size_t count, int flags, boost::system::error_code& ec)
boost::asio::detail::socket_ops::sendto	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int sendto(socket_type s, const buf* bufs, size_t count, int flags,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const buf* bufs, size_t count, int flags, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::setsockopt	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int setsockopt(socket_type s, int level, int optname,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, int level, int optname, const void* optval, std::size_t optlen, boost::system::error_code& ec)
boost::asio::detail::socket_ops::shutdown	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int shutdown(socket_type s, int what, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, int what, boost::system::error_code& ec)
boost::asio::detail::socket_ops::socket	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline socket_type socket(int af, int type, int protocol,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int af, int type, int protocol, boost::system::error_code& ec)
boost::asio::detail::socket_ops::socketpair	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int socketpair(int af, int type, int protocol,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int af, int type, int protocol, socket_type sv[2], boost::system::error_code& ec)
boost::asio::detail::socket_ops::translate_addrinfo_error	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline boost::system::error_code translate_addrinfo_error(int error)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int error)
boost::asio::detail::socket_ops::translate_netdb_error	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline boost::system::error_code translate_netdb_error(int error)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int error)
boost::asio::detail::socket_option	/usr/include/boost/asio/detail/socket_option.hpp	/^namespace socket_option {$/;"	n	namespace:boost::asio::detail
boost::asio::detail::socket_option::boolean	/usr/include/boost/asio/detail/socket_option.hpp	/^class boolean$/;"	c	namespace:boost::asio::detail::socket_option
boost::asio::detail::socket_option::boolean::boolean	/usr/include/boost/asio/detail/socket_option.hpp	/^  boolean()$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:()
boost::asio::detail::socket_option::boolean::boolean	/usr/include/boost/asio/detail/socket_option.hpp	/^  explicit boolean(bool v)$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(bool v)
boost::asio::detail::socket_option::boolean::data	/usr/include/boost/asio/detail/socket_option.hpp	/^  const int* data(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::boolean::data	/usr/include/boost/asio/detail/socket_option.hpp	/^  int* data(const Protocol&)$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&)
boost::asio::detail::socket_option::boolean::level	/usr/include/boost/asio/detail/socket_option.hpp	/^  int level(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::boolean::name	/usr/include/boost/asio/detail/socket_option.hpp	/^  int name(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::boolean::operator !	/usr/include/boost/asio/detail/socket_option.hpp	/^  bool operator!() const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:() const
boost::asio::detail::socket_option::boolean::operator =	/usr/include/boost/asio/detail/socket_option.hpp	/^  boolean& operator=(bool v)$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(bool v)
boost::asio::detail::socket_option::boolean::operator bool	/usr/include/boost/asio/detail/socket_option.hpp	/^  operator bool() const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:() const
boost::asio::detail::socket_option::boolean::resize	/usr/include/boost/asio/detail/socket_option.hpp	/^  void resize(const Protocol&, std::size_t s)$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&, std::size_t s)
boost::asio::detail::socket_option::boolean::size	/usr/include/boost/asio/detail/socket_option.hpp	/^  std::size_t size(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::boolean::value	/usr/include/boost/asio/detail/socket_option.hpp	/^  bool value() const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:() const
boost::asio::detail::socket_option::boolean::value_	/usr/include/boost/asio/detail/socket_option.hpp	/^  int value_;$/;"	m	class:boost::asio::detail::socket_option::boolean	access:private
boost::asio::detail::socket_option::integer	/usr/include/boost/asio/detail/socket_option.hpp	/^class integer$/;"	c	namespace:boost::asio::detail::socket_option
boost::asio::detail::socket_option::integer::data	/usr/include/boost/asio/detail/socket_option.hpp	/^  const int* data(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::integer::data	/usr/include/boost/asio/detail/socket_option.hpp	/^  int* data(const Protocol&)$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&)
boost::asio::detail::socket_option::integer::integer	/usr/include/boost/asio/detail/socket_option.hpp	/^  explicit integer(int v)$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(int v)
boost::asio::detail::socket_option::integer::integer	/usr/include/boost/asio/detail/socket_option.hpp	/^  integer()$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:()
boost::asio::detail::socket_option::integer::level	/usr/include/boost/asio/detail/socket_option.hpp	/^  int level(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::integer::name	/usr/include/boost/asio/detail/socket_option.hpp	/^  int name(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::integer::operator =	/usr/include/boost/asio/detail/socket_option.hpp	/^  integer& operator=(int v)$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(int v)
boost::asio::detail::socket_option::integer::resize	/usr/include/boost/asio/detail/socket_option.hpp	/^  void resize(const Protocol&, std::size_t s)$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&, std::size_t s)
boost::asio::detail::socket_option::integer::size	/usr/include/boost/asio/detail/socket_option.hpp	/^  std::size_t size(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::integer::value	/usr/include/boost/asio/detail/socket_option.hpp	/^  int value() const$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:() const
boost::asio::detail::socket_option::integer::value_	/usr/include/boost/asio/detail/socket_option.hpp	/^  int value_;$/;"	m	class:boost::asio::detail::socket_option::integer	access:private
boost::asio::detail::socket_option::linger	/usr/include/boost/asio/detail/socket_option.hpp	/^class linger$/;"	c	namespace:boost::asio::detail::socket_option
boost::asio::detail::socket_option::linger::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/asio/detail/socket_option.hpp	/^  int timeout BOOST_PREVENT_MACRO_SUBSTITUTION() const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:() const
boost::asio::detail::socket_option::linger::BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/asio/detail/socket_option.hpp	/^  void timeout BOOST_PREVENT_MACRO_SUBSTITUTION(int value)$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(int value)
boost::asio::detail::socket_option::linger::data	/usr/include/boost/asio/detail/socket_option.hpp	/^  ::linger* data(const Protocol&)$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&)
boost::asio::detail::socket_option::linger::data	/usr/include/boost/asio/detail/socket_option.hpp	/^  const ::linger* data(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::linger::enabled	/usr/include/boost/asio/detail/socket_option.hpp	/^  bool enabled() const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:() const
boost::asio::detail::socket_option::linger::enabled	/usr/include/boost/asio/detail/socket_option.hpp	/^  void enabled(bool value)$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(bool value)
boost::asio::detail::socket_option::linger::level	/usr/include/boost/asio/detail/socket_option.hpp	/^  int level(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::linger::linger	/usr/include/boost/asio/detail/socket_option.hpp	/^  linger()$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:()
boost::asio::detail::socket_option::linger::linger	/usr/include/boost/asio/detail/socket_option.hpp	/^  linger(bool e, int t)$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(bool e, int t)
boost::asio::detail::socket_option::linger::name	/usr/include/boost/asio/detail/socket_option.hpp	/^  int name(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::linger::resize	/usr/include/boost/asio/detail/socket_option.hpp	/^  void resize(const Protocol&, std::size_t s)$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&, std::size_t s)
boost::asio::detail::socket_option::linger::size	/usr/include/boost/asio/detail/socket_option.hpp	/^  std::size_t size(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&) const
boost::asio::detail::socket_option::linger::value_	/usr/include/boost/asio/detail/socket_option.hpp	/^  ::linger value_;$/;"	m	class:boost::asio::detail::socket_option::linger	access:private
boost::asio::detail::socket_select_interrupter	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^class socket_select_interrupter$/;"	c	namespace:boost::asio::detail
boost::asio::detail::socket_select_interrupter::interrupt	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  void interrupt()$/;"	f	class:boost::asio::detail::socket_select_interrupter	access:public	signature:()
boost::asio::detail::socket_select_interrupter::read_descriptor	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  socket_type read_descriptor() const$/;"	f	class:boost::asio::detail::socket_select_interrupter	access:public	signature:() const
boost::asio::detail::socket_select_interrupter::read_descriptor_	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  socket_type read_descriptor_;$/;"	m	class:boost::asio::detail::socket_select_interrupter	access:private
boost::asio::detail::socket_select_interrupter::reset	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  bool reset()$/;"	f	class:boost::asio::detail::socket_select_interrupter	access:public	signature:()
boost::asio::detail::socket_select_interrupter::socket_select_interrupter	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  socket_select_interrupter()$/;"	f	class:boost::asio::detail::socket_select_interrupter	access:public	signature:()
boost::asio::detail::socket_select_interrupter::write_descriptor_	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  socket_type write_descriptor_;$/;"	m	class:boost::asio::detail::socket_select_interrupter	access:private
boost::asio::detail::socket_select_interrupter::~socket_select_interrupter	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  ~socket_select_interrupter()$/;"	f	class:boost::asio::detail::socket_select_interrupter	access:public	signature:()
boost::asio::detail::socket_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef SOCKET socket_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::strand_service	/usr/include/boost/asio/detail/strand_service.hpp	/^class strand_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::strand_service::construct	/usr/include/boost/asio/detail/strand_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::detail::strand_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::strand_service::destroy	/usr/include/boost/asio/detail/strand_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::detail::strand_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::strand_service::dispatch	/usr/include/boost/asio/detail/strand_service.hpp	/^  void dispatch(implementation_type& impl, Handler handler)$/;"	f	class:boost::asio::detail::strand_service	access:public	signature:(implementation_type& impl, Handler handler)
boost::asio::detail::strand_service::handler_base	/usr/include/boost/asio/detail/strand_service.hpp	/^  class handler_base$/;"	c	class:boost::asio::detail::strand_service	access:public
boost::asio::detail::strand_service::handler_base::destroy	/usr/include/boost/asio/detail/strand_service.hpp	/^    void destroy()$/;"	f	class:boost::asio::detail::strand_service::handler_base	access:public	signature:()
boost::asio::detail::strand_service::handler_base::destroy_func_	/usr/include/boost/asio/detail/strand_service.hpp	/^    destroy_func_type destroy_func_;$/;"	m	class:boost::asio::detail::strand_service::handler_base	access:private
boost::asio::detail::strand_service::handler_base::destroy_func_type	/usr/include/boost/asio/detail/strand_service.hpp	/^    typedef void (*destroy_func_type)(handler_base*);$/;"	t	class:boost::asio::detail::strand_service::handler_base	access:public
boost::asio::detail::strand_service::handler_base::handler_base	/usr/include/boost/asio/detail/strand_service.hpp	/^    handler_base(invoke_func_type invoke_func, destroy_func_type destroy_func)$/;"	f	class:boost::asio::detail::strand_service::handler_base	access:public	signature:(invoke_func_type invoke_func, destroy_func_type destroy_func)
boost::asio::detail::strand_service::handler_base::invoke	/usr/include/boost/asio/detail/strand_service.hpp	/^    void invoke(strand_service& service_impl, implementation_type& impl)$/;"	f	class:boost::asio::detail::strand_service::handler_base	access:public	signature:(strand_service& service_impl, implementation_type& impl)
boost::asio::detail::strand_service::handler_base::invoke_func_	/usr/include/boost/asio/detail/strand_service.hpp	/^    invoke_func_type invoke_func_;$/;"	m	class:boost::asio::detail::strand_service::handler_base	access:private
boost::asio::detail::strand_service::handler_base::invoke_func_type	/usr/include/boost/asio/detail/strand_service.hpp	/^    typedef void (*invoke_func_type)(handler_base*,$/;"	t	class:boost::asio::detail::strand_service::handler_base	access:public
boost::asio::detail::strand_service::handler_base::next_	/usr/include/boost/asio/detail/strand_service.hpp	/^    handler_base* next_;$/;"	m	class:boost::asio::detail::strand_service::handler_base	access:private
boost::asio::detail::strand_service::handler_base::~handler_base	/usr/include/boost/asio/detail/strand_service.hpp	/^    ~handler_base()$/;"	f	class:boost::asio::detail::strand_service::handler_base	access:protected	signature:()
boost::asio::detail::strand_service::handler_wrapper	/usr/include/boost/asio/detail/strand_service.hpp	/^  class handler_wrapper$/;"	c	class:boost::asio::detail::strand_service	inherits:handler_base	access:public
boost::asio::detail::strand_service::handler_wrapper::do_destroy	/usr/include/boost/asio/detail/strand_service.hpp	/^    static void do_destroy(handler_base* base)$/;"	f	class:boost::asio::detail::strand_service::handler_wrapper	access:public	signature:(handler_base* base)
boost::asio::detail::strand_service::handler_wrapper::do_invoke	/usr/include/boost/asio/detail/strand_service.hpp	/^    static void do_invoke(handler_base* base,$/;"	f	class:boost::asio::detail::strand_service::handler_wrapper	access:public	signature:(handler_base* base, strand_service& service_impl, implementation_type& impl)
boost::asio::detail::strand_service::handler_wrapper::handler_	/usr/include/boost/asio/detail/strand_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::detail::strand_service::handler_wrapper	access:private
boost::asio::detail::strand_service::handler_wrapper::handler_wrapper	/usr/include/boost/asio/detail/strand_service.hpp	/^    handler_wrapper(Handler handler)$/;"	f	class:boost::asio::detail::strand_service::handler_wrapper	access:public	signature:(Handler handler)
boost::asio::detail::strand_service::implementations_	/usr/include/boost/asio/detail/strand_service.hpp	/^  boost::scoped_ptr<strand_impl> implementations_[num_implementations];$/;"	m	class:boost::asio::detail::strand_service	access:private
boost::asio::detail::strand_service::implementation_type	/usr/include/boost/asio/detail/strand_service.hpp	/^  typedef strand_impl* implementation_type;$/;"	t	class:boost::asio::detail::strand_service	access:public
boost::asio::detail::strand_service::invoke_current_handler	/usr/include/boost/asio/detail/strand_service.hpp	/^  class invoke_current_handler$/;"	c	class:boost::asio::detail::strand_service	access:public
boost::asio::detail::strand_service::invoke_current_handler::asio_handler_allocate	/usr/include/boost/asio/detail/strand_service.hpp	/^    friend void* asio_handler_allocate(std::size_t size,$/;"	f	class:boost::asio::detail::strand_service::invoke_current_handler	access:friend	signature:(std::size_t size, invoke_current_handler* this_handler)
boost::asio::detail::strand_service::invoke_current_handler::asio_handler_deallocate	/usr/include/boost/asio/detail/strand_service.hpp	/^    friend void asio_handler_deallocate(void*, std::size_t,$/;"	f	class:boost::asio::detail::strand_service::invoke_current_handler	access:friend	signature:(void*, std::size_t, invoke_current_handler*)
boost::asio::detail::strand_service::invoke_current_handler::do_handler_allocate	/usr/include/boost/asio/detail/strand_service.hpp	/^    void* do_handler_allocate(std::size_t size)$/;"	f	class:boost::asio::detail::strand_service::invoke_current_handler	access:public	signature:(std::size_t size)
boost::asio::detail::strand_service::invoke_current_handler::impl_	/usr/include/boost/asio/detail/strand_service.hpp	/^    implementation_type impl_;$/;"	m	class:boost::asio::detail::strand_service::invoke_current_handler	access:private
boost::asio::detail::strand_service::invoke_current_handler::invoke_current_handler	/usr/include/boost/asio/detail/strand_service.hpp	/^    invoke_current_handler(strand_service& service_impl,$/;"	f	class:boost::asio::detail::strand_service::invoke_current_handler	access:public	signature:(strand_service& service_impl, const implementation_type& impl)
boost::asio::detail::strand_service::invoke_current_handler::operator ()	/usr/include/boost/asio/detail/strand_service.hpp	/^    void operator()()$/;"	f	class:boost::asio::detail::strand_service::invoke_current_handler	access:public	signature:()
boost::asio::detail::strand_service::invoke_current_handler::service_impl_	/usr/include/boost/asio/detail/strand_service.hpp	/^    strand_service& service_impl_;$/;"	m	class:boost::asio::detail::strand_service::invoke_current_handler	access:private
boost::asio::detail::strand_service::mutex_	/usr/include/boost/asio/detail/strand_service.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::strand_service	access:private
boost::asio::detail::strand_service::num_implementations	/usr/include/boost/asio/detail/strand_service.hpp	/^  enum { num_implementations = 193 };$/;"	e	enum:boost::asio::detail::strand_service::__anon18
boost::asio::detail::strand_service::post	/usr/include/boost/asio/detail/strand_service.hpp	/^  void post(implementation_type& impl, Handler handler)$/;"	f	class:boost::asio::detail::strand_service	access:public	signature:(implementation_type& impl, Handler handler)
boost::asio::detail::strand_service::post_next_waiter_on_exit	/usr/include/boost/asio/detail/strand_service.hpp	/^  class post_next_waiter_on_exit$/;"	c	class:boost::asio::detail::strand_service	access:public
boost::asio::detail::strand_service::post_next_waiter_on_exit::cancel	/usr/include/boost/asio/detail/strand_service.hpp	/^    void cancel()$/;"	f	class:boost::asio::detail::strand_service::post_next_waiter_on_exit	access:public	signature:()
boost::asio::detail::strand_service::post_next_waiter_on_exit::cancelled_	/usr/include/boost/asio/detail/strand_service.hpp	/^    bool cancelled_;$/;"	m	class:boost::asio::detail::strand_service::post_next_waiter_on_exit	access:private
boost::asio::detail::strand_service::post_next_waiter_on_exit::impl_	/usr/include/boost/asio/detail/strand_service.hpp	/^    implementation_type& impl_;$/;"	m	class:boost::asio::detail::strand_service::post_next_waiter_on_exit	access:private
boost::asio::detail::strand_service::post_next_waiter_on_exit::post_next_waiter_on_exit	/usr/include/boost/asio/detail/strand_service.hpp	/^    post_next_waiter_on_exit(strand_service& service_impl,$/;"	f	class:boost::asio::detail::strand_service::post_next_waiter_on_exit	access:public	signature:(strand_service& service_impl, implementation_type& impl)
boost::asio::detail::strand_service::post_next_waiter_on_exit::service_impl_	/usr/include/boost/asio/detail/strand_service.hpp	/^    strand_service& service_impl_;$/;"	m	class:boost::asio::detail::strand_service::post_next_waiter_on_exit	access:private
boost::asio::detail::strand_service::post_next_waiter_on_exit::~post_next_waiter_on_exit	/usr/include/boost/asio/detail/strand_service.hpp	/^    ~post_next_waiter_on_exit()$/;"	f	class:boost::asio::detail::strand_service::post_next_waiter_on_exit	access:public	signature:()
boost::asio::detail::strand_service::salt_	/usr/include/boost/asio/detail/strand_service.hpp	/^  std::size_t salt_;$/;"	m	class:boost::asio::detail::strand_service	access:private
boost::asio::detail::strand_service::shutdown_service	/usr/include/boost/asio/detail/strand_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::strand_service	access:public	signature:()
boost::asio::detail::strand_service::strand_impl	/usr/include/boost/asio/detail/strand_service.hpp	/^  class strand_impl$/;"	c	class:boost::asio::detail::strand_service	access:public
boost::asio::detail::strand_service::strand_impl::current_handler_	/usr/include/boost/asio/detail/strand_service.hpp	/^    handler_base* current_handler_;$/;"	m	class:boost::asio::detail::strand_service::strand_impl	access:private
boost::asio::detail::strand_service::strand_impl::first_waiter_	/usr/include/boost/asio/detail/strand_service.hpp	/^    handler_base* first_waiter_;$/;"	m	class:boost::asio::detail::strand_service::strand_impl	access:private
boost::asio::detail::strand_service::strand_impl::handler_storage_	/usr/include/boost/asio/detail/strand_service.hpp	/^    boost::aligned_storage<128> handler_storage_;$/;"	m	class:boost::asio::detail::strand_service::strand_impl	access:private
boost::asio::detail::strand_service::strand_impl::handler_storage_	/usr/include/boost/asio/detail/strand_service.hpp	/^    handler_storage_type handler_storage_;$/;"	m	class:boost::asio::detail::strand_service::strand_impl	access:private
boost::asio::detail::strand_service::strand_impl::handler_storage_type	/usr/include/boost/asio/detail/strand_service.hpp	/^    typedef boost::aligned_storage<128> handler_storage_type;$/;"	t	class:boost::asio::detail::strand_service::strand_impl	access:private
boost::asio::detail::strand_service::strand_impl::last_waiter_	/usr/include/boost/asio/detail/strand_service.hpp	/^    handler_base* last_waiter_;$/;"	m	class:boost::asio::detail::strand_service::strand_impl	access:private
boost::asio::detail::strand_service::strand_impl::mutex_	/usr/include/boost/asio/detail/strand_service.hpp	/^    boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::strand_service::strand_impl	access:private
boost::asio::detail::strand_service::strand_impl::strand_impl	/usr/include/boost/asio/detail/strand_service.hpp	/^    strand_impl()$/;"	f	class:boost::asio::detail::strand_service::strand_impl	access:public	signature:()
boost::asio::detail::strand_service::strand_service	/usr/include/boost/asio/detail/strand_service.hpp	/^  explicit strand_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::strand_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::task_io_service	/usr/include/boost/asio/detail/task_io_service.hpp	/^class task_io_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::task_io_service	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^class task_io_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::task_io_service::back_first_idle_thread_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  idle_thread_info* back_first_idle_thread_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::back_mutex_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  boost::asio::detail::mutex back_mutex_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::back_shutdown_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  bool back_shutdown_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::back_stopped_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  bool back_stopped_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::back_task_thread_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  idle_thread_info* back_task_thread_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::dispatch	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void dispatch(Handler handler)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(Handler handler)
boost::asio::detail::task_io_service::dispatch	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void dispatch(Handler handler)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(Handler handler)
boost::asio::detail::task_io_service::do_one	/usr/include/boost/asio/detail/task_io_service.hpp	/^  size_t do_one(boost::asio::detail::mutex::scoped_lock& lock,$/;"	f	class:boost::asio::detail::task_io_service	access:private	signature:(boost::asio::detail::mutex::scoped_lock& lock, idle_thread_info* this_idle_thread, boost::system::error_code& ec)
boost::asio::detail::task_io_service::do_one	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  size_t do_one(idle_thread_info* this_idle_thread,$/;"	f	class:boost::asio::detail::task_io_service	access:private	signature:(idle_thread_info* this_idle_thread, boost::system::error_code& ec)
boost::asio::detail::task_io_service::first_idle_thread_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  idle_thread_info* first_idle_thread_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::front_mutex_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  boost::asio::detail::mutex front_mutex_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::front_stopped_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  bool front_stopped_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::handler_cleanup	/usr/include/boost/asio/detail/task_io_service.hpp	/^  class handler_cleanup$/;"	c	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::handler_cleanup	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  class handler_cleanup$/;"	c	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::handler_cleanup::handler_cleanup	/usr/include/boost/asio/detail/task_io_service.hpp	/^    handler_cleanup(boost::asio::detail::mutex::scoped_lock& lock,$/;"	f	class:boost::asio::detail::task_io_service::handler_cleanup	access:public	signature:(boost::asio::detail::mutex::scoped_lock& lock, task_io_service& task_io_svc)
boost::asio::detail::task_io_service::handler_cleanup::handler_cleanup	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^    handler_cleanup(task_io_service& task_io_svc)$/;"	f	class:boost::asio::detail::task_io_service::handler_cleanup	access:public	signature:(task_io_service& task_io_svc)
boost::asio::detail::task_io_service::handler_cleanup::lock_	/usr/include/boost/asio/detail/task_io_service.hpp	/^    boost::asio::detail::mutex::scoped_lock& lock_;$/;"	m	class:boost::asio::detail::task_io_service::handler_cleanup	access:private
boost::asio::detail::task_io_service::handler_cleanup::task_io_service_	/usr/include/boost/asio/detail/task_io_service.hpp	/^    task_io_service& task_io_service_;$/;"	m	class:boost::asio::detail::task_io_service::handler_cleanup	access:private
boost::asio::detail::task_io_service::handler_cleanup::task_io_service_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^    task_io_service& task_io_service_;$/;"	m	class:boost::asio::detail::task_io_service::handler_cleanup	access:private
boost::asio::detail::task_io_service::handler_cleanup::~handler_cleanup	/usr/include/boost/asio/detail/task_io_service.hpp	/^    ~handler_cleanup()$/;"	f	class:boost::asio::detail::task_io_service::handler_cleanup	access:public	signature:()
boost::asio::detail::task_io_service::handler_cleanup::~handler_cleanup	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^    ~handler_cleanup()$/;"	f	class:boost::asio::detail::task_io_service::handler_cleanup	access:public	signature:()
boost::asio::detail::task_io_service::handler_queue	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  typedef indirect_handler_queue handler_queue;$/;"	t	class:boost::asio::detail::task_io_service	access:public
boost::asio::detail::task_io_service::handler_queue_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  handler_queue handler_queue_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::handler_queue_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  handler_queue handler_queue_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::idle_thread_info	/usr/include/boost/asio/detail/task_io_service.hpp	/^  struct idle_thread_info$/;"	s	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::idle_thread_info	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  struct idle_thread_info$/;"	s	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::idle_thread_info::next	/usr/include/boost/asio/detail/task_io_service.hpp	/^    idle_thread_info* next;$/;"	m	struct:boost::asio::detail::task_io_service::idle_thread_info	access:public
boost::asio::detail::task_io_service::idle_thread_info::next	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^    idle_thread_info* next;$/;"	m	struct:boost::asio::detail::task_io_service::idle_thread_info	access:public
boost::asio::detail::task_io_service::idle_thread_info::wakeup_event	/usr/include/boost/asio/detail/task_io_service.hpp	/^    event wakeup_event;$/;"	m	struct:boost::asio::detail::task_io_service::idle_thread_info	access:public
boost::asio::detail::task_io_service::idle_thread_info::wakeup_event	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^    event wakeup_event;$/;"	m	struct:boost::asio::detail::task_io_service::idle_thread_info	access:public
boost::asio::detail::task_io_service::init	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void init(size_t \/*concurrency_hint*\/)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(size_t )
boost::asio::detail::task_io_service::init	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void init(size_t \/*concurrency_hint*\/)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(size_t )
boost::asio::detail::task_io_service::init_task	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void init_task()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
boost::asio::detail::task_io_service::init_task	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void init_task()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
boost::asio::detail::task_io_service::interrupt_all_idle_threads	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void interrupt_all_idle_threads($/;"	f	class:boost::asio::detail::task_io_service	access:private	signature:( boost::asio::detail::mutex::scoped_lock& lock)
boost::asio::detail::task_io_service::interrupt_all_idle_threads	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void interrupt_all_idle_threads($/;"	f	class:boost::asio::detail::task_io_service	access:private	signature:( boost::asio::detail::mutex::scoped_lock& back_lock)
boost::asio::detail::task_io_service::interrupt_one_idle_thread	/usr/include/boost/asio/detail/task_io_service.hpp	/^  bool interrupt_one_idle_thread($/;"	f	class:boost::asio::detail::task_io_service	access:private	signature:( boost::asio::detail::mutex::scoped_lock& lock)
boost::asio::detail::task_io_service::interrupt_one_idle_thread	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void interrupt_one_idle_thread($/;"	f	class:boost::asio::detail::task_io_service	access:private	signature:( boost::asio::detail::mutex::scoped_lock& back_lock)
boost::asio::detail::task_io_service::mutex_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::outstanding_work_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  int outstanding_work_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::outstanding_work_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  boost::detail::atomic_count outstanding_work_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::poll	/usr/include/boost/asio/detail/task_io_service.hpp	/^  size_t poll(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::task_io_service::poll	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  size_t poll(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::task_io_service::poll_one	/usr/include/boost/asio/detail/task_io_service.hpp	/^  size_t poll_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::task_io_service::poll_one	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  size_t poll_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::task_io_service::post	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void post(Handler handler)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(Handler handler)
boost::asio::detail::task_io_service::post	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void post(Handler handler)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(Handler handler)
boost::asio::detail::task_io_service::reset	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
boost::asio::detail::task_io_service::reset	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
boost::asio::detail::task_io_service::run	/usr/include/boost/asio/detail/task_io_service.hpp	/^  size_t run(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::task_io_service::run	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  size_t run(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::task_io_service::run_one	/usr/include/boost/asio/detail/task_io_service.hpp	/^  size_t run_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::task_io_service::run_one	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  size_t run_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::task_io_service::shutdown_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::shutdown_service	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
boost::asio::detail::task_io_service::shutdown_service	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
boost::asio::detail::task_io_service::stop	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void stop()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
boost::asio::detail::task_io_service::stop	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void stop()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
boost::asio::detail::task_io_service::stopped_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  bool stopped_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::stop_all_threads	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void stop_all_threads($/;"	f	class:boost::asio::detail::task_io_service	access:private	signature:( boost::asio::detail::mutex::scoped_lock& lock)
boost::asio::detail::task_io_service::task_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  Task* task_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::task_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  Task* task_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::task_cleanup	/usr/include/boost/asio/detail/task_io_service.hpp	/^  class task_cleanup$/;"	c	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::task_cleanup	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  class task_cleanup$/;"	c	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::task_cleanup::lock_	/usr/include/boost/asio/detail/task_io_service.hpp	/^    boost::asio::detail::mutex::scoped_lock& lock_;$/;"	m	class:boost::asio::detail::task_io_service::task_cleanup	access:private
boost::asio::detail::task_io_service::task_cleanup::task_cleanup	/usr/include/boost/asio/detail/task_io_service.hpp	/^    task_cleanup(boost::asio::detail::mutex::scoped_lock& lock,$/;"	f	class:boost::asio::detail::task_io_service::task_cleanup	access:public	signature:(boost::asio::detail::mutex::scoped_lock& lock, task_io_service& task_io_svc)
boost::asio::detail::task_io_service::task_cleanup::task_cleanup	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^    task_cleanup(task_io_service& task_io_svc)$/;"	f	class:boost::asio::detail::task_io_service::task_cleanup	access:public	signature:(task_io_service& task_io_svc)
boost::asio::detail::task_io_service::task_cleanup::task_io_service_	/usr/include/boost/asio/detail/task_io_service.hpp	/^    task_io_service& task_io_service_;$/;"	m	class:boost::asio::detail::task_io_service::task_cleanup	access:private
boost::asio::detail::task_io_service::task_cleanup::task_io_service_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^    task_io_service& task_io_service_;$/;"	m	class:boost::asio::detail::task_io_service::task_cleanup	access:private
boost::asio::detail::task_io_service::task_cleanup::~task_cleanup	/usr/include/boost/asio/detail/task_io_service.hpp	/^    ~task_cleanup()$/;"	f	class:boost::asio::detail::task_io_service::task_cleanup	access:public	signature:()
boost::asio::detail::task_io_service::task_cleanup::~task_cleanup	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^    ~task_cleanup()$/;"	f	class:boost::asio::detail::task_io_service::task_cleanup	access:public	signature:()
boost::asio::detail::task_io_service::task_handler	/usr/include/boost/asio/detail/task_io_service.hpp	/^  class task_handler$/;"	c	class:boost::asio::detail::task_io_service	inherits:handler_queue::handler	access:private
boost::asio::detail::task_io_service::task_handler	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  class task_handler$/;"	c	class:boost::asio::detail::task_io_service	inherits:handler_queue::handler	access:private
boost::asio::detail::task_io_service::task_handler::task_handler	/usr/include/boost/asio/detail/task_io_service.hpp	/^    task_handler()$/;"	f	class:boost::asio::detail::task_io_service::task_handler	access:public	signature:()
boost::asio::detail::task_io_service::task_handler::task_handler	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^    task_handler()$/;"	f	class:boost::asio::detail::task_io_service::task_handler	access:public	signature:()
boost::asio::detail::task_io_service::task_handler_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  } task_handler_;$/;"	m	class:boost::asio::detail::task_io_service	typeref:class:boost::asio::detail::task_io_service::task_handler	access:private
boost::asio::detail::task_io_service::task_handler_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  } task_handler_;$/;"	m	class:boost::asio::detail::task_io_service	typeref:class:boost::asio::detail::task_io_service::task_handler	access:private
boost::asio::detail::task_io_service::task_interrupted_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  bool task_interrupted_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
boost::asio::detail::task_io_service::task_io_service	/usr/include/boost/asio/detail/task_io_service.hpp	/^  task_io_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::task_io_service::task_io_service	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  task_io_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::task_io_service::work_finished	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void work_finished()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
boost::asio::detail::task_io_service::work_finished	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void work_finished()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
boost::asio::detail::task_io_service::work_started	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void work_started()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
boost::asio::detail::task_io_service::work_started	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void work_started()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
boost::asio::detail::thread	/usr/include/boost/asio/detail/thread.hpp	/^typedef null_thread thread;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::throw_error	/usr/include/boost/asio/detail/throw_error.hpp	/^inline void throw_error(const boost::system::error_code& err)$/;"	f	namespace:boost::asio::detail	signature:(const boost::system::error_code& err)
boost::asio::detail::timer_queue	/usr/include/boost/asio/detail/timer_queue.hpp	/^class timer_queue$/;"	c	namespace:boost::asio::detail	inherits:timer_queue_base
boost::asio::detail::timer_queue::cancelled_timers_	/usr/include/boost/asio/detail/timer_queue.hpp	/^  timer_base* cancelled_timers_;$/;"	m	class:boost::asio::detail::timer_queue	access:private
boost::asio::detail::timer_queue::cancel_timer	/usr/include/boost/asio/detail/timer_queue.hpp	/^  std::size_t cancel_timer(void* timer_token)$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:(void* timer_token)
boost::asio::detail::timer_queue::complete_timers	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual void complete_timers()$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:()
boost::asio::detail::timer_queue::complete_timers_	/usr/include/boost/asio/detail/timer_queue.hpp	/^  timer_base* complete_timers_;$/;"	m	class:boost::asio::detail::timer_queue	access:private
boost::asio::detail::timer_queue::destroy_timers	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual void destroy_timers()$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:()
boost::asio::detail::timer_queue::destroy_timer_list	/usr/include/boost/asio/detail/timer_queue.hpp	/^  void destroy_timer_list(timer_base*& t)$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(timer_base*& t)
boost::asio::detail::timer_queue::dispatch_cancellations	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual void dispatch_cancellations()$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:()
boost::asio::detail::timer_queue::dispatch_timers	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual void dispatch_timers()$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:()
boost::asio::detail::timer_queue::down_heap	/usr/include/boost/asio/detail/timer_queue.hpp	/^  void down_heap(size_t index)$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(size_t index)
boost::asio::detail::timer_queue::duration_type	/usr/include/boost/asio/detail/timer_queue.hpp	/^  typedef typename Time_Traits::duration_type duration_type;$/;"	t	class:boost::asio::detail::timer_queue	access:public
boost::asio::detail::timer_queue::empty	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual bool empty() const$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:() const
boost::asio::detail::timer_queue::enqueue_timer	/usr/include/boost/asio/detail/timer_queue.hpp	/^  bool enqueue_timer(const time_type& time, Handler handler, void* token)$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:(const time_type& time, Handler handler, void* token)
boost::asio::detail::timer_queue::heap_	/usr/include/boost/asio/detail/timer_queue.hpp	/^  std::vector<timer_base*> heap_;$/;"	m	class:boost::asio::detail::timer_queue	access:private
boost::asio::detail::timer_queue::remove_timer	/usr/include/boost/asio/detail/timer_queue.hpp	/^  void remove_timer(timer_base* t)$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(timer_base* t)
boost::asio::detail::timer_queue::swap_heap	/usr/include/boost/asio/detail/timer_queue.hpp	/^  void swap_heap(size_t index1, size_t index2)$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(size_t index1, size_t index2)
boost::asio::detail::timer_queue::timer	/usr/include/boost/asio/detail/timer_queue.hpp	/^  class timer$/;"	c	class:boost::asio::detail::timer_queue	inherits:timer_base	access:private
boost::asio::detail::timer_queue::timer::complete_handler	/usr/include/boost/asio/detail/timer_queue.hpp	/^    static void complete_handler(timer_base* base,$/;"	f	class:boost::asio::detail::timer_queue::timer	access:public	signature:(timer_base* base, const boost::system::error_code& result)
boost::asio::detail::timer_queue::timer::destroy_handler	/usr/include/boost/asio/detail/timer_queue.hpp	/^    static void destroy_handler(timer_base* base)$/;"	f	class:boost::asio::detail::timer_queue::timer	access:public	signature:(timer_base* base)
boost::asio::detail::timer_queue::timer::handler_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::detail::timer_queue::timer	access:private
boost::asio::detail::timer_queue::timer::timer	/usr/include/boost/asio/detail/timer_queue.hpp	/^    timer(const time_type& time, Handler handler, void* token)$/;"	f	class:boost::asio::detail::timer_queue::timer	access:public	signature:(const time_type& time, Handler handler, void* token)
boost::asio::detail::timer_queue::timers_	/usr/include/boost/asio/detail/timer_queue.hpp	/^  hash_map<void*, timer_base*> timers_;$/;"	m	class:boost::asio::detail::timer_queue	access:private
boost::asio::detail::timer_queue::timer_base	/usr/include/boost/asio/detail/timer_queue.hpp	/^  class timer_base$/;"	c	class:boost::asio::detail::timer_queue	access:private
boost::asio::detail::timer_queue::timer_base::complete	/usr/include/boost/asio/detail/timer_queue.hpp	/^    void complete()$/;"	f	class:boost::asio::detail::timer_queue::timer_base	access:public	signature:()
boost::asio::detail::timer_queue::timer_base::complete_func_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    complete_func_type complete_func_;$/;"	m	class:boost::asio::detail::timer_queue::timer_base	access:private
boost::asio::detail::timer_queue::timer_base::complete_func_type	/usr/include/boost/asio/detail/timer_queue.hpp	/^    typedef void (*complete_func_type)(timer_base*,$/;"	t	class:boost::asio::detail::timer_queue::timer_base	access:protected
boost::asio::detail::timer_queue::timer_base::destroy	/usr/include/boost/asio/detail/timer_queue.hpp	/^    void destroy()$/;"	f	class:boost::asio::detail::timer_queue::timer_base	access:public	signature:()
boost::asio::detail::timer_queue::timer_base::destroy_func_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    destroy_func_type destroy_func_;$/;"	m	class:boost::asio::detail::timer_queue::timer_base	access:private
boost::asio::detail::timer_queue::timer_base::destroy_func_type	/usr/include/boost/asio/detail/timer_queue.hpp	/^    typedef void (*destroy_func_type)(timer_base*);$/;"	t	class:boost::asio::detail::timer_queue::timer_base	access:protected
boost::asio::detail::timer_queue::timer_base::heap_index_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    size_t heap_index_;$/;"	m	class:boost::asio::detail::timer_queue::timer_base	access:private
boost::asio::detail::timer_queue::timer_base::next_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    timer_base* next_;$/;"	m	class:boost::asio::detail::timer_queue::timer_base	access:private
boost::asio::detail::timer_queue::timer_base::prev_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    timer_base* prev_;$/;"	m	class:boost::asio::detail::timer_queue::timer_base	access:private
boost::asio::detail::timer_queue::timer_base::result_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    boost::system::error_code result_;$/;"	m	class:boost::asio::detail::timer_queue::timer_base	access:private
boost::asio::detail::timer_queue::timer_base::timer_base	/usr/include/boost/asio/detail/timer_queue.hpp	/^    timer_base(complete_func_type complete_func, destroy_func_type destroy_func,$/;"	f	class:boost::asio::detail::timer_queue::timer_base	access:protected	signature:(complete_func_type complete_func, destroy_func_type destroy_func, const time_type& time, void* token)
boost::asio::detail::timer_queue::timer_base::time_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    time_type time_;$/;"	m	class:boost::asio::detail::timer_queue::timer_base	access:private
boost::asio::detail::timer_queue::timer_base::token_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    void* token_;$/;"	m	class:boost::asio::detail::timer_queue::timer_base	access:private
boost::asio::detail::timer_queue::timer_base::~timer_base	/usr/include/boost/asio/detail/timer_queue.hpp	/^    ~timer_base()$/;"	f	class:boost::asio::detail::timer_queue::timer_base	access:protected	signature:()
boost::asio::detail::timer_queue::timer_queue	/usr/include/boost/asio/detail/timer_queue.hpp	/^  timer_queue()$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:()
boost::asio::detail::timer_queue::time_type	/usr/include/boost/asio/detail/timer_queue.hpp	/^  typedef typename Time_Traits::time_type time_type;$/;"	t	class:boost::asio::detail::timer_queue	access:public
boost::asio::detail::timer_queue::up_heap	/usr/include/boost/asio/detail/timer_queue.hpp	/^  void up_heap(size_t index)$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(size_t index)
boost::asio::detail::timer_queue::wait_duration	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual boost::posix_time::time_duration wait_duration() const$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:() const
boost::asio::detail::timer_queue_base	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^class timer_queue_base$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::timer_queue_base::complete_timers	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual void complete_timers() = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:()
boost::asio::detail::timer_queue_base::destroy_timers	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual void destroy_timers() = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:()
boost::asio::detail::timer_queue_base::dispatch_cancellations	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual void dispatch_cancellations() = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:()
boost::asio::detail::timer_queue_base::dispatch_timers	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual void dispatch_timers() = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:()
boost::asio::detail::timer_queue_base::empty	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual bool empty() const = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:() const
boost::asio::detail::timer_queue_base::wait_duration	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual boost::posix_time::time_duration wait_duration() const = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:() const
boost::asio::detail::timer_queue_base::~timer_queue_base	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual ~timer_queue_base() {}$/;"	f	class:boost::asio::detail::timer_queue_base	access:public	signature:()
boost::asio::detail::transfer_all_t	/usr/include/boost/asio/completion_condition.hpp	/^class transfer_all_t$/;"	c	namespace:boost::asio::detail
boost::asio::detail::transfer_all_t::operator ()	/usr/include/boost/asio/completion_condition.hpp	/^  std::size_t operator()(const Error& err, std::size_t)$/;"	f	class:boost::asio::detail::transfer_all_t	access:public	signature:(const Error& err, std::size_t)
boost::asio::detail::transfer_all_t::result_type	/usr/include/boost/asio/completion_condition.hpp	/^  typedef std::size_t result_type;$/;"	t	class:boost::asio::detail::transfer_all_t	access:public
boost::asio::detail::transfer_at_least_t	/usr/include/boost/asio/completion_condition.hpp	/^class transfer_at_least_t$/;"	c	namespace:boost::asio::detail
boost::asio::detail::transfer_at_least_t::minimum_	/usr/include/boost/asio/completion_condition.hpp	/^  std::size_t minimum_;$/;"	m	class:boost::asio::detail::transfer_at_least_t	access:private
boost::asio::detail::transfer_at_least_t::operator ()	/usr/include/boost/asio/completion_condition.hpp	/^  std::size_t operator()(const Error& err, std::size_t bytes_transferred)$/;"	f	class:boost::asio::detail::transfer_at_least_t	access:public	signature:(const Error& err, std::size_t bytes_transferred)
boost::asio::detail::transfer_at_least_t::result_type	/usr/include/boost/asio/completion_condition.hpp	/^  typedef std::size_t result_type;$/;"	t	class:boost::asio::detail::transfer_at_least_t	access:public
boost::asio::detail::transfer_at_least_t::transfer_at_least_t	/usr/include/boost/asio/completion_condition.hpp	/^  explicit transfer_at_least_t(std::size_t minimum)$/;"	f	class:boost::asio::detail::transfer_at_least_t	access:public	signature:(std::size_t minimum)
boost::asio::detail::tss_ptr	/usr/include/boost/asio/detail/tss_ptr.hpp	/^class tss_ptr$/;"	c	namespace:boost::asio::detail	inherits:null_tss_ptr
boost::asio::detail::tss_ptr::operator =	/usr/include/boost/asio/detail/tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:boost::asio::detail::tss_ptr	access:public	signature:(T* value)
boost::asio::detail::typeid_wrapper	/usr/include/boost/asio/detail/service_registry.hpp	/^class typeid_wrapper {};$/;"	c	namespace:boost::asio::detail
boost::asio::detail::u_long_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef u_long u_long_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::u_short_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef u_short u_short_type;$/;"	t	namespace:boost::asio::detail
boost::asio::detail::wince_thread	/usr/include/boost/asio/detail/wince_thread.hpp	/^class wince_thread$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::wince_thread::func	/usr/include/boost/asio/detail/wince_thread.hpp	/^  class func$/;"	c	class:boost::asio::detail::wince_thread	inherits:func_base	access:private
boost::asio::detail::wince_thread::func::func	/usr/include/boost/asio/detail/wince_thread.hpp	/^    func(Function f)$/;"	f	class:boost::asio::detail::wince_thread::func	access:public	signature:(Function f)
boost::asio::detail::wince_thread::func::f_	/usr/include/boost/asio/detail/wince_thread.hpp	/^    Function f_;$/;"	m	class:boost::asio::detail::wince_thread::func	access:private
boost::asio::detail::wince_thread::func::run	/usr/include/boost/asio/detail/wince_thread.hpp	/^    virtual void run()$/;"	f	class:boost::asio::detail::wince_thread::func	access:public	signature:()
boost::asio::detail::wince_thread::func_base	/usr/include/boost/asio/detail/wince_thread.hpp	/^  class func_base$/;"	c	class:boost::asio::detail::wince_thread	access:private
boost::asio::detail::wince_thread::func_base::run	/usr/include/boost/asio/detail/wince_thread.hpp	/^    virtual void run() = 0;$/;"	p	class:boost::asio::detail::wince_thread::func_base	access:public	signature:()
boost::asio::detail::wince_thread::func_base::~func_base	/usr/include/boost/asio/detail/wince_thread.hpp	/^    virtual ~func_base() {}$/;"	f	class:boost::asio::detail::wince_thread::func_base	access:public	signature:()
boost::asio::detail::wince_thread::join	/usr/include/boost/asio/detail/wince_thread.hpp	/^  void join()$/;"	f	class:boost::asio::detail::wince_thread	access:public	signature:()
boost::asio::detail::wince_thread::thread_	/usr/include/boost/asio/detail/wince_thread.hpp	/^  ::HANDLE thread_;$/;"	m	class:boost::asio::detail::wince_thread	access:private
boost::asio::detail::wince_thread::wince_thread	/usr/include/boost/asio/detail/wince_thread.hpp	/^  wince_thread(Function f)$/;"	f	class:boost::asio::detail::wince_thread	access:public	signature:(Function f)
boost::asio::detail::wince_thread::wince_thread_function	/usr/include/boost/asio/detail/wince_thread.hpp	/^  friend DWORD WINAPI wince_thread_function(LPVOID arg);$/;"	p	class:boost::asio::detail::wince_thread	access:friend	signature:(LPVOID arg)
boost::asio::detail::wince_thread::~wince_thread	/usr/include/boost/asio/detail/wince_thread.hpp	/^  ~wince_thread()$/;"	f	class:boost::asio::detail::wince_thread	access:public	signature:()
boost::asio::detail::wince_thread_function	/usr/include/boost/asio/detail/wince_thread.hpp	/^DWORD WINAPI wince_thread_function(LPVOID arg);$/;"	p	namespace:boost::asio::detail	signature:(LPVOID arg)
boost::asio::detail::wince_thread_function	/usr/include/boost/asio/detail/wince_thread.hpp	/^inline DWORD WINAPI wince_thread_function(LPVOID arg)$/;"	f	namespace:boost::asio::detail	signature:(LPVOID arg)
boost::asio::detail::winsock_init	/usr/include/boost/asio/detail/winsock_init.hpp	/^class winsock_init$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::winsock_init::do_init	/usr/include/boost/asio/detail/winsock_init.hpp	/^  struct do_init$/;"	s	class:boost::asio::detail::winsock_init	access:private
boost::asio::detail::winsock_init::do_init::do_init	/usr/include/boost/asio/detail/winsock_init.hpp	/^    do_init()$/;"	f	struct:boost::asio::detail::winsock_init::do_init	access:public	signature:()
boost::asio::detail::winsock_init::do_init::instance	/usr/include/boost/asio/detail/winsock_init.hpp	/^    static boost::shared_ptr<do_init> instance()$/;"	f	struct:boost::asio::detail::winsock_init::do_init	access:public	signature:()
boost::asio::detail::winsock_init::do_init::result	/usr/include/boost/asio/detail/winsock_init.hpp	/^    int result() const$/;"	f	struct:boost::asio::detail::winsock_init::do_init	access:public	signature:() const
boost::asio::detail::winsock_init::do_init::result_	/usr/include/boost/asio/detail/winsock_init.hpp	/^    int result_;$/;"	m	struct:boost::asio::detail::winsock_init::do_init	access:private
boost::asio::detail::winsock_init::do_init::~do_init	/usr/include/boost/asio/detail/winsock_init.hpp	/^    ~do_init()$/;"	f	struct:boost::asio::detail::winsock_init::do_init	access:public	signature:()
boost::asio::detail::winsock_init::instance_	/usr/include/boost/asio/detail/winsock_init.hpp	/^  static winsock_init instance_;$/;"	m	class:boost::asio::detail::winsock_init	access:private
boost::asio::detail::winsock_init::instance_	/usr/include/boost/asio/detail/winsock_init.hpp	/^winsock_init<Major, Minor> winsock_init<Major, Minor>::instance_;$/;"	m	class:boost::asio::detail::winsock_init
boost::asio::detail::winsock_init::ref_	/usr/include/boost/asio/detail/winsock_init.hpp	/^  boost::shared_ptr<do_init> ref_;$/;"	m	class:boost::asio::detail::winsock_init	access:private
boost::asio::detail::winsock_init::winsock_init	/usr/include/boost/asio/detail/winsock_init.hpp	/^  winsock_init()$/;"	f	class:boost::asio::detail::winsock_init	access:public	signature:()
boost::asio::detail::winsock_init::~winsock_init	/usr/include/boost/asio/detail/winsock_init.hpp	/^  ~winsock_init()$/;"	f	class:boost::asio::detail::winsock_init	access:public	signature:()
boost::asio::detail::win_event	/usr/include/boost/asio/detail/win_event.hpp	/^class win_event$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::win_event::clear	/usr/include/boost/asio/detail/win_event.hpp	/^  void clear(Lock& lock)$/;"	f	class:boost::asio::detail::win_event	access:public	signature:(Lock& lock)
boost::asio::detail::win_event::event_	/usr/include/boost/asio/detail/win_event.hpp	/^  HANDLE event_;$/;"	m	class:boost::asio::detail::win_event	access:private
boost::asio::detail::win_event::signal	/usr/include/boost/asio/detail/win_event.hpp	/^  void signal(Lock& lock)$/;"	f	class:boost::asio::detail::win_event	access:public	signature:(Lock& lock)
boost::asio::detail::win_event::wait	/usr/include/boost/asio/detail/win_event.hpp	/^  void wait(Lock& lock)$/;"	f	class:boost::asio::detail::win_event	access:public	signature:(Lock& lock)
boost::asio::detail::win_event::win_event	/usr/include/boost/asio/detail/win_event.hpp	/^  win_event()$/;"	f	class:boost::asio::detail::win_event	access:public	signature:()
boost::asio::detail::win_event::~win_event	/usr/include/boost/asio/detail/win_event.hpp	/^  ~win_event()$/;"	f	class:boost::asio::detail::win_event	access:public	signature:()
boost::asio::detail::win_fd_set_adapter	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^class win_fd_set_adapter$/;"	c	namespace:boost::asio::detail
boost::asio::detail::win_fd_set_adapter::fd_set_	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  win_fd_set fd_set_;$/;"	m	class:boost::asio::detail::win_fd_set_adapter	access:private
boost::asio::detail::win_fd_set_adapter::is_set	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  bool is_set(socket_type descriptor) const$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:(socket_type descriptor) const
boost::asio::detail::win_fd_set_adapter::max_descriptor	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  socket_type max_descriptor() const$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:() const
boost::asio::detail::win_fd_set_adapter::max_descriptor_	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  socket_type max_descriptor_;$/;"	m	class:boost::asio::detail::win_fd_set_adapter	access:private
boost::asio::detail::win_fd_set_adapter::operator fd_set*	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  operator fd_set*()$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:()
boost::asio::detail::win_fd_set_adapter::set	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  bool set(socket_type descriptor)$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:(socket_type descriptor)
boost::asio::detail::win_fd_set_adapter::win_fd_set	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  struct win_fd_set$/;"	s	class:boost::asio::detail::win_fd_set_adapter	access:private
boost::asio::detail::win_fd_set_adapter::win_fd_set::fd_array	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^    SOCKET fd_array[win_fd_set_size];$/;"	m	struct:boost::asio::detail::win_fd_set_adapter::win_fd_set	access:public
boost::asio::detail::win_fd_set_adapter::win_fd_set::fd_count	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^    u_int fd_count;$/;"	m	struct:boost::asio::detail::win_fd_set_adapter::win_fd_set	access:public
boost::asio::detail::win_fd_set_adapter::win_fd_set_adapter	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  win_fd_set_adapter()$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:()
boost::asio::detail::win_fd_set_adapter::win_fd_set_size	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  enum { win_fd_set_size = 1024 };$/;"	e	enum:boost::asio::detail::win_fd_set_adapter::__anon19
boost::asio::detail::win_iocp_handle_service	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^class win_iocp_handle_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::win_iocp_handle_service::assign	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, const native_type& native_handle, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::async_read_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, Handler handler)
boost::asio::detail::win_iocp_handle_service::async_read_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, const null_buffers& buffers, Handler handler)
boost::asio::detail::win_iocp_handle_service::async_read_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const MutableBufferSequence& buffers, Handler handler)
boost::asio::detail::win_iocp_handle_service::async_read_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const null_buffers& buffers, Handler handler)
boost::asio::detail::win_iocp_handle_service::async_write_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, Handler handler)
boost::asio::detail::win_iocp_handle_service::async_write_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, const null_buffers& buffers, Handler handler)
boost::asio::detail::win_iocp_handle_service::async_write_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const ConstBufferSequence& buffers, Handler handler)
boost::asio::detail::win_iocp_handle_service::async_write_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void async_write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const null_buffers& buffers, Handler handler)
boost::asio::detail::win_iocp_handle_service::cancel	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::close	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::close_for_destruction	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void close_for_destruction(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl)
boost::asio::detail::win_iocp_handle_service::construct	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::win_iocp_handle_service::destroy	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::win_iocp_handle_service::implementation_type	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  class implementation_type$/;"	c	class:boost::asio::detail::win_iocp_handle_service	access:public
boost::asio::detail::win_iocp_handle_service::implementation_type::handle_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    native_type handle_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::implementation_type	access:private
boost::asio::detail::win_iocp_handle_service::implementation_type::implementation_type	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    implementation_type()$/;"	f	class:boost::asio::detail::win_iocp_handle_service::implementation_type	access:public	signature:()
boost::asio::detail::win_iocp_handle_service::implementation_type::next_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    implementation_type* next_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::implementation_type	access:private
boost::asio::detail::win_iocp_handle_service::implementation_type::prev_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    implementation_type* prev_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::implementation_type	access:private
boost::asio::detail::win_iocp_handle_service::implementation_type::safe_cancellation_thread_id_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    DWORD safe_cancellation_thread_id_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::implementation_type	access:private
boost::asio::detail::win_iocp_handle_service::impl_list_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  implementation_type* impl_list_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service	access:private
boost::asio::detail::win_iocp_handle_service::iocp_service_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  win_iocp_io_service& iocp_service_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service	access:private
boost::asio::detail::win_iocp_handle_service::is_open	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(const implementation_type& impl) const
boost::asio::detail::win_iocp_handle_service::mutex_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service	access:private
boost::asio::detail::win_iocp_handle_service::native	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  native_type native(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(const implementation_type& impl) const
boost::asio::detail::win_iocp_handle_service::native_type	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  typedef HANDLE native_type;$/;"	t	class:boost::asio::detail::win_iocp_handle_service	access:public
boost::asio::detail::win_iocp_handle_service::operation	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  typedef win_iocp_io_service::operation operation;$/;"	t	class:boost::asio::detail::win_iocp_handle_service	access:public
boost::asio::detail::win_iocp_handle_service::overlapped_wrapper	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  class overlapped_wrapper$/;"	c	class:boost::asio::detail::win_iocp_handle_service	inherits:OVERLAPPED	access:public
boost::asio::detail::win_iocp_handle_service::overlapped_wrapper::overlapped_wrapper	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    explicit overlapped_wrapper(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_handle_service::overlapped_wrapper	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::overlapped_wrapper::~overlapped_wrapper	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    ~overlapped_wrapper()$/;"	f	class:boost::asio::detail::win_iocp_handle_service::overlapped_wrapper	access:public	signature:()
boost::asio::detail::win_iocp_handle_service::read_operation	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  class read_operation$/;"	c	class:boost::asio::detail::win_iocp_handle_service	inherits:operation	access:public
boost::asio::detail::win_iocp_handle_service::read_operation::buffers_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::read_operation	access:private
boost::asio::detail::win_iocp_handle_service::read_operation::destroy_impl	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    static void destroy_impl(operation* op)$/;"	f	class:boost::asio::detail::win_iocp_handle_service::read_operation	access:private	signature:(operation* op)
boost::asio::detail::win_iocp_handle_service::read_operation::do_completion_impl	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    static void do_completion_impl(operation* op,$/;"	f	class:boost::asio::detail::win_iocp_handle_service::read_operation	access:private	signature:(operation* op, DWORD last_error, size_t bytes_transferred)
boost::asio::detail::win_iocp_handle_service::read_operation::handler_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::read_operation	access:private
boost::asio::detail::win_iocp_handle_service::read_operation::read_operation	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    read_operation(win_iocp_io_service& io_service,$/;"	f	class:boost::asio::detail::win_iocp_handle_service::read_operation	access:public	signature:(win_iocp_io_service& io_service, const MutableBufferSequence& buffers, Handler handler)
boost::asio::detail::win_iocp_handle_service::read_operation::work_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::read_operation	access:private
boost::asio::detail::win_iocp_handle_service::read_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::read_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, const null_buffers& buffers, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::read_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::read_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const null_buffers& buffers, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::shutdown_service	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:()
boost::asio::detail::win_iocp_handle_service::win_iocp_handle_service	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  win_iocp_handle_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::win_iocp_handle_service::write_operation	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  class write_operation$/;"	c	class:boost::asio::detail::win_iocp_handle_service	inherits:operation	access:public
boost::asio::detail::win_iocp_handle_service::write_operation::buffers_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    ConstBufferSequence buffers_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::write_operation	access:private
boost::asio::detail::win_iocp_handle_service::write_operation::destroy_impl	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    static void destroy_impl(operation* op)$/;"	f	class:boost::asio::detail::win_iocp_handle_service::write_operation	access:private	signature:(operation* op)
boost::asio::detail::win_iocp_handle_service::write_operation::do_completion_impl	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    static void do_completion_impl(operation* op,$/;"	f	class:boost::asio::detail::win_iocp_handle_service::write_operation	access:private	signature:(operation* op, DWORD last_error, size_t bytes_transferred)
boost::asio::detail::win_iocp_handle_service::write_operation::handler_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::write_operation	access:private
boost::asio::detail::win_iocp_handle_service::write_operation::work_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::write_operation	access:private
boost::asio::detail::win_iocp_handle_service::write_operation::write_operation	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    write_operation(win_iocp_io_service& io_service,$/;"	f	class:boost::asio::detail::win_iocp_handle_service::write_operation	access:public	signature:(win_iocp_io_service& io_service, const ConstBufferSequence& buffers, Handler handler)
boost::asio::detail::win_iocp_handle_service::write_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::write_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, const null_buffers& buffers, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::write_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::detail::win_iocp_handle_service::write_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const null_buffers& buffers, boost::system::error_code& ec)
boost::asio::detail::win_iocp_io_service	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^class win_iocp_io_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::win_iocp_io_service::add_timer_queue	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void add_timer_queue(timer_queue<Time_Traits>& timer_queue)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
boost::asio::detail::win_iocp_io_service::all_timer_queues_are_empty	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  bool all_timer_queues_are_empty() const$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:private	signature:() const
boost::asio::detail::win_iocp_io_service::auto_work	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  struct auto_work$/;"	s	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::auto_work::auto_work	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    auto_work(win_iocp_io_service& io_service)$/;"	f	struct:boost::asio::detail::win_iocp_io_service::auto_work	access:public	signature:(win_iocp_io_service& io_service)
boost::asio::detail::win_iocp_io_service::auto_work::io_service_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    win_iocp_io_service& io_service_;$/;"	m	struct:boost::asio::detail::win_iocp_io_service::auto_work	access:private
boost::asio::detail::win_iocp_io_service::auto_work::~auto_work	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    ~auto_work()$/;"	f	struct:boost::asio::detail::win_iocp_io_service::auto_work	access:public	signature:()
boost::asio::detail::win_iocp_io_service::cancel_timer	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  std::size_t cancel_timer(timer_queue<Time_Traits>& timer_queue, void* token)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(timer_queue<Time_Traits>& timer_queue, void* token)
boost::asio::detail::win_iocp_io_service::dispatch	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void dispatch(Handler handler)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(Handler handler)
boost::asio::detail::win_iocp_io_service::do_one	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  size_t do_one(bool block, boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:private	signature:(bool block, boost::system::error_code& ec)
boost::asio::detail::win_iocp_io_service::get_timeout	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  DWORD get_timeout()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:private	signature:()
boost::asio::detail::win_iocp_io_service::handler_operation	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  struct handler_operation$/;"	s	class:boost::asio::detail::win_iocp_io_service	inherits:operation	access:private
boost::asio::detail::win_iocp_io_service::handler_operation::destroy_impl	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    static void destroy_impl(operation* op)$/;"	f	struct:boost::asio::detail::win_iocp_io_service::handler_operation	access:private	signature:(operation* op)
boost::asio::detail::win_iocp_io_service::handler_operation::do_completion_impl	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    static void do_completion_impl(operation* op, DWORD, size_t)$/;"	f	struct:boost::asio::detail::win_iocp_io_service::handler_operation	access:private	signature:(operation* op, DWORD, size_t)
boost::asio::detail::win_iocp_io_service::handler_operation::handler_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    Handler handler_;$/;"	m	struct:boost::asio::detail::win_iocp_io_service::handler_operation	access:private
boost::asio::detail::win_iocp_io_service::handler_operation::handler_operation	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    handler_operation(const handler_operation&);$/;"	p	struct:boost::asio::detail::win_iocp_io_service::handler_operation	access:private	signature:(const handler_operation&)
boost::asio::detail::win_iocp_io_service::handler_operation::handler_operation	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    handler_operation(win_iocp_io_service& io_service,$/;"	f	struct:boost::asio::detail::win_iocp_io_service::handler_operation	access:public	signature:(win_iocp_io_service& io_service, Handler handler)
boost::asio::detail::win_iocp_io_service::handler_operation::io_service_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    win_iocp_io_service& io_service_;$/;"	m	struct:boost::asio::detail::win_iocp_io_service::handler_operation	access:private
boost::asio::detail::win_iocp_io_service::handler_operation::operator =	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    void operator=(const handler_operation&);$/;"	p	struct:boost::asio::detail::win_iocp_io_service::handler_operation	access:private	signature:(const handler_operation&)
boost::asio::detail::win_iocp_io_service::handler_operation::~handler_operation	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    ~handler_operation()$/;"	f	struct:boost::asio::detail::win_iocp_io_service::handler_operation	access:public	signature:()
boost::asio::detail::win_iocp_io_service::init	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void init(size_t concurrency_hint)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(size_t concurrency_hint)
boost::asio::detail::win_iocp_io_service::init_task	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void init_task()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
boost::asio::detail::win_iocp_io_service::iocp_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  } iocp_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	typeref:struct:boost::asio::detail::win_iocp_io_service::iocp_holder	access:private
boost::asio::detail::win_iocp_io_service::iocp_holder	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  struct iocp_holder$/;"	s	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::iocp_holder::handle	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    HANDLE handle;$/;"	m	struct:boost::asio::detail::win_iocp_io_service::iocp_holder	access:public
boost::asio::detail::win_iocp_io_service::iocp_holder::iocp_holder	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    iocp_holder() : handle(0) {}$/;"	f	struct:boost::asio::detail::win_iocp_io_service::iocp_holder	access:public	signature:()
boost::asio::detail::win_iocp_io_service::iocp_holder::~iocp_holder	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    ~iocp_holder() { if (handle) ::CloseHandle(handle); }$/;"	f	struct:boost::asio::detail::win_iocp_io_service::iocp_holder	access:public	signature:()
boost::asio::detail::win_iocp_io_service::max_timeout	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    max_timeout = 500,$/;"	e	enum:boost::asio::detail::win_iocp_io_service::__anon20
boost::asio::detail::win_iocp_io_service::operation	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  class operation$/;"	c	class:boost::asio::detail::win_iocp_io_service	inherits:OVERLAPPED	access:public
boost::asio::detail::win_iocp_io_service::operation::bytes_transferred_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    DWORD bytes_transferred_;$/;"	m	class:boost::asio::detail::win_iocp_io_service::operation	access:private
boost::asio::detail::win_iocp_io_service::operation::destroy	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    void destroy()$/;"	f	class:boost::asio::detail::win_iocp_io_service::operation	access:public	signature:()
boost::asio::detail::win_iocp_io_service::operation::destroy_func_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    destroy_func_type destroy_func_;$/;"	m	class:boost::asio::detail::win_iocp_io_service::operation	access:private
boost::asio::detail::win_iocp_io_service::operation::destroy_func_type	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    typedef void (*destroy_func_type)(operation*);$/;"	t	class:boost::asio::detail::win_iocp_io_service::operation	access:public
boost::asio::detail::win_iocp_io_service::operation::invoke_func_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    invoke_func_type invoke_func_;$/;"	m	class:boost::asio::detail::win_iocp_io_service::operation	access:private
boost::asio::detail::win_iocp_io_service::operation::invoke_func_type	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    typedef void (*invoke_func_type)(operation*, DWORD, size_t);$/;"	t	class:boost::asio::detail::win_iocp_io_service::operation	access:public
boost::asio::detail::win_iocp_io_service::operation::iocp_service_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    win_iocp_io_service& iocp_service_;$/;"	m	class:boost::asio::detail::win_iocp_io_service::operation	access:private
boost::asio::detail::win_iocp_io_service::operation::last_error_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    DWORD last_error_;$/;"	m	class:boost::asio::detail::win_iocp_io_service::operation	access:private
boost::asio::detail::win_iocp_io_service::operation::on_completion	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    bool on_completion(DWORD last_error, DWORD bytes_transferred)$/;"	f	class:boost::asio::detail::win_iocp_io_service::operation	access:public	signature:(DWORD last_error, DWORD bytes_transferred)
boost::asio::detail::win_iocp_io_service::operation::on_immediate_completion	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    void on_immediate_completion(DWORD last_error, DWORD bytes_transferred)$/;"	f	class:boost::asio::detail::win_iocp_io_service::operation	access:public	signature:(DWORD last_error, DWORD bytes_transferred)
boost::asio::detail::win_iocp_io_service::operation::on_pending	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    void on_pending()$/;"	f	class:boost::asio::detail::win_iocp_io_service::operation	access:public	signature:()
boost::asio::detail::win_iocp_io_service::operation::operation	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    operation(win_iocp_io_service& iocp_service,$/;"	f	class:boost::asio::detail::win_iocp_io_service::operation	access:public	signature:(win_iocp_io_service& iocp_service, invoke_func_type invoke_func, destroy_func_type destroy_func)
boost::asio::detail::win_iocp_io_service::operation::ready_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    long ready_;$/;"	m	class:boost::asio::detail::win_iocp_io_service::operation	access:private
boost::asio::detail::win_iocp_io_service::operation::reset	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    void reset()$/;"	f	class:boost::asio::detail::win_iocp_io_service::operation	access:public	signature:()
boost::asio::detail::win_iocp_io_service::operation::~operation	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    ~operation()$/;"	f	class:boost::asio::detail::win_iocp_io_service::operation	access:protected	signature:()
boost::asio::detail::win_iocp_io_service::outstanding_operations_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  long outstanding_operations_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::outstanding_work_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  long outstanding_work_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::poll	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  size_t poll(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::win_iocp_io_service::poll_one	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  size_t poll_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::win_iocp_io_service::post	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void post(Handler handler)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(Handler handler)
boost::asio::detail::win_iocp_io_service::post_completion	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void post_completion(operation* op, DWORD op_last_error,$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(operation* op, DWORD op_last_error, DWORD bytes_transferred)
boost::asio::detail::win_iocp_io_service::register_handle	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  boost::system::error_code register_handle($/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:( HANDLE handle, boost::system::error_code& ec)
boost::asio::detail::win_iocp_io_service::remove_timer_queue	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void remove_timer_queue(timer_queue<Time_Traits>& timer_queue)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
boost::asio::detail::win_iocp_io_service::reset	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
boost::asio::detail::win_iocp_io_service::run	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  size_t run(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::win_iocp_io_service::run_one	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  size_t run_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::detail::win_iocp_io_service::schedule_timer	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void schedule_timer(timer_queue<Time_Traits>& timer_queue,$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(timer_queue<Time_Traits>& timer_queue, const typename Time_Traits::time_type& time, Handler handler, void* token)
boost::asio::detail::win_iocp_io_service::shutdown_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  long shutdown_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::shutdown_service	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
boost::asio::detail::win_iocp_io_service::steal_timer_dispatching	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    steal_timer_dispatching = 2$/;"	e	enum:boost::asio::detail::win_iocp_io_service::__anon20
boost::asio::detail::win_iocp_io_service::stop	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void stop()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
boost::asio::detail::win_iocp_io_service::stopped_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  long stopped_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::timer_interrupt_issued_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  bool timer_interrupt_issued_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::timer_mutex_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  mutex timer_mutex_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::timer_queues_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  std::vector<timer_queue_base*> timer_queues_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::timer_queues_copy_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  std::vector<timer_queue_base*> timer_queues_copy_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::timer_thread_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  long timer_thread_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
boost::asio::detail::win_iocp_io_service::transfer_timer_dispatching	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    transfer_timer_dispatching = 1,$/;"	e	enum:boost::asio::detail::win_iocp_io_service::__anon20
boost::asio::detail::win_iocp_io_service::win_iocp_io_service	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  win_iocp_io_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::win_iocp_io_service::work_finished	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void work_finished()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
boost::asio::detail::win_iocp_io_service::work_started	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void work_started()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
boost::asio::detail::win_iocp_overlapped_ptr	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^class win_iocp_overlapped_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::win_iocp_overlapped_ptr::complete	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::detail::win_iocp_overlapped_ptr::get	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  const OVERLAPPED* get() const$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:() const
boost::asio::detail::win_iocp_overlapped_ptr::get	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  OVERLAPPED* get()$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:()
boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  struct overlapped_operation$/;"	s	class:boost::asio::detail::win_iocp_overlapped_ptr	inherits:overlapped_operation_base	access:private
boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation::destroy_impl	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^    static void destroy_impl(win_iocp_io_service::operation* op)$/;"	f	struct:boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation	access:private	signature:(win_iocp_io_service::operation* op)
boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation::do_completion_impl	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^    static void do_completion_impl(win_iocp_io_service::operation* op,$/;"	f	struct:boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation	access:private	signature:(win_iocp_io_service::operation* op, DWORD last_error, size_t bytes_transferred)
boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation::handler_	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^    Handler handler_;$/;"	m	struct:boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation	access:private
boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation::operator =	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^    void operator=(const overlapped_operation&);$/;"	p	struct:boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation	access:private	signature:(const overlapped_operation&)
boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation::overlapped_operation	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^    overlapped_operation(const overlapped_operation&);$/;"	p	struct:boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation	access:private	signature:(const overlapped_operation&)
boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation::overlapped_operation	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^    overlapped_operation(win_iocp_io_service& io_service,$/;"	f	struct:boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation	access:public	signature:(win_iocp_io_service& io_service, Handler handler)
boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation_base	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  struct overlapped_operation_base$/;"	s	class:boost::asio::detail::win_iocp_overlapped_ptr	inherits:win_iocp_io_service::operation	access:private
boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation_base::ec_	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^    boost::system::error_code ec_;$/;"	m	struct:boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation_base	access:public
boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation_base::io_service_	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^    win_iocp_io_service& io_service_;$/;"	m	struct:boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation_base	access:public
boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation_base::overlapped_operation_base	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^    overlapped_operation_base(win_iocp_io_service& io_service,$/;"	f	struct:boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation_base	access:public	signature:(win_iocp_io_service& io_service, invoke_func_type invoke_func, destroy_func_type destroy_func)
boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation_base::~overlapped_operation_base	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^    ~overlapped_operation_base()$/;"	f	struct:boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation_base	access:public	signature:()
boost::asio::detail::win_iocp_overlapped_ptr::ptr_	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  overlapped_operation_base* ptr_;$/;"	m	class:boost::asio::detail::win_iocp_overlapped_ptr	access:private
boost::asio::detail::win_iocp_overlapped_ptr::release	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  OVERLAPPED* release()$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:()
boost::asio::detail::win_iocp_overlapped_ptr::reset	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:()
boost::asio::detail::win_iocp_overlapped_ptr::reset	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  void reset(boost::asio::io_service& io_service, Handler handler)$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:(boost::asio::io_service& io_service, Handler handler)
boost::asio::detail::win_iocp_overlapped_ptr::win_iocp_overlapped_ptr	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  explicit win_iocp_overlapped_ptr($/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:( boost::asio::io_service& io_service, Handler handler)
boost::asio::detail::win_iocp_overlapped_ptr::win_iocp_overlapped_ptr	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  win_iocp_overlapped_ptr()$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:()
boost::asio::detail::win_iocp_overlapped_ptr::~win_iocp_overlapped_ptr	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  ~win_iocp_overlapped_ptr()$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:()
boost::asio::detail::win_iocp_serial_port_service	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^class win_iocp_serial_port_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::win_iocp_serial_port_service::assign	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const native_type& native_handle, boost::system::error_code& ec)
boost::asio::detail::win_iocp_serial_port_service::async_read_some	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, Handler handler)
boost::asio::detail::win_iocp_serial_port_service::async_write_some	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, Handler handler)
boost::asio::detail::win_iocp_serial_port_service::cancel	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::win_iocp_serial_port_service::close	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::detail::win_iocp_serial_port_service::construct	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::win_iocp_serial_port_service::destroy	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::win_iocp_serial_port_service::get_option	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(const implementation_type& impl, GettableSerialPortOption& option, boost::system::error_code& ec) const
boost::asio::detail::win_iocp_serial_port_service::handle_service_	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  win_iocp_handle_service& handle_service_;$/;"	m	class:boost::asio::detail::win_iocp_serial_port_service	access:private
boost::asio::detail::win_iocp_serial_port_service::implementation_type	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  typedef win_iocp_handle_service::implementation_type implementation_type;$/;"	t	class:boost::asio::detail::win_iocp_serial_port_service	access:public
boost::asio::detail::win_iocp_serial_port_service::is_open	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(const implementation_type& impl) const
boost::asio::detail::win_iocp_serial_port_service::native	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl)
boost::asio::detail::win_iocp_serial_port_service::native_type	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  typedef win_iocp_handle_service::native_type native_type;$/;"	t	class:boost::asio::detail::win_iocp_serial_port_service	access:public
boost::asio::detail::win_iocp_serial_port_service::open	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const std::string& device, boost::system::error_code& ec)
boost::asio::detail::win_iocp_serial_port_service::read_some	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::detail::win_iocp_serial_port_service::send_break	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code send_break(implementation_type&,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type&, boost::system::error_code& ec)
boost::asio::detail::win_iocp_serial_port_service::set_option	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const SettableSerialPortOption& option, boost::system::error_code& ec)
boost::asio::detail::win_iocp_serial_port_service::shutdown_service	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:()
boost::asio::detail::win_iocp_serial_port_service::win_iocp_serial_port_service	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  win_iocp_serial_port_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::detail::win_iocp_serial_port_service::write_some	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::detail::win_iocp_socket_service	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^class win_iocp_socket_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
boost::asio::detail::win_iocp_socket_service::endpoint_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::detail::win_iocp_socket_service	access:public
boost::asio::detail::win_iocp_socket_service::implementation_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  class implementation_type$/;"	c	class:boost::asio::detail::win_iocp_socket_service	access:public
boost::asio::detail::win_iocp_socket_service::implementation_type::cancel_token_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    shared_cancel_token_type cancel_token_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::implementation_type	access:private
boost::asio::detail::win_iocp_socket_service::implementation_type::close_might_block	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^      close_might_block = 2, \/\/ User set linger option for blocking close.$/;"	e	enum:boost::asio::detail::win_iocp_socket_service::implementation_type::__anon23
boost::asio::detail::win_iocp_socket_service::implementation_type::enable_connection_aborted	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^      enable_connection_aborted = 1, \/\/ User wants connection_aborted errors.$/;"	e	enum:boost::asio::detail::win_iocp_socket_service::implementation_type::__anon23
boost::asio::detail::win_iocp_socket_service::implementation_type::flags_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    unsigned char flags_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::implementation_type	access:private
boost::asio::detail::win_iocp_socket_service::implementation_type::implementation_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    implementation_type()$/;"	f	class:boost::asio::detail::win_iocp_socket_service::implementation_type	access:public	signature:()
boost::asio::detail::win_iocp_socket_service::implementation_type::next_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    implementation_type* next_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::implementation_type	access:private
boost::asio::detail::win_iocp_socket_service::implementation_type::prev_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    implementation_type* prev_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::implementation_type	access:private
boost::asio::detail::win_iocp_socket_service::implementation_type::protocol_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    protocol_type protocol_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::implementation_type	access:private
boost::asio::detail::win_iocp_socket_service::implementation_type::reactor_data_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    reactor_type::per_descriptor_data reactor_data_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::implementation_type	access:private
boost::asio::detail::win_iocp_socket_service::implementation_type::safe_cancellation_thread_id_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    DWORD safe_cancellation_thread_id_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::implementation_type	access:private
boost::asio::detail::win_iocp_socket_service::implementation_type::socket_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    native_type socket_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::implementation_type	access:private
boost::asio::detail::win_iocp_socket_service::implementation_type::user_set_non_blocking	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^      user_set_non_blocking = 4 \/\/ The user wants a non-blocking socket.$/;"	e	enum:boost::asio::detail::win_iocp_socket_service::implementation_type::__anon23
boost::asio::detail::win_iocp_socket_service::max_buffers	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  enum { max_buffers = 64 < max_iov_len ? 64 : max_iov_len };$/;"	e	enum:boost::asio::detail::win_iocp_socket_service::__anon24
boost::asio::detail::win_iocp_socket_service::native_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  class native_type$/;"	c	class:boost::asio::detail::win_iocp_socket_service	access:public
boost::asio::detail::win_iocp_socket_service::native_type::as_handle	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    HANDLE as_handle() const$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_type	access:public	signature:() const
boost::asio::detail::win_iocp_socket_service::native_type::have_remote_endpoint	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    bool have_remote_endpoint() const$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_type	access:public	signature:() const
boost::asio::detail::win_iocp_socket_service::native_type::have_remote_endpoint_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    bool have_remote_endpoint_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::native_type	access:private
boost::asio::detail::win_iocp_socket_service::native_type::native_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    native_type(socket_type s)$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_type	access:public	signature:(socket_type s)
boost::asio::detail::win_iocp_socket_service::native_type::native_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    native_type(socket_type s, const endpoint_type& ep)$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_type	access:public	signature:(socket_type s, const endpoint_type& ep)
boost::asio::detail::win_iocp_socket_service::native_type::operator =	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    void operator=(socket_type s)$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_type	access:public	signature:(socket_type s)
boost::asio::detail::win_iocp_socket_service::native_type::operator socket_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    operator socket_type() const$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_type	access:public	signature:() const
boost::asio::detail::win_iocp_socket_service::native_type::remote_endpoint	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    endpoint_type remote_endpoint() const$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_type	access:public	signature:() const
boost::asio::detail::win_iocp_socket_service::native_type::remote_endpoint_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    endpoint_type remote_endpoint_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::native_type	access:private
boost::asio::detail::win_iocp_socket_service::native_type::socket_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    socket_type socket_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::native_type	access:private
boost::asio::detail::win_iocp_socket_service::noop_deleter	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  struct noop_deleter { void operator()(void*) {} };$/;"	s	class:boost::asio::detail::win_iocp_socket_service	access:public
boost::asio::detail::win_iocp_socket_service::noop_deleter::operator ()	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  struct noop_deleter { void operator()(void*) {} };$/;"	f	struct:boost::asio::detail::win_iocp_socket_service::noop_deleter	access:public	signature:(void*)
boost::asio::detail::win_iocp_socket_service::operation	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  typedef win_iocp_io_service::operation operation;$/;"	t	class:boost::asio::detail::win_iocp_socket_service	access:public
boost::asio::detail::win_iocp_socket_service::protocol_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::detail::win_iocp_socket_service	access:public
boost::asio::detail::win_iocp_socket_service::reactor_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  typedef detail::select_reactor<true> reactor_type;$/;"	t	class:boost::asio::detail::win_iocp_socket_service	access:public
boost::asio::detail::win_iocp_socket_service::shared_cancel_token_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  typedef boost::shared_ptr<void> shared_cancel_token_type;$/;"	t	class:boost::asio::detail::win_iocp_socket_service	access:public
boost::asio::detail::win_iocp_socket_service::weak_cancel_token_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  typedef boost::weak_ptr<void> weak_cancel_token_type;$/;"	t	class:boost::asio::detail::win_iocp_socket_service	access:public
boost::asio::detail::win_mutex	/usr/include/boost/asio/detail/win_mutex.hpp	/^class win_mutex$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::win_mutex::crit_section_	/usr/include/boost/asio/detail/win_mutex.hpp	/^  ::CRITICAL_SECTION crit_section_;$/;"	m	class:boost::asio::detail::win_mutex	access:private
boost::asio::detail::win_mutex::do_init	/usr/include/boost/asio/detail/win_mutex.hpp	/^  int do_init()$/;"	f	class:boost::asio::detail::win_mutex	access:private	signature:()
boost::asio::detail::win_mutex::do_lock	/usr/include/boost/asio/detail/win_mutex.hpp	/^  int do_lock()$/;"	f	class:boost::asio::detail::win_mutex	access:private	signature:()
boost::asio::detail::win_mutex::lock	/usr/include/boost/asio/detail/win_mutex.hpp	/^  void lock()$/;"	f	class:boost::asio::detail::win_mutex	access:public	signature:()
boost::asio::detail::win_mutex::scoped_lock	/usr/include/boost/asio/detail/win_mutex.hpp	/^  typedef boost::asio::detail::scoped_lock<win_mutex> scoped_lock;$/;"	t	class:boost::asio::detail::win_mutex	access:public
boost::asio::detail::win_mutex::unlock	/usr/include/boost/asio/detail/win_mutex.hpp	/^  void unlock()$/;"	f	class:boost::asio::detail::win_mutex	access:public	signature:()
boost::asio::detail::win_mutex::win_mutex	/usr/include/boost/asio/detail/win_mutex.hpp	/^  win_mutex()$/;"	f	class:boost::asio::detail::win_mutex	access:public	signature:()
boost::asio::detail::win_mutex::~win_mutex	/usr/include/boost/asio/detail/win_mutex.hpp	/^  ~win_mutex()$/;"	f	class:boost::asio::detail::win_mutex	access:public	signature:()
boost::asio::detail::win_signal_blocker	/usr/include/boost/asio/detail/win_signal_blocker.hpp	/^class win_signal_blocker$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::win_signal_blocker::block	/usr/include/boost/asio/detail/win_signal_blocker.hpp	/^  void block()$/;"	f	class:boost::asio::detail::win_signal_blocker	access:public	signature:()
boost::asio::detail::win_signal_blocker::unblock	/usr/include/boost/asio/detail/win_signal_blocker.hpp	/^  void unblock()$/;"	f	class:boost::asio::detail::win_signal_blocker	access:public	signature:()
boost::asio::detail::win_signal_blocker::win_signal_blocker	/usr/include/boost/asio/detail/win_signal_blocker.hpp	/^  win_signal_blocker()$/;"	f	class:boost::asio::detail::win_signal_blocker	access:public	signature:()
boost::asio::detail::win_signal_blocker::~win_signal_blocker	/usr/include/boost/asio/detail/win_signal_blocker.hpp	/^  ~win_signal_blocker()$/;"	f	class:boost::asio::detail::win_signal_blocker	access:public	signature:()
boost::asio::detail::win_thread	/usr/include/boost/asio/detail/win_thread.hpp	/^class win_thread$/;"	c	namespace:boost::asio::detail	inherits:noncopyable,win_thread_base
boost::asio::detail::win_thread::apc_function	/usr/include/boost/asio/detail/win_thread.hpp	/^  friend void __stdcall apc_function(ULONG);$/;"	p	class:boost::asio::detail::win_thread	access:friend	signature:(ULONG)
boost::asio::detail::win_thread::apc_function	/usr/include/boost/asio/detail/win_thread.hpp	/^  friend void __stdcall apc_function(ULONG_PTR);$/;"	p	class:boost::asio::detail::win_thread	access:friend	signature:(ULONG_PTR)
boost::asio::detail::win_thread::exit_event_	/usr/include/boost/asio/detail/win_thread.hpp	/^  ::HANDLE exit_event_;$/;"	m	class:boost::asio::detail::win_thread	access:private
boost::asio::detail::win_thread::func	/usr/include/boost/asio/detail/win_thread.hpp	/^  class func$/;"	c	class:boost::asio::detail::win_thread	inherits:func_base	access:private
boost::asio::detail::win_thread::func::func	/usr/include/boost/asio/detail/win_thread.hpp	/^    func(Function f)$/;"	f	class:boost::asio::detail::win_thread::func	access:public	signature:(Function f)
boost::asio::detail::win_thread::func::f_	/usr/include/boost/asio/detail/win_thread.hpp	/^    Function f_;$/;"	m	class:boost::asio::detail::win_thread::func	access:private
boost::asio::detail::win_thread::func::run	/usr/include/boost/asio/detail/win_thread.hpp	/^    virtual void run()$/;"	f	class:boost::asio::detail::win_thread::func	access:public	signature:()
boost::asio::detail::win_thread::func_base	/usr/include/boost/asio/detail/win_thread.hpp	/^  class func_base$/;"	c	class:boost::asio::detail::win_thread	access:private
boost::asio::detail::win_thread::func_base::entry_event_	/usr/include/boost/asio/detail/win_thread.hpp	/^    ::HANDLE entry_event_;$/;"	m	class:boost::asio::detail::win_thread::func_base	access:public
boost::asio::detail::win_thread::func_base::exit_event_	/usr/include/boost/asio/detail/win_thread.hpp	/^    ::HANDLE exit_event_;$/;"	m	class:boost::asio::detail::win_thread::func_base	access:public
boost::asio::detail::win_thread::func_base::run	/usr/include/boost/asio/detail/win_thread.hpp	/^    virtual void run() = 0;$/;"	p	class:boost::asio::detail::win_thread::func_base	access:public	signature:()
boost::asio::detail::win_thread::func_base::~func_base	/usr/include/boost/asio/detail/win_thread.hpp	/^    virtual ~func_base() {}$/;"	f	class:boost::asio::detail::win_thread::func_base	access:public	signature:()
boost::asio::detail::win_thread::join	/usr/include/boost/asio/detail/win_thread.hpp	/^  void join()$/;"	f	class:boost::asio::detail::win_thread	access:public	signature:()
boost::asio::detail::win_thread::thread_	/usr/include/boost/asio/detail/win_thread.hpp	/^  ::HANDLE thread_;$/;"	m	class:boost::asio::detail::win_thread	access:private
boost::asio::detail::win_thread::win_thread	/usr/include/boost/asio/detail/win_thread.hpp	/^  win_thread(Function f)$/;"	f	class:boost::asio::detail::win_thread	access:public	signature:(Function f)
boost::asio::detail::win_thread::win_thread_function	/usr/include/boost/asio/detail/win_thread.hpp	/^  friend unsigned int __stdcall win_thread_function(void* arg);$/;"	p	class:boost::asio::detail::win_thread	access:friend	signature:(void* arg)
boost::asio::detail::win_thread::~win_thread	/usr/include/boost/asio/detail/win_thread.hpp	/^  ~win_thread()$/;"	f	class:boost::asio::detail::win_thread	access:public	signature:()
boost::asio::detail::win_thread_base	/usr/include/boost/asio/detail/win_thread.hpp	/^class win_thread_base$/;"	c	namespace:boost::asio::detail
boost::asio::detail::win_thread_base::set_terminate_threads	/usr/include/boost/asio/detail/win_thread.hpp	/^  static void set_terminate_threads(bool b)$/;"	f	class:boost::asio::detail::win_thread_base	access:public	signature:(bool b)
boost::asio::detail::win_thread_base::terminate_threads	/usr/include/boost/asio/detail/win_thread.hpp	/^  static bool terminate_threads()$/;"	f	class:boost::asio::detail::win_thread_base	access:public	signature:()
boost::asio::detail::win_thread_base::terminate_threads_	/usr/include/boost/asio/detail/win_thread.hpp	/^  static long terminate_threads_;$/;"	m	class:boost::asio::detail::win_thread_base	access:private
boost::asio::detail::win_thread_base::terminate_threads_	/usr/include/boost/asio/detail/win_thread.hpp	/^long win_thread_base<T>::terminate_threads_ = 0;$/;"	m	class:boost::asio::detail::win_thread_base
boost::asio::detail::win_thread_function	/usr/include/boost/asio/detail/win_thread.hpp	/^inline unsigned int __stdcall win_thread_function(void* arg)$/;"	f	namespace:boost::asio::detail	signature:(void* arg)
boost::asio::detail::win_thread_function	/usr/include/boost/asio/detail/win_thread.hpp	/^unsigned int __stdcall win_thread_function(void* arg);$/;"	p	namespace:boost::asio::detail	signature:(void* arg)
boost::asio::detail::win_tss_ptr	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^class win_tss_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
boost::asio::detail::win_tss_ptr::operator =	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:boost::asio::detail::win_tss_ptr	access:public	signature:(T* value)
boost::asio::detail::win_tss_ptr::operator T*	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  operator T*() const$/;"	f	class:boost::asio::detail::win_tss_ptr	access:public	signature:() const
boost::asio::detail::win_tss_ptr::out_of_indexes	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  enum { out_of_indexes = 0xFFFFFFFF };$/;"	e	enum:boost::asio::detail::win_tss_ptr::__anon25
boost::asio::detail::win_tss_ptr::tss_key_	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  DWORD tss_key_;$/;"	m	class:boost::asio::detail::win_tss_ptr	access:private
boost::asio::detail::win_tss_ptr::win_tss_ptr	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  win_tss_ptr()$/;"	f	class:boost::asio::detail::win_tss_ptr	access:public	signature:()
boost::asio::detail::win_tss_ptr::~win_tss_ptr	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  ~win_tss_ptr()$/;"	f	class:boost::asio::detail::win_tss_ptr	access:public	signature:()
boost::asio::detail::wrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^class wrapped_handler$/;"	c	namespace:boost::asio::detail
boost::asio::detail::wrapped_handler::dispatcher_	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  Dispatcher dispatcher_;$/;"	m	class:boost::asio::detail::wrapped_handler	access:public
boost::asio::detail::wrapped_handler::handler_	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::wrapped_handler	access:public
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:() const
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:()
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1) const$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1) const
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1)$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1)
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2) const$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2) const
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2)$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2)
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3) const$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3) const
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3)$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3)
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4)
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4) const
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5)
boost::asio::detail::wrapped_handler::operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5) const
boost::asio::detail::wrapped_handler::result_type	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  typedef void result_type;$/;"	t	class:boost::asio::detail::wrapped_handler	access:public
boost::asio::detail::wrapped_handler::wrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  wrapped_handler($/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:( typename boost::add_reference<Dispatcher>::type dispatcher, Handler handler)
boost::asio::error	/usr/include/boost/asio/error.hpp	/^namespace error {$/;"	n	namespace:boost::asio
boost::asio::error::access_denied	/usr/include/boost/asio/error.hpp	/^  access_denied = BOOST_ASIO_SOCKET_ERROR(EACCES),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::address_family_not_supported	/usr/include/boost/asio/error.hpp	/^  address_family_not_supported = BOOST_ASIO_SOCKET_ERROR(EAFNOSUPPORT),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::address_in_use	/usr/include/boost/asio/error.hpp	/^  address_in_use = BOOST_ASIO_SOCKET_ERROR(EADDRINUSE),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::addrinfo_category	/usr/include/boost/asio/error.hpp	/^static const boost::system::error_category& addrinfo_category$/;"	m	namespace:boost::asio::error
boost::asio::error::addrinfo_errors	/usr/include/boost/asio/error.hpp	/^enum addrinfo_errors$/;"	g	namespace:boost::asio::error
boost::asio::error::already_connected	/usr/include/boost/asio/error.hpp	/^  already_connected = BOOST_ASIO_SOCKET_ERROR(EISCONN),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::already_open	/usr/include/boost/asio/error.hpp	/^  already_open = 1,$/;"	e	enum:boost::asio::error::misc_errors
boost::asio::error::already_started	/usr/include/boost/asio/error.hpp	/^  already_started = BOOST_ASIO_SOCKET_ERROR(EALREADY),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::bad_descriptor	/usr/include/boost/asio/error.hpp	/^  bad_descriptor = BOOST_ASIO_SOCKET_ERROR(EBADF),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::basic_errors	/usr/include/boost/asio/error.hpp	/^enum basic_errors$/;"	g	namespace:boost::asio::error
boost::asio::error::broken_pipe	/usr/include/boost/asio/error.hpp	/^  broken_pipe = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::connection_aborted	/usr/include/boost/asio/error.hpp	/^  connection_aborted = BOOST_ASIO_SOCKET_ERROR(ECONNABORTED),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::connection_refused	/usr/include/boost/asio/error.hpp	/^  connection_refused = BOOST_ASIO_SOCKET_ERROR(ECONNREFUSED),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::connection_reset	/usr/include/boost/asio/error.hpp	/^  connection_reset = BOOST_ASIO_SOCKET_ERROR(ECONNRESET),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::detail	/usr/include/boost/asio/error.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::error
boost::asio::error::detail::addrinfo_category	/usr/include/boost/asio/error.hpp	/^class addrinfo_category : public boost::system::error_category$/;"	c	namespace:boost::asio::error::detail	inherits:boost::system::error_category
boost::asio::error::detail::addrinfo_category::message	/usr/include/boost/asio/error.hpp	/^  std::string message(int value) const$/;"	f	class:boost::asio::error::detail::addrinfo_category	access:public	signature:(int value) const
boost::asio::error::detail::addrinfo_category::name	/usr/include/boost/asio/error.hpp	/^  const char* name() const$/;"	f	class:boost::asio::error::detail::addrinfo_category	access:public	signature:() const
boost::asio::error::detail::misc_category	/usr/include/boost/asio/error.hpp	/^class misc_category : public boost::system::error_category$/;"	c	namespace:boost::asio::error::detail	inherits:boost::system::error_category
boost::asio::error::detail::misc_category::message	/usr/include/boost/asio/error.hpp	/^  std::string message(int value) const$/;"	f	class:boost::asio::error::detail::misc_category	access:public	signature:(int value) const
boost::asio::error::detail::misc_category::name	/usr/include/boost/asio/error.hpp	/^  const char* name() const$/;"	f	class:boost::asio::error::detail::misc_category	access:public	signature:() const
boost::asio::error::detail::netdb_category	/usr/include/boost/asio/error.hpp	/^class netdb_category : public boost::system::error_category$/;"	c	namespace:boost::asio::error::detail	inherits:boost::system::error_category
boost::asio::error::detail::netdb_category::message	/usr/include/boost/asio/error.hpp	/^  std::string message(int value) const$/;"	f	class:boost::asio::error::detail::netdb_category	access:public	signature:(int value) const
boost::asio::error::detail::netdb_category::name	/usr/include/boost/asio/error.hpp	/^  const char* name() const$/;"	f	class:boost::asio::error::detail::netdb_category	access:public	signature:() const
boost::asio::error::detail::ssl_category	/usr/include/boost/asio/error.hpp	/^class ssl_category : public boost::system::error_category$/;"	c	namespace:boost::asio::error::detail	inherits:boost::system::error_category
boost::asio::error::detail::ssl_category::message	/usr/include/boost/asio/error.hpp	/^  std::string message(int) const$/;"	f	class:boost::asio::error::detail::ssl_category	access:public	signature:(int) const
boost::asio::error::detail::ssl_category::name	/usr/include/boost/asio/error.hpp	/^  const char* name() const$/;"	f	class:boost::asio::error::detail::ssl_category	access:public	signature:() const
boost::asio::error::eof	/usr/include/boost/asio/error.hpp	/^  eof,$/;"	e	enum:boost::asio::error::misc_errors
boost::asio::error::fault	/usr/include/boost/asio/error.hpp	/^  fault = BOOST_ASIO_SOCKET_ERROR(EFAULT),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::fd_set_failure	/usr/include/boost/asio/error.hpp	/^  fd_set_failure$/;"	e	enum:boost::asio::error::misc_errors
boost::asio::error::get_addrinfo_category	/usr/include/boost/asio/error.hpp	/^inline const boost::system::error_category& get_addrinfo_category()$/;"	f	namespace:boost::asio::error	signature:()
boost::asio::error::get_misc_category	/usr/include/boost/asio/error.hpp	/^inline const boost::system::error_category& get_misc_category()$/;"	f	namespace:boost::asio::error	signature:()
boost::asio::error::get_netdb_category	/usr/include/boost/asio/error.hpp	/^inline const boost::system::error_category& get_netdb_category()$/;"	f	namespace:boost::asio::error	signature:()
boost::asio::error::get_ssl_category	/usr/include/boost/asio/error.hpp	/^inline const boost::system::error_category& get_ssl_category()$/;"	f	namespace:boost::asio::error	signature:()
boost::asio::error::get_system_category	/usr/include/boost/asio/error.hpp	/^inline const boost::system::error_category& get_system_category()$/;"	f	namespace:boost::asio::error	signature:()
boost::asio::error::host_not_found	/usr/include/boost/asio/error.hpp	/^  host_not_found = BOOST_ASIO_NETDB_ERROR(HOST_NOT_FOUND),$/;"	e	enum:boost::asio::error::netdb_errors
boost::asio::error::host_not_found_try_again	/usr/include/boost/asio/error.hpp	/^  host_not_found_try_again = BOOST_ASIO_NETDB_ERROR(TRY_AGAIN),$/;"	e	enum:boost::asio::error::netdb_errors
boost::asio::error::host_unreachable	/usr/include/boost/asio/error.hpp	/^  host_unreachable = BOOST_ASIO_SOCKET_ERROR(EHOSTUNREACH),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::interrupted	/usr/include/boost/asio/error.hpp	/^  interrupted = BOOST_ASIO_SOCKET_ERROR(EINTR),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::invalid_argument	/usr/include/boost/asio/error.hpp	/^  invalid_argument = BOOST_ASIO_SOCKET_ERROR(EINVAL),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::in_progress	/usr/include/boost/asio/error.hpp	/^  in_progress = BOOST_ASIO_SOCKET_ERROR(EINPROGRESS),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::make_error_code	/usr/include/boost/asio/error.hpp	/^inline boost::system::error_code make_error_code(addrinfo_errors e)$/;"	f	namespace:boost::asio::error	signature:(addrinfo_errors e)
boost::asio::error::make_error_code	/usr/include/boost/asio/error.hpp	/^inline boost::system::error_code make_error_code(basic_errors e)$/;"	f	namespace:boost::asio::error	signature:(basic_errors e)
boost::asio::error::make_error_code	/usr/include/boost/asio/error.hpp	/^inline boost::system::error_code make_error_code(misc_errors e)$/;"	f	namespace:boost::asio::error	signature:(misc_errors e)
boost::asio::error::make_error_code	/usr/include/boost/asio/error.hpp	/^inline boost::system::error_code make_error_code(netdb_errors e)$/;"	f	namespace:boost::asio::error	signature:(netdb_errors e)
boost::asio::error::make_error_code	/usr/include/boost/asio/error.hpp	/^inline boost::system::error_code make_error_code(ssl_errors e)$/;"	f	namespace:boost::asio::error	signature:(ssl_errors e)
boost::asio::error::message_size	/usr/include/boost/asio/error.hpp	/^  message_size = BOOST_ASIO_SOCKET_ERROR(EMSGSIZE),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::misc_category	/usr/include/boost/asio/error.hpp	/^static const boost::system::error_category& misc_category$/;"	m	namespace:boost::asio::error
boost::asio::error::misc_errors	/usr/include/boost/asio/error.hpp	/^enum misc_errors$/;"	g	namespace:boost::asio::error
boost::asio::error::name_too_long	/usr/include/boost/asio/error.hpp	/^  name_too_long = BOOST_ASIO_SOCKET_ERROR(ENAMETOOLONG),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::netdb_category	/usr/include/boost/asio/error.hpp	/^static const boost::system::error_category& netdb_category$/;"	m	namespace:boost::asio::error
boost::asio::error::netdb_errors	/usr/include/boost/asio/error.hpp	/^enum netdb_errors$/;"	g	namespace:boost::asio::error
boost::asio::error::network_down	/usr/include/boost/asio/error.hpp	/^  network_down = BOOST_ASIO_SOCKET_ERROR(ENETDOWN),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::network_reset	/usr/include/boost/asio/error.hpp	/^  network_reset = BOOST_ASIO_SOCKET_ERROR(ENETRESET),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::network_unreachable	/usr/include/boost/asio/error.hpp	/^  network_unreachable = BOOST_ASIO_SOCKET_ERROR(ENETUNREACH),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::not_connected	/usr/include/boost/asio/error.hpp	/^  not_connected = BOOST_ASIO_SOCKET_ERROR(ENOTCONN),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::not_found	/usr/include/boost/asio/error.hpp	/^  not_found,$/;"	e	enum:boost::asio::error::misc_errors
boost::asio::error::not_socket	/usr/include/boost/asio/error.hpp	/^  not_socket = BOOST_ASIO_SOCKET_ERROR(ENOTSOCK),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::no_buffer_space	/usr/include/boost/asio/error.hpp	/^  no_buffer_space = BOOST_ASIO_SOCKET_ERROR(ENOBUFS),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::no_data	/usr/include/boost/asio/error.hpp	/^  no_data = BOOST_ASIO_NETDB_ERROR(NO_DATA),$/;"	e	enum:boost::asio::error::netdb_errors
boost::asio::error::no_descriptors	/usr/include/boost/asio/error.hpp	/^  no_descriptors = BOOST_ASIO_SOCKET_ERROR(EMFILE),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::no_memory	/usr/include/boost/asio/error.hpp	/^  no_memory = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::no_permission	/usr/include/boost/asio/error.hpp	/^  no_permission = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::no_protocol_option	/usr/include/boost/asio/error.hpp	/^  no_protocol_option = BOOST_ASIO_SOCKET_ERROR(ENOPROTOOPT),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::no_recovery	/usr/include/boost/asio/error.hpp	/^  no_recovery = BOOST_ASIO_NETDB_ERROR(NO_RECOVERY)$/;"	e	enum:boost::asio::error::netdb_errors
boost::asio::error::operation_aborted	/usr/include/boost/asio/error.hpp	/^  operation_aborted = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::operation_not_supported	/usr/include/boost/asio/error.hpp	/^  operation_not_supported = BOOST_ASIO_SOCKET_ERROR(EOPNOTSUPP),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::service_not_found	/usr/include/boost/asio/error.hpp	/^  service_not_found = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::addrinfo_errors
boost::asio::error::shut_down	/usr/include/boost/asio/error.hpp	/^  shut_down = BOOST_ASIO_SOCKET_ERROR(ESHUTDOWN),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::socket_type_not_supported	/usr/include/boost/asio/error.hpp	/^  socket_type_not_supported = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::addrinfo_errors
boost::asio::error::ssl_category	/usr/include/boost/asio/error.hpp	/^static const boost::system::error_category& ssl_category$/;"	m	namespace:boost::asio::error
boost::asio::error::ssl_errors	/usr/include/boost/asio/error.hpp	/^enum ssl_errors$/;"	g	namespace:boost::asio::error
boost::asio::error::system_category	/usr/include/boost/asio/error.hpp	/^static const boost::system::error_category& system_category$/;"	m	namespace:boost::asio::error
boost::asio::error::timed_out	/usr/include/boost/asio/error.hpp	/^  timed_out = BOOST_ASIO_SOCKET_ERROR(ETIMEDOUT),$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::try_again	/usr/include/boost/asio/error.hpp	/^  try_again = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::basic_errors
boost::asio::error::would_block	/usr/include/boost/asio/error.hpp	/^  would_block = BOOST_ASIO_SOCKET_ERROR(EWOULDBLOCK)$/;"	e	enum:boost::asio::error::basic_errors
boost::asio::has_service	/usr/include/boost/asio/io_service.hpp	/^template <typename Service> bool has_service(io_service& ios);$/;"	p	namespace:boost::asio	signature:(io_service& ios)
boost::asio::invalid_service_owner	/usr/include/boost/asio/io_service.hpp	/^class invalid_service_owner$/;"	c	namespace:boost::asio	inherits:std::logic_error
boost::asio::invalid_service_owner::invalid_service_owner	/usr/include/boost/asio/io_service.hpp	/^  invalid_service_owner()$/;"	f	class:boost::asio::invalid_service_owner	access:public	signature:()
boost::asio::io_service	/usr/include/boost/asio/io_service.hpp	/^class io_service$/;"	c	namespace:boost::asio	inherits:noncopyable
boost::asio::io_service::add_service	/usr/include/boost/asio/io_service.hpp	/^  friend void add_service(io_service& ios, Service* svc);$/;"	p	class:boost::asio::io_service	access:friend	signature:(io_service& ios, Service* svc)
boost::asio::io_service::dispatch	/usr/include/boost/asio/io_service.hpp	/^  void dispatch(CompletionHandler handler);$/;"	p	class:boost::asio::io_service	access:public	signature:(CompletionHandler handler)
boost::asio::io_service::has_service	/usr/include/boost/asio/io_service.hpp	/^  friend bool has_service(io_service& ios);$/;"	p	class:boost::asio::io_service	access:friend	signature:(io_service& ios)
boost::asio::io_service::id	/usr/include/boost/asio/io_service.hpp	/^class io_service::id$/;"	c	class:boost::asio::io_service	inherits:noncopyable
boost::asio::io_service::id::id	/usr/include/boost/asio/io_service.hpp	/^  id() {}$/;"	f	class:boost::asio::io_service::id	access:public	signature:()
boost::asio::io_service::impl_	/usr/include/boost/asio/io_service.hpp	/^  impl_type& impl_;$/;"	m	class:boost::asio::io_service	access:private
boost::asio::io_service::impl_type	/usr/include/boost/asio/io_service.hpp	/^  typedef detail::win_iocp_io_service impl_type;$/;"	t	class:boost::asio::io_service	access:private
boost::asio::io_service::init_	/usr/include/boost/asio/io_service.hpp	/^  detail::signal_init<> init_;$/;"	m	class:boost::asio::io_service	access:private
boost::asio::io_service::init_	/usr/include/boost/asio/io_service.hpp	/^  detail::winsock_init<> init_;$/;"	m	class:boost::asio::io_service	access:private
boost::asio::io_service::io_service	/usr/include/boost/asio/io_service.hpp	/^  explicit io_service(std::size_t concurrency_hint);$/;"	p	class:boost::asio::io_service	access:public	signature:(std::size_t concurrency_hint)
boost::asio::io_service::io_service	/usr/include/boost/asio/io_service.hpp	/^  io_service();$/;"	p	class:boost::asio::io_service	access:public	signature:()
boost::asio::io_service::poll	/usr/include/boost/asio/io_service.hpp	/^  std::size_t poll();$/;"	p	class:boost::asio::io_service	access:public	signature:()
boost::asio::io_service::poll	/usr/include/boost/asio/io_service.hpp	/^  std::size_t poll(boost::system::error_code& ec);$/;"	p	class:boost::asio::io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::io_service::poll_one	/usr/include/boost/asio/io_service.hpp	/^  std::size_t poll_one();$/;"	p	class:boost::asio::io_service	access:public	signature:()
boost::asio::io_service::poll_one	/usr/include/boost/asio/io_service.hpp	/^  std::size_t poll_one(boost::system::error_code& ec);$/;"	p	class:boost::asio::io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::io_service::post	/usr/include/boost/asio/io_service.hpp	/^  void post(CompletionHandler handler);$/;"	p	class:boost::asio::io_service	access:public	signature:(CompletionHandler handler)
boost::asio::io_service::reset	/usr/include/boost/asio/io_service.hpp	/^  void reset();$/;"	p	class:boost::asio::io_service	access:public	signature:()
boost::asio::io_service::run	/usr/include/boost/asio/io_service.hpp	/^  std::size_t run();$/;"	p	class:boost::asio::io_service	access:public	signature:()
boost::asio::io_service::run	/usr/include/boost/asio/io_service.hpp	/^  std::size_t run(boost::system::error_code& ec);$/;"	p	class:boost::asio::io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::io_service::run_one	/usr/include/boost/asio/io_service.hpp	/^  std::size_t run_one();$/;"	p	class:boost::asio::io_service	access:public	signature:()
boost::asio::io_service::run_one	/usr/include/boost/asio/io_service.hpp	/^  std::size_t run_one(boost::system::error_code& ec);$/;"	p	class:boost::asio::io_service	access:public	signature:(boost::system::error_code& ec)
boost::asio::io_service::service	/usr/include/boost/asio/io_service.hpp	/^class io_service::service$/;"	c	class:boost::asio::io_service	inherits:noncopyable
boost::asio::io_service::service::get_io_service	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::io_service& get_io_service();$/;"	p	class:boost::asio::io_service::service	access:public	signature:()
boost::asio::io_service::service::id_	/usr/include/boost/asio/io_service.hpp	/^  const boost::asio::io_service::id* id_;$/;"	m	class:boost::asio::io_service::service	access:private
boost::asio::io_service::service::io_service	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::io_service& io_service();$/;"	p	class:boost::asio::io_service::service	access:public	signature:()
boost::asio::io_service::service::next_	/usr/include/boost/asio/io_service.hpp	/^  service* next_;$/;"	m	class:boost::asio::io_service::service	access:private
boost::asio::io_service::service::owner_	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::io_service& owner_;$/;"	m	class:boost::asio::io_service::service	access:private
boost::asio::io_service::service::service	/usr/include/boost/asio/io_service.hpp	/^  service(boost::asio::io_service& owner);$/;"	p	class:boost::asio::io_service::service	access:protected	signature:(boost::asio::io_service& owner)
boost::asio::io_service::service::shutdown_service	/usr/include/boost/asio/io_service.hpp	/^  virtual void shutdown_service() = 0;$/;"	p	class:boost::asio::io_service::service	access:private	signature:()
boost::asio::io_service::service::type_info_	/usr/include/boost/asio/io_service.hpp	/^  const std::type_info* type_info_;$/;"	m	class:boost::asio::io_service::service	access:private
boost::asio::io_service::service::~service	/usr/include/boost/asio/io_service.hpp	/^  virtual ~service();$/;"	p	class:boost::asio::io_service::service	access:protected	signature:()
boost::asio::io_service::service_registry_	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::detail::service_registry* service_registry_;$/;"	m	class:boost::asio::io_service	access:private
boost::asio::io_service::stop	/usr/include/boost/asio/io_service.hpp	/^  void stop();$/;"	p	class:boost::asio::io_service	access:public	signature:()
boost::asio::io_service::strand	/usr/include/boost/asio/strand.hpp	/^class io_service::strand$/;"	c	class:boost::asio::io_service
boost::asio::io_service::strand::dispatch	/usr/include/boost/asio/strand.hpp	/^  void dispatch(Handler handler)$/;"	f	class:boost::asio::io_service::strand	access:public	signature:(Handler handler)
boost::asio::io_service::strand::get_io_service	/usr/include/boost/asio/strand.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::io_service::strand	access:public	signature:()
boost::asio::io_service::strand::impl_	/usr/include/boost/asio/strand.hpp	/^  boost::asio::detail::strand_service::implementation_type impl_;$/;"	m	class:boost::asio::io_service::strand	access:private
boost::asio::io_service::strand::io_service	/usr/include/boost/asio/strand.hpp	/^  boost::asio::io_service& io_service()$/;"	f	class:boost::asio::io_service::strand	access:public	signature:()
boost::asio::io_service::strand::post	/usr/include/boost/asio/strand.hpp	/^  void post(Handler handler)$/;"	f	class:boost::asio::io_service::strand	access:public	signature:(Handler handler)
boost::asio::io_service::strand::service_	/usr/include/boost/asio/strand.hpp	/^  boost::asio::detail::strand_service& service_;$/;"	m	class:boost::asio::io_service::strand	access:private
boost::asio::io_service::strand::strand	/usr/include/boost/asio/strand.hpp	/^  explicit strand(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::io_service::strand	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::io_service::strand::wrap	/usr/include/boost/asio/strand.hpp	/^  wrap(Handler handler)$/;"	f	class:boost::asio::io_service::strand	access:public	signature:(Handler handler)
boost::asio::io_service::strand::~strand	/usr/include/boost/asio/strand.hpp	/^  ~strand()$/;"	f	class:boost::asio::io_service::strand	access:public	signature:()
boost::asio::io_service::use_service	/usr/include/boost/asio/io_service.hpp	/^  friend Service& use_service(io_service& ios);$/;"	p	class:boost::asio::io_service	access:friend	signature:(io_service& ios)
boost::asio::io_service::work	/usr/include/boost/asio/io_service.hpp	/^class io_service::work$/;"	c	class:boost::asio::io_service
boost::asio::io_service::work::get_io_service	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::io_service& get_io_service();$/;"	p	class:boost::asio::io_service::work	access:public	signature:()
boost::asio::io_service::work::io_service	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::io_service& io_service();$/;"	p	class:boost::asio::io_service::work	access:public	signature:()
boost::asio::io_service::work::io_service_	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::io_service::work	access:private
boost::asio::io_service::work::operator =	/usr/include/boost/asio/io_service.hpp	/^  void operator=(const work& other);$/;"	p	class:boost::asio::io_service::work	access:private	signature:(const work& other)
boost::asio::io_service::work::work	/usr/include/boost/asio/io_service.hpp	/^  explicit work(boost::asio::io_service& io_service);$/;"	p	class:boost::asio::io_service::work	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::io_service::work::work	/usr/include/boost/asio/io_service.hpp	/^  work(const work& other);$/;"	p	class:boost::asio::io_service::work	access:public	signature:(const work& other)
boost::asio::io_service::work::~work	/usr/include/boost/asio/io_service.hpp	/^  ~work();$/;"	p	class:boost::asio::io_service::work	access:public	signature:()
boost::asio::io_service::wrap	/usr/include/boost/asio/io_service.hpp	/^  wrap(Handler handler);$/;"	p	class:boost::asio::io_service	access:public	signature:(Handler handler)
boost::asio::io_service::~io_service	/usr/include/boost/asio/io_service.hpp	/^  ~io_service();$/;"	p	class:boost::asio::io_service	access:public	signature:()
boost::asio::ip	/usr/include/boost/asio/ip/address.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/address_v4.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/address_v6.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/basic_resolver.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/host_name.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/icmp.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/multicast.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/resolver_service.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/tcp.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/udp.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/unicast.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip	/usr/include/boost/asio/ip/v6_only.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
boost::asio::ip::address	/usr/include/boost/asio/ip/address.hpp	/^class address$/;"	c	namespace:boost::asio::ip
boost::asio::ip::address::address	/usr/include/boost/asio/ip/address.hpp	/^  address()$/;"	f	class:boost::asio::ip::address	access:public	signature:()
boost::asio::ip::address::address	/usr/include/boost/asio/ip/address.hpp	/^  address(const address& other)$/;"	f	class:boost::asio::ip::address	access:public	signature:(const address& other)
boost::asio::ip::address::address	/usr/include/boost/asio/ip/address.hpp	/^  address(const boost::asio::ip::address_v4& ipv4_address)$/;"	f	class:boost::asio::ip::address	access:public	signature:(const boost::asio::ip::address_v4& ipv4_address)
boost::asio::ip::address::address	/usr/include/boost/asio/ip/address.hpp	/^  address(const boost::asio::ip::address_v6& ipv6_address)$/;"	f	class:boost::asio::ip::address	access:public	signature:(const boost::asio::ip::address_v6& ipv6_address)
boost::asio::ip::address::from_string	/usr/include/boost/asio/ip/address.hpp	/^  static address from_string(const char* str)$/;"	f	class:boost::asio::ip::address	access:public	signature:(const char* str)
boost::asio::ip::address::from_string	/usr/include/boost/asio/ip/address.hpp	/^  static address from_string(const char* str, boost::system::error_code& ec)$/;"	f	class:boost::asio::ip::address	access:public	signature:(const char* str, boost::system::error_code& ec)
boost::asio::ip::address::from_string	/usr/include/boost/asio/ip/address.hpp	/^  static address from_string(const std::string& str)$/;"	f	class:boost::asio::ip::address	access:public	signature:(const std::string& str)
boost::asio::ip::address::from_string	/usr/include/boost/asio/ip/address.hpp	/^  static address from_string(const std::string& str,$/;"	f	class:boost::asio::ip::address	access:public	signature:(const std::string& str, boost::system::error_code& ec)
boost::asio::ip::address::ipv4	/usr/include/boost/asio/ip/address.hpp	/^  enum { ipv4, ipv6 } type_;$/;"	e	enum:boost::asio::ip::address::__anon26
boost::asio::ip::address::ipv4_address_	/usr/include/boost/asio/ip/address.hpp	/^  boost::asio::ip::address_v4 ipv4_address_;$/;"	m	class:boost::asio::ip::address	access:private
boost::asio::ip::address::ipv6	/usr/include/boost/asio/ip/address.hpp	/^  enum { ipv4, ipv6 } type_;$/;"	e	enum:boost::asio::ip::address::__anon26
boost::asio::ip::address::ipv6_address_	/usr/include/boost/asio/ip/address.hpp	/^  boost::asio::ip::address_v6 ipv6_address_;$/;"	m	class:boost::asio::ip::address	access:private
boost::asio::ip::address::is_v4	/usr/include/boost/asio/ip/address.hpp	/^  bool is_v4() const$/;"	f	class:boost::asio::ip::address	access:public	signature:() const
boost::asio::ip::address::is_v6	/usr/include/boost/asio/ip/address.hpp	/^  bool is_v6() const$/;"	f	class:boost::asio::ip::address	access:public	signature:() const
boost::asio::ip::address::operator !=	/usr/include/boost/asio/ip/address.hpp	/^  friend bool operator!=(const address& a1, const address& a2)$/;"	f	class:boost::asio::ip::address	access:friend	signature:(const address& a1, const address& a2)
boost::asio::ip::address::operator <	/usr/include/boost/asio/ip/address.hpp	/^  friend bool operator<(const address& a1, const address& a2)$/;"	f	class:boost::asio::ip::address	access:friend	signature:(const address& a1, const address& a2)
boost::asio::ip::address::operator =	/usr/include/boost/asio/ip/address.hpp	/^  address& operator=(const address& other)$/;"	f	class:boost::asio::ip::address	access:public	signature:(const address& other)
boost::asio::ip::address::operator =	/usr/include/boost/asio/ip/address.hpp	/^  address& operator=(const boost::asio::ip::address_v4& ipv4_address)$/;"	f	class:boost::asio::ip::address	access:public	signature:(const boost::asio::ip::address_v4& ipv4_address)
boost::asio::ip::address::operator =	/usr/include/boost/asio/ip/address.hpp	/^  address& operator=(const boost::asio::ip::address_v6& ipv6_address)$/;"	f	class:boost::asio::ip::address	access:public	signature:(const boost::asio::ip::address_v6& ipv6_address)
boost::asio::ip::address::operator ==	/usr/include/boost/asio/ip/address.hpp	/^  friend bool operator==(const address& a1, const address& a2)$/;"	f	class:boost::asio::ip::address	access:friend	signature:(const address& a1, const address& a2)
boost::asio::ip::address::to_string	/usr/include/boost/asio/ip/address.hpp	/^  std::string to_string() const$/;"	f	class:boost::asio::ip::address	access:public	signature:() const
boost::asio::ip::address::to_string	/usr/include/boost/asio/ip/address.hpp	/^  std::string to_string(boost::system::error_code& ec) const$/;"	f	class:boost::asio::ip::address	access:public	signature:(boost::system::error_code& ec) const
boost::asio::ip::address::to_v4	/usr/include/boost/asio/ip/address.hpp	/^  boost::asio::ip::address_v4 to_v4() const$/;"	f	class:boost::asio::ip::address	access:public	signature:() const
boost::asio::ip::address::to_v6	/usr/include/boost/asio/ip/address.hpp	/^  boost::asio::ip::address_v6 to_v6() const$/;"	f	class:boost::asio::ip::address	access:public	signature:() const
boost::asio::ip::address::type_	/usr/include/boost/asio/ip/address.hpp	/^  enum { ipv4, ipv6 } type_;$/;"	m	class:boost::asio::ip::address	typeref:enum:boost::asio::ip::address::__anon26	access:private
boost::asio::ip::address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^class address_v4$/;"	c	namespace:boost::asio::ip
boost::asio::ip::address_v4::address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^  address_v4()$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:()
boost::asio::ip::address_v4::address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^  address_v4(const address_v4& other)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const address_v4& other)
boost::asio::ip::address_v4::address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^  explicit address_v4(const bytes_type& bytes)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const bytes_type& bytes)
boost::asio::ip::address_v4::address_v4	/usr/include/boost/asio/ip/address_v4.hpp	/^  explicit address_v4(unsigned long addr)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(unsigned long addr)
boost::asio::ip::address_v4::addr_	/usr/include/boost/asio/ip/address_v4.hpp	/^  boost::asio::detail::in4_addr_type addr_;$/;"	m	class:boost::asio::ip::address_v4	access:private
boost::asio::ip::address_v4::any	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 any()$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:()
boost::asio::ip::address_v4::broadcast	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 broadcast()$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:()
boost::asio::ip::address_v4::broadcast	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 broadcast(const address_v4& addr, const address_v4& mask)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const address_v4& addr, const address_v4& mask)
boost::asio::ip::address_v4::bytes_type	/usr/include/boost/asio/ip/address_v4.hpp	/^  typedef boost::array<unsigned char, 4> bytes_type;$/;"	t	class:boost::asio::ip::address_v4	access:public
boost::asio::ip::address_v4::from_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 from_string(const char* str)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const char* str)
boost::asio::ip::address_v4::from_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 from_string(const char* str, boost::system::error_code& ec)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const char* str, boost::system::error_code& ec)
boost::asio::ip::address_v4::from_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 from_string(const std::string& str)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const std::string& str)
boost::asio::ip::address_v4::from_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 from_string(const std::string& str,$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const std::string& str, boost::system::error_code& ec)
boost::asio::ip::address_v4::is_class_a	/usr/include/boost/asio/ip/address_v4.hpp	/^  bool is_class_a() const$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:() const
boost::asio::ip::address_v4::is_class_b	/usr/include/boost/asio/ip/address_v4.hpp	/^  bool is_class_b() const$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:() const
boost::asio::ip::address_v4::is_class_c	/usr/include/boost/asio/ip/address_v4.hpp	/^  bool is_class_c() const$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:() const
boost::asio::ip::address_v4::is_multicast	/usr/include/boost/asio/ip/address_v4.hpp	/^  bool is_multicast() const$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:() const
boost::asio::ip::address_v4::loopback	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 loopback()$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:()
boost::asio::ip::address_v4::netmask	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 netmask(const address_v4& addr)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const address_v4& addr)
boost::asio::ip::address_v4::operator !=	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator!=(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
boost::asio::ip::address_v4::operator <	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator<(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
boost::asio::ip::address_v4::operator <=	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator<=(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
boost::asio::ip::address_v4::operator =	/usr/include/boost/asio/ip/address_v4.hpp	/^  address_v4& operator=(const address_v4& other)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const address_v4& other)
boost::asio::ip::address_v4::operator ==	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator==(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
boost::asio::ip::address_v4::operator >	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator>(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
boost::asio::ip::address_v4::operator >=	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator>=(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
boost::asio::ip::address_v4::to_bytes	/usr/include/boost/asio/ip/address_v4.hpp	/^  bytes_type to_bytes() const$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:() const
boost::asio::ip::address_v4::to_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  std::string to_string() const$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:() const
boost::asio::ip::address_v4::to_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  std::string to_string(boost::system::error_code& ec) const$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(boost::system::error_code& ec) const
boost::asio::ip::address_v4::to_ulong	/usr/include/boost/asio/ip/address_v4.hpp	/^  unsigned long to_ulong() const$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:() const
boost::asio::ip::address_v6	/usr/include/boost/asio/ip/address_v6.hpp	/^class address_v6$/;"	c	namespace:boost::asio::ip
boost::asio::ip::address_v6::address_v6	/usr/include/boost/asio/ip/address_v6.hpp	/^  address_v6()$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:()
boost::asio::ip::address_v6::address_v6	/usr/include/boost/asio/ip/address_v6.hpp	/^  address_v6(const address_v6& other)$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(const address_v6& other)
boost::asio::ip::address_v6::address_v6	/usr/include/boost/asio/ip/address_v6.hpp	/^  explicit address_v6(const bytes_type& bytes, unsigned long scope_id = 0)$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(const bytes_type& bytes, unsigned long scope_id = 0)
boost::asio::ip::address_v6::addr_	/usr/include/boost/asio/ip/address_v6.hpp	/^  boost::asio::detail::in6_addr_type addr_;$/;"	m	class:boost::asio::ip::address_v6	access:private
boost::asio::ip::address_v6::any	/usr/include/boost/asio/ip/address_v6.hpp	/^  static address_v6 any()$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:()
boost::asio::ip::address_v6::bytes_type	/usr/include/boost/asio/ip/address_v6.hpp	/^  typedef boost::array<unsigned char, 16> bytes_type;$/;"	t	class:boost::asio::ip::address_v6	access:public
boost::asio::ip::address_v6::from_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  static address_v6 from_string(const char* str)$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(const char* str)
boost::asio::ip::address_v6::from_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  static address_v6 from_string(const char* str, boost::system::error_code& ec)$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(const char* str, boost::system::error_code& ec)
boost::asio::ip::address_v6::from_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  static address_v6 from_string(const std::string& str)$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(const std::string& str)
boost::asio::ip::address_v6::from_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  static address_v6 from_string(const std::string& str,$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(const std::string& str, boost::system::error_code& ec)
boost::asio::ip::address_v6::is_link_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_link_local() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_loopback	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_loopback() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_multicast	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_multicast() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_multicast_global	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_multicast_global() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_multicast_link_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_multicast_link_local() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_multicast_node_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_multicast_node_local() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_multicast_org_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_multicast_org_local() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_multicast_site_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_multicast_site_local() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_site_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_site_local() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_unspecified	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_unspecified() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_v4_compatible	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_v4_compatible() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::is_v4_mapped	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_v4_mapped() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::loopback	/usr/include/boost/asio/ip/address_v6.hpp	/^  static address_v6 loopback()$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:()
boost::asio::ip::address_v6::operator !=	/usr/include/boost/asio/ip/address_v6.hpp	/^  friend bool operator!=(const address_v6& a1, const address_v6& a2)$/;"	f	class:boost::asio::ip::address_v6	access:friend	signature:(const address_v6& a1, const address_v6& a2)
boost::asio::ip::address_v6::operator <	/usr/include/boost/asio/ip/address_v6.hpp	/^  friend bool operator<(const address_v6& a1, const address_v6& a2)$/;"	f	class:boost::asio::ip::address_v6	access:friend	signature:(const address_v6& a1, const address_v6& a2)
boost::asio::ip::address_v6::operator <=	/usr/include/boost/asio/ip/address_v6.hpp	/^  friend bool operator<=(const address_v6& a1, const address_v6& a2)$/;"	f	class:boost::asio::ip::address_v6	access:friend	signature:(const address_v6& a1, const address_v6& a2)
boost::asio::ip::address_v6::operator =	/usr/include/boost/asio/ip/address_v6.hpp	/^  address_v6& operator=(const address_v6& other)$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(const address_v6& other)
boost::asio::ip::address_v6::operator ==	/usr/include/boost/asio/ip/address_v6.hpp	/^  friend bool operator==(const address_v6& a1, const address_v6& a2)$/;"	f	class:boost::asio::ip::address_v6	access:friend	signature:(const address_v6& a1, const address_v6& a2)
boost::asio::ip::address_v6::operator >	/usr/include/boost/asio/ip/address_v6.hpp	/^  friend bool operator>(const address_v6& a1, const address_v6& a2)$/;"	f	class:boost::asio::ip::address_v6	access:friend	signature:(const address_v6& a1, const address_v6& a2)
boost::asio::ip::address_v6::operator >=	/usr/include/boost/asio/ip/address_v6.hpp	/^  friend bool operator>=(const address_v6& a1, const address_v6& a2)$/;"	f	class:boost::asio::ip::address_v6	access:friend	signature:(const address_v6& a1, const address_v6& a2)
boost::asio::ip::address_v6::scope_id	/usr/include/boost/asio/ip/address_v6.hpp	/^  unsigned long scope_id() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::scope_id	/usr/include/boost/asio/ip/address_v6.hpp	/^  void scope_id(unsigned long id)$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(unsigned long id)
boost::asio::ip::address_v6::scope_id_	/usr/include/boost/asio/ip/address_v6.hpp	/^  unsigned long scope_id_;$/;"	m	class:boost::asio::ip::address_v6	access:private
boost::asio::ip::address_v6::to_bytes	/usr/include/boost/asio/ip/address_v6.hpp	/^  bytes_type to_bytes() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::to_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  std::string to_string() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::to_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  std::string to_string(boost::system::error_code& ec) const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(boost::system::error_code& ec) const
boost::asio::ip::address_v6::to_v4	/usr/include/boost/asio/ip/address_v6.hpp	/^  address_v4 to_v4() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
boost::asio::ip::address_v6::v4_compatible	/usr/include/boost/asio/ip/address_v6.hpp	/^  static address_v6 v4_compatible(const address_v4& addr)$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(const address_v4& addr)
boost::asio::ip::address_v6::v4_mapped	/usr/include/boost/asio/ip/address_v6.hpp	/^  static address_v6 v4_mapped(const address_v4& addr)$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(const address_v4& addr)
boost::asio::ip::basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^class basic_endpoint$/;"	c	namespace:boost::asio::ip
boost::asio::ip::basic_endpoint::address	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  boost::asio::ip::address address() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
boost::asio::ip::basic_endpoint::address	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  void address(const boost::asio::ip::address& addr)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(const boost::asio::ip::address& addr)
boost::asio::ip::basic_endpoint::basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint()$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:()
boost::asio::ip::basic_endpoint::basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint(const basic_endpoint& other)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(const basic_endpoint& other)
boost::asio::ip::basic_endpoint::basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint(const boost::asio::ip::address& addr, unsigned short port_num)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(const boost::asio::ip::address& addr, unsigned short port_num)
boost::asio::ip::basic_endpoint::basic_endpoint	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint(const InternetProtocol& protocol, unsigned short port_num)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(const InternetProtocol& protocol, unsigned short port_num)
boost::asio::ip::basic_endpoint::capacity	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  std::size_t capacity() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
boost::asio::ip::basic_endpoint::data	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  const data_type* data() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
boost::asio::ip::basic_endpoint::data	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  data_type* data()$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:()
boost::asio::ip::basic_endpoint::data_	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  } data_;$/;"	m	class:boost::asio::ip::basic_endpoint	typeref:union:boost::asio::ip::basic_endpoint::data_union	access:private
boost::asio::ip::basic_endpoint::data_type	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  typedef boost::asio::detail::socket_addr_type data_type;$/;"	t	class:boost::asio::ip::basic_endpoint	access:public
boost::asio::ip::basic_endpoint::data_type	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  typedef implementation_defined data_type;$/;"	t	class:boost::asio::ip::basic_endpoint	access:public
boost::asio::ip::basic_endpoint::data_union	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  union data_union$/;"	u	class:boost::asio::ip::basic_endpoint	access:private
boost::asio::ip::basic_endpoint::data_union::base	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^    boost::asio::detail::socket_addr_type base;$/;"	m	union:boost::asio::ip::basic_endpoint::data_union	access:public
boost::asio::ip::basic_endpoint::data_union::storage	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^    boost::asio::detail::sockaddr_storage_type storage;$/;"	m	union:boost::asio::ip::basic_endpoint::data_union	access:public
boost::asio::ip::basic_endpoint::data_union::v4	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^    boost::asio::detail::sockaddr_in4_type v4;$/;"	m	union:boost::asio::ip::basic_endpoint::data_union	access:public
boost::asio::ip::basic_endpoint::data_union::v6	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^    boost::asio::detail::sockaddr_in6_type v6;$/;"	m	union:boost::asio::ip::basic_endpoint::data_union	access:public
boost::asio::ip::basic_endpoint::is_v4	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  bool is_v4() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:private	signature:() const
boost::asio::ip::basic_endpoint::operator !=	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  friend bool operator!=(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:boost::asio::ip::basic_endpoint	access:friend	signature:(const basic_endpoint<InternetProtocol>& e1, const basic_endpoint<InternetProtocol>& e2)
boost::asio::ip::basic_endpoint::operator <	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  friend bool operator<(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:boost::asio::ip::basic_endpoint	access:friend	signature:(const basic_endpoint<InternetProtocol>& e1, const basic_endpoint<InternetProtocol>& e2)
boost::asio::ip::basic_endpoint::operator =	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint& operator=(const basic_endpoint& other)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(const basic_endpoint& other)
boost::asio::ip::basic_endpoint::operator ==	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  friend bool operator==(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:boost::asio::ip::basic_endpoint	access:friend	signature:(const basic_endpoint<InternetProtocol>& e1, const basic_endpoint<InternetProtocol>& e2)
boost::asio::ip::basic_endpoint::port	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  unsigned short port() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
boost::asio::ip::basic_endpoint::port	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  void port(unsigned short port_num)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(unsigned short port_num)
boost::asio::ip::basic_endpoint::protocol	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  protocol_type protocol() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
boost::asio::ip::basic_endpoint::protocol_type	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:boost::asio::ip::basic_endpoint	access:public
boost::asio::ip::basic_endpoint::resize	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  void resize(std::size_t size)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(std::size_t size)
boost::asio::ip::basic_endpoint::size	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  std::size_t size() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
boost::asio::ip::basic_resolver	/usr/include/boost/asio/ip/basic_resolver.hpp	/^class basic_resolver$/;"	c	namespace:boost::asio::ip	inherits:basic_io_object
boost::asio::ip::basic_resolver::async_resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  void async_resolve(const endpoint_type& e, ResolveHandler handler)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const endpoint_type& e, ResolveHandler handler)
boost::asio::ip::basic_resolver::async_resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  void async_resolve(const query& q, ResolveHandler handler)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const query& q, ResolveHandler handler)
boost::asio::ip::basic_resolver::basic_resolver	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  explicit basic_resolver(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::ip::basic_resolver::cancel	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  void cancel()$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:()
boost::asio::ip::basic_resolver::endpoint_type	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  typedef typename InternetProtocol::endpoint endpoint_type;$/;"	t	class:boost::asio::ip::basic_resolver	access:public
boost::asio::ip::basic_resolver::iterator	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  typedef typename InternetProtocol::resolver_iterator iterator;$/;"	t	class:boost::asio::ip::basic_resolver	access:public
boost::asio::ip::basic_resolver::protocol_type	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:boost::asio::ip::basic_resolver	access:public
boost::asio::ip::basic_resolver::query	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  typedef typename InternetProtocol::resolver_query query;$/;"	t	class:boost::asio::ip::basic_resolver	access:public
boost::asio::ip::basic_resolver::resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  iterator resolve(const endpoint_type& e)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const endpoint_type& e)
boost::asio::ip::basic_resolver::resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  iterator resolve(const endpoint_type& e, boost::system::error_code& ec)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const endpoint_type& e, boost::system::error_code& ec)
boost::asio::ip::basic_resolver::resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  iterator resolve(const query& q)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const query& q)
boost::asio::ip::basic_resolver::resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  iterator resolve(const query& q, boost::system::error_code& ec)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const query& q, boost::system::error_code& ec)
boost::asio::ip::basic_resolver_entry	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^class basic_resolver_entry$/;"	c	namespace:boost::asio::ip
boost::asio::ip::basic_resolver_entry::basic_resolver_entry	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  basic_resolver_entry()$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:()
boost::asio::ip::basic_resolver_entry::basic_resolver_entry	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  basic_resolver_entry(const endpoint_type& endpoint,$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:(const endpoint_type& endpoint, const std::string& host_name, const std::string& service_name)
boost::asio::ip::basic_resolver_entry::endpoint	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  endpoint_type endpoint() const$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:() const
boost::asio::ip::basic_resolver_entry::endpoint_	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  endpoint_type endpoint_;$/;"	m	class:boost::asio::ip::basic_resolver_entry	access:private
boost::asio::ip::basic_resolver_entry::endpoint_type	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  typedef typename InternetProtocol::endpoint endpoint_type;$/;"	t	class:boost::asio::ip::basic_resolver_entry	access:public
boost::asio::ip::basic_resolver_entry::host_name	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  std::string host_name() const$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:() const
boost::asio::ip::basic_resolver_entry::host_name_	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  std::string host_name_;$/;"	m	class:boost::asio::ip::basic_resolver_entry	access:private
boost::asio::ip::basic_resolver_entry::operator endpoint_type	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  operator endpoint_type() const$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:() const
boost::asio::ip::basic_resolver_entry::protocol_type	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:boost::asio::ip::basic_resolver_entry	access:public
boost::asio::ip::basic_resolver_entry::service_name	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  std::string service_name() const$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:() const
boost::asio::ip::basic_resolver_entry::service_name_	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  std::string service_name_;$/;"	m	class:boost::asio::ip::basic_resolver_entry	access:private
boost::asio::ip::basic_resolver_iterator	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^class basic_resolver_iterator$/;"	c	namespace:boost::asio::ip	inherits:boost::iterator_facade
boost::asio::ip::basic_resolver_iterator::basic_resolver_iterator	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  basic_resolver_iterator()$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:public	signature:()
boost::asio::ip::basic_resolver_iterator::create	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  static basic_resolver_iterator create($/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:public	signature:( boost::asio::detail::addrinfo_type* address_info, const std::string& host_name, const std::string& service_name)
boost::asio::ip::basic_resolver_iterator::create	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  static basic_resolver_iterator create($/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:public	signature:( const typename InternetProtocol::endpoint& endpoint, const std::string& host_name, const std::string& service_name)
boost::asio::ip::basic_resolver_iterator::dereference	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  const basic_resolver_entry<InternetProtocol>& dereference() const$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:private	signature:() const
boost::asio::ip::basic_resolver_iterator::equal	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  bool equal(const basic_resolver_iterator& other) const$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:private	signature:(const basic_resolver_iterator& other) const
boost::asio::ip::basic_resolver_iterator::increment	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  void increment()$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:private	signature:()
boost::asio::ip::basic_resolver_iterator::iter_	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  boost::optional<values_iter_type> iter_;$/;"	m	class:boost::asio::ip::basic_resolver_iterator	access:private
boost::asio::ip::basic_resolver_iterator::values_	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  boost::shared_ptr<values_type> values_;$/;"	m	class:boost::asio::ip::basic_resolver_iterator	access:private
boost::asio::ip::basic_resolver_iterator::values_iter_type	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  typedef typename values_type::const_iterator values_iter_type;$/;"	t	class:boost::asio::ip::basic_resolver_iterator	access:private
boost::asio::ip::basic_resolver_iterator::values_type	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  typedef std::vector<basic_resolver_entry<InternetProtocol> > values_type;$/;"	t	class:boost::asio::ip::basic_resolver_iterator	access:private
boost::asio::ip::basic_resolver_query	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^class basic_resolver_query$/;"	c	namespace:boost::asio::ip	inherits:resolver_query_base
boost::asio::ip::basic_resolver_query::basic_resolver_query	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  basic_resolver_query(const protocol_type& protocol,$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:(const protocol_type& protocol, const std::string& host_name, const std::string& service_name, int flags = address_configured)
boost::asio::ip::basic_resolver_query::basic_resolver_query	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  basic_resolver_query(const protocol_type& protocol,$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:(const protocol_type& protocol, const std::string& service_name, int flags = passive | address_configured)
boost::asio::ip::basic_resolver_query::basic_resolver_query	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  basic_resolver_query(const std::string& host_name,$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:(const std::string& host_name, const std::string& service_name, int flags = address_configured)
boost::asio::ip::basic_resolver_query::basic_resolver_query	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  basic_resolver_query(const std::string& service_name,$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:(const std::string& service_name, int flags = passive | address_configured)
boost::asio::ip::basic_resolver_query::hints	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  const boost::asio::detail::addrinfo_type& hints() const$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:() const
boost::asio::ip::basic_resolver_query::hints_	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  boost::asio::detail::addrinfo_type hints_;$/;"	m	class:boost::asio::ip::basic_resolver_query	access:private
boost::asio::ip::basic_resolver_query::host_name	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  std::string host_name() const$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:() const
boost::asio::ip::basic_resolver_query::host_name_	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  std::string host_name_;$/;"	m	class:boost::asio::ip::basic_resolver_query	access:private
boost::asio::ip::basic_resolver_query::protocol_type	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:boost::asio::ip::basic_resolver_query	access:public
boost::asio::ip::basic_resolver_query::service_name	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  std::string service_name() const$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:() const
boost::asio::ip::basic_resolver_query::service_name_	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  std::string service_name_;$/;"	m	class:boost::asio::ip::basic_resolver_query	access:private
boost::asio::ip::detail	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ip
boost::asio::ip::detail::socket_option	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^namespace socket_option {$/;"	n	namespace:boost::asio::ip::detail
boost::asio::ip::detail::socket_option::multicast_enable_loopback	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^class multicast_enable_loopback$/;"	c	namespace:boost::asio::ip::detail::socket_option
boost::asio::ip::detail::socket_option::multicast_enable_loopback::data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  const void* data(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_enable_loopback::data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  void* data(const Protocol& protocol)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol)
boost::asio::ip::detail::socket_option::multicast_enable_loopback::ipv4_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  ipv4_value_type ipv4_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:private
boost::asio::ip::detail::socket_option::multicast_enable_loopback::ipv4_value_type	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  typedef unsigned char ipv4_value_type;$/;"	t	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public
boost::asio::ip::detail::socket_option::multicast_enable_loopback::ipv6_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  ipv6_value_type ipv6_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:private
boost::asio::ip::detail::socket_option::multicast_enable_loopback::ipv6_value_type	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  typedef unsigned char ipv6_value_type;$/;"	t	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public
boost::asio::ip::detail::socket_option::multicast_enable_loopback::level	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_enable_loopback::multicast_enable_loopback	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit multicast_enable_loopback(bool v)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(bool v)
boost::asio::ip::detail::socket_option::multicast_enable_loopback::multicast_enable_loopback	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  multicast_enable_loopback()$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:()
boost::asio::ip::detail::socket_option::multicast_enable_loopback::name	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_enable_loopback::operator !	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  bool operator!() const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:() const
boost::asio::ip::detail::socket_option::multicast_enable_loopback::operator =	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  multicast_enable_loopback& operator=(bool v)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(bool v)
boost::asio::ip::detail::socket_option::multicast_enable_loopback::operator bool	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  operator bool() const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:() const
boost::asio::ip::detail::socket_option::multicast_enable_loopback::resize	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  void resize(const Protocol& protocol, std::size_t s)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol, std::size_t s)
boost::asio::ip::detail::socket_option::multicast_enable_loopback::size	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  std::size_t size(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_enable_loopback::value	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  bool value() const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:() const
boost::asio::ip::detail::socket_option::multicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^class multicast_hops$/;"	c	namespace:boost::asio::ip::detail::socket_option
boost::asio::ip::detail::socket_option::multicast_hops::data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  const void* data(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_hops::data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  void* data(const Protocol& protocol)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol)
boost::asio::ip::detail::socket_option::multicast_hops::ipv4_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  ipv4_value_type ipv4_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_hops	access:private
boost::asio::ip::detail::socket_option::multicast_hops::ipv4_value_type	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  typedef int ipv4_value_type;$/;"	t	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public
boost::asio::ip::detail::socket_option::multicast_hops::ipv6_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  ipv6_value_type ipv6_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_hops	access:private
boost::asio::ip::detail::socket_option::multicast_hops::ipv6_value_type	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  typedef int ipv6_value_type;$/;"	t	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public
boost::asio::ip::detail::socket_option::multicast_hops::level	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_hops::multicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit multicast_hops(int v)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(int v)
boost::asio::ip::detail::socket_option::multicast_hops::multicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  multicast_hops()$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:()
boost::asio::ip::detail::socket_option::multicast_hops::name	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_hops::operator =	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  multicast_hops& operator=(int v)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(int v)
boost::asio::ip::detail::socket_option::multicast_hops::resize	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  void resize(const Protocol& protocol, std::size_t s)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol, std::size_t s)
boost::asio::ip::detail::socket_option::multicast_hops::size	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  std::size_t size(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_hops::value	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int value() const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:() const
boost::asio::ip::detail::socket_option::multicast_request	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^class multicast_request$/;"	c	namespace:boost::asio::ip::detail::socket_option
boost::asio::ip::detail::socket_option::multicast_request::data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  const void* data(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_request::ipv4_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  boost::asio::detail::in4_mreq_type ipv4_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_request	access:private
boost::asio::ip::detail::socket_option::multicast_request::ipv6_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  boost::asio::detail::in6_mreq_type ipv6_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_request	access:private
boost::asio::ip::detail::socket_option::multicast_request::level	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_request::multicast_request	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit multicast_request($/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:( const boost::asio::ip::address_v4& multicast_address, const boost::asio::ip::address_v4& network_interface = boost::asio::ip::address_v4::any())
boost::asio::ip::detail::socket_option::multicast_request::multicast_request	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit multicast_request($/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:( const boost::asio::ip::address_v6& multicast_address, unsigned long network_interface = 0)
boost::asio::ip::detail::socket_option::multicast_request::multicast_request	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit multicast_request(const boost::asio::ip::address& multicast_address)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:(const boost::asio::ip::address& multicast_address)
boost::asio::ip::detail::socket_option::multicast_request::multicast_request	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  multicast_request()$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:()
boost::asio::ip::detail::socket_option::multicast_request::name	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::multicast_request::size	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  std::size_t size(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::network_interface	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^class network_interface$/;"	c	namespace:boost::asio::ip::detail::socket_option
boost::asio::ip::detail::socket_option::network_interface::data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  const void* data(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::network_interface::ipv4_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  boost::asio::detail::in4_addr_type ipv4_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::network_interface	access:private
boost::asio::ip::detail::socket_option::network_interface::ipv6_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  unsigned int ipv6_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::network_interface	access:private
boost::asio::ip::detail::socket_option::network_interface::level	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::network_interface::name	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::network_interface::network_interface	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit network_interface(const boost::asio::ip::address_v4& ipv4_interface)$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(const boost::asio::ip::address_v4& ipv4_interface)
boost::asio::ip::detail::socket_option::network_interface::network_interface	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit network_interface(unsigned int ipv6_interface)$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(unsigned int ipv6_interface)
boost::asio::ip::detail::socket_option::network_interface::network_interface	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  network_interface()$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:()
boost::asio::ip::detail::socket_option::network_interface::size	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  std::size_t size(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::unicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^class unicast_hops$/;"	c	namespace:boost::asio::ip::detail::socket_option
boost::asio::ip::detail::socket_option::unicast_hops::data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  const int* data(const Protocol&) const$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol&) const
boost::asio::ip::detail::socket_option::unicast_hops::data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int* data(const Protocol&)$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol&)
boost::asio::ip::detail::socket_option::unicast_hops::level	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::unicast_hops::name	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol& protocol) const
boost::asio::ip::detail::socket_option::unicast_hops::operator =	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  unicast_hops& operator=(int v)$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(int v)
boost::asio::ip::detail::socket_option::unicast_hops::resize	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  void resize(const Protocol&, std::size_t s)$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol&, std::size_t s)
boost::asio::ip::detail::socket_option::unicast_hops::size	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  std::size_t size(const Protocol&) const$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol&) const
boost::asio::ip::detail::socket_option::unicast_hops::unicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit unicast_hops(int v)$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(int v)
boost::asio::ip::detail::socket_option::unicast_hops::unicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  unicast_hops()$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:()
boost::asio::ip::detail::socket_option::unicast_hops::value	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int value() const$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:() const
boost::asio::ip::detail::socket_option::unicast_hops::value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int value_;$/;"	m	class:boost::asio::ip::detail::socket_option::unicast_hops	access:private
boost::asio::ip::host_name	/usr/include/boost/asio/ip/host_name.hpp	/^inline std::string host_name()$/;"	f	namespace:boost::asio::ip	signature:()
boost::asio::ip::host_name	/usr/include/boost/asio/ip/host_name.hpp	/^inline std::string host_name(boost::system::error_code& ec)$/;"	f	namespace:boost::asio::ip	signature:(boost::system::error_code& ec)
boost::asio::ip::host_name	/usr/include/boost/asio/ip/host_name.hpp	/^std::string host_name();$/;"	p	namespace:boost::asio::ip	signature:()
boost::asio::ip::host_name	/usr/include/boost/asio/ip/host_name.hpp	/^std::string host_name(boost::system::error_code& ec);$/;"	p	namespace:boost::asio::ip	signature:(boost::system::error_code& ec)
boost::asio::ip::icmp	/usr/include/boost/asio/ip/icmp.hpp	/^class icmp$/;"	c	namespace:boost::asio::ip
boost::asio::ip::icmp::endpoint	/usr/include/boost/asio/ip/icmp.hpp	/^  typedef basic_endpoint<icmp> endpoint;$/;"	t	class:boost::asio::ip::icmp	access:public
boost::asio::ip::icmp::family	/usr/include/boost/asio/ip/icmp.hpp	/^  int family() const$/;"	f	class:boost::asio::ip::icmp	access:public	signature:() const
boost::asio::ip::icmp::family_	/usr/include/boost/asio/ip/icmp.hpp	/^  int family_;$/;"	m	class:boost::asio::ip::icmp	access:private
boost::asio::ip::icmp::icmp	/usr/include/boost/asio/ip/icmp.hpp	/^  explicit icmp(int protocol, int family)$/;"	f	class:boost::asio::ip::icmp	access:private	signature:(int protocol, int family)
boost::asio::ip::icmp::operator !=	/usr/include/boost/asio/ip/icmp.hpp	/^  friend bool operator!=(const icmp& p1, const icmp& p2)$/;"	f	class:boost::asio::ip::icmp	access:friend	signature:(const icmp& p1, const icmp& p2)
boost::asio::ip::icmp::operator ==	/usr/include/boost/asio/ip/icmp.hpp	/^  friend bool operator==(const icmp& p1, const icmp& p2)$/;"	f	class:boost::asio::ip::icmp	access:friend	signature:(const icmp& p1, const icmp& p2)
boost::asio::ip::icmp::protocol	/usr/include/boost/asio/ip/icmp.hpp	/^  int protocol() const$/;"	f	class:boost::asio::ip::icmp	access:public	signature:() const
boost::asio::ip::icmp::protocol_	/usr/include/boost/asio/ip/icmp.hpp	/^  int protocol_;$/;"	m	class:boost::asio::ip::icmp	access:private
boost::asio::ip::icmp::resolver	/usr/include/boost/asio/ip/icmp.hpp	/^  typedef basic_resolver<icmp> resolver;$/;"	t	class:boost::asio::ip::icmp	access:public
boost::asio::ip::icmp::resolver_iterator	/usr/include/boost/asio/ip/icmp.hpp	/^  typedef basic_resolver_iterator<icmp> resolver_iterator;$/;"	t	class:boost::asio::ip::icmp	access:public
boost::asio::ip::icmp::resolver_query	/usr/include/boost/asio/ip/icmp.hpp	/^  typedef basic_resolver_query<icmp> resolver_query;$/;"	t	class:boost::asio::ip::icmp	access:public
boost::asio::ip::icmp::socket	/usr/include/boost/asio/ip/icmp.hpp	/^  typedef basic_raw_socket<icmp> socket;$/;"	t	class:boost::asio::ip::icmp	access:public
boost::asio::ip::icmp::type	/usr/include/boost/asio/ip/icmp.hpp	/^  int type() const$/;"	f	class:boost::asio::ip::icmp	access:public	signature:() const
boost::asio::ip::icmp::v4	/usr/include/boost/asio/ip/icmp.hpp	/^  static icmp v4()$/;"	f	class:boost::asio::ip::icmp	access:public	signature:()
boost::asio::ip::icmp::v6	/usr/include/boost/asio/ip/icmp.hpp	/^  static icmp v6()$/;"	f	class:boost::asio::ip::icmp	access:public	signature:()
boost::asio::ip::multicast	/usr/include/boost/asio/ip/multicast.hpp	/^namespace multicast {$/;"	n	namespace:boost::asio::ip
boost::asio::ip::multicast::enable_loopback	/usr/include/boost/asio/ip/multicast.hpp	/^  enable_loopback;$/;"	t	namespace:boost::asio::ip::multicast
boost::asio::ip::multicast::enable_loopback	/usr/include/boost/asio/ip/multicast.hpp	/^typedef implementation_defined enable_loopback;$/;"	t	namespace:boost::asio::ip::multicast
boost::asio::ip::multicast::hops	/usr/include/boost/asio/ip/multicast.hpp	/^  IPPROTO_IP, IP_MULTICAST_TTL, IPPROTO_IPV6, IPV6_MULTICAST_HOPS> hops;$/;"	t	namespace:boost::asio::ip::multicast
boost::asio::ip::multicast::hops	/usr/include/boost/asio/ip/multicast.hpp	/^typedef implementation_defined hops;$/;"	t	namespace:boost::asio::ip::multicast
boost::asio::ip::multicast::join_group	/usr/include/boost/asio/ip/multicast.hpp	/^typedef implementation_defined join_group;$/;"	t	namespace:boost::asio::ip::multicast
boost::asio::ip::multicast::leave_group	/usr/include/boost/asio/ip/multicast.hpp	/^  IPPROTO_IP, IP_DROP_MEMBERSHIP, IPPROTO_IPV6, IPV6_LEAVE_GROUP> leave_group;$/;"	t	namespace:boost::asio::ip::multicast
boost::asio::ip::multicast::leave_group	/usr/include/boost/asio/ip/multicast.hpp	/^typedef implementation_defined leave_group;$/;"	t	namespace:boost::asio::ip::multicast
boost::asio::ip::multicast::outbound_interface	/usr/include/boost/asio/ip/multicast.hpp	/^  outbound_interface;$/;"	t	namespace:boost::asio::ip::multicast
boost::asio::ip::multicast::outbound_interface	/usr/include/boost/asio/ip/multicast.hpp	/^typedef implementation_defined outbound_interface;$/;"	t	namespace:boost::asio::ip::multicast
boost::asio::ip::operator <<	/usr/include/boost/asio/ip/address.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const address& addr)
boost::asio::ip::operator <<	/usr/include/boost/asio/ip/address_v4.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const address_v4& addr)
boost::asio::ip::operator <<	/usr/include/boost/asio/ip/address_v6.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const address_v6& addr)
boost::asio::ip::operator <<	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const basic_endpoint<InternetProtocol>& endpoint)
boost::asio::ip::operator <<	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^std::ostream& operator<<(std::ostream& os,$/;"	f	namespace:boost::asio::ip	signature:(std::ostream& os, const basic_endpoint<InternetProtocol>& endpoint)
boost::asio::ip::resolver_query_base	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^class resolver_query_base$/;"	c	namespace:boost::asio::ip
boost::asio::ip::resolver_query_base::address_configured	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const int address_configured = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
boost::asio::ip::resolver_query_base::all_matching	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const int all_matching = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
boost::asio::ip::resolver_query_base::canonical_name	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const int canonical_name = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
boost::asio::ip::resolver_query_base::dummy_	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  char dummy_;$/;"	m	class:boost::asio::ip::resolver_query_base	access:private
boost::asio::ip::resolver_query_base::numeric_host	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const int numeric_host = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
boost::asio::ip::resolver_query_base::numeric_service	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const int numeric_service = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
boost::asio::ip::resolver_query_base::passive	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const int passive = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
boost::asio::ip::resolver_query_base::v4_mapped	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const int v4_mapped = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
boost::asio::ip::resolver_query_base::~resolver_query_base	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  ~resolver_query_base()$/;"	f	class:boost::asio::ip::resolver_query_base	access:protected	signature:()
boost::asio::ip::resolver_service	/usr/include/boost/asio/ip/resolver_service.hpp	/^class resolver_service$/;"	c	namespace:boost::asio::ip	inherits:boost::asio::io_service::service
boost::asio::ip::resolver_service::async_resolve	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void async_resolve(implementation_type& impl, const endpoint_type& endpoint,$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, ResolveHandler handler)
boost::asio::ip::resolver_service::async_resolve	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void async_resolve(implementation_type& impl, const query_type& query,$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl, const query_type& query, Handler handler)
boost::asio::ip::resolver_service::cancel	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void cancel(implementation_type& impl)$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl)
boost::asio::ip::resolver_service::construct	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl)
boost::asio::ip::resolver_service::destroy	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl)
boost::asio::ip::resolver_service::endpoint_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef typename InternetProtocol::endpoint endpoint_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
boost::asio::ip::resolver_service::id	/usr/include/boost/asio/ip/resolver_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::ip::resolver_service	access:public
boost::asio::ip::resolver_service::implementation_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
boost::asio::ip::resolver_service::implementation_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
boost::asio::ip::resolver_service::iterator_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef typename InternetProtocol::resolver_iterator iterator_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
boost::asio::ip::resolver_service::protocol_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
boost::asio::ip::resolver_service::query_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef typename InternetProtocol::resolver_query query_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
boost::asio::ip::resolver_service::resolve	/usr/include/boost/asio/ip/resolver_service.hpp	/^  iterator_type resolve(implementation_type& impl, const query_type& query,$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl, const query_type& query, boost::system::error_code& ec)
boost::asio::ip::resolver_service::resolve	/usr/include/boost/asio/ip/resolver_service.hpp	/^  iterator_type resolve(implementation_type& impl,$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
boost::asio::ip::resolver_service::resolver_service	/usr/include/boost/asio/ip/resolver_service.hpp	/^  explicit resolver_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::ip::resolver_service::service_impl_	/usr/include/boost/asio/ip/resolver_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::ip::resolver_service	access:private
boost::asio::ip::resolver_service::service_impl_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^    service_impl_type;$/;"	t	class:boost::asio::ip::resolver_service	access:private
boost::asio::ip::resolver_service::shutdown_service	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:()
boost::asio::ip::tcp	/usr/include/boost/asio/ip/tcp.hpp	/^class tcp$/;"	c	namespace:boost::asio::ip
boost::asio::ip::tcp::acceptor	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_socket_acceptor<tcp> acceptor;$/;"	t	class:boost::asio::ip::tcp	access:public
boost::asio::ip::tcp::endpoint	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_endpoint<tcp> endpoint;$/;"	t	class:boost::asio::ip::tcp	access:public
boost::asio::ip::tcp::family	/usr/include/boost/asio/ip/tcp.hpp	/^  int family() const$/;"	f	class:boost::asio::ip::tcp	access:public	signature:() const
boost::asio::ip::tcp::family_	/usr/include/boost/asio/ip/tcp.hpp	/^  int family_;$/;"	m	class:boost::asio::ip::tcp	access:private
boost::asio::ip::tcp::iostream	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_socket_iostream<tcp> iostream;$/;"	t	class:boost::asio::ip::tcp	access:public
boost::asio::ip::tcp::no_delay	/usr/include/boost/asio/ip/tcp.hpp	/^    IPPROTO_TCP, TCP_NODELAY> no_delay;$/;"	t	class:boost::asio::ip::tcp	access:public
boost::asio::ip::tcp::no_delay	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef implementation_defined no_delay;$/;"	t	class:boost::asio::ip::tcp	access:public
boost::asio::ip::tcp::operator !=	/usr/include/boost/asio/ip/tcp.hpp	/^  friend bool operator!=(const tcp& p1, const tcp& p2)$/;"	f	class:boost::asio::ip::tcp	access:friend	signature:(const tcp& p1, const tcp& p2)
boost::asio::ip::tcp::operator ==	/usr/include/boost/asio/ip/tcp.hpp	/^  friend bool operator==(const tcp& p1, const tcp& p2)$/;"	f	class:boost::asio::ip::tcp	access:friend	signature:(const tcp& p1, const tcp& p2)
boost::asio::ip::tcp::protocol	/usr/include/boost/asio/ip/tcp.hpp	/^  int protocol() const$/;"	f	class:boost::asio::ip::tcp	access:public	signature:() const
boost::asio::ip::tcp::resolver	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_resolver<tcp> resolver;$/;"	t	class:boost::asio::ip::tcp	access:public
boost::asio::ip::tcp::resolver_iterator	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_resolver_iterator<tcp> resolver_iterator;$/;"	t	class:boost::asio::ip::tcp	access:public
boost::asio::ip::tcp::resolver_query	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_resolver_query<tcp> resolver_query;$/;"	t	class:boost::asio::ip::tcp	access:public
boost::asio::ip::tcp::socket	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_stream_socket<tcp> socket;$/;"	t	class:boost::asio::ip::tcp	access:public
boost::asio::ip::tcp::tcp	/usr/include/boost/asio/ip/tcp.hpp	/^  explicit tcp(int family)$/;"	f	class:boost::asio::ip::tcp	access:private	signature:(int family)
boost::asio::ip::tcp::type	/usr/include/boost/asio/ip/tcp.hpp	/^  int type() const$/;"	f	class:boost::asio::ip::tcp	access:public	signature:() const
boost::asio::ip::tcp::v4	/usr/include/boost/asio/ip/tcp.hpp	/^  static tcp v4()$/;"	f	class:boost::asio::ip::tcp	access:public	signature:()
boost::asio::ip::tcp::v6	/usr/include/boost/asio/ip/tcp.hpp	/^  static tcp v6()$/;"	f	class:boost::asio::ip::tcp	access:public	signature:()
boost::asio::ip::udp	/usr/include/boost/asio/ip/udp.hpp	/^class udp$/;"	c	namespace:boost::asio::ip
boost::asio::ip::udp::endpoint	/usr/include/boost/asio/ip/udp.hpp	/^  typedef basic_endpoint<udp> endpoint;$/;"	t	class:boost::asio::ip::udp	access:public
boost::asio::ip::udp::family	/usr/include/boost/asio/ip/udp.hpp	/^  int family() const$/;"	f	class:boost::asio::ip::udp	access:public	signature:() const
boost::asio::ip::udp::family_	/usr/include/boost/asio/ip/udp.hpp	/^  int family_;$/;"	m	class:boost::asio::ip::udp	access:private
boost::asio::ip::udp::operator !=	/usr/include/boost/asio/ip/udp.hpp	/^  friend bool operator!=(const udp& p1, const udp& p2)$/;"	f	class:boost::asio::ip::udp	access:friend	signature:(const udp& p1, const udp& p2)
boost::asio::ip::udp::operator ==	/usr/include/boost/asio/ip/udp.hpp	/^  friend bool operator==(const udp& p1, const udp& p2)$/;"	f	class:boost::asio::ip::udp	access:friend	signature:(const udp& p1, const udp& p2)
boost::asio::ip::udp::protocol	/usr/include/boost/asio/ip/udp.hpp	/^  int protocol() const$/;"	f	class:boost::asio::ip::udp	access:public	signature:() const
boost::asio::ip::udp::resolver	/usr/include/boost/asio/ip/udp.hpp	/^  typedef basic_resolver<udp> resolver;$/;"	t	class:boost::asio::ip::udp	access:public
boost::asio::ip::udp::resolver_iterator	/usr/include/boost/asio/ip/udp.hpp	/^  typedef basic_resolver_iterator<udp> resolver_iterator;$/;"	t	class:boost::asio::ip::udp	access:public
boost::asio::ip::udp::resolver_query	/usr/include/boost/asio/ip/udp.hpp	/^  typedef basic_resolver_query<udp> resolver_query;$/;"	t	class:boost::asio::ip::udp	access:public
boost::asio::ip::udp::socket	/usr/include/boost/asio/ip/udp.hpp	/^  typedef basic_datagram_socket<udp> socket;$/;"	t	class:boost::asio::ip::udp	access:public
boost::asio::ip::udp::type	/usr/include/boost/asio/ip/udp.hpp	/^  int type() const$/;"	f	class:boost::asio::ip::udp	access:public	signature:() const
boost::asio::ip::udp::udp	/usr/include/boost/asio/ip/udp.hpp	/^  explicit udp(int family)$/;"	f	class:boost::asio::ip::udp	access:private	signature:(int family)
boost::asio::ip::udp::v4	/usr/include/boost/asio/ip/udp.hpp	/^  static udp v4()$/;"	f	class:boost::asio::ip::udp	access:public	signature:()
boost::asio::ip::udp::v6	/usr/include/boost/asio/ip/udp.hpp	/^  static udp v6()$/;"	f	class:boost::asio::ip::udp	access:public	signature:()
boost::asio::ip::unicast	/usr/include/boost/asio/ip/unicast.hpp	/^namespace unicast {$/;"	n	namespace:boost::asio::ip
boost::asio::ip::unicast::hops	/usr/include/boost/asio/ip/unicast.hpp	/^typedef implementation_defined hops;$/;"	t	namespace:boost::asio::ip::unicast
boost::asio::ip::v6_only	/usr/include/boost/asio/ip/v6_only.hpp	/^typedef implementation_defined v6_only;$/;"	t	namespace:boost::asio::ip
boost::asio::is_match_condition	/usr/include/boost/asio/read_until.hpp	/^struct is_match_condition$/;"	s	namespace:boost::asio
boost::asio::is_match_condition::value	/usr/include/boost/asio/read_until.hpp	/^  static const bool value;$/;"	m	struct:boost::asio::is_match_condition	access:public
boost::asio::is_read_buffered	/usr/include/boost/asio/is_read_buffered.hpp	/^class is_read_buffered$/;"	c	namespace:boost::asio
boost::asio::is_read_buffered::value	/usr/include/boost/asio/is_read_buffered.hpp	/^  static const bool value;$/;"	m	class:boost::asio::is_read_buffered	access:public
boost::asio::is_write_buffered	/usr/include/boost/asio/is_write_buffered.hpp	/^class is_write_buffered$/;"	c	namespace:boost::asio
boost::asio::is_write_buffered::value	/usr/include/boost/asio/is_write_buffered.hpp	/^  static const bool value;$/;"	m	class:boost::asio::is_write_buffered	access:public
boost::asio::local	/usr/include/boost/asio/local/basic_endpoint.hpp	/^namespace local {$/;"	n	namespace:boost::asio
boost::asio::local	/usr/include/boost/asio/local/connect_pair.hpp	/^namespace local {$/;"	n	namespace:boost::asio
boost::asio::local	/usr/include/boost/asio/local/datagram_protocol.hpp	/^namespace local {$/;"	n	namespace:boost::asio
boost::asio::local	/usr/include/boost/asio/local/stream_protocol.hpp	/^namespace local {$/;"	n	namespace:boost::asio
boost::asio::local::basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^class basic_endpoint$/;"	c	namespace:boost::asio::local
boost::asio::local::basic_endpoint::basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint()$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:()
boost::asio::local::basic_endpoint::basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint(const basic_endpoint& other)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const basic_endpoint& other)
boost::asio::local::basic_endpoint::basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint(const char* path)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const char* path)
boost::asio::local::basic_endpoint::basic_endpoint	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint(const std::string& path)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const std::string& path)
boost::asio::local::basic_endpoint::capacity	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  std::size_t capacity() const$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:() const
boost::asio::local::basic_endpoint::data	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  const data_type* data() const$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:() const
boost::asio::local::basic_endpoint::data	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  data_type* data()$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:()
boost::asio::local::basic_endpoint::data_	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  } data_;$/;"	m	class:boost::asio::local::basic_endpoint	typeref:union:boost::asio::local::basic_endpoint::data_union	access:private
boost::asio::local::basic_endpoint::data_type	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  typedef boost::asio::detail::socket_addr_type data_type;$/;"	t	class:boost::asio::local::basic_endpoint	access:public
boost::asio::local::basic_endpoint::data_type	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  typedef implementation_defined data_type;$/;"	t	class:boost::asio::local::basic_endpoint	access:public
boost::asio::local::basic_endpoint::data_union	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  union data_union$/;"	u	class:boost::asio::local::basic_endpoint	access:private
boost::asio::local::basic_endpoint::data_union::base	/usr/include/boost/asio/local/basic_endpoint.hpp	/^    boost::asio::detail::socket_addr_type base;$/;"	m	union:boost::asio::local::basic_endpoint::data_union	access:public
boost::asio::local::basic_endpoint::data_union::local	/usr/include/boost/asio/local/basic_endpoint.hpp	/^    boost::asio::detail::sockaddr_un_type local;$/;"	m	union:boost::asio::local::basic_endpoint::data_union	access:public
boost::asio::local::basic_endpoint::init	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  void init(const char* path, std::size_t path_length)$/;"	f	class:boost::asio::local::basic_endpoint	access:private	signature:(const char* path, std::size_t path_length)
boost::asio::local::basic_endpoint::operator !=	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  friend bool operator!=(const basic_endpoint<Protocol>& e1,$/;"	f	class:boost::asio::local::basic_endpoint	access:friend	signature:(const basic_endpoint<Protocol>& e1, const basic_endpoint<Protocol>& e2)
boost::asio::local::basic_endpoint::operator <	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  friend bool operator<(const basic_endpoint<Protocol>& e1,$/;"	f	class:boost::asio::local::basic_endpoint	access:friend	signature:(const basic_endpoint<Protocol>& e1, const basic_endpoint<Protocol>& e2)
boost::asio::local::basic_endpoint::operator =	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint& operator=(const basic_endpoint& other)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const basic_endpoint& other)
boost::asio::local::basic_endpoint::operator ==	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  friend bool operator==(const basic_endpoint<Protocol>& e1,$/;"	f	class:boost::asio::local::basic_endpoint	access:friend	signature:(const basic_endpoint<Protocol>& e1, const basic_endpoint<Protocol>& e2)
boost::asio::local::basic_endpoint::path	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  std::string path() const$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:() const
boost::asio::local::basic_endpoint::path	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  void path(const char* p)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const char* p)
boost::asio::local::basic_endpoint::path	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  void path(const std::string& p)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const std::string& p)
boost::asio::local::basic_endpoint::path_length_	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  std::size_t path_length_;$/;"	m	class:boost::asio::local::basic_endpoint	access:private
boost::asio::local::basic_endpoint::protocol	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  protocol_type protocol() const$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:() const
boost::asio::local::basic_endpoint::protocol_type	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::local::basic_endpoint	access:public
boost::asio::local::basic_endpoint::resize	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  void resize(std::size_t size)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(std::size_t size)
boost::asio::local::basic_endpoint::size	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  std::size_t size() const$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:() const
boost::asio::local::connect_pair	/usr/include/boost/asio/local/connect_pair.hpp	/^boost::system::error_code connect_pair($/;"	p	namespace:boost::asio::local	signature:( basic_socket<Protocol, SocketService1>& socket1, basic_socket<Protocol, SocketService2>& socket2, boost::system::error_code& ec)
boost::asio::local::connect_pair	/usr/include/boost/asio/local/connect_pair.hpp	/^inline boost::system::error_code connect_pair($/;"	f	namespace:boost::asio::local	signature:( basic_socket<Protocol, SocketService1>& socket1, basic_socket<Protocol, SocketService2>& socket2, boost::system::error_code& ec)
boost::asio::local::connect_pair	/usr/include/boost/asio/local/connect_pair.hpp	/^inline void connect_pair($/;"	f	namespace:boost::asio::local	signature:( basic_socket<Protocol, SocketService1>& socket1, basic_socket<Protocol, SocketService2>& socket2)
boost::asio::local::connect_pair	/usr/include/boost/asio/local/connect_pair.hpp	/^void connect_pair($/;"	p	namespace:boost::asio::local	signature:( basic_socket<Protocol, SocketService1>& socket1, basic_socket<Protocol, SocketService2>& socket2)
boost::asio::local::datagram_protocol	/usr/include/boost/asio/local/datagram_protocol.hpp	/^class datagram_protocol$/;"	c	namespace:boost::asio::local
boost::asio::local::datagram_protocol::endpoint	/usr/include/boost/asio/local/datagram_protocol.hpp	/^  typedef basic_endpoint<datagram_protocol> endpoint;$/;"	t	class:boost::asio::local::datagram_protocol	access:public
boost::asio::local::datagram_protocol::family	/usr/include/boost/asio/local/datagram_protocol.hpp	/^  int family() const$/;"	f	class:boost::asio::local::datagram_protocol	access:public	signature:() const
boost::asio::local::datagram_protocol::protocol	/usr/include/boost/asio/local/datagram_protocol.hpp	/^  int protocol() const$/;"	f	class:boost::asio::local::datagram_protocol	access:public	signature:() const
boost::asio::local::datagram_protocol::socket	/usr/include/boost/asio/local/datagram_protocol.hpp	/^  typedef basic_datagram_socket<datagram_protocol> socket;$/;"	t	class:boost::asio::local::datagram_protocol	access:public
boost::asio::local::datagram_protocol::type	/usr/include/boost/asio/local/datagram_protocol.hpp	/^  int type() const$/;"	f	class:boost::asio::local::datagram_protocol	access:public	signature:() const
boost::asio::local::operator <<	/usr/include/boost/asio/local/basic_endpoint.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:boost::asio::local	signature:( std::basic_ostream<Elem, Traits>& os, const basic_endpoint<Protocol>& endpoint)
boost::asio::local::stream_protocol	/usr/include/boost/asio/local/stream_protocol.hpp	/^class stream_protocol$/;"	c	namespace:boost::asio::local
boost::asio::local::stream_protocol::acceptor	/usr/include/boost/asio/local/stream_protocol.hpp	/^  typedef basic_socket_acceptor<stream_protocol> acceptor;$/;"	t	class:boost::asio::local::stream_protocol	access:public
boost::asio::local::stream_protocol::endpoint	/usr/include/boost/asio/local/stream_protocol.hpp	/^  typedef basic_endpoint<stream_protocol> endpoint;$/;"	t	class:boost::asio::local::stream_protocol	access:public
boost::asio::local::stream_protocol::family	/usr/include/boost/asio/local/stream_protocol.hpp	/^  int family() const$/;"	f	class:boost::asio::local::stream_protocol	access:public	signature:() const
boost::asio::local::stream_protocol::iostream	/usr/include/boost/asio/local/stream_protocol.hpp	/^  typedef basic_socket_iostream<stream_protocol> iostream;$/;"	t	class:boost::asio::local::stream_protocol	access:public
boost::asio::local::stream_protocol::protocol	/usr/include/boost/asio/local/stream_protocol.hpp	/^  int protocol() const$/;"	f	class:boost::asio::local::stream_protocol	access:public	signature:() const
boost::asio::local::stream_protocol::socket	/usr/include/boost/asio/local/stream_protocol.hpp	/^  typedef basic_stream_socket<stream_protocol> socket;$/;"	t	class:boost::asio::local::stream_protocol	access:public
boost::asio::local::stream_protocol::type	/usr/include/boost/asio/local/stream_protocol.hpp	/^  int type() const$/;"	f	class:boost::asio::local::stream_protocol	access:public	signature:() const
boost::asio::mutable_buffer	/usr/include/boost/asio/buffer.hpp	/^class mutable_buffer$/;"	c	namespace:boost::asio
boost::asio::mutable_buffer::boost::asio::detail::buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^  friend void* boost::asio::detail::buffer_cast_helper($/;"	p	class:boost::asio::mutable_buffer::boost::asio::detail	access:friend	signature:( const mutable_buffer& b)
boost::asio::mutable_buffer::boost::asio::detail::buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^  friend std::size_t boost::asio::detail::buffer_size_helper($/;"	p	class:boost::asio::mutable_buffer::boost::asio::detail	access:friend	signature:( const mutable_buffer& b)
boost::asio::mutable_buffer::data_	/usr/include/boost/asio/buffer.hpp	/^  void* data_;$/;"	m	class:boost::asio::mutable_buffer	access:private
boost::asio::mutable_buffer::debug_check_	/usr/include/boost/asio/buffer.hpp	/^  boost::function<void()> debug_check_;$/;"	m	class:boost::asio::mutable_buffer	access:private
boost::asio::mutable_buffer::get_debug_check	/usr/include/boost/asio/buffer.hpp	/^  const boost::function<void()>& get_debug_check() const$/;"	f	class:boost::asio::mutable_buffer	access:public	signature:() const
boost::asio::mutable_buffer::mutable_buffer	/usr/include/boost/asio/buffer.hpp	/^  mutable_buffer()$/;"	f	class:boost::asio::mutable_buffer	access:public	signature:()
boost::asio::mutable_buffer::mutable_buffer	/usr/include/boost/asio/buffer.hpp	/^  mutable_buffer(void* data, std::size_t size)$/;"	f	class:boost::asio::mutable_buffer	access:public	signature:(void* data, std::size_t size)
boost::asio::mutable_buffer::mutable_buffer	/usr/include/boost/asio/buffer.hpp	/^  mutable_buffer(void* data, std::size_t size,$/;"	f	class:boost::asio::mutable_buffer	access:public	signature:(void* data, std::size_t size, boost::function<void()> debug_check)
boost::asio::mutable_buffer::size_	/usr/include/boost/asio/buffer.hpp	/^  std::size_t size_;$/;"	m	class:boost::asio::mutable_buffer	access:private
boost::asio::mutable_buffers_1	/usr/include/boost/asio/buffer.hpp	/^class mutable_buffers_1$/;"	c	namespace:boost::asio	inherits:mutable_buffer
boost::asio::mutable_buffers_1::begin	/usr/include/boost/asio/buffer.hpp	/^  const_iterator begin() const$/;"	f	class:boost::asio::mutable_buffers_1	access:public	signature:() const
boost::asio::mutable_buffers_1::const_iterator	/usr/include/boost/asio/buffer.hpp	/^  typedef const mutable_buffer* const_iterator;$/;"	t	class:boost::asio::mutable_buffers_1	access:public
boost::asio::mutable_buffers_1::end	/usr/include/boost/asio/buffer.hpp	/^  const_iterator end() const$/;"	f	class:boost::asio::mutable_buffers_1	access:public	signature:() const
boost::asio::mutable_buffers_1::mutable_buffers_1	/usr/include/boost/asio/buffer.hpp	/^  explicit mutable_buffers_1(const mutable_buffer& b)$/;"	f	class:boost::asio::mutable_buffers_1	access:public	signature:(const mutable_buffer& b)
boost::asio::mutable_buffers_1::mutable_buffers_1	/usr/include/boost/asio/buffer.hpp	/^  mutable_buffers_1(void* data, std::size_t size)$/;"	f	class:boost::asio::mutable_buffers_1	access:public	signature:(void* data, std::size_t size)
boost::asio::mutable_buffers_1::value_type	/usr/include/boost/asio/buffer.hpp	/^  typedef mutable_buffer value_type;$/;"	t	class:boost::asio::mutable_buffers_1	access:public
boost::asio::null_buffers	/usr/include/boost/asio/buffer.hpp	/^class null_buffers$/;"	c	namespace:boost::asio
boost::asio::null_buffers::begin	/usr/include/boost/asio/buffer.hpp	/^  const_iterator begin() const$/;"	f	class:boost::asio::null_buffers	access:public	signature:() const
boost::asio::null_buffers::buf_	/usr/include/boost/asio/buffer.hpp	/^  mutable_buffer buf_;$/;"	m	class:boost::asio::null_buffers	access:private
boost::asio::null_buffers::const_iterator	/usr/include/boost/asio/buffer.hpp	/^  typedef const mutable_buffer* const_iterator;$/;"	t	class:boost::asio::null_buffers	access:public
boost::asio::null_buffers::end	/usr/include/boost/asio/buffer.hpp	/^  const_iterator end() const$/;"	f	class:boost::asio::null_buffers	access:public	signature:() const
boost::asio::null_buffers::value_type	/usr/include/boost/asio/buffer.hpp	/^  typedef mutable_buffer value_type;$/;"	t	class:boost::asio::null_buffers	access:public
boost::asio::operator +	/usr/include/boost/asio/buffer.hpp	/^inline const_buffer operator+(const const_buffer& b, std::size_t start)$/;"	f	namespace:boost::asio	signature:(const const_buffer& b, std::size_t start)
boost::asio::operator +	/usr/include/boost/asio/buffer.hpp	/^inline const_buffer operator+(std::size_t start, const const_buffer& b)$/;"	f	namespace:boost::asio	signature:(std::size_t start, const const_buffer& b)
boost::asio::operator +	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffer operator+(const mutable_buffer& b, std::size_t start)$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& b, std::size_t start)
boost::asio::operator +	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffer operator+(std::size_t start, const mutable_buffer& b)$/;"	f	namespace:boost::asio	signature:(std::size_t start, const mutable_buffer& b)
boost::asio::placeholders	/usr/include/boost/asio/placeholders.hpp	/^namespace placeholders {$/;"	n	namespace:boost::asio
boost::asio::placeholders::bytes_transferred	/usr/include/boost/asio/placeholders.hpp	/^unspecified bytes_transferred;$/;"	m	namespace:boost::asio::placeholders
boost::asio::placeholders::error	/usr/include/boost/asio/placeholders.hpp	/^unspecified error;$/;"	m	namespace:boost::asio::placeholders
boost::asio::placeholders::iterator	/usr/include/boost/asio/placeholders.hpp	/^unspecified iterator;$/;"	m	namespace:boost::asio::placeholders
boost::asio::PodType	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const PodType (&data)[N],$/;"	m	namespace:boost::asio
boost::asio::PodType	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(PodType (&data)[N],$/;"	m	namespace:boost::asio
boost::asio::posix	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^namespace posix {$/;"	n	namespace:boost::asio
boost::asio::posix	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^namespace posix {$/;"	n	namespace:boost::asio
boost::asio::posix	/usr/include/boost/asio/posix/descriptor_base.hpp	/^namespace posix {$/;"	n	namespace:boost::asio
boost::asio::posix	/usr/include/boost/asio/posix/stream_descriptor.hpp	/^namespace posix {$/;"	n	namespace:boost::asio
boost::asio::posix	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^namespace posix {$/;"	n	namespace:boost::asio
boost::asio::posix::basic_descriptor	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^class basic_descriptor$/;"	c	namespace:boost::asio::posix	inherits:basic_io_object,descriptor_base
boost::asio::posix::basic_descriptor::assign	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  boost::system::error_code assign(const native_type& native_descriptor,$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(const native_type& native_descriptor, boost::system::error_code& ec)
boost::asio::posix::basic_descriptor::assign	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  void assign(const native_type& native_descriptor)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(const native_type& native_descriptor)
boost::asio::posix::basic_descriptor::basic_descriptor	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  basic_descriptor(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(boost::asio::io_service& io_service, const native_type& native_descriptor)
boost::asio::posix::basic_descriptor::basic_descriptor	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  explicit basic_descriptor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::posix::basic_descriptor::cancel	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(boost::system::error_code& ec)
boost::asio::posix::basic_descriptor::cancel	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  void cancel()$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:()
boost::asio::posix::basic_descriptor::close	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(boost::system::error_code& ec)
boost::asio::posix::basic_descriptor::close	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  void close()$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:()
boost::asio::posix::basic_descriptor::io_control	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  boost::system::error_code io_control(IoControlCommand& command,$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(IoControlCommand& command, boost::system::error_code& ec)
boost::asio::posix::basic_descriptor::io_control	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  void io_control(IoControlCommand& command)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(IoControlCommand& command)
boost::asio::posix::basic_descriptor::is_open	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  bool is_open() const$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:() const
boost::asio::posix::basic_descriptor::lowest_layer	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:() const
boost::asio::posix::basic_descriptor::lowest_layer	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:()
boost::asio::posix::basic_descriptor::lowest_layer_type	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  typedef basic_descriptor<DescriptorService> lowest_layer_type;$/;"	t	class:boost::asio::posix::basic_descriptor	access:public
boost::asio::posix::basic_descriptor::native	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  native_type native()$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:()
boost::asio::posix::basic_descriptor::native_type	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  typedef typename DescriptorService::native_type native_type;$/;"	t	class:boost::asio::posix::basic_descriptor	access:public
boost::asio::posix::basic_descriptor::~basic_descriptor	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  ~basic_descriptor()$/;"	f	class:boost::asio::posix::basic_descriptor	access:protected	signature:()
boost::asio::posix::basic_stream_descriptor	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^class basic_stream_descriptor$/;"	c	namespace:boost::asio::posix	inherits:basic_descriptor
boost::asio::posix::basic_stream_descriptor::async_read_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::posix::basic_stream_descriptor::async_write_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::posix::basic_stream_descriptor::basic_stream_descriptor	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  basic_stream_descriptor(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(boost::asio::io_service& io_service, const native_type& native_descriptor)
boost::asio::posix::basic_stream_descriptor::basic_stream_descriptor	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  explicit basic_stream_descriptor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::posix::basic_stream_descriptor::native_type	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  typedef typename StreamDescriptorService::native_type native_type;$/;"	t	class:boost::asio::posix::basic_stream_descriptor	access:public
boost::asio::posix::basic_stream_descriptor::read_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::posix::basic_stream_descriptor::read_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::posix::basic_stream_descriptor::write_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::posix::basic_stream_descriptor::write_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::posix::descriptor_base	/usr/include/boost/asio/posix/descriptor_base.hpp	/^class descriptor_base$/;"	c	namespace:boost::asio::posix
boost::asio::posix::descriptor_base::bytes_readable	/usr/include/boost/asio/posix/descriptor_base.hpp	/^  typedef boost::asio::detail::io_control::bytes_readable bytes_readable;$/;"	t	class:boost::asio::posix::descriptor_base	access:public
boost::asio::posix::descriptor_base::bytes_readable	/usr/include/boost/asio/posix/descriptor_base.hpp	/^  typedef implementation_defined bytes_readable;$/;"	t	class:boost::asio::posix::descriptor_base	access:public
boost::asio::posix::descriptor_base::non_blocking_io	/usr/include/boost/asio/posix/descriptor_base.hpp	/^  typedef implementation_defined non_blocking_io;$/;"	t	class:boost::asio::posix::descriptor_base	access:public
boost::asio::posix::descriptor_base::~descriptor_base	/usr/include/boost/asio/posix/descriptor_base.hpp	/^  ~descriptor_base()$/;"	f	class:boost::asio::posix::descriptor_base	access:protected	signature:()
boost::asio::posix::stream_descriptor	/usr/include/boost/asio/posix/stream_descriptor.hpp	/^typedef basic_stream_descriptor<> stream_descriptor;$/;"	t	namespace:boost::asio::posix
boost::asio::posix::stream_descriptor_service	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^class stream_descriptor_service$/;"	c	namespace:boost::asio::posix	inherits:boost::asio::io_service::service
boost::asio::posix::stream_descriptor_service::assign	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, const native_type& native_descriptor, boost::system::error_code& ec)
boost::asio::posix::stream_descriptor_service::async_read_some	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, ReadHandler descriptorr)
boost::asio::posix::stream_descriptor_service::async_write_some	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, WriteHandler descriptorr)
boost::asio::posix::stream_descriptor_service::cancel	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::posix::stream_descriptor_service::close	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::posix::stream_descriptor_service::construct	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl)
boost::asio::posix::stream_descriptor_service::destroy	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl)
boost::asio::posix::stream_descriptor_service::id	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::posix::stream_descriptor_service	access:public
boost::asio::posix::stream_descriptor_service::implementation_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:public
boost::asio::posix::stream_descriptor_service::implementation_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:public
boost::asio::posix::stream_descriptor_service::io_control	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
boost::asio::posix::stream_descriptor_service::is_open	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(const implementation_type& impl) const
boost::asio::posix::stream_descriptor_service::native	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl)
boost::asio::posix::stream_descriptor_service::native_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:public
boost::asio::posix::stream_descriptor_service::native_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef service_impl_type::native_type native_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:public
boost::asio::posix::stream_descriptor_service::read_some	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  std::size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::posix::stream_descriptor_service::service_impl_	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::posix::stream_descriptor_service	access:private
boost::asio::posix::stream_descriptor_service::service_impl_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^      detail::dev_poll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:private
boost::asio::posix::stream_descriptor_service::service_impl_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^      detail::epoll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:private
boost::asio::posix::stream_descriptor_service::service_impl_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^      detail::kqueue_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:private
boost::asio::posix::stream_descriptor_service::service_impl_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^      detail::select_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:private
boost::asio::posix::stream_descriptor_service::shutdown_service	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:()
boost::asio::posix::stream_descriptor_service::stream_descriptor_service	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  explicit stream_descriptor_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::posix::stream_descriptor_service::write_some	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  std::size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::raw_socket_service	/usr/include/boost/asio/raw_socket_service.hpp	/^class raw_socket_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
boost::asio::raw_socket_service::assign	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_type& native_socket, boost::system::error_code& ec)
boost::asio::raw_socket_service::async_connect	/usr/include/boost/asio/raw_socket_service.hpp	/^  void async_connect(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, ConnectHandler handler)
boost::asio::raw_socket_service::async_receive	/usr/include/boost/asio/raw_socket_service.hpp	/^  void async_receive(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, ReadHandler handler)
boost::asio::raw_socket_service::async_receive_from	/usr/include/boost/asio/raw_socket_service.hpp	/^  void async_receive_from(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, ReadHandler handler)
boost::asio::raw_socket_service::async_send	/usr/include/boost/asio/raw_socket_service.hpp	/^  void async_send(implementation_type& impl, const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, WriteHandler handler)
boost::asio::raw_socket_service::async_send_to	/usr/include/boost/asio/raw_socket_service.hpp	/^  void async_send_to(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, WriteHandler handler)
boost::asio::raw_socket_service::at_mark	/usr/include/boost/asio/raw_socket_service.hpp	/^  bool at_mark(const implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::raw_socket_service::available	/usr/include/boost/asio/raw_socket_service.hpp	/^  std::size_t available(const implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::raw_socket_service::bind	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
boost::asio::raw_socket_service::cancel	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::raw_socket_service::close	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::raw_socket_service::connect	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code connect(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, boost::system::error_code& ec)
boost::asio::raw_socket_service::construct	/usr/include/boost/asio/raw_socket_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::raw_socket_service::destroy	/usr/include/boost/asio/raw_socket_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::raw_socket_service::endpoint_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
boost::asio::raw_socket_service::get_option	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl, GettableSocketOption& option, boost::system::error_code& ec) const
boost::asio::raw_socket_service::id	/usr/include/boost/asio/raw_socket_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::raw_socket_service	access:public
boost::asio::raw_socket_service::implementation_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
boost::asio::raw_socket_service::implementation_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
boost::asio::raw_socket_service::io_control	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
boost::asio::raw_socket_service::is_open	/usr/include/boost/asio/raw_socket_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl) const
boost::asio::raw_socket_service::local_endpoint	/usr/include/boost/asio/raw_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::raw_socket_service::native	/usr/include/boost/asio/raw_socket_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::raw_socket_service::native_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
boost::asio::raw_socket_service::native_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef typename service_impl_type::native_type native_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
boost::asio::raw_socket_service::open	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
boost::asio::raw_socket_service::protocol_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
boost::asio::raw_socket_service::raw_socket_service	/usr/include/boost/asio/raw_socket_service.hpp	/^  explicit raw_socket_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::raw_socket_service::receive	/usr/include/boost/asio/raw_socket_service.hpp	/^  std::size_t receive(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::raw_socket_service::receive_from	/usr/include/boost/asio/raw_socket_service.hpp	/^  std::size_t receive_from(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::raw_socket_service::remote_endpoint	/usr/include/boost/asio/raw_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::raw_socket_service::send	/usr/include/boost/asio/raw_socket_service.hpp	/^  std::size_t send(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::raw_socket_service::send_to	/usr/include/boost/asio/raw_socket_service.hpp	/^  std::size_t send_to(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::raw_socket_service::service_impl_	/usr/include/boost/asio/raw_socket_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::raw_socket_service	access:private
boost::asio::raw_socket_service::service_impl_type	/usr/include/boost/asio/raw_socket_service.hpp	/^      Protocol, detail::dev_poll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::raw_socket_service	access:private
boost::asio::raw_socket_service::service_impl_type	/usr/include/boost/asio/raw_socket_service.hpp	/^      Protocol, detail::epoll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::raw_socket_service	access:private
boost::asio::raw_socket_service::service_impl_type	/usr/include/boost/asio/raw_socket_service.hpp	/^      Protocol, detail::kqueue_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::raw_socket_service	access:private
boost::asio::raw_socket_service::service_impl_type	/usr/include/boost/asio/raw_socket_service.hpp	/^      Protocol, detail::select_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::raw_socket_service	access:private
boost::asio::raw_socket_service::service_impl_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::raw_socket_service	access:private
boost::asio::raw_socket_service::set_option	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const SettableSocketOption& option, boost::system::error_code& ec)
boost::asio::raw_socket_service::shutdown	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code shutdown(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, socket_base::shutdown_type what, boost::system::error_code& ec)
boost::asio::raw_socket_service::shutdown_service	/usr/include/boost/asio/raw_socket_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:()
boost::asio::read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, basic_streambuf<Allocator>& b);$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, basic_streambuf<Allocator>& b)
boost::asio::read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
boost::asio::read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers);$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers)
boost::asio::read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers, CompletionCondition completion_condition)
boost::asio::read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b)
boost::asio::read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
boost::asio::read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers)
boost::asio::read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition)
boost::asio::read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, char delim)
boost::asio::read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, char delim, boost::system::error_code& ec)
boost::asio::read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const boost::regex& expr)
boost::asio::read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const boost::regex& expr, boost::system::error_code& ec)
boost::asio::read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const std::string& delim)
boost::asio::read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const std::string& delim, boost::system::error_code& ec)
boost::asio::read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, MatchCondition match_condition, boost::system::error_code& ec, typename boost::enable_if<is_match_condition<MatchCondition> >::type* = 0)
boost::asio::read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, MatchCondition match_condition, typename boost::enable_if<is_match_condition<MatchCondition> >::type* = 0)
boost::asio::serial_port	/usr/include/boost/asio/serial_port.hpp	/^typedef basic_serial_port<> serial_port;$/;"	t	namespace:boost::asio
boost::asio::serial_port_base	/usr/include/boost/asio/serial_port_base.hpp	/^class serial_port_base$/;"	c	namespace:boost::asio
boost::asio::serial_port_base::baud_rate	/usr/include/boost/asio/serial_port_base.hpp	/^  class baud_rate$/;"	c	class:boost::asio::serial_port_base	access:public
boost::asio::serial_port_base::baud_rate::baud_rate	/usr/include/boost/asio/serial_port_base.hpp	/^    explicit baud_rate(unsigned int rate = 0);$/;"	p	class:boost::asio::serial_port_base::baud_rate	access:public	signature:(unsigned int rate = 0)
boost::asio::serial_port_base::baud_rate::load	/usr/include/boost/asio/serial_port_base.hpp	/^    boost::system::error_code load(const BOOST_ASIO_OPTION_STORAGE& storage,$/;"	p	class:boost::asio::serial_port_base::baud_rate	access:public	signature:(const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
boost::asio::serial_port_base::baud_rate::store	/usr/include/boost/asio/serial_port_base.hpp	/^    boost::system::error_code store(BOOST_ASIO_OPTION_STORAGE& storage,$/;"	p	class:boost::asio::serial_port_base::baud_rate	access:public	signature:(BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
boost::asio::serial_port_base::baud_rate::value	/usr/include/boost/asio/serial_port_base.hpp	/^    unsigned int value() const;$/;"	p	class:boost::asio::serial_port_base::baud_rate	access:public	signature:() const
boost::asio::serial_port_base::baud_rate::value_	/usr/include/boost/asio/serial_port_base.hpp	/^    unsigned int value_;$/;"	m	class:boost::asio::serial_port_base::baud_rate	access:private
boost::asio::serial_port_base::character_size	/usr/include/boost/asio/serial_port_base.hpp	/^  class character_size$/;"	c	class:boost::asio::serial_port_base	access:public
boost::asio::serial_port_base::character_size::character_size	/usr/include/boost/asio/serial_port_base.hpp	/^    explicit character_size(unsigned int t = 8);$/;"	p	class:boost::asio::serial_port_base::character_size	access:public	signature:(unsigned int t = 8)
boost::asio::serial_port_base::character_size::load	/usr/include/boost/asio/serial_port_base.hpp	/^    boost::system::error_code load(const BOOST_ASIO_OPTION_STORAGE& storage,$/;"	p	class:boost::asio::serial_port_base::character_size	access:public	signature:(const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
boost::asio::serial_port_base::character_size::store	/usr/include/boost/asio/serial_port_base.hpp	/^    boost::system::error_code store(BOOST_ASIO_OPTION_STORAGE& storage,$/;"	p	class:boost::asio::serial_port_base::character_size	access:public	signature:(BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
boost::asio::serial_port_base::character_size::value	/usr/include/boost/asio/serial_port_base.hpp	/^    unsigned int value() const;$/;"	p	class:boost::asio::serial_port_base::character_size	access:public	signature:() const
boost::asio::serial_port_base::character_size::value_	/usr/include/boost/asio/serial_port_base.hpp	/^    unsigned int value_;$/;"	m	class:boost::asio::serial_port_base::character_size	access:private
boost::asio::serial_port_base::dummy_	/usr/include/boost/asio/serial_port_base.hpp	/^  char dummy_;$/;"	m	class:boost::asio::serial_port_base	access:private
boost::asio::serial_port_base::flow_control	/usr/include/boost/asio/serial_port_base.hpp	/^  class flow_control$/;"	c	class:boost::asio::serial_port_base	access:public
boost::asio::serial_port_base::flow_control::flow_control	/usr/include/boost/asio/serial_port_base.hpp	/^    explicit flow_control(type t = none);$/;"	p	class:boost::asio::serial_port_base::flow_control	access:public	signature:(type t = none)
boost::asio::serial_port_base::flow_control::hardware	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, software, hardware };$/;"	e	enum:boost::asio::serial_port_base::flow_control::type
boost::asio::serial_port_base::flow_control::load	/usr/include/boost/asio/serial_port_base.hpp	/^    boost::system::error_code load(const BOOST_ASIO_OPTION_STORAGE& storage,$/;"	p	class:boost::asio::serial_port_base::flow_control	access:public	signature:(const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
boost::asio::serial_port_base::flow_control::none	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, software, hardware };$/;"	e	enum:boost::asio::serial_port_base::flow_control::type
boost::asio::serial_port_base::flow_control::software	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, software, hardware };$/;"	e	enum:boost::asio::serial_port_base::flow_control::type
boost::asio::serial_port_base::flow_control::store	/usr/include/boost/asio/serial_port_base.hpp	/^    boost::system::error_code store(BOOST_ASIO_OPTION_STORAGE& storage,$/;"	p	class:boost::asio::serial_port_base::flow_control	access:public	signature:(BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
boost::asio::serial_port_base::flow_control::type	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, software, hardware };$/;"	g	class:boost::asio::serial_port_base::flow_control	access:public
boost::asio::serial_port_base::flow_control::value	/usr/include/boost/asio/serial_port_base.hpp	/^    type value() const;$/;"	p	class:boost::asio::serial_port_base::flow_control	access:public	signature:() const
boost::asio::serial_port_base::flow_control::value_	/usr/include/boost/asio/serial_port_base.hpp	/^    type value_;$/;"	m	class:boost::asio::serial_port_base::flow_control	access:private
boost::asio::serial_port_base::parity	/usr/include/boost/asio/serial_port_base.hpp	/^  class parity$/;"	c	class:boost::asio::serial_port_base	access:public
boost::asio::serial_port_base::parity::even	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, odd, even };$/;"	e	enum:boost::asio::serial_port_base::parity::type
boost::asio::serial_port_base::parity::load	/usr/include/boost/asio/serial_port_base.hpp	/^    boost::system::error_code load(const BOOST_ASIO_OPTION_STORAGE& storage,$/;"	p	class:boost::asio::serial_port_base::parity	access:public	signature:(const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
boost::asio::serial_port_base::parity::none	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, odd, even };$/;"	e	enum:boost::asio::serial_port_base::parity::type
boost::asio::serial_port_base::parity::odd	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, odd, even };$/;"	e	enum:boost::asio::serial_port_base::parity::type
boost::asio::serial_port_base::parity::parity	/usr/include/boost/asio/serial_port_base.hpp	/^    explicit parity(type t = none);$/;"	p	class:boost::asio::serial_port_base::parity	access:public	signature:(type t = none)
boost::asio::serial_port_base::parity::store	/usr/include/boost/asio/serial_port_base.hpp	/^    boost::system::error_code store(BOOST_ASIO_OPTION_STORAGE& storage,$/;"	p	class:boost::asio::serial_port_base::parity	access:public	signature:(BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
boost::asio::serial_port_base::parity::type	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, odd, even };$/;"	g	class:boost::asio::serial_port_base::parity	access:public
boost::asio::serial_port_base::parity::value	/usr/include/boost/asio/serial_port_base.hpp	/^    type value() const;$/;"	p	class:boost::asio::serial_port_base::parity	access:public	signature:() const
boost::asio::serial_port_base::parity::value_	/usr/include/boost/asio/serial_port_base.hpp	/^    type value_;$/;"	m	class:boost::asio::serial_port_base::parity	access:private
boost::asio::serial_port_base::stop_bits	/usr/include/boost/asio/serial_port_base.hpp	/^  class stop_bits$/;"	c	class:boost::asio::serial_port_base	access:public
boost::asio::serial_port_base::stop_bits::load	/usr/include/boost/asio/serial_port_base.hpp	/^    boost::system::error_code load(const BOOST_ASIO_OPTION_STORAGE& storage,$/;"	p	class:boost::asio::serial_port_base::stop_bits	access:public	signature:(const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
boost::asio::serial_port_base::stop_bits::one	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { one, onepointfive, two };$/;"	e	enum:boost::asio::serial_port_base::stop_bits::type
boost::asio::serial_port_base::stop_bits::onepointfive	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { one, onepointfive, two };$/;"	e	enum:boost::asio::serial_port_base::stop_bits::type
boost::asio::serial_port_base::stop_bits::stop_bits	/usr/include/boost/asio/serial_port_base.hpp	/^    explicit stop_bits(type t = one);$/;"	p	class:boost::asio::serial_port_base::stop_bits	access:public	signature:(type t = one)
boost::asio::serial_port_base::stop_bits::store	/usr/include/boost/asio/serial_port_base.hpp	/^    boost::system::error_code store(BOOST_ASIO_OPTION_STORAGE& storage,$/;"	p	class:boost::asio::serial_port_base::stop_bits	access:public	signature:(BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
boost::asio::serial_port_base::stop_bits::two	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { one, onepointfive, two };$/;"	e	enum:boost::asio::serial_port_base::stop_bits::type
boost::asio::serial_port_base::stop_bits::type	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { one, onepointfive, two };$/;"	g	class:boost::asio::serial_port_base::stop_bits	access:public
boost::asio::serial_port_base::stop_bits::value	/usr/include/boost/asio/serial_port_base.hpp	/^    type value() const;$/;"	p	class:boost::asio::serial_port_base::stop_bits	access:public	signature:() const
boost::asio::serial_port_base::stop_bits::value_	/usr/include/boost/asio/serial_port_base.hpp	/^    type value_;$/;"	m	class:boost::asio::serial_port_base::stop_bits	access:private
boost::asio::serial_port_base::~serial_port_base	/usr/include/boost/asio/serial_port_base.hpp	/^  ~serial_port_base()$/;"	f	class:boost::asio::serial_port_base	access:protected	signature:()
boost::asio::serial_port_service	/usr/include/boost/asio/serial_port_service.hpp	/^class serial_port_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
boost::asio::serial_port_service::assign	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const native_type& native_handle, boost::system::error_code& ec)
boost::asio::serial_port_service::async_read_some	/usr/include/boost/asio/serial_port_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::serial_port_service::async_write_some	/usr/include/boost/asio/serial_port_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::serial_port_service::cancel	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::serial_port_service::close	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::serial_port_service::construct	/usr/include/boost/asio/serial_port_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl)
boost::asio::serial_port_service::destroy	/usr/include/boost/asio/serial_port_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl)
boost::asio::serial_port_service::get_option	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(const implementation_type& impl, GettableSerialPortOption& option, boost::system::error_code& ec) const
boost::asio::serial_port_service::id	/usr/include/boost/asio/serial_port_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::serial_port_service	access:public
boost::asio::serial_port_service::implementation_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::serial_port_service	access:public
boost::asio::serial_port_service::implementation_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::serial_port_service	access:public
boost::asio::serial_port_service::is_open	/usr/include/boost/asio/serial_port_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(const implementation_type& impl) const
boost::asio::serial_port_service::native	/usr/include/boost/asio/serial_port_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl)
boost::asio::serial_port_service::native_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::serial_port_service	access:public
boost::asio::serial_port_service::native_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef service_impl_type::native_type native_type;$/;"	t	class:boost::asio::serial_port_service	access:public
boost::asio::serial_port_service::open	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const std::string& device, boost::system::error_code& ec)
boost::asio::serial_port_service::read_some	/usr/include/boost/asio/serial_port_service.hpp	/^  std::size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::serial_port_service::send_break	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code send_break(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::serial_port_service::serial_port_service	/usr/include/boost/asio/serial_port_service.hpp	/^  explicit serial_port_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::serial_port_service::service_impl_	/usr/include/boost/asio/serial_port_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::serial_port_service	access:private
boost::asio::serial_port_service::service_impl_type	/usr/include/boost/asio/serial_port_service.hpp	/^      detail::dev_poll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::serial_port_service	access:private
boost::asio::serial_port_service::service_impl_type	/usr/include/boost/asio/serial_port_service.hpp	/^      detail::epoll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::serial_port_service	access:private
boost::asio::serial_port_service::service_impl_type	/usr/include/boost/asio/serial_port_service.hpp	/^      detail::kqueue_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::serial_port_service	access:private
boost::asio::serial_port_service::service_impl_type	/usr/include/boost/asio/serial_port_service.hpp	/^      detail::select_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::serial_port_service	access:private
boost::asio::serial_port_service::service_impl_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef detail::win_iocp_serial_port_service service_impl_type;$/;"	t	class:boost::asio::serial_port_service	access:private
boost::asio::serial_port_service::set_option	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const SettableSerialPortOption& option, boost::system::error_code& ec)
boost::asio::serial_port_service::shutdown_service	/usr/include/boost/asio/serial_port_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::serial_port_service	access:public	signature:()
boost::asio::serial_port_service::write_some	/usr/include/boost/asio/serial_port_service.hpp	/^  std::size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::service_already_exists	/usr/include/boost/asio/io_service.hpp	/^class service_already_exists$/;"	c	namespace:boost::asio	inherits:std::logic_error
boost::asio::service_already_exists::service_already_exists	/usr/include/boost/asio/io_service.hpp	/^  service_already_exists()$/;"	f	class:boost::asio::service_already_exists	access:public	signature:()
boost::asio::socket_acceptor_service	/usr/include/boost/asio/socket_acceptor_service.hpp	/^class socket_acceptor_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
boost::asio::socket_acceptor_service::accept	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code accept(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, basic_socket<protocol_type, SocketService>& peer, endpoint_type* peer_endpoint, boost::system::error_code& ec)
boost::asio::socket_acceptor_service::assign	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_type& native_acceptor, boost::system::error_code& ec)
boost::asio::socket_acceptor_service::async_accept	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  void async_accept(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, basic_socket<protocol_type, SocketService>& peer, endpoint_type* peer_endpoint, AcceptHandler handler)
boost::asio::socket_acceptor_service::bind	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
boost::asio::socket_acceptor_service::cancel	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::socket_acceptor_service::close	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::socket_acceptor_service::construct	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl)
boost::asio::socket_acceptor_service::destroy	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl)
boost::asio::socket_acceptor_service::endpoint_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef typename protocol_type::endpoint endpoint_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
boost::asio::socket_acceptor_service::get_option	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(const implementation_type& impl, GettableSocketOption& option, boost::system::error_code& ec) const
boost::asio::socket_acceptor_service::id	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::socket_acceptor_service	access:public
boost::asio::socket_acceptor_service::implementation_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
boost::asio::socket_acceptor_service::implementation_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
boost::asio::socket_acceptor_service::io_control	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
boost::asio::socket_acceptor_service::is_open	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(const implementation_type& impl) const
boost::asio::socket_acceptor_service::listen	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code listen(implementation_type& impl, int backlog,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, int backlog, boost::system::error_code& ec)
boost::asio::socket_acceptor_service::local_endpoint	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::socket_acceptor_service::native	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl)
boost::asio::socket_acceptor_service::native_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
boost::asio::socket_acceptor_service::native_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef typename service_impl_type::native_type native_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
boost::asio::socket_acceptor_service::open	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
boost::asio::socket_acceptor_service::protocol_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
boost::asio::socket_acceptor_service::service_impl_	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::socket_acceptor_service	access:private
boost::asio::socket_acceptor_service::service_impl_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^      Protocol, detail::dev_poll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:private
boost::asio::socket_acceptor_service::service_impl_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^      Protocol, detail::epoll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:private
boost::asio::socket_acceptor_service::service_impl_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^      Protocol, detail::kqueue_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:private
boost::asio::socket_acceptor_service::service_impl_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^      Protocol, detail::select_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:private
boost::asio::socket_acceptor_service::service_impl_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:private
boost::asio::socket_acceptor_service::set_option	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, const SettableSocketOption& option, boost::system::error_code& ec)
boost::asio::socket_acceptor_service::shutdown_service	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:()
boost::asio::socket_acceptor_service::socket_acceptor_service	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  explicit socket_acceptor_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::socket_base	/usr/include/boost/asio/socket_base.hpp	/^class socket_base$/;"	c	namespace:boost::asio
boost::asio::socket_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/socket_base.hpp	/^  BOOST_STATIC_CONSTANT(int, max_connections = SOMAXCONN);$/;"	p	class:boost::asio::socket_base	access:public	signature:(int, max_connections = SOMAXCONN)
boost::asio::socket_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/socket_base.hpp	/^  BOOST_STATIC_CONSTANT(int,$/;"	p	class:boost::asio::socket_base	access:public	signature:(int, message_do_not_route = boost::asio::detail::message_do_not_route)
boost::asio::socket_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/socket_base.hpp	/^  BOOST_STATIC_CONSTANT(int,$/;"	p	class:boost::asio::socket_base	access:public	signature:(int, message_out_of_band = boost::asio::detail::message_out_of_band)
boost::asio::socket_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/socket_base.hpp	/^  BOOST_STATIC_CONSTANT(int,$/;"	p	class:boost::asio::socket_base	access:public	signature:(int, message_peek = boost::asio::detail::message_peek)
boost::asio::socket_base::broadcast	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_BROADCAST> broadcast;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::broadcast	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined broadcast;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::bytes_readable	/usr/include/boost/asio/socket_base.hpp	/^  typedef boost::asio::detail::io_control::bytes_readable bytes_readable;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::bytes_readable	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined bytes_readable;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::debug	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_DEBUG> debug;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::debug	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined debug;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::do_not_route	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_DONTROUTE> do_not_route;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::do_not_route	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined do_not_route;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::dummy_	/usr/include/boost/asio/socket_base.hpp	/^  char dummy_;$/;"	m	class:boost::asio::socket_base	access:private
boost::asio::socket_base::enable_connection_aborted	/usr/include/boost/asio/socket_base.hpp	/^    enable_connection_aborted;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::enable_connection_aborted	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined enable_connection_aborted;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::keep_alive	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_KEEPALIVE> keep_alive;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::keep_alive	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined keep_alive;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::linger	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_LINGER> linger;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::linger	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined linger;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::max_connections	/usr/include/boost/asio/socket_base.hpp	/^  static const int max_connections = implementation_defined;$/;"	m	class:boost::asio::socket_base	access:public
boost::asio::socket_base::message_do_not_route	/usr/include/boost/asio/socket_base.hpp	/^  static const int message_do_not_route = implementation_defined;$/;"	m	class:boost::asio::socket_base	access:public
boost::asio::socket_base::message_flags	/usr/include/boost/asio/socket_base.hpp	/^  typedef int message_flags;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::message_out_of_band	/usr/include/boost/asio/socket_base.hpp	/^  static const int message_out_of_band = implementation_defined;$/;"	m	class:boost::asio::socket_base	access:public
boost::asio::socket_base::message_peek	/usr/include/boost/asio/socket_base.hpp	/^  static const int message_peek = implementation_defined;$/;"	m	class:boost::asio::socket_base	access:public
boost::asio::socket_base::non_blocking_io	/usr/include/boost/asio/socket_base.hpp	/^  typedef boost::asio::detail::io_control::non_blocking_io non_blocking_io;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::non_blocking_io	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined non_blocking_io;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::receive_buffer_size	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_RCVBUF> receive_buffer_size;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::receive_buffer_size	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined receive_buffer_size;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::receive_low_watermark	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_RCVLOWAT> receive_low_watermark;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::receive_low_watermark	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined receive_low_watermark;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::reuse_address	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_REUSEADDR> reuse_address;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::reuse_address	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined reuse_address;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::send_buffer_size	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_SNDBUF> send_buffer_size;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::send_buffer_size	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined send_buffer_size;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::send_low_watermark	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_SNDLOWAT> send_low_watermark;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::send_low_watermark	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined send_low_watermark;$/;"	t	class:boost::asio::socket_base	access:public
boost::asio::socket_base::shutdown_both	/usr/include/boost/asio/socket_base.hpp	/^    shutdown_both = implementation_defined$/;"	e	enum:boost::asio::socket_base::shutdown_type
boost::asio::socket_base::shutdown_receive	/usr/include/boost/asio/socket_base.hpp	/^    shutdown_receive = implementation_defined,$/;"	e	enum:boost::asio::socket_base::shutdown_type
boost::asio::socket_base::shutdown_send	/usr/include/boost/asio/socket_base.hpp	/^    shutdown_send = implementation_defined,$/;"	e	enum:boost::asio::socket_base::shutdown_type
boost::asio::socket_base::shutdown_type	/usr/include/boost/asio/socket_base.hpp	/^  enum shutdown_type$/;"	g	class:boost::asio::socket_base	access:public
boost::asio::socket_base::~socket_base	/usr/include/boost/asio/socket_base.hpp	/^  ~socket_base()$/;"	f	class:boost::asio::socket_base	access:protected	signature:()
boost::asio::ssl	/usr/include/boost/asio/ssl/basic_context.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/context.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/context_base.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/context_service.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/stream.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/stream_base.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl	/usr/include/boost/asio/ssl/stream_service.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
boost::asio::ssl::basic_context	/usr/include/boost/asio/ssl/basic_context.hpp	/^class basic_context$/;"	c	namespace:boost::asio::ssl	inherits:context_base,boost::noncopyable
boost::asio::ssl::basic_context::add_verify_path	/usr/include/boost/asio/ssl/basic_context.hpp	/^  boost::system::error_code add_verify_path(const std::string& path,$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& path, boost::system::error_code& ec)
boost::asio::ssl::basic_context::add_verify_path	/usr/include/boost/asio/ssl/basic_context.hpp	/^  void add_verify_path(const std::string& path)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& path)
boost::asio::ssl::basic_context::basic_context	/usr/include/boost/asio/ssl/basic_context.hpp	/^  basic_context(boost::asio::io_service& io_service, method m)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(boost::asio::io_service& io_service, method m)
boost::asio::ssl::basic_context::impl	/usr/include/boost/asio/ssl/basic_context.hpp	/^  impl_type impl()$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:()
boost::asio::ssl::basic_context::impl_	/usr/include/boost/asio/ssl/basic_context.hpp	/^  impl_type impl_;$/;"	m	class:boost::asio::ssl::basic_context	access:private
boost::asio::ssl::basic_context::impl_type	/usr/include/boost/asio/ssl/basic_context.hpp	/^  typedef typename service_type::impl_type impl_type;$/;"	t	class:boost::asio::ssl::basic_context	access:public
boost::asio::ssl::basic_context::load_verify_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  boost::system::error_code load_verify_file(const std::string& filename,$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& filename, boost::system::error_code& ec)
boost::asio::ssl::basic_context::load_verify_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  void load_verify_file(const std::string& filename)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& filename)
boost::asio::ssl::basic_context::service_	/usr/include/boost/asio/ssl/basic_context.hpp	/^  service_type& service_;$/;"	m	class:boost::asio::ssl::basic_context	access:private
boost::asio::ssl::basic_context::service_type	/usr/include/boost/asio/ssl/basic_context.hpp	/^  typedef Service service_type;$/;"	t	class:boost::asio::ssl::basic_context	access:public
boost::asio::ssl::basic_context::set_options	/usr/include/boost/asio/ssl/basic_context.hpp	/^  boost::system::error_code set_options(options o,$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(options o, boost::system::error_code& ec)
boost::asio::ssl::basic_context::set_options	/usr/include/boost/asio/ssl/basic_context.hpp	/^  void set_options(options o)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(options o)
boost::asio::ssl::basic_context::set_password_callback	/usr/include/boost/asio/ssl/basic_context.hpp	/^  boost::system::error_code set_password_callback(PasswordCallback callback,$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(PasswordCallback callback, boost::system::error_code& ec)
boost::asio::ssl::basic_context::set_password_callback	/usr/include/boost/asio/ssl/basic_context.hpp	/^  void set_password_callback(PasswordCallback callback)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(PasswordCallback callback)
boost::asio::ssl::basic_context::set_verify_mode	/usr/include/boost/asio/ssl/basic_context.hpp	/^  boost::system::error_code set_verify_mode(verify_mode v,$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(verify_mode v, boost::system::error_code& ec)
boost::asio::ssl::basic_context::set_verify_mode	/usr/include/boost/asio/ssl/basic_context.hpp	/^  void set_verify_mode(verify_mode v)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(verify_mode v)
boost::asio::ssl::basic_context::use_certificate_chain_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  boost::system::error_code use_certificate_chain_file($/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:( const std::string& filename, boost::system::error_code& ec)
boost::asio::ssl::basic_context::use_certificate_chain_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  void use_certificate_chain_file(const std::string& filename)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& filename)
boost::asio::ssl::basic_context::use_certificate_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  boost::system::error_code use_certificate_file(const std::string& filename,$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& filename, file_format format, boost::system::error_code& ec)
boost::asio::ssl::basic_context::use_certificate_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  void use_certificate_file(const std::string& filename, file_format format)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& filename, file_format format)
boost::asio::ssl::basic_context::use_private_key_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  boost::system::error_code use_private_key_file(const std::string& filename,$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& filename, file_format format, boost::system::error_code& ec)
boost::asio::ssl::basic_context::use_private_key_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  void use_private_key_file(const std::string& filename, file_format format)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& filename, file_format format)
boost::asio::ssl::basic_context::use_rsa_private_key_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  boost::system::error_code use_rsa_private_key_file($/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:( const std::string& filename, file_format format, boost::system::error_code& ec)
boost::asio::ssl::basic_context::use_rsa_private_key_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  void use_rsa_private_key_file(const std::string& filename, file_format format)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& filename, file_format format)
boost::asio::ssl::basic_context::use_tmp_dh_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  boost::system::error_code use_tmp_dh_file(const std::string& filename,$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& filename, boost::system::error_code& ec)
boost::asio::ssl::basic_context::use_tmp_dh_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  void use_tmp_dh_file(const std::string& filename)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& filename)
boost::asio::ssl::basic_context::~basic_context	/usr/include/boost/asio/ssl/basic_context.hpp	/^  ~basic_context()$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:()
boost::asio::ssl::context	/usr/include/boost/asio/ssl/context.hpp	/^typedef basic_context<context_service> context;$/;"	t	namespace:boost::asio::ssl
boost::asio::ssl::context_base	/usr/include/boost/asio/ssl/context_base.hpp	/^class context_base$/;"	c	namespace:boost::asio::ssl
boost::asio::ssl::context_base::asn1	/usr/include/boost/asio/ssl/context_base.hpp	/^    asn1,$/;"	e	enum:boost::asio::ssl::context_base::file_format
boost::asio::ssl::context_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, default_workarounds = SSL_OP_ALL);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, default_workarounds = SSL_OP_ALL)
boost::asio::ssl::context_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, no_sslv2 = SSL_OP_NO_SSLv2);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, no_sslv2 = SSL_OP_NO_SSLv2)
boost::asio::ssl::context_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, no_sslv3 = SSL_OP_NO_SSLv3);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, no_sslv3 = SSL_OP_NO_SSLv3)
boost::asio::ssl::context_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, no_tlsv1 = SSL_OP_NO_TLSv1);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, no_tlsv1 = SSL_OP_NO_TLSv1)
boost::asio::ssl::context_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, single_dh_use = SSL_OP_SINGLE_DH_USE);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, single_dh_use = SSL_OP_SINGLE_DH_USE)
boost::asio::ssl::context_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, verify_client_once = SSL_VERIFY_CLIENT_ONCE);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, verify_client_once = SSL_VERIFY_CLIENT_ONCE)
boost::asio::ssl::context_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, verify_none = SSL_VERIFY_NONE);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, verify_none = SSL_VERIFY_NONE)
boost::asio::ssl::context_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, verify_peer = SSL_VERIFY_PEER);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, verify_peer = SSL_VERIFY_PEER)
boost::asio::ssl::context_base::BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int,$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, verify_fail_if_no_peer_cert = SSL_VERIFY_FAIL_IF_NO_PEER_CERT)
boost::asio::ssl::context_base::default_workarounds	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const int default_workarounds = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::dummy_	/usr/include/boost/asio/ssl/context_base.hpp	/^  char dummy_;$/;"	m	class:boost::asio::ssl::context_base	access:private
boost::asio::ssl::context_base::file_format	/usr/include/boost/asio/ssl/context_base.hpp	/^  enum file_format$/;"	g	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::for_reading	/usr/include/boost/asio/ssl/context_base.hpp	/^    for_reading,$/;"	e	enum:boost::asio::ssl::context_base::password_purpose
boost::asio::ssl::context_base::for_writing	/usr/include/boost/asio/ssl/context_base.hpp	/^    for_writing$/;"	e	enum:boost::asio::ssl::context_base::password_purpose
boost::asio::ssl::context_base::method	/usr/include/boost/asio/ssl/context_base.hpp	/^  enum method$/;"	g	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::no_sslv2	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const int no_sslv2 = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::no_sslv3	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const int no_sslv3 = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::no_tlsv1	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const int no_tlsv1 = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::options	/usr/include/boost/asio/ssl/context_base.hpp	/^  typedef int options;$/;"	t	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::password_purpose	/usr/include/boost/asio/ssl/context_base.hpp	/^  enum password_purpose$/;"	g	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::pem	/usr/include/boost/asio/ssl/context_base.hpp	/^    pem$/;"	e	enum:boost::asio::ssl::context_base::file_format
boost::asio::ssl::context_base::single_dh_use	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const int single_dh_use = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::sslv2	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv2,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::sslv23	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv23,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::sslv23_client	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv23_client,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::sslv23_server	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv23_server$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::sslv2_client	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv2_client,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::sslv2_server	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv2_server,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::sslv3	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv3,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::sslv3_client	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv3_client,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::sslv3_server	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv3_server,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::tlsv1	/usr/include/boost/asio/ssl/context_base.hpp	/^    tlsv1,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::tlsv1_client	/usr/include/boost/asio/ssl/context_base.hpp	/^    tlsv1_client,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::tlsv1_server	/usr/include/boost/asio/ssl/context_base.hpp	/^    tlsv1_server,$/;"	e	enum:boost::asio::ssl::context_base::method
boost::asio::ssl::context_base::verify_client_once	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const int verify_client_once = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::verify_fail_if_no_peer_cert	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const int verify_fail_if_no_peer_cert = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::verify_mode	/usr/include/boost/asio/ssl/context_base.hpp	/^  typedef int verify_mode;$/;"	t	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::verify_none	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const int verify_none = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::verify_peer	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const int verify_peer = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
boost::asio::ssl::context_base::~context_base	/usr/include/boost/asio/ssl/context_base.hpp	/^  ~context_base()$/;"	f	class:boost::asio::ssl::context_base	access:protected	signature:()
boost::asio::ssl::context_service	/usr/include/boost/asio/ssl/context_service.hpp	/^class context_service$/;"	c	namespace:boost::asio::ssl	inherits:boost::asio::io_service::service
boost::asio::ssl::context_service::add_verify_path	/usr/include/boost/asio/ssl/context_service.hpp	/^  boost::system::error_code add_verify_path(impl_type& impl,$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, const std::string& path, boost::system::error_code& ec)
boost::asio::ssl::context_service::context_service	/usr/include/boost/asio/ssl/context_service.hpp	/^  explicit context_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::ssl::context_service::create	/usr/include/boost/asio/ssl/context_service.hpp	/^  void create(impl_type& impl, context_base::method m)$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, context_base::method m)
boost::asio::ssl::context_service::destroy	/usr/include/boost/asio/ssl/context_service.hpp	/^  void destroy(impl_type& impl)$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl)
boost::asio::ssl::context_service::id	/usr/include/boost/asio/ssl/context_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::ssl::context_service	access:public
boost::asio::ssl::context_service::impl_type	/usr/include/boost/asio/ssl/context_service.hpp	/^  typedef implementation_defined impl_type;$/;"	t	class:boost::asio::ssl::context_service	access:public
boost::asio::ssl::context_service::impl_type	/usr/include/boost/asio/ssl/context_service.hpp	/^  typedef service_impl_type::impl_type impl_type;$/;"	t	class:boost::asio::ssl::context_service	access:public
boost::asio::ssl::context_service::load_verify_file	/usr/include/boost/asio/ssl/context_service.hpp	/^  boost::system::error_code load_verify_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
boost::asio::ssl::context_service::null	/usr/include/boost/asio/ssl/context_service.hpp	/^  impl_type null() const$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:() const
boost::asio::ssl::context_service::service_impl_	/usr/include/boost/asio/ssl/context_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::ssl::context_service	access:private
boost::asio::ssl::context_service::service_impl_type	/usr/include/boost/asio/ssl/context_service.hpp	/^  typedef detail::openssl_context_service service_impl_type;$/;"	t	class:boost::asio::ssl::context_service	access:private
boost::asio::ssl::context_service::set_options	/usr/include/boost/asio/ssl/context_service.hpp	/^  boost::system::error_code set_options(impl_type& impl,$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, context_base::options o, boost::system::error_code& ec)
boost::asio::ssl::context_service::set_password_callback	/usr/include/boost/asio/ssl/context_service.hpp	/^  boost::system::error_code set_password_callback(impl_type& impl,$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, PasswordCallback callback, boost::system::error_code& ec)
boost::asio::ssl::context_service::set_verify_mode	/usr/include/boost/asio/ssl/context_service.hpp	/^  boost::system::error_code set_verify_mode(impl_type& impl,$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, context_base::verify_mode v, boost::system::error_code& ec)
boost::asio::ssl::context_service::shutdown_service	/usr/include/boost/asio/ssl/context_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:()
boost::asio::ssl::context_service::use_certificate_chain_file	/usr/include/boost/asio/ssl/context_service.hpp	/^  boost::system::error_code use_certificate_chain_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
boost::asio::ssl::context_service::use_certificate_file	/usr/include/boost/asio/ssl/context_service.hpp	/^  boost::system::error_code use_certificate_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
boost::asio::ssl::context_service::use_private_key_file	/usr/include/boost/asio/ssl/context_service.hpp	/^  boost::system::error_code use_private_key_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
boost::asio::ssl::context_service::use_rsa_private_key_file	/usr/include/boost/asio/ssl/context_service.hpp	/^  boost::system::error_code use_rsa_private_key_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
boost::asio::ssl::context_service::use_tmp_dh_file	/usr/include/boost/asio/ssl/context_service.hpp	/^  boost::system::error_code use_tmp_dh_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
boost::asio::ssl::detail	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
boost::asio::ssl::detail	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
boost::asio::ssl::detail	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
boost::asio::ssl::detail	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
boost::asio::ssl::detail::net_buffer	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^class net_buffer$/;"	c	namespace:boost::asio::ssl::detail
boost::asio::ssl::detail::net_buffer::buf_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  unsigned char buf_[NET_BUF_SIZE];$/;"	m	class:boost::asio::ssl::detail::net_buffer	access:private
boost::asio::ssl::detail::net_buffer::data_added	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  void data_added(size_t count)$/;"	f	class:boost::asio::ssl::detail::net_buffer	access:public	signature:(size_t count)
boost::asio::ssl::detail::net_buffer::data_end_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  unsigned char* data_end_;$/;"	m	class:boost::asio::ssl::detail::net_buffer	access:private
boost::asio::ssl::detail::net_buffer::data_removed	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  void data_removed(size_t count) $/;"	f	class:boost::asio::ssl::detail::net_buffer	access:public	signature:(size_t count)
boost::asio::ssl::detail::net_buffer::data_start_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  unsigned char* data_start_;$/;"	m	class:boost::asio::ssl::detail::net_buffer	access:private
boost::asio::ssl::detail::net_buffer::get_data_len	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  size_t get_data_len() { return (data_end_ - data_start_); }    $/;"	f	class:boost::asio::ssl::detail::net_buffer	access:public	signature:()
boost::asio::ssl::detail::net_buffer::get_data_start	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  unsigned char* get_data_start() { return data_start_; }$/;"	f	class:boost::asio::ssl::detail::net_buffer	access:public	signature:()
boost::asio::ssl::detail::net_buffer::get_unused_len	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  size_t get_unused_len() { return (NET_BUF_SIZE - (data_end_ - buf_)); }    $/;"	f	class:boost::asio::ssl::detail::net_buffer	access:public	signature:()
boost::asio::ssl::detail::net_buffer::get_unused_start	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  unsigned char* get_unused_start() { return data_end_; }$/;"	f	class:boost::asio::ssl::detail::net_buffer	access:public	signature:()
boost::asio::ssl::detail::net_buffer::has_data	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  bool has_data() { return (data_start_ < data_end_); }$/;"	f	class:boost::asio::ssl::detail::net_buffer	access:public	signature:()
boost::asio::ssl::detail::net_buffer::net_buffer	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  net_buffer()$/;"	f	class:boost::asio::ssl::detail::net_buffer	access:public	signature:()
boost::asio::ssl::detail::net_buffer::NET_BUF_SIZE	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  static const int  NET_BUF_SIZE = 16*1024 + 256; \/\/ SSL record size + spare$/;"	m	class:boost::asio::ssl::detail::net_buffer	access:private
boost::asio::ssl::detail::net_buffer::reset	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  void reset() { data_start_ = buf_; data_end_ = buf_; }               $/;"	f	class:boost::asio::ssl::detail::net_buffer	access:public	signature:()
boost::asio::ssl::detail::openssl_context_service	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^class openssl_context_service$/;"	c	namespace:boost::asio::ssl::detail	inherits:boost::asio::detail::service_base
boost::asio::ssl::detail::openssl_context_service::add_verify_path	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  boost::system::error_code add_verify_path(impl_type& impl,$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& path, boost::system::error_code& ec)
boost::asio::ssl::detail::openssl_context_service::create	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  void create(impl_type& impl, context_base::method m)$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, context_base::method m)
boost::asio::ssl::detail::openssl_context_service::destroy	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  void destroy(impl_type& impl)$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl)
boost::asio::ssl::detail::openssl_context_service::impl_type	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  typedef ::SSL_CTX* impl_type;$/;"	t	class:boost::asio::ssl::detail::openssl_context_service	access:public
boost::asio::ssl::detail::openssl_context_service::init_	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  openssl_init<> init_;$/;"	m	class:boost::asio::ssl::detail::openssl_context_service	access:private
boost::asio::ssl::detail::openssl_context_service::load_verify_file	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  boost::system::error_code load_verify_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
boost::asio::ssl::detail::openssl_context_service::null	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  static impl_type null()$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:()
boost::asio::ssl::detail::openssl_context_service::openssl_context_service	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  openssl_context_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::ssl::detail::openssl_context_service::password_callback	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  static int password_callback(char* buf, int size, int purpose, void* data)$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(char* buf, int size, int purpose, void* data)
boost::asio::ssl::detail::openssl_context_service::password_callback_type	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^      context_base::password_purpose)> password_callback_type;$/;"	t	class:boost::asio::ssl::detail::openssl_context_service	access:public
boost::asio::ssl::detail::openssl_context_service::set_options	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  boost::system::error_code set_options(impl_type& impl,$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, context_base::options o, boost::system::error_code& ec)
boost::asio::ssl::detail::openssl_context_service::set_password_callback	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  boost::system::error_code set_password_callback(impl_type& impl,$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, Password_Callback callback, boost::system::error_code& ec)
boost::asio::ssl::detail::openssl_context_service::set_verify_mode	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  boost::system::error_code set_verify_mode(impl_type& impl,$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, context_base::verify_mode v, boost::system::error_code& ec)
boost::asio::ssl::detail::openssl_context_service::shutdown_service	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:()
boost::asio::ssl::detail::openssl_context_service::use_certificate_chain_file	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  boost::system::error_code use_certificate_chain_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
boost::asio::ssl::detail::openssl_context_service::use_certificate_file	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  boost::system::error_code use_certificate_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
boost::asio::ssl::detail::openssl_context_service::use_private_key_file	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  boost::system::error_code use_private_key_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
boost::asio::ssl::detail::openssl_context_service::use_rsa_private_key_file	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  boost::system::error_code use_rsa_private_key_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
boost::asio::ssl::detail::openssl_context_service::use_tmp_dh_file	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  boost::system::error_code use_tmp_dh_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
boost::asio::ssl::detail::openssl_init	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^class openssl_init$/;"	c	namespace:boost::asio::ssl::detail	inherits:boost::noncopyable
boost::asio::ssl::detail::openssl_init::do_init	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^  class do_init$/;"	c	class:boost::asio::ssl::detail::openssl_init	access:private
boost::asio::ssl::detail::openssl_init::do_init::do_init	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^    do_init()$/;"	f	class:boost::asio::ssl::detail::openssl_init::do_init	access:public	signature:()
boost::asio::ssl::detail::openssl_init::do_init::instance	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^    static boost::shared_ptr<do_init> instance()$/;"	f	class:boost::asio::ssl::detail::openssl_init::do_init	access:public	signature:()
boost::asio::ssl::detail::openssl_init::do_init::mutexes_	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^    std::vector<boost::shared_ptr<boost::asio::detail::mutex> > mutexes_;$/;"	m	class:boost::asio::ssl::detail::openssl_init::do_init	access:private
boost::asio::ssl::detail::openssl_init::do_init::openssl_id_func	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^    static unsigned long openssl_id_func()$/;"	f	class:boost::asio::ssl::detail::openssl_init::do_init	access:private	signature:()
boost::asio::ssl::detail::openssl_init::do_init::openssl_locking_func	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^    static void openssl_locking_func(int mode, int n, $/;"	f	class:boost::asio::ssl::detail::openssl_init::do_init	access:private	signature:(int mode, int n, const char* , int )
boost::asio::ssl::detail::openssl_init::do_init::thread_id_	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^    boost::asio::detail::tss_ptr<void> thread_id_;$/;"	m	class:boost::asio::ssl::detail::openssl_init::do_init	access:private
boost::asio::ssl::detail::openssl_init::do_init::~do_init	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^    ~do_init()$/;"	f	class:boost::asio::ssl::detail::openssl_init::do_init	access:public	signature:()
boost::asio::ssl::detail::openssl_init::instance_	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^  static openssl_init instance_;$/;"	m	class:boost::asio::ssl::detail::openssl_init	access:private
boost::asio::ssl::detail::openssl_init::instance_	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^openssl_init<Do_Init> openssl_init<Do_Init>::instance_;$/;"	m	class:boost::asio::ssl::detail::openssl_init
boost::asio::ssl::detail::openssl_init::openssl_init	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^  openssl_init()$/;"	f	class:boost::asio::ssl::detail::openssl_init	access:public	signature:()
boost::asio::ssl::detail::openssl_init::ref_	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^  boost::shared_ptr<do_init> ref_;$/;"	m	class:boost::asio::ssl::detail::openssl_init	access:private
boost::asio::ssl::detail::openssl_init::~openssl_init	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^  ~openssl_init()$/;"	f	class:boost::asio::ssl::detail::openssl_init	access:public	signature:()
boost::asio::ssl::detail::openssl_operation	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^class openssl_operation$/;"	c	namespace:boost::asio::ssl::detail
boost::asio::ssl::detail::openssl_operation::async_read_handler	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  void async_read_handler(const boost::system::error_code& error,$/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:private	signature:(const boost::system::error_code& error, size_t bytes_recvd)
boost::asio::ssl::detail::openssl_operation::async_user_handler	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  int async_user_handler(boost::system::error_code error, int rc)$/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:private	signature:(boost::system::error_code error, int rc)
boost::asio::ssl::detail::openssl_operation::async_write_handler	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  void async_write_handler(bool is_operation_done, int rc, $/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:private	signature:(bool is_operation_done, int rc, const boost::system::error_code& error, size_t bytes_sent)
boost::asio::ssl::detail::openssl_operation::do_async_read	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  int do_async_read()$/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:private	signature:()
boost::asio::ssl::detail::openssl_operation::do_async_write	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  int  do_async_write(bool is_operation_done, int rc) $/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:private	signature:(bool is_operation_done, int rc)
boost::asio::ssl::detail::openssl_operation::do_sync_read	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  int do_sync_read()$/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:private	signature:()
boost::asio::ssl::detail::openssl_operation::do_sync_write	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  int do_sync_write(bool is_operation_done, int rc)$/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:private	signature:(bool is_operation_done, int rc)
boost::asio::ssl::detail::openssl_operation::handler_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  int_handler_func handler_;$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
boost::asio::ssl::detail::openssl_operation::int_handler_func	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^    int_handler_func;$/;"	t	class:boost::asio::ssl::detail::openssl_operation	access:private
boost::asio::ssl::detail::openssl_operation::openssl_operation	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  openssl_operation(ssl_primitive_func primitive,$/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:public	signature:(ssl_primitive_func primitive, Stream& socket, net_buffer& recv_buf, SSL* session, BIO* ssl_bio)
boost::asio::ssl::detail::openssl_operation::openssl_operation	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  openssl_operation(ssl_primitive_func primitive,$/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:public	signature:(ssl_primitive_func primitive, Stream& socket, net_buffer& recv_buf, SSL* session, BIO* ssl_bio, user_handler_func handler, boost::asio::io_service::strand& strand )
boost::asio::ssl::detail::openssl_operation::primitive_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  ssl_primitive_func  primitive_;$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
boost::asio::ssl::detail::openssl_operation::read_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  read_func  read_;$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
boost::asio::ssl::detail::openssl_operation::read_func	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  typedef boost::function<int ()> read_func;$/;"	t	class:boost::asio::ssl::detail::openssl_operation	access:private
boost::asio::ssl::detail::openssl_operation::recv_buf_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  net_buffer& recv_buf_;$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
boost::asio::ssl::detail::openssl_operation::send_buf_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  net_buffer send_buf_; \/\/ buffers for network IO$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
boost::asio::ssl::detail::openssl_operation::session_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  SSL*    session_;$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
boost::asio::ssl::detail::openssl_operation::socket_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  Stream& socket_;$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
boost::asio::ssl::detail::openssl_operation::ssl_bio_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  BIO*    ssl_bio_;$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
boost::asio::ssl::detail::openssl_operation::start	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  int start()$/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:public	signature:()
boost::asio::ssl::detail::openssl_operation::strand_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  boost::asio::io_service::strand* strand_;$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
boost::asio::ssl::detail::openssl_operation::sync_user_handler	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  int sync_user_handler(const boost::system::error_code& error, int rc)$/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:private	signature:(const boost::system::error_code& error, int rc)
boost::asio::ssl::detail::openssl_operation::user_handler_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  user_handler_func  user_handler_;$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
boost::asio::ssl::detail::openssl_operation::write_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  write_func  write_;$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
boost::asio::ssl::detail::openssl_operation::write_func	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  typedef boost::function<int (bool, int)> write_func;$/;"	t	class:boost::asio::ssl::detail::openssl_operation	access:private
boost::asio::ssl::detail::openssl_stream_service	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^class openssl_stream_service$/;"	c	namespace:boost::asio::ssl::detail	inherits:boost::asio::detail::service_base
boost::asio::ssl::detail::openssl_stream_service::async_handshake	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  void async_handshake(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, stream_base::handshake_type type, Handler handler)
boost::asio::ssl::detail::openssl_stream_service::async_read_some	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  void async_read_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const Mutable_Buffers& buffers, Handler handler)
boost::asio::ssl::detail::openssl_stream_service::async_shutdown	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  void async_shutdown(impl_type& impl, Stream& next_layer, Handler handler)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, Handler handler)
boost::asio::ssl::detail::openssl_stream_service::async_write_some	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  void async_write_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const Const_Buffers& buffers, Handler handler)
boost::asio::ssl::detail::openssl_stream_service::base_handler	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  class base_handler$/;"	c	class:boost::asio::ssl::detail::openssl_stream_service	access:private
boost::asio::ssl::detail::openssl_stream_service::base_handler::base_handler	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    base_handler(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::base_handler	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::ssl::detail::openssl_stream_service::base_handler::do_func	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    void do_func(const boost::system::error_code& error, size_t size)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::base_handler	access:public	signature:(const boost::system::error_code& error, size_t size)
boost::asio::ssl::detail::openssl_stream_service::base_handler::func_	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    func_t func_;$/;"	m	class:boost::asio::ssl::detail::openssl_stream_service::base_handler	access:private
boost::asio::ssl::detail::openssl_stream_service::base_handler::func_t	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^      void (const boost::system::error_code&, size_t)> func_t;$/;"	t	class:boost::asio::ssl::detail::openssl_stream_service::base_handler	access:public
boost::asio::ssl::detail::openssl_stream_service::base_handler::io_service_	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::ssl::detail::openssl_stream_service::base_handler	access:private
boost::asio::ssl::detail::openssl_stream_service::base_handler::op_	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    openssl_operation<Stream>* op_;$/;"	m	class:boost::asio::ssl::detail::openssl_stream_service::base_handler	access:private
boost::asio::ssl::detail::openssl_stream_service::base_handler::set_func	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    void set_func(func_t func) { func_ = func; }$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::base_handler	access:public	signature:(func_t func)
boost::asio::ssl::detail::openssl_stream_service::base_handler::set_operation	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    void set_operation(openssl_operation<Stream>* op) { op_ = op; }$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::base_handler	access:public	signature:(openssl_operation<Stream>* op)
boost::asio::ssl::detail::openssl_stream_service::base_handler::work_	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::ssl::detail::openssl_stream_service::base_handler	access:private
boost::asio::ssl::detail::openssl_stream_service::base_handler::~base_handler	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    ~base_handler()$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::base_handler	access:public	signature:()
boost::asio::ssl::detail::openssl_stream_service::create	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  void create(impl_type& impl, Stream& \/*next_layer*\/,$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& , basic_context<Context_Service>& context)
boost::asio::ssl::detail::openssl_stream_service::destroy	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  void destroy(impl_type& impl, Stream& \/*next_layer*\/)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& )
boost::asio::ssl::detail::openssl_stream_service::handshake	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  boost::system::error_code handshake(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, stream_base::handshake_type type, boost::system::error_code& ec)
boost::asio::ssl::detail::openssl_stream_service::handshake_handler	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  class handshake_handler$/;"	c	class:boost::asio::ssl::detail::openssl_stream_service	inherits:base_handler	access:private
boost::asio::ssl::detail::openssl_stream_service::handshake_handler::handler_	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::ssl::detail::openssl_stream_service::handshake_handler	access:private
boost::asio::ssl::detail::openssl_stream_service::handshake_handler::handler_impl	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    void handler_impl(const boost::system::error_code& error, size_t)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::handshake_handler	access:private	signature:(const boost::system::error_code& error, size_t)
boost::asio::ssl::detail::openssl_stream_service::handshake_handler::handshake_handler	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    handshake_handler(Handler handler, boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::handshake_handler	access:public	signature:(Handler handler, boost::asio::io_service& io_service)
boost::asio::ssl::detail::openssl_stream_service::impl_struct	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  typedef struct impl_struct$/;"	s	class:boost::asio::ssl::detail::openssl_stream_service	access:public
boost::asio::ssl::detail::openssl_stream_service::impl_struct::ext_bio	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    ::BIO* ext_bio;$/;"	m	struct:boost::asio::ssl::detail::openssl_stream_service::impl_struct	access:public
boost::asio::ssl::detail::openssl_stream_service::impl_struct::recv_buf	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    net_buffer recv_buf;$/;"	m	struct:boost::asio::ssl::detail::openssl_stream_service::impl_struct	access:public
boost::asio::ssl::detail::openssl_stream_service::impl_struct::ssl	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    ::SSL* ssl;$/;"	m	struct:boost::asio::ssl::detail::openssl_stream_service::impl_struct	access:public
boost::asio::ssl::detail::openssl_stream_service::impl_type	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  } * impl_type;$/;"	t	class:boost::asio::ssl::detail::openssl_stream_service	typeref:struct:boost::asio::ssl::detail::openssl_stream_service::impl_struct	access:public
boost::asio::ssl::detail::openssl_stream_service::in_avail	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  std::size_t in_avail(impl_type& \/*impl*\/, Stream& \/*next_layer*\/,$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& , Stream& , boost::system::error_code& ec)
boost::asio::ssl::detail::openssl_stream_service::io_handler	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  class io_handler $/;"	c	class:boost::asio::ssl::detail::openssl_stream_service	inherits:base_handler	access:private
boost::asio::ssl::detail::openssl_stream_service::io_handler::handler_	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::ssl::detail::openssl_stream_service::io_handler	access:private
boost::asio::ssl::detail::openssl_stream_service::io_handler::handler_impl	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    void handler_impl(const boost::system::error_code& error, size_t size)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::io_handler	access:private	signature:(const boost::system::error_code& error, size_t size)
boost::asio::ssl::detail::openssl_stream_service::io_handler::io_handler	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    io_handler(Handler handler, boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::io_handler	access:public	signature:(Handler handler, boost::asio::io_service& io_service)
boost::asio::ssl::detail::openssl_stream_service::max_buffer_size	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  enum { max_buffer_size = INT_MAX };$/;"	e	enum:boost::asio::ssl::detail::openssl_stream_service::__anon28
boost::asio::ssl::detail::openssl_stream_service::mutex_type	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  typedef boost::asio::detail::mutex mutex_type;$/;"	t	class:boost::asio::ssl::detail::openssl_stream_service	access:private
boost::asio::ssl::detail::openssl_stream_service::null	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  impl_type null() const$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:() const
boost::asio::ssl::detail::openssl_stream_service::openssl_stream_service	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  explicit openssl_stream_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::ssl::detail::openssl_stream_service::peek	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  std::size_t peek(impl_type& \/*impl*\/, Stream& \/*next_layer*\/,$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& , Stream& , const Mutable_Buffers& , boost::system::error_code& ec)
boost::asio::ssl::detail::openssl_stream_service::read_some	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  std::size_t read_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const Mutable_Buffers& buffers, boost::system::error_code& ec)
boost::asio::ssl::detail::openssl_stream_service::shutdown	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  boost::system::error_code shutdown(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, boost::system::error_code& ec)
boost::asio::ssl::detail::openssl_stream_service::shutdown_handler	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  class shutdown_handler$/;"	c	class:boost::asio::ssl::detail::openssl_stream_service	inherits:base_handler	access:private
boost::asio::ssl::detail::openssl_stream_service::shutdown_handler::handler_	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::ssl::detail::openssl_stream_service::shutdown_handler	access:private
boost::asio::ssl::detail::openssl_stream_service::shutdown_handler::handler_impl	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    void handler_impl(const boost::system::error_code& error, size_t)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::shutdown_handler	access:private	signature:(const boost::system::error_code& error, size_t)
boost::asio::ssl::detail::openssl_stream_service::shutdown_handler::shutdown_handler	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    shutdown_handler(Handler handler, boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::shutdown_handler	access:public	signature:(Handler handler, boost::asio::io_service& io_service)
boost::asio::ssl::detail::openssl_stream_service::shutdown_service	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:()
boost::asio::ssl::detail::openssl_stream_service::ssl_wrap	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  struct ssl_wrap$/;"	s	class:boost::asio::ssl::detail::openssl_stream_service	access:private
boost::asio::ssl::detail::openssl_stream_service::ssl_wrap::SSL_accept	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    static int SSL_accept(SSL *ssl)$/;"	f	struct:boost::asio::ssl::detail::openssl_stream_service::ssl_wrap	access:public	signature:(SSL *ssl)
boost::asio::ssl::detail::openssl_stream_service::ssl_wrap::SSL_connect	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    static int SSL_connect(SSL *ssl)$/;"	f	struct:boost::asio::ssl::detail::openssl_stream_service::ssl_wrap	access:public	signature:(SSL *ssl)
boost::asio::ssl::detail::openssl_stream_service::ssl_wrap::ssl_mutex_	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    static Mutex ssl_mutex_;$/;"	m	struct:boost::asio::ssl::detail::openssl_stream_service::ssl_wrap	access:public
boost::asio::ssl::detail::openssl_stream_service::ssl_wrap::ssl_mutex_	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^Mutex openssl_stream_service::ssl_wrap<Mutex>::ssl_mutex_;$/;"	m	class:boost::asio::ssl::detail::openssl_stream_service::ssl_wrap
boost::asio::ssl::detail::openssl_stream_service::ssl_wrap::SSL_shutdown	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    static int SSL_shutdown(SSL *ssl)$/;"	f	struct:boost::asio::ssl::detail::openssl_stream_service::ssl_wrap	access:public	signature:(SSL *ssl)
boost::asio::ssl::detail::openssl_stream_service::strand_	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  boost::asio::io_service::strand strand_;$/;"	m	class:boost::asio::ssl::detail::openssl_stream_service	access:private
boost::asio::ssl::detail::openssl_stream_service::write_some	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  std::size_t write_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const Const_Buffers& buffers, boost::system::error_code& ec)
boost::asio::ssl::detail::ssl_primitive_func	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^typedef boost::function<int (::SSL*)> ssl_primitive_func; $/;"	t	namespace:boost::asio::ssl::detail
boost::asio::ssl::detail::user_handler_func	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  user_handler_func;$/;"	t	namespace:boost::asio::ssl::detail
boost::asio::ssl::stream	/usr/include/boost/asio/ssl/stream.hpp	/^class stream$/;"	c	namespace:boost::asio::ssl	inherits:stream_base,boost::noncopyable
boost::asio::ssl::stream::async_handshake	/usr/include/boost/asio/ssl/stream.hpp	/^  void async_handshake(handshake_type type, HandshakeHandler handler)$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(handshake_type type, HandshakeHandler handler)
boost::asio::ssl::stream::async_read_some	/usr/include/boost/asio/ssl/stream.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::ssl::stream::async_shutdown	/usr/include/boost/asio/ssl/stream.hpp	/^  void async_shutdown(ShutdownHandler handler)$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(ShutdownHandler handler)
boost::asio::ssl::stream::async_write_some	/usr/include/boost/asio/ssl/stream.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::ssl::stream::get_io_service	/usr/include/boost/asio/ssl/stream.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::ssl::stream	access:public	signature:()
boost::asio::ssl::stream::handshake	/usr/include/boost/asio/ssl/stream.hpp	/^  boost::system::error_code handshake(handshake_type type,$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(handshake_type type, boost::system::error_code& ec)
boost::asio::ssl::stream::handshake	/usr/include/boost/asio/ssl/stream.hpp	/^  void handshake(handshake_type type)$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(handshake_type type)
boost::asio::ssl::stream::impl	/usr/include/boost/asio/ssl/stream.hpp	/^  impl_type impl()$/;"	f	class:boost::asio::ssl::stream	access:public	signature:()
boost::asio::ssl::stream::impl_	/usr/include/boost/asio/ssl/stream.hpp	/^  impl_type impl_;$/;"	m	class:boost::asio::ssl::stream	access:private
boost::asio::ssl::stream::impl_type	/usr/include/boost/asio/ssl/stream.hpp	/^  typedef typename service_type::impl_type impl_type;$/;"	t	class:boost::asio::ssl::stream	access:public
boost::asio::ssl::stream::in_avail	/usr/include/boost/asio/ssl/stream.hpp	/^  std::size_t in_avail()$/;"	f	class:boost::asio::ssl::stream	access:public	signature:()
boost::asio::ssl::stream::in_avail	/usr/include/boost/asio/ssl/stream.hpp	/^  std::size_t in_avail(boost::system::error_code& ec)$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::ssl::stream::io_service	/usr/include/boost/asio/ssl/stream.hpp	/^  boost::asio::io_service& io_service()$/;"	f	class:boost::asio::ssl::stream	access:public	signature:()
boost::asio::ssl::stream::lowest_layer	/usr/include/boost/asio/ssl/stream.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::ssl::stream	access:public	signature:() const
boost::asio::ssl::stream::lowest_layer	/usr/include/boost/asio/ssl/stream.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::ssl::stream	access:public	signature:()
boost::asio::ssl::stream::lowest_layer_type	/usr/include/boost/asio/ssl/stream.hpp	/^  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;$/;"	t	class:boost::asio::ssl::stream	access:public
boost::asio::ssl::stream::next_layer	/usr/include/boost/asio/ssl/stream.hpp	/^  next_layer_type& next_layer()$/;"	f	class:boost::asio::ssl::stream	access:public	signature:()
boost::asio::ssl::stream::next_layer_	/usr/include/boost/asio/ssl/stream.hpp	/^  Stream next_layer_;$/;"	m	class:boost::asio::ssl::stream	access:private
boost::asio::ssl::stream::next_layer_type	/usr/include/boost/asio/ssl/stream.hpp	/^  typedef typename boost::remove_reference<Stream>::type next_layer_type;$/;"	t	class:boost::asio::ssl::stream	access:public
boost::asio::ssl::stream::peek	/usr/include/boost/asio/ssl/stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::ssl::stream::peek	/usr/include/boost/asio/ssl/stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::ssl::stream::read_some	/usr/include/boost/asio/ssl/stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::ssl::stream::read_some	/usr/include/boost/asio/ssl/stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::ssl::stream::service_	/usr/include/boost/asio/ssl/stream.hpp	/^  service_type& service_;$/;"	m	class:boost::asio::ssl::stream	access:private
boost::asio::ssl::stream::service_type	/usr/include/boost/asio/ssl/stream.hpp	/^  typedef Service service_type;$/;"	t	class:boost::asio::ssl::stream	access:public
boost::asio::ssl::stream::shutdown	/usr/include/boost/asio/ssl/stream.hpp	/^  boost::system::error_code shutdown(boost::system::error_code& ec)$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(boost::system::error_code& ec)
boost::asio::ssl::stream::shutdown	/usr/include/boost/asio/ssl/stream.hpp	/^  void shutdown()$/;"	f	class:boost::asio::ssl::stream	access:public	signature:()
boost::asio::ssl::stream::stream	/usr/include/boost/asio/ssl/stream.hpp	/^  explicit stream(Arg& arg, basic_context<Context_Service>& context)$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(Arg& arg, basic_context<Context_Service>& context)
boost::asio::ssl::stream::write_some	/usr/include/boost/asio/ssl/stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::ssl::stream::write_some	/usr/include/boost/asio/ssl/stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::ssl::stream::~stream	/usr/include/boost/asio/ssl/stream.hpp	/^  ~stream()$/;"	f	class:boost::asio::ssl::stream	access:public	signature:()
boost::asio::ssl::stream_base	/usr/include/boost/asio/ssl/stream_base.hpp	/^class stream_base$/;"	c	namespace:boost::asio::ssl
boost::asio::ssl::stream_base::client	/usr/include/boost/asio/ssl/stream_base.hpp	/^    client,$/;"	e	enum:boost::asio::ssl::stream_base::handshake_type
boost::asio::ssl::stream_base::dummy_	/usr/include/boost/asio/ssl/stream_base.hpp	/^  char dummy_;$/;"	m	class:boost::asio::ssl::stream_base	access:private
boost::asio::ssl::stream_base::handshake_type	/usr/include/boost/asio/ssl/stream_base.hpp	/^  enum handshake_type$/;"	g	class:boost::asio::ssl::stream_base	access:public
boost::asio::ssl::stream_base::server	/usr/include/boost/asio/ssl/stream_base.hpp	/^    server$/;"	e	enum:boost::asio::ssl::stream_base::handshake_type
boost::asio::ssl::stream_base::~stream_base	/usr/include/boost/asio/ssl/stream_base.hpp	/^  ~stream_base()$/;"	f	class:boost::asio::ssl::stream_base	access:protected	signature:()
boost::asio::ssl::stream_service	/usr/include/boost/asio/ssl/stream_service.hpp	/^class stream_service$/;"	c	namespace:boost::asio::ssl	inherits:boost::asio::io_service::service
boost::asio::ssl::stream_service::async_handshake	/usr/include/boost/asio/ssl/stream_service.hpp	/^  void async_handshake(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, stream_base::handshake_type type, HandshakeHandler handler)
boost::asio::ssl::stream_service::async_read_some	/usr/include/boost/asio/ssl/stream_service.hpp	/^  void async_read_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::ssl::stream_service::async_shutdown	/usr/include/boost/asio/ssl/stream_service.hpp	/^  void async_shutdown(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, ShutdownHandler handler)
boost::asio::ssl::stream_service::async_write_some	/usr/include/boost/asio/ssl/stream_service.hpp	/^  void async_write_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::ssl::stream_service::create	/usr/include/boost/asio/ssl/stream_service.hpp	/^  void create(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, basic_context<Context_Service>& context)
boost::asio::ssl::stream_service::destroy	/usr/include/boost/asio/ssl/stream_service.hpp	/^  void destroy(impl_type& impl, Stream& next_layer)$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer)
boost::asio::ssl::stream_service::handshake	/usr/include/boost/asio/ssl/stream_service.hpp	/^  boost::system::error_code handshake(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, stream_base::handshake_type type, boost::system::error_code& ec)
boost::asio::ssl::stream_service::id	/usr/include/boost/asio/ssl/stream_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::ssl::stream_service	access:public
boost::asio::ssl::stream_service::impl_type	/usr/include/boost/asio/ssl/stream_service.hpp	/^  typedef implementation_defined impl_type;$/;"	t	class:boost::asio::ssl::stream_service	access:public
boost::asio::ssl::stream_service::impl_type	/usr/include/boost/asio/ssl/stream_service.hpp	/^  typedef service_impl_type::impl_type impl_type;$/;"	t	class:boost::asio::ssl::stream_service	access:public
boost::asio::ssl::stream_service::in_avail	/usr/include/boost/asio/ssl/stream_service.hpp	/^  std::size_t in_avail(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, boost::system::error_code& ec)
boost::asio::ssl::stream_service::null	/usr/include/boost/asio/ssl/stream_service.hpp	/^  impl_type null() const$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:() const
boost::asio::ssl::stream_service::peek	/usr/include/boost/asio/ssl/stream_service.hpp	/^  std::size_t peek(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::ssl::stream_service::read_some	/usr/include/boost/asio/ssl/stream_service.hpp	/^  std::size_t read_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::ssl::stream_service::service_impl_	/usr/include/boost/asio/ssl/stream_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::ssl::stream_service	access:private
boost::asio::ssl::stream_service::service_impl_type	/usr/include/boost/asio/ssl/stream_service.hpp	/^  typedef detail::openssl_stream_service service_impl_type;$/;"	t	class:boost::asio::ssl::stream_service	access:private
boost::asio::ssl::stream_service::shutdown	/usr/include/boost/asio/ssl/stream_service.hpp	/^  boost::system::error_code shutdown(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, boost::system::error_code& ec)
boost::asio::ssl::stream_service::shutdown_service	/usr/include/boost/asio/ssl/stream_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:()
boost::asio::ssl::stream_service::stream_service	/usr/include/boost/asio/ssl/stream_service.hpp	/^  explicit stream_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::ssl::stream_service::write_some	/usr/include/boost/asio/ssl/stream_service.hpp	/^  std::size_t write_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::strand	/usr/include/boost/asio/strand.hpp	/^typedef boost::asio::io_service::strand strand;$/;"	t	namespace:boost::asio
boost::asio::streambuf	/usr/include/boost/asio/streambuf.hpp	/^typedef basic_streambuf<> streambuf;$/;"	t	namespace:boost::asio
boost::asio::stream_socket_service	/usr/include/boost/asio/stream_socket_service.hpp	/^class stream_socket_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
boost::asio::stream_socket_service::assign	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, const native_type& native_socket, boost::system::error_code& ec)
boost::asio::stream_socket_service::async_connect	/usr/include/boost/asio/stream_socket_service.hpp	/^  void async_connect(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, ConnectHandler handler)
boost::asio::stream_socket_service::async_receive	/usr/include/boost/asio/stream_socket_service.hpp	/^  void async_receive(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, ReadHandler handler)
boost::asio::stream_socket_service::async_send	/usr/include/boost/asio/stream_socket_service.hpp	/^  void async_send(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, WriteHandler handler)
boost::asio::stream_socket_service::at_mark	/usr/include/boost/asio/stream_socket_service.hpp	/^  bool at_mark(const implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::stream_socket_service::available	/usr/include/boost/asio/stream_socket_service.hpp	/^  std::size_t available(const implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::stream_socket_service::bind	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code bind(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
boost::asio::stream_socket_service::cancel	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::stream_socket_service::close	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::stream_socket_service::connect	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code connect(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, boost::system::error_code& ec)
boost::asio::stream_socket_service::construct	/usr/include/boost/asio/stream_socket_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::stream_socket_service::destroy	/usr/include/boost/asio/stream_socket_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::stream_socket_service::endpoint_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
boost::asio::stream_socket_service::get_option	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl, GettableSocketOption& option, boost::system::error_code& ec) const
boost::asio::stream_socket_service::id	/usr/include/boost/asio/stream_socket_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::stream_socket_service	access:public
boost::asio::stream_socket_service::implementation_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
boost::asio::stream_socket_service::implementation_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
boost::asio::stream_socket_service::io_control	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
boost::asio::stream_socket_service::is_open	/usr/include/boost/asio/stream_socket_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl) const
boost::asio::stream_socket_service::local_endpoint	/usr/include/boost/asio/stream_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::stream_socket_service::native	/usr/include/boost/asio/stream_socket_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl)
boost::asio::stream_socket_service::native_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
boost::asio::stream_socket_service::native_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef typename service_impl_type::native_type native_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
boost::asio::stream_socket_service::open	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
boost::asio::stream_socket_service::protocol_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
boost::asio::stream_socket_service::receive	/usr/include/boost/asio/stream_socket_service.hpp	/^  std::size_t receive(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::stream_socket_service::remote_endpoint	/usr/include/boost/asio/stream_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
boost::asio::stream_socket_service::send	/usr/include/boost/asio/stream_socket_service.hpp	/^  std::size_t send(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
boost::asio::stream_socket_service::service_impl_	/usr/include/boost/asio/stream_socket_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::stream_socket_service	access:private
boost::asio::stream_socket_service::service_impl_type	/usr/include/boost/asio/stream_socket_service.hpp	/^      Protocol, detail::dev_poll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::stream_socket_service	access:private
boost::asio::stream_socket_service::service_impl_type	/usr/include/boost/asio/stream_socket_service.hpp	/^      Protocol, detail::epoll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::stream_socket_service	access:private
boost::asio::stream_socket_service::service_impl_type	/usr/include/boost/asio/stream_socket_service.hpp	/^      Protocol, detail::kqueue_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::stream_socket_service	access:private
boost::asio::stream_socket_service::service_impl_type	/usr/include/boost/asio/stream_socket_service.hpp	/^      Protocol, detail::select_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::stream_socket_service	access:private
boost::asio::stream_socket_service::service_impl_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::stream_socket_service	access:private
boost::asio::stream_socket_service::set_option	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const SettableSocketOption& option, boost::system::error_code& ec)
boost::asio::stream_socket_service::shutdown	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code shutdown(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, socket_base::shutdown_type what, boost::system::error_code& ec)
boost::asio::stream_socket_service::shutdown_service	/usr/include/boost/asio/stream_socket_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:()
boost::asio::stream_socket_service::stream_socket_service	/usr/include/boost/asio/stream_socket_service.hpp	/^  explicit stream_socket_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::time_traits	/usr/include/boost/asio/time_traits.hpp	/^struct time_traits<boost::posix_time::ptime>$/;"	s	namespace:boost::asio
boost::asio::time_traits::add	/usr/include/boost/asio/time_traits.hpp	/^  static time_type add(const time_type& t, const duration_type& d)$/;"	f	struct:boost::asio::time_traits	access:public	signature:(const time_type& t, const duration_type& d)
boost::asio::time_traits::duration_type	/usr/include/boost/asio/time_traits.hpp	/^  typedef boost::posix_time::time_duration duration_type;$/;"	t	struct:boost::asio::time_traits	access:public
boost::asio::time_traits::less_than	/usr/include/boost/asio/time_traits.hpp	/^  static bool less_than(const time_type& t1, const time_type& t2)$/;"	f	struct:boost::asio::time_traits	access:public	signature:(const time_type& t1, const time_type& t2)
boost::asio::time_traits::now	/usr/include/boost/asio/time_traits.hpp	/^  static time_type now()$/;"	f	struct:boost::asio::time_traits	access:public	signature:()
boost::asio::time_traits::subtract	/usr/include/boost/asio/time_traits.hpp	/^  static duration_type subtract(const time_type& t1, const time_type& t2)$/;"	f	struct:boost::asio::time_traits	access:public	signature:(const time_type& t1, const time_type& t2)
boost::asio::time_traits::time_type	/usr/include/boost/asio/time_traits.hpp	/^  typedef boost::posix_time::ptime time_type;$/;"	t	struct:boost::asio::time_traits	access:public
boost::asio::time_traits::to_posix_duration	/usr/include/boost/asio/time_traits.hpp	/^  static boost::posix_time::time_duration to_posix_duration($/;"	f	struct:boost::asio::time_traits	access:public	signature:( const duration_type& d)
boost::asio::transfer_at_least	/usr/include/boost/asio/completion_condition.hpp	/^inline detail::transfer_at_least_t transfer_at_least(std::size_t minimum)$/;"	f	namespace:boost::asio	signature:(std::size_t minimum)
boost::asio::transfer_at_least	/usr/include/boost/asio/completion_condition.hpp	/^unspecified transfer_at_least(std::size_t minimum);$/;"	p	namespace:boost::asio	signature:(std::size_t minimum)
boost::asio::use_service	/usr/include/boost/asio/io_service.hpp	/^template <typename Service> Service& use_service(io_service& ios);$/;"	p	namespace:boost::asio	signature:(io_service& ios)
boost::asio::windows	/usr/include/boost/asio/windows/basic_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
boost::asio::windows	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
boost::asio::windows	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
boost::asio::windows	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
boost::asio::windows	/usr/include/boost/asio/windows/random_access_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
boost::asio::windows	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
boost::asio::windows	/usr/include/boost/asio/windows/stream_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
boost::asio::windows	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
boost::asio::windows::basic_handle	/usr/include/boost/asio/windows/basic_handle.hpp	/^class basic_handle$/;"	c	namespace:boost::asio::windows	inherits:basic_io_object
boost::asio::windows::basic_handle::assign	/usr/include/boost/asio/windows/basic_handle.hpp	/^  boost::system::error_code assign(const native_type& native_handle,$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(const native_type& native_handle, boost::system::error_code& ec)
boost::asio::windows::basic_handle::assign	/usr/include/boost/asio/windows/basic_handle.hpp	/^  void assign(const native_type& native_handle)$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(const native_type& native_handle)
boost::asio::windows::basic_handle::basic_handle	/usr/include/boost/asio/windows/basic_handle.hpp	/^  basic_handle(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(boost::asio::io_service& io_service, const native_type& native_handle)
boost::asio::windows::basic_handle::basic_handle	/usr/include/boost/asio/windows/basic_handle.hpp	/^  explicit basic_handle(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::windows::basic_handle::cancel	/usr/include/boost/asio/windows/basic_handle.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(boost::system::error_code& ec)
boost::asio::windows::basic_handle::cancel	/usr/include/boost/asio/windows/basic_handle.hpp	/^  void cancel()$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:()
boost::asio::windows::basic_handle::close	/usr/include/boost/asio/windows/basic_handle.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(boost::system::error_code& ec)
boost::asio::windows::basic_handle::close	/usr/include/boost/asio/windows/basic_handle.hpp	/^  void close()$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:()
boost::asio::windows::basic_handle::is_open	/usr/include/boost/asio/windows/basic_handle.hpp	/^  bool is_open() const$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:() const
boost::asio::windows::basic_handle::lowest_layer	/usr/include/boost/asio/windows/basic_handle.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:() const
boost::asio::windows::basic_handle::lowest_layer	/usr/include/boost/asio/windows/basic_handle.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:()
boost::asio::windows::basic_handle::lowest_layer_type	/usr/include/boost/asio/windows/basic_handle.hpp	/^  typedef basic_handle<HandleService> lowest_layer_type;$/;"	t	class:boost::asio::windows::basic_handle	access:public
boost::asio::windows::basic_handle::native	/usr/include/boost/asio/windows/basic_handle.hpp	/^  native_type native()$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:()
boost::asio::windows::basic_handle::native_type	/usr/include/boost/asio/windows/basic_handle.hpp	/^  typedef typename HandleService::native_type native_type;$/;"	t	class:boost::asio::windows::basic_handle	access:public
boost::asio::windows::basic_handle::~basic_handle	/usr/include/boost/asio/windows/basic_handle.hpp	/^  ~basic_handle()$/;"	f	class:boost::asio::windows::basic_handle	access:protected	signature:()
boost::asio::windows::basic_random_access_handle	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^class basic_random_access_handle$/;"	c	namespace:boost::asio::windows	inherits:basic_handle
boost::asio::windows::basic_random_access_handle::async_read_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  void async_read_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::windows::basic_random_access_handle::async_write_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  void async_write_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::windows::basic_random_access_handle::basic_random_access_handle	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  basic_random_access_handle(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::asio::io_service& io_service, const native_type& native_handle)
boost::asio::windows::basic_random_access_handle::basic_random_access_handle	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  explicit basic_random_access_handle(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::windows::basic_random_access_handle::native_type	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  typedef typename RandomAccessHandleService::native_type native_type;$/;"	t	class:boost::asio::windows::basic_random_access_handle	access:public
boost::asio::windows::basic_random_access_handle::read_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  std::size_t read_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const MutableBufferSequence& buffers)
boost::asio::windows::basic_random_access_handle::read_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  std::size_t read_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::windows::basic_random_access_handle::write_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  std::size_t write_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const ConstBufferSequence& buffers)
boost::asio::windows::basic_random_access_handle::write_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  std::size_t write_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::windows::basic_stream_handle	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^class basic_stream_handle$/;"	c	namespace:boost::asio::windows	inherits:basic_handle
boost::asio::windows::basic_stream_handle::async_read_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  void async_read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::windows::basic_stream_handle::async_write_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  void async_write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::windows::basic_stream_handle::basic_stream_handle	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  basic_stream_handle(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(boost::asio::io_service& io_service, const native_type& native_handle)
boost::asio::windows::basic_stream_handle::basic_stream_handle	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  explicit basic_stream_handle(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::windows::basic_stream_handle::native_type	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  typedef typename StreamHandleService::native_type native_type;$/;"	t	class:boost::asio::windows::basic_stream_handle	access:public
boost::asio::windows::basic_stream_handle::read_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const MutableBufferSequence& buffers)
boost::asio::windows::basic_stream_handle::read_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::windows::basic_stream_handle::write_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const ConstBufferSequence& buffers)
boost::asio::windows::basic_stream_handle::write_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::windows::overlapped_ptr	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^class overlapped_ptr$/;"	c	namespace:boost::asio::windows	inherits:noncopyable
boost::asio::windows::overlapped_ptr::complete	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
boost::asio::windows::overlapped_ptr::get	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  const OVERLAPPED* get() const$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:() const
boost::asio::windows::overlapped_ptr::get	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  OVERLAPPED* get()$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:()
boost::asio::windows::overlapped_ptr::impl_	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  detail::win_iocp_overlapped_ptr impl_;$/;"	m	class:boost::asio::windows::overlapped_ptr	access:private
boost::asio::windows::overlapped_ptr::overlapped_ptr	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  explicit overlapped_ptr(boost::asio::io_service& io_service, Handler handler)$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:(boost::asio::io_service& io_service, Handler handler)
boost::asio::windows::overlapped_ptr::overlapped_ptr	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  overlapped_ptr()$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:()
boost::asio::windows::overlapped_ptr::release	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  OVERLAPPED* release()$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:()
boost::asio::windows::overlapped_ptr::reset	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  void reset()$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:()
boost::asio::windows::overlapped_ptr::reset	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  void reset(boost::asio::io_service& io_service, Handler handler)$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:(boost::asio::io_service& io_service, Handler handler)
boost::asio::windows::overlapped_ptr::~overlapped_ptr	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  ~overlapped_ptr()$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:()
boost::asio::windows::random_access_handle	/usr/include/boost/asio/windows/random_access_handle.hpp	/^typedef basic_random_access_handle<> random_access_handle;$/;"	t	namespace:boost::asio::windows
boost::asio::windows::random_access_handle_service	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^class random_access_handle_service$/;"	c	namespace:boost::asio::windows	inherits:boost::asio::io_service::service
boost::asio::windows::random_access_handle_service::assign	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, const native_type& native_handle, boost::system::error_code& ec)
boost::asio::windows::random_access_handle_service::async_read_some_at	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void async_read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::windows::random_access_handle_service::async_write_some_at	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void async_write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::windows::random_access_handle_service::cancel	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::windows::random_access_handle_service::close	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::windows::random_access_handle_service::construct	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::windows::random_access_handle_service::destroy	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::windows::random_access_handle_service::id	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::windows::random_access_handle_service	access:public
boost::asio::windows::random_access_handle_service::implementation_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:public
boost::asio::windows::random_access_handle_service::implementation_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:public
boost::asio::windows::random_access_handle_service::is_open	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(const implementation_type& impl) const
boost::asio::windows::random_access_handle_service::native	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::windows::random_access_handle_service::native_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:public
boost::asio::windows::random_access_handle_service::native_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef service_impl_type::native_type native_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:public
boost::asio::windows::random_access_handle_service::random_access_handle_service	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  explicit random_access_handle_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::windows::random_access_handle_service::read_some_at	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  std::size_t read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::windows::random_access_handle_service::service_impl_	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::windows::random_access_handle_service	access:private
boost::asio::windows::random_access_handle_service::service_impl_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef detail::win_iocp_handle_service service_impl_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:private
boost::asio::windows::random_access_handle_service::shutdown_service	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:()
boost::asio::windows::random_access_handle_service::write_some_at	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  std::size_t write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::windows::stream_handle	/usr/include/boost/asio/windows/stream_handle.hpp	/^typedef basic_stream_handle<> stream_handle;$/;"	t	namespace:boost::asio::windows
boost::asio::windows::stream_handle_service	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^class stream_handle_service$/;"	c	namespace:boost::asio::windows	inherits:boost::asio::io_service::service
boost::asio::windows::stream_handle_service::assign	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  boost::system::error_code assign(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, const native_type& native_handle, boost::system::error_code& ec)
boost::asio::windows::stream_handle_service::async_read_some	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void async_read_some(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, ReadHandler handler)
boost::asio::windows::stream_handle_service::async_write_some	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void async_write_some(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, WriteHandler handler)
boost::asio::windows::stream_handle_service::cancel	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::windows::stream_handle_service::close	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
boost::asio::windows::stream_handle_service::construct	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::windows::stream_handle_service::destroy	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::windows::stream_handle_service::id	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::windows::stream_handle_service	access:public
boost::asio::windows::stream_handle_service::implementation_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:public
boost::asio::windows::stream_handle_service::implementation_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:public
boost::asio::windows::stream_handle_service::is_open	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(const implementation_type& impl) const
boost::asio::windows::stream_handle_service::native	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl)
boost::asio::windows::stream_handle_service::native_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:public
boost::asio::windows::stream_handle_service::native_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef service_impl_type::native_type native_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:public
boost::asio::windows::stream_handle_service::read_some	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  std::size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::windows::stream_handle_service::service_impl_	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::windows::stream_handle_service	access:private
boost::asio::windows::stream_handle_service::service_impl_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef detail::win_iocp_handle_service service_impl_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:private
boost::asio::windows::stream_handle_service::shutdown_service	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:()
boost::asio::windows::stream_handle_service::stream_handle_service	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  explicit stream_handle_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(boost::asio::io_service& io_service)
boost::asio::windows::stream_handle_service::write_some	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  std::size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
boost::asio::write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, basic_streambuf<Allocator>& b);$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, basic_streambuf<Allocator>& b)
boost::asio::write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
boost::asio::write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers);$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers)
boost::asio::write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers, CompletionCondition completion_condition)
boost::asio::write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
boost::asio::write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::asio::write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b)
boost::asio::write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers)
boost::asio::write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition)
boost::asio::write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
boost::system	/usr/include/boost/asio/error.hpp	/^namespace system {$/;"	n	namespace:boost
boost::system::is_error_code_enum	/usr/include/boost/asio/error.hpp	/^template<> struct is_error_code_enum<boost::asio::error::addrinfo_errors>$/;"	s	namespace:boost::system
boost::system::is_error_code_enum	/usr/include/boost/asio/error.hpp	/^template<> struct is_error_code_enum<boost::asio::error::basic_errors>$/;"	s	namespace:boost::system
boost::system::is_error_code_enum	/usr/include/boost/asio/error.hpp	/^template<> struct is_error_code_enum<boost::asio::error::misc_errors>$/;"	s	namespace:boost::system
boost::system::is_error_code_enum	/usr/include/boost/asio/error.hpp	/^template<> struct is_error_code_enum<boost::asio::error::netdb_errors>$/;"	s	namespace:boost::system
boost::system::is_error_code_enum	/usr/include/boost/asio/error.hpp	/^template<> struct is_error_code_enum<boost::asio::error::ssl_errors>$/;"	s	namespace:boost::system
boost::system::is_error_code_enum::value	/usr/include/boost/asio/error.hpp	/^  static const bool value = true;$/;"	m	struct:boost::system::is_error_code_enum	access:public
BOOST_ASIO_BASIC_DATAGRAM_SOCKET_HPP	/usr/include/boost/asio/basic_datagram_socket.hpp	12;"	d
BOOST_ASIO_BASIC_DEADLINE_TIMER_HPP	/usr/include/boost/asio/basic_deadline_timer.hpp	12;"	d
BOOST_ASIO_BASIC_IO_OBJECT_HPP	/usr/include/boost/asio/basic_io_object.hpp	12;"	d
BOOST_ASIO_BASIC_RAW_SOCKET_HPP	/usr/include/boost/asio/basic_raw_socket.hpp	12;"	d
BOOST_ASIO_BASIC_SERIAL_PORT_HPP	/usr/include/boost/asio/basic_serial_port.hpp	13;"	d
BOOST_ASIO_BASIC_SOCKET_ACCEPTOR_HPP	/usr/include/boost/asio/basic_socket_acceptor.hpp	12;"	d
BOOST_ASIO_BASIC_SOCKET_HPP	/usr/include/boost/asio/basic_socket.hpp	12;"	d
BOOST_ASIO_BASIC_SOCKET_IOSTREAM_HPP	/usr/include/boost/asio/basic_socket_iostream.hpp	12;"	d
BOOST_ASIO_BASIC_SOCKET_STREAMBUF_HPP	/usr/include/boost/asio/basic_socket_streambuf.hpp	12;"	d
BOOST_ASIO_BASIC_STREAMBUF_HPP	/usr/include/boost/asio/basic_streambuf.hpp	12;"	d
BOOST_ASIO_BASIC_STREAM_SOCKET_HPP	/usr/include/boost/asio/basic_stream_socket.hpp	12;"	d
BOOST_ASIO_BUFFERED_READ_STREAM_FWD_HPP	/usr/include/boost/asio/buffered_read_stream_fwd.hpp	12;"	d
BOOST_ASIO_BUFFERED_READ_STREAM_HPP	/usr/include/boost/asio/buffered_read_stream.hpp	12;"	d
BOOST_ASIO_BUFFERED_STREAM_FWD_HPP	/usr/include/boost/asio/buffered_stream_fwd.hpp	12;"	d
BOOST_ASIO_BUFFERED_STREAM_HPP	/usr/include/boost/asio/buffered_stream.hpp	12;"	d
BOOST_ASIO_BUFFERED_WRITE_STREAM_FWD_HPP	/usr/include/boost/asio/buffered_write_stream_fwd.hpp	12;"	d
BOOST_ASIO_BUFFERED_WRITE_STREAM_HPP	/usr/include/boost/asio/buffered_write_stream.hpp	12;"	d
BOOST_ASIO_BUFFERS_ITERATOR_HPP	/usr/include/boost/asio/buffers_iterator.hpp	12;"	d
BOOST_ASIO_BUFFER_HPP	/usr/include/boost/asio/buffer.hpp	12;"	d
BOOST_ASIO_COMPLETION_CONDITION_HPP	/usr/include/boost/asio/completion_condition.hpp	12;"	d
BOOST_ASIO_DATAGRAM_SOCKET_SERVICE_HPP	/usr/include/boost/asio/datagram_socket_service.hpp	12;"	d
BOOST_ASIO_DEADLINE_TIMER_HPP	/usr/include/boost/asio/deadline_timer.hpp	12;"	d
BOOST_ASIO_DEADLINE_TIMER_SERVICE_HPP	/usr/include/boost/asio/deadline_timer_service.hpp	12;"	d
BOOST_ASIO_DETAIL_BIND_HANDLER_HPP	/usr/include/boost/asio/detail/bind_handler.hpp	12;"	d
BOOST_ASIO_DETAIL_BUFFERED_STREAM_STORAGE_HPP	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	12;"	d
BOOST_ASIO_DETAIL_BUFFER_RESIZE_GUARD_HPP	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	12;"	d
BOOST_ASIO_DETAIL_CALL_STACK_HPP	/usr/include/boost/asio/detail/call_stack.hpp	12;"	d
BOOST_ASIO_DETAIL_CONST_BUFFERS_ITERATOR_HPP	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	12;"	d
BOOST_ASIO_DETAIL_CONSUMING_BUFFERS_HPP	/usr/include/boost/asio/detail/consuming_buffers.hpp	12;"	d
BOOST_ASIO_DETAIL_DEADLINE_TIMER_SERVICE_HPP	/usr/include/boost/asio/detail/deadline_timer_service.hpp	12;"	d
BOOST_ASIO_DETAIL_DESCRIPTOR_OPS_HPP	/usr/include/boost/asio/detail/descriptor_ops.hpp	12;"	d
BOOST_ASIO_DETAIL_DEV_POLL_REACTOR_FWD_HPP	/usr/include/boost/asio/detail/dev_poll_reactor_fwd.hpp	12;"	d
BOOST_ASIO_DETAIL_DEV_POLL_REACTOR_HPP	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	12;"	d
BOOST_ASIO_DETAIL_EPOLL_REACTOR_FWD_HPP	/usr/include/boost/asio/detail/epoll_reactor_fwd.hpp	12;"	d
BOOST_ASIO_DETAIL_EPOLL_REACTOR_HPP	/usr/include/boost/asio/detail/epoll_reactor.hpp	12;"	d
BOOST_ASIO_DETAIL_EVENTFD_SELECT_INTERRUPTER_HPP	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	13;"	d
BOOST_ASIO_DETAIL_EVENT_HPP	/usr/include/boost/asio/detail/event.hpp	12;"	d
BOOST_ASIO_DETAIL_FD_SET_ADAPTER_HPP	/usr/include/boost/asio/detail/fd_set_adapter.hpp	12;"	d
BOOST_ASIO_DETAIL_HANDLER_ALLOC_HELPERS_HPP	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	12;"	d
BOOST_ASIO_DETAIL_HANDLER_BASE_FROM_MEMBER_HPP	/usr/include/boost/asio/detail/handler_base_from_member.hpp	12;"	d
BOOST_ASIO_DETAIL_HANDLER_INVOKE_HELPERS_HPP	/usr/include/boost/asio/detail/handler_invoke_helpers.hpp	12;"	d
BOOST_ASIO_DETAIL_HANDLER_QUEUE_HPP	/usr/include/boost/asio/detail/handler_queue.hpp	12;"	d
BOOST_ASIO_DETAIL_HASH_MAP_HPP	/usr/include/boost/asio/detail/hash_map.hpp	12;"	d
BOOST_ASIO_DETAIL_INDIRECT_HANDLER_QUEUE_HPP	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	12;"	d
BOOST_ASIO_DETAIL_IO_CONTROL_HPP	/usr/include/boost/asio/detail/io_control.hpp	12;"	d
BOOST_ASIO_DETAIL_KQUEUE_REACTOR_FWD_HPP	/usr/include/boost/asio/detail/kqueue_reactor_fwd.hpp	13;"	d
BOOST_ASIO_DETAIL_KQUEUE_REACTOR_HPP	/usr/include/boost/asio/detail/kqueue_reactor.hpp	13;"	d
BOOST_ASIO_DETAIL_LOCAL_FREE_ON_BLOCK_EXIT_HPP	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	12;"	d
BOOST_ASIO_DETAIL_MUTEX_HPP	/usr/include/boost/asio/detail/mutex.hpp	12;"	d
BOOST_ASIO_DETAIL_NONCOPYABLE_HPP	/usr/include/boost/asio/detail/noncopyable.hpp	12;"	d
BOOST_ASIO_DETAIL_NULL_EVENT_HPP	/usr/include/boost/asio/detail/null_event.hpp	12;"	d
BOOST_ASIO_DETAIL_NULL_MUTEX_HPP	/usr/include/boost/asio/detail/null_mutex.hpp	12;"	d
BOOST_ASIO_DETAIL_NULL_SIGNAL_BLOCKER_HPP	/usr/include/boost/asio/detail/null_signal_blocker.hpp	12;"	d
BOOST_ASIO_DETAIL_NULL_THREAD_HPP	/usr/include/boost/asio/detail/null_thread.hpp	12;"	d
BOOST_ASIO_DETAIL_NULL_TSS_PTR_HPP	/usr/include/boost/asio/detail/null_tss_ptr.hpp	12;"	d
BOOST_ASIO_DETAIL_OLD_WIN_SDK_COMPAT_HPP	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	12;"	d
BOOST_ASIO_DETAIL_PIPE_SELECT_INTERRUPTER_HPP	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	12;"	d
BOOST_ASIO_DETAIL_POSIX_EVENT_HPP	/usr/include/boost/asio/detail/posix_event.hpp	12;"	d
BOOST_ASIO_DETAIL_POSIX_FD_SET_ADAPTER_HPP	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	12;"	d
BOOST_ASIO_DETAIL_POSIX_MUTEX_HPP	/usr/include/boost/asio/detail/posix_mutex.hpp	12;"	d
BOOST_ASIO_DETAIL_POSIX_SIGNAL_BLOCKER_HPP	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	12;"	d
boost_asio_detail_posix_thread_function	/usr/include/boost/asio/detail/posix_thread.hpp	/^  friend void* boost_asio_detail_posix_thread_function(void* arg);$/;"	p	class:boost::asio::detail::posix_thread	access:friend	signature:(void* arg)
boost_asio_detail_posix_thread_function	/usr/include/boost/asio/detail/posix_thread.hpp	/^extern "C" void* boost_asio_detail_posix_thread_function(void* arg);$/;"	p	namespace:boost::asio::detail	signature:(void* arg)
boost_asio_detail_posix_thread_function	/usr/include/boost/asio/detail/posix_thread.hpp	/^inline void* boost_asio_detail_posix_thread_function(void* arg)$/;"	f	namespace:boost::asio::detail	signature:(void* arg)
BOOST_ASIO_DETAIL_POSIX_THREAD_HPP	/usr/include/boost/asio/detail/posix_thread.hpp	12;"	d
BOOST_ASIO_DETAIL_POSIX_TSS_PTR_HPP	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	12;"	d
BOOST_ASIO_DETAIL_REACTIVE_DESCRIPTOR_SERVICE_HPP	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	12;"	d
BOOST_ASIO_DETAIL_REACTIVE_SERIAL_PORT_SERVICE_HPP	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	13;"	d
BOOST_ASIO_DETAIL_REACTIVE_SOCKET_SERVICE_HPP	/usr/include/boost/asio/detail/reactive_socket_service.hpp	12;"	d
BOOST_ASIO_DETAIL_REACTOR_OP_QUEUE_HPP	/usr/include/boost/asio/detail/reactor_op_queue.hpp	12;"	d
BOOST_ASIO_DETAIL_RESOLVER_SERVICE_HPP	/usr/include/boost/asio/detail/resolver_service.hpp	12;"	d
BOOST_ASIO_DETAIL_SCOPED_LOCK_HPP	/usr/include/boost/asio/detail/scoped_lock.hpp	12;"	d
BOOST_ASIO_DETAIL_SELECT_INTERRUPTER_HPP	/usr/include/boost/asio/detail/select_interrupter.hpp	12;"	d
BOOST_ASIO_DETAIL_SELECT_REACTOR_FWD_HPP	/usr/include/boost/asio/detail/select_reactor_fwd.hpp	12;"	d
BOOST_ASIO_DETAIL_SELECT_REACTOR_HPP	/usr/include/boost/asio/detail/select_reactor.hpp	12;"	d
BOOST_ASIO_DETAIL_SERVICE_BASE_HPP	/usr/include/boost/asio/detail/service_base.hpp	12;"	d
BOOST_ASIO_DETAIL_SERVICE_ID_HPP	/usr/include/boost/asio/detail/service_id.hpp	12;"	d
BOOST_ASIO_DETAIL_SERVICE_REGISTRY_FWD_HPP	/usr/include/boost/asio/detail/service_registry_fwd.hpp	12;"	d
BOOST_ASIO_DETAIL_SERVICE_REGISTRY_HPP	/usr/include/boost/asio/detail/service_registry.hpp	12;"	d
BOOST_ASIO_DETAIL_SIGNAL_BLOCKER_HPP	/usr/include/boost/asio/detail/signal_blocker.hpp	12;"	d
BOOST_ASIO_DETAIL_SIGNAL_INIT_HPP	/usr/include/boost/asio/detail/signal_init.hpp	12;"	d
BOOST_ASIO_DETAIL_SOCKET_HOLDER_HPP	/usr/include/boost/asio/detail/socket_holder.hpp	12;"	d
BOOST_ASIO_DETAIL_SOCKET_OPS_HPP	/usr/include/boost/asio/detail/socket_ops.hpp	12;"	d
BOOST_ASIO_DETAIL_SOCKET_OPTION_HPP	/usr/include/boost/asio/detail/socket_option.hpp	12;"	d
BOOST_ASIO_DETAIL_SOCKET_SELECT_INTERRUPTER_HPP	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	12;"	d
BOOST_ASIO_DETAIL_SOCKET_TYPES_HPP	/usr/include/boost/asio/detail/socket_types.hpp	12;"	d
BOOST_ASIO_DETAIL_STRAND_SERVICE_HPP	/usr/include/boost/asio/detail/strand_service.hpp	12;"	d
BOOST_ASIO_DETAIL_TASK_IO_SERVICE_2LOCK_HPP	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	12;"	d
BOOST_ASIO_DETAIL_TASK_IO_SERVICE_FWD_HPP	/usr/include/boost/asio/detail/task_io_service_fwd.hpp	12;"	d
BOOST_ASIO_DETAIL_TASK_IO_SERVICE_HPP	/usr/include/boost/asio/detail/task_io_service.hpp	12;"	d
BOOST_ASIO_DETAIL_THREAD_HPP	/usr/include/boost/asio/detail/thread.hpp	12;"	d
BOOST_ASIO_DETAIL_THROW_ERROR_HPP	/usr/include/boost/asio/detail/throw_error.hpp	12;"	d
BOOST_ASIO_DETAIL_TIMER_QUEUE_BASE_HPP	/usr/include/boost/asio/detail/timer_queue_base.hpp	12;"	d
BOOST_ASIO_DETAIL_TIMER_QUEUE_HPP	/usr/include/boost/asio/detail/timer_queue.hpp	12;"	d
BOOST_ASIO_DETAIL_TSS_PTR_HPP	/usr/include/boost/asio/detail/tss_ptr.hpp	12;"	d
BOOST_ASIO_DETAIL_WINCE_THREAD_HPP	/usr/include/boost/asio/detail/wince_thread.hpp	12;"	d
BOOST_ASIO_DETAIL_WINSOCK_INIT_HPP	/usr/include/boost/asio/detail/winsock_init.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_EVENT_HPP	/usr/include/boost/asio/detail/win_event.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_FD_SET_ADAPTER_HPP	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_HANDLE_SERVICE_HPP	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	13;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_IO_SERVICE_FWD_HPP	/usr/include/boost/asio/detail/win_iocp_io_service_fwd.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_IO_SERVICE_HPP	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_OVERLAPPED_PTR_HPP	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_SERIAL_PORT_SERVICE_HPP	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	13;"	d
BOOST_ASIO_DETAIL_WIN_IOCP_SOCKET_SERVICE_HPP	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_MUTEX_HPP	/usr/include/boost/asio/detail/win_mutex.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_SIGNAL_BLOCKER_HPP	/usr/include/boost/asio/detail/win_signal_blocker.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_THREAD_HPP	/usr/include/boost/asio/detail/win_thread.hpp	12;"	d
BOOST_ASIO_DETAIL_WIN_TSS_PTR_HPP	/usr/include/boost/asio/detail/win_tss_ptr.hpp	12;"	d
BOOST_ASIO_DETAIL_WRAPPED_HANDLER_HPP	/usr/include/boost/asio/detail/wrapped_handler.hpp	12;"	d
BOOST_ASIO_ENABLE_BUFFER_DEBUGGING	/usr/include/boost/asio/buffer.hpp	32;"	d
BOOST_ASIO_ENABLE_BUFFER_DEBUGGING	/usr/include/boost/asio/buffer.hpp	40;"	d
BOOST_ASIO_ERROR_HPP	/usr/include/boost/asio/error.hpp	12;"	d
BOOST_ASIO_GETADDRINFO_ERROR	/usr/include/boost/asio/error.hpp	36;"	d
BOOST_ASIO_GETADDRINFO_ERROR	/usr/include/boost/asio/error.hpp	436;"	d
BOOST_ASIO_GETADDRINFO_ERROR	/usr/include/boost/asio/error.hpp	43;"	d
BOOST_ASIO_GETADDRINFO_ERROR	/usr/include/boost/asio/error.hpp	49;"	d
boost_asio_handler_alloc_helpers	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^namespace boost_asio_handler_alloc_helpers {$/;"	n
boost_asio_handler_alloc_helpers::allocate	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^inline void* allocate(std::size_t s, Handler& h)$/;"	f	namespace:boost_asio_handler_alloc_helpers	signature:(std::size_t s, Handler& h)
boost_asio_handler_alloc_helpers::deallocate	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^inline void deallocate(void* p, std::size_t s, Handler& h)$/;"	f	namespace:boost_asio_handler_alloc_helpers	signature:(void* p, std::size_t s, Handler& h)
BOOST_ASIO_HANDLER_ALLOC_HOOK_HPP	/usr/include/boost/asio/handler_alloc_hook.hpp	12;"	d
boost_asio_handler_invoke_helpers	/usr/include/boost/asio/detail/handler_invoke_helpers.hpp	/^namespace boost_asio_handler_invoke_helpers {$/;"	n
boost_asio_handler_invoke_helpers::invoke	/usr/include/boost/asio/detail/handler_invoke_helpers.hpp	/^inline void invoke(const Function& function, Context& context)$/;"	f	namespace:boost_asio_handler_invoke_helpers	signature:(const Function& function, Context& context)
BOOST_ASIO_HANDLER_INVOKE_HOOK_HPP	/usr/include/boost/asio/handler_invoke_hook.hpp	12;"	d
BOOST_ASIO_HAS_DEV_POLL	/usr/include/boost/asio/detail/dev_poll_reactor_fwd.hpp	24;"	d
BOOST_ASIO_HAS_EPOLL	/usr/include/boost/asio/detail/epoll_reactor_fwd.hpp	30;"	d
BOOST_ASIO_HAS_EVENTFD	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	31;"	d
BOOST_ASIO_HAS_IOCP	/usr/include/boost/asio/detail/win_iocp_io_service_fwd.hpp	33;"	d
BOOST_ASIO_HAS_KQUEUE	/usr/include/boost/asio/detail/kqueue_reactor_fwd.hpp	27;"	d
BOOST_ASIO_HAS_LOCAL_SOCKETS	/usr/include/boost/asio/local/basic_endpoint.hpp	36;"	d
BOOST_ASIO_HAS_OLD_WIN_SDK	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	28;"	d
BOOST_ASIO_HAS_POSIX_STREAM_DESCRIPTOR	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	31;"	d
BOOST_ASIO_HAS_SERIAL_PORT	/usr/include/boost/asio/serial_port_base.hpp	31;"	d
BOOST_ASIO_HAS_WINDOWS_OVERLAPPED_PTR	/usr/include/boost/asio/windows/overlapped_ptr.hpp	26;"	d
BOOST_ASIO_HAS_WINDOWS_RANDOM_ACCESS_HANDLE	/usr/include/boost/asio/windows/random_access_handle_service.hpp	33;"	d
BOOST_ASIO_HAS_WINDOWS_STREAM_HANDLE	/usr/include/boost/asio/windows/stream_handle_service.hpp	32;"	d
BOOST_ASIO_IO_SERVICE_HPP	/usr/include/boost/asio/io_service.hpp	12;"	d
BOOST_ASIO_IP_ADDRESS_HPP	/usr/include/boost/asio/ip/address.hpp	12;"	d
BOOST_ASIO_IP_ADDRESS_V4_HPP	/usr/include/boost/asio/ip/address_v4.hpp	12;"	d
BOOST_ASIO_IP_ADDRESS_V6_HPP	/usr/include/boost/asio/ip/address_v6.hpp	12;"	d
BOOST_ASIO_IP_BASIC_ENDPOINT_HPP	/usr/include/boost/asio/ip/basic_endpoint.hpp	12;"	d
BOOST_ASIO_IP_BASIC_RESOLVER_ENTRY_HPP	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	12;"	d
BOOST_ASIO_IP_BASIC_RESOLVER_HPP	/usr/include/boost/asio/ip/basic_resolver.hpp	12;"	d
BOOST_ASIO_IP_BASIC_RESOLVER_ITERATOR_HPP	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	12;"	d
BOOST_ASIO_IP_BASIC_RESOLVER_QUERY_HPP	/usr/include/boost/asio/ip/basic_resolver_query.hpp	12;"	d
BOOST_ASIO_IP_DETAIL_SOCKET_OPTION_HPP	/usr/include/boost/asio/ip/detail/socket_option.hpp	12;"	d
BOOST_ASIO_IP_HOST_NAME_HPP	/usr/include/boost/asio/ip/host_name.hpp	12;"	d
BOOST_ASIO_IP_ICMP_HPP	/usr/include/boost/asio/ip/icmp.hpp	12;"	d
BOOST_ASIO_IP_MULTICAST_HPP	/usr/include/boost/asio/ip/multicast.hpp	12;"	d
BOOST_ASIO_IP_RESOLVER_QUERY_BASE_HPP	/usr/include/boost/asio/ip/resolver_query_base.hpp	12;"	d
BOOST_ASIO_IP_RESOLVER_SERVICE_HPP	/usr/include/boost/asio/ip/resolver_service.hpp	12;"	d
BOOST_ASIO_IP_TCP_HPP	/usr/include/boost/asio/ip/tcp.hpp	12;"	d
BOOST_ASIO_IP_UDP_HPP	/usr/include/boost/asio/ip/udp.hpp	12;"	d
BOOST_ASIO_IP_UNICAST_HPP	/usr/include/boost/asio/ip/unicast.hpp	12;"	d
BOOST_ASIO_IP_V6_ONLY_HPP	/usr/include/boost/asio/ip/v6_only.hpp	12;"	d
BOOST_ASIO_IS_READ_BUFFERED_HPP	/usr/include/boost/asio/is_read_buffered.hpp	12;"	d
BOOST_ASIO_IS_WRITE_BUFFERED_HPP	/usr/include/boost/asio/is_write_buffered.hpp	12;"	d
BOOST_ASIO_LOCAL_BASIC_ENDPOINT_HPP	/usr/include/boost/asio/local/basic_endpoint.hpp	13;"	d
BOOST_ASIO_LOCAL_CONNECT_PAIR_HPP	/usr/include/boost/asio/local/connect_pair.hpp	12;"	d
BOOST_ASIO_LOCAL_DATAGRAM_PROTOCOL_HPP	/usr/include/boost/asio/local/datagram_protocol.hpp	12;"	d
BOOST_ASIO_LOCAL_STREAM_PROTOCOL_HPP	/usr/include/boost/asio/local/stream_protocol.hpp	12;"	d
BOOST_ASIO_NATIVE_ERROR	/usr/include/boost/asio/error.hpp	30;"	d
BOOST_ASIO_NATIVE_ERROR	/usr/include/boost/asio/error.hpp	40;"	d
BOOST_ASIO_NATIVE_ERROR	/usr/include/boost/asio/error.hpp	433;"	d
BOOST_ASIO_NATIVE_ERROR	/usr/include/boost/asio/error.hpp	46;"	d
BOOST_ASIO_NETDB_ERROR	/usr/include/boost/asio/error.hpp	34;"	d
BOOST_ASIO_NETDB_ERROR	/usr/include/boost/asio/error.hpp	42;"	d
BOOST_ASIO_NETDB_ERROR	/usr/include/boost/asio/error.hpp	435;"	d
BOOST_ASIO_NETDB_ERROR	/usr/include/boost/asio/error.hpp	48;"	d
BOOST_ASIO_NO_TYPEID	/usr/include/boost/asio/detail/service_registry.hpp	32;"	d
BOOST_ASIO_OPTION_STORAGE	/usr/include/boost/asio/serial_port_base.hpp	168;"	d
BOOST_ASIO_OPTION_STORAGE	/usr/include/boost/asio/serial_port_base.hpp	47;"	d
BOOST_ASIO_OPTION_STORAGE	/usr/include/boost/asio/serial_port_base.hpp	49;"	d
BOOST_ASIO_OPTION_STORAGE	/usr/include/boost/asio/serial_port_base.hpp	51;"	d
BOOST_ASIO_PLACEHOLDERS_HPP	/usr/include/boost/asio/placeholders.hpp	12;"	d
BOOST_ASIO_POSIX_BASIC_DESCRIPTOR_HPP	/usr/include/boost/asio/posix/basic_descriptor.hpp	12;"	d
BOOST_ASIO_POSIX_BASIC_STREAM_DESCRIPTOR_HPP	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	12;"	d
BOOST_ASIO_POSIX_DESCRIPTOR_BASE_HPP	/usr/include/boost/asio/posix/descriptor_base.hpp	12;"	d
BOOST_ASIO_POSIX_STREAM_DESCRIPTOR_HPP	/usr/include/boost/asio/posix/stream_descriptor.hpp	12;"	d
BOOST_ASIO_POSIX_STREAM_DESCRIPTOR_SERVICE_HPP	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	12;"	d
BOOST_ASIO_PRIVATE_CONNECT_DEF	/usr/include/boost/asio/basic_socket_iostream.hpp	152;"	d
BOOST_ASIO_PRIVATE_CONNECT_DEF	/usr/include/boost/asio/basic_socket_iostream.hpp	73;"	d
BOOST_ASIO_PRIVATE_CONNECT_DEF	/usr/include/boost/asio/basic_socket_streambuf.hpp	289;"	d
BOOST_ASIO_PRIVATE_CONNECT_DEF	/usr/include/boost/asio/basic_socket_streambuf.hpp	60;"	d
BOOST_ASIO_PRIVATE_CTR_DEF	/usr/include/boost/asio/basic_socket_iostream.hpp	151;"	d
BOOST_ASIO_PRIVATE_CTR_DEF	/usr/include/boost/asio/basic_socket_iostream.hpp	52;"	d
BOOST_ASIO_RAW_SOCKET_SERVICE_HPP	/usr/include/boost/asio/raw_socket_service.hpp	12;"	d
BOOST_ASIO_READ_AT_HPP	/usr/include/boost/asio/read_at.hpp	12;"	d
BOOST_ASIO_READ_HPP	/usr/include/boost/asio/read.hpp	12;"	d
BOOST_ASIO_READ_UNTIL_HPP	/usr/include/boost/asio/read_until.hpp	12;"	d
BOOST_ASIO_SERIAL_PORT_BASE_HPP	/usr/include/boost/asio/serial_port_base.hpp	13;"	d
BOOST_ASIO_SERIAL_PORT_HPP	/usr/include/boost/asio/serial_port.hpp	13;"	d
BOOST_ASIO_SERIAL_PORT_SERVICE_HPP	/usr/include/boost/asio/serial_port_service.hpp	12;"	d
BOOST_ASIO_SOCKET_ACCEPTOR_SERVICE_HPP	/usr/include/boost/asio/socket_acceptor_service.hpp	12;"	d
BOOST_ASIO_SOCKET_BASE_HPP	/usr/include/boost/asio/socket_base.hpp	12;"	d
BOOST_ASIO_SOCKET_ERROR	/usr/include/boost/asio/error.hpp	32;"	d
BOOST_ASIO_SOCKET_ERROR	/usr/include/boost/asio/error.hpp	41;"	d
BOOST_ASIO_SOCKET_ERROR	/usr/include/boost/asio/error.hpp	434;"	d
BOOST_ASIO_SOCKET_ERROR	/usr/include/boost/asio/error.hpp	47;"	d
BOOST_ASIO_SOCKET_IOSTREAM_MAX_ARITY	/usr/include/boost/asio/basic_socket_iostream.hpp	38;"	d
BOOST_ASIO_SOCKET_STREAMBUF_MAX_ARITY	/usr/include/boost/asio/basic_socket_streambuf.hpp	42;"	d
BOOST_ASIO_SSL_BASIC_CONTEXT_HPP	/usr/include/boost/asio/ssl/basic_context.hpp	13;"	d
BOOST_ASIO_SSL_CONTEXT_BASE_HPP	/usr/include/boost/asio/ssl/context_base.hpp	12;"	d
BOOST_ASIO_SSL_CONTEXT_HPP	/usr/include/boost/asio/ssl/context.hpp	13;"	d
BOOST_ASIO_SSL_CONTEXT_SERVICE_HPP	/usr/include/boost/asio/ssl/context_service.hpp	13;"	d
BOOST_ASIO_SSL_DETAIL_OPENSSL_CONTEXT_SERVICE_HPP	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	13;"	d
BOOST_ASIO_SSL_DETAIL_OPENSSL_INIT_HPP	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	13;"	d
BOOST_ASIO_SSL_DETAIL_OPENSSL_OPERATION_HPP	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	12;"	d
BOOST_ASIO_SSL_DETAIL_OPENSSL_STREAM_SERVICE_HPP	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	13;"	d
BOOST_ASIO_SSL_DETAIL_OPENSSL_TYPES_HPP	/usr/include/boost/asio/ssl/detail/openssl_types.hpp	12;"	d
BOOST_ASIO_SSL_HPP	/usr/include/boost/asio/ssl.hpp	12;"	d
BOOST_ASIO_SSL_STREAM_BASE_HPP	/usr/include/boost/asio/ssl/stream_base.hpp	12;"	d
BOOST_ASIO_SSL_STREAM_HPP	/usr/include/boost/asio/ssl/stream.hpp	13;"	d
BOOST_ASIO_SSL_STREAM_SERVICE_HPP	/usr/include/boost/asio/ssl/stream_service.hpp	13;"	d
BOOST_ASIO_STRAND_HPP	/usr/include/boost/asio/strand.hpp	12;"	d
BOOST_ASIO_STREAMBUF_HPP	/usr/include/boost/asio/streambuf.hpp	12;"	d
BOOST_ASIO_STREAM_SOCKET_SERVICE_HPP	/usr/include/boost/asio/stream_socket_service.hpp	12;"	d
BOOST_ASIO_TIME_TRAITS_HPP	/usr/include/boost/asio/time_traits.hpp	12;"	d
BOOST_ASIO_VERSION	/usr/include/boost/asio/version.hpp	21;"	d
BOOST_ASIO_VERSION_HPP	/usr/include/boost/asio/version.hpp	12;"	d
BOOST_ASIO_WINDOWS_BASIC_HANDLE_HPP	/usr/include/boost/asio/windows/basic_handle.hpp	12;"	d
BOOST_ASIO_WINDOWS_BASIC_RANDOM_ACCESS_HANDLE_HPP	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	12;"	d
BOOST_ASIO_WINDOWS_BASIC_STREAM_HANDLE_HPP	/usr/include/boost/asio/windows/basic_stream_handle.hpp	12;"	d
BOOST_ASIO_WINDOWS_OVERLAPPED_PTR_HPP	/usr/include/boost/asio/windows/overlapped_ptr.hpp	12;"	d
BOOST_ASIO_WINDOWS_RANDOM_ACCESS_HANDLE_HPP	/usr/include/boost/asio/windows/random_access_handle.hpp	12;"	d
BOOST_ASIO_WINDOWS_RANDOM_ACCESS_HANDLE_SERVICE_HPP	/usr/include/boost/asio/windows/random_access_handle_service.hpp	12;"	d
BOOST_ASIO_WINDOWS_STREAM_HANDLE_HPP	/usr/include/boost/asio/windows/stream_handle.hpp	12;"	d
BOOST_ASIO_WINDOWS_STREAM_HANDLE_SERVICE_HPP	/usr/include/boost/asio/windows/stream_handle_service.hpp	12;"	d
BOOST_ASIO_WIN_OR_POSIX	/usr/include/boost/asio/error.hpp	38;"	d
BOOST_ASIO_WIN_OR_POSIX	/usr/include/boost/asio/error.hpp	437;"	d
BOOST_ASIO_WIN_OR_POSIX	/usr/include/boost/asio/error.hpp	44;"	d
BOOST_ASIO_WIN_OR_POSIX	/usr/include/boost/asio/error.hpp	50;"	d
BOOST_ASIO_WRITE_AT_HPP	/usr/include/boost/asio/write_at.hpp	12;"	d
BOOST_ASIO_WRITE_HPP	/usr/include/boost/asio/write.hpp	12;"	d
BOOST_ASIO_WSPIAPI_H_DEFINED	/usr/include/boost/asio/detail/socket_types.hpp	63;"	d
BOOST_ASIO_WSPIAPI_H_DEFINED	/usr/include/boost/asio/detail/socket_types.hpp	84;"	d
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/asio/detail/socket_option.hpp	/^  int timeout BOOST_PREVENT_MACRO_SUBSTITUTION() const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:() const
BOOST_PREVENT_MACRO_SUBSTITUTION	/usr/include/boost/asio/detail/socket_option.hpp	/^  void timeout BOOST_PREVENT_MACRO_SUBSTITUTION(int value)$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(int value)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/buffered_read_stream.hpp	/^  BOOST_STATIC_CONSTANT(std::size_t, default_buffer_size = 1024);$/;"	p	class:boost::asio::buffered_read_stream	access:public	signature:(std::size_t, default_buffer_size = 1024)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/buffered_write_stream.hpp	/^  BOOST_STATIC_CONSTANT(std::size_t, default_buffer_size = 1024);$/;"	p	class:boost::asio::buffered_write_stream	access:public	signature:(std::size_t, default_buffer_size = 1024)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  BOOST_STATIC_CONSTANT(std::size_t, value_size = Alloc_Traits::value_size);$/;"	p	class:boost::asio::detail::handler_ptr	access:public	signature:(std::size_t, value_size = Alloc_Traits::value_size)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  BOOST_STATIC_CONSTANT(std::size_t, value_size = Alloc_Traits::value_size);$/;"	p	class:boost::asio::detail::raw_handler_ptr	access:public	signature:(std::size_t, value_size = Alloc_Traits::value_size)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  BOOST_STATIC_CONSTANT(std::size_t, value_size = sizeof(Object));$/;"	p	struct:boost::asio::detail::handler_alloc_traits	access:public	signature:(std::size_t, value_size = sizeof(Object))
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/socket_base.hpp	/^  BOOST_STATIC_CONSTANT(int, max_connections = SOMAXCONN);$/;"	p	class:boost::asio::socket_base	access:public	signature:(int, max_connections = SOMAXCONN)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/socket_base.hpp	/^  BOOST_STATIC_CONSTANT(int,$/;"	p	class:boost::asio::socket_base	access:public	signature:(int, message_do_not_route = boost::asio::detail::message_do_not_route)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/socket_base.hpp	/^  BOOST_STATIC_CONSTANT(int,$/;"	p	class:boost::asio::socket_base	access:public	signature:(int, message_out_of_band = boost::asio::detail::message_out_of_band)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/socket_base.hpp	/^  BOOST_STATIC_CONSTANT(int,$/;"	p	class:boost::asio::socket_base	access:public	signature:(int, message_peek = boost::asio::detail::message_peek)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, default_workarounds = SSL_OP_ALL);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, default_workarounds = SSL_OP_ALL)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, no_sslv2 = SSL_OP_NO_SSLv2);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, no_sslv2 = SSL_OP_NO_SSLv2)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, no_sslv3 = SSL_OP_NO_SSLv3);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, no_sslv3 = SSL_OP_NO_SSLv3)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, no_tlsv1 = SSL_OP_NO_TLSv1);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, no_tlsv1 = SSL_OP_NO_TLSv1)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, single_dh_use = SSL_OP_SINGLE_DH_USE);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, single_dh_use = SSL_OP_SINGLE_DH_USE)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, verify_client_once = SSL_VERIFY_CLIENT_ONCE);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, verify_client_once = SSL_VERIFY_CLIENT_ONCE)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, verify_none = SSL_VERIFY_NONE);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, verify_none = SSL_VERIFY_NONE)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int, verify_peer = SSL_VERIFY_PEER);$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, verify_peer = SSL_VERIFY_PEER)
BOOST_STATIC_CONSTANT	/usr/include/boost/asio/ssl/context_base.hpp	/^  BOOST_STATIC_CONSTANT(int,$/;"	p	class:boost::asio::ssl::context_base	access:public	signature:(int, verify_fail_if_no_peer_cert = SSL_VERIFY_FAIL_IF_NO_PEER_CERT)
broadcast	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 broadcast()$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:()
broadcast	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 broadcast(const address_v4& addr, const address_v4& mask)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const address_v4& addr, const address_v4& mask)
broadcast	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_BROADCAST> broadcast;$/;"	t	class:boost::asio::socket_base	access:public
broadcast	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined broadcast;$/;"	t	class:boost::asio::socket_base	access:public
broken_pipe	/usr/include/boost/asio/error.hpp	/^  broken_pipe = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::basic_errors
buckets_	/usr/include/boost/asio/detail/hash_map.hpp	/^  std::vector<bucket_type> buckets_;$/;"	m	class:boost::asio::detail::hash_map	access:private
bucket_type	/usr/include/boost/asio/detail/hash_map.hpp	/^    bucket_type() {}$/;"	f	struct:boost::asio::detail::hash_map::bucket_type	access:public	signature:()
bucket_type	/usr/include/boost/asio/detail/hash_map.hpp	/^    bucket_type(const bucket_type&) { \/* noop *\/ }$/;"	f	struct:boost::asio::detail::hash_map::bucket_type	access:public	signature:(const bucket_type&)
bucket_type	/usr/include/boost/asio/detail/hash_map.hpp	/^  struct bucket_type$/;"	s	class:boost::asio::detail::hash_map	access:private
buf	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^typedef iovec buf;$/;"	t	namespace:boost::asio::detail::descriptor_ops
buf	/usr/include/boost/asio/detail/socket_ops.hpp	/^typedef iovec buf;$/;"	t	namespace:boost::asio::detail::socket_ops
buf	/usr/include/boost/asio/detail/socket_ops.hpp	/^typedef WSABUF buf;$/;"	t	namespace:boost::asio::detail::socket_ops
buffer	/usr/include/boost/asio/buffer.hpp	/^buffer(boost::array<PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(boost::array<PodType, N>& data)
buffer	/usr/include/boost/asio/buffer.hpp	/^buffer(boost::array<PodType, N>& data, std::size_t max_size_in_bytes)$/;"	f	namespace:boost::asio	signature:(boost::array<PodType, N>& data, std::size_t max_size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer($/;"	f	namespace:boost::asio	signature:( const std::vector<PodType, Allocator>& data)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer($/;"	f	namespace:boost::asio	signature:( const std::vector<PodType, Allocator>& data, std::size_t max_size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(boost::array<const PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(boost::array<const PodType, N>& data)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(boost::array<const PodType, N>& data,$/;"	f	namespace:boost::asio	signature:(boost::array<const PodType, N>& data, std::size_t max_size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const boost::array<PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(const boost::array<PodType, N>& data)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const boost::array<PodType, N>& data,$/;"	f	namespace:boost::asio	signature:(const boost::array<PodType, N>& data, std::size_t max_size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const const_buffer& b)$/;"	f	namespace:boost::asio	signature:(const const_buffer& b)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const const_buffer& b,$/;"	f	namespace:boost::asio	signature:(const const_buffer& b, std::size_t max_size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const std::string& data)$/;"	f	namespace:boost::asio	signature:(const std::string& data)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const std::string& data,$/;"	f	namespace:boost::asio	signature:(const std::string& data, std::size_t max_size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const void* data,$/;"	f	namespace:boost::asio	signature:(const void* data, std::size_t size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(boost::array<PodType, N>& data)$/;"	f	namespace:boost::asio	signature:(boost::array<PodType, N>& data)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(boost::array<PodType, N>& data,$/;"	f	namespace:boost::asio	signature:(boost::array<PodType, N>& data, std::size_t max_size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(const mutable_buffer& b)$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& b)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(const mutable_buffer& b,$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& b, std::size_t max_size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(std::vector<PodType, Allocator>& data)$/;"	f	namespace:boost::asio	signature:(std::vector<PodType, Allocator>& data)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(std::vector<PodType, Allocator>& data,$/;"	f	namespace:boost::asio	signature:(std::vector<PodType, Allocator>& data, std::size_t max_size_in_bytes)
buffer	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(void* data, std::size_t size_in_bytes)$/;"	f	namespace:boost::asio	signature:(void* data, std::size_t size_in_bytes)
buffered_read_stream	/usr/include/boost/asio/buffered_read_stream.hpp	/^  buffered_read_stream(Arg& a, std::size_t buffer_size)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(Arg& a, std::size_t buffer_size)
buffered_read_stream	/usr/include/boost/asio/buffered_read_stream.hpp	/^  explicit buffered_read_stream(Arg& a)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(Arg& a)
buffered_read_stream	/usr/include/boost/asio/buffered_read_stream.hpp	/^class buffered_read_stream$/;"	c	namespace:boost::asio	inherits:noncopyable
buffered_stream	/usr/include/boost/asio/buffered_stream.hpp	/^  explicit buffered_stream(Arg& a)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(Arg& a)
buffered_stream	/usr/include/boost/asio/buffered_stream.hpp	/^  explicit buffered_stream(Arg& a, std::size_t read_buffer_size,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(Arg& a, std::size_t read_buffer_size, std::size_t write_buffer_size)
buffered_stream	/usr/include/boost/asio/buffered_stream.hpp	/^class buffered_stream$/;"	c	namespace:boost::asio	inherits:noncopyable
buffered_stream_storage	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  explicit buffered_stream_storage(std::size_t capacity)$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:(std::size_t capacity)
buffered_stream_storage	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^class buffered_stream_storage$/;"	c	namespace:boost::asio::detail
buffered_write_stream	/usr/include/boost/asio/buffered_write_stream.hpp	/^  buffered_write_stream(Arg& a, std::size_t buffer_size)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(Arg& a, std::size_t buffer_size)
buffered_write_stream	/usr/include/boost/asio/buffered_write_stream.hpp	/^  explicit buffered_write_stream(Arg& a)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(Arg& a)
buffered_write_stream	/usr/include/boost/asio/buffered_write_stream.hpp	/^class buffered_write_stream$/;"	c	namespace:boost::asio	inherits:noncopyable
buffers	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^            impl.descriptor_, this->get_io_service(), buffers, handler));$/;"	e	enum:boost::asio::detail::reactive_descriptor_service::__anon12
buffers	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^            impl.socket_, this->get_io_service(), buffers, flags, handler));$/;"	e	enum:boost::asio::detail::reactive_socket_service::__anon16
buffers_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    MutableBufferSequence buffers_;$/;"	m	class:boost::asio::buffered_read_stream::read_some_handler	access:private
buffers_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    ConstBufferSequence buffers_;$/;"	m	class:boost::asio::buffered_write_stream::write_some_handler	access:private
buffers_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  Buffers buffers_;$/;"	m	class:boost::asio::detail::consuming_buffers	access:private
buffers_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::read_operation	access:private
buffers_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    ConstBufferSequence buffers_;$/;"	m	class:boost::asio::detail::send_to_operation	access:private
buffers_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::receive_from_operation	access:private
buffers_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::receive_operation	access:private
buffers_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    ConstBufferSequence buffers_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::write_operation	access:private
buffers_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    MutableBufferSequence buffers_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::read_operation	access:private
buffers_begin	/usr/include/boost/asio/buffers_iterator.hpp	/^inline buffers_iterator<BufferSequence> buffers_begin($/;"	f	namespace:boost::asio	signature:( const BufferSequence& buffers)
buffers_end	/usr/include/boost/asio/buffers_iterator.hpp	/^inline buffers_iterator<BufferSequence> buffers_end($/;"	f	namespace:boost::asio	signature:( const BufferSequence& buffers)
buffers_iterator	/usr/include/boost/asio/buffers_iterator.hpp	/^  buffers_iterator()$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:()
buffers_iterator	/usr/include/boost/asio/buffers_iterator.hpp	/^class buffers_iterator$/;"	c	namespace:boost::asio	inherits:boost::iterator_facade
buffers_iterator_types	/usr/include/boost/asio/buffers_iterator.hpp	/^  struct buffers_iterator_types$/;"	s	namespace:boost::asio::detail
buffers_iterator_types_helper	/usr/include/boost/asio/buffers_iterator.hpp	/^  struct buffers_iterator_types_helper<false>$/;"	s	namespace:boost::asio::detail
buffers_iterator_types_helper	/usr/include/boost/asio/buffers_iterator.hpp	/^  struct buffers_iterator_types_helper<true>$/;"	s	namespace:boost::asio::detail
buffer_	/usr/include/boost/asio/basic_streambuf.hpp	/^  std::vector<char_type, Allocator> buffer_;$/;"	m	class:boost::asio::basic_streambuf	access:private
buffer_	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  std::vector<byte_type> buffer_;$/;"	m	class:boost::asio::detail::buffered_stream_storage	access:private
buffer_	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^  Buffer& buffer_;$/;"	m	class:boost::asio::detail::buffer_resize_guard	access:private
buffer_cast	/usr/include/boost/asio/buffer.hpp	/^inline PointerToPodType buffer_cast(const const_buffer& b)$/;"	f	namespace:boost::asio	signature:(const const_buffer& b)
buffer_cast	/usr/include/boost/asio/buffer.hpp	/^inline PointerToPodType buffer_cast(const mutable_buffer& b)$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& b)
buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^  friend const void* boost::asio::detail::buffer_cast_helper($/;"	p	class:boost::asio::const_buffer::boost::asio::detail	access:friend	signature:( const const_buffer& b)
buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^  friend void* boost::asio::detail::buffer_cast_helper($/;"	p	class:boost::asio::mutable_buffer::boost::asio::detail	access:friend	signature:( const mutable_buffer& b)
buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^const void* buffer_cast_helper(const const_buffer&);$/;"	p	namespace:boost::asio::detail	signature:(const const_buffer&)
buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^inline const void* buffer_cast_helper(const const_buffer& b)$/;"	f	namespace:boost::asio::detail	signature:(const const_buffer& b)
buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^inline void* buffer_cast_helper(const mutable_buffer& b)$/;"	f	namespace:boost::asio::detail	signature:(const mutable_buffer& b)
buffer_cast_helper	/usr/include/boost/asio/buffer.hpp	/^void* buffer_cast_helper(const mutable_buffer&);$/;"	p	namespace:boost::asio::detail	signature:(const mutable_buffer&)
buffer_debug_check	/usr/include/boost/asio/buffer.hpp	/^  buffer_debug_check(Iterator iter)$/;"	f	class:boost::asio::detail::buffer_debug_check	access:public	signature:(Iterator iter)
buffer_debug_check	/usr/include/boost/asio/buffer.hpp	/^class buffer_debug_check$/;"	c	namespace:boost::asio::detail
buffer_delta	/usr/include/boost/asio/basic_streambuf.hpp	/^  enum { buffer_delta = 128 };$/;"	e	enum:boost::asio::basic_streambuf::__anon3
buffer_resize_guard	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^  buffer_resize_guard(Buffer& buffer)$/;"	f	class:boost::asio::detail::buffer_resize_guard	access:public	signature:(Buffer& buffer)
buffer_resize_guard	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^class buffer_resize_guard$/;"	c	namespace:boost::asio::detail
buffer_size	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  enum { buffer_size = 512 };$/;"	e	enum:boost::asio::basic_socket_streambuf::__anon2
buffer_size	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size(const const_buffer& b)$/;"	f	namespace:boost::asio	signature:(const const_buffer& b)
buffer_size	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size(const mutable_buffer& b)$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& b)
buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^  friend std::size_t boost::asio::detail::buffer_size_helper($/;"	p	class:boost::asio::const_buffer::boost::asio::detail	access:friend	signature:( const const_buffer& b)
buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^  friend std::size_t boost::asio::detail::buffer_size_helper($/;"	p	class:boost::asio::mutable_buffer::boost::asio::detail	access:friend	signature:( const mutable_buffer& b)
buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size_helper(const const_buffer& b)$/;"	f	namespace:boost::asio::detail	signature:(const const_buffer& b)
buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^inline std::size_t buffer_size_helper(const mutable_buffer& b)$/;"	f	namespace:boost::asio::detail	signature:(const mutable_buffer& b)
buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^std::size_t buffer_size_helper(const const_buffer&);$/;"	p	namespace:boost::asio::detail	signature:(const const_buffer&)
buffer_size_helper	/usr/include/boost/asio/buffer.hpp	/^std::size_t buffer_size_helper(const mutable_buffer&);$/;"	p	namespace:boost::asio::detail	signature:(const mutable_buffer&)
buffer_type	/usr/include/boost/asio/buffer.hpp	/^  typedef const_buffer buffer_type;$/;"	t	struct:boost::asio::detail::buffer_types_base	access:public
buffer_type	/usr/include/boost/asio/buffer.hpp	/^  typedef mutable_buffer buffer_type;$/;"	t	struct:boost::asio::detail::buffer_types_base	access:public
buffer_type	/usr/include/boost/asio/buffers_iterator.hpp	/^      BufferSequence, ByteType>::buffer_type buffer_type;$/;"	t	class:boost::asio::buffers_iterator	access:private
buffer_type	/usr/include/boost/asio/buffers_iterator.hpp	/^    typedef const_buffer buffer_type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types_helper	access:public
buffer_type	/usr/include/boost/asio/buffers_iterator.hpp	/^    typedef mutable_buffer buffer_type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types_helper	access:public
buffer_type	/usr/include/boost/asio/buffers_iterator.hpp	/^    typedef typename helper::buffer_type buffer_type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types	access:public
buffer_types	/usr/include/boost/asio/buffer.hpp	/^struct buffer_types$/;"	s	namespace:boost::asio::detail	inherits:buffer_types_base
buffer_types_base	/usr/include/boost/asio/buffer.hpp	/^struct buffer_types_base<false>$/;"	s	namespace:boost::asio::detail
buffer_types_base	/usr/include/boost/asio/buffer.hpp	/^struct buffer_types_base<true>$/;"	s	namespace:boost::asio::detail
buf_	/usr/include/boost/asio/buffer.hpp	/^  mutable_buffer buf_;$/;"	m	class:boost::asio::null_buffers	access:private
buf_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  unsigned char buf_[NET_BUF_SIZE];$/;"	m	class:boost::asio::ssl::detail::net_buffer	access:private
Byte	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^    u_char Byte[16];$/;"	m	union:boost::asio::detail::in6_addr_emulation::__anon8	access:public
bytes_readable	/usr/include/boost/asio/detail/io_control.hpp	/^  bytes_readable()$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:()
bytes_readable	/usr/include/boost/asio/detail/io_control.hpp	/^  bytes_readable(std::size_t value)$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:(std::size_t value)
bytes_readable	/usr/include/boost/asio/detail/io_control.hpp	/^class bytes_readable$/;"	c	namespace:boost::asio::detail::io_control
bytes_readable	/usr/include/boost/asio/posix/descriptor_base.hpp	/^  typedef boost::asio::detail::io_control::bytes_readable bytes_readable;$/;"	t	class:boost::asio::posix::descriptor_base	access:public
bytes_readable	/usr/include/boost/asio/posix/descriptor_base.hpp	/^  typedef implementation_defined bytes_readable;$/;"	t	class:boost::asio::posix::descriptor_base	access:public
bytes_readable	/usr/include/boost/asio/socket_base.hpp	/^  typedef boost::asio::detail::io_control::bytes_readable bytes_readable;$/;"	t	class:boost::asio::socket_base	access:public
bytes_readable	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined bytes_readable;$/;"	t	class:boost::asio::socket_base	access:public
bytes_transferred	/usr/include/boost/asio/placeholders.hpp	/^unspecified bytes_transferred;$/;"	m	namespace:boost::asio::placeholders
bytes_transferred_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    std::size_t bytes_transferred_;$/;"	m	class:boost::asio::detail::reactor_op_queue::op_base	access:private
bytes_transferred_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    DWORD bytes_transferred_;$/;"	m	class:boost::asio::detail::win_iocp_io_service::operation	access:private
bytes_type	/usr/include/boost/asio/ip/address_v4.hpp	/^  typedef boost::array<unsigned char, 4> bytes_type;$/;"	t	class:boost::asio::ip::address_v4	access:public
bytes_type	/usr/include/boost/asio/ip/address_v6.hpp	/^  typedef boost::array<unsigned char, 16> bytes_type;$/;"	t	class:boost::asio::ip::address_v6	access:public
byte_type	/usr/include/boost/asio/buffers_iterator.hpp	/^      BufferSequence, ByteType>::byte_type byte_type;$/;"	t	class:boost::asio::buffers_iterator	access:private
byte_type	/usr/include/boost/asio/buffers_iterator.hpp	/^    struct byte_type$/;"	s	struct:boost::asio::detail::buffers_iterator_types_helper	access:public
byte_type	/usr/include/boost/asio/buffers_iterator.hpp	/^    typedef typename helper::template byte_type<ByteType>::type byte_type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types	access:public
byte_type	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  typedef unsigned char byte_type;$/;"	t	class:boost::asio::detail::buffered_stream_storage	access:public
calculate_hash_value	/usr/include/boost/asio/detail/hash_map.hpp	/^inline std::size_t calculate_hash_value(const T& t)$/;"	f	namespace:boost::asio::detail	signature:(const T& t)
calculate_hash_value	/usr/include/boost/asio/detail/hash_map.hpp	/^inline std::size_t calculate_hash_value(SOCKET s)$/;"	f	namespace:boost::asio::detail	signature:(SOCKET s)
call_accept	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline socket_type call_accept(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, socket_addr_type* addr, std::size_t* addrlen)
call_bind	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int call_bind(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, const socket_addr_type* addr, std::size_t addrlen)
call_connect	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int call_connect(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, const socket_addr_type* addr, std::size_t addrlen)
call_getpeername	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int call_getpeername(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, socket_addr_type* addr, std::size_t* addrlen)
call_getsockname	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int call_getsockname(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, socket_addr_type* addr, std::size_t* addrlen)
call_getsockopt	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int call_getsockopt(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, int level, int optname, void* optval, std::size_t* optlen)
call_run_thread	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  static void call_run_thread(dev_poll_reactor* reactor)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:private	signature:(dev_poll_reactor* reactor)
call_run_thread	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  static void call_run_thread(epoll_reactor* reactor)$/;"	f	class:boost::asio::detail::epoll_reactor	access:private	signature:(epoll_reactor* reactor)
call_run_thread	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  static void call_run_thread(kqueue_reactor* reactor)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:private	signature:(kqueue_reactor* reactor)
call_run_thread	/usr/include/boost/asio/detail/select_reactor.hpp	/^  static void call_run_thread(select_reactor* reactor)$/;"	f	class:boost::asio::detail::select_reactor	access:private	signature:(select_reactor* reactor)
call_setsockopt	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int call_setsockopt(SockLenType msghdr::*,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(SockLenType msghdr::*, socket_type s, int level, int optname, const void* optval, std::size_t optlen)
call_stack	/usr/include/boost/asio/detail/call_stack.hpp	/^class call_stack$/;"	c	namespace:boost::asio::detail
cancel	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t cancel()$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:()
cancel	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::system::error_code& ec)
cancel	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::system::error_code& ec)
cancel	/usr/include/boost/asio/basic_serial_port.hpp	/^  void cancel()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
cancel	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec)
cancel	/usr/include/boost/asio/basic_socket.hpp	/^  void cancel()$/;"	f	class:boost::asio::basic_socket	access:public	signature:()
cancel	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::system::error_code& ec)
cancel	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void cancel()$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:()
cancel	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/deadline_timer_service.hpp	/^  std::size_t cancel(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  std::size_t cancel(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/detail/resolver_service.hpp	/^  void cancel(implementation_type& impl)$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type& impl)
cancel	/usr/include/boost/asio/detail/strand_service.hpp	/^    void cancel()$/;"	f	class:boost::asio::detail::strand_service::post_next_waiter_on_exit	access:public	signature:()
cancel	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  void cancel()$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:()
cancel	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void cancel(implementation_type& impl)$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl)
cancel	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(boost::system::error_code& ec)
cancel	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  void cancel()$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:()
cancel	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/windows/basic_handle.hpp	/^  boost::system::error_code cancel(boost::system::error_code& ec)$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(boost::system::error_code& ec)
cancel	/usr/include/boost/asio/windows/basic_handle.hpp	/^  void cancel()$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:()
cancel	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancel	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  boost::system::error_code cancel(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
cancelled_	/usr/include/boost/asio/detail/strand_service.hpp	/^    bool cancelled_;$/;"	m	class:boost::asio::detail::strand_service::post_next_waiter_on_exit	access:private
cancelled_operations_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  op_base* cancelled_operations_;$/;"	m	class:boost::asio::detail::reactor_op_queue	access:private
cancelled_timers_	/usr/include/boost/asio/detail/timer_queue.hpp	/^  timer_base* cancelled_timers_;$/;"	m	class:boost::asio::detail::timer_queue	access:private
cancel_operations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  bool cancel_operations(Descriptor descriptor)$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor descriptor)
cancel_ops	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void cancel_ops(socket_type descriptor, per_descriptor_data&)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&)
cancel_ops	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void cancel_ops(socket_type descriptor, per_descriptor_data&)$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&)
cancel_ops	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void cancel_ops(socket_type descriptor, per_descriptor_data&)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&)
cancel_ops	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void cancel_ops(socket_type descriptor, per_descriptor_data&)$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&)
cancel_ops_unlocked	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void cancel_ops_unlocked(socket_type descriptor)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:private	signature:(socket_type descriptor)
cancel_ops_unlocked	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void cancel_ops_unlocked(socket_type descriptor)$/;"	f	class:boost::asio::detail::epoll_reactor	access:private	signature:(socket_type descriptor)
cancel_ops_unlocked	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void cancel_ops_unlocked(socket_type descriptor)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:private	signature:(socket_type descriptor)
cancel_ops_unlocked	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void cancel_ops_unlocked(socket_type descriptor)$/;"	f	class:boost::asio::detail::select_reactor	access:private	signature:(socket_type descriptor)
cancel_timer	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  std::size_t cancel_timer(timer_queue<Time_Traits>& timer_queue, void* token)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue, void* token)
cancel_timer	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  std::size_t cancel_timer(timer_queue<Time_Traits>& timer_queue, void* token)$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue, void* token)
cancel_timer	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  std::size_t cancel_timer(timer_queue<Time_Traits>& timer_queue, void* token)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue, void* token)
cancel_timer	/usr/include/boost/asio/detail/select_reactor.hpp	/^  std::size_t cancel_timer(timer_queue<Time_Traits>& timer_queue, void* token)$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue, void* token)
cancel_timer	/usr/include/boost/asio/detail/timer_queue.hpp	/^  std::size_t cancel_timer(void* timer_token)$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:(void* timer_token)
cancel_timer	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  std::size_t cancel_timer(timer_queue<Time_Traits>& timer_queue, void* token)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(timer_queue<Time_Traits>& timer_queue, void* token)
cancel_token_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    shared_cancel_token_type cancel_token_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::implementation_type	access:private
canonical_name	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const int canonical_name = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
capacity	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  size_type capacity() const$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:() const
capacity	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  std::size_t capacity() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
capacity	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  std::size_t capacity() const$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:() const
character_size	/usr/include/boost/asio/serial_port_base.hpp	/^    explicit character_size(unsigned int t = 8);$/;"	p	class:boost::asio::serial_port_base::character_size	access:public	signature:(unsigned int t = 8)
character_size	/usr/include/boost/asio/serial_port_base.hpp	/^  class character_size$/;"	c	class:boost::asio::serial_port_base	access:public
clear	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  void clear()$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:()
clear	/usr/include/boost/asio/detail/hash_map.hpp	/^  void clear()$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:()
clear	/usr/include/boost/asio/detail/null_event.hpp	/^  void clear(Lock&)$/;"	f	class:boost::asio::detail::null_event	access:public	signature:(Lock&)
clear	/usr/include/boost/asio/detail/posix_event.hpp	/^  void clear(Lock& lock)$/;"	f	class:boost::asio::detail::posix_event	access:public	signature:(Lock& lock)
clear	/usr/include/boost/asio/detail/win_event.hpp	/^  void clear(Lock& lock)$/;"	f	class:boost::asio::detail::win_event	access:public	signature:(Lock& lock)
clear_error	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline void clear_error(boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(boost::system::error_code& ec)
clear_error	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void clear_error(boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(boost::system::error_code& ec)
client	/usr/include/boost/asio/ssl/stream_base.hpp	/^    client,$/;"	e	enum:boost::asio::ssl::stream_base::handshake_type
close	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::system::error_code& ec)
close	/usr/include/boost/asio/basic_serial_port.hpp	/^  void close()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
close	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec)
close	/usr/include/boost/asio/basic_socket.hpp	/^  void close()$/;"	f	class:boost::asio::basic_socket	access:public	signature:()
close	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::system::error_code& ec)
close	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void close()$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:()
close	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  void close()$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:()
close	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  basic_socket_streambuf<Protocol, StreamSocketService>* close()$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:()
close	/usr/include/boost/asio/buffered_read_stream.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(boost::system::error_code& ec)
close	/usr/include/boost/asio/buffered_read_stream.hpp	/^  void close()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
close	/usr/include/boost/asio/buffered_stream.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(boost::system::error_code& ec)
close	/usr/include/boost/asio/buffered_stream.hpp	/^  void close()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
close	/usr/include/boost/asio/buffered_write_stream.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(boost::system::error_code& ec)
close	/usr/include/boost/asio/buffered_write_stream.hpp	/^  void close()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
close	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline int close(int d, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int close(socket_type s, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(boost::system::error_code& ec)
close	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  void close()$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:()
close	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/windows/basic_handle.hpp	/^  boost::system::error_code close(boost::system::error_code& ec)$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:(boost::system::error_code& ec)
close	/usr/include/boost/asio/windows/basic_handle.hpp	/^  void close()$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:()
close	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  boost::system::error_code close(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
close_descriptor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void close_descriptor(socket_type descriptor, per_descriptor_data&)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&)
close_descriptor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void close_descriptor(socket_type descriptor, per_descriptor_data&)$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&)
close_descriptor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void close_descriptor(socket_type descriptor, per_descriptor_data&)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&)
close_descriptor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void close_descriptor(socket_type descriptor, per_descriptor_data&)$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&)
close_for_destruction	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void close_for_destruction(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl)
close_might_block	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^      close_might_block = 2, \/\/ User set linger option for blocking close.$/;"	e	enum:boost::asio::detail::win_iocp_socket_service::implementation_type::__anon23
commit	/usr/include/boost/asio/basic_streambuf.hpp	/^  void commit(std::size_t n)$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:(std::size_t n)
commit	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^  void commit()$/;"	f	class:boost::asio::detail::buffer_resize_guard	access:public	signature:()
complete	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::null_buffers_operation	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
complete	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::read_operation	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
complete	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::null_buffers_operation	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
complete	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::receive_from_operation	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
complete	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::receive_operation	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
complete	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::send_to_operation	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
complete	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    void complete()$/;"	f	class:boost::asio::detail::reactor_op_queue::op_base	access:public	signature:()
complete	/usr/include/boost/asio/detail/select_reactor.hpp	/^    void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::select_reactor::connect_handler_wrapper	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
complete	/usr/include/boost/asio/detail/timer_queue.hpp	/^    void complete()$/;"	f	class:boost::asio::detail::timer_queue::timer_base	access:public	signature:()
complete	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
complete	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  void complete(const boost::system::error_code& ec,$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
completed_	/usr/include/boost/asio/detail/select_reactor.hpp	/^    boost::shared_ptr<bool> completed_;$/;"	m	class:boost::asio::detail::select_reactor::connect_handler_wrapper	access:private
complete_func_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    complete_func_type complete_func_;$/;"	m	class:boost::asio::detail::reactor_op_queue::op_base	access:private
complete_func_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    complete_func_type complete_func_;$/;"	m	class:boost::asio::detail::timer_queue::timer_base	access:private
complete_func_type	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    typedef void (*complete_func_type)(op_base*,$/;"	t	class:boost::asio::detail::reactor_op_queue::op_base	access:protected
complete_func_type	/usr/include/boost/asio/detail/timer_queue.hpp	/^    typedef void (*complete_func_type)(timer_base*,$/;"	t	class:boost::asio::detail::timer_queue::timer_base	access:protected
complete_handler	/usr/include/boost/asio/detail/timer_queue.hpp	/^    static void complete_handler(timer_base* base,$/;"	f	class:boost::asio::detail::timer_queue::timer	access:public	signature:(timer_base* base, const boost::system::error_code& result)
complete_operations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  void complete_operations()$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:()
complete_operations_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  op_base* complete_operations_;$/;"	m	class:boost::asio::detail::reactor_op_queue	access:private
complete_operations_and_timers	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void complete_operations_and_timers($/;"	f	class:boost::asio::detail::dev_poll_reactor	access:private	signature:( boost::asio::detail::mutex::scoped_lock& lock)
complete_operations_and_timers	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void complete_operations_and_timers($/;"	f	class:boost::asio::detail::epoll_reactor	access:private	signature:( boost::asio::detail::mutex::scoped_lock& lock)
complete_operations_and_timers	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void complete_operations_and_timers($/;"	f	class:boost::asio::detail::kqueue_reactor	access:private	signature:( boost::asio::detail::mutex::scoped_lock& lock)
complete_operations_and_timers	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void complete_operations_and_timers($/;"	f	class:boost::asio::detail::select_reactor	access:private	signature:( boost::asio::detail::mutex::scoped_lock& lock)
complete_timers	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual void complete_timers()$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:()
complete_timers	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual void complete_timers() = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:()
complete_timers_	/usr/include/boost/asio/detail/timer_queue.hpp	/^  timer_base* complete_timers_;$/;"	m	class:boost::asio::detail::timer_queue	access:private
cond_	/usr/include/boost/asio/detail/posix_event.hpp	/^  ::pthread_cond_t cond_;$/;"	m	class:boost::asio::detail::posix_event	access:private
connect	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code connect(const endpoint_type& peer_endpoint,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const endpoint_type& peer_endpoint, boost::system::error_code& ec)
connect	/usr/include/boost/asio/basic_socket.hpp	/^  void connect(const endpoint_type& peer_endpoint)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const endpoint_type& peer_endpoint)
connect	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  void connect(T1 t1, ..., TN tn);$/;"	p	class:boost::asio::basic_socket_iostream	access:public	signature:(T1 t1, ..., TN tn)
connect	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  basic_socket_streambuf<Protocol, StreamSocketService>* connect($/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:( const endpoint_type& endpoint)
connect	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  basic_socket_streambuf<Protocol, StreamSocketService>* connect($/;"	p	class:boost::asio::basic_socket_streambuf	access:public	signature:( T1 t1, ..., TN tn)
connect	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code connect(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, boost::system::error_code& ec)
connect	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int connect(socket_type s, const socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
connect	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code connect(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, boost::system::error_code& ec)
connect	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code connect(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const endpoint_type& peer_endpoint, boost::system::error_code& ec)
connection_aborted	/usr/include/boost/asio/error.hpp	/^  connection_aborted = BOOST_ASIO_SOCKET_ERROR(ECONNABORTED),$/;"	e	enum:boost::asio::error::basic_errors
connection_refused	/usr/include/boost/asio/error.hpp	/^  connection_refused = BOOST_ASIO_SOCKET_ERROR(ECONNREFUSED),$/;"	e	enum:boost::asio::error::basic_errors
connection_reset	/usr/include/boost/asio/error.hpp	/^  connection_reset = BOOST_ASIO_SOCKET_ERROR(ECONNRESET),$/;"	e	enum:boost::asio::error::basic_errors
connect_handler_wrapper	/usr/include/boost/asio/detail/select_reactor.hpp	/^    connect_handler_wrapper(socket_type descriptor,$/;"	f	class:boost::asio::detail::select_reactor::connect_handler_wrapper	access:public	signature:(socket_type descriptor, boost::shared_ptr<bool> completed, select_reactor<Own_Thread>& reactor, Handler handler)
connect_handler_wrapper	/usr/include/boost/asio/detail/select_reactor.hpp	/^  class connect_handler_wrapper$/;"	c	class:boost::asio::detail::select_reactor	access:public
connect_pair	/usr/include/boost/asio/local/connect_pair.hpp	/^boost::system::error_code connect_pair($/;"	p	namespace:boost::asio::local	signature:( basic_socket<Protocol, SocketService1>& socket1, basic_socket<Protocol, SocketService2>& socket2, boost::system::error_code& ec)
connect_pair	/usr/include/boost/asio/local/connect_pair.hpp	/^inline boost::system::error_code connect_pair($/;"	f	namespace:boost::asio::local	signature:( basic_socket<Protocol, SocketService1>& socket1, basic_socket<Protocol, SocketService2>& socket2, boost::system::error_code& ec)
connect_pair	/usr/include/boost/asio/local/connect_pair.hpp	/^inline void connect_pair($/;"	f	namespace:boost::asio::local	signature:( basic_socket<Protocol, SocketService1>& socket1, basic_socket<Protocol, SocketService2>& socket2)
connect_pair	/usr/include/boost/asio/local/connect_pair.hpp	/^void connect_pair($/;"	p	namespace:boost::asio::local	signature:( basic_socket<Protocol, SocketService1>& socket1, basic_socket<Protocol, SocketService2>& socket2)
construct	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/deadline_timer_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/detail/resolver_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/detail/strand_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::detail::strand_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/raw_socket_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/serial_port_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/stream_socket_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl)
construct	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void construct(implementation_type& impl)$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl)
const_buffer	/usr/include/boost/asio/buffer.hpp	/^  const_buffer()$/;"	f	class:boost::asio::const_buffer	access:public	signature:()
const_buffer	/usr/include/boost/asio/buffer.hpp	/^  const_buffer(const mutable_buffer& b)$/;"	f	class:boost::asio::const_buffer	access:public	signature:(const mutable_buffer& b)
const_buffer	/usr/include/boost/asio/buffer.hpp	/^  const_buffer(const void* data, std::size_t size)$/;"	f	class:boost::asio::const_buffer	access:public	signature:(const void* data, std::size_t size)
const_buffer	/usr/include/boost/asio/buffer.hpp	/^  const_buffer(const void* data, std::size_t size,$/;"	f	class:boost::asio::const_buffer	access:public	signature:(const void* data, std::size_t size, boost::function<void()> debug_check)
const_buffer	/usr/include/boost/asio/buffer.hpp	/^class const_buffer$/;"	c	namespace:boost::asio
const_buffers_1	/usr/include/boost/asio/buffer.hpp	/^  const_buffers_1(const void* data, std::size_t size)$/;"	f	class:boost::asio::const_buffers_1	access:public	signature:(const void* data, std::size_t size)
const_buffers_1	/usr/include/boost/asio/buffer.hpp	/^  explicit const_buffers_1(const const_buffer& b)$/;"	f	class:boost::asio::const_buffers_1	access:public	signature:(const const_buffer& b)
const_buffers_1	/usr/include/boost/asio/buffer.hpp	/^class const_buffers_1$/;"	c	namespace:boost::asio	inherits:const_buffer
const_buffers_iterator	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  const_buffers_iterator()$/;"	f	class:boost::asio::detail::const_buffers_iterator	access:public	signature:()
const_buffers_iterator	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  const_buffers_iterator(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::detail::const_buffers_iterator	access:public	signature:(const ConstBufferSequence& buffers, std::size_t position)
const_buffers_iterator	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^class const_buffers_iterator$/;"	c	namespace:boost::asio::detail	inherits:boost::iterator_facade
const_buffers_type	/usr/include/boost/asio/basic_streambuf.hpp	/^  typedef implementation_defined const_buffers_type;$/;"	t	class:boost::asio::basic_streambuf	access:public
const_iterator	/usr/include/boost/asio/buffer.hpp	/^  typedef const const_buffer* const_iterator;$/;"	t	class:boost::asio::const_buffers_1	access:public
const_iterator	/usr/include/boost/asio/buffer.hpp	/^  typedef const mutable_buffer* const_iterator;$/;"	t	class:boost::asio::mutable_buffers_1	access:public
const_iterator	/usr/include/boost/asio/buffer.hpp	/^  typedef const mutable_buffer* const_iterator;$/;"	t	class:boost::asio::null_buffers	access:public
const_iterator	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^    const_iterator;$/;"	t	class:boost::asio::detail::consuming_buffers	access:public
const_iterator	/usr/include/boost/asio/detail/hash_map.hpp	/^  typedef typename std::list<value_type>::const_iterator const_iterator;$/;"	t	class:boost::asio::detail::hash_map	access:public
consume	/usr/include/boost/asio/basic_streambuf.hpp	/^  void consume(std::size_t n)$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:(std::size_t n)
consume	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  void consume(size_type count)$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:(size_type count)
consume	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  void consume(std::size_t size)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(std::size_t size)
consume	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  void consume(std::size_t)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(std::size_t)
consuming_buffers	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers(const boost::asio::null_buffers&)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(const boost::asio::null_buffers&)
consuming_buffers	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers(const Buffers& buffers)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(const Buffers& buffers)
consuming_buffers	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers(const consuming_buffers& other)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(const consuming_buffers& other)
consuming_buffers	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^class consuming_buffers$/;"	c	namespace:boost::asio::detail
consuming_buffers	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^class consuming_buffers<Buffer, boost::asio::null_buffers>$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::null_buffers
consuming_buffers_iterator	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers_iterator()$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:public	signature:()
consuming_buffers_iterator	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers_iterator(bool at_end, const Buffer& first,$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:public	signature:(bool at_end, const Buffer& first, Buffer_Iterator begin_remainder, Buffer_Iterator end_remainder, std::size_t max_size)
consuming_buffers_iterator	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^class consuming_buffers_iterator$/;"	c	namespace:boost::asio::detail	inherits:boost::iterator_facade
container_type	/usr/include/boost/asio/buffer.hpp	/^  typedef const_buffers_1 container_type;$/;"	t	struct:boost::asio::detail::buffer_types_base	access:public
container_type	/usr/include/boost/asio/buffer.hpp	/^  typedef mutable_buffers_1 container_type;$/;"	t	struct:boost::asio::detail::buffer_types_base	access:public
contains	/usr/include/boost/asio/detail/call_stack.hpp	/^  static bool contains(Owner* d)$/;"	f	class:boost::asio::detail::call_stack	access:public	signature:(Owner* d)
context	/usr/include/boost/asio/detail/call_stack.hpp	/^    explicit context(Owner* d)$/;"	f	class:boost::asio::detail::call_stack::context	access:public	signature:(Owner* d)
context	/usr/include/boost/asio/detail/call_stack.hpp	/^  class context$/;"	c	class:boost::asio::detail::call_stack	inherits:noncopyable	access:public
context	/usr/include/boost/asio/ssl/context.hpp	/^typedef basic_context<context_service> context;$/;"	t	namespace:boost::asio::ssl
context_	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  Context context_;$/;"	m	class:boost::asio::detail::rewrapped_handler	access:public
context_base	/usr/include/boost/asio/ssl/context_base.hpp	/^class context_base$/;"	c	namespace:boost::asio::ssl
context_service	/usr/include/boost/asio/ssl/context_service.hpp	/^  explicit context_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(boost::asio::io_service& io_service)
context_service	/usr/include/boost/asio/ssl/context_service.hpp	/^class context_service$/;"	c	namespace:boost::asio::ssl	inherits:boost::asio::io_service::service
copy	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t copy(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_read_stream	access:private	signature:(const MutableBufferSequence& buffers)
copy	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t copy(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_write_stream	access:private	signature:(const ConstBufferSequence& buffers)
create	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  static basic_resolver_iterator create($/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:public	signature:( boost::asio::detail::addrinfo_type* address_info, const std::string& host_name, const std::string& service_name)
create	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  static basic_resolver_iterator create($/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:public	signature:( const typename InternetProtocol::endpoint& endpoint, const std::string& host_name, const std::string& service_name)
create	/usr/include/boost/asio/ssl/context_service.hpp	/^  void create(impl_type& impl, context_base::method m)$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, context_base::method m)
create	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  void create(impl_type& impl, context_base::method m)$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, context_base::method m)
create	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  void create(impl_type& impl, Stream& \/*next_layer*\/,$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& , basic_context<Context_Service>& context)
create	/usr/include/boost/asio/ssl/stream_service.hpp	/^  void create(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, basic_context<Context_Service>& context)
crit_section_	/usr/include/boost/asio/detail/win_mutex.hpp	/^  ::CRITICAL_SECTION crit_section_;$/;"	m	class:boost::asio::detail::win_mutex	access:private
current_	/usr/include/boost/asio/buffers_iterator.hpp	/^  typename BufferSequence::const_iterator current_;$/;"	m	class:boost::asio::buffers_iterator	access:private
current_	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  typename ConstBufferSequence::const_iterator current_;$/;"	m	class:boost::asio::detail::const_buffers_iterator	access:private
current_buffer_	/usr/include/boost/asio/buffers_iterator.hpp	/^  buffer_type current_buffer_;$/;"	m	class:boost::asio::buffers_iterator	access:private
current_buffer_	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  boost::asio::const_buffer current_buffer_;$/;"	m	class:boost::asio::detail::const_buffers_iterator	access:private
current_buffer_position_	/usr/include/boost/asio/buffers_iterator.hpp	/^  std::size_t current_buffer_position_;$/;"	m	class:boost::asio::buffers_iterator	access:private
current_buffer_position_	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  std::size_t current_buffer_position_;$/;"	m	class:boost::asio::detail::const_buffers_iterator	access:private
current_handler_	/usr/include/boost/asio/detail/strand_service.hpp	/^    handler_base* current_handler_;$/;"	m	class:boost::asio::detail::strand_service::strand_impl	access:private
custom_socket_option_level	/usr/include/boost/asio/detail/socket_types.hpp	/^const int custom_socket_option_level = 0xA5100000;$/;"	m	namespace:boost::asio::detail
data	/usr/include/boost/asio/basic_streambuf.hpp	/^  const_buffers_type data() const$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:() const
data	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  byte_type* data()$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:()
data	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  const byte_type* data() const$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:() const
data	/usr/include/boost/asio/detail/io_control.hpp	/^  const detail::ioctl_arg_type* data() const$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:() const
data	/usr/include/boost/asio/detail/io_control.hpp	/^  const detail::ioctl_arg_type* data() const$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:() const
data	/usr/include/boost/asio/detail/io_control.hpp	/^  detail::ioctl_arg_type* data()$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:()
data	/usr/include/boost/asio/detail/io_control.hpp	/^  detail::ioctl_arg_type* data()$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:()
data	/usr/include/boost/asio/detail/socket_option.hpp	/^  ::linger* data(const Protocol&)$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&)
data	/usr/include/boost/asio/detail/socket_option.hpp	/^  const ::linger* data(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&) const
data	/usr/include/boost/asio/detail/socket_option.hpp	/^  const int* data(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&) const
data	/usr/include/boost/asio/detail/socket_option.hpp	/^  const int* data(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&) const
data	/usr/include/boost/asio/detail/socket_option.hpp	/^  int* data(const Protocol&)$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&)
data	/usr/include/boost/asio/detail/socket_option.hpp	/^  int* data(const Protocol&)$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&)
data	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  const data_type* data() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
data	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  data_type* data()$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:()
data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  const int* data(const Protocol&) const$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol&) const
data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  const void* data(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol) const
data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  const void* data(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol) const
data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  const void* data(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:(const Protocol& protocol) const
data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  const void* data(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(const Protocol& protocol) const
data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int* data(const Protocol&)$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol&)
data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  void* data(const Protocol& protocol)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol)
data	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  void* data(const Protocol& protocol)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol)
data	/usr/include/boost/asio/is_read_buffered.hpp	/^struct is_read_buffered_big_type { char data[10]; };$/;"	m	struct:boost::asio::detail::is_read_buffered_big_type	access:public
data	/usr/include/boost/asio/is_write_buffered.hpp	/^struct is_write_buffered_big_type { char data[10]; };$/;"	m	struct:boost::asio::detail::is_write_buffered_big_type	access:public
data	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  const data_type* data() const$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:() const
data	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  data_type* data()$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:()
datagram_protocol	/usr/include/boost/asio/local/datagram_protocol.hpp	/^class datagram_protocol$/;"	c	namespace:boost::asio::local
datagram_socket_service	/usr/include/boost/asio/datagram_socket_service.hpp	/^  explicit datagram_socket_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(boost::asio::io_service& io_service)
datagram_socket_service	/usr/include/boost/asio/datagram_socket_service.hpp	/^class datagram_socket_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
data_	/usr/include/boost/asio/buffer.hpp	/^  const void* data_;$/;"	m	class:boost::asio::const_buffer	access:private
data_	/usr/include/boost/asio/buffer.hpp	/^  void* data_;$/;"	m	class:boost::asio::mutable_buffer	access:private
data_	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  } data_;$/;"	m	class:boost::asio::ip::basic_endpoint	typeref:union:boost::asio::ip::basic_endpoint::data_union	access:private
data_	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  } data_;$/;"	m	class:boost::asio::local::basic_endpoint	typeref:union:boost::asio::local::basic_endpoint::data_union	access:private
data_added	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  void data_added(size_t count)$/;"	f	class:boost::asio::ssl::detail::net_buffer	access:public	signature:(size_t count)
data_end_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  unsigned char* data_end_;$/;"	m	class:boost::asio::ssl::detail::net_buffer	access:private
data_removed	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  void data_removed(size_t count) $/;"	f	class:boost::asio::ssl::detail::net_buffer	access:public	signature:(size_t count)
data_start_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  unsigned char* data_start_;$/;"	m	class:boost::asio::ssl::detail::net_buffer	access:private
data_type	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  typedef boost::asio::detail::socket_addr_type data_type;$/;"	t	class:boost::asio::ip::basic_endpoint	access:public
data_type	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  typedef implementation_defined data_type;$/;"	t	class:boost::asio::ip::basic_endpoint	access:public
data_type	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  typedef boost::asio::detail::socket_addr_type data_type;$/;"	t	class:boost::asio::local::basic_endpoint	access:public
data_type	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  typedef implementation_defined data_type;$/;"	t	class:boost::asio::local::basic_endpoint	access:public
data_union	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  union data_union$/;"	u	class:boost::asio::ip::basic_endpoint	access:private
data_union	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  union data_union$/;"	u	class:boost::asio::local::basic_endpoint	access:private
deadline_timer	/usr/include/boost/asio/deadline_timer.hpp	/^typedef basic_deadline_timer<boost::posix_time::ptime> deadline_timer;$/;"	t	namespace:boost::asio
deadline_timer_service	/usr/include/boost/asio/deadline_timer_service.hpp	/^  explicit deadline_timer_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(boost::asio::io_service& io_service)
deadline_timer_service	/usr/include/boost/asio/deadline_timer_service.hpp	/^class deadline_timer_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
deadline_timer_service	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  deadline_timer_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(boost::asio::io_service& io_service)
deadline_timer_service	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^class deadline_timer_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
deallocate	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^inline void deallocate(void* p, std::size_t s, Handler& h)$/;"	f	namespace:boost_asio_handler_alloc_helpers	signature:(void* p, std::size_t s, Handler& h)
debug	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_DEBUG> debug;$/;"	t	class:boost::asio::socket_base	access:public
debug	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined debug;$/;"	t	class:boost::asio::socket_base	access:public
debug_check_	/usr/include/boost/asio/buffer.hpp	/^  boost::function<void()> debug_check_;$/;"	m	class:boost::asio::const_buffer	access:private
debug_check_	/usr/include/boost/asio/buffer.hpp	/^  boost::function<void()> debug_check_;$/;"	m	class:boost::asio::mutable_buffer	access:private
decrement	/usr/include/boost/asio/buffers_iterator.hpp	/^  void decrement()$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:()
decrement	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  void decrement()$/;"	f	class:boost::asio::detail::const_buffers_iterator	access:private	signature:()
default_buffer_size	/usr/include/boost/asio/buffered_read_stream.hpp	/^  static const std::size_t default_buffer_size = implementation_defined;$/;"	m	class:boost::asio::buffered_read_stream	access:public
default_buffer_size	/usr/include/boost/asio/buffered_write_stream.hpp	/^  static const std::size_t default_buffer_size = implementation_defined;$/;"	m	class:boost::asio::buffered_write_stream	access:public
default_max_transfer_size	/usr/include/boost/asio/completion_condition.hpp	/^enum { default_max_transfer_size = 65536 };$/;"	e	enum:boost::asio::detail::__anon5
default_workarounds	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const int default_workarounds = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
dereference	/usr/include/boost/asio/buffers_iterator.hpp	/^  byte_type& dereference() const$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:() const
dereference	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  const char& dereference() const$/;"	f	class:boost::asio::detail::const_buffers_iterator	access:private	signature:() const
dereference	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  const Buffer& dereference() const$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:private	signature:() const
dereference	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  const basic_resolver_entry<InternetProtocol>& dereference() const$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:private	signature:() const
descriptor	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    Descriptor descriptor() const$/;"	f	class:boost::asio::detail::reactor_op_queue::op_base	access:public	signature:() const
descriptor_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    int descriptor_;$/;"	m	class:boost::asio::detail::reactive_descriptor_service::implementation_type	access:private
descriptor_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    int descriptor_;$/;"	m	class:boost::asio::detail::read_operation	access:private
descriptor_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    Descriptor descriptor_;$/;"	m	class:boost::asio::detail::reactor_op_queue::op_base	access:private
descriptor_	/usr/include/boost/asio/detail/select_reactor.hpp	/^    socket_type descriptor_;$/;"	m	class:boost::asio::detail::select_reactor::connect_handler_wrapper	access:private
descriptor_base	/usr/include/boost/asio/posix/descriptor_base.hpp	/^class descriptor_base$/;"	c	namespace:boost::asio::posix
descriptor_ops	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^namespace descriptor_ops {$/;"	n	namespace:boost::asio::detail
descriptor_service_	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  reactive_descriptor_service<Reactor>& descriptor_service_;$/;"	m	class:boost::asio::detail::reactive_serial_port_service	access:private
destination_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    endpoint_type destination_;$/;"	m	class:boost::asio::detail::send_to_operation	access:private
destroy	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/deadline_timer_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/detail/handler_queue.hpp	/^    void destroy()$/;"	f	class:boost::asio::detail::handler_queue::handler	access:public	signature:()
destroy	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    void destroy()$/;"	f	class:boost::asio::detail::indirect_handler_queue::handler	access:public	signature:()
destroy	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    void destroy()$/;"	f	class:boost::asio::detail::reactor_op_queue::op_base	access:public	signature:()
destroy	/usr/include/boost/asio/detail/resolver_service.hpp	/^  void destroy(implementation_type&)$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type&)
destroy	/usr/include/boost/asio/detail/strand_service.hpp	/^    void destroy()$/;"	f	class:boost::asio::detail::strand_service::handler_base	access:public	signature:()
destroy	/usr/include/boost/asio/detail/strand_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::detail::strand_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/detail/timer_queue.hpp	/^    void destroy()$/;"	f	class:boost::asio::detail::timer_queue::timer_base	access:public	signature:()
destroy	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    void destroy()$/;"	f	class:boost::asio::detail::win_iocp_io_service::operation	access:public	signature:()
destroy	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/raw_socket_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/serial_port_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/ssl/context_service.hpp	/^  void destroy(impl_type& impl)$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl)
destroy	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  void destroy(impl_type& impl)$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl)
destroy	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  void destroy(impl_type& impl, Stream& \/*next_layer*\/)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& )
destroy	/usr/include/boost/asio/ssl/stream_service.hpp	/^  void destroy(impl_type& impl, Stream& next_layer)$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer)
destroy	/usr/include/boost/asio/stream_socket_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl)
destroy	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void destroy(implementation_type& impl)$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl)
destroy_func_	/usr/include/boost/asio/detail/handler_queue.hpp	/^    destroy_func_type destroy_func_;$/;"	m	class:boost::asio::detail::handler_queue::handler	access:private
destroy_func_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    destroy_func_type destroy_func_;$/;"	m	class:boost::asio::detail::indirect_handler_queue::handler	access:private
destroy_func_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    destroy_func_type destroy_func_;$/;"	m	class:boost::asio::detail::reactor_op_queue::op_base	access:private
destroy_func_	/usr/include/boost/asio/detail/strand_service.hpp	/^    destroy_func_type destroy_func_;$/;"	m	class:boost::asio::detail::strand_service::handler_base	access:private
destroy_func_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    destroy_func_type destroy_func_;$/;"	m	class:boost::asio::detail::timer_queue::timer_base	access:private
destroy_func_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    destroy_func_type destroy_func_;$/;"	m	class:boost::asio::detail::win_iocp_io_service::operation	access:private
destroy_func_type	/usr/include/boost/asio/detail/handler_queue.hpp	/^    typedef void (*destroy_func_type)(handler*);$/;"	t	class:boost::asio::detail::handler_queue::handler	access:protected
destroy_func_type	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    typedef void (*destroy_func_type)(handler*);$/;"	t	class:boost::asio::detail::indirect_handler_queue::handler	access:protected
destroy_func_type	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    typedef void (*destroy_func_type)(op_base*);$/;"	t	class:boost::asio::detail::reactor_op_queue::op_base	access:protected
destroy_func_type	/usr/include/boost/asio/detail/strand_service.hpp	/^    typedef void (*destroy_func_type)(handler_base*);$/;"	t	class:boost::asio::detail::strand_service::handler_base	access:public
destroy_func_type	/usr/include/boost/asio/detail/timer_queue.hpp	/^    typedef void (*destroy_func_type)(timer_base*);$/;"	t	class:boost::asio::detail::timer_queue::timer_base	access:protected
destroy_func_type	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    typedef void (*destroy_func_type)(operation*);$/;"	t	class:boost::asio::detail::win_iocp_io_service::operation	access:public
destroy_handler	/usr/include/boost/asio/detail/timer_queue.hpp	/^    static void destroy_handler(timer_base* base)$/;"	f	class:boost::asio::detail::timer_queue::timer	access:public	signature:(timer_base* base)
destroy_impl	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    static void destroy_impl(operation* op)$/;"	f	class:boost::asio::detail::win_iocp_handle_service::read_operation	access:private	signature:(operation* op)
destroy_impl	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    static void destroy_impl(operation* op)$/;"	f	class:boost::asio::detail::win_iocp_handle_service::write_operation	access:private	signature:(operation* op)
destroy_impl	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    static void destroy_impl(operation* op)$/;"	f	struct:boost::asio::detail::win_iocp_io_service::handler_operation	access:private	signature:(operation* op)
destroy_impl	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^    static void destroy_impl(win_iocp_io_service::operation* op)$/;"	f	struct:boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation	access:private	signature:(win_iocp_io_service::operation* op)
destroy_operations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  void destroy_operations()$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:()
destroy_timers	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual void destroy_timers()$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:()
destroy_timers	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual void destroy_timers() = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:()
destroy_timer_list	/usr/include/boost/asio/detail/timer_queue.hpp	/^  void destroy_timer_list(timer_base*& t)$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(timer_base*& t)
detail	/usr/include/boost/asio/buffer.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/buffers_iterator.hpp	/^namespace detail$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/completion_condition.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/bind_handler.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/call_stack.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/dev_poll_reactor_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/epoll_reactor_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/event.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/fd_set_adapter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/handler_base_from_member.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/handler_queue.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/hash_map.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/io_control.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/kqueue_reactor_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/noncopyable.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/null_event.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/null_mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/null_thread.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/posix_event.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/posix_mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/posix_thread.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/resolver_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/scoped_lock.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/select_interrupter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/select_reactor.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/select_reactor_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/service_base.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/service_id.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/service_registry.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/service_registry_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/signal_blocker.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/signal_init.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/socket_holder.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/socket_ops.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/socket_option.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/socket_types.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/strand_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/task_io_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/task_io_service_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/thread.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/throw_error.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/timer_queue.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/wince_thread.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/winsock_init.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_event.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_io_service_fwd.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_mutex.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_signal_blocker.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_thread.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/error.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::error
detail	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ip
detail	/usr/include/boost/asio/is_read_buffered.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/is_write_buffered.hpp	/^namespace detail {$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/read_until.hpp	/^namespace detail$/;"	n	namespace:boost::asio
detail	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
detail	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
detail	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
detail	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^namespace detail {$/;"	n	namespace:boost::asio::ssl
dev_poll_fd_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  int dev_poll_fd_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
dev_poll_reactor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  dev_poll_reactor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(boost::asio::io_service& io_service)
dev_poll_reactor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^class dev_poll_reactor$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
dispatch	/usr/include/boost/asio/detail/strand_service.hpp	/^  void dispatch(implementation_type& impl, Handler handler)$/;"	f	class:boost::asio::detail::strand_service	access:public	signature:(implementation_type& impl, Handler handler)
dispatch	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void dispatch(Handler handler)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(Handler handler)
dispatch	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void dispatch(Handler handler)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(Handler handler)
dispatch	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void dispatch(Handler handler)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(Handler handler)
dispatch	/usr/include/boost/asio/io_service.hpp	/^  void dispatch(CompletionHandler handler);$/;"	p	class:boost::asio::io_service	access:public	signature:(CompletionHandler handler)
dispatch	/usr/include/boost/asio/strand.hpp	/^  void dispatch(Handler handler)$/;"	f	class:boost::asio::io_service::strand	access:public	signature:(Handler handler)
dispatcher_	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  Dispatcher dispatcher_;$/;"	m	class:boost::asio::detail::wrapped_handler	access:public
dispatch_cancellations	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual void dispatch_cancellations()$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:()
dispatch_cancellations	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual void dispatch_cancellations() = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:()
dispatch_timers	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual void dispatch_timers()$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:()
dispatch_timers	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual void dispatch_timers() = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:()
distance_to	/usr/include/boost/asio/buffers_iterator.hpp	/^  std::ptrdiff_t distance_to(const buffers_iterator& other) const$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:(const buffers_iterator& other) const
down_heap	/usr/include/boost/asio/detail/timer_queue.hpp	/^  void down_heap(size_t index)$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(size_t index)
do_async_read	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  int do_async_read()$/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:private	signature:()
do_async_write	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  int  do_async_write(bool is_operation_done, int rc) $/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:private	signature:(bool is_operation_done, int rc)
do_call	/usr/include/boost/asio/detail/handler_queue.hpp	/^    static void do_call(handler* base)$/;"	f	class:boost::asio::detail::handler_queue::handler_wrapper	access:public	signature:(handler* base)
do_call	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    static void do_call(handler* base)$/;"	f	class:boost::asio::detail::indirect_handler_queue::handler_wrapper	access:public	signature:(handler* base)
do_complete	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    static void do_complete(op_base* base,$/;"	f	class:boost::asio::detail::reactor_op_queue::op	access:public	signature:(op_base* base, const boost::system::error_code& result, std::size_t bytes_transferred)
do_completion_impl	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    static void do_completion_impl(operation* op,$/;"	f	class:boost::asio::detail::win_iocp_handle_service::read_operation	access:private	signature:(operation* op, DWORD last_error, size_t bytes_transferred)
do_completion_impl	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    static void do_completion_impl(operation* op,$/;"	f	class:boost::asio::detail::win_iocp_handle_service::write_operation	access:private	signature:(operation* op, DWORD last_error, size_t bytes_transferred)
do_completion_impl	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    static void do_completion_impl(operation* op, DWORD, size_t)$/;"	f	struct:boost::asio::detail::win_iocp_io_service::handler_operation	access:private	signature:(operation* op, DWORD, size_t)
do_completion_impl	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^    static void do_completion_impl(win_iocp_io_service::operation* op,$/;"	f	struct:boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation	access:private	signature:(win_iocp_io_service::operation* op, DWORD last_error, size_t bytes_transferred)
do_destroy	/usr/include/boost/asio/detail/handler_queue.hpp	/^    static void do_destroy(handler* base)$/;"	f	class:boost::asio::detail::handler_queue::handler_wrapper	access:public	signature:(handler* base)
do_destroy	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    static void do_destroy(handler* base)$/;"	f	class:boost::asio::detail::indirect_handler_queue::handler_wrapper	access:public	signature:(handler* base)
do_destroy	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    static void do_destroy(op_base* base)$/;"	f	class:boost::asio::detail::reactor_op_queue::op	access:public	signature:(op_base* base)
do_destroy	/usr/include/boost/asio/detail/strand_service.hpp	/^    static void do_destroy(handler_base* base)$/;"	f	class:boost::asio::detail::strand_service::handler_wrapper	access:public	signature:(handler_base* base)
do_dev_poll_create	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  static int do_dev_poll_create()$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:private	signature:()
do_epoll_create	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  static int do_epoll_create()$/;"	f	class:boost::asio::detail::epoll_reactor	access:private	signature:()
do_func	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    void do_func(const boost::system::error_code& error, size_t size)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::base_handler	access:public	signature:(const boost::system::error_code& error, size_t size)
do_handler_allocate	/usr/include/boost/asio/detail/strand_service.hpp	/^    void* do_handler_allocate(std::size_t size)$/;"	f	class:boost::asio::detail::strand_service::invoke_current_handler	access:public	signature:(std::size_t size)
do_init	/usr/include/boost/asio/detail/winsock_init.hpp	/^    do_init()$/;"	f	struct:boost::asio::detail::winsock_init::do_init	access:public	signature:()
do_init	/usr/include/boost/asio/detail/winsock_init.hpp	/^  struct do_init$/;"	s	class:boost::asio::detail::winsock_init	access:private
do_init	/usr/include/boost/asio/detail/win_mutex.hpp	/^  int do_init()$/;"	f	class:boost::asio::detail::win_mutex	access:private	signature:()
do_init	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^    do_init()$/;"	f	class:boost::asio::ssl::detail::openssl_init::do_init	access:public	signature:()
do_init	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^  class do_init$/;"	c	class:boost::asio::ssl::detail::openssl_init	access:private
do_invoke	/usr/include/boost/asio/detail/strand_service.hpp	/^    static void do_invoke(handler_base* base,$/;"	f	class:boost::asio::detail::strand_service::handler_wrapper	access:public	signature:(handler_base* base, strand_service& service_impl, implementation_type& impl)
do_kqueue_create	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  static int do_kqueue_create()$/;"	f	class:boost::asio::detail::kqueue_reactor	access:private	signature:()
do_lock	/usr/include/boost/asio/detail/win_mutex.hpp	/^  int do_lock()$/;"	f	class:boost::asio::detail::win_mutex	access:private	signature:()
do_not_route	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_DONTROUTE> do_not_route;$/;"	t	class:boost::asio::socket_base	access:public
do_not_route	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined do_not_route;$/;"	t	class:boost::asio::socket_base	access:public
do_one	/usr/include/boost/asio/detail/task_io_service.hpp	/^  size_t do_one(boost::asio::detail::mutex::scoped_lock& lock,$/;"	f	class:boost::asio::detail::task_io_service	access:private	signature:(boost::asio::detail::mutex::scoped_lock& lock, idle_thread_info* this_idle_thread, boost::system::error_code& ec)
do_one	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  size_t do_one(idle_thread_info* this_idle_thread,$/;"	f	class:boost::asio::detail::task_io_service	access:private	signature:(idle_thread_info* this_idle_thread, boost::system::error_code& ec)
do_one	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  size_t do_one(bool block, boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:private	signature:(bool block, boost::system::error_code& ec)
do_perform	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    static bool do_perform(op_base* base,$/;"	f	class:boost::asio::detail::reactor_op_queue::op	access:public	signature:(op_base* base, boost::system::error_code& result, std::size_t& bytes_transferred)
do_sync_read	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  int do_sync_read()$/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:private	signature:()
do_sync_write	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  int do_sync_write(bool is_operation_done, int rc)$/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:private	signature:(bool is_operation_done, int rc)
dummy_	/usr/include/boost/asio/detail/noncopyable.hpp	/^  char dummy_;$/;"	m	class:boost::asio::detail::noncopyable	access:private
dummy_	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  char dummy_;$/;"	m	class:boost::asio::ip::resolver_query_base	access:private
dummy_	/usr/include/boost/asio/serial_port_base.hpp	/^  char dummy_;$/;"	m	class:boost::asio::serial_port_base	access:private
dummy_	/usr/include/boost/asio/socket_base.hpp	/^  char dummy_;$/;"	m	class:boost::asio::socket_base	access:private
dummy_	/usr/include/boost/asio/ssl/context_base.hpp	/^  char dummy_;$/;"	m	class:boost::asio::ssl::context_base	access:private
dummy_	/usr/include/boost/asio/ssl/stream_base.hpp	/^  char dummy_;$/;"	m	class:boost::asio::ssl::stream_base	access:private
duration_type	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  typedef typename traits_type::duration_type duration_type;$/;"	t	class:boost::asio::basic_deadline_timer	access:public
duration_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef typename traits_type::duration_type duration_type;$/;"	t	class:boost::asio::deadline_timer_service	access:public
duration_type	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  typedef typename Time_Traits::duration_type duration_type;$/;"	t	class:boost::asio::detail::deadline_timer_service	access:public
duration_type	/usr/include/boost/asio/detail/timer_queue.hpp	/^  typedef typename Time_Traits::duration_type duration_type;$/;"	t	class:boost::asio::detail::timer_queue	access:public
duration_type	/usr/include/boost/asio/time_traits.hpp	/^  typedef boost::posix_time::time_duration duration_type;$/;"	t	struct:boost::asio::time_traits	access:public
EAI_AGAIN	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	123;"	d
EAI_BADFLAGS	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	127;"	d
EAI_FAIL	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	131;"	d
EAI_FAMILY	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	135;"	d
EAI_MEMORY	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	139;"	d
EAI_NODATA	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	143;"	d
EAI_NONAME	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	147;"	d
EAI_SERVICE	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	151;"	d
EAI_SOCKTYPE	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	155;"	d
ec_	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^    boost::system::error_code ec_;$/;"	m	struct:boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation_base	access:public
empty	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  bool empty() const$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:() const
empty	/usr/include/boost/asio/detail/handler_queue.hpp	/^  bool empty() const$/;"	f	class:boost::asio::detail::handler_queue	access:public	signature:() const
empty	/usr/include/boost/asio/detail/hash_map.hpp	/^  bool empty() const$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:() const
empty	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  bool empty() const$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:() const
empty	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual bool empty() const$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:() const
empty	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual bool empty() const = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:() const
enabled	/usr/include/boost/asio/detail/socket_option.hpp	/^  bool enabled() const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:() const
enabled	/usr/include/boost/asio/detail/socket_option.hpp	/^  void enabled(bool value)$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(bool value)
enable_connection_aborted	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^      enable_connection_aborted = 4,$/;"	e	enum:boost::asio::detail::reactive_socket_service::implementation_type::__anon15
enable_connection_aborted	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^      enable_connection_aborted = 1, \/\/ User wants connection_aborted errors.$/;"	e	enum:boost::asio::detail::win_iocp_socket_service::implementation_type::__anon23
enable_connection_aborted	/usr/include/boost/asio/socket_base.hpp	/^    enable_connection_aborted;$/;"	t	class:boost::asio::socket_base	access:public
enable_connection_aborted	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined enable_connection_aborted;$/;"	t	class:boost::asio::socket_base	access:public
enable_connection_aborted_option	/usr/include/boost/asio/detail/socket_types.hpp	/^const int enable_connection_aborted_option = 1;$/;"	m	namespace:boost::asio::detail
enable_loopback	/usr/include/boost/asio/ip/multicast.hpp	/^  enable_loopback;$/;"	t	namespace:boost::asio::ip::multicast
enable_loopback	/usr/include/boost/asio/ip/multicast.hpp	/^typedef implementation_defined enable_loopback;$/;"	t	namespace:boost::asio::ip::multicast
end	/usr/include/boost/asio/buffer.hpp	/^  const_iterator end() const$/;"	f	class:boost::asio::const_buffers_1	access:public	signature:() const
end	/usr/include/boost/asio/buffer.hpp	/^  const_iterator end() const$/;"	f	class:boost::asio::mutable_buffers_1	access:public	signature:() const
end	/usr/include/boost/asio/buffer.hpp	/^  const_iterator end() const$/;"	f	class:boost::asio::null_buffers	access:public	signature:() const
end	/usr/include/boost/asio/buffers_iterator.hpp	/^  static buffers_iterator end(const BufferSequence& buffers)$/;"	f	class:boost::asio::buffers_iterator	access:public	signature:(const BufferSequence& buffers)
end	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  const_iterator end() const$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:() const
end	/usr/include/boost/asio/detail/hash_map.hpp	/^  const_iterator end() const$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:() const
end	/usr/include/boost/asio/detail/hash_map.hpp	/^  iterator end()$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:()
endpoint	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  endpoint_type endpoint() const$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:() const
endpoint	/usr/include/boost/asio/ip/icmp.hpp	/^  typedef basic_endpoint<icmp> endpoint;$/;"	t	class:boost::asio::ip::icmp	access:public
endpoint	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_endpoint<tcp> endpoint;$/;"	t	class:boost::asio::ip::tcp	access:public
endpoint	/usr/include/boost/asio/ip/udp.hpp	/^  typedef basic_endpoint<udp> endpoint;$/;"	t	class:boost::asio::ip::udp	access:public
endpoint	/usr/include/boost/asio/local/datagram_protocol.hpp	/^  typedef basic_endpoint<datagram_protocol> endpoint;$/;"	t	class:boost::asio::local::datagram_protocol	access:public
endpoint	/usr/include/boost/asio/local/stream_protocol.hpp	/^  typedef basic_endpoint<stream_protocol> endpoint;$/;"	t	class:boost::asio::local::stream_protocol	access:public
endpoint_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    endpoint_type endpoint_;$/;"	m	class:boost::asio::detail::resolver_service::resolve_endpoint_handler	access:private
endpoint_	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  endpoint_type endpoint_;$/;"	m	class:boost::asio::ip::basic_resolver_entry	access:private
endpoint_type	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_datagram_socket	access:public
endpoint_type	/usr/include/boost/asio/basic_raw_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_raw_socket	access:public
endpoint_type	/usr/include/boost/asio/basic_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_socket	access:public
endpoint_type	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_socket_acceptor	access:public
endpoint_type	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_socket_streambuf	access:public
endpoint_type	/usr/include/boost/asio/basic_stream_socket.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::basic_stream_socket	access:public
endpoint_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
endpoint_type	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::detail::reactive_socket_service	access:public
endpoint_type	/usr/include/boost/asio/detail/resolver_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::detail::resolver_service	access:public
endpoint_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::detail::win_iocp_socket_service	access:public
endpoint_type	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  typedef typename InternetProtocol::endpoint endpoint_type;$/;"	t	class:boost::asio::ip::basic_resolver	access:public
endpoint_type	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  typedef typename InternetProtocol::endpoint endpoint_type;$/;"	t	class:boost::asio::ip::basic_resolver_entry	access:public
endpoint_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef typename InternetProtocol::endpoint endpoint_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
endpoint_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
endpoint_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef typename protocol_type::endpoint endpoint_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
endpoint_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef typename Protocol::endpoint endpoint_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
end_	/usr/include/boost/asio/buffers_iterator.hpp	/^  typename BufferSequence::const_iterator end_;$/;"	m	class:boost::asio::buffers_iterator	access:private
end_	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  typename ConstBufferSequence::const_iterator end_;$/;"	m	class:boost::asio::detail::const_buffers_iterator	access:private
end_offset_	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  size_type end_offset_;$/;"	m	class:boost::asio::detail::buffered_stream_storage	access:private
end_remainder_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  Buffer_Iterator end_remainder_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
enqueue_cancel_ops_unlocked	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void enqueue_cancel_ops_unlocked(socket_type descriptor)$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type descriptor)
enqueue_operation	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  bool enqueue_operation(Descriptor descriptor, Operation operation)$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor descriptor, Operation operation)
enqueue_timer	/usr/include/boost/asio/detail/timer_queue.hpp	/^  bool enqueue_timer(const time_type& time, Handler handler, void* token)$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:(const time_type& time, Handler handler, void* token)
entry_event_	/usr/include/boost/asio/detail/win_thread.hpp	/^    ::HANDLE entry_event_;$/;"	m	class:boost::asio::detail::win_thread::func_base	access:public
eof	/usr/include/boost/asio/error.hpp	/^  eof,$/;"	e	enum:boost::asio::error::misc_errors
epoll_fd_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  int epoll_fd_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
epoll_reactor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  epoll_reactor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(boost::asio::io_service& io_service)
epoll_reactor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^class epoll_reactor$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
epoll_size	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  enum { epoll_size = 20000 };$/;"	e	enum:boost::asio::detail::epoll_reactor::__anon6
equal	/usr/include/boost/asio/buffers_iterator.hpp	/^  bool equal(const buffers_iterator& other) const$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:(const buffers_iterator& other) const
equal	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  bool equal(const const_buffers_iterator& other) const$/;"	f	class:boost::asio::detail::const_buffers_iterator	access:private	signature:(const const_buffers_iterator& other) const
equal	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  bool equal(const consuming_buffers_iterator& other) const$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:private	signature:(const consuming_buffers_iterator& other) const
equal	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  bool equal(const basic_resolver_iterator& other) const$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:private	signature:(const basic_resolver_iterator& other) const
erase	/usr/include/boost/asio/detail/hash_map.hpp	/^  void erase(iterator it)$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:(iterator it)
error	/usr/include/boost/asio/error.hpp	/^namespace error {$/;"	n	namespace:boost::asio
error	/usr/include/boost/asio/placeholders.hpp	/^unspecified error;$/;"	m	namespace:boost::asio::placeholders
error_wrapper	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline ReturnType error_wrapper(ReturnType return_value,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(ReturnType return_value, boost::system::error_code& ec)
error_wrapper	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline ReturnType error_wrapper(ReturnType return_value,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(ReturnType return_value, boost::system::error_code& ec)
even	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, odd, even };$/;"	e	enum:boost::asio::serial_port_base::parity::type
event	/usr/include/boost/asio/detail/event.hpp	/^typedef null_event event;$/;"	t	namespace:boost::asio::detail
eventfd_select_interrupter	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  eventfd_select_interrupter()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:()
eventfd_select_interrupter	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^class eventfd_select_interrupter$/;"	c	namespace:boost::asio::detail
event_	/usr/include/boost/asio/detail/win_event.hpp	/^  HANDLE event_;$/;"	m	class:boost::asio::detail::win_event	access:private
EV_OOBAND	/usr/include/boost/asio/detail/kqueue_reactor.hpp	52;"	d
except_op_queue_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  reactor_op_queue<socket_type> except_op_queue_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
except_op_queue_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  reactor_op_queue<socket_type> except_op_queue_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
except_op_queue_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  reactor_op_queue<socket_type> except_op_queue_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
except_op_queue_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  reactor_op_queue<socket_type> except_op_queue_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
exit_event_	/usr/include/boost/asio/detail/win_thread.hpp	/^    ::HANDLE exit_event_;$/;"	m	class:boost::asio::detail::win_thread::func_base	access:public
exit_event_	/usr/include/boost/asio/detail/win_thread.hpp	/^  ::HANDLE exit_event_;$/;"	m	class:boost::asio::detail::win_thread	access:private
expires_at	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t expires_at(const time_type& expiry_time)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(const time_type& expiry_time)
expires_at	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t expires_at(const time_type& expiry_time,$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(const time_type& expiry_time, boost::system::error_code& ec)
expires_at	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  time_type expires_at() const$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:() const
expires_at	/usr/include/boost/asio/deadline_timer_service.hpp	/^  std::size_t expires_at(implementation_type& impl,$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, const time_type& expiry_time, boost::system::error_code& ec)
expires_at	/usr/include/boost/asio/deadline_timer_service.hpp	/^  time_type expires_at(const implementation_type& impl) const$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(const implementation_type& impl) const
expires_at	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  std::size_t expires_at(implementation_type& impl,$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, const time_type& expiry_time, boost::system::error_code& ec)
expires_at	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  time_type expires_at(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(const implementation_type& impl) const
expires_from_now	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  duration_type expires_from_now() const$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:() const
expires_from_now	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t expires_from_now(const duration_type& expiry_time)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(const duration_type& expiry_time)
expires_from_now	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  std::size_t expires_from_now(const duration_type& expiry_time,$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(const duration_type& expiry_time, boost::system::error_code& ec)
expires_from_now	/usr/include/boost/asio/deadline_timer_service.hpp	/^  duration_type expires_from_now(const implementation_type& impl) const$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(const implementation_type& impl) const
expires_from_now	/usr/include/boost/asio/deadline_timer_service.hpp	/^  std::size_t expires_from_now(implementation_type& impl,$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, const duration_type& expiry_time, boost::system::error_code& ec)
expires_from_now	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  duration_type expires_from_now(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(const implementation_type& impl) const
expires_from_now	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  std::size_t expires_from_now(implementation_type& impl,$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, const duration_type& expiry_time, boost::system::error_code& ec)
expiry	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^    time_type expiry;$/;"	m	struct:boost::asio::detail::deadline_timer_service::implementation_type	access:public
ext_bio	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    ::BIO* ext_bio;$/;"	m	struct:boost::asio::ssl::detail::openssl_stream_service::impl_struct	access:public
family	/usr/include/boost/asio/detail/socket_ops.hpp	/^  int family;$/;"	m	struct:boost::asio::detail::socket_ops::gai_search	access:public
family	/usr/include/boost/asio/ip/icmp.hpp	/^  int family() const$/;"	f	class:boost::asio::ip::icmp	access:public	signature:() const
family	/usr/include/boost/asio/ip/tcp.hpp	/^  int family() const$/;"	f	class:boost::asio::ip::tcp	access:public	signature:() const
family	/usr/include/boost/asio/ip/udp.hpp	/^  int family() const$/;"	f	class:boost::asio::ip::udp	access:public	signature:() const
family	/usr/include/boost/asio/local/datagram_protocol.hpp	/^  int family() const$/;"	f	class:boost::asio::local::datagram_protocol	access:public	signature:() const
family	/usr/include/boost/asio/local/stream_protocol.hpp	/^  int family() const$/;"	f	class:boost::asio::local::stream_protocol	access:public	signature:() const
family_	/usr/include/boost/asio/ip/icmp.hpp	/^  int family_;$/;"	m	class:boost::asio::ip::icmp	access:private
family_	/usr/include/boost/asio/ip/tcp.hpp	/^  int family_;$/;"	m	class:boost::asio::ip::tcp	access:private
family_	/usr/include/boost/asio/ip/udp.hpp	/^  int family_;$/;"	m	class:boost::asio::ip::udp	access:private
fault	/usr/include/boost/asio/error.hpp	/^  fault = BOOST_ASIO_SOCKET_ERROR(EFAULT),$/;"	e	enum:boost::asio::error::basic_errors
fcntl	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline int fcntl(int d, long cmd, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, long cmd, boost::system::error_code& ec)
fcntl	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline int fcntl(int d, long cmd, long arg, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, long cmd, long arg, boost::system::error_code& ec)
fd_array	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^    SOCKET fd_array[win_fd_set_size];$/;"	m	struct:boost::asio::detail::win_fd_set_adapter::win_fd_set	access:public
fd_count	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^    u_int fd_count;$/;"	m	struct:boost::asio::detail::win_fd_set_adapter::win_fd_set	access:public
fd_set_	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  mutable fd_set fd_set_;$/;"	m	class:boost::asio::detail::posix_fd_set_adapter	access:private
fd_set_	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  win_fd_set fd_set_;$/;"	m	class:boost::asio::detail::win_fd_set_adapter	access:private
fd_set_adapter	/usr/include/boost/asio/detail/fd_set_adapter.hpp	/^typedef win_fd_set_adapter fd_set_adapter;$/;"	t	namespace:boost::asio::detail
fd_set_failure	/usr/include/boost/asio/error.hpp	/^  fd_set_failure$/;"	e	enum:boost::asio::error::misc_errors
file_format	/usr/include/boost/asio/ssl/context_base.hpp	/^  enum file_format$/;"	g	class:boost::asio::ssl::context_base	access:public
fill	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t fill()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
fill	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t fill(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(boost::system::error_code& ec)
fill	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t fill()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
fill	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t fill(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(boost::system::error_code& ec)
fill_handler	/usr/include/boost/asio/buffered_read_stream.hpp	/^    fill_handler(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::buffered_read_stream::fill_handler	access:public	signature:(boost::asio::io_service& io_service, detail::buffered_stream_storage& storage, std::size_t previous_size, ReadHandler handler)
fill_handler	/usr/include/boost/asio/buffered_read_stream.hpp	/^  class fill_handler$/;"	c	class:boost::asio::buffered_read_stream	access:public
find	/usr/include/boost/asio/detail/hash_map.hpp	/^  const_iterator find(const K& k) const$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:(const K& k) const
find	/usr/include/boost/asio/detail/hash_map.hpp	/^  iterator find(const K& k)$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:(const K& k)
first	/usr/include/boost/asio/detail/hash_map.hpp	/^    iterator first;$/;"	m	struct:boost::asio::detail::hash_map::bucket_type	access:public
first_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  Buffer first_;$/;"	m	class:boost::asio::detail::consuming_buffers	access:private
first_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  Buffer first_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
first_idle_thread_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  idle_thread_info* first_idle_thread_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
first_service_	/usr/include/boost/asio/detail/service_registry.hpp	/^  boost::asio::io_service::service* first_service_;$/;"	m	class:boost::asio::detail::service_registry	access:private
first_waiter_	/usr/include/boost/asio/detail/strand_service.hpp	/^    handler_base* first_waiter_;$/;"	m	class:boost::asio::detail::strand_service::strand_impl	access:private
flags	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^            impl.socket_, this->get_io_service(), buffers, flags, handler));$/;"	e	enum:boost::asio::detail::reactive_socket_service::__anon16
flags_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    unsigned char flags_;$/;"	m	class:boost::asio::detail::reactive_descriptor_service::implementation_type	access:private
flags_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    socket_base::message_flags flags_;$/;"	m	class:boost::asio::detail::receive_from_operation	access:private
flags_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    socket_base::message_flags flags_;$/;"	m	class:boost::asio::detail::receive_operation	access:private
flags_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    socket_base::message_flags flags_;$/;"	m	class:boost::asio::detail::send_to_operation	access:private
flags_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    unsigned char flags_;$/;"	m	class:boost::asio::detail::reactive_socket_service::implementation_type	access:private
flags_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    unsigned char flags_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::implementation_type	access:private
flow_control	/usr/include/boost/asio/serial_port_base.hpp	/^    explicit flow_control(type t = none);$/;"	p	class:boost::asio::serial_port_base::flow_control	access:public	signature:(type t = none)
flow_control	/usr/include/boost/asio/serial_port_base.hpp	/^  class flow_control$/;"	c	class:boost::asio::serial_port_base	access:public
flush	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t flush()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
flush	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t flush(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(boost::system::error_code& ec)
flush	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t flush()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
flush	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t flush(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(boost::system::error_code& ec)
flush_handler	/usr/include/boost/asio/buffered_write_stream.hpp	/^    flush_handler(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::buffered_write_stream::flush_handler	access:public	signature:(boost::asio::io_service& io_service, detail::buffered_stream_storage& storage, WriteHandler handler)
flush_handler	/usr/include/boost/asio/buffered_write_stream.hpp	/^  class flush_handler$/;"	c	class:boost::asio::buffered_write_stream	access:public
for_reading	/usr/include/boost/asio/ssl/context_base.hpp	/^    for_reading,$/;"	e	enum:boost::asio::ssl::context_base::password_purpose
for_writing	/usr/include/boost/asio/ssl/context_base.hpp	/^    for_writing$/;"	e	enum:boost::asio::ssl::context_base::password_purpose
freeaddrinfo	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void freeaddrinfo(addrinfo_type* ai)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* ai)
freeaddrinfo_emulation	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void freeaddrinfo_emulation(addrinfo_type* aihead)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* aihead)
freehostent	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void freehostent(hostent* h)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(hostent* h)
from_string	/usr/include/boost/asio/ip/address.hpp	/^  static address from_string(const char* str)$/;"	f	class:boost::asio::ip::address	access:public	signature:(const char* str)
from_string	/usr/include/boost/asio/ip/address.hpp	/^  static address from_string(const char* str, boost::system::error_code& ec)$/;"	f	class:boost::asio::ip::address	access:public	signature:(const char* str, boost::system::error_code& ec)
from_string	/usr/include/boost/asio/ip/address.hpp	/^  static address from_string(const std::string& str)$/;"	f	class:boost::asio::ip::address	access:public	signature:(const std::string& str)
from_string	/usr/include/boost/asio/ip/address.hpp	/^  static address from_string(const std::string& str,$/;"	f	class:boost::asio::ip::address	access:public	signature:(const std::string& str, boost::system::error_code& ec)
from_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 from_string(const char* str)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const char* str)
from_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 from_string(const char* str, boost::system::error_code& ec)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const char* str, boost::system::error_code& ec)
from_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 from_string(const std::string& str)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const std::string& str)
from_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 from_string(const std::string& str,$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const std::string& str, boost::system::error_code& ec)
from_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  static address_v6 from_string(const char* str)$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(const char* str)
from_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  static address_v6 from_string(const char* str, boost::system::error_code& ec)$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(const char* str, boost::system::error_code& ec)
from_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  static address_v6 from_string(const std::string& str)$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(const std::string& str)
from_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  static address_v6 from_string(const std::string& str,$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(const std::string& str, boost::system::error_code& ec)
front	/usr/include/boost/asio/detail/handler_queue.hpp	/^  handler* front()$/;"	f	class:boost::asio::detail::handler_queue	access:public	signature:()
front_	/usr/include/boost/asio/detail/handler_queue.hpp	/^  handler* front_;$/;"	m	class:boost::asio::detail::handler_queue	access:private
front_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  node* front_;$/;"	m	class:boost::asio::detail::indirect_handler_queue	access:private
front_mutex_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  boost::asio::detail::mutex front_mutex_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
front_stopped_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  bool front_stopped_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
front_version	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  unsigned long front_version()$/;"	f	class:boost::asio::detail::indirect_handler_queue	access:public	signature:()
func	/usr/include/boost/asio/detail/posix_thread.hpp	/^    func(Function f)$/;"	f	class:boost::asio::detail::posix_thread::func	access:public	signature:(Function f)
func	/usr/include/boost/asio/detail/posix_thread.hpp	/^  class func$/;"	c	class:boost::asio::detail::posix_thread	inherits:func_base	access:private
func	/usr/include/boost/asio/detail/wince_thread.hpp	/^    func(Function f)$/;"	f	class:boost::asio::detail::wince_thread::func	access:public	signature:(Function f)
func	/usr/include/boost/asio/detail/wince_thread.hpp	/^  class func$/;"	c	class:boost::asio::detail::wince_thread	inherits:func_base	access:private
func	/usr/include/boost/asio/detail/win_thread.hpp	/^    func(Function f)$/;"	f	class:boost::asio::detail::win_thread::func	access:public	signature:(Function f)
func	/usr/include/boost/asio/detail/win_thread.hpp	/^  class func$/;"	c	class:boost::asio::detail::win_thread	inherits:func_base	access:private
func_	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    func_t func_;$/;"	m	class:boost::asio::ssl::detail::openssl_stream_service::base_handler	access:private
func_base	/usr/include/boost/asio/detail/posix_thread.hpp	/^  class func_base$/;"	c	class:boost::asio::detail::posix_thread	access:private
func_base	/usr/include/boost/asio/detail/wince_thread.hpp	/^  class func_base$/;"	c	class:boost::asio::detail::wince_thread	access:private
func_base	/usr/include/boost/asio/detail/win_thread.hpp	/^  class func_base$/;"	c	class:boost::asio::detail::win_thread	access:private
func_t	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^      void (const boost::system::error_code&, size_t)> func_t;$/;"	t	class:boost::asio::ssl::detail::openssl_stream_service::base_handler	access:public
f_	/usr/include/boost/asio/detail/posix_thread.hpp	/^    Function f_;$/;"	m	class:boost::asio::detail::posix_thread::func	access:private
f_	/usr/include/boost/asio/detail/wince_thread.hpp	/^    Function f_;$/;"	m	class:boost::asio::detail::wince_thread::func	access:private
f_	/usr/include/boost/asio/detail/win_thread.hpp	/^    Function f_;$/;"	m	class:boost::asio::detail::win_thread::func	access:private
gai_aistruct	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int gai_aistruct(addrinfo_type*** next, const addrinfo_type* hints,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type*** next, const addrinfo_type* hints, const void* addr, int family)
gai_alloc	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline T* gai_alloc(std::size_t size = sizeof(T))$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(std::size_t size = sizeof(T))
gai_clone	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline addrinfo_type* gai_clone(addrinfo_type* ai)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* ai)
gai_clone_flag	/usr/include/boost/asio/detail/socket_ops.hpp	/^enum { gai_clone_flag = 1 << 30 };$/;"	e	enum:boost::asio::detail::socket_ops::__anon17
gai_echeck	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int gai_echeck(const char* host, const char* service,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* host, const char* service, int flags, int family, int socktype, int protocol)
gai_free	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void gai_free(void* p)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(void* p)
gai_nsearch	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int gai_nsearch(const char* host,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* host, const addrinfo_type* hints, gai_search (&search)[2])
gai_port	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int gai_port(addrinfo_type* aihead, int port, int socktype)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* aihead, int port, int socktype)
gai_search	/usr/include/boost/asio/detail/socket_ops.hpp	/^struct gai_search$/;"	s	namespace:boost::asio::detail::socket_ops
gai_serv	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int gai_serv(addrinfo_type* aihead,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(addrinfo_type* aihead, const addrinfo_type* hints, const char* serv)
gai_strcpy	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void gai_strcpy(char* target, const char* source, std::size_t max_size)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(char* target, const char* source, std::size_t max_size)
gather_write	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline int gather_write(int d, const buf* bufs, size_t count,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, const buf* bufs, size_t count, boost::system::error_code& ec)
get	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  pointer_type get() const$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:() const
get	/usr/include/boost/asio/detail/handler_queue.hpp	/^    handler* get() const$/;"	f	class:boost::asio::detail::handler_queue::scoped_ptr	access:public	signature:() const
get	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    handler* get() const$/;"	f	class:boost::asio::detail::indirect_handler_queue::scoped_ptr	access:public	signature:() const
get	/usr/include/boost/asio/detail/io_control.hpp	/^  bool get() const$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:() const
get	/usr/include/boost/asio/detail/io_control.hpp	/^  std::size_t get() const$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:() const
get	/usr/include/boost/asio/detail/socket_holder.hpp	/^  socket_type get() const$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:() const
get	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  const OVERLAPPED* get() const$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:() const
get	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  OVERLAPPED* get()$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:()
get	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  const OVERLAPPED* get() const$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:() const
get	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  OVERLAPPED* get()$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:()
getaddrinfo	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline boost::system::error_code getaddrinfo(const char* host,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* host, const char* service, const addrinfo_type* hints, addrinfo_type** result, boost::system::error_code& ec)
getaddrinfo_emulation	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int getaddrinfo_emulation(const char* host, const char* service,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* host, const char* service, const addrinfo_type* hintsp, addrinfo_type** result)
gethostbyaddr	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline hostent* gethostbyaddr(const char* addr, int length, int af,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* addr, int length, int af, hostent* result, char* buffer, int buflength, boost::system::error_code& ec)
gethostbyname	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline hostent* gethostbyname(const char* name, int af, struct hostent* result,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const char* name, int af, struct hostent* result, char* buffer, int buflength, int ai_flags, boost::system::error_code& ec)
gethostname	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int gethostname(char* name, int namelen, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(char* name, int namelen, boost::system::error_code& ec)
getnameinfo	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline boost::system::error_code getnameinfo(const socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(const socket_addr_type* addr, std::size_t addrlen, char* host, std::size_t hostlen, char* serv, std::size_t servlen, int flags, boost::system::error_code& ec)
getnameinfo_emulation	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline boost::system::error_code getnameinfo_emulation($/;"	f	namespace:boost::asio::detail::socket_ops	signature:( const socket_addr_type* sa, std::size_t salen, char* host, std::size_t hostlen, char* serv, std::size_t servlen, int flags, boost::system::error_code& ec)
getpeername	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int getpeername(socket_type s, socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
getsockname	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int getsockname(socket_type s, socket_addr_type* addr,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
getsockopt	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int getsockopt(socket_type s, int level, int optname, void* optval,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, int level, int optname, void* optval, size_t* optlen, boost::system::error_code& ec)
get_addrinfo_category	/usr/include/boost/asio/error.hpp	/^inline const boost::system::error_category& get_addrinfo_category()$/;"	f	namespace:boost::asio::error	signature:()
get_buffer_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  boost::array<char, buffer_size> get_buffer_;$/;"	m	class:boost::asio::basic_socket_streambuf	access:private
get_data_len	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  size_t get_data_len() { return (data_end_ - data_start_); }    $/;"	f	class:boost::asio::ssl::detail::net_buffer	access:public	signature:()
get_data_start	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  unsigned char* get_data_start() { return data_start_; }$/;"	f	class:boost::asio::ssl::detail::net_buffer	access:public	signature:()
get_debug_check	/usr/include/boost/asio/buffer.hpp	/^  const boost::function<void()>& get_debug_check() const$/;"	f	class:boost::asio::const_buffer	access:public	signature:() const
get_debug_check	/usr/include/boost/asio/buffer.hpp	/^  const boost::function<void()>& get_debug_check() const$/;"	f	class:boost::asio::mutable_buffer	access:public	signature:() const
get_descriptors	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  void get_descriptors(Descriptor_Set& descriptors)$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor_Set& descriptors)
get_io_service	/usr/include/boost/asio/basic_io_object.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::basic_io_object	access:public	signature:()
get_io_service	/usr/include/boost/asio/buffered_read_stream.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
get_io_service	/usr/include/boost/asio/buffered_stream.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
get_io_service	/usr/include/boost/asio/buffered_write_stream.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
get_io_service	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::io_service& get_io_service();$/;"	p	class:boost::asio::io_service::service	access:public	signature:()
get_io_service	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::io_service& get_io_service();$/;"	p	class:boost::asio::io_service::work	access:public	signature:()
get_io_service	/usr/include/boost/asio/ssl/stream.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::ssl::stream	access:public	signature:()
get_io_service	/usr/include/boost/asio/strand.hpp	/^  boost::asio::io_service& get_io_service()$/;"	f	class:boost::asio::io_service::strand	access:public	signature:()
get_misc_category	/usr/include/boost/asio/error.hpp	/^inline const boost::system::error_category& get_misc_category()$/;"	f	namespace:boost::asio::error	signature:()
get_netdb_category	/usr/include/boost/asio/error.hpp	/^inline const boost::system::error_category& get_netdb_category()$/;"	f	namespace:boost::asio::error	signature:()
get_option	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code get_option(GettableSerialPortOption& option,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(GettableSerialPortOption& option, boost::system::error_code& ec)
get_option	/usr/include/boost/asio/basic_serial_port.hpp	/^  void get_option(GettableSerialPortOption& option)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(GettableSerialPortOption& option)
get_option	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code get_option(GettableSocketOption& option,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(GettableSocketOption& option, boost::system::error_code& ec) const
get_option	/usr/include/boost/asio/basic_socket.hpp	/^  void get_option(GettableSocketOption& option) const$/;"	f	class:boost::asio::basic_socket	access:public	signature:(GettableSocketOption& option) const
get_option	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code get_option(GettableSocketOption& option,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(GettableSocketOption& option, boost::system::error_code& ec)
get_option	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void get_option(GettableSocketOption& option)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(GettableSocketOption& option)
get_option	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl, GettableSocketOption& option, boost::system::error_code& ec) const
get_option	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(const implementation_type& impl, GettableSerialPortOption& option, boost::system::error_code& ec) const
get_option	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(const implementation_type& impl, GettableSerialPortOption& option, boost::system::error_code& ec) const
get_option	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl, GettableSocketOption& option, boost::system::error_code& ec) const
get_option	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(const implementation_type& impl, GettableSerialPortOption& option, boost::system::error_code& ec) const
get_option	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(const implementation_type& impl, GettableSocketOption& option, boost::system::error_code& ec) const
get_option	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code get_option(const implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl, GettableSocketOption& option, boost::system::error_code& ec) const
get_ssl_category	/usr/include/boost/asio/error.hpp	/^inline const boost::system::error_category& get_ssl_category()$/;"	f	namespace:boost::asio::error	signature:()
get_system_category	/usr/include/boost/asio/error.hpp	/^inline const boost::system::error_category& get_system_category()$/;"	f	namespace:boost::asio::error	signature:()
get_timeout	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  int get_timeout()$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:private	signature:()
get_timeout	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  int get_timeout()$/;"	f	class:boost::asio::detail::epoll_reactor	access:private	signature:()
get_timeout	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  timespec* get_timeout(timespec& ts)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:private	signature:(timespec& ts)
get_timeout	/usr/include/boost/asio/detail/select_reactor.hpp	/^  timeval* get_timeout(timeval& tv)$/;"	f	class:boost::asio::detail::select_reactor	access:private	signature:(timeval& tv)
get_timeout	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  DWORD get_timeout()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:private	signature:()
get_unused_len	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  size_t get_unused_len() { return (NET_BUF_SIZE - (data_end_ - buf_)); }    $/;"	f	class:boost::asio::ssl::detail::net_buffer	access:public	signature:()
get_unused_start	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  unsigned char* get_unused_start() { return data_end_; }$/;"	f	class:boost::asio::ssl::detail::net_buffer	access:public	signature:()
handle	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    HANDLE handle;$/;"	m	struct:boost::asio::detail::win_iocp_io_service::iocp_holder	access:public
handler	/usr/include/boost/asio/detail/handler_queue.hpp	/^    handler(invoke_func_type invoke_func,$/;"	f	class:boost::asio::detail::handler_queue::handler	access:protected	signature:(invoke_func_type invoke_func, destroy_func_type destroy_func)
handler	/usr/include/boost/asio/detail/handler_queue.hpp	/^  class handler$/;"	c	class:boost::asio::detail::handler_queue	inherits:noncopyable	access:public
handler	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    handler(invoke_func_type invoke_func,$/;"	f	class:boost::asio::detail::indirect_handler_queue::handler	access:protected	signature:(invoke_func_type invoke_func, destroy_func_type destroy_func)
handler	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  class handler$/;"	c	class:boost::asio::detail::indirect_handler_queue	inherits:noncopyable	access:public
handler	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^            impl.descriptor_, this->get_io_service(), buffers, handler));$/;"	e	enum:boost::asio::detail::reactive_descriptor_service::__anon12
handler	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^            impl.socket_, this->get_io_service(), buffers, flags, handler));$/;"	e	enum:boost::asio::detail::reactive_socket_service::__anon16
handler_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::buffered_read_stream::fill_handler	access:private
handler_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    ReadHandler handler_;$/;"	m	class:boost::asio::buffered_read_stream::read_some_handler	access:private
handler_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    WriteHandler handler_;$/;"	m	class:boost::asio::buffered_write_stream::flush_handler	access:private
handler_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    WriteHandler handler_;$/;"	m	class:boost::asio::buffered_write_stream::write_some_handler	access:private
handler_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::binder1	access:public
handler_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::binder2	access:public
handler_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::binder3	access:public
handler_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::binder4	access:public
handler_	/usr/include/boost/asio/detail/bind_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::binder5	access:public
handler_	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_type& handler_;$/;"	m	class:boost::asio::detail::handler_ptr	access:private
handler_	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_type& handler_;$/;"	m	class:boost::asio::detail::raw_handler_ptr	access:private
handler_	/usr/include/boost/asio/detail/handler_base_from_member.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::handler_base_from_member	access:public
handler_	/usr/include/boost/asio/detail/handler_queue.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::detail::handler_queue::handler_wrapper	access:private
handler_	/usr/include/boost/asio/detail/handler_queue.hpp	/^    handler* handler_;$/;"	m	class:boost::asio::detail::handler_queue::scoped_ptr	access:private
handler_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::detail::indirect_handler_queue::handler_wrapper	access:private
handler_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    handler* handler_;$/;"	m	class:boost::asio::detail::indirect_handler_queue::node	access:private
handler_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    handler* handler_;$/;"	m	class:boost::asio::detail::indirect_handler_queue::scoped_ptr	access:private
handler_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::detail::resolver_service::resolve_endpoint_handler	access:private
handler_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::detail::resolver_service::resolve_query_handler	access:private
handler_	/usr/include/boost/asio/detail/select_reactor.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::detail::select_reactor::connect_handler_wrapper	access:private
handler_	/usr/include/boost/asio/detail/strand_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::detail::strand_service::handler_wrapper	access:private
handler_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::detail::timer_queue::timer	access:private
handler_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::read_operation	access:private
handler_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::write_operation	access:private
handler_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    Handler handler_;$/;"	m	struct:boost::asio::detail::win_iocp_io_service::handler_operation	access:private
handler_	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^    Handler handler_;$/;"	m	struct:boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation	access:private
handler_	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::rewrapped_handler	access:public
handler_	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  Handler handler_;$/;"	m	class:boost::asio::detail::wrapped_handler	access:public
handler_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  int_handler_func handler_;$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
handler_	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::ssl::detail::openssl_stream_service::handshake_handler	access:private
handler_	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::ssl::detail::openssl_stream_service::io_handler	access:private
handler_	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    Handler handler_;$/;"	m	class:boost::asio::ssl::detail::openssl_stream_service::shutdown_handler	access:private
handler_alloc_traits	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^struct handler_alloc_traits$/;"	s	namespace:boost::asio::detail
handler_base	/usr/include/boost/asio/detail/strand_service.hpp	/^    handler_base(invoke_func_type invoke_func, destroy_func_type destroy_func)$/;"	f	class:boost::asio::detail::strand_service::handler_base	access:public	signature:(invoke_func_type invoke_func, destroy_func_type destroy_func)
handler_base	/usr/include/boost/asio/detail/strand_service.hpp	/^  class handler_base$/;"	c	class:boost::asio::detail::strand_service	access:public
handler_base_from_member	/usr/include/boost/asio/detail/handler_base_from_member.hpp	/^  handler_base_from_member(Handler handler)$/;"	f	class:boost::asio::detail::handler_base_from_member	access:public	signature:(Handler handler)
handler_base_from_member	/usr/include/boost/asio/detail/handler_base_from_member.hpp	/^class handler_base_from_member$/;"	c	namespace:boost::asio::detail
handler_cleanup	/usr/include/boost/asio/detail/task_io_service.hpp	/^    handler_cleanup(boost::asio::detail::mutex::scoped_lock& lock,$/;"	f	class:boost::asio::detail::task_io_service::handler_cleanup	access:public	signature:(boost::asio::detail::mutex::scoped_lock& lock, task_io_service& task_io_svc)
handler_cleanup	/usr/include/boost/asio/detail/task_io_service.hpp	/^  class handler_cleanup$/;"	c	class:boost::asio::detail::task_io_service	access:private
handler_cleanup	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^    handler_cleanup(task_io_service& task_io_svc)$/;"	f	class:boost::asio::detail::task_io_service::handler_cleanup	access:public	signature:(task_io_service& task_io_svc)
handler_cleanup	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  class handler_cleanup$/;"	c	class:boost::asio::detail::task_io_service	access:private
handler_impl	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    void handler_impl(const boost::system::error_code& error, size_t size)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::io_handler	access:private	signature:(const boost::system::error_code& error, size_t size)
handler_impl	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    void handler_impl(const boost::system::error_code& error, size_t)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::handshake_handler	access:private	signature:(const boost::system::error_code& error, size_t)
handler_impl	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    void handler_impl(const boost::system::error_code& error, size_t)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::shutdown_handler	access:private	signature:(const boost::system::error_code& error, size_t)
handler_operation	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    handler_operation(const handler_operation&);$/;"	p	struct:boost::asio::detail::win_iocp_io_service::handler_operation	access:private	signature:(const handler_operation&)
handler_operation	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    handler_operation(win_iocp_io_service& io_service,$/;"	f	struct:boost::asio::detail::win_iocp_io_service::handler_operation	access:public	signature:(win_iocp_io_service& io_service, Handler handler)
handler_operation	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  struct handler_operation$/;"	s	class:boost::asio::detail::win_iocp_io_service	inherits:operation	access:private
handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_ptr(handler_type& handler, pointer_type pointer)$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:(handler_type& handler, pointer_type pointer)
handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_ptr(raw_ptr_type& raw_ptr)$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:(raw_ptr_type& raw_ptr)
handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_ptr(raw_ptr_type& raw_ptr, Arg1& a1)$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:(raw_ptr_type& raw_ptr, Arg1& a1)
handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_ptr(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2)$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2)
handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_ptr(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3)$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3)
handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_ptr(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3, Arg4& a4)$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3, Arg4& a4)
handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_ptr(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3, Arg4& a4,$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3, Arg4& a4, Arg5& a5)
handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_ptr(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3, Arg4& a4,$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3, Arg4& a4, Arg5& a5, Arg6& a6)
handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_ptr(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3, Arg4& a4,$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3, Arg4& a4, Arg5& a5, Arg6& a6, Arg7& a7)
handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  handler_ptr(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3, Arg4& a4,$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:(raw_ptr_type& raw_ptr, Arg1& a1, Arg2& a2, Arg3& a3, Arg4& a4, Arg5& a5, Arg6& a6, Arg7& a7, Arg8& a8)
handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^class handler_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
handler_queue	/usr/include/boost/asio/detail/handler_queue.hpp	/^  handler_queue()$/;"	f	class:boost::asio::detail::handler_queue	access:public	signature:()
handler_queue	/usr/include/boost/asio/detail/handler_queue.hpp	/^class handler_queue$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
handler_queue	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  typedef indirect_handler_queue handler_queue;$/;"	t	class:boost::asio::detail::task_io_service	access:public
handler_queue_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  handler_queue handler_queue_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
handler_queue_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  handler_queue handler_queue_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
handler_storage_	/usr/include/boost/asio/detail/strand_service.hpp	/^    boost::aligned_storage<128> handler_storage_;$/;"	m	class:boost::asio::detail::strand_service::strand_impl	access:private
handler_storage_	/usr/include/boost/asio/detail/strand_service.hpp	/^    handler_storage_type handler_storage_;$/;"	m	class:boost::asio::detail::strand_service::strand_impl	access:private
handler_storage_type	/usr/include/boost/asio/detail/strand_service.hpp	/^    typedef boost::aligned_storage<128> handler_storage_type;$/;"	t	class:boost::asio::detail::strand_service::strand_impl	access:private
handler_type	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  typedef Handler handler_type;$/;"	t	struct:boost::asio::detail::handler_alloc_traits	access:public
handler_type	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  typedef typename Alloc_Traits::handler_type handler_type;$/;"	t	class:boost::asio::detail::handler_ptr	access:public
handler_type	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  typedef typename Alloc_Traits::handler_type handler_type;$/;"	t	class:boost::asio::detail::raw_handler_ptr	access:public
handler_wrapper	/usr/include/boost/asio/detail/handler_queue.hpp	/^    handler_wrapper(Handler h)$/;"	f	class:boost::asio::detail::handler_queue::handler_wrapper	access:public	signature:(Handler h)
handler_wrapper	/usr/include/boost/asio/detail/handler_queue.hpp	/^  class handler_wrapper$/;"	c	class:boost::asio::detail::handler_queue	inherits:handler	access:private
handler_wrapper	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    handler_wrapper(Handler h)$/;"	f	class:boost::asio::detail::indirect_handler_queue::handler_wrapper	access:public	signature:(Handler h)
handler_wrapper	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  class handler_wrapper$/;"	c	class:boost::asio::detail::indirect_handler_queue	inherits:handler	access:private
handler_wrapper	/usr/include/boost/asio/detail/strand_service.hpp	/^    handler_wrapper(Handler handler)$/;"	f	class:boost::asio::detail::strand_service::handler_wrapper	access:public	signature:(Handler handler)
handler_wrapper	/usr/include/boost/asio/detail/strand_service.hpp	/^  class handler_wrapper$/;"	c	class:boost::asio::detail::strand_service	inherits:handler_base	access:public
handle_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    native_type handle_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::implementation_type	access:private
handle_service_	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  win_iocp_handle_service& handle_service_;$/;"	m	class:boost::asio::detail::win_iocp_serial_port_service	access:private
handshake	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  boost::system::error_code handshake(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, stream_base::handshake_type type, boost::system::error_code& ec)
handshake	/usr/include/boost/asio/ssl/stream.hpp	/^  boost::system::error_code handshake(handshake_type type,$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(handshake_type type, boost::system::error_code& ec)
handshake	/usr/include/boost/asio/ssl/stream.hpp	/^  void handshake(handshake_type type)$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(handshake_type type)
handshake	/usr/include/boost/asio/ssl/stream_service.hpp	/^  boost::system::error_code handshake(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, stream_base::handshake_type type, boost::system::error_code& ec)
handshake_handler	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    handshake_handler(Handler handler, boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::handshake_handler	access:public	signature:(Handler handler, boost::asio::io_service& io_service)
handshake_handler	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  class handshake_handler$/;"	c	class:boost::asio::ssl::detail::openssl_stream_service	inherits:base_handler	access:private
handshake_type	/usr/include/boost/asio/ssl/stream_base.hpp	/^  enum handshake_type$/;"	g	class:boost::asio::ssl::stream_base	access:public
hardware	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, software, hardware };$/;"	e	enum:boost::asio::serial_port_base::flow_control::type
hash_map	/usr/include/boost/asio/detail/hash_map.hpp	/^  hash_map()$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:()
hash_map	/usr/include/boost/asio/detail/hash_map.hpp	/^class hash_map$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
hash_size	/usr/include/boost/asio/detail/hash_map.hpp	/^  static std::size_t hash_size(std::size_t num_elems)$/;"	f	class:boost::asio::detail::hash_map	access:private	signature:(std::size_t num_elems)
has_data	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  bool has_data() { return (data_start_ < data_end_); }$/;"	f	class:boost::asio::ssl::detail::net_buffer	access:public	signature:()
has_operation	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  bool has_operation(Descriptor descriptor) const$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor descriptor) const
has_result_type	/usr/include/boost/asio/read_until.hpp	/^  struct has_result_type$/;"	s	namespace:boost::asio::detail
has_service	/usr/include/boost/asio/detail/service_registry.hpp	/^  bool has_service() const$/;"	f	class:boost::asio::detail::service_registry	access:public	signature:() const
has_service	/usr/include/boost/asio/io_service.hpp	/^  friend bool has_service(io_service& ios);$/;"	p	class:boost::asio::io_service	access:friend	signature:(io_service& ios)
has_service	/usr/include/boost/asio/io_service.hpp	/^template <typename Service> bool has_service(io_service& ios);$/;"	p	namespace:boost::asio	signature:(io_service& ios)
have_remote_endpoint	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    bool have_remote_endpoint() const$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_type	access:public	signature:() const
have_remote_endpoint_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    bool have_remote_endpoint_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::native_type	access:private
heap_	/usr/include/boost/asio/detail/timer_queue.hpp	/^  std::vector<timer_base*> heap_;$/;"	m	class:boost::asio::detail::timer_queue	access:private
heap_index_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    size_t heap_index_;$/;"	m	class:boost::asio::detail::timer_queue::timer_base	access:private
helper	/usr/include/boost/asio/buffers_iterator.hpp	/^    typedef buffers_iterator_types_helper<is_mutable> helper;$/;"	t	struct:boost::asio::detail::buffers_iterator_types	access:public
helper	/usr/include/boost/asio/read_until.hpp	/^        static big helper(U, ...);$/;"	p	struct:boost::asio::detail::has_result_type::inner	access:public	signature:(U, ...)
helper	/usr/include/boost/asio/read_until.hpp	/^        static char helper(U, typename U::result_type* = 0);$/;"	p	struct:boost::asio::detail::has_result_type::inner	access:public	signature:(U, typename U::result_type* = 0)
hints	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  const boost::asio::detail::addrinfo_type& hints() const$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:() const
hints_	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  boost::asio::detail::addrinfo_type hints_;$/;"	m	class:boost::asio::ip::basic_resolver_query	access:private
hops	/usr/include/boost/asio/ip/multicast.hpp	/^  IPPROTO_IP, IP_MULTICAST_TTL, IPPROTO_IPV6, IPV6_MULTICAST_HOPS> hops;$/;"	t	namespace:boost::asio::ip::multicast
hops	/usr/include/boost/asio/ip/multicast.hpp	/^typedef implementation_defined hops;$/;"	t	namespace:boost::asio::ip::multicast
hops	/usr/include/boost/asio/ip/unicast.hpp	/^typedef implementation_defined hops;$/;"	t	namespace:boost::asio::ip::unicast
host	/usr/include/boost/asio/detail/socket_ops.hpp	/^  const char* host;$/;"	m	struct:boost::asio::detail::socket_ops::gai_search	access:public
host_name	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  std::string host_name() const$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:() const
host_name	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  std::string host_name() const$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:() const
host_name	/usr/include/boost/asio/ip/host_name.hpp	/^inline std::string host_name()$/;"	f	namespace:boost::asio::ip	signature:()
host_name	/usr/include/boost/asio/ip/host_name.hpp	/^inline std::string host_name(boost::system::error_code& ec)$/;"	f	namespace:boost::asio::ip	signature:(boost::system::error_code& ec)
host_name	/usr/include/boost/asio/ip/host_name.hpp	/^std::string host_name();$/;"	p	namespace:boost::asio::ip	signature:()
host_name	/usr/include/boost/asio/ip/host_name.hpp	/^std::string host_name(boost::system::error_code& ec);$/;"	p	namespace:boost::asio::ip	signature:(boost::system::error_code& ec)
host_name_	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  std::string host_name_;$/;"	m	class:boost::asio::ip::basic_resolver_entry	access:private
host_name_	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  std::string host_name_;$/;"	m	class:boost::asio::ip::basic_resolver_query	access:private
host_not_found	/usr/include/boost/asio/error.hpp	/^  host_not_found = BOOST_ASIO_NETDB_ERROR(HOST_NOT_FOUND),$/;"	e	enum:boost::asio::error::netdb_errors
host_not_found_try_again	/usr/include/boost/asio/error.hpp	/^  host_not_found_try_again = BOOST_ASIO_NETDB_ERROR(TRY_AGAIN),$/;"	e	enum:boost::asio::error::netdb_errors
host_to_network_long	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline u_long_type host_to_network_long(u_long_type value)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(u_long_type value)
host_to_network_short	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline u_short_type host_to_network_short(u_short_type value)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(u_short_type value)
host_unreachable	/usr/include/boost/asio/error.hpp	/^  host_unreachable = BOOST_ASIO_SOCKET_ERROR(EHOSTUNREACH),$/;"	e	enum:boost::asio::error::basic_errors
icmp	/usr/include/boost/asio/ip/icmp.hpp	/^  explicit icmp(int protocol, int family)$/;"	f	class:boost::asio::ip::icmp	access:private	signature:(int protocol, int family)
icmp	/usr/include/boost/asio/ip/icmp.hpp	/^class icmp$/;"	c	namespace:boost::asio::ip
id	/usr/include/boost/asio/datagram_socket_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::datagram_socket_service	access:public
id	/usr/include/boost/asio/deadline_timer_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::deadline_timer_service	access:public
id	/usr/include/boost/asio/detail/service_base.hpp	/^  static boost::asio::detail::service_id<Type> id;$/;"	m	class:boost::asio::detail::service_base	access:public
id	/usr/include/boost/asio/detail/service_base.hpp	/^boost::asio::detail::service_id<Type> service_base<Type>::id;$/;"	m	class:boost::asio::detail::service_base
id	/usr/include/boost/asio/io_service.hpp	/^  id() {}$/;"	f	class:boost::asio::io_service::id	access:public	signature:()
id	/usr/include/boost/asio/io_service.hpp	/^class io_service::id$/;"	c	class:boost::asio::io_service	inherits:noncopyable
id	/usr/include/boost/asio/ip/resolver_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::ip::resolver_service	access:public
id	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::posix::stream_descriptor_service	access:public
id	/usr/include/boost/asio/raw_socket_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::raw_socket_service	access:public
id	/usr/include/boost/asio/serial_port_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::serial_port_service	access:public
id	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::socket_acceptor_service	access:public
id	/usr/include/boost/asio/ssl/context_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::ssl::context_service	access:public
id	/usr/include/boost/asio/ssl/stream_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::ssl::stream_service	access:public
id	/usr/include/boost/asio/stream_socket_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::stream_socket_service	access:public
id	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::windows::random_access_handle_service	access:public
id	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  static boost::asio::io_service::id id;$/;"	m	class:boost::asio::windows::stream_handle_service	access:public
idle_thread_info	/usr/include/boost/asio/detail/task_io_service.hpp	/^  struct idle_thread_info$/;"	s	class:boost::asio::detail::task_io_service	access:private
idle_thread_info	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  struct idle_thread_info$/;"	s	class:boost::asio::detail::task_io_service	access:private
id_	/usr/include/boost/asio/io_service.hpp	/^  const boost::asio::io_service::id* id_;$/;"	m	class:boost::asio::io_service::service	access:private
if_indextoname	/usr/include/boost/asio/detail/socket_ops.hpp	/^extern "C" char* if_indextoname(unsigned int, char*);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(unsigned int, char*)
if_nametoindex	/usr/include/boost/asio/detail/socket_ops.hpp	/^extern "C" unsigned int if_nametoindex(const char*);$/;"	p	namespace:boost::asio::detail::socket_ops	signature:(const char*)
impl	/usr/include/boost/asio/ssl/basic_context.hpp	/^  impl_type impl()$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:()
impl	/usr/include/boost/asio/ssl/stream.hpp	/^  impl_type impl()$/;"	f	class:boost::asio::ssl::stream	access:public	signature:()
implementation	/usr/include/boost/asio/basic_io_object.hpp	/^  implementation_type implementation;$/;"	m	class:boost::asio::basic_io_object	access:protected
implementations_	/usr/include/boost/asio/detail/strand_service.hpp	/^  boost::scoped_ptr<strand_impl> implementations_[num_implementations];$/;"	m	class:boost::asio::detail::strand_service	access:private
implementation_type	/usr/include/boost/asio/basic_io_object.hpp	/^  typedef typename service_type::implementation_type implementation_type;$/;"	t	class:boost::asio::basic_io_object	access:public
implementation_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
implementation_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
implementation_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::deadline_timer_service	access:public
implementation_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::deadline_timer_service	access:public
implementation_type	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  struct implementation_type$/;"	s	class:boost::asio::detail::deadline_timer_service	inherits:boost::asio::detail::noncopyable	access:public
implementation_type	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    implementation_type()$/;"	f	class:boost::asio::detail::reactive_descriptor_service::implementation_type	access:public	signature:()
implementation_type	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  class implementation_type$/;"	c	class:boost::asio::detail::reactive_descriptor_service	inherits:boost::asio::detail::noncopyable	access:public
implementation_type	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^    implementation_type;$/;"	t	class:boost::asio::detail::reactive_serial_port_service	access:public
implementation_type	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    implementation_type()$/;"	f	class:boost::asio::detail::reactive_socket_service::implementation_type	access:public	signature:()
implementation_type	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  class implementation_type$/;"	c	class:boost::asio::detail::reactive_socket_service	inherits:boost::asio::detail::noncopyable	access:public
implementation_type	/usr/include/boost/asio/detail/resolver_service.hpp	/^  typedef boost::shared_ptr<void> implementation_type;$/;"	t	class:boost::asio::detail::resolver_service	access:public
implementation_type	/usr/include/boost/asio/detail/strand_service.hpp	/^  typedef strand_impl* implementation_type;$/;"	t	class:boost::asio::detail::strand_service	access:public
implementation_type	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    implementation_type()$/;"	f	class:boost::asio::detail::win_iocp_handle_service::implementation_type	access:public	signature:()
implementation_type	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  class implementation_type$/;"	c	class:boost::asio::detail::win_iocp_handle_service	access:public
implementation_type	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  typedef win_iocp_handle_service::implementation_type implementation_type;$/;"	t	class:boost::asio::detail::win_iocp_serial_port_service	access:public
implementation_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    implementation_type()$/;"	f	class:boost::asio::detail::win_iocp_socket_service::implementation_type	access:public	signature:()
implementation_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  class implementation_type$/;"	c	class:boost::asio::detail::win_iocp_socket_service	access:public
implementation_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
implementation_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
implementation_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:public
implementation_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:public
implementation_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
implementation_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
implementation_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::serial_port_service	access:public
implementation_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::serial_port_service	access:public
implementation_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
implementation_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
implementation_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
implementation_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef typename service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
implementation_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:public
implementation_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:public
implementation_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef implementation_defined implementation_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:public
implementation_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef service_impl_type::implementation_type implementation_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:public
impl_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    boost::weak_ptr<void> impl_;$/;"	m	class:boost::asio::detail::resolver_service::resolve_endpoint_handler	access:private
impl_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    boost::weak_ptr<void> impl_;$/;"	m	class:boost::asio::detail::resolver_service::resolve_query_handler	access:private
impl_	/usr/include/boost/asio/detail/strand_service.hpp	/^    implementation_type impl_;$/;"	m	class:boost::asio::detail::strand_service::invoke_current_handler	access:private
impl_	/usr/include/boost/asio/detail/strand_service.hpp	/^    implementation_type& impl_;$/;"	m	class:boost::asio::detail::strand_service::post_next_waiter_on_exit	access:private
impl_	/usr/include/boost/asio/io_service.hpp	/^  impl_type& impl_;$/;"	m	class:boost::asio::io_service	access:private
impl_	/usr/include/boost/asio/ssl/basic_context.hpp	/^  impl_type impl_;$/;"	m	class:boost::asio::ssl::basic_context	access:private
impl_	/usr/include/boost/asio/ssl/stream.hpp	/^  impl_type impl_;$/;"	m	class:boost::asio::ssl::stream	access:private
impl_	/usr/include/boost/asio/strand.hpp	/^  boost::asio::detail::strand_service::implementation_type impl_;$/;"	m	class:boost::asio::io_service::strand	access:private
impl_	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  detail::win_iocp_overlapped_ptr impl_;$/;"	m	class:boost::asio::windows::overlapped_ptr	access:private
impl_list_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  implementation_type* impl_list_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service	access:private
impl_struct	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  typedef struct impl_struct$/;"	s	class:boost::asio::ssl::detail::openssl_stream_service	access:public
impl_type	/usr/include/boost/asio/io_service.hpp	/^  typedef detail::win_iocp_io_service impl_type;$/;"	t	class:boost::asio::io_service	access:private
impl_type	/usr/include/boost/asio/ssl/basic_context.hpp	/^  typedef typename service_type::impl_type impl_type;$/;"	t	class:boost::asio::ssl::basic_context	access:public
impl_type	/usr/include/boost/asio/ssl/context_service.hpp	/^  typedef implementation_defined impl_type;$/;"	t	class:boost::asio::ssl::context_service	access:public
impl_type	/usr/include/boost/asio/ssl/context_service.hpp	/^  typedef service_impl_type::impl_type impl_type;$/;"	t	class:boost::asio::ssl::context_service	access:public
impl_type	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  typedef ::SSL_CTX* impl_type;$/;"	t	class:boost::asio::ssl::detail::openssl_context_service	access:public
impl_type	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  } * impl_type;$/;"	t	class:boost::asio::ssl::detail::openssl_stream_service	typeref:struct:boost::asio::ssl::detail::openssl_stream_service::impl_struct	access:public
impl_type	/usr/include/boost/asio/ssl/stream.hpp	/^  typedef typename service_type::impl_type impl_type;$/;"	t	class:boost::asio::ssl::stream	access:public
impl_type	/usr/include/boost/asio/ssl/stream_service.hpp	/^  typedef implementation_defined impl_type;$/;"	t	class:boost::asio::ssl::stream_service	access:public
impl_type	/usr/include/boost/asio/ssl/stream_service.hpp	/^  typedef service_impl_type::impl_type impl_type;$/;"	t	class:boost::asio::ssl::stream_service	access:public
in4_addr_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef in_addr in4_addr_type;$/;"	t	namespace:boost::asio::detail
in4_mreq_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef ip_mreq in4_mreq_type;$/;"	t	namespace:boost::asio::detail
IN6ADDR_ANY_INIT	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	91;"	d
IN6ADDR_LOOPBACK_INIT	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	95;"	d
in6_addr_emulation	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^struct in6_addr_emulation$/;"	s	namespace:boost::asio::detail
in6_addr_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef in6_addr in6_addr_type;$/;"	t	namespace:boost::asio::detail
in6_addr_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef in6_addr_emulation in6_addr_type;$/;"	t	namespace:boost::asio::detail
IN6_IS_ADDR_LINKLOCAL	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_LINKLOCAL(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
IN6_IS_ADDR_LOOPBACK	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_LOOPBACK(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
IN6_IS_ADDR_MC_GLOBAL	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_MC_GLOBAL(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
IN6_IS_ADDR_MC_LINKLOCAL	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_MC_LINKLOCAL(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
IN6_IS_ADDR_MC_NODELOCAL	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_MC_NODELOCAL(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
IN6_IS_ADDR_MC_ORGLOCAL	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_MC_ORGLOCAL(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
IN6_IS_ADDR_MC_SITELOCAL	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_MC_SITELOCAL(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
IN6_IS_ADDR_MULTICAST	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_MULTICAST(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
IN6_IS_ADDR_SITELOCAL	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_SITELOCAL(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
IN6_IS_ADDR_UNSPECIFIED	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_UNSPECIFIED(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
IN6_IS_ADDR_V4COMPAT	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_V4COMPAT(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
IN6_IS_ADDR_V4MAPPED	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^inline int IN6_IS_ADDR_V4MAPPED(const in6_addr_emulation* a)$/;"	f	namespace:boost::asio::detail	signature:(const in6_addr_emulation* a)
in6_mreq_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef ipv6_mreq in6_mreq_type;$/;"	t	namespace:boost::asio::detail
in6_mreq_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef ipv6_mreq_emulation in6_mreq_type;$/;"	t	namespace:boost::asio::detail
increment	/usr/include/boost/asio/buffers_iterator.hpp	/^  void increment()$/;"	f	class:boost::asio::buffers_iterator	access:private	signature:()
increment	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  void increment()$/;"	f	class:boost::asio::detail::const_buffers_iterator	access:private	signature:()
increment	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  void increment()$/;"	f	class:boost::asio::detail::consuming_buffers_iterator	access:private	signature:()
increment	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  void increment()$/;"	f	class:boost::asio::ip::basic_resolver_iterator	access:private	signature:()
indirect_handler_queue	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  indirect_handler_queue()$/;"	f	class:boost::asio::detail::indirect_handler_queue	access:public	signature:()
indirect_handler_queue	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^class indirect_handler_queue$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
inet_ntop	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline const char* inet_ntop(int af, const void* src, char* dest, size_t length,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int af, const void* src, char* dest, size_t length, unsigned long scope_id, boost::system::error_code& ec)
inet_pton	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int inet_pton(int af, const char* src, void* dest,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int af, const char* src, void* dest, unsigned long* scope_id, boost::system::error_code& ec)
init	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void init(size_t \/*concurrency_hint*\/)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(size_t )
init	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void init(size_t \/*concurrency_hint*\/)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(size_t )
init	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void init(size_t concurrency_hint)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(size_t concurrency_hint)
init	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  void init(const char* path, std::size_t path_length)$/;"	f	class:boost::asio::local::basic_endpoint	access:private	signature:(const char* path, std::size_t path_length)
init_	/usr/include/boost/asio/io_service.hpp	/^  detail::signal_init<> init_;$/;"	m	class:boost::asio::io_service	access:private
init_	/usr/include/boost/asio/io_service.hpp	/^  detail::winsock_init<> init_;$/;"	m	class:boost::asio::io_service	access:private
init_	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  openssl_init<> init_;$/;"	m	class:boost::asio::ssl::detail::openssl_context_service	access:private
init_buf	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline void init_buf(buf& b, const void* data, size_t size)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(buf& b, const void* data, size_t size)
init_buf	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline void init_buf(buf& b, void* data, size_t size)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(buf& b, void* data, size_t size)
init_buf	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void init_buf(buf& b, const void* data, size_t size)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(buf& b, const void* data, size_t size)
init_buf	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void init_buf(buf& b, void* data, size_t size)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(buf& b, void* data, size_t size)
init_buffers	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  void init_buffers()$/;"	f	class:boost::asio::basic_socket_streambuf	access:private	signature:()
init_buf_iov_base	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline void init_buf_iov_base(T& base, void* addr)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(T& base, void* addr)
init_buf_iov_base	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline void init_buf_iov_base(void*& base, void* addr)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(void*& base, void* addr)
init_buf_iov_base	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void init_buf_iov_base(T& base, void* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(T& base, void* addr)
init_buf_iov_base	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void init_buf_iov_base(void*& base, void* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(void*& base, void* addr)
init_msghdr_msg_name	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void init_msghdr_msg_name(T& name, const socket_addr_type* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(T& name, const socket_addr_type* addr)
init_msghdr_msg_name	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void init_msghdr_msg_name(T& name, socket_addr_type* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(T& name, socket_addr_type* addr)
init_msghdr_msg_name	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void init_msghdr_msg_name(void*& name, const socket_addr_type* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(void*& name, const socket_addr_type* addr)
init_msghdr_msg_name	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline void init_msghdr_msg_name(void*& name, socket_addr_type* addr)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(void*& name, socket_addr_type* addr)
init_service_id	/usr/include/boost/asio/detail/service_registry.hpp	/^  void init_service_id(boost::asio::io_service::service& service,$/;"	f	class:boost::asio::detail::service_registry	access:private	signature:(boost::asio::io_service::service& service, const boost::asio::detail::service_id<Service>& )
init_service_id	/usr/include/boost/asio/detail/service_registry.hpp	/^  void init_service_id(boost::asio::io_service::service& service,$/;"	f	class:boost::asio::detail::service_registry	access:private	signature:(boost::asio::io_service::service& service, const boost::asio::io_service::id& id)
init_task	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void init_task()$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:()
init_task	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void init_task()$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:()
init_task	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void init_task()$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:()
init_task	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void init_task()$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:()
init_task	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void init_task()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
init_task	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void init_task()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
init_task	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void init_task()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
inner	/usr/include/boost/asio/read_until.hpp	/^    template <typename U> struct inner$/;"	s	struct:boost::asio::detail::has_result_type	access:public
inner_stream_impl_	/usr/include/boost/asio/buffered_stream.hpp	/^  write_stream_type inner_stream_impl_;$/;"	m	class:boost::asio::buffered_stream	access:private
insert	/usr/include/boost/asio/detail/hash_map.hpp	/^  std::pair<iterator, bool> insert(const value_type& v)$/;"	f	class:boost::asio::detail::hash_map	access:public	signature:(const value_type& v)
instance	/usr/include/boost/asio/detail/winsock_init.hpp	/^    static boost::shared_ptr<do_init> instance()$/;"	f	struct:boost::asio::detail::winsock_init::do_init	access:public	signature:()
instance	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^    static boost::shared_ptr<do_init> instance()$/;"	f	class:boost::asio::ssl::detail::openssl_init::do_init	access:public	signature:()
instance_	/usr/include/boost/asio/detail/winsock_init.hpp	/^  static winsock_init instance_;$/;"	m	class:boost::asio::detail::winsock_init	access:private
instance_	/usr/include/boost/asio/detail/winsock_init.hpp	/^winsock_init<Major, Minor> winsock_init<Major, Minor>::instance_;$/;"	m	class:boost::asio::detail::winsock_init
instance_	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^  static openssl_init instance_;$/;"	m	class:boost::asio::ssl::detail::openssl_init	access:private
instance_	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^openssl_init<Do_Init> openssl_init<Do_Init>::instance_;$/;"	m	class:boost::asio::ssl::detail::openssl_init
integer	/usr/include/boost/asio/detail/socket_option.hpp	/^  explicit integer(int v)$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(int v)
integer	/usr/include/boost/asio/detail/socket_option.hpp	/^  integer()$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:()
integer	/usr/include/boost/asio/detail/socket_option.hpp	/^class integer$/;"	c	namespace:boost::asio::detail::socket_option
internal_non_blocking	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^      internal_non_blocking = 2  \/\/ The descriptor has been set non-blocking.$/;"	e	enum:boost::asio::detail::reactive_descriptor_service::implementation_type::__anon11
internal_non_blocking	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^      internal_non_blocking = 2,$/;"	e	enum:boost::asio::detail::reactive_socket_service::implementation_type::__anon15
interrupt	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void interrupt()$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:private	signature:()
interrupt	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void interrupt()$/;"	f	class:boost::asio::detail::epoll_reactor	access:private	signature:()
interrupt	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  void interrupt()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:()
interrupt	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void interrupt()$/;"	f	class:boost::asio::detail::kqueue_reactor	access:private	signature:()
interrupt	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  void interrupt()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:()
interrupt	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void interrupt()$/;"	f	class:boost::asio::detail::select_reactor	access:private	signature:()
interrupt	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  void interrupt()$/;"	f	class:boost::asio::detail::socket_select_interrupter	access:public	signature:()
interrupted	/usr/include/boost/asio/error.hpp	/^  interrupted = BOOST_ASIO_SOCKET_ERROR(EINTR),$/;"	e	enum:boost::asio::error::basic_errors
interrupter_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  select_interrupter interrupter_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
interrupter_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  select_interrupter interrupter_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
interrupter_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  select_interrupter interrupter_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
interrupter_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  select_interrupter interrupter_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
interrupt_all_idle_threads	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void interrupt_all_idle_threads($/;"	f	class:boost::asio::detail::task_io_service	access:private	signature:( boost::asio::detail::mutex::scoped_lock& lock)
interrupt_all_idle_threads	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void interrupt_all_idle_threads($/;"	f	class:boost::asio::detail::task_io_service	access:private	signature:( boost::asio::detail::mutex::scoped_lock& back_lock)
interrupt_one_idle_thread	/usr/include/boost/asio/detail/task_io_service.hpp	/^  bool interrupt_one_idle_thread($/;"	f	class:boost::asio::detail::task_io_service	access:private	signature:( boost::asio::detail::mutex::scoped_lock& lock)
interrupt_one_idle_thread	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void interrupt_one_idle_thread($/;"	f	class:boost::asio::detail::task_io_service	access:private	signature:( boost::asio::detail::mutex::scoped_lock& back_lock)
int_handler_func	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^    int_handler_func;$/;"	t	class:boost::asio::ssl::detail::openssl_operation	access:private
invalid_argument	/usr/include/boost/asio/error.hpp	/^  invalid_argument = BOOST_ASIO_SOCKET_ERROR(EINVAL),$/;"	e	enum:boost::asio::error::basic_errors
invalid_service_owner	/usr/include/boost/asio/io_service.hpp	/^  invalid_service_owner()$/;"	f	class:boost::asio::invalid_service_owner	access:public	signature:()
invalid_service_owner	/usr/include/boost/asio/io_service.hpp	/^class invalid_service_owner$/;"	c	namespace:boost::asio	inherits:std::logic_error
invalid_socket	/usr/include/boost/asio/detail/socket_types.hpp	/^const SOCKET invalid_socket = INVALID_SOCKET;$/;"	m	namespace:boost::asio::detail
invoke	/usr/include/boost/asio/detail/handler_invoke_helpers.hpp	/^inline void invoke(const Function& function, Context& context)$/;"	f	namespace:boost_asio_handler_invoke_helpers	signature:(const Function& function, Context& context)
invoke	/usr/include/boost/asio/detail/handler_queue.hpp	/^    void invoke()$/;"	f	class:boost::asio::detail::handler_queue::handler	access:public	signature:()
invoke	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    void invoke()$/;"	f	class:boost::asio::detail::indirect_handler_queue::handler	access:public	signature:()
invoke	/usr/include/boost/asio/detail/strand_service.hpp	/^    void invoke(strand_service& service_impl, implementation_type& impl)$/;"	f	class:boost::asio::detail::strand_service::handler_base	access:public	signature:(strand_service& service_impl, implementation_type& impl)
invoke_current_handler	/usr/include/boost/asio/detail/strand_service.hpp	/^    invoke_current_handler(strand_service& service_impl,$/;"	f	class:boost::asio::detail::strand_service::invoke_current_handler	access:public	signature:(strand_service& service_impl, const implementation_type& impl)
invoke_current_handler	/usr/include/boost/asio/detail/strand_service.hpp	/^  class invoke_current_handler$/;"	c	class:boost::asio::detail::strand_service	access:public
invoke_func_	/usr/include/boost/asio/detail/handler_queue.hpp	/^    invoke_func_type invoke_func_;$/;"	m	class:boost::asio::detail::handler_queue::handler	access:private
invoke_func_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    invoke_func_type invoke_func_;$/;"	m	class:boost::asio::detail::indirect_handler_queue::handler	access:private
invoke_func_	/usr/include/boost/asio/detail/strand_service.hpp	/^    invoke_func_type invoke_func_;$/;"	m	class:boost::asio::detail::strand_service::handler_base	access:private
invoke_func_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    invoke_func_type invoke_func_;$/;"	m	class:boost::asio::detail::win_iocp_io_service::operation	access:private
invoke_func_type	/usr/include/boost/asio/detail/handler_queue.hpp	/^    typedef void (*invoke_func_type)(handler*);$/;"	t	class:boost::asio::detail::handler_queue::handler	access:protected
invoke_func_type	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    typedef void (*invoke_func_type)(handler*);$/;"	t	class:boost::asio::detail::indirect_handler_queue::handler	access:protected
invoke_func_type	/usr/include/boost/asio/detail/strand_service.hpp	/^    typedef void (*invoke_func_type)(handler_base*,$/;"	t	class:boost::asio::detail::strand_service::handler_base	access:public
invoke_func_type	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    typedef void (*invoke_func_type)(operation*, DWORD, size_t);$/;"	t	class:boost::asio::detail::win_iocp_io_service::operation	access:public
in_avail	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t in_avail()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
in_avail	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t in_avail(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(boost::system::error_code& ec)
in_avail	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t in_avail()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
in_avail	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t in_avail(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(boost::system::error_code& ec)
in_avail	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t in_avail()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
in_avail	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t in_avail(boost::system::error_code& ec)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(boost::system::error_code& ec)
in_avail	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  std::size_t in_avail(impl_type& \/*impl*\/, Stream& \/*next_layer*\/,$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& , Stream& , boost::system::error_code& ec)
in_avail	/usr/include/boost/asio/ssl/stream.hpp	/^  std::size_t in_avail()$/;"	f	class:boost::asio::ssl::stream	access:public	signature:()
in_avail	/usr/include/boost/asio/ssl/stream.hpp	/^  std::size_t in_avail(boost::system::error_code& ec)$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(boost::system::error_code& ec)
in_avail	/usr/include/boost/asio/ssl/stream_service.hpp	/^  std::size_t in_avail(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, boost::system::error_code& ec)
in_progress	/usr/include/boost/asio/error.hpp	/^  in_progress = BOOST_ASIO_SOCKET_ERROR(EINPROGRESS),$/;"	e	enum:boost::asio::error::basic_errors
iocp_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  } iocp_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	typeref:struct:boost::asio::detail::win_iocp_io_service::iocp_holder	access:private
iocp_holder	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    iocp_holder() : handle(0) {}$/;"	f	struct:boost::asio::detail::win_iocp_io_service::iocp_holder	access:public	signature:()
iocp_holder	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  struct iocp_holder$/;"	s	class:boost::asio::detail::win_iocp_io_service	access:private
iocp_service_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  win_iocp_io_service& iocp_service_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service	access:private
iocp_service_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    win_iocp_io_service& iocp_service_;$/;"	m	class:boost::asio::detail::win_iocp_io_service::operation	access:private
ioctl	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline int ioctl(int d, long cmd, ioctl_arg_type* arg,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, long cmd, ioctl_arg_type* arg, boost::system::error_code& ec)
ioctl	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int ioctl(socket_type s, long cmd, ioctl_arg_type* arg,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, long cmd, ioctl_arg_type* arg, boost::system::error_code& ec)
ioctl_arg_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef unsigned long ioctl_arg_type;$/;"	t	namespace:boost::asio::detail
iostream	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_socket_iostream<tcp> iostream;$/;"	t	class:boost::asio::ip::tcp	access:public
iostream	/usr/include/boost/asio/local/stream_protocol.hpp	/^  typedef basic_socket_iostream<stream_protocol> iostream;$/;"	t	class:boost::asio::local::stream_protocol	access:public
io_control	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code io_control(IoControlCommand& command,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(IoControlCommand& command, boost::system::error_code& ec)
io_control	/usr/include/boost/asio/basic_socket.hpp	/^  void io_control(IoControlCommand& command)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(IoControlCommand& command)
io_control	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
io_control	/usr/include/boost/asio/detail/io_control.hpp	/^namespace io_control {$/;"	n	namespace:boost::asio::detail
io_control	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  boost::system::error_code io_control(IoControlCommand& command,$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(IoControlCommand& command, boost::system::error_code& ec)
io_control	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  void io_control(IoControlCommand& command)$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:(IoControlCommand& command)
io_control	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
io_control	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
io_control	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
io_control	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code io_control(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, IoControlCommand& command, boost::system::error_code& ec)
io_handler	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    io_handler(Handler handler, boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::io_handler	access:public	signature:(Handler handler, boost::asio::io_service& io_service)
io_handler	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  class io_handler $/;"	c	class:boost::asio::ssl::detail::openssl_stream_service	inherits:base_handler	access:private
io_service	/usr/include/boost/asio/basic_io_object.hpp	/^  boost::asio::io_service& io_service()$/;"	f	class:boost::asio::basic_io_object	access:public	signature:()
io_service	/usr/include/boost/asio/buffered_read_stream.hpp	/^  boost::asio::io_service& io_service()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
io_service	/usr/include/boost/asio/buffered_stream.hpp	/^  boost::asio::io_service& io_service()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
io_service	/usr/include/boost/asio/buffered_write_stream.hpp	/^  boost::asio::io_service& io_service()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
io_service	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::io_service& io_service();$/;"	p	class:boost::asio::io_service::service	access:public	signature:()
io_service	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::io_service& io_service();$/;"	p	class:boost::asio::io_service::work	access:public	signature:()
io_service	/usr/include/boost/asio/io_service.hpp	/^  explicit io_service(std::size_t concurrency_hint);$/;"	p	class:boost::asio::io_service	access:public	signature:(std::size_t concurrency_hint)
io_service	/usr/include/boost/asio/io_service.hpp	/^  io_service();$/;"	p	class:boost::asio::io_service	access:public	signature:()
io_service	/usr/include/boost/asio/io_service.hpp	/^class io_service$/;"	c	namespace:boost::asio	inherits:noncopyable
io_service	/usr/include/boost/asio/ssl/stream.hpp	/^  boost::asio::io_service& io_service()$/;"	f	class:boost::asio::ssl::stream	access:public	signature:()
io_service	/usr/include/boost/asio/strand.hpp	/^  boost::asio::io_service& io_service()$/;"	f	class:boost::asio::io_service::strand	access:public	signature:()
io_service_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::buffered_read_stream::fill_handler	access:private
io_service_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::buffered_read_stream::read_some_handler	access:private
io_service_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::buffered_write_stream::flush_handler	access:private
io_service_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::buffered_write_stream::write_some_handler	access:private
io_service_	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::detail::deadline_timer_service::wait_handler	access:private
io_service_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::detail::read_operation	access:private
io_service_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::detail::receive_from_operation	access:private
io_service_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::detail::receive_operation	access:private
io_service_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::detail::send_to_operation	access:private
io_service_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::detail::resolver_service::resolve_endpoint_handler	access:private
io_service_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::detail::resolver_service::resolve_query_handler	access:private
io_service_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::detail::resolver_service::work_io_service_runner	access:private
io_service_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    win_iocp_io_service& io_service_;$/;"	m	struct:boost::asio::detail::win_iocp_io_service::auto_work	access:private
io_service_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    win_iocp_io_service& io_service_;$/;"	m	struct:boost::asio::detail::win_iocp_io_service::handler_operation	access:private
io_service_	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^    win_iocp_io_service& io_service_;$/;"	m	struct:boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation_base	access:public
io_service_	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::io_service::work	access:private
io_service_	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    boost::asio::io_service& io_service_;$/;"	m	class:boost::asio::ssl::detail::openssl_stream_service::base_handler	access:private
ip	/usr/include/boost/asio/ip/address.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/address_v4.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/address_v6.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/basic_resolver.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/host_name.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/icmp.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/multicast.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/resolver_service.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/tcp.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/udp.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/unicast.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
ip	/usr/include/boost/asio/ip/v6_only.hpp	/^namespace ip {$/;"	n	namespace:boost::asio
IPPROTO_ICMPV6	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	335;"	d
IPPROTO_IPV6	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	179;"	d
ipv4	/usr/include/boost/asio/ip/address.hpp	/^  enum { ipv4, ipv6 } type_;$/;"	e	enum:boost::asio::ip::address::__anon26
ipv4_address_	/usr/include/boost/asio/ip/address.hpp	/^  boost::asio::ip::address_v4 ipv4_address_;$/;"	m	class:boost::asio::ip::address	access:private
ipv4_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  boost::asio::detail::in4_addr_type ipv4_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::network_interface	access:private
ipv4_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  boost::asio::detail::in4_mreq_type ipv4_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_request	access:private
ipv4_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  ipv4_value_type ipv4_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:private
ipv4_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  ipv4_value_type ipv4_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_hops	access:private
ipv4_value_type	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  typedef int ipv4_value_type;$/;"	t	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public
ipv4_value_type	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  typedef unsigned char ipv4_value_type;$/;"	t	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public
ipv6	/usr/include/boost/asio/ip/address.hpp	/^  enum { ipv4, ipv6 } type_;$/;"	e	enum:boost::asio::ip::address::__anon26
ipv6mr_interface	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  unsigned int ipv6mr_interface;$/;"	m	struct:boost::asio::detail::ipv6_mreq_emulation	access:public
ipv6mr_multiaddr	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  in6_addr_emulation ipv6mr_multiaddr;$/;"	m	struct:boost::asio::detail::ipv6_mreq_emulation	access:public
ipv6_address_	/usr/include/boost/asio/ip/address.hpp	/^  boost::asio::ip::address_v6 ipv6_address_;$/;"	m	class:boost::asio::ip::address	access:private
IPV6_JOIN_GROUP	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	199;"	d
IPV6_LEAVE_GROUP	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	203;"	d
ipv6_mreq_emulation	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^struct ipv6_mreq_emulation$/;"	s	namespace:boost::asio::detail
IPV6_MULTICAST_HOPS	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	191;"	d
IPV6_MULTICAST_IF	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	187;"	d
IPV6_MULTICAST_LOOP	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	195;"	d
IPV6_UNICAST_HOPS	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	183;"	d
IPV6_V6ONLY	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	330;"	d
ipv6_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  boost::asio::detail::in6_mreq_type ipv6_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_request	access:private
ipv6_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  ipv6_value_type ipv6_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:private
ipv6_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  ipv6_value_type ipv6_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::multicast_hops	access:private
ipv6_value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  unsigned int ipv6_value_;$/;"	m	class:boost::asio::ip::detail::socket_option::network_interface	access:private
ipv6_value_type	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  typedef int ipv6_value_type;$/;"	t	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public
ipv6_value_type	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  typedef unsigned char ipv6_value_type;$/;"	t	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public
is_class_a	/usr/include/boost/asio/ip/address_v4.hpp	/^  bool is_class_a() const$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:() const
is_class_b	/usr/include/boost/asio/ip/address_v4.hpp	/^  bool is_class_b() const$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:() const
is_class_c	/usr/include/boost/asio/ip/address_v4.hpp	/^  bool is_class_c() const$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:() const
is_error_code_enum	/usr/include/boost/asio/error.hpp	/^template<> struct is_error_code_enum<boost::asio::error::addrinfo_errors>$/;"	s	namespace:boost::system
is_error_code_enum	/usr/include/boost/asio/error.hpp	/^template<> struct is_error_code_enum<boost::asio::error::basic_errors>$/;"	s	namespace:boost::system
is_error_code_enum	/usr/include/boost/asio/error.hpp	/^template<> struct is_error_code_enum<boost::asio::error::misc_errors>$/;"	s	namespace:boost::system
is_error_code_enum	/usr/include/boost/asio/error.hpp	/^template<> struct is_error_code_enum<boost::asio::error::netdb_errors>$/;"	s	namespace:boost::system
is_error_code_enum	/usr/include/boost/asio/error.hpp	/^template<> struct is_error_code_enum<boost::asio::error::ssl_errors>$/;"	s	namespace:boost::system
is_link_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_link_local() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
is_loopback	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_loopback() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
is_match_condition	/usr/include/boost/asio/read_until.hpp	/^struct is_match_condition$/;"	s	namespace:boost::asio
is_multicast	/usr/include/boost/asio/ip/address_v4.hpp	/^  bool is_multicast() const$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:() const
is_multicast	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_multicast() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
is_multicast_global	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_multicast_global() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
is_multicast_link_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_multicast_link_local() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
is_multicast_node_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_multicast_node_local() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
is_multicast_org_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_multicast_org_local() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
is_multicast_site_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_multicast_site_local() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
is_mutable	/usr/include/boost/asio/buffers_iterator.hpp	/^      is_mutable = boost::is_convertible<$/;"	e	enum:boost::asio::detail::buffers_iterator_types::__anon4
is_open	/usr/include/boost/asio/basic_serial_port.hpp	/^  bool is_open() const$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:() const
is_open	/usr/include/boost/asio/basic_socket.hpp	/^  bool is_open() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
is_open	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  bool is_open() const$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:() const
is_open	/usr/include/boost/asio/datagram_socket_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	namespace:boost::asio::detail	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  bool is_open() const$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:() const
is_open	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/raw_socket_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/serial_port_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/stream_socket_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/windows/basic_handle.hpp	/^  bool is_open() const$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:() const
is_open	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(const implementation_type& impl) const
is_open	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  bool is_open(const implementation_type& impl) const$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(const implementation_type& impl) const
is_read_buffered	/usr/include/boost/asio/is_read_buffered.hpp	/^class is_read_buffered$/;"	c	namespace:boost::asio
is_read_buffered_big_type	/usr/include/boost/asio/is_read_buffered.hpp	/^struct is_read_buffered_big_type { char data[10]; };$/;"	s	namespace:boost::asio::detail
is_read_buffered_helper	/usr/include/boost/asio/is_read_buffered.hpp	/^char is_read_buffered_helper(buffered_read_stream<Stream>* s);$/;"	p	namespace:boost::asio::detail	signature:(buffered_read_stream<Stream>* s)
is_read_buffered_helper	/usr/include/boost/asio/is_read_buffered.hpp	/^char is_read_buffered_helper(buffered_stream<Stream>* s);$/;"	p	namespace:boost::asio::detail	signature:(buffered_stream<Stream>* s)
is_read_buffered_helper	/usr/include/boost/asio/is_read_buffered.hpp	/^is_read_buffered_big_type is_read_buffered_helper(...);$/;"	p	namespace:boost::asio::detail	signature:(....)
is_set	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  bool is_set(socket_type descriptor) const$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:(socket_type descriptor) const
is_set	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  bool is_set(socket_type descriptor) const$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:(socket_type descriptor) const
is_site_local	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_site_local() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
is_unspecified	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_unspecified() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
is_v4	/usr/include/boost/asio/ip/address.hpp	/^  bool is_v4() const$/;"	f	class:boost::asio::ip::address	access:public	signature:() const
is_v4	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  bool is_v4() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:private	signature:() const
is_v4_compatible	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_v4_compatible() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
is_v4_mapped	/usr/include/boost/asio/ip/address_v6.hpp	/^  bool is_v4_mapped() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
is_v6	/usr/include/boost/asio/ip/address.hpp	/^  bool is_v6() const$/;"	f	class:boost::asio::ip::address	access:public	signature:() const
is_write_buffered	/usr/include/boost/asio/is_write_buffered.hpp	/^class is_write_buffered$/;"	c	namespace:boost::asio
is_write_buffered_big_type	/usr/include/boost/asio/is_write_buffered.hpp	/^struct is_write_buffered_big_type { char data[10]; };$/;"	s	namespace:boost::asio::detail
is_write_buffered_helper	/usr/include/boost/asio/is_write_buffered.hpp	/^char is_write_buffered_helper(buffered_stream<Stream>* s);$/;"	p	namespace:boost::asio::detail	signature:(buffered_stream<Stream>* s)
is_write_buffered_helper	/usr/include/boost/asio/is_write_buffered.hpp	/^char is_write_buffered_helper(buffered_write_stream<Stream>* s);$/;"	p	namespace:boost::asio::detail	signature:(buffered_write_stream<Stream>* s)
is_write_buffered_helper	/usr/include/boost/asio/is_write_buffered.hpp	/^is_write_buffered_big_type is_write_buffered_helper(...);$/;"	p	namespace:boost::asio::detail	signature:(....)
iterator	/usr/include/boost/asio/detail/hash_map.hpp	/^  typedef typename std::list<value_type>::iterator iterator;$/;"	t	class:boost::asio::detail::hash_map	access:public
iterator	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  typedef typename InternetProtocol::resolver_iterator iterator;$/;"	t	class:boost::asio::ip::basic_resolver	access:public
iterator	/usr/include/boost/asio/placeholders.hpp	/^unspecified iterator;$/;"	m	namespace:boost::asio::placeholders
iterator_type	/usr/include/boost/asio/detail/resolver_service.hpp	/^  typedef typename Protocol::resolver_iterator iterator_type;$/;"	t	class:boost::asio::detail::resolver_service	access:public
iterator_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef typename InternetProtocol::resolver_iterator iterator_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
iter_	/usr/include/boost/asio/buffer.hpp	/^  Iterator iter_;$/;"	m	class:boost::asio::detail::buffer_debug_check	access:private
iter_	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  boost::optional<values_iter_type> iter_;$/;"	m	class:boost::asio::ip::basic_resolver_iterator	access:private
join	/usr/include/boost/asio/detail/null_thread.hpp	/^  void join()$/;"	f	class:boost::asio::detail::null_thread	access:public	signature:()
join	/usr/include/boost/asio/detail/posix_thread.hpp	/^  void join()$/;"	f	class:boost::asio::detail::posix_thread	access:public	signature:()
join	/usr/include/boost/asio/detail/wince_thread.hpp	/^  void join()$/;"	f	class:boost::asio::detail::wince_thread	access:public	signature:()
join	/usr/include/boost/asio/detail/win_thread.hpp	/^  void join()$/;"	f	class:boost::asio::detail::win_thread	access:public	signature:()
joined_	/usr/include/boost/asio/detail/posix_thread.hpp	/^  bool joined_;$/;"	m	class:boost::asio::detail::posix_thread	access:private
join_group	/usr/include/boost/asio/ip/multicast.hpp	/^typedef implementation_defined join_group;$/;"	t	namespace:boost::asio::ip::multicast
keep_alive	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_KEEPALIVE> keep_alive;$/;"	t	class:boost::asio::socket_base	access:public
keep_alive	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined keep_alive;$/;"	t	class:boost::asio::socket_base	access:public
kqueue_fd_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  int kqueue_fd_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
kqueue_reactor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  kqueue_reactor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(boost::asio::io_service& io_service)
kqueue_reactor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^class kqueue_reactor$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
last	/usr/include/boost/asio/detail/hash_map.hpp	/^    iterator last;$/;"	m	struct:boost::asio::detail::hash_map::bucket_type	access:public
last_error_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    DWORD last_error_;$/;"	m	class:boost::asio::detail::win_iocp_io_service::operation	access:private
last_waiter_	/usr/include/boost/asio/detail/strand_service.hpp	/^    handler_base* last_waiter_;$/;"	m	class:boost::asio::detail::strand_service::strand_impl	access:private
leave_group	/usr/include/boost/asio/ip/multicast.hpp	/^  IPPROTO_IP, IP_DROP_MEMBERSHIP, IPPROTO_IPV6, IPV6_LEAVE_GROUP> leave_group;$/;"	t	namespace:boost::asio::ip::multicast
leave_group	/usr/include/boost/asio/ip/multicast.hpp	/^typedef implementation_defined leave_group;$/;"	t	namespace:boost::asio::ip::multicast
less_than	/usr/include/boost/asio/time_traits.hpp	/^  static bool less_than(const time_type& t1, const time_type& t2)$/;"	f	struct:boost::asio::time_traits	access:public	signature:(const time_type& t1, const time_type& t2)
level	/usr/include/boost/asio/detail/socket_option.hpp	/^  int level(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&) const
level	/usr/include/boost/asio/detail/socket_option.hpp	/^  int level(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&) const
level	/usr/include/boost/asio/detail/socket_option.hpp	/^  int level(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&) const
level	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol) const
level	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol) const
level	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:(const Protocol& protocol) const
level	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(const Protocol& protocol) const
level	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int level(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol& protocol) const
linger	/usr/include/boost/asio/detail/socket_option.hpp	/^  linger()$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:()
linger	/usr/include/boost/asio/detail/socket_option.hpp	/^  linger(bool e, int t)$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(bool e, int t)
linger	/usr/include/boost/asio/detail/socket_option.hpp	/^class linger$/;"	c	namespace:boost::asio::detail::socket_option
linger	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_LINGER> linger;$/;"	t	class:boost::asio::socket_base	access:public
linger	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined linger;$/;"	t	class:boost::asio::socket_base	access:public
listen	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code listen(int backlog, boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(int backlog, boost::system::error_code& ec)
listen	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void listen(int backlog = socket_base::max_connections)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(int backlog = socket_base::max_connections)
listen	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int listen(socket_type s, int backlog, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, int backlog, boost::system::error_code& ec)
listen	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code listen(implementation_type& impl, int backlog,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, int backlog, boost::system::error_code& ec)
load	/usr/include/boost/asio/serial_port_base.hpp	/^    boost::system::error_code load(const BOOST_ASIO_OPTION_STORAGE& storage,$/;"	p	class:boost::asio::serial_port_base::baud_rate	access:public	signature:(const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
load	/usr/include/boost/asio/serial_port_base.hpp	/^    boost::system::error_code load(const BOOST_ASIO_OPTION_STORAGE& storage,$/;"	p	class:boost::asio::serial_port_base::character_size	access:public	signature:(const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
load	/usr/include/boost/asio/serial_port_base.hpp	/^    boost::system::error_code load(const BOOST_ASIO_OPTION_STORAGE& storage,$/;"	p	class:boost::asio::serial_port_base::flow_control	access:public	signature:(const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
load	/usr/include/boost/asio/serial_port_base.hpp	/^    boost::system::error_code load(const BOOST_ASIO_OPTION_STORAGE& storage,$/;"	p	class:boost::asio::serial_port_base::parity	access:public	signature:(const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
load	/usr/include/boost/asio/serial_port_base.hpp	/^    boost::system::error_code load(const BOOST_ASIO_OPTION_STORAGE& storage,$/;"	p	class:boost::asio::serial_port_base::stop_bits	access:public	signature:(const BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec)
load_verify_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  boost::system::error_code load_verify_file(const std::string& filename,$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& filename, boost::system::error_code& ec)
load_verify_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  void load_verify_file(const std::string& filename)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& filename)
load_verify_file	/usr/include/boost/asio/ssl/context_service.hpp	/^  boost::system::error_code load_verify_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
load_verify_file	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  boost::system::error_code load_verify_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
local	/usr/include/boost/asio/local/basic_endpoint.hpp	/^    boost::asio::detail::sockaddr_un_type local;$/;"	m	union:boost::asio::local::basic_endpoint::data_union	access:public
local	/usr/include/boost/asio/local/basic_endpoint.hpp	/^namespace local {$/;"	n	namespace:boost::asio
local	/usr/include/boost/asio/local/connect_pair.hpp	/^namespace local {$/;"	n	namespace:boost::asio
local	/usr/include/boost/asio/local/datagram_protocol.hpp	/^namespace local {$/;"	n	namespace:boost::asio
local	/usr/include/boost/asio/local/stream_protocol.hpp	/^namespace local {$/;"	n	namespace:boost::asio
local_endpoint	/usr/include/boost/asio/basic_socket.hpp	/^  endpoint_type local_endpoint() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
local_endpoint	/usr/include/boost/asio/basic_socket.hpp	/^  endpoint_type local_endpoint(boost::system::error_code& ec) const$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec) const
local_endpoint	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  endpoint_type local_endpoint() const$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:() const
local_endpoint	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  endpoint_type local_endpoint(boost::system::error_code& ec) const$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(boost::system::error_code& ec) const
local_endpoint	/usr/include/boost/asio/datagram_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
local_endpoint	/usr/include/boost/asio/raw_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
local_endpoint	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
local_endpoint	/usr/include/boost/asio/stream_socket_service.hpp	/^  endpoint_type local_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
local_free_on_block_exit	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^  explicit local_free_on_block_exit(void* p)$/;"	f	class:boost::asio::detail::local_free_on_block_exit	access:public	signature:(void* p)
local_free_on_block_exit	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^class local_free_on_block_exit$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
lock	/usr/include/boost/asio/detail/null_mutex.hpp	/^  void lock()$/;"	f	class:boost::asio::detail::null_mutex	access:public	signature:()
lock	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  void lock()$/;"	f	class:boost::asio::detail::posix_mutex	access:public	signature:()
lock	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  void lock()$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:()
lock	/usr/include/boost/asio/detail/win_mutex.hpp	/^  void lock()$/;"	f	class:boost::asio::detail::win_mutex	access:public	signature:()
locked	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  bool locked() const$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:() const
locked_	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  bool locked_;$/;"	m	class:boost::asio::detail::scoped_lock	access:private
lock_	/usr/include/boost/asio/detail/task_io_service.hpp	/^    boost::asio::detail::mutex::scoped_lock& lock_;$/;"	m	class:boost::asio::detail::task_io_service::handler_cleanup	access:private
lock_	/usr/include/boost/asio/detail/task_io_service.hpp	/^    boost::asio::detail::mutex::scoped_lock& lock_;$/;"	m	class:boost::asio::detail::task_io_service::task_cleanup	access:private
loopback	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 loopback()$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:()
loopback	/usr/include/boost/asio/ip/address_v6.hpp	/^  static address_v6 loopback()$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:()
lowest_layer	/usr/include/boost/asio/basic_serial_port.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:() const
lowest_layer	/usr/include/boost/asio/basic_serial_port.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
lowest_layer	/usr/include/boost/asio/basic_socket.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
lowest_layer	/usr/include/boost/asio/basic_socket.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::basic_socket	access:public	signature:()
lowest_layer	/usr/include/boost/asio/buffered_read_stream.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:() const
lowest_layer	/usr/include/boost/asio/buffered_read_stream.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
lowest_layer	/usr/include/boost/asio/buffered_stream.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::buffered_stream	access:public	signature:() const
lowest_layer	/usr/include/boost/asio/buffered_stream.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
lowest_layer	/usr/include/boost/asio/buffered_write_stream.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:() const
lowest_layer	/usr/include/boost/asio/buffered_write_stream.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
lowest_layer	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:() const
lowest_layer	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:()
lowest_layer	/usr/include/boost/asio/ssl/stream.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::ssl::stream	access:public	signature:() const
lowest_layer	/usr/include/boost/asio/ssl/stream.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::ssl::stream	access:public	signature:()
lowest_layer	/usr/include/boost/asio/windows/basic_handle.hpp	/^  const lowest_layer_type& lowest_layer() const$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:() const
lowest_layer	/usr/include/boost/asio/windows/basic_handle.hpp	/^  lowest_layer_type& lowest_layer()$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:()
lowest_layer_type	/usr/include/boost/asio/basic_serial_port.hpp	/^  typedef basic_serial_port<SerialPortService> lowest_layer_type;$/;"	t	class:boost::asio::basic_serial_port	access:public
lowest_layer_type	/usr/include/boost/asio/basic_socket.hpp	/^  typedef basic_socket<Protocol, SocketService> lowest_layer_type;$/;"	t	class:boost::asio::basic_socket	access:public
lowest_layer_type	/usr/include/boost/asio/buffered_read_stream.hpp	/^  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;$/;"	t	class:boost::asio::buffered_read_stream	access:public
lowest_layer_type	/usr/include/boost/asio/buffered_stream.hpp	/^  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;$/;"	t	class:boost::asio::buffered_stream	access:public
lowest_layer_type	/usr/include/boost/asio/buffered_write_stream.hpp	/^  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;$/;"	t	class:boost::asio::buffered_write_stream	access:public
lowest_layer_type	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  typedef basic_descriptor<DescriptorService> lowest_layer_type;$/;"	t	class:boost::asio::posix::basic_descriptor	access:public
lowest_layer_type	/usr/include/boost/asio/ssl/stream.hpp	/^  typedef typename next_layer_type::lowest_layer_type lowest_layer_type;$/;"	t	class:boost::asio::ssl::stream	access:public
lowest_layer_type	/usr/include/boost/asio/windows/basic_handle.hpp	/^  typedef basic_handle<HandleService> lowest_layer_type;$/;"	t	class:boost::asio::windows::basic_handle	access:public
make_error_code	/usr/include/boost/asio/error.hpp	/^inline boost::system::error_code make_error_code(addrinfo_errors e)$/;"	f	namespace:boost::asio::error	signature:(addrinfo_errors e)
make_error_code	/usr/include/boost/asio/error.hpp	/^inline boost::system::error_code make_error_code(basic_errors e)$/;"	f	namespace:boost::asio::error	signature:(basic_errors e)
make_error_code	/usr/include/boost/asio/error.hpp	/^inline boost::system::error_code make_error_code(misc_errors e)$/;"	f	namespace:boost::asio::error	signature:(misc_errors e)
make_error_code	/usr/include/boost/asio/error.hpp	/^inline boost::system::error_code make_error_code(netdb_errors e)$/;"	f	namespace:boost::asio::error	signature:(netdb_errors e)
make_error_code	/usr/include/boost/asio/error.hpp	/^inline boost::system::error_code make_error_code(ssl_errors e)$/;"	f	namespace:boost::asio::error	signature:(ssl_errors e)
max_addr_v4_str_len	/usr/include/boost/asio/detail/socket_types.hpp	/^const int max_addr_v4_str_len = 256;$/;"	m	namespace:boost::asio::detail
max_addr_v6_str_len	/usr/include/boost/asio/detail/socket_types.hpp	/^const int max_addr_v6_str_len = 256;$/;"	m	namespace:boost::asio::detail
max_buffers	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  enum { max_buffers = 64 < max_iov_len ? 64 : max_iov_len };$/;"	e	enum:boost::asio::detail::reactive_descriptor_service::__anon12
max_buffers	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  enum { max_buffers = 64 < max_iov_len ? 64 : max_iov_len };$/;"	e	enum:boost::asio::detail::reactive_socket_service::__anon16
max_buffers	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  enum { max_buffers = 64 < max_iov_len ? 64 : max_iov_len };$/;"	e	enum:boost::asio::detail::win_iocp_socket_service::__anon24
max_buffer_size	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  enum { max_buffer_size = INT_MAX };$/;"	e	enum:boost::asio::ssl::detail::openssl_stream_service::__anon28
max_connections	/usr/include/boost/asio/socket_base.hpp	/^  static const int max_connections = implementation_defined;$/;"	m	class:boost::asio::socket_base	access:public
max_descriptor	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  socket_type max_descriptor() const$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:() const
max_descriptor	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  socket_type max_descriptor() const$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:() const
max_descriptor_	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  socket_type max_descriptor_;$/;"	m	class:boost::asio::detail::posix_fd_set_adapter	access:private
max_descriptor_	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  socket_type max_descriptor_;$/;"	m	class:boost::asio::detail::win_fd_set_adapter	access:private
max_iov_len	/usr/include/boost/asio/detail/socket_types.hpp	/^const int max_iov_len = 16;$/;"	m	namespace:boost::asio::detail
max_iov_len	/usr/include/boost/asio/detail/socket_types.hpp	/^const int max_iov_len = 64;$/;"	m	namespace:boost::asio::detail
max_size	/usr/include/boost/asio/basic_streambuf.hpp	/^  std::size_t max_size() const$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:() const
max_size_	/usr/include/boost/asio/basic_streambuf.hpp	/^  std::size_t max_size_;$/;"	m	class:boost::asio::basic_streambuf	access:private
max_size_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  std::size_t max_size_;$/;"	m	class:boost::asio::detail::consuming_buffers	access:private
max_size_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  std::size_t max_size_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
max_timeout	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    max_timeout = 500,$/;"	e	enum:boost::asio::detail::win_iocp_io_service::__anon20
memory_barrier	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  static void memory_barrier()$/;"	f	class:boost::asio::detail::indirect_handler_queue	access:private	signature:()
message	/usr/include/boost/asio/error.hpp	/^  std::string message(int value) const$/;"	f	class:boost::asio::error::detail::addrinfo_category	access:public	signature:(int value) const
message	/usr/include/boost/asio/error.hpp	/^  std::string message(int value) const$/;"	f	class:boost::asio::error::detail::misc_category	access:public	signature:(int value) const
message	/usr/include/boost/asio/error.hpp	/^  std::string message(int value) const$/;"	f	class:boost::asio::error::detail::netdb_category	access:public	signature:(int value) const
message	/usr/include/boost/asio/error.hpp	/^  std::string message(int) const$/;"	f	class:boost::asio::error::detail::ssl_category	access:public	signature:(int) const
message_do_not_route	/usr/include/boost/asio/detail/socket_types.hpp	/^const int message_do_not_route = MSG_DONTROUTE;$/;"	m	namespace:boost::asio::detail
message_do_not_route	/usr/include/boost/asio/socket_base.hpp	/^  static const int message_do_not_route = implementation_defined;$/;"	m	class:boost::asio::socket_base	access:public
message_flags	/usr/include/boost/asio/socket_base.hpp	/^  typedef int message_flags;$/;"	t	class:boost::asio::socket_base	access:public
message_out_of_band	/usr/include/boost/asio/detail/socket_types.hpp	/^const int message_out_of_band = MSG_OOB;$/;"	m	namespace:boost::asio::detail
message_out_of_band	/usr/include/boost/asio/socket_base.hpp	/^  static const int message_out_of_band = implementation_defined;$/;"	m	class:boost::asio::socket_base	access:public
message_peek	/usr/include/boost/asio/detail/socket_types.hpp	/^const int message_peek = MSG_PEEK;$/;"	m	namespace:boost::asio::detail
message_peek	/usr/include/boost/asio/socket_base.hpp	/^  static const int message_peek = implementation_defined;$/;"	m	class:boost::asio::socket_base	access:public
message_size	/usr/include/boost/asio/error.hpp	/^  message_size = BOOST_ASIO_SOCKET_ERROR(EMSGSIZE),$/;"	e	enum:boost::asio::error::basic_errors
method	/usr/include/boost/asio/ssl/context_base.hpp	/^  enum method$/;"	g	class:boost::asio::ssl::context_base	access:public
might_have_pending_waits	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^    bool might_have_pending_waits;$/;"	m	struct:boost::asio::detail::deadline_timer_service::implementation_type	access:public
minimum_	/usr/include/boost/asio/completion_condition.hpp	/^  std::size_t minimum_;$/;"	m	class:boost::asio::detail::transfer_at_least_t	access:private
misc_category	/usr/include/boost/asio/error.hpp	/^class misc_category : public boost::system::error_category$/;"	c	namespace:boost::asio::error::detail	inherits:boost::system::error_category
misc_category	/usr/include/boost/asio/error.hpp	/^static const boost::system::error_category& misc_category$/;"	m	namespace:boost::asio::error
misc_errors	/usr/include/boost/asio/error.hpp	/^enum misc_errors$/;"	g	namespace:boost::asio::error
msghdr	/usr/include/boost/asio/detail/socket_ops.hpp	/^struct msghdr { int msg_namelen; };$/;"	s	namespace:boost::asio::detail::socket_ops
msg_namelen	/usr/include/boost/asio/detail/socket_ops.hpp	/^struct msghdr { int msg_namelen; };$/;"	m	struct:boost::asio::detail::socket_ops::msghdr	access:public
multicast	/usr/include/boost/asio/ip/multicast.hpp	/^namespace multicast {$/;"	n	namespace:boost::asio::ip
multicast_enable_loopback	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit multicast_enable_loopback(bool v)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(bool v)
multicast_enable_loopback	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  multicast_enable_loopback()$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:()
multicast_enable_loopback	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^class multicast_enable_loopback$/;"	c	namespace:boost::asio::ip::detail::socket_option
multicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit multicast_hops(int v)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(int v)
multicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  multicast_hops()$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:()
multicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^class multicast_hops$/;"	c	namespace:boost::asio::ip::detail::socket_option
multicast_request	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit multicast_request($/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:( const boost::asio::ip::address_v4& multicast_address, const boost::asio::ip::address_v4& network_interface = boost::asio::ip::address_v4::any())
multicast_request	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit multicast_request($/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:( const boost::asio::ip::address_v6& multicast_address, unsigned long network_interface = 0)
multicast_request	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit multicast_request(const boost::asio::ip::address& multicast_address)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:(const boost::asio::ip::address& multicast_address)
multicast_request	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  multicast_request()$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:()
multicast_request	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^class multicast_request$/;"	c	namespace:boost::asio::ip::detail::socket_option
mutable_buffer	/usr/include/boost/asio/buffer.hpp	/^  mutable_buffer()$/;"	f	class:boost::asio::mutable_buffer	access:public	signature:()
mutable_buffer	/usr/include/boost/asio/buffer.hpp	/^  mutable_buffer(void* data, std::size_t size)$/;"	f	class:boost::asio::mutable_buffer	access:public	signature:(void* data, std::size_t size)
mutable_buffer	/usr/include/boost/asio/buffer.hpp	/^  mutable_buffer(void* data, std::size_t size,$/;"	f	class:boost::asio::mutable_buffer	access:public	signature:(void* data, std::size_t size, boost::function<void()> debug_check)
mutable_buffer	/usr/include/boost/asio/buffer.hpp	/^class mutable_buffer$/;"	c	namespace:boost::asio
mutable_buffers_1	/usr/include/boost/asio/buffer.hpp	/^  explicit mutable_buffers_1(const mutable_buffer& b)$/;"	f	class:boost::asio::mutable_buffers_1	access:public	signature:(const mutable_buffer& b)
mutable_buffers_1	/usr/include/boost/asio/buffer.hpp	/^  mutable_buffers_1(void* data, std::size_t size)$/;"	f	class:boost::asio::mutable_buffers_1	access:public	signature:(void* data, std::size_t size)
mutable_buffers_1	/usr/include/boost/asio/buffer.hpp	/^class mutable_buffers_1$/;"	c	namespace:boost::asio	inherits:mutable_buffer
mutable_buffers_type	/usr/include/boost/asio/basic_streambuf.hpp	/^  typedef implementation_defined mutable_buffers_type;$/;"	t	class:boost::asio::basic_streambuf	access:public
mutex	/usr/include/boost/asio/detail/mutex.hpp	/^typedef null_mutex mutex;$/;"	t	namespace:boost::asio::detail
mutex	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  Mutex& mutex()$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:()
mutexes_	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^    std::vector<boost::shared_ptr<boost::asio::detail::mutex> > mutexes_;$/;"	m	class:boost::asio::ssl::detail::openssl_init::do_init	access:private
mutex_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
mutex_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
mutex_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
mutex_	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  ::pthread_mutex_t mutex_;$/;"	m	class:boost::asio::detail::posix_mutex	access:private
mutex_	/usr/include/boost/asio/detail/resolver_service.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::resolver_service	access:private
mutex_	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  Mutex& mutex_;$/;"	m	class:boost::asio::detail::scoped_lock	access:private
mutex_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
mutex_	/usr/include/boost/asio/detail/service_registry.hpp	/^  mutable boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::service_registry	access:private
mutex_	/usr/include/boost/asio/detail/strand_service.hpp	/^    boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::strand_service::strand_impl	access:private
mutex_	/usr/include/boost/asio/detail/strand_service.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::strand_service	access:private
mutex_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
mutex_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  boost::asio::detail::mutex mutex_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service	access:private
mutex_type	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  typedef boost::asio::detail::mutex mutex_type;$/;"	t	class:boost::asio::ssl::detail::openssl_stream_service	access:private
name	/usr/include/boost/asio/detail/io_control.hpp	/^  int name() const$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:() const
name	/usr/include/boost/asio/detail/io_control.hpp	/^  int name() const$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:() const
name	/usr/include/boost/asio/detail/socket_option.hpp	/^  int name(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&) const
name	/usr/include/boost/asio/detail/socket_option.hpp	/^  int name(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&) const
name	/usr/include/boost/asio/detail/socket_option.hpp	/^  int name(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&) const
name	/usr/include/boost/asio/error.hpp	/^  const char* name() const$/;"	f	class:boost::asio::error::detail::addrinfo_category	access:public	signature:() const
name	/usr/include/boost/asio/error.hpp	/^  const char* name() const$/;"	f	class:boost::asio::error::detail::misc_category	access:public	signature:() const
name	/usr/include/boost/asio/error.hpp	/^  const char* name() const$/;"	f	class:boost::asio::error::detail::netdb_category	access:public	signature:() const
name	/usr/include/boost/asio/error.hpp	/^  const char* name() const$/;"	f	class:boost::asio::error::detail::ssl_category	access:public	signature:() const
name	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol) const
name	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol) const
name	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:(const Protocol& protocol) const
name	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(const Protocol& protocol) const
name	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int name(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol& protocol) const
name_too_long	/usr/include/boost/asio/error.hpp	/^  name_too_long = BOOST_ASIO_SOCKET_ERROR(ENAMETOOLONG),$/;"	e	enum:boost::asio::error::basic_errors
native	/usr/include/boost/asio/basic_serial_port.hpp	/^  native_type native()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
native	/usr/include/boost/asio/basic_socket.hpp	/^  native_type native()$/;"	f	class:boost::asio::basic_socket	access:public	signature:()
native	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  native_type native()$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:()
native	/usr/include/boost/asio/datagram_socket_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl)
native	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl)
native	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  native_type native(const implementation_type& impl) const$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(const implementation_type& impl) const
native	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl)
native	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl)
native	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  native_type native()$/;"	f	class:boost::asio::posix::basic_descriptor	access:public	signature:()
native	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl)
native	/usr/include/boost/asio/raw_socket_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl)
native	/usr/include/boost/asio/serial_port_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl)
native	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl)
native	/usr/include/boost/asio/stream_socket_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl)
native	/usr/include/boost/asio/windows/basic_handle.hpp	/^  native_type native()$/;"	f	class:boost::asio::windows::basic_handle	access:public	signature:()
native	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl)
native	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  native_type native(implementation_type& impl)$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl)
native_type	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  typedef typename DatagramSocketService::native_type native_type;$/;"	t	class:boost::asio::basic_datagram_socket	access:public
native_type	/usr/include/boost/asio/basic_raw_socket.hpp	/^  typedef typename RawSocketService::native_type native_type;$/;"	t	class:boost::asio::basic_raw_socket	access:public
native_type	/usr/include/boost/asio/basic_serial_port.hpp	/^  typedef typename SerialPortService::native_type native_type;$/;"	t	class:boost::asio::basic_serial_port	access:public
native_type	/usr/include/boost/asio/basic_socket.hpp	/^  typedef typename SocketService::native_type native_type;$/;"	t	class:boost::asio::basic_socket	access:public
native_type	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  typedef typename SocketAcceptorService::native_type native_type;$/;"	t	class:boost::asio::basic_socket_acceptor	access:public
native_type	/usr/include/boost/asio/basic_stream_socket.hpp	/^  typedef typename StreamSocketService::native_type native_type;$/;"	t	class:boost::asio::basic_stream_socket	access:public
native_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
native_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef typename service_impl_type::native_type native_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
native_type	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  typedef int native_type;$/;"	t	class:boost::asio::detail::reactive_descriptor_service	access:public
native_type	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^    native_type;$/;"	t	class:boost::asio::detail::reactive_serial_port_service	access:public
native_type	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  typedef socket_type native_type;$/;"	t	class:boost::asio::detail::reactive_socket_service	access:public
native_type	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  typedef HANDLE native_type;$/;"	t	class:boost::asio::detail::win_iocp_handle_service	access:public
native_type	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  typedef win_iocp_handle_service::native_type native_type;$/;"	t	class:boost::asio::detail::win_iocp_serial_port_service	access:public
native_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    native_type(socket_type s)$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_type	access:public	signature:(socket_type s)
native_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    native_type(socket_type s, const endpoint_type& ep)$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_type	access:public	signature:(socket_type s, const endpoint_type& ep)
native_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  class native_type$/;"	c	class:boost::asio::detail::win_iocp_socket_service	access:public
native_type	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  typedef typename DescriptorService::native_type native_type;$/;"	t	class:boost::asio::posix::basic_descriptor	access:public
native_type	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  typedef typename StreamDescriptorService::native_type native_type;$/;"	t	class:boost::asio::posix::basic_stream_descriptor	access:public
native_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:public
native_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  typedef service_impl_type::native_type native_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:public
native_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
native_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef typename service_impl_type::native_type native_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
native_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::serial_port_service	access:public
native_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef service_impl_type::native_type native_type;$/;"	t	class:boost::asio::serial_port_service	access:public
native_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
native_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef typename service_impl_type::native_type native_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
native_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
native_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef typename service_impl_type::native_type native_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
native_type	/usr/include/boost/asio/windows/basic_handle.hpp	/^  typedef typename HandleService::native_type native_type;$/;"	t	class:boost::asio::windows::basic_handle	access:public
native_type	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  typedef typename RandomAccessHandleService::native_type native_type;$/;"	t	class:boost::asio::windows::basic_random_access_handle	access:public
native_type	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  typedef typename StreamHandleService::native_type native_type;$/;"	t	class:boost::asio::windows::basic_stream_handle	access:public
native_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:public
native_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef service_impl_type::native_type native_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:public
native_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef implementation_defined native_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:public
native_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef service_impl_type::native_type native_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:public
need_epoll_wait_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  bool need_epoll_wait_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
need_kqueue_wait_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  bool need_kqueue_wait_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
netdb_category	/usr/include/boost/asio/error.hpp	/^class netdb_category : public boost::system::error_category$/;"	c	namespace:boost::asio::error::detail	inherits:boost::system::error_category
netdb_category	/usr/include/boost/asio/error.hpp	/^static const boost::system::error_category& netdb_category$/;"	m	namespace:boost::asio::error
netdb_errors	/usr/include/boost/asio/error.hpp	/^enum netdb_errors$/;"	g	namespace:boost::asio::error
netmask	/usr/include/boost/asio/ip/address_v4.hpp	/^  static address_v4 netmask(const address_v4& addr)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const address_v4& addr)
network_down	/usr/include/boost/asio/error.hpp	/^  network_down = BOOST_ASIO_SOCKET_ERROR(ENETDOWN),$/;"	e	enum:boost::asio::error::basic_errors
network_interface	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit network_interface(const boost::asio::ip::address_v4& ipv4_interface)$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(const boost::asio::ip::address_v4& ipv4_interface)
network_interface	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit network_interface(unsigned int ipv6_interface)$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(unsigned int ipv6_interface)
network_interface	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  network_interface()$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:()
network_interface	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^class network_interface$/;"	c	namespace:boost::asio::ip::detail::socket_option
network_reset	/usr/include/boost/asio/error.hpp	/^  network_reset = BOOST_ASIO_SOCKET_ERROR(ENETRESET),$/;"	e	enum:boost::asio::error::basic_errors
network_to_host_long	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline u_long_type network_to_host_long(u_long_type value)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(u_long_type value)
network_to_host_short	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline u_short_type network_to_host_short(u_short_type value)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(u_short_type value)
network_unreachable	/usr/include/boost/asio/error.hpp	/^  network_unreachable = BOOST_ASIO_SOCKET_ERROR(ENETUNREACH),$/;"	e	enum:boost::asio::error::basic_errors
net_buffer	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  net_buffer()$/;"	f	class:boost::asio::ssl::detail::net_buffer	access:public	signature:()
net_buffer	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^class net_buffer$/;"	c	namespace:boost::asio::ssl::detail
NET_BUF_SIZE	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  static const int  NET_BUF_SIZE = 16*1024 + 256; \/\/ SSL record size + spare$/;"	m	class:boost::asio::ssl::detail::net_buffer	access:private
next	/usr/include/boost/asio/detail/task_io_service.hpp	/^    idle_thread_info* next;$/;"	m	struct:boost::asio::detail::task_io_service::idle_thread_info	access:public
next	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^    idle_thread_info* next;$/;"	m	struct:boost::asio::detail::task_io_service::idle_thread_info	access:public
next_	/usr/include/boost/asio/detail/call_stack.hpp	/^    context* next_;$/;"	m	class:boost::asio::detail::call_stack::context	access:private
next_	/usr/include/boost/asio/detail/handler_queue.hpp	/^    handler* next_;$/;"	m	class:boost::asio::detail::handler_queue::handler	access:private
next_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    node* next_;$/;"	m	class:boost::asio::detail::indirect_handler_queue::node	access:private
next_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    op_base* next_;$/;"	m	class:boost::asio::detail::reactor_op_queue::op_base	access:private
next_	/usr/include/boost/asio/detail/strand_service.hpp	/^    handler_base* next_;$/;"	m	class:boost::asio::detail::strand_service::handler_base	access:private
next_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    timer_base* next_;$/;"	m	class:boost::asio::detail::timer_queue::timer_base	access:private
next_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    implementation_type* next_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::implementation_type	access:private
next_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    implementation_type* next_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::implementation_type	access:private
next_	/usr/include/boost/asio/io_service.hpp	/^  service* next_;$/;"	m	class:boost::asio::io_service::service	access:private
next_layer	/usr/include/boost/asio/buffered_read_stream.hpp	/^  next_layer_type& next_layer()$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:()
next_layer	/usr/include/boost/asio/buffered_stream.hpp	/^  next_layer_type& next_layer()$/;"	f	class:boost::asio::buffered_stream	access:public	signature:()
next_layer	/usr/include/boost/asio/buffered_write_stream.hpp	/^  next_layer_type& next_layer()$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:()
next_layer	/usr/include/boost/asio/ssl/stream.hpp	/^  next_layer_type& next_layer()$/;"	f	class:boost::asio::ssl::stream	access:public	signature:()
next_layer_	/usr/include/boost/asio/buffered_read_stream.hpp	/^  Stream next_layer_;$/;"	m	class:boost::asio::buffered_read_stream	access:private
next_layer_	/usr/include/boost/asio/buffered_write_stream.hpp	/^  Stream next_layer_;$/;"	m	class:boost::asio::buffered_write_stream	access:private
next_layer_	/usr/include/boost/asio/ssl/stream.hpp	/^  Stream next_layer_;$/;"	m	class:boost::asio::ssl::stream	access:private
next_layer_type	/usr/include/boost/asio/buffered_read_stream.hpp	/^  typedef typename boost::remove_reference<Stream>::type next_layer_type;$/;"	t	class:boost::asio::buffered_read_stream	access:public
next_layer_type	/usr/include/boost/asio/buffered_stream.hpp	/^  typedef typename boost::remove_reference<Stream>::type next_layer_type;$/;"	t	class:boost::asio::buffered_stream	access:public
next_layer_type	/usr/include/boost/asio/buffered_write_stream.hpp	/^  typedef typename boost::remove_reference<Stream>::type next_layer_type;$/;"	t	class:boost::asio::buffered_write_stream	access:public
next_layer_type	/usr/include/boost/asio/ssl/stream.hpp	/^  typedef typename boost::remove_reference<Stream>::type next_layer_type;$/;"	t	class:boost::asio::ssl::stream	access:public
next_version_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  unsigned long next_version_;$/;"	m	class:boost::asio::detail::indirect_handler_queue	access:private
NI_DGRAM	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	175;"	d
NI_NAMEREQD	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	167;"	d
NI_NOFQDN	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	159;"	d
NI_NUMERICHOST	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	163;"	d
NI_NUMERICSERV	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	171;"	d
node	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    node()$/;"	f	class:boost::asio::detail::indirect_handler_queue::node	access:public	signature:()
node	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  class node$/;"	c	class:boost::asio::detail::indirect_handler_queue	access:public
node_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    node* node_;$/;"	m	class:boost::asio::detail::indirect_handler_queue::handler	access:private
NOMINMAX	/usr/include/boost/asio/detail/socket_types.hpp	76;"	d
noncopyable	/usr/include/boost/asio/detail/noncopyable.hpp	/^  noncopyable() {}$/;"	f	class:boost::asio::detail::noncopyable	access:protected	signature:()
noncopyable	/usr/include/boost/asio/detail/noncopyable.hpp	/^  noncopyable(const noncopyable&);$/;"	p	class:boost::asio::detail::noncopyable	access:private	signature:(const noncopyable&)
noncopyable	/usr/include/boost/asio/detail/noncopyable.hpp	/^class noncopyable$/;"	c	namespace:boost::asio::detail
none	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, odd, even };$/;"	e	enum:boost::asio::serial_port_base::parity::type
none	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, software, hardware };$/;"	e	enum:boost::asio::serial_port_base::flow_control::type
non_blocking	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^      non_blocking = user_set_non_blocking | internal_non_blocking,$/;"	e	enum:boost::asio::detail::reactive_socket_service::implementation_type::__anon15
non_blocking_io	/usr/include/boost/asio/detail/io_control.hpp	/^  non_blocking_io()$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:()
non_blocking_io	/usr/include/boost/asio/detail/io_control.hpp	/^  non_blocking_io(bool value)$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:(bool value)
non_blocking_io	/usr/include/boost/asio/detail/io_control.hpp	/^class non_blocking_io$/;"	c	namespace:boost::asio::detail::io_control
non_blocking_io	/usr/include/boost/asio/posix/descriptor_base.hpp	/^  typedef implementation_defined non_blocking_io;$/;"	t	class:boost::asio::posix::descriptor_base	access:public
non_blocking_io	/usr/include/boost/asio/socket_base.hpp	/^  typedef boost::asio::detail::io_control::non_blocking_io non_blocking_io;$/;"	t	class:boost::asio::socket_base	access:public
non_blocking_io	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined non_blocking_io;$/;"	t	class:boost::asio::socket_base	access:public
noop_deleter	/usr/include/boost/asio/detail/resolver_service.hpp	/^  struct noop_deleter { void operator()(void*) {} };$/;"	s	class:boost::asio::detail::resolver_service	access:public
noop_deleter	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  struct noop_deleter { void operator()(void*) {} };$/;"	s	class:boost::asio::detail::win_iocp_socket_service	access:public
not_connected	/usr/include/boost/asio/error.hpp	/^  not_connected = BOOST_ASIO_SOCKET_ERROR(ENOTCONN),$/;"	e	enum:boost::asio::error::basic_errors
not_found	/usr/include/boost/asio/error.hpp	/^  not_found,$/;"	e	enum:boost::asio::error::misc_errors
not_socket	/usr/include/boost/asio/error.hpp	/^  not_socket = BOOST_ASIO_SOCKET_ERROR(ENOTSOCK),$/;"	e	enum:boost::asio::error::basic_errors
now	/usr/include/boost/asio/time_traits.hpp	/^  static time_type now()$/;"	f	struct:boost::asio::time_traits	access:public	signature:()
no_buffer_space	/usr/include/boost/asio/error.hpp	/^  no_buffer_space = BOOST_ASIO_SOCKET_ERROR(ENOBUFS),$/;"	e	enum:boost::asio::error::basic_errors
no_data	/usr/include/boost/asio/error.hpp	/^  no_data = BOOST_ASIO_NETDB_ERROR(NO_DATA),$/;"	e	enum:boost::asio::error::netdb_errors
no_delay	/usr/include/boost/asio/ip/tcp.hpp	/^    IPPROTO_TCP, TCP_NODELAY> no_delay;$/;"	t	class:boost::asio::ip::tcp	access:public
no_delay	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef implementation_defined no_delay;$/;"	t	class:boost::asio::ip::tcp	access:public
no_descriptors	/usr/include/boost/asio/error.hpp	/^  no_descriptors = BOOST_ASIO_SOCKET_ERROR(EMFILE),$/;"	e	enum:boost::asio::error::basic_errors
no_memory	/usr/include/boost/asio/error.hpp	/^  no_memory = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::basic_errors
no_permission	/usr/include/boost/asio/error.hpp	/^  no_permission = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::basic_errors
no_protocol_option	/usr/include/boost/asio/error.hpp	/^  no_protocol_option = BOOST_ASIO_SOCKET_ERROR(ENOPROTOOPT),$/;"	e	enum:boost::asio::error::basic_errors
no_recovery	/usr/include/boost/asio/error.hpp	/^  no_recovery = BOOST_ASIO_NETDB_ERROR(NO_RECOVERY)$/;"	e	enum:boost::asio::error::netdb_errors
no_sslv2	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const int no_sslv2 = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
no_sslv3	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const int no_sslv3 = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
no_tlsv1	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const int no_tlsv1 = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
null	/usr/include/boost/asio/ssl/context_service.hpp	/^  impl_type null() const$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:() const
null	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  static impl_type null()$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:()
null	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  impl_type null() const$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:() const
null	/usr/include/boost/asio/ssl/stream_service.hpp	/^  impl_type null() const$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:() const
null_buffers	/usr/include/boost/asio/buffer.hpp	/^class null_buffers$/;"	c	namespace:boost::asio
null_buffers_operation	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    null_buffers_operation(boost::asio::io_service& io_service, Handler handler)$/;"	f	class:boost::asio::detail::null_buffers_operation	access:public	signature:(boost::asio::io_service& io_service, Handler handler)
null_buffers_operation	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  class null_buffers_operation :$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base,handler_base_from_member
null_buffers_operation	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    null_buffers_operation(boost::asio::io_service& io_service, Handler handler)$/;"	f	class:boost::asio::detail::null_buffers_operation	access:public	signature:(boost::asio::io_service& io_service, Handler handler)
null_buffers_operation	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  class null_buffers_operation :$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base,handler_base_from_member
null_event	/usr/include/boost/asio/detail/null_event.hpp	/^  null_event()$/;"	f	class:boost::asio::detail::null_event	access:public	signature:()
null_event	/usr/include/boost/asio/detail/null_event.hpp	/^class null_event$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
null_mutex	/usr/include/boost/asio/detail/null_mutex.hpp	/^  null_mutex()$/;"	f	class:boost::asio::detail::null_mutex	access:public	signature:()
null_mutex	/usr/include/boost/asio/detail/null_mutex.hpp	/^class null_mutex$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
null_signal_blocker	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^  null_signal_blocker()$/;"	f	class:boost::asio::detail::null_signal_blocker	access:public	signature:()
null_signal_blocker	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^class null_signal_blocker$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
null_thread	/usr/include/boost/asio/detail/null_thread.hpp	/^  null_thread(Function f)$/;"	f	class:boost::asio::detail::null_thread	access:public	signature:(Function f)
null_thread	/usr/include/boost/asio/detail/null_thread.hpp	/^class null_thread$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
null_tss_ptr	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^  null_tss_ptr()$/;"	f	class:boost::asio::detail::null_tss_ptr	access:public	signature:()
null_tss_ptr	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^class null_tss_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
numeric_host	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const int numeric_host = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
numeric_service	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const int numeric_service = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
num_implementations	/usr/include/boost/asio/detail/strand_service.hpp	/^  enum { num_implementations = 193 };$/;"	e	enum:boost::asio::detail::strand_service::__anon18
odd	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, odd, even };$/;"	e	enum:boost::asio::serial_port_base::parity::type
offset_	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  std::size_t offset_;$/;"	m	class:boost::asio::detail::consuming_buffers_iterator	access:private
old_mask_	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  sigset_t old_mask_;$/;"	m	class:boost::asio::detail::posix_signal_blocker	access:private
old_size_	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^  size_t old_size_;$/;"	m	class:boost::asio::detail::buffer_resize_guard	access:private
one	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { one, onepointfive, two };$/;"	e	enum:boost::asio::serial_port_base::stop_bits::type
onepointfive	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { one, onepointfive, two };$/;"	e	enum:boost::asio::serial_port_base::stop_bits::type
on_completion	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    bool on_completion(DWORD last_error, DWORD bytes_transferred)$/;"	f	class:boost::asio::detail::win_iocp_io_service::operation	access:public	signature:(DWORD last_error, DWORD bytes_transferred)
on_immediate_completion	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    void on_immediate_completion(DWORD last_error, DWORD bytes_transferred)$/;"	f	class:boost::asio::detail::win_iocp_io_service::operation	access:public	signature:(DWORD last_error, DWORD bytes_transferred)
on_pending	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    void on_pending()$/;"	f	class:boost::asio::detail::win_iocp_io_service::operation	access:public	signature:()
op	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    op(Descriptor descriptor, Operation operation)$/;"	f	class:boost::asio::detail::reactor_op_queue::op	access:public	signature:(Descriptor descriptor, Operation operation)
op	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  class op$/;"	c	class:boost::asio::detail::reactor_op_queue	inherits:op_base	access:private
open	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code open(const std::string& device,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const std::string& device, boost::system::error_code& ec)
open	/usr/include/boost/asio/basic_serial_port.hpp	/^  void open(const std::string& device)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const std::string& device)
open	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code open(const protocol_type& protocol,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const protocol_type& protocol, boost::system::error_code& ec)
open	/usr/include/boost/asio/basic_socket.hpp	/^  void open(const protocol_type& protocol = protocol_type())$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const protocol_type& protocol = protocol_type())
open	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code open(const protocol_type& protocol,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const protocol_type& protocol, boost::system::error_code& ec)
open	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void open(const protocol_type& protocol = protocol_type())$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const protocol_type& protocol = protocol_type())
open	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
open	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline int open(const char* path, int flags, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(const char* path, int flags, boost::system::error_code& ec)
open	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const std::string& device, boost::system::error_code& ec)
open	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const std::string& device, boost::system::error_code& ec)
open	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
open	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
open	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const std::string& device, boost::system::error_code& ec)
open	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
open	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code open(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const protocol_type& protocol, boost::system::error_code& ec)
openssl_context_service	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  openssl_context_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(boost::asio::io_service& io_service)
openssl_context_service	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^class openssl_context_service$/;"	c	namespace:boost::asio::ssl::detail	inherits:boost::asio::detail::service_base
openssl_id_func	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^    static unsigned long openssl_id_func()$/;"	f	class:boost::asio::ssl::detail::openssl_init::do_init	access:private	signature:()
openssl_init	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^  openssl_init()$/;"	f	class:boost::asio::ssl::detail::openssl_init	access:public	signature:()
openssl_init	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^class openssl_init$/;"	c	namespace:boost::asio::ssl::detail	inherits:boost::noncopyable
openssl_locking_func	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^    static void openssl_locking_func(int mode, int n, $/;"	f	class:boost::asio::ssl::detail::openssl_init::do_init	access:private	signature:(int mode, int n, const char* , int )
openssl_operation	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  openssl_operation(ssl_primitive_func primitive,$/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:public	signature:(ssl_primitive_func primitive, Stream& socket, net_buffer& recv_buf, SSL* session, BIO* ssl_bio)
openssl_operation	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  openssl_operation(ssl_primitive_func primitive,$/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:public	signature:(ssl_primitive_func primitive, Stream& socket, net_buffer& recv_buf, SSL* session, BIO* ssl_bio, user_handler_func handler, boost::asio::io_service::strand& strand )
openssl_operation	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^class openssl_operation$/;"	c	namespace:boost::asio::ssl::detail
openssl_stream_service	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  explicit openssl_stream_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(boost::asio::io_service& io_service)
openssl_stream_service	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^class openssl_stream_service$/;"	c	namespace:boost::asio::ssl::detail	inherits:boost::asio::detail::service_base
operation	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  typedef win_iocp_io_service::operation operation;$/;"	t	class:boost::asio::detail::win_iocp_handle_service	access:public
operation	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    operation(win_iocp_io_service& iocp_service,$/;"	f	class:boost::asio::detail::win_iocp_io_service::operation	access:public	signature:(win_iocp_io_service& iocp_service, invoke_func_type invoke_func, destroy_func_type destroy_func)
operation	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  class operation$/;"	c	class:boost::asio::detail::win_iocp_io_service	inherits:OVERLAPPED	access:public
operation	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  typedef win_iocp_io_service::operation operation;$/;"	t	class:boost::asio::detail::win_iocp_socket_service	access:public
operations_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  operation_map operations_;$/;"	m	class:boost::asio::detail::reactor_op_queue	access:private
operation_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    Operation operation_;$/;"	m	class:boost::asio::detail::reactor_op_queue::op	access:private
operation_aborted	/usr/include/boost/asio/error.hpp	/^  operation_aborted = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::basic_errors
operation_map	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  typedef hash_map<Descriptor, op_base*> operation_map;$/;"	t	class:boost::asio::detail::reactor_op_queue	access:private
operation_not_supported	/usr/include/boost/asio/error.hpp	/^  operation_not_supported = BOOST_ASIO_SOCKET_ERROR(EOPNOTSUPP),$/;"	e	enum:boost::asio::error::basic_errors
operator !	/usr/include/boost/asio/detail/socket_option.hpp	/^  bool operator!() const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:() const
operator !	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  bool operator!() const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:() const
operator !=	/usr/include/boost/asio/ip/address.hpp	/^  friend bool operator!=(const address& a1, const address& a2)$/;"	f	class:boost::asio::ip::address	access:friend	signature:(const address& a1, const address& a2)
operator !=	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator!=(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
operator !=	/usr/include/boost/asio/ip/address_v6.hpp	/^  friend bool operator!=(const address_v6& a1, const address_v6& a2)$/;"	f	class:boost::asio::ip::address_v6	access:friend	signature:(const address_v6& a1, const address_v6& a2)
operator !=	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  friend bool operator!=(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:boost::asio::ip::basic_endpoint	access:friend	signature:(const basic_endpoint<InternetProtocol>& e1, const basic_endpoint<InternetProtocol>& e2)
operator !=	/usr/include/boost/asio/ip/icmp.hpp	/^  friend bool operator!=(const icmp& p1, const icmp& p2)$/;"	f	class:boost::asio::ip::icmp	access:friend	signature:(const icmp& p1, const icmp& p2)
operator !=	/usr/include/boost/asio/ip/tcp.hpp	/^  friend bool operator!=(const tcp& p1, const tcp& p2)$/;"	f	class:boost::asio::ip::tcp	access:friend	signature:(const tcp& p1, const tcp& p2)
operator !=	/usr/include/boost/asio/ip/udp.hpp	/^  friend bool operator!=(const udp& p1, const udp& p2)$/;"	f	class:boost::asio::ip::udp	access:friend	signature:(const udp& p1, const udp& p2)
operator !=	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  friend bool operator!=(const basic_endpoint<Protocol>& e1,$/;"	f	class:boost::asio::local::basic_endpoint	access:friend	signature:(const basic_endpoint<Protocol>& e1, const basic_endpoint<Protocol>& e2)
operator ()	/usr/include/boost/asio/buffer.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::buffer_debug_check	access:public	signature:()
operator ()	/usr/include/boost/asio/buffered_read_stream.hpp	/^    void operator()(const boost::system::error_code& ec, std::size_t)$/;"	f	class:boost::asio::buffered_read_stream::read_some_handler	access:public	signature:(const boost::system::error_code& ec, std::size_t)
operator ()	/usr/include/boost/asio/buffered_read_stream.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::buffered_read_stream::fill_handler	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_transferred)
operator ()	/usr/include/boost/asio/buffered_write_stream.hpp	/^    void operator()(const boost::system::error_code& ec, std::size_t)$/;"	f	class:boost::asio::buffered_write_stream::write_some_handler	access:public	signature:(const boost::system::error_code& ec, std::size_t)
operator ()	/usr/include/boost/asio/buffered_write_stream.hpp	/^    void operator()(const boost::system::error_code& ec,$/;"	f	class:boost::asio::buffered_write_stream::flush_handler	access:public	signature:(const boost::system::error_code& ec, std::size_t bytes_written)
operator ()	/usr/include/boost/asio/completion_condition.hpp	/^  std::size_t operator()(const Error& err, std::size_t bytes_transferred)$/;"	f	class:boost::asio::detail::transfer_at_least_t	access:public	signature:(const Error& err, std::size_t bytes_transferred)
operator ()	/usr/include/boost/asio/completion_condition.hpp	/^  std::size_t operator()(const Error& err, std::size_t)$/;"	f	class:boost::asio::detail::transfer_all_t	access:public	signature:(const Error& err, std::size_t)
operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::binder1	access:public	signature:() const
operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::binder2	access:public	signature:() const
operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::binder3	access:public	signature:() const
operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::binder4	access:public	signature:() const
operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::binder5	access:public	signature:() const
operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::binder1	access:public	signature:()
operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::binder2	access:public	signature:()
operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::binder3	access:public	signature:()
operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::binder4	access:public	signature:()
operator ()	/usr/include/boost/asio/detail/bind_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::binder5	access:public	signature:()
operator ()	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^    void operator()(const boost::system::error_code& result)$/;"	f	class:boost::asio::detail::deadline_timer_service::wait_handler	access:public	signature:(const boost::system::error_code& result)
operator ()	/usr/include/boost/asio/detail/resolver_service.hpp	/^    void operator()() { io_service_.run(); }$/;"	f	class:boost::asio::detail::resolver_service::work_io_service_runner	access:public	signature:()
operator ()	/usr/include/boost/asio/detail/resolver_service.hpp	/^    void operator()()$/;"	f	class:boost::asio::detail::resolver_service::resolve_endpoint_handler	access:public	signature:()
operator ()	/usr/include/boost/asio/detail/resolver_service.hpp	/^    void operator()()$/;"	f	class:boost::asio::detail::resolver_service::resolve_query_handler	access:public	signature:()
operator ()	/usr/include/boost/asio/detail/resolver_service.hpp	/^  struct noop_deleter { void operator()(void*) {} };$/;"	f	struct:boost::asio::detail::resolver_service::noop_deleter	access:public	signature:(void*)
operator ()	/usr/include/boost/asio/detail/strand_service.hpp	/^    void operator()()$/;"	f	class:boost::asio::detail::strand_service::invoke_current_handler	access:public	signature:()
operator ()	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  struct noop_deleter { void operator()(void*) {} };$/;"	f	struct:boost::asio::detail::win_iocp_socket_service::noop_deleter	access:public	signature:(void*)
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::rewrapped_handler	access:public	signature:() const
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()() const$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:() const
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::rewrapped_handler	access:public	signature:()
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()()$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:()
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1) const$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1) const
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1)$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1)
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2) const$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2) const
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2)$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2)
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3) const$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3) const
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3)$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3)
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4)
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4) const
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5)
operator ()	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  void operator()(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3,$/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:(const Arg1& arg1, const Arg2& arg2, const Arg3& arg3, const Arg4& arg4, const Arg5& arg5) const
operator +	/usr/include/boost/asio/buffer.hpp	/^inline const_buffer operator+(const const_buffer& b, std::size_t start)$/;"	f	namespace:boost::asio	signature:(const const_buffer& b, std::size_t start)
operator +	/usr/include/boost/asio/buffer.hpp	/^inline const_buffer operator+(std::size_t start, const const_buffer& b)$/;"	f	namespace:boost::asio	signature:(std::size_t start, const const_buffer& b)
operator +	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffer operator+(const mutable_buffer& b, std::size_t start)$/;"	f	namespace:boost::asio	signature:(const mutable_buffer& b, std::size_t start)
operator +	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffer operator+(std::size_t start, const mutable_buffer& b)$/;"	f	namespace:boost::asio	signature:(std::size_t start, const mutable_buffer& b)
operator <	/usr/include/boost/asio/ip/address.hpp	/^  friend bool operator<(const address& a1, const address& a2)$/;"	f	class:boost::asio::ip::address	access:friend	signature:(const address& a1, const address& a2)
operator <	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator<(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
operator <	/usr/include/boost/asio/ip/address_v6.hpp	/^  friend bool operator<(const address_v6& a1, const address_v6& a2)$/;"	f	class:boost::asio::ip::address_v6	access:friend	signature:(const address_v6& a1, const address_v6& a2)
operator <	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  friend bool operator<(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:boost::asio::ip::basic_endpoint	access:friend	signature:(const basic_endpoint<InternetProtocol>& e1, const basic_endpoint<InternetProtocol>& e2)
operator <	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  friend bool operator<(const basic_endpoint<Protocol>& e1,$/;"	f	class:boost::asio::local::basic_endpoint	access:friend	signature:(const basic_endpoint<Protocol>& e1, const basic_endpoint<Protocol>& e2)
operator <<	/usr/include/boost/asio/ip/address.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const address& addr)
operator <<	/usr/include/boost/asio/ip/address_v4.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const address_v4& addr)
operator <<	/usr/include/boost/asio/ip/address_v6.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const address_v6& addr)
operator <<	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:boost::asio::ip	signature:( std::basic_ostream<Elem, Traits>& os, const basic_endpoint<InternetProtocol>& endpoint)
operator <<	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^std::ostream& operator<<(std::ostream& os,$/;"	f	namespace:boost::asio::ip	signature:(std::ostream& os, const basic_endpoint<InternetProtocol>& endpoint)
operator <<	/usr/include/boost/asio/local/basic_endpoint.hpp	/^std::basic_ostream<Elem, Traits>& operator<<($/;"	f	namespace:boost::asio::local	signature:( std::basic_ostream<Elem, Traits>& os, const basic_endpoint<Protocol>& endpoint)
operator <=	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator<=(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
operator <=	/usr/include/boost/asio/ip/address_v6.hpp	/^  friend bool operator<=(const address_v6& a1, const address_v6& a2)$/;"	f	class:boost::asio::ip::address_v6	access:friend	signature:(const address_v6& a1, const address_v6& a2)
operator =	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  consuming_buffers& operator=(const consuming_buffers& other)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(const consuming_buffers& other)
operator =	/usr/include/boost/asio/detail/noncopyable.hpp	/^  const noncopyable& operator=(const noncopyable&);$/;"	p	class:boost::asio::detail::noncopyable	access:private	signature:(const noncopyable&)
operator =	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:boost::asio::detail::null_tss_ptr	access:public	signature:(T* value)
operator =	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:boost::asio::detail::posix_tss_ptr	access:public	signature:(T* value)
operator =	/usr/include/boost/asio/detail/socket_option.hpp	/^  boolean& operator=(bool v)$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(bool v)
operator =	/usr/include/boost/asio/detail/socket_option.hpp	/^  integer& operator=(int v)$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(int v)
operator =	/usr/include/boost/asio/detail/tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:boost::asio::detail::tss_ptr	access:public	signature:(T* value)
operator =	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    void operator=(const handler_operation&);$/;"	p	struct:boost::asio::detail::win_iocp_io_service::handler_operation	access:private	signature:(const handler_operation&)
operator =	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^    void operator=(const overlapped_operation&);$/;"	p	struct:boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation	access:private	signature:(const overlapped_operation&)
operator =	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    void operator=(socket_type s)$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_type	access:public	signature:(socket_type s)
operator =	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  void operator=(T* value)$/;"	f	class:boost::asio::detail::win_tss_ptr	access:public	signature:(T* value)
operator =	/usr/include/boost/asio/io_service.hpp	/^  void operator=(const work& other);$/;"	p	class:boost::asio::io_service::work	access:private	signature:(const work& other)
operator =	/usr/include/boost/asio/ip/address.hpp	/^  address& operator=(const address& other)$/;"	f	class:boost::asio::ip::address	access:public	signature:(const address& other)
operator =	/usr/include/boost/asio/ip/address.hpp	/^  address& operator=(const boost::asio::ip::address_v4& ipv4_address)$/;"	f	class:boost::asio::ip::address	access:public	signature:(const boost::asio::ip::address_v4& ipv4_address)
operator =	/usr/include/boost/asio/ip/address.hpp	/^  address& operator=(const boost::asio::ip::address_v6& ipv6_address)$/;"	f	class:boost::asio::ip::address	access:public	signature:(const boost::asio::ip::address_v6& ipv6_address)
operator =	/usr/include/boost/asio/ip/address_v4.hpp	/^  address_v4& operator=(const address_v4& other)$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(const address_v4& other)
operator =	/usr/include/boost/asio/ip/address_v6.hpp	/^  address_v6& operator=(const address_v6& other)$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(const address_v6& other)
operator =	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  basic_endpoint& operator=(const basic_endpoint& other)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(const basic_endpoint& other)
operator =	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  multicast_enable_loopback& operator=(bool v)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(bool v)
operator =	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  multicast_hops& operator=(int v)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(int v)
operator =	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  unicast_hops& operator=(int v)$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(int v)
operator =	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  basic_endpoint& operator=(const basic_endpoint& other)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const basic_endpoint& other)
operator ==	/usr/include/boost/asio/ip/address.hpp	/^  friend bool operator==(const address& a1, const address& a2)$/;"	f	class:boost::asio::ip::address	access:friend	signature:(const address& a1, const address& a2)
operator ==	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator==(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
operator ==	/usr/include/boost/asio/ip/address_v6.hpp	/^  friend bool operator==(const address_v6& a1, const address_v6& a2)$/;"	f	class:boost::asio::ip::address_v6	access:friend	signature:(const address_v6& a1, const address_v6& a2)
operator ==	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  friend bool operator==(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:boost::asio::ip::basic_endpoint	access:friend	signature:(const basic_endpoint<InternetProtocol>& e1, const basic_endpoint<InternetProtocol>& e2)
operator ==	/usr/include/boost/asio/ip/icmp.hpp	/^  friend bool operator==(const icmp& p1, const icmp& p2)$/;"	f	class:boost::asio::ip::icmp	access:friend	signature:(const icmp& p1, const icmp& p2)
operator ==	/usr/include/boost/asio/ip/tcp.hpp	/^  friend bool operator==(const tcp& p1, const tcp& p2)$/;"	f	class:boost::asio::ip::tcp	access:friend	signature:(const tcp& p1, const tcp& p2)
operator ==	/usr/include/boost/asio/ip/udp.hpp	/^  friend bool operator==(const udp& p1, const udp& p2)$/;"	f	class:boost::asio::ip::udp	access:friend	signature:(const udp& p1, const udp& p2)
operator ==	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  friend bool operator==(const basic_endpoint<Protocol>& e1,$/;"	f	class:boost::asio::local::basic_endpoint	access:friend	signature:(const basic_endpoint<Protocol>& e1, const basic_endpoint<Protocol>& e2)
operator >	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator>(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
operator >	/usr/include/boost/asio/ip/address_v6.hpp	/^  friend bool operator>(const address_v6& a1, const address_v6& a2)$/;"	f	class:boost::asio::ip::address_v6	access:friend	signature:(const address_v6& a1, const address_v6& a2)
operator >=	/usr/include/boost/asio/ip/address_v4.hpp	/^  friend bool operator>=(const address_v4& a1, const address_v4& a2)$/;"	f	class:boost::asio::ip::address_v4	access:friend	signature:(const address_v4& a1, const address_v4& a2)
operator >=	/usr/include/boost/asio/ip/address_v6.hpp	/^  friend bool operator>=(const address_v6& a1, const address_v6& a2)$/;"	f	class:boost::asio::ip::address_v6	access:friend	signature:(const address_v6& a1, const address_v6& a2)
operator bool	/usr/include/boost/asio/detail/socket_option.hpp	/^  operator bool() const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:() const
operator bool	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  operator bool() const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:() const
operator boost::asio::detail::addrinfo_type*	/usr/include/boost/asio/detail/resolver_service.hpp	/^    operator boost::asio::detail::addrinfo_type*()$/;"	f	class:boost::asio::detail::resolver_service::auto_addrinfo	access:public	signature:()
operator endpoint_type	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  operator endpoint_type() const$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:() const
operator fd_set*	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  operator fd_set*()$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:()
operator fd_set*	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  operator fd_set*()$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:()
operator socket_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    operator socket_type() const$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_type	access:public	signature:() const
operator T*	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^  operator T*() const$/;"	f	class:boost::asio::detail::null_tss_ptr	access:public	signature:() const
operator T*	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^  operator T*() const$/;"	f	class:boost::asio::detail::posix_tss_ptr	access:public	signature:() const
operator T*	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  operator T*() const$/;"	f	class:boost::asio::detail::win_tss_ptr	access:public	signature:() const
options	/usr/include/boost/asio/ssl/context_base.hpp	/^  typedef int options;$/;"	t	class:boost::asio::ssl::context_base	access:public
op_	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    openssl_operation<Stream>* op_;$/;"	m	class:boost::asio::ssl::detail::openssl_stream_service::base_handler	access:private
op_base	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    op_base(perform_func_type perform_func, complete_func_type complete_func,$/;"	f	class:boost::asio::detail::reactor_op_queue::op_base	access:protected	signature:(perform_func_type perform_func, complete_func_type complete_func, destroy_func_type destroy_func, Descriptor descriptor)
op_base	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  class op_base$/;"	c	class:boost::asio::detail::reactor_op_queue	access:private
outbound_interface	/usr/include/boost/asio/ip/multicast.hpp	/^  outbound_interface;$/;"	t	namespace:boost::asio::ip::multicast
outbound_interface	/usr/include/boost/asio/ip/multicast.hpp	/^typedef implementation_defined outbound_interface;$/;"	t	namespace:boost::asio::ip::multicast
outstanding_operations_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  long outstanding_operations_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
outstanding_work_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  int outstanding_work_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
outstanding_work_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  boost::detail::atomic_count outstanding_work_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
outstanding_work_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  long outstanding_work_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
out_of_indexes	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  enum { out_of_indexes = 0xFFFFFFFF };$/;"	e	enum:boost::asio::detail::win_tss_ptr::__anon25
overflow	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  int_type overflow(int_type c)$/;"	f	class:boost::asio::basic_socket_streambuf	access:protected	signature:(int_type c)
overflow	/usr/include/boost/asio/basic_streambuf.hpp	/^  int_type overflow(int_type c)$/;"	f	class:boost::asio::basic_streambuf	access:protected	signature:(int_type c)
overlapped_operation	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^    overlapped_operation(const overlapped_operation&);$/;"	p	struct:boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation	access:private	signature:(const overlapped_operation&)
overlapped_operation	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^    overlapped_operation(win_iocp_io_service& io_service,$/;"	f	struct:boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation	access:public	signature:(win_iocp_io_service& io_service, Handler handler)
overlapped_operation	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  struct overlapped_operation$/;"	s	class:boost::asio::detail::win_iocp_overlapped_ptr	inherits:overlapped_operation_base	access:private
overlapped_operation_base	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^    overlapped_operation_base(win_iocp_io_service& io_service,$/;"	f	struct:boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation_base	access:public	signature:(win_iocp_io_service& io_service, invoke_func_type invoke_func, destroy_func_type destroy_func)
overlapped_operation_base	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  struct overlapped_operation_base$/;"	s	class:boost::asio::detail::win_iocp_overlapped_ptr	inherits:win_iocp_io_service::operation	access:private
overlapped_ptr	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  explicit overlapped_ptr(boost::asio::io_service& io_service, Handler handler)$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:(boost::asio::io_service& io_service, Handler handler)
overlapped_ptr	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  overlapped_ptr()$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:()
overlapped_ptr	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^class overlapped_ptr$/;"	c	namespace:boost::asio::windows	inherits:noncopyable
overlapped_wrapper	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    explicit overlapped_wrapper(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_handle_service::overlapped_wrapper	access:public	signature:(boost::system::error_code& ec)
overlapped_wrapper	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  class overlapped_wrapper$/;"	c	class:boost::asio::detail::win_iocp_handle_service	inherits:OVERLAPPED	access:public
owner_	/usr/include/boost/asio/detail/call_stack.hpp	/^    Owner* owner_;$/;"	m	class:boost::asio::detail::call_stack::context	access:private
owner_	/usr/include/boost/asio/detail/service_registry.hpp	/^  boost::asio::io_service& owner_;$/;"	m	class:boost::asio::detail::service_registry	access:private
owner_	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::io_service& owner_;$/;"	m	class:boost::asio::io_service::service	access:private
parity	/usr/include/boost/asio/serial_port_base.hpp	/^    explicit parity(type t = none);$/;"	p	class:boost::asio::serial_port_base::parity	access:public	signature:(type t = none)
parity	/usr/include/boost/asio/serial_port_base.hpp	/^  class parity$/;"	c	class:boost::asio::serial_port_base	access:public
passive	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const int passive = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
password_callback	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  static int password_callback(char* buf, int size, int purpose, void* data)$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(char* buf, int size, int purpose, void* data)
password_callback_type	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^      context_base::password_purpose)> password_callback_type;$/;"	t	class:boost::asio::ssl::detail::openssl_context_service	access:public
password_purpose	/usr/include/boost/asio/ssl/context_base.hpp	/^  enum password_purpose$/;"	g	class:boost::asio::ssl::context_base	access:public
path	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  std::string path() const$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:() const
path	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  void path(const char* p)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const char* p)
path	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  void path(const std::string& p)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(const std::string& p)
path_length_	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  std::size_t path_length_;$/;"	m	class:boost::asio::local::basic_endpoint	access:private
peek	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const MutableBufferSequence& buffers)
peek	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
peek	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const MutableBufferSequence& buffers)
peek	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
peek	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const MutableBufferSequence& buffers)
peek	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
peek	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  std::size_t peek(impl_type& \/*impl*\/, Stream& \/*next_layer*\/,$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& , Stream& , const Mutable_Buffers& , boost::system::error_code& ec)
peek	/usr/include/boost/asio/ssl/stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(const MutableBufferSequence& buffers)
peek	/usr/include/boost/asio/ssl/stream.hpp	/^  std::size_t peek(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
peek	/usr/include/boost/asio/ssl/stream_service.hpp	/^  std::size_t peek(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const MutableBufferSequence& buffers, boost::system::error_code& ec)
peek_copy	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t peek_copy(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_read_stream	access:private	signature:(const MutableBufferSequence& buffers)
pem	/usr/include/boost/asio/ssl/context_base.hpp	/^    pem$/;"	e	enum:boost::asio::ssl::context_base::file_format
pending_cancellations_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  std::vector<socket_type> pending_cancellations_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
pending_cancellations_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  std::vector<socket_type> pending_cancellations_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
pending_cancellations_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  std::vector<socket_type> pending_cancellations_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
pending_cancellations_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  std::vector<socket_type> pending_cancellations_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
pending_event_changes_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  std::vector< ::pollfd> pending_event_changes_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
pending_event_change_index_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  hash_map<int, std::size_t> pending_event_change_index_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
perform	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    bool perform(boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::read_operation	access:public	signature:(boost::system::error_code& ec, std::size_t& bytes_transferred)
perform	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    bool perform(boost::system::error_code&,$/;"	f	class:boost::asio::detail::null_buffers_operation	access:public	signature:(boost::system::error_code&, std::size_t& bytes_transferred)
perform	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    bool perform(boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::receive_from_operation	access:public	signature:(boost::system::error_code& ec, std::size_t& bytes_transferred)
perform	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    bool perform(boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::receive_operation	access:public	signature:(boost::system::error_code& ec, std::size_t& bytes_transferred)
perform	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    bool perform(boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::send_to_operation	access:public	signature:(boost::system::error_code& ec, std::size_t& bytes_transferred)
perform	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    bool perform(boost::system::error_code&,$/;"	f	class:boost::asio::detail::null_buffers_operation	access:public	signature:(boost::system::error_code&, std::size_t& bytes_transferred)
perform	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    bool perform(const boost::system::error_code& result)$/;"	f	class:boost::asio::detail::reactor_op_queue::op_base	access:public	signature:(const boost::system::error_code& result)
perform	/usr/include/boost/asio/detail/select_reactor.hpp	/^    bool perform(boost::system::error_code& ec,$/;"	f	class:boost::asio::detail::select_reactor::connect_handler_wrapper	access:public	signature:(boost::system::error_code& ec, std::size_t& bytes_transferred)
perform_all_operations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  void perform_all_operations(Descriptor descriptor,$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor descriptor, const boost::system::error_code& result)
perform_cancellations	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  void perform_cancellations()$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:()
perform_func_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    perform_func_type perform_func_;$/;"	m	class:boost::asio::detail::reactor_op_queue::op_base	access:private
perform_func_type	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    typedef bool (*perform_func_type)(op_base*,$/;"	t	class:boost::asio::detail::reactor_op_queue::op_base	access:protected
perform_operation	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  bool perform_operation(Descriptor descriptor,$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(Descriptor descriptor, const boost::system::error_code& result)
perform_operations_for_descriptors	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  void perform_operations_for_descriptors(const Descriptor_Set& descriptors,$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:(const Descriptor_Set& descriptors, const boost::system::error_code& result)
per_descriptor_data	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  struct per_descriptor_data$/;"	s	class:boost::asio::detail::dev_poll_reactor	access:public
per_descriptor_data	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  struct per_descriptor_data$/;"	s	class:boost::asio::detail::epoll_reactor	access:public
per_descriptor_data	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  struct per_descriptor_data$/;"	s	class:boost::asio::detail::kqueue_reactor	access:public
per_descriptor_data	/usr/include/boost/asio/detail/select_reactor.hpp	/^  struct per_descriptor_data$/;"	s	class:boost::asio::detail::select_reactor	access:public
pipe_select_interrupter	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  pipe_select_interrupter()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:()
pipe_select_interrupter	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^class pipe_select_interrupter$/;"	c	namespace:boost::asio::detail
placeholders	/usr/include/boost/asio/placeholders.hpp	/^namespace placeholders {$/;"	n	namespace:boost::asio
PodType	/usr/include/boost/asio/buffer.hpp	/^inline const_buffers_1 buffer(const PodType (&data)[N],$/;"	m	namespace:boost::asio
PodType	/usr/include/boost/asio/buffer.hpp	/^inline mutable_buffers_1 buffer(PodType (&data)[N],$/;"	m	namespace:boost::asio
pointer_	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  pointer_type pointer_;$/;"	m	class:boost::asio::detail::handler_ptr	access:private
pointer_	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  pointer_type pointer_;$/;"	m	class:boost::asio::detail::raw_handler_ptr	access:private
pointer_type	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  typedef Object* pointer_type;$/;"	t	struct:boost::asio::detail::handler_alloc_traits	access:public
pointer_type	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  typedef typename Alloc_Traits::pointer_type pointer_type;$/;"	t	class:boost::asio::detail::handler_ptr	access:public
pointer_type	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  typedef typename Alloc_Traits::pointer_type pointer_type;$/;"	t	class:boost::asio::detail::raw_handler_ptr	access:public
poll	/usr/include/boost/asio/detail/task_io_service.hpp	/^  size_t poll(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
poll	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  size_t poll(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
poll	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  size_t poll(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(boost::system::error_code& ec)
poll	/usr/include/boost/asio/io_service.hpp	/^  std::size_t poll();$/;"	p	class:boost::asio::io_service	access:public	signature:()
poll	/usr/include/boost/asio/io_service.hpp	/^  std::size_t poll(boost::system::error_code& ec);$/;"	p	class:boost::asio::io_service	access:public	signature:(boost::system::error_code& ec)
poll_connect	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int poll_connect(socket_type s, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
poll_one	/usr/include/boost/asio/detail/task_io_service.hpp	/^  size_t poll_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
poll_one	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  size_t poll_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
poll_one	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  size_t poll_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(boost::system::error_code& ec)
poll_one	/usr/include/boost/asio/io_service.hpp	/^  std::size_t poll_one();$/;"	p	class:boost::asio::io_service	access:public	signature:()
poll_one	/usr/include/boost/asio/io_service.hpp	/^  std::size_t poll_one(boost::system::error_code& ec);$/;"	p	class:boost::asio::io_service	access:public	signature:(boost::system::error_code& ec)
poll_read	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline int poll_read(int d, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, boost::system::error_code& ec)
poll_read	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int poll_read(socket_type s, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
poll_write	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline int poll_write(int d, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, boost::system::error_code& ec)
poll_write	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int poll_write(socket_type s, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, boost::system::error_code& ec)
pop	/usr/include/boost/asio/detail/handler_queue.hpp	/^  void pop()$/;"	f	class:boost::asio::detail::handler_queue	access:public	signature:()
pop	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  handler* pop()$/;"	f	class:boost::asio::detail::indirect_handler_queue	access:public	signature:()
poppable	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  bool poppable()$/;"	f	class:boost::asio::detail::indirect_handler_queue	access:public	signature:()
port	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  unsigned short port() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
port	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  void port(unsigned short port_num)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(unsigned short port_num)
position	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  std::size_t position() const$/;"	f	class:boost::asio::detail::const_buffers_iterator	access:public	signature:() const
position_	/usr/include/boost/asio/buffers_iterator.hpp	/^  std::size_t position_;$/;"	m	class:boost::asio::buffers_iterator	access:private
position_	/usr/include/boost/asio/detail/const_buffers_iterator.hpp	/^  std::size_t position_;$/;"	m	class:boost::asio::detail::const_buffers_iterator	access:private
posix	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^namespace posix {$/;"	n	namespace:boost::asio
posix	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^namespace posix {$/;"	n	namespace:boost::asio
posix	/usr/include/boost/asio/posix/descriptor_base.hpp	/^namespace posix {$/;"	n	namespace:boost::asio
posix	/usr/include/boost/asio/posix/stream_descriptor.hpp	/^namespace posix {$/;"	n	namespace:boost::asio
posix	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^namespace posix {$/;"	n	namespace:boost::asio
posix_event	/usr/include/boost/asio/detail/posix_event.hpp	/^  posix_event()$/;"	f	class:boost::asio::detail::posix_event	access:public	signature:()
posix_event	/usr/include/boost/asio/detail/posix_event.hpp	/^class posix_event$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
posix_fd_set_adapter	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  posix_fd_set_adapter()$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:()
posix_fd_set_adapter	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^class posix_fd_set_adapter$/;"	c	namespace:boost::asio::detail
posix_mutex	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  posix_mutex()$/;"	f	class:boost::asio::detail::posix_mutex	access:public	signature:()
posix_mutex	/usr/include/boost/asio/detail/posix_mutex.hpp	/^class posix_mutex$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
posix_signal_blocker	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  posix_signal_blocker()$/;"	f	class:boost::asio::detail::posix_signal_blocker	access:public	signature:()
posix_signal_blocker	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^class posix_signal_blocker$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
posix_thread	/usr/include/boost/asio/detail/posix_thread.hpp	/^  posix_thread(Function f)$/;"	f	class:boost::asio::detail::posix_thread	access:public	signature:(Function f)
posix_thread	/usr/include/boost/asio/detail/posix_thread.hpp	/^class posix_thread$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
posix_tss_ptr	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^  posix_tss_ptr()$/;"	f	class:boost::asio::detail::posix_tss_ptr	access:public	signature:()
posix_tss_ptr	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^class posix_tss_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
post	/usr/include/boost/asio/detail/strand_service.hpp	/^  void post(implementation_type& impl, Handler handler)$/;"	f	class:boost::asio::detail::strand_service	access:public	signature:(implementation_type& impl, Handler handler)
post	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void post(Handler handler)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(Handler handler)
post	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void post(Handler handler)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(Handler handler)
post	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void post(Handler handler)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(Handler handler)
post	/usr/include/boost/asio/io_service.hpp	/^  void post(CompletionHandler handler);$/;"	p	class:boost::asio::io_service	access:public	signature:(CompletionHandler handler)
post	/usr/include/boost/asio/strand.hpp	/^  void post(Handler handler)$/;"	f	class:boost::asio::io_service::strand	access:public	signature:(Handler handler)
post_completion	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void post_completion(operation* op, DWORD op_last_error,$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(operation* op, DWORD op_last_error, DWORD bytes_transferred)
post_next_waiter_on_exit	/usr/include/boost/asio/detail/strand_service.hpp	/^    post_next_waiter_on_exit(strand_service& service_impl,$/;"	f	class:boost::asio::detail::strand_service::post_next_waiter_on_exit	access:public	signature:(strand_service& service_impl, implementation_type& impl)
post_next_waiter_on_exit	/usr/include/boost/asio/detail/strand_service.hpp	/^  class post_next_waiter_on_exit$/;"	c	class:boost::asio::detail::strand_service	access:public
prepare	/usr/include/boost/asio/basic_streambuf.hpp	/^  mutable_buffers_type prepare(std::size_t n)$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:(std::size_t n)
previous_size_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    std::size_t previous_size_;$/;"	m	class:boost::asio::buffered_read_stream::fill_handler	access:private
prev_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    timer_base* prev_;$/;"	m	class:boost::asio::detail::timer_queue::timer_base	access:private
prev_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    implementation_type* prev_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::implementation_type	access:private
prev_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    implementation_type* prev_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::implementation_type	access:private
primitive_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  ssl_primitive_func  primitive_;$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
protocol	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  protocol_type protocol() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
protocol	/usr/include/boost/asio/ip/icmp.hpp	/^  int protocol() const$/;"	f	class:boost::asio::ip::icmp	access:public	signature:() const
protocol	/usr/include/boost/asio/ip/tcp.hpp	/^  int protocol() const$/;"	f	class:boost::asio::ip::tcp	access:public	signature:() const
protocol	/usr/include/boost/asio/ip/udp.hpp	/^  int protocol() const$/;"	f	class:boost::asio::ip::udp	access:public	signature:() const
protocol	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  protocol_type protocol() const$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:() const
protocol	/usr/include/boost/asio/local/datagram_protocol.hpp	/^  int protocol() const$/;"	f	class:boost::asio::local::datagram_protocol	access:public	signature:() const
protocol	/usr/include/boost/asio/local/stream_protocol.hpp	/^  int protocol() const$/;"	f	class:boost::asio::local::stream_protocol	access:public	signature:() const
protocol_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    protocol_type protocol_;$/;"	m	class:boost::asio::detail::reactive_socket_service::implementation_type	access:private
protocol_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    protocol_type protocol_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::implementation_type	access:private
protocol_	/usr/include/boost/asio/ip/icmp.hpp	/^  int protocol_;$/;"	m	class:boost::asio::ip::icmp	access:private
protocol_type	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_datagram_socket	access:public
protocol_type	/usr/include/boost/asio/basic_raw_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_raw_socket	access:public
protocol_type	/usr/include/boost/asio/basic_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_socket	access:public
protocol_type	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_socket_acceptor	access:public
protocol_type	/usr/include/boost/asio/basic_stream_socket.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::basic_stream_socket	access:public
protocol_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::datagram_socket_service	access:public
protocol_type	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::detail::reactive_socket_service	access:public
protocol_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::detail::win_iocp_socket_service	access:public
protocol_type	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:boost::asio::ip::basic_endpoint	access:public
protocol_type	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:boost::asio::ip::basic_resolver	access:public
protocol_type	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:boost::asio::ip::basic_resolver_entry	access:public
protocol_type	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:boost::asio::ip::basic_resolver_query	access:public
protocol_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef InternetProtocol protocol_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
protocol_type	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::local::basic_endpoint	access:public
protocol_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::raw_socket_service	access:public
protocol_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:public
protocol_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef Protocol protocol_type;$/;"	t	class:boost::asio::stream_socket_service	access:public
protocol_type_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    int protocol_type_;$/;"	m	class:boost::asio::detail::receive_from_operation	access:private
protocol_type_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    int protocol_type_;$/;"	m	class:boost::asio::detail::receive_operation	access:private
ptr_	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  overlapped_operation_base* ptr_;$/;"	m	class:boost::asio::detail::win_iocp_overlapped_ptr	access:private
push	/usr/include/boost/asio/detail/handler_queue.hpp	/^  void push(handler* h)$/;"	f	class:boost::asio::detail::handler_queue	access:public	signature:(handler* h)
push	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  void push(handler* h)$/;"	f	class:boost::asio::detail::indirect_handler_queue	access:public	signature:(handler* h)
putback_max	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  enum { putback_max = 8 };$/;"	e	enum:boost::asio::basic_socket_streambuf::__anon1
put_buffer_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  boost::array<char, buffer_size> put_buffer_;$/;"	m	class:boost::asio::basic_socket_streambuf	access:private
p_	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^  void* p_;$/;"	m	class:boost::asio::detail::local_free_on_block_exit	access:private
query	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  typedef typename InternetProtocol::resolver_query query;$/;"	t	class:boost::asio::ip::basic_resolver	access:public
query_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    query_type query_;$/;"	m	class:boost::asio::detail::resolver_service::resolve_query_handler	access:private
query_type	/usr/include/boost/asio/detail/resolver_service.hpp	/^  typedef typename Protocol::resolver_query query_type;$/;"	t	class:boost::asio::detail::resolver_service	access:public
query_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^  typedef typename InternetProtocol::resolver_query query_type;$/;"	t	class:boost::asio::ip::resolver_service	access:public
random_access_handle	/usr/include/boost/asio/windows/random_access_handle.hpp	/^typedef basic_random_access_handle<> random_access_handle;$/;"	t	namespace:boost::asio::windows
random_access_handle_service	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  explicit random_access_handle_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(boost::asio::io_service& io_service)
random_access_handle_service	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^class random_access_handle_service$/;"	c	namespace:boost::asio::windows	inherits:boost::asio::io_service::service
raw_handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  raw_handler_ptr(handler_type& handler)$/;"	f	class:boost::asio::detail::raw_handler_ptr	access:public	signature:(handler_type& handler)
raw_handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^class raw_handler_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
raw_ptr_type	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  typedef raw_handler_ptr<Alloc_Traits> raw_ptr_type;$/;"	t	class:boost::asio::detail::handler_ptr	access:public
raw_socket_service	/usr/include/boost/asio/raw_socket_service.hpp	/^  explicit raw_socket_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(boost::asio::io_service& io_service)
raw_socket_service	/usr/include/boost/asio/raw_socket_service.hpp	/^class raw_socket_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
rdbuf	/usr/include/boost/asio/basic_socket_iostream.hpp	/^  basic_socket_streambuf<Protocol, StreamSocketService>* rdbuf() const$/;"	f	class:boost::asio::basic_socket_iostream	access:public	signature:() const
reactive_descriptor_service	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^class reactive_descriptor_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
reactive_serial_port_service	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  reactive_serial_port_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(boost::asio::io_service& io_service)
reactive_serial_port_service	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^class reactive_serial_port_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
reactive_socket_service	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^class reactive_socket_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
reactor_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  Reactor& reactor_;$/;"	m	namespace:boost::asio::detail	access:private
reactor_	/usr/include/boost/asio/detail/select_reactor.hpp	/^    select_reactor<Own_Thread>& reactor_;$/;"	m	class:boost::asio::detail::select_reactor::connect_handler_wrapper	access:private
reactor_data_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    typename Reactor::per_descriptor_data reactor_data_;$/;"	m	class:boost::asio::detail::reactive_descriptor_service::implementation_type	access:private
reactor_data_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    typename Reactor::per_descriptor_data reactor_data_;$/;"	m	class:boost::asio::detail::reactive_socket_service::implementation_type	access:private
reactor_data_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    reactor_type::per_descriptor_data reactor_data_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::implementation_type	access:private
reactor_op_queue	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^  reactor_op_queue()$/;"	f	class:boost::asio::detail::reactor_op_queue	access:public	signature:()
reactor_op_queue	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^class reactor_op_queue$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
reactor_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  typedef detail::select_reactor<true> reactor_type;$/;"	t	class:boost::asio::detail::win_iocp_socket_service	access:public
read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, basic_streambuf<Allocator>& b);$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, basic_streambuf<Allocator>& b)
read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers);$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers)
read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers, CompletionCondition completion_condition)
read	/usr/include/boost/asio/read.hpp	/^std::size_t read(SyncReadStream& s, const MutableBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, const MutableBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
ready_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    long ready_;$/;"	m	class:boost::asio::detail::win_iocp_io_service::operation	access:private
read_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  read_func  read_;$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b)
read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers)
read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition)
read_at	/usr/include/boost/asio/read_at.hpp	/^std::size_t read_at(SyncRandomAccessReadDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessReadDevice& d, boost::uint64_t offset, const MutableBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
read_descriptor	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  int read_descriptor() const$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:() const
read_descriptor	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  int read_descriptor() const$/;"	f	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:() const
read_descriptor	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  socket_type read_descriptor() const$/;"	f	class:boost::asio::detail::socket_select_interrupter	access:public	signature:() const
read_descriptor_	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  int read_descriptor_;$/;"	m	class:boost::asio::detail::eventfd_select_interrupter	access:private
read_descriptor_	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  int read_descriptor_;$/;"	m	class:boost::asio::detail::pipe_select_interrupter	access:private
read_descriptor_	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  socket_type read_descriptor_;$/;"	m	class:boost::asio::detail::socket_select_interrupter	access:private
read_func	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  typedef boost::function<int ()> read_func;$/;"	t	class:boost::asio::ssl::detail::openssl_operation	access:private
read_operation	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    read_operation(int descriptor, boost::asio::io_service& io_service,$/;"	f	class:boost::asio::detail::read_operation	access:public	signature:(int descriptor, boost::asio::io_service& io_service, const MutableBufferSequence& buffers, Handler handler)
read_operation	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  class read_operation :$/;"	c	namespace:boost::asio::detail	inherits:handler_base_from_member
read_operation	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    read_operation(win_iocp_io_service& io_service,$/;"	f	class:boost::asio::detail::win_iocp_handle_service::read_operation	access:public	signature:(win_iocp_io_service& io_service, const MutableBufferSequence& buffers, Handler handler)
read_operation	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  class read_operation$/;"	c	class:boost::asio::detail::win_iocp_handle_service	inherits:operation	access:public
read_op_queue_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  reactor_op_queue<socket_type> read_op_queue_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
read_op_queue_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  reactor_op_queue<socket_type> read_op_queue_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
read_op_queue_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  reactor_op_queue<socket_type> read_op_queue_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
read_op_queue_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  reactor_op_queue<socket_type> read_op_queue_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
read_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const MutableBufferSequence& buffers)
read_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers)
read_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const MutableBufferSequence& buffers)
read_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const MutableBufferSequence& buffers)
read_some	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const MutableBufferSequence& buffers)
read_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const null_buffers&, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, const null_buffers& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const MutableBufferSequence& buffers)
read_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  std::size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/serial_port_service.hpp	/^  std::size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  std::size_t read_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const Mutable_Buffers& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/ssl/stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(const MutableBufferSequence& buffers)
read_some	/usr/include/boost/asio/ssl/stream.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/ssl/stream_service.hpp	/^  std::size_t read_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const MutableBufferSequence& buffers)
read_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  std::size_t read_some(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  std::size_t read_some(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const null_buffers& buffers, boost::system::error_code& ec)
read_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  std::size_t read_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const MutableBufferSequence& buffers)
read_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  std::size_t read_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some_at	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  std::size_t read_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const MutableBufferSequence& buffers, boost::system::error_code& ec)
read_some_handler	/usr/include/boost/asio/buffered_read_stream.hpp	/^    read_some_handler(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::buffered_read_stream::read_some_handler	access:public	signature:(boost::asio::io_service& io_service, detail::buffered_stream_storage& storage, const MutableBufferSequence& buffers, ReadHandler handler)
read_some_handler	/usr/include/boost/asio/buffered_read_stream.hpp	/^  class read_some_handler$/;"	c	class:boost::asio::buffered_read_stream	access:public
read_stream_type	/usr/include/boost/asio/buffered_stream.hpp	/^  typedef buffered_read_stream<write_stream_type&> read_stream_type;$/;"	t	class:boost::asio::buffered_stream	access:private
read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, char delim)
read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, char delim, boost::system::error_code& ec)
read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const boost::regex& expr)
read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const boost::regex& expr, boost::system::error_code& ec)
read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const std::string& delim)
read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, const std::string& delim, boost::system::error_code& ec)
read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, MatchCondition match_condition, boost::system::error_code& ec, typename boost::enable_if<is_match_condition<MatchCondition> >::type* = 0)
read_until	/usr/include/boost/asio/read_until.hpp	/^std::size_t read_until(SyncReadStream& s,$/;"	p	namespace:boost::asio	signature:(SyncReadStream& s, boost::asio::basic_streambuf<Allocator>& b, MatchCondition match_condition, typename boost::enable_if<is_match_condition<MatchCondition> >::type* = 0)
receive	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers)
receive	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags)
receive	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
receive	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers)
receive	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags)
receive	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
receive	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers)
receive	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags)
receive	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t receive(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
receive	/usr/include/boost/asio/datagram_socket_service.hpp	/^  std::size_t receive(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
receive	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  size_t receive(implementation_type& impl, const null_buffers&,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const null_buffers&, socket_base::message_flags, boost::system::error_code& ec)
receive	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  size_t receive(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
receive	/usr/include/boost/asio/raw_socket_service.hpp	/^  std::size_t receive(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
receive	/usr/include/boost/asio/stream_socket_service.hpp	/^  std::size_t receive(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
receive_buffer_size	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_RCVBUF> receive_buffer_size;$/;"	t	class:boost::asio::socket_base	access:public
receive_buffer_size	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined receive_buffer_size;$/;"	t	class:boost::asio::socket_base	access:public
receive_from	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint)
receive_from	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags)
receive_from	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
receive_from	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint)
receive_from	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags)
receive_from	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t receive_from(const MutableBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
receive_from	/usr/include/boost/asio/datagram_socket_service.hpp	/^  std::size_t receive_from(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
receive_from	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  size_t receive_from(implementation_type& impl, const null_buffers&,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const null_buffers&, endpoint_type& sender_endpoint, socket_base::message_flags, boost::system::error_code& ec)
receive_from	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  size_t receive_from(implementation_type& impl,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
receive_from	/usr/include/boost/asio/raw_socket_service.hpp	/^  std::size_t receive_from(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const MutableBufferSequence& buffers, endpoint_type& sender_endpoint, socket_base::message_flags flags, boost::system::error_code& ec)
receive_from_operation	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    receive_from_operation(socket_type socket, int protocol_type,$/;"	f	class:boost::asio::detail::receive_from_operation	access:public	signature:(socket_type socket, int protocol_type, boost::asio::io_service& io_service, const MutableBufferSequence& buffers, endpoint_type& endpoint, socket_base::message_flags flags, Handler handler)
receive_from_operation	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  class receive_from_operation :$/;"	c	namespace:boost::asio::detail	inherits:handler_base_from_member
receive_low_watermark	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_RCVLOWAT> receive_low_watermark;$/;"	t	class:boost::asio::socket_base	access:public
receive_low_watermark	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined receive_low_watermark;$/;"	t	class:boost::asio::socket_base	access:public
receive_operation	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    receive_operation(socket_type socket, int protocol_type,$/;"	f	class:boost::asio::detail::receive_operation	access:public	signature:(socket_type socket, int protocol_type, boost::asio::io_service& io_service, const MutableBufferSequence& buffers, socket_base::message_flags flags, Handler handler)
receive_operation	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  class receive_operation :$/;"	c	namespace:boost::asio::detail	inherits:handler_base_from_member
recv	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int recv(socket_type s, buf* bufs, size_t count, int flags,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int flags, boost::system::error_code& ec)
recvfrom	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int recvfrom(socket_type s, buf* bufs, size_t count, int flags,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, buf* bufs, size_t count, int flags, socket_addr_type* addr, std::size_t* addrlen, boost::system::error_code& ec)
recv_buf	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    net_buffer recv_buf;$/;"	m	struct:boost::asio::ssl::detail::openssl_stream_service::impl_struct	access:public
recv_buf_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  net_buffer& recv_buf_;$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
ref	/usr/include/boost/asio/read_until.hpp	/^    static const T& ref();$/;"	p	struct:boost::asio::detail::has_result_type	access:public	signature:()
ref_	/usr/include/boost/asio/detail/winsock_init.hpp	/^  boost::shared_ptr<do_init> ref_;$/;"	m	class:boost::asio::detail::winsock_init	access:private
ref_	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^  boost::shared_ptr<do_init> ref_;$/;"	m	class:boost::asio::ssl::detail::openssl_init	access:private
register_descriptor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  int register_descriptor(socket_type, per_descriptor_data&)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type, per_descriptor_data&)
register_descriptor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  int register_descriptor(socket_type descriptor,$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data)
register_descriptor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  int register_descriptor(socket_type, per_descriptor_data& descriptor_data)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type, per_descriptor_data& descriptor_data)
register_descriptor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  int register_descriptor(socket_type, per_descriptor_data&)$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type, per_descriptor_data&)
register_handle	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  boost::system::error_code register_handle($/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:( HANDLE handle, boost::system::error_code& ec)
rehash	/usr/include/boost/asio/detail/hash_map.hpp	/^  void rehash(std::size_t num_buckets)$/;"	f	class:boost::asio::detail::hash_map	access:private	signature:(std::size_t num_buckets)
release	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  pointer_type release()$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:()
release	/usr/include/boost/asio/detail/handler_queue.hpp	/^    handler* release()$/;"	f	class:boost::asio::detail::handler_queue::scoped_ptr	access:public	signature:()
release	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    handler* release()$/;"	f	class:boost::asio::detail::indirect_handler_queue::scoped_ptr	access:public	signature:()
release	/usr/include/boost/asio/detail/socket_holder.hpp	/^  socket_type release()$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:()
release	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  OVERLAPPED* release()$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:()
release	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  OVERLAPPED* release()$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:()
remote_endpoint	/usr/include/boost/asio/basic_socket.hpp	/^  endpoint_type remote_endpoint() const$/;"	f	class:boost::asio::basic_socket	access:public	signature:() const
remote_endpoint	/usr/include/boost/asio/basic_socket.hpp	/^  endpoint_type remote_endpoint(boost::system::error_code& ec) const$/;"	f	class:boost::asio::basic_socket	access:public	signature:(boost::system::error_code& ec) const
remote_endpoint	/usr/include/boost/asio/datagram_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
remote_endpoint	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    endpoint_type remote_endpoint() const$/;"	f	class:boost::asio::detail::win_iocp_socket_service::native_type	access:public	signature:() const
remote_endpoint	/usr/include/boost/asio/raw_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
remote_endpoint	/usr/include/boost/asio/stream_socket_service.hpp	/^  endpoint_type remote_endpoint(const implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(const implementation_type& impl, boost::system::error_code& ec) const
remote_endpoint_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    endpoint_type remote_endpoint_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::native_type	access:private
remove_timer	/usr/include/boost/asio/detail/timer_queue.hpp	/^  void remove_timer(timer_base* t)$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(timer_base* t)
remove_timer_queue	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void remove_timer_queue(timer_queue<Time_Traits>& timer_queue)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
remove_timer_queue	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void remove_timer_queue(timer_queue<Time_Traits>& timer_queue)$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
remove_timer_queue	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void remove_timer_queue(timer_queue<Time_Traits>& timer_queue)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
remove_timer_queue	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void remove_timer_queue(timer_queue<Time_Traits>& timer_queue)$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
remove_timer_queue	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void remove_timer_queue(timer_queue<Time_Traits>& timer_queue)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(timer_queue<Time_Traits>& timer_queue)
reserve	/usr/include/boost/asio/basic_streambuf.hpp	/^  void reserve(std::size_t n)$/;"	f	class:boost::asio::basic_streambuf	access:protected	signature:(std::size_t n)
reset	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  bool reset()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:()
reset	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:()
reset	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  bool reset()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:()
reset	/usr/include/boost/asio/detail/socket_holder.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:()
reset	/usr/include/boost/asio/detail/socket_holder.hpp	/^  void reset(socket_type s)$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:(socket_type s)
reset	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  bool reset()$/;"	f	class:boost::asio::detail::socket_select_interrupter	access:public	signature:()
reset	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
reset	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
reset	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    void reset()$/;"	f	class:boost::asio::detail::win_iocp_io_service::operation	access:public	signature:()
reset	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
reset	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  void reset()$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:()
reset	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  void reset(boost::asio::io_service& io_service, Handler handler)$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:(boost::asio::io_service& io_service, Handler handler)
reset	/usr/include/boost/asio/io_service.hpp	/^  void reset();$/;"	p	class:boost::asio::io_service	access:public	signature:()
reset	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  void reset() { data_start_ = buf_; data_end_ = buf_; }               $/;"	f	class:boost::asio::ssl::detail::net_buffer	access:public	signature:()
reset	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  void reset()$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:()
reset	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  void reset(boost::asio::io_service& io_service, Handler handler)$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:(boost::asio::io_service& io_service, Handler handler)
resize	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  void resize(size_type length)$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:(size_type length)
resize	/usr/include/boost/asio/detail/socket_option.hpp	/^  void resize(const Protocol&, std::size_t s)$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&, std::size_t s)
resize	/usr/include/boost/asio/detail/socket_option.hpp	/^  void resize(const Protocol&, std::size_t s)$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&, std::size_t s)
resize	/usr/include/boost/asio/detail/socket_option.hpp	/^  void resize(const Protocol&, std::size_t s)$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&, std::size_t s)
resize	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  void resize(std::size_t size)$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:(std::size_t size)
resize	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  void resize(const Protocol& protocol, std::size_t s)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol, std::size_t s)
resize	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  void resize(const Protocol& protocol, std::size_t s)$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol, std::size_t s)
resize	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  void resize(const Protocol&, std::size_t s)$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol&, std::size_t s)
resize	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  void resize(std::size_t size)$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:(std::size_t size)
resolve	/usr/include/boost/asio/detail/resolver_service.hpp	/^  iterator_type resolve(implementation_type&, const query_type& query,$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type&, const query_type& query, boost::system::error_code& ec)
resolve	/usr/include/boost/asio/detail/resolver_service.hpp	/^  iterator_type resolve(implementation_type&,$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(implementation_type&, const endpoint_type& endpoint, boost::system::error_code& ec)
resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  iterator resolve(const endpoint_type& e)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const endpoint_type& e)
resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  iterator resolve(const endpoint_type& e, boost::system::error_code& ec)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const endpoint_type& e, boost::system::error_code& ec)
resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  iterator resolve(const query& q)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const query& q)
resolve	/usr/include/boost/asio/ip/basic_resolver.hpp	/^  iterator resolve(const query& q, boost::system::error_code& ec)$/;"	f	class:boost::asio::ip::basic_resolver	access:public	signature:(const query& q, boost::system::error_code& ec)
resolve	/usr/include/boost/asio/ip/resolver_service.hpp	/^  iterator_type resolve(implementation_type& impl, const query_type& query,$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl, const query_type& query, boost::system::error_code& ec)
resolve	/usr/include/boost/asio/ip/resolver_service.hpp	/^  iterator_type resolve(implementation_type& impl,$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(implementation_type& impl, const endpoint_type& endpoint, boost::system::error_code& ec)
resolver	/usr/include/boost/asio/ip/icmp.hpp	/^  typedef basic_resolver<icmp> resolver;$/;"	t	class:boost::asio::ip::icmp	access:public
resolver	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_resolver<tcp> resolver;$/;"	t	class:boost::asio::ip::tcp	access:public
resolver	/usr/include/boost/asio/ip/udp.hpp	/^  typedef basic_resolver<udp> resolver;$/;"	t	class:boost::asio::ip::udp	access:public
resolver_iterator	/usr/include/boost/asio/ip/icmp.hpp	/^  typedef basic_resolver_iterator<icmp> resolver_iterator;$/;"	t	class:boost::asio::ip::icmp	access:public
resolver_iterator	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_resolver_iterator<tcp> resolver_iterator;$/;"	t	class:boost::asio::ip::tcp	access:public
resolver_iterator	/usr/include/boost/asio/ip/udp.hpp	/^  typedef basic_resolver_iterator<udp> resolver_iterator;$/;"	t	class:boost::asio::ip::udp	access:public
resolver_query	/usr/include/boost/asio/ip/icmp.hpp	/^  typedef basic_resolver_query<icmp> resolver_query;$/;"	t	class:boost::asio::ip::icmp	access:public
resolver_query	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_resolver_query<tcp> resolver_query;$/;"	t	class:boost::asio::ip::tcp	access:public
resolver_query	/usr/include/boost/asio/ip/udp.hpp	/^  typedef basic_resolver_query<udp> resolver_query;$/;"	t	class:boost::asio::ip::udp	access:public
resolver_query_base	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^class resolver_query_base$/;"	c	namespace:boost::asio::ip
resolver_service	/usr/include/boost/asio/detail/resolver_service.hpp	/^  resolver_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:(boost::asio::io_service& io_service)
resolver_service	/usr/include/boost/asio/detail/resolver_service.hpp	/^class resolver_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
resolver_service	/usr/include/boost/asio/ip/resolver_service.hpp	/^  explicit resolver_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:(boost::asio::io_service& io_service)
resolver_service	/usr/include/boost/asio/ip/resolver_service.hpp	/^class resolver_service$/;"	c	namespace:boost::asio::ip	inherits:boost::asio::io_service::service
resolve_and_connect	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  void resolve_and_connect(const ResolverQuery& query,$/;"	f	class:boost::asio::basic_socket_streambuf	access:private	signature:(const ResolverQuery& query, boost::system::error_code& ec)
resolve_endpoint_handler	/usr/include/boost/asio/detail/resolver_service.hpp	/^    resolve_endpoint_handler(implementation_type impl,$/;"	f	class:boost::asio::detail::resolver_service::resolve_endpoint_handler	access:public	signature:(implementation_type impl, const endpoint_type& endpoint, boost::asio::io_service& io_service, Handler handler)
resolve_endpoint_handler	/usr/include/boost/asio/detail/resolver_service.hpp	/^  class resolve_endpoint_handler$/;"	c	class:boost::asio::detail::resolver_service	access:public
resolve_query_handler	/usr/include/boost/asio/detail/resolver_service.hpp	/^    resolve_query_handler(implementation_type impl, const query_type& query,$/;"	f	class:boost::asio::detail::resolver_service::resolve_query_handler	access:public	signature:(implementation_type impl, const query_type& query, boost::asio::io_service& io_service, Handler handler)
resolve_query_handler	/usr/include/boost/asio/detail/resolver_service.hpp	/^  class resolve_query_handler$/;"	c	class:boost::asio::detail::resolver_service	access:public
result	/usr/include/boost/asio/detail/winsock_init.hpp	/^    int result() const$/;"	f	struct:boost::asio::detail::winsock_init::do_init	access:public	signature:() const
result_	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    boost::system::error_code result_;$/;"	m	class:boost::asio::detail::reactor_op_queue::op_base	access:private
result_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    boost::system::error_code result_;$/;"	m	class:boost::asio::detail::timer_queue::timer_base	access:private
result_	/usr/include/boost/asio/detail/winsock_init.hpp	/^    int result_;$/;"	m	struct:boost::asio::detail::winsock_init::do_init	access:private
result_type	/usr/include/boost/asio/completion_condition.hpp	/^  typedef std::size_t result_type;$/;"	t	class:boost::asio::detail::transfer_all_t	access:public
result_type	/usr/include/boost/asio/completion_condition.hpp	/^  typedef std::size_t result_type;$/;"	t	class:boost::asio::detail::transfer_at_least_t	access:public
result_type	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  typedef void result_type;$/;"	t	class:boost::asio::detail::wrapped_handler	access:public
reuse_address	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_REUSEADDR> reuse_address;$/;"	t	class:boost::asio::socket_base	access:public
reuse_address	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined reuse_address;$/;"	t	class:boost::asio::socket_base	access:public
rewrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  explicit rewrapped_handler(const Handler& handler, const Context& context)$/;"	f	class:boost::asio::detail::rewrapped_handler	access:public	signature:(const Handler& handler, const Context& context)
rewrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^class rewrapped_handler$/;"	c	namespace:boost::asio::detail
run	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void run(bool block)$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:private	signature:(bool block)
run	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void run(bool block)$/;"	f	class:boost::asio::detail::epoll_reactor	access:private	signature:(bool block)
run	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void run(bool block)$/;"	f	class:boost::asio::detail::kqueue_reactor	access:private	signature:(bool block)
run	/usr/include/boost/asio/detail/posix_thread.hpp	/^    virtual void run() = 0;$/;"	p	class:boost::asio::detail::posix_thread::func_base	access:public	signature:()
run	/usr/include/boost/asio/detail/posix_thread.hpp	/^    virtual void run()$/;"	f	class:boost::asio::detail::posix_thread::func	access:public	signature:()
run	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void run(bool block)$/;"	f	class:boost::asio::detail::select_reactor	access:private	signature:(bool block)
run	/usr/include/boost/asio/detail/task_io_service.hpp	/^  size_t run(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
run	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  size_t run(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
run	/usr/include/boost/asio/detail/wince_thread.hpp	/^    virtual void run() = 0;$/;"	p	class:boost::asio::detail::wince_thread::func_base	access:public	signature:()
run	/usr/include/boost/asio/detail/wince_thread.hpp	/^    virtual void run()$/;"	f	class:boost::asio::detail::wince_thread::func	access:public	signature:()
run	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  size_t run(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(boost::system::error_code& ec)
run	/usr/include/boost/asio/detail/win_thread.hpp	/^    virtual void run() = 0;$/;"	p	class:boost::asio::detail::win_thread::func_base	access:public	signature:()
run	/usr/include/boost/asio/detail/win_thread.hpp	/^    virtual void run()$/;"	f	class:boost::asio::detail::win_thread::func	access:public	signature:()
run	/usr/include/boost/asio/io_service.hpp	/^  std::size_t run();$/;"	p	class:boost::asio::io_service	access:public	signature:()
run	/usr/include/boost/asio/io_service.hpp	/^  std::size_t run(boost::system::error_code& ec);$/;"	p	class:boost::asio::io_service	access:public	signature:(boost::system::error_code& ec)
run_one	/usr/include/boost/asio/detail/task_io_service.hpp	/^  size_t run_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
run_one	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  size_t run_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(boost::system::error_code& ec)
run_one	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  size_t run_one(boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(boost::system::error_code& ec)
run_one	/usr/include/boost/asio/io_service.hpp	/^  std::size_t run_one();$/;"	p	class:boost::asio::io_service	access:public	signature:()
run_one	/usr/include/boost/asio/io_service.hpp	/^  std::size_t run_one(boost::system::error_code& ec);$/;"	p	class:boost::asio::io_service	access:public	signature:(boost::system::error_code& ec)
run_thread	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void run_thread()$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:private	signature:()
run_thread	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void run_thread()$/;"	f	class:boost::asio::detail::epoll_reactor	access:private	signature:()
run_thread	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void run_thread()$/;"	f	class:boost::asio::detail::kqueue_reactor	access:private	signature:()
run_thread	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void run_thread()$/;"	f	class:boost::asio::detail::select_reactor	access:private	signature:()
s6_addr	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	72;"	d
safe_cancellation_thread_id_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    DWORD safe_cancellation_thread_id_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::implementation_type	access:private
safe_cancellation_thread_id_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    DWORD safe_cancellation_thread_id_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::implementation_type	access:private
salt_	/usr/include/boost/asio/detail/strand_service.hpp	/^  std::size_t salt_;$/;"	m	class:boost::asio::detail::strand_service	access:private
scatter_read	/usr/include/boost/asio/detail/descriptor_ops.hpp	/^inline int scatter_read(int d, buf* bufs, size_t count,$/;"	f	namespace:boost::asio::detail::descriptor_ops	signature:(int d, buf* bufs, size_t count, boost::system::error_code& ec)
scheduler_	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  Timer_Scheduler& scheduler_;$/;"	m	class:boost::asio::detail::deadline_timer_service	access:private
schedule_timer	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void schedule_timer(timer_queue<Time_Traits>& timer_queue,$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue, const typename Time_Traits::time_type& time, Handler handler, void* token)
schedule_timer	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void schedule_timer(timer_queue<Time_Traits>& timer_queue,$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue, const typename Time_Traits::time_type& time, Handler handler, void* token)
schedule_timer	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void schedule_timer(timer_queue<Time_Traits>& timer_queue,$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue, const typename Time_Traits::time_type& time, Handler handler, void* token)
schedule_timer	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void schedule_timer(timer_queue<Time_Traits>& timer_queue,$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(timer_queue<Time_Traits>& timer_queue, const typename Time_Traits::time_type& time, Handler handler, void* token)
schedule_timer	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void schedule_timer(timer_queue<Time_Traits>& timer_queue,$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(timer_queue<Time_Traits>& timer_queue, const typename Time_Traits::time_type& time, Handler handler, void* token)
scoped_lock	/usr/include/boost/asio/detail/null_mutex.hpp	/^  typedef boost::asio::detail::scoped_lock<null_mutex> scoped_lock;$/;"	t	class:boost::asio::detail::null_mutex	access:public
scoped_lock	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  typedef boost::asio::detail::scoped_lock<posix_mutex> scoped_lock;$/;"	t	class:boost::asio::detail::posix_mutex	access:public
scoped_lock	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  scoped_lock(Mutex& m)$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:(Mutex& m)
scoped_lock	/usr/include/boost/asio/detail/scoped_lock.hpp	/^class scoped_lock$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
scoped_lock	/usr/include/boost/asio/detail/win_mutex.hpp	/^  typedef boost::asio::detail::scoped_lock<win_mutex> scoped_lock;$/;"	t	class:boost::asio::detail::win_mutex	access:public
scoped_ptr	/usr/include/boost/asio/detail/handler_queue.hpp	/^    explicit scoped_ptr(handler* h)$/;"	f	class:boost::asio::detail::handler_queue::scoped_ptr	access:public	signature:(handler* h)
scoped_ptr	/usr/include/boost/asio/detail/handler_queue.hpp	/^  class scoped_ptr$/;"	c	class:boost::asio::detail::handler_queue	inherits:noncopyable	access:public
scoped_ptr	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    explicit scoped_ptr(handler* h)$/;"	f	class:boost::asio::detail::indirect_handler_queue::scoped_ptr	access:public	signature:(handler* h)
scoped_ptr	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  class scoped_ptr$/;"	c	class:boost::asio::detail::indirect_handler_queue	inherits:noncopyable	access:public
scope_id	/usr/include/boost/asio/ip/address_v6.hpp	/^  unsigned long scope_id() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
scope_id	/usr/include/boost/asio/ip/address_v6.hpp	/^  void scope_id(unsigned long id)$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(unsigned long id)
scope_id_	/usr/include/boost/asio/ip/address_v6.hpp	/^  unsigned long scope_id_;$/;"	m	class:boost::asio::ip::address_v6	access:private
select	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int select(int nfds, fd_set* readfds, fd_set* writefds,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, timeval* timeout, boost::system::error_code& ec)
select_interrupter	/usr/include/boost/asio/detail/select_interrupter.hpp	/^typedef socket_select_interrupter select_interrupter;$/;"	t	namespace:boost::asio::detail
select_in_progress_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  bool select_in_progress_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
select_reactor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  select_reactor(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(boost::asio::io_service& io_service)
select_reactor	/usr/include/boost/asio/detail/select_reactor.hpp	/^class select_reactor$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
send	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers)
send	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags)
send	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
send	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers)
send	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags)
send	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
send	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers)
send	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags)
send	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t send(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
send	/usr/include/boost/asio/datagram_socket_service.hpp	/^  std::size_t send(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
send	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int send(socket_type s, const buf* bufs, size_t count, int flags,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const buf* bufs, size_t count, int flags, boost::system::error_code& ec)
send	/usr/include/boost/asio/raw_socket_service.hpp	/^  std::size_t send(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
send	/usr/include/boost/asio/stream_socket_service.hpp	/^  std::size_t send(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, socket_base::message_flags flags, boost::system::error_code& ec)
sender_endpoint_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    endpoint_type& sender_endpoint_;$/;"	m	class:boost::asio::detail::receive_from_operation	access:private
sendto	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int sendto(socket_type s, const buf* bufs, size_t count, int flags,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, const buf* bufs, size_t count, int flags, const socket_addr_type* addr, std::size_t addrlen, boost::system::error_code& ec)
send_break	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code send_break(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(boost::system::error_code& ec)
send_break	/usr/include/boost/asio/basic_serial_port.hpp	/^  void send_break()$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:()
send_break	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code send_break(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
send_break	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code send_break(implementation_type&,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type&, boost::system::error_code& ec)
send_break	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code send_break(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
send_buffer_size	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_SNDBUF> send_buffer_size;$/;"	t	class:boost::asio::socket_base	access:public
send_buffer_size	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined send_buffer_size;$/;"	t	class:boost::asio::socket_base	access:public
send_buf_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  net_buffer send_buf_; \/\/ buffers for network IO$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
send_low_watermark	/usr/include/boost/asio/socket_base.hpp	/^    SOL_SOCKET, SO_SNDLOWAT> send_low_watermark;$/;"	t	class:boost::asio::socket_base	access:public
send_low_watermark	/usr/include/boost/asio/socket_base.hpp	/^  typedef implementation_defined send_low_watermark;$/;"	t	class:boost::asio::socket_base	access:public
send_to	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination)
send_to	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags)
send_to	/usr/include/boost/asio/basic_datagram_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_datagram_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
send_to	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination)
send_to	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags)
send_to	/usr/include/boost/asio/basic_raw_socket.hpp	/^  std::size_t send_to(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_raw_socket	access:public	signature:(const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
send_to	/usr/include/boost/asio/datagram_socket_service.hpp	/^  std::size_t send_to(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
send_to	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  size_t send_to(implementation_type& impl, const ConstBufferSequence& buffers,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
send_to	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  size_t send_to(implementation_type& impl, const null_buffers&,$/;"	f	namespace:boost::asio::detail	signature:(implementation_type& impl, const null_buffers&, socket_base::message_flags, const endpoint_type&, boost::system::error_code& ec)
send_to	/usr/include/boost/asio/raw_socket_service.hpp	/^  std::size_t send_to(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, const endpoint_type& destination, socket_base::message_flags flags, boost::system::error_code& ec)
send_to_operation	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    send_to_operation(socket_type socket, boost::asio::io_service& io_service,$/;"	f	class:boost::asio::detail::send_to_operation	access:public	signature:(socket_type socket, boost::asio::io_service& io_service, const ConstBufferSequence& buffers, const endpoint_type& endpoint, socket_base::message_flags flags, Handler handler)
send_to_operation	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^  class send_to_operation :$/;"	c	namespace:boost::asio::detail	inherits:handler_base_from_member
serial_port	/usr/include/boost/asio/serial_port.hpp	/^typedef basic_serial_port<> serial_port;$/;"	t	namespace:boost::asio
serial_port_base	/usr/include/boost/asio/serial_port_base.hpp	/^class serial_port_base$/;"	c	namespace:boost::asio
serial_port_service	/usr/include/boost/asio/serial_port_service.hpp	/^  explicit serial_port_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(boost::asio::io_service& io_service)
serial_port_service	/usr/include/boost/asio/serial_port_service.hpp	/^class serial_port_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
server	/usr/include/boost/asio/ssl/stream_base.hpp	/^    server$/;"	e	enum:boost::asio::ssl::stream_base::handshake_type
service	/usr/include/boost/asio/basic_io_object.hpp	/^  service_type& service;$/;"	m	class:boost::asio::basic_io_object	access:protected
service	/usr/include/boost/asio/io_service.hpp	/^  service(boost::asio::io_service& owner);$/;"	p	class:boost::asio::io_service::service	access:protected	signature:(boost::asio::io_service& owner)
service	/usr/include/boost/asio/io_service.hpp	/^class io_service::service$/;"	c	class:boost::asio::io_service	inherits:noncopyable
service_	/usr/include/boost/asio/ssl/basic_context.hpp	/^  service_type& service_;$/;"	m	class:boost::asio::ssl::basic_context	access:private
service_	/usr/include/boost/asio/ssl/stream.hpp	/^  service_type& service_;$/;"	m	class:boost::asio::ssl::stream	access:private
service_	/usr/include/boost/asio/strand.hpp	/^  boost::asio::detail::strand_service& service_;$/;"	m	class:boost::asio::io_service::strand	access:private
service_already_exists	/usr/include/boost/asio/io_service.hpp	/^  service_already_exists()$/;"	f	class:boost::asio::service_already_exists	access:public	signature:()
service_already_exists	/usr/include/boost/asio/io_service.hpp	/^class service_already_exists$/;"	c	namespace:boost::asio	inherits:std::logic_error
service_base	/usr/include/boost/asio/detail/service_base.hpp	/^  service_base(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::service_base	access:public	signature:(boost::asio::io_service& io_service)
service_base	/usr/include/boost/asio/detail/service_base.hpp	/^class service_base$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::io_service::service
service_id	/usr/include/boost/asio/detail/service_id.hpp	/^class service_id$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::io_service::id
service_id_matches	/usr/include/boost/asio/detail/service_registry.hpp	/^  static bool service_id_matches($/;"	f	class:boost::asio::detail::service_registry	access:private	signature:( const boost::asio::io_service::service& service, const boost::asio::detail::service_id<Service>& )
service_id_matches	/usr/include/boost/asio/detail/service_registry.hpp	/^  static bool service_id_matches($/;"	f	class:boost::asio::detail::service_registry	access:private	signature:( const boost::asio::io_service::service& service, const boost::asio::io_service::id& id)
service_impl_	/usr/include/boost/asio/datagram_socket_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::datagram_socket_service	access:private
service_impl_	/usr/include/boost/asio/deadline_timer_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::deadline_timer_service	access:private
service_impl_	/usr/include/boost/asio/detail/strand_service.hpp	/^    strand_service& service_impl_;$/;"	m	class:boost::asio::detail::strand_service::invoke_current_handler	access:private
service_impl_	/usr/include/boost/asio/detail/strand_service.hpp	/^    strand_service& service_impl_;$/;"	m	class:boost::asio::detail::strand_service::post_next_waiter_on_exit	access:private
service_impl_	/usr/include/boost/asio/ip/resolver_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::ip::resolver_service	access:private
service_impl_	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::posix::stream_descriptor_service	access:private
service_impl_	/usr/include/boost/asio/raw_socket_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::raw_socket_service	access:private
service_impl_	/usr/include/boost/asio/serial_port_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::serial_port_service	access:private
service_impl_	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::socket_acceptor_service	access:private
service_impl_	/usr/include/boost/asio/ssl/context_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::ssl::context_service	access:private
service_impl_	/usr/include/boost/asio/ssl/stream_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::ssl::stream_service	access:private
service_impl_	/usr/include/boost/asio/stream_socket_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::stream_socket_service	access:private
service_impl_	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::windows::random_access_handle_service	access:private
service_impl_	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  service_impl_type& service_impl_;$/;"	m	class:boost::asio::windows::stream_handle_service	access:private
service_impl_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^      Protocol, detail::dev_poll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::datagram_socket_service	access:private
service_impl_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^      Protocol, detail::epoll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::datagram_socket_service	access:private
service_impl_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^      Protocol, detail::kqueue_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::datagram_socket_service	access:private
service_impl_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^      Protocol, detail::select_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::datagram_socket_service	access:private
service_impl_type	/usr/include/boost/asio/datagram_socket_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::datagram_socket_service	access:private
service_impl_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^    traits_type, detail::dev_poll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::deadline_timer_service	access:private
service_impl_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^    traits_type, detail::epoll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::deadline_timer_service	access:private
service_impl_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^    traits_type, detail::kqueue_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::deadline_timer_service	access:private
service_impl_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^    traits_type, detail::select_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::deadline_timer_service	access:private
service_impl_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^    traits_type, detail::win_iocp_io_service> service_impl_type;$/;"	t	class:boost::asio::deadline_timer_service	access:private
service_impl_type	/usr/include/boost/asio/ip/resolver_service.hpp	/^    service_impl_type;$/;"	t	class:boost::asio::ip::resolver_service	access:private
service_impl_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^      detail::dev_poll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:private
service_impl_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^      detail::epoll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:private
service_impl_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^      detail::kqueue_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:private
service_impl_type	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^      detail::select_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::posix::stream_descriptor_service	access:private
service_impl_type	/usr/include/boost/asio/raw_socket_service.hpp	/^      Protocol, detail::dev_poll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::raw_socket_service	access:private
service_impl_type	/usr/include/boost/asio/raw_socket_service.hpp	/^      Protocol, detail::epoll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::raw_socket_service	access:private
service_impl_type	/usr/include/boost/asio/raw_socket_service.hpp	/^      Protocol, detail::kqueue_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::raw_socket_service	access:private
service_impl_type	/usr/include/boost/asio/raw_socket_service.hpp	/^      Protocol, detail::select_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::raw_socket_service	access:private
service_impl_type	/usr/include/boost/asio/raw_socket_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::raw_socket_service	access:private
service_impl_type	/usr/include/boost/asio/serial_port_service.hpp	/^      detail::dev_poll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::serial_port_service	access:private
service_impl_type	/usr/include/boost/asio/serial_port_service.hpp	/^      detail::epoll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::serial_port_service	access:private
service_impl_type	/usr/include/boost/asio/serial_port_service.hpp	/^      detail::kqueue_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::serial_port_service	access:private
service_impl_type	/usr/include/boost/asio/serial_port_service.hpp	/^      detail::select_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::serial_port_service	access:private
service_impl_type	/usr/include/boost/asio/serial_port_service.hpp	/^  typedef detail::win_iocp_serial_port_service service_impl_type;$/;"	t	class:boost::asio::serial_port_service	access:private
service_impl_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^      Protocol, detail::dev_poll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:private
service_impl_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^      Protocol, detail::epoll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:private
service_impl_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^      Protocol, detail::kqueue_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:private
service_impl_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^      Protocol, detail::select_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:private
service_impl_type	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::socket_acceptor_service	access:private
service_impl_type	/usr/include/boost/asio/ssl/context_service.hpp	/^  typedef detail::openssl_context_service service_impl_type;$/;"	t	class:boost::asio::ssl::context_service	access:private
service_impl_type	/usr/include/boost/asio/ssl/stream_service.hpp	/^  typedef detail::openssl_stream_service service_impl_type;$/;"	t	class:boost::asio::ssl::stream_service	access:private
service_impl_type	/usr/include/boost/asio/stream_socket_service.hpp	/^      Protocol, detail::dev_poll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::stream_socket_service	access:private
service_impl_type	/usr/include/boost/asio/stream_socket_service.hpp	/^      Protocol, detail::epoll_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::stream_socket_service	access:private
service_impl_type	/usr/include/boost/asio/stream_socket_service.hpp	/^      Protocol, detail::kqueue_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::stream_socket_service	access:private
service_impl_type	/usr/include/boost/asio/stream_socket_service.hpp	/^      Protocol, detail::select_reactor<false> > service_impl_type;$/;"	t	class:boost::asio::stream_socket_service	access:private
service_impl_type	/usr/include/boost/asio/stream_socket_service.hpp	/^  typedef detail::win_iocp_socket_service<Protocol> service_impl_type;$/;"	t	class:boost::asio::stream_socket_service	access:private
service_impl_type	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  typedef detail::win_iocp_handle_service service_impl_type;$/;"	t	class:boost::asio::windows::random_access_handle_service	access:private
service_impl_type	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  typedef detail::win_iocp_handle_service service_impl_type;$/;"	t	class:boost::asio::windows::stream_handle_service	access:private
service_name	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  std::string service_name() const$/;"	f	class:boost::asio::ip::basic_resolver_entry	access:public	signature:() const
service_name	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  std::string service_name() const$/;"	f	class:boost::asio::ip::basic_resolver_query	access:public	signature:() const
service_name_	/usr/include/boost/asio/ip/basic_resolver_entry.hpp	/^  std::string service_name_;$/;"	m	class:boost::asio::ip::basic_resolver_entry	access:private
service_name_	/usr/include/boost/asio/ip/basic_resolver_query.hpp	/^  std::string service_name_;$/;"	m	class:boost::asio::ip::basic_resolver_query	access:private
service_not_found	/usr/include/boost/asio/error.hpp	/^  service_not_found = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::addrinfo_errors
service_registry	/usr/include/boost/asio/detail/service_registry.hpp	/^  service_registry(boost::asio::io_service& o)$/;"	f	class:boost::asio::detail::service_registry	access:public	signature:(boost::asio::io_service& o)
service_registry	/usr/include/boost/asio/detail/service_registry.hpp	/^class service_registry$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
service_registry_	/usr/include/boost/asio/io_service.hpp	/^  boost::asio::detail::service_registry* service_registry_;$/;"	m	class:boost::asio::io_service	access:private
service_type	/usr/include/boost/asio/basic_io_object.hpp	/^  typedef IoObjectService service_type;$/;"	t	class:boost::asio::basic_io_object	access:public
service_type	/usr/include/boost/asio/ssl/basic_context.hpp	/^  typedef Service service_type;$/;"	t	class:boost::asio::ssl::basic_context	access:public
service_type	/usr/include/boost/asio/ssl/stream.hpp	/^  typedef Service service_type;$/;"	t	class:boost::asio::ssl::stream	access:public
session_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  SSL*    session_;$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
set	/usr/include/boost/asio/detail/io_control.hpp	/^  void set(bool value)$/;"	f	class:boost::asio::detail::io_control::non_blocking_io	access:public	signature:(bool value)
set	/usr/include/boost/asio/detail/io_control.hpp	/^  void set(std::size_t value)$/;"	f	class:boost::asio::detail::io_control::bytes_readable	access:public	signature:(std::size_t value)
set	/usr/include/boost/asio/detail/posix_fd_set_adapter.hpp	/^  bool set(socket_type descriptor)$/;"	f	class:boost::asio::detail::posix_fd_set_adapter	access:public	signature:(socket_type descriptor)
set	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  bool set(socket_type descriptor)$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:(socket_type descriptor)
setbuf	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  std::streambuf* setbuf(char_type* s, std::streamsize n)$/;"	f	class:boost::asio::basic_socket_streambuf	access:protected	signature:(char_type* s, std::streamsize n)
setsockopt	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int setsockopt(socket_type s, int level, int optname,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, int level, int optname, const void* optval, std::size_t optlen, boost::system::error_code& ec)
set_func	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    void set_func(func_t func) { func_ = func; }$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::base_handler	access:public	signature:(func_t func)
set_max_size	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  void set_max_size(std::size_t max_size)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(std::size_t max_size)
set_max_size	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  void set_max_size(std::size_t)$/;"	f	class:boost::asio::detail::consuming_buffers	access:public	signature:(std::size_t)
set_operation	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    void set_operation(openssl_operation<Stream>* op) { op_ = op; }$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::base_handler	access:public	signature:(openssl_operation<Stream>* op)
set_option	/usr/include/boost/asio/basic_serial_port.hpp	/^  boost::system::error_code set_option(const SettableSerialPortOption& option,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const SettableSerialPortOption& option, boost::system::error_code& ec)
set_option	/usr/include/boost/asio/basic_serial_port.hpp	/^  void set_option(const SettableSerialPortOption& option)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const SettableSerialPortOption& option)
set_option	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code set_option(const SettableSocketOption& option,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const SettableSocketOption& option, boost::system::error_code& ec)
set_option	/usr/include/boost/asio/basic_socket.hpp	/^  void set_option(const SettableSocketOption& option)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(const SettableSocketOption& option)
set_option	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  boost::system::error_code set_option(const SettableSocketOption& option,$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const SettableSocketOption& option, boost::system::error_code& ec)
set_option	/usr/include/boost/asio/basic_socket_acceptor.hpp	/^  void set_option(const SettableSocketOption& option)$/;"	f	class:boost::asio::basic_socket_acceptor	access:public	signature:(const SettableSocketOption& option)
set_option	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, const SettableSocketOption& option, boost::system::error_code& ec)
set_option	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const SettableSerialPortOption& option, boost::system::error_code& ec)
set_option	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const SettableSerialPortOption& option, boost::system::error_code& ec)
set_option	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, const SettableSocketOption& option, boost::system::error_code& ec)
set_option	/usr/include/boost/asio/serial_port_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const SettableSerialPortOption& option, boost::system::error_code& ec)
set_option	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(implementation_type& impl, const SettableSocketOption& option, boost::system::error_code& ec)
set_option	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code set_option(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, const SettableSocketOption& option, boost::system::error_code& ec)
set_options	/usr/include/boost/asio/ssl/basic_context.hpp	/^  boost::system::error_code set_options(options o,$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(options o, boost::system::error_code& ec)
set_options	/usr/include/boost/asio/ssl/basic_context.hpp	/^  void set_options(options o)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(options o)
set_options	/usr/include/boost/asio/ssl/context_service.hpp	/^  boost::system::error_code set_options(impl_type& impl,$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, context_base::options o, boost::system::error_code& ec)
set_options	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  boost::system::error_code set_options(impl_type& impl,$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, context_base::options o, boost::system::error_code& ec)
set_password_callback	/usr/include/boost/asio/ssl/basic_context.hpp	/^  boost::system::error_code set_password_callback(PasswordCallback callback,$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(PasswordCallback callback, boost::system::error_code& ec)
set_password_callback	/usr/include/boost/asio/ssl/basic_context.hpp	/^  void set_password_callback(PasswordCallback callback)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(PasswordCallback callback)
set_password_callback	/usr/include/boost/asio/ssl/context_service.hpp	/^  boost::system::error_code set_password_callback(impl_type& impl,$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, PasswordCallback callback, boost::system::error_code& ec)
set_password_callback	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  boost::system::error_code set_password_callback(impl_type& impl,$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, Password_Callback callback, boost::system::error_code& ec)
set_terminate_threads	/usr/include/boost/asio/detail/win_thread.hpp	/^  static void set_terminate_threads(bool b)$/;"	f	class:boost::asio::detail::win_thread_base	access:public	signature:(bool b)
set_verify_mode	/usr/include/boost/asio/ssl/basic_context.hpp	/^  boost::system::error_code set_verify_mode(verify_mode v,$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(verify_mode v, boost::system::error_code& ec)
set_verify_mode	/usr/include/boost/asio/ssl/basic_context.hpp	/^  void set_verify_mode(verify_mode v)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(verify_mode v)
set_verify_mode	/usr/include/boost/asio/ssl/context_service.hpp	/^  boost::system::error_code set_verify_mode(impl_type& impl,$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, context_base::verify_mode v, boost::system::error_code& ec)
set_verify_mode	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  boost::system::error_code set_verify_mode(impl_type& impl,$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, context_base::verify_mode v, boost::system::error_code& ec)
shared_cancel_token_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  typedef boost::shared_ptr<void> shared_cancel_token_type;$/;"	t	class:boost::asio::detail::win_iocp_socket_service	access:public
shutdown	/usr/include/boost/asio/basic_socket.hpp	/^  boost::system::error_code shutdown(shutdown_type what,$/;"	f	class:boost::asio::basic_socket	access:public	signature:(shutdown_type what, boost::system::error_code& ec)
shutdown	/usr/include/boost/asio/basic_socket.hpp	/^  void shutdown(shutdown_type what)$/;"	f	class:boost::asio::basic_socket	access:public	signature:(shutdown_type what)
shutdown	/usr/include/boost/asio/datagram_socket_service.hpp	/^  boost::system::error_code shutdown(implementation_type& impl,$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:(implementation_type& impl, socket_base::shutdown_type what, boost::system::error_code& ec)
shutdown	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int shutdown(socket_type s, int what, boost::system::error_code& ec)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(socket_type s, int what, boost::system::error_code& ec)
shutdown	/usr/include/boost/asio/raw_socket_service.hpp	/^  boost::system::error_code shutdown(implementation_type& impl,$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:(implementation_type& impl, socket_base::shutdown_type what, boost::system::error_code& ec)
shutdown	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  boost::system::error_code shutdown(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, boost::system::error_code& ec)
shutdown	/usr/include/boost/asio/ssl/stream.hpp	/^  boost::system::error_code shutdown(boost::system::error_code& ec)$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(boost::system::error_code& ec)
shutdown	/usr/include/boost/asio/ssl/stream.hpp	/^  void shutdown()$/;"	f	class:boost::asio::ssl::stream	access:public	signature:()
shutdown	/usr/include/boost/asio/ssl/stream_service.hpp	/^  boost::system::error_code shutdown(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, boost::system::error_code& ec)
shutdown	/usr/include/boost/asio/stream_socket_service.hpp	/^  boost::system::error_code shutdown(implementation_type& impl,$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(implementation_type& impl, socket_base::shutdown_type what, boost::system::error_code& ec)
shutdown_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
shutdown_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
shutdown_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
shutdown_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
shutdown_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  bool shutdown_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
shutdown_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  long shutdown_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
shutdown_both	/usr/include/boost/asio/detail/socket_types.hpp	/^const int shutdown_both = SD_BOTH;$/;"	m	namespace:boost::asio::detail
shutdown_both	/usr/include/boost/asio/socket_base.hpp	/^    shutdown_both = implementation_defined$/;"	e	enum:boost::asio::socket_base::shutdown_type
shutdown_handler	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    shutdown_handler(Handler handler, boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::shutdown_handler	access:public	signature:(Handler handler, boost::asio::io_service& io_service)
shutdown_handler	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  class shutdown_handler$/;"	c	class:boost::asio::ssl::detail::openssl_stream_service	inherits:base_handler	access:private
shutdown_receive	/usr/include/boost/asio/detail/socket_types.hpp	/^const int shutdown_receive = SD_RECEIVE;$/;"	m	namespace:boost::asio::detail
shutdown_receive	/usr/include/boost/asio/socket_base.hpp	/^    shutdown_receive = implementation_defined,$/;"	e	enum:boost::asio::socket_base::shutdown_type
shutdown_send	/usr/include/boost/asio/detail/socket_types.hpp	/^const int shutdown_send = SD_SEND;$/;"	m	namespace:boost::asio::detail
shutdown_send	/usr/include/boost/asio/socket_base.hpp	/^    shutdown_send = implementation_defined,$/;"	e	enum:boost::asio::socket_base::shutdown_type
shutdown_service	/usr/include/boost/asio/datagram_socket_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::datagram_socket_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/deadline_timer_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/resolver_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/strand_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::strand_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/io_service.hpp	/^  virtual void shutdown_service() = 0;$/;"	p	class:boost::asio::io_service::service	access:private	signature:()
shutdown_service	/usr/include/boost/asio/ip/resolver_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::ip::resolver_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/raw_socket_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::raw_socket_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/serial_port_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::serial_port_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/ssl/context_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/ssl/stream_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/stream_socket_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:()
shutdown_service	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  void shutdown_service()$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:()
shutdown_type	/usr/include/boost/asio/socket_base.hpp	/^  enum shutdown_type$/;"	g	class:boost::asio::socket_base	access:public
shut_down	/usr/include/boost/asio/error.hpp	/^  shut_down = BOOST_ASIO_SOCKET_ERROR(ESHUTDOWN),$/;"	e	enum:boost::asio::error::basic_errors
signal	/usr/include/boost/asio/detail/null_event.hpp	/^  void signal(Lock&)$/;"	f	class:boost::asio::detail::null_event	access:public	signature:(Lock&)
signal	/usr/include/boost/asio/detail/posix_event.hpp	/^  void signal(Lock& lock)$/;"	f	class:boost::asio::detail::posix_event	access:public	signature:(Lock& lock)
signal	/usr/include/boost/asio/detail/win_event.hpp	/^  void signal(Lock& lock)$/;"	f	class:boost::asio::detail::win_event	access:public	signature:(Lock& lock)
signalled_	/usr/include/boost/asio/detail/posix_event.hpp	/^  bool signalled_;$/;"	m	class:boost::asio::detail::posix_event	access:private
signal_blocker	/usr/include/boost/asio/detail/signal_blocker.hpp	/^typedef null_signal_blocker signal_blocker;$/;"	t	namespace:boost::asio::detail
signal_init	/usr/include/boost/asio/detail/signal_init.hpp	/^  signal_init()$/;"	f	class:boost::asio::detail::signal_init	access:public	signature:()
signal_init	/usr/include/boost/asio/detail/signal_init.hpp	/^class signal_init$/;"	c	namespace:boost::asio::detail
sin6_addr	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  in6_addr_emulation sin6_addr;$/;"	m	struct:boost::asio::detail::sockaddr_in6_emulation	access:public
sin6_family	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  short sin6_family;$/;"	m	struct:boost::asio::detail::sockaddr_in6_emulation	access:public
sin6_flowinfo	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  u_long sin6_flowinfo;$/;"	m	struct:boost::asio::detail::sockaddr_in6_emulation	access:public
sin6_port	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  u_short sin6_port;$/;"	m	struct:boost::asio::detail::sockaddr_in6_emulation	access:public
sin6_scope_id	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  u_long sin6_scope_id;$/;"	m	struct:boost::asio::detail::sockaddr_in6_emulation	access:public
single_dh_use	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const int single_dh_use = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
size	/usr/include/boost/asio/basic_streambuf.hpp	/^  std::size_t size() const$/;"	f	class:boost::asio::basic_streambuf	access:public	signature:() const
size	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  size_type size() const$/;"	f	class:boost::asio::detail::buffered_stream_storage	access:public	signature:() const
size	/usr/include/boost/asio/detail/socket_option.hpp	/^  std::size_t size(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:(const Protocol&) const
size	/usr/include/boost/asio/detail/socket_option.hpp	/^  std::size_t size(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:(const Protocol&) const
size	/usr/include/boost/asio/detail/socket_option.hpp	/^  std::size_t size(const Protocol&) const$/;"	f	class:boost::asio::detail::socket_option::linger	access:public	signature:(const Protocol&) const
size	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^  std::size_t size() const$/;"	f	class:boost::asio::ip::basic_endpoint	access:public	signature:() const
size	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  std::size_t size(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:(const Protocol& protocol) const
size	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  std::size_t size(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:(const Protocol& protocol) const
size	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  std::size_t size(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_request	access:public	signature:(const Protocol& protocol) const
size	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  std::size_t size(const Protocol& protocol) const$/;"	f	class:boost::asio::ip::detail::socket_option::network_interface	access:public	signature:(const Protocol& protocol) const
size	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  std::size_t size(const Protocol&) const$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(const Protocol&) const
size	/usr/include/boost/asio/local/basic_endpoint.hpp	/^  std::size_t size() const$/;"	f	class:boost::asio::local::basic_endpoint	access:public	signature:() const
size_	/usr/include/boost/asio/buffer.hpp	/^  std::size_t size_;$/;"	m	class:boost::asio::const_buffer	access:private
size_	/usr/include/boost/asio/buffer.hpp	/^  std::size_t size_;$/;"	m	class:boost::asio::mutable_buffer	access:private
size_	/usr/include/boost/asio/detail/hash_map.hpp	/^  std::size_t size_;$/;"	m	class:boost::asio::detail::hash_map	access:private
size_type	/usr/include/boost/asio/detail/buffered_stream_storage.hpp	/^  typedef std::size_t size_type;$/;"	t	class:boost::asio::detail::buffered_stream_storage	access:public
sockaddr_in4_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr_in sockaddr_in4_type;$/;"	t	namespace:boost::asio::detail
sockaddr_in6_emulation	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^struct sockaddr_in6_emulation$/;"	s	namespace:boost::asio::detail
sockaddr_in6_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr_in6 sockaddr_in6_type;$/;"	t	namespace:boost::asio::detail
sockaddr_in6_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr_in6_emulation sockaddr_in6_type;$/;"	t	namespace:boost::asio::detail
sockaddr_storage_alignsize	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  sockaddr_storage_alignsize = (sizeof(__int64)), \/\/ Desired alignment.$/;"	e	enum:boost::asio::detail::__anon7
sockaddr_storage_emulation	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^struct sockaddr_storage_emulation$/;"	s	namespace:boost::asio::detail
sockaddr_storage_maxsize	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  sockaddr_storage_maxsize = 128, \/\/ Maximum size.$/;"	e	enum:boost::asio::detail::__anon7
sockaddr_storage_pad1size	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  sockaddr_storage_pad1size = (sockaddr_storage_alignsize - sizeof(short)),$/;"	e	enum:boost::asio::detail::__anon7
sockaddr_storage_pad2size	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  sockaddr_storage_pad2size = (sockaddr_storage_maxsize -$/;"	e	enum:boost::asio::detail::__anon7
sockaddr_storage_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr_storage sockaddr_storage_type;$/;"	t	namespace:boost::asio::detail
sockaddr_storage_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr_storage_emulation sockaddr_storage_type;$/;"	t	namespace:boost::asio::detail
socket	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline socket_type socket(int af, int type, int protocol,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int af, int type, int protocol, boost::system::error_code& ec)
socket	/usr/include/boost/asio/ip/icmp.hpp	/^  typedef basic_raw_socket<icmp> socket;$/;"	t	class:boost::asio::ip::icmp	access:public
socket	/usr/include/boost/asio/ip/tcp.hpp	/^  typedef basic_stream_socket<tcp> socket;$/;"	t	class:boost::asio::ip::tcp	access:public
socket	/usr/include/boost/asio/ip/udp.hpp	/^  typedef basic_datagram_socket<udp> socket;$/;"	t	class:boost::asio::ip::udp	access:public
socket	/usr/include/boost/asio/local/datagram_protocol.hpp	/^  typedef basic_datagram_socket<datagram_protocol> socket;$/;"	t	class:boost::asio::local::datagram_protocol	access:public
socket	/usr/include/boost/asio/local/stream_protocol.hpp	/^  typedef basic_stream_socket<stream_protocol> socket;$/;"	t	class:boost::asio::local::stream_protocol	access:public
socketpair	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline int socketpair(int af, int type, int protocol,$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int af, int type, int protocol, socket_type sv[2], boost::system::error_code& ec)
socket_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    socket_type socket_;$/;"	m	class:boost::asio::detail::reactive_socket_service::implementation_type	access:private
socket_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    socket_type socket_;$/;"	m	class:boost::asio::detail::receive_from_operation	access:private
socket_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    socket_type socket_;$/;"	m	class:boost::asio::detail::receive_operation	access:private
socket_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    socket_type socket_;$/;"	m	class:boost::asio::detail::send_to_operation	access:private
socket_	/usr/include/boost/asio/detail/socket_holder.hpp	/^  socket_type socket_;$/;"	m	class:boost::asio::detail::socket_holder	access:private
socket_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    native_type socket_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::implementation_type	access:private
socket_	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^    socket_type socket_;$/;"	m	class:boost::asio::detail::win_iocp_socket_service::native_type	access:private
socket_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  Stream& socket_;$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
socket_acceptor_service	/usr/include/boost/asio/socket_acceptor_service.hpp	/^  explicit socket_acceptor_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::socket_acceptor_service	access:public	signature:(boost::asio::io_service& io_service)
socket_acceptor_service	/usr/include/boost/asio/socket_acceptor_service.hpp	/^class socket_acceptor_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
socket_addr_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef sockaddr socket_addr_type;$/;"	t	namespace:boost::asio::detail
socket_base	/usr/include/boost/asio/socket_base.hpp	/^class socket_base$/;"	c	namespace:boost::asio
socket_error_retval	/usr/include/boost/asio/detail/socket_types.hpp	/^const int socket_error_retval = SOCKET_ERROR;$/;"	m	namespace:boost::asio::detail
socket_holder	/usr/include/boost/asio/detail/socket_holder.hpp	/^  explicit socket_holder(socket_type s)$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:(socket_type s)
socket_holder	/usr/include/boost/asio/detail/socket_holder.hpp	/^  socket_holder()$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:()
socket_holder	/usr/include/boost/asio/detail/socket_holder.hpp	/^class socket_holder$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
socket_ops	/usr/include/boost/asio/detail/socket_ops.hpp	/^namespace socket_ops {$/;"	n	namespace:boost::asio::detail
socket_option	/usr/include/boost/asio/detail/socket_option.hpp	/^namespace socket_option {$/;"	n	namespace:boost::asio::detail
socket_option	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^namespace socket_option {$/;"	n	namespace:boost::asio::ip::detail
socket_select_interrupter	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  socket_select_interrupter()$/;"	f	class:boost::asio::detail::socket_select_interrupter	access:public	signature:()
socket_select_interrupter	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^class socket_select_interrupter$/;"	c	namespace:boost::asio::detail
socket_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef SOCKET socket_type;$/;"	t	namespace:boost::asio::detail
socket_type_not_supported	/usr/include/boost/asio/error.hpp	/^  socket_type_not_supported = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::addrinfo_errors
software	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, software, hardware };$/;"	e	enum:boost::asio::serial_port_base::flow_control::type
spares_	/usr/include/boost/asio/detail/hash_map.hpp	/^  std::list<value_type> spares_;$/;"	m	class:boost::asio::detail::hash_map	access:private
ssl	/usr/include/boost/asio/ssl/basic_context.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/context.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/context_base.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/context_service.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    ::SSL* ssl;$/;"	m	struct:boost::asio::ssl::detail::openssl_stream_service::impl_struct	access:public
ssl	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/stream.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/stream_base.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	/usr/include/boost/asio/ssl/stream_service.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
sslv2	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv2,$/;"	e	enum:boost::asio::ssl::context_base::method
sslv23	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv23,$/;"	e	enum:boost::asio::ssl::context_base::method
sslv23_client	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv23_client,$/;"	e	enum:boost::asio::ssl::context_base::method
sslv23_server	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv23_server$/;"	e	enum:boost::asio::ssl::context_base::method
sslv2_client	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv2_client,$/;"	e	enum:boost::asio::ssl::context_base::method
sslv2_server	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv2_server,$/;"	e	enum:boost::asio::ssl::context_base::method
sslv3	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv3,$/;"	e	enum:boost::asio::ssl::context_base::method
sslv3_client	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv3_client,$/;"	e	enum:boost::asio::ssl::context_base::method
sslv3_server	/usr/include/boost/asio/ssl/context_base.hpp	/^    sslv3_server,$/;"	e	enum:boost::asio::ssl::context_base::method
SSL_accept	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    static int SSL_accept(SSL *ssl)$/;"	f	struct:boost::asio::ssl::detail::openssl_stream_service::ssl_wrap	access:public	signature:(SSL *ssl)
ssl_bio_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  BIO*    ssl_bio_;$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
ssl_category	/usr/include/boost/asio/error.hpp	/^class ssl_category : public boost::system::error_category$/;"	c	namespace:boost::asio::error::detail	inherits:boost::system::error_category
ssl_category	/usr/include/boost/asio/error.hpp	/^static const boost::system::error_category& ssl_category$/;"	m	namespace:boost::asio::error
SSL_connect	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    static int SSL_connect(SSL *ssl)$/;"	f	struct:boost::asio::ssl::detail::openssl_stream_service::ssl_wrap	access:public	signature:(SSL *ssl)
ssl_errors	/usr/include/boost/asio/error.hpp	/^enum ssl_errors$/;"	g	namespace:boost::asio::error
ssl_mutex_	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    static Mutex ssl_mutex_;$/;"	m	struct:boost::asio::ssl::detail::openssl_stream_service::ssl_wrap	access:public
ssl_mutex_	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^Mutex openssl_stream_service::ssl_wrap<Mutex>::ssl_mutex_;$/;"	m	class:boost::asio::ssl::detail::openssl_stream_service::ssl_wrap
ssl_primitive_func	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^typedef boost::function<int (::SSL*)> ssl_primitive_func; $/;"	t	namespace:boost::asio::ssl::detail
SSL_shutdown	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    static int SSL_shutdown(SSL *ssl)$/;"	f	struct:boost::asio::ssl::detail::openssl_stream_service::ssl_wrap	access:public	signature:(SSL *ssl)
ssl_wrap	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  struct ssl_wrap$/;"	s	class:boost::asio::ssl::detail::openssl_stream_service	access:private
ss_family	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  short ss_family;$/;"	m	struct:boost::asio::detail::sockaddr_storage_emulation	access:public
start	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  int start()$/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:public	signature:()
start_connect_op	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void start_connect_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, Handler handler)
start_connect_op	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void start_connect_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data, Handler handler)
start_connect_op	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void start_connect_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data, Handler handler)
start_connect_op	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void start_connect_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, Handler handler)
start_except_op	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void start_except_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, Handler handler)
start_except_op	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void start_except_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, Handler handler)
start_except_op	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void start_except_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, Handler handler)
start_except_op	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void start_except_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, Handler handler)
start_read_op	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void start_read_op(socket_type descriptor, per_descriptor_data&,$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, Handler handler, bool allow_speculative_read = true)
start_read_op	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void start_read_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data, Handler handler, bool allow_speculative_read = true)
start_read_op	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void start_read_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data, Handler handler, bool allow_speculative_read = true)
start_read_op	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void start_read_op(socket_type descriptor, per_descriptor_data&,$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, Handler handler, bool = true)
start_work_thread	/usr/include/boost/asio/detail/resolver_service.hpp	/^  void start_work_thread()$/;"	f	class:boost::asio::detail::resolver_service	access:private	signature:()
start_write_op	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  void start_write_op(socket_type descriptor, per_descriptor_data&,$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, Handler handler, bool allow_speculative_write = true)
start_write_op	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  void start_write_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data, Handler handler, bool allow_speculative_write = true)
start_write_op	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  void start_write_op(socket_type descriptor,$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data& descriptor_data, Handler handler, bool allow_speculative_write = true)
start_write_op	/usr/include/boost/asio/detail/select_reactor.hpp	/^  void start_write_op(socket_type descriptor, per_descriptor_data&,$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:(socket_type descriptor, per_descriptor_data&, Handler handler, bool = true)
steal_timer_dispatching	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    steal_timer_dispatching = 2$/;"	e	enum:boost::asio::detail::win_iocp_io_service::__anon20
stop	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void stop()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
stop	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void stop()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
stop	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void stop()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
stop	/usr/include/boost/asio/io_service.hpp	/^  void stop();$/;"	p	class:boost::asio::io_service	access:public	signature:()
stopped_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  bool stopped_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
stopped_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  long stopped_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
stop_all_threads	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void stop_all_threads($/;"	f	class:boost::asio::detail::task_io_service	access:private	signature:( boost::asio::detail::mutex::scoped_lock& lock)
stop_bits	/usr/include/boost/asio/serial_port_base.hpp	/^    explicit stop_bits(type t = one);$/;"	p	class:boost::asio::serial_port_base::stop_bits	access:public	signature:(type t = one)
stop_bits	/usr/include/boost/asio/serial_port_base.hpp	/^  class stop_bits$/;"	c	class:boost::asio::serial_port_base	access:public
stop_thread_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  bool stop_thread_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
stop_thread_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  bool stop_thread_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
stop_thread_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  bool stop_thread_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
stop_thread_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  bool stop_thread_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
storage	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^    boost::asio::detail::sockaddr_storage_type storage;$/;"	m	union:boost::asio::ip::basic_endpoint::data_union	access:public
storage_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    detail::buffered_stream_storage& storage_;$/;"	m	class:boost::asio::buffered_read_stream::fill_handler	access:private
storage_	/usr/include/boost/asio/buffered_read_stream.hpp	/^    detail::buffered_stream_storage& storage_;$/;"	m	class:boost::asio::buffered_read_stream::read_some_handler	access:private
storage_	/usr/include/boost/asio/buffered_read_stream.hpp	/^  detail::buffered_stream_storage storage_;$/;"	m	class:boost::asio::buffered_read_stream	access:private
storage_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    detail::buffered_stream_storage& storage_;$/;"	m	class:boost::asio::buffered_write_stream::flush_handler	access:private
storage_	/usr/include/boost/asio/buffered_write_stream.hpp	/^    detail::buffered_stream_storage& storage_;$/;"	m	class:boost::asio::buffered_write_stream::write_some_handler	access:private
storage_	/usr/include/boost/asio/buffered_write_stream.hpp	/^  detail::buffered_stream_storage storage_;$/;"	m	class:boost::asio::buffered_write_stream	access:private
store	/usr/include/boost/asio/serial_port_base.hpp	/^    boost::system::error_code store(BOOST_ASIO_OPTION_STORAGE& storage,$/;"	p	class:boost::asio::serial_port_base::baud_rate	access:public	signature:(BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
store	/usr/include/boost/asio/serial_port_base.hpp	/^    boost::system::error_code store(BOOST_ASIO_OPTION_STORAGE& storage,$/;"	p	class:boost::asio::serial_port_base::character_size	access:public	signature:(BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
store	/usr/include/boost/asio/serial_port_base.hpp	/^    boost::system::error_code store(BOOST_ASIO_OPTION_STORAGE& storage,$/;"	p	class:boost::asio::serial_port_base::flow_control	access:public	signature:(BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
store	/usr/include/boost/asio/serial_port_base.hpp	/^    boost::system::error_code store(BOOST_ASIO_OPTION_STORAGE& storage,$/;"	p	class:boost::asio::serial_port_base::parity	access:public	signature:(BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
store	/usr/include/boost/asio/serial_port_base.hpp	/^    boost::system::error_code store(BOOST_ASIO_OPTION_STORAGE& storage,$/;"	p	class:boost::asio::serial_port_base::stop_bits	access:public	signature:(BOOST_ASIO_OPTION_STORAGE& storage, boost::system::error_code& ec) const
strand	/usr/include/boost/asio/strand.hpp	/^  explicit strand(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::io_service::strand	access:public	signature:(boost::asio::io_service& io_service)
strand	/usr/include/boost/asio/strand.hpp	/^class io_service::strand$/;"	c	class:boost::asio::io_service
strand	/usr/include/boost/asio/strand.hpp	/^typedef boost::asio::io_service::strand strand;$/;"	t	namespace:boost::asio
strand_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  boost::asio::io_service::strand* strand_;$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
strand_	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  boost::asio::io_service::strand strand_;$/;"	m	class:boost::asio::ssl::detail::openssl_stream_service	access:private
strand_impl	/usr/include/boost/asio/detail/strand_service.hpp	/^    strand_impl()$/;"	f	class:boost::asio::detail::strand_service::strand_impl	access:public	signature:()
strand_impl	/usr/include/boost/asio/detail/strand_service.hpp	/^  class strand_impl$/;"	c	class:boost::asio::detail::strand_service	access:public
strand_service	/usr/include/boost/asio/detail/strand_service.hpp	/^  explicit strand_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::strand_service	access:public	signature:(boost::asio::io_service& io_service)
strand_service	/usr/include/boost/asio/detail/strand_service.hpp	/^class strand_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
stream	/usr/include/boost/asio/ssl/stream.hpp	/^  explicit stream(Arg& arg, basic_context<Context_Service>& context)$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(Arg& arg, basic_context<Context_Service>& context)
stream	/usr/include/boost/asio/ssl/stream.hpp	/^class stream$/;"	c	namespace:boost::asio::ssl	inherits:stream_base,boost::noncopyable
streambuf	/usr/include/boost/asio/streambuf.hpp	/^typedef basic_streambuf<> streambuf;$/;"	t	namespace:boost::asio
stream_base	/usr/include/boost/asio/ssl/stream_base.hpp	/^class stream_base$/;"	c	namespace:boost::asio::ssl
stream_descriptor	/usr/include/boost/asio/posix/stream_descriptor.hpp	/^typedef basic_stream_descriptor<> stream_descriptor;$/;"	t	namespace:boost::asio::posix
stream_descriptor_service	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  explicit stream_descriptor_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(boost::asio::io_service& io_service)
stream_descriptor_service	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^class stream_descriptor_service$/;"	c	namespace:boost::asio::posix	inherits:boost::asio::io_service::service
stream_handle	/usr/include/boost/asio/windows/stream_handle.hpp	/^typedef basic_stream_handle<> stream_handle;$/;"	t	namespace:boost::asio::windows
stream_handle_service	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  explicit stream_handle_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(boost::asio::io_service& io_service)
stream_handle_service	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^class stream_handle_service$/;"	c	namespace:boost::asio::windows	inherits:boost::asio::io_service::service
stream_impl_	/usr/include/boost/asio/buffered_stream.hpp	/^  read_stream_type stream_impl_;$/;"	m	class:boost::asio::buffered_stream	access:private
stream_protocol	/usr/include/boost/asio/local/stream_protocol.hpp	/^class stream_protocol$/;"	c	namespace:boost::asio::local
stream_service	/usr/include/boost/asio/ssl/stream_service.hpp	/^  explicit stream_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(boost::asio::io_service& io_service)
stream_service	/usr/include/boost/asio/ssl/stream_service.hpp	/^class stream_service$/;"	c	namespace:boost::asio::ssl	inherits:boost::asio::io_service::service
stream_socket_service	/usr/include/boost/asio/stream_socket_service.hpp	/^  explicit stream_socket_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::stream_socket_service	access:public	signature:(boost::asio::io_service& io_service)
stream_socket_service	/usr/include/boost/asio/stream_socket_service.hpp	/^class stream_socket_service$/;"	c	namespace:boost::asio	inherits:boost::asio::io_service::service
subtract	/usr/include/boost/asio/time_traits.hpp	/^  static duration_type subtract(const time_type& t1, const time_type& t2)$/;"	f	struct:boost::asio::time_traits	access:public	signature:(const time_type& t1, const time_type& t2)
swap_heap	/usr/include/boost/asio/detail/timer_queue.hpp	/^  void swap_heap(size_t index1, size_t index2)$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(size_t index1, size_t index2)
sync	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  int sync()$/;"	f	class:boost::asio::basic_socket_streambuf	access:protected	signature:()
sync_user_handler	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  int sync_user_handler(const boost::system::error_code& error, int rc)$/;"	f	class:boost::asio::ssl::detail::openssl_operation	access:private	signature:(const boost::system::error_code& error, int rc)
system	/usr/include/boost/asio/error.hpp	/^namespace system {$/;"	n	namespace:boost
system_category	/usr/include/boost/asio/error.hpp	/^static const boost::system::error_category& system_category$/;"	m	namespace:boost::asio::error
task_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  Task* task_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
task_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  Task* task_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
task_cleanup	/usr/include/boost/asio/detail/task_io_service.hpp	/^    task_cleanup(boost::asio::detail::mutex::scoped_lock& lock,$/;"	f	class:boost::asio::detail::task_io_service::task_cleanup	access:public	signature:(boost::asio::detail::mutex::scoped_lock& lock, task_io_service& task_io_svc)
task_cleanup	/usr/include/boost/asio/detail/task_io_service.hpp	/^  class task_cleanup$/;"	c	class:boost::asio::detail::task_io_service	access:private
task_cleanup	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^    task_cleanup(task_io_service& task_io_svc)$/;"	f	class:boost::asio::detail::task_io_service::task_cleanup	access:public	signature:(task_io_service& task_io_svc)
task_cleanup	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  class task_cleanup$/;"	c	class:boost::asio::detail::task_io_service	access:private
task_handler	/usr/include/boost/asio/detail/task_io_service.hpp	/^    task_handler()$/;"	f	class:boost::asio::detail::task_io_service::task_handler	access:public	signature:()
task_handler	/usr/include/boost/asio/detail/task_io_service.hpp	/^  class task_handler$/;"	c	class:boost::asio::detail::task_io_service	inherits:handler_queue::handler	access:private
task_handler	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^    task_handler()$/;"	f	class:boost::asio::detail::task_io_service::task_handler	access:public	signature:()
task_handler	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  class task_handler$/;"	c	class:boost::asio::detail::task_io_service	inherits:handler_queue::handler	access:private
task_handler_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  } task_handler_;$/;"	m	class:boost::asio::detail::task_io_service	typeref:class:boost::asio::detail::task_io_service::task_handler	access:private
task_handler_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  } task_handler_;$/;"	m	class:boost::asio::detail::task_io_service	typeref:class:boost::asio::detail::task_io_service::task_handler	access:private
task_interrupted_	/usr/include/boost/asio/detail/task_io_service.hpp	/^  bool task_interrupted_;$/;"	m	class:boost::asio::detail::task_io_service	access:private
task_io_service	/usr/include/boost/asio/detail/task_io_service.hpp	/^  task_io_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(boost::asio::io_service& io_service)
task_io_service	/usr/include/boost/asio/detail/task_io_service.hpp	/^class task_io_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
task_io_service	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  task_io_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:(boost::asio::io_service& io_service)
task_io_service	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^class task_io_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
task_io_service_	/usr/include/boost/asio/detail/task_io_service.hpp	/^    task_io_service& task_io_service_;$/;"	m	class:boost::asio::detail::task_io_service::handler_cleanup	access:private
task_io_service_	/usr/include/boost/asio/detail/task_io_service.hpp	/^    task_io_service& task_io_service_;$/;"	m	class:boost::asio::detail::task_io_service::task_cleanup	access:private
task_io_service_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^    task_io_service& task_io_service_;$/;"	m	class:boost::asio::detail::task_io_service::handler_cleanup	access:private
task_io_service_	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^    task_io_service& task_io_service_;$/;"	m	class:boost::asio::detail::task_io_service::task_cleanup	access:private
tcp	/usr/include/boost/asio/ip/tcp.hpp	/^  explicit tcp(int family)$/;"	f	class:boost::asio::ip::tcp	access:private	signature:(int family)
tcp	/usr/include/boost/asio/ip/tcp.hpp	/^class tcp$/;"	c	namespace:boost::asio::ip
terminate_threads	/usr/include/boost/asio/detail/win_thread.hpp	/^  static bool terminate_threads()$/;"	f	class:boost::asio::detail::win_thread_base	access:public	signature:()
terminate_threads_	/usr/include/boost/asio/detail/win_thread.hpp	/^  static long terminate_threads_;$/;"	m	class:boost::asio::detail::win_thread_base	access:private
terminate_threads_	/usr/include/boost/asio/detail/win_thread.hpp	/^long win_thread_base<T>::terminate_threads_ = 0;$/;"	m	class:boost::asio::detail::win_thread_base
thread	/usr/include/boost/asio/detail/thread.hpp	/^typedef null_thread thread;$/;"	t	namespace:boost::asio::detail
thread_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  boost::asio::detail::thread* thread_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
thread_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  boost::asio::detail::thread* thread_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
thread_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  boost::asio::detail::thread* thread_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
thread_	/usr/include/boost/asio/detail/posix_thread.hpp	/^  ::pthread_t thread_;$/;"	m	class:boost::asio::detail::posix_thread	access:private
thread_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  boost::asio::detail::thread* thread_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
thread_	/usr/include/boost/asio/detail/wince_thread.hpp	/^  ::HANDLE thread_;$/;"	m	class:boost::asio::detail::wince_thread	access:private
thread_	/usr/include/boost/asio/detail/win_thread.hpp	/^  ::HANDLE thread_;$/;"	m	class:boost::asio::detail::win_thread	access:private
thread_id_	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^    boost::asio::detail::tss_ptr<void> thread_id_;$/;"	m	class:boost::asio::ssl::detail::openssl_init::do_init	access:private
throw_error	/usr/include/boost/asio/detail/throw_error.hpp	/^inline void throw_error(const boost::system::error_code& err)$/;"	f	namespace:boost::asio::detail	signature:(const boost::system::error_code& err)
timed_out	/usr/include/boost/asio/error.hpp	/^  timed_out = BOOST_ASIO_SOCKET_ERROR(ETIMEDOUT),$/;"	e	enum:boost::asio::error::basic_errors
timer	/usr/include/boost/asio/detail/timer_queue.hpp	/^    timer(const time_type& time, Handler handler, void* token)$/;"	f	class:boost::asio::detail::timer_queue::timer	access:public	signature:(const time_type& time, Handler handler, void* token)
timer	/usr/include/boost/asio/detail/timer_queue.hpp	/^  class timer$/;"	c	class:boost::asio::detail::timer_queue	inherits:timer_base	access:private
timers_	/usr/include/boost/asio/detail/timer_queue.hpp	/^  hash_map<void*, timer_base*> timers_;$/;"	m	class:boost::asio::detail::timer_queue	access:private
timer_base	/usr/include/boost/asio/detail/timer_queue.hpp	/^    timer_base(complete_func_type complete_func, destroy_func_type destroy_func,$/;"	f	class:boost::asio::detail::timer_queue::timer_base	access:protected	signature:(complete_func_type complete_func, destroy_func_type destroy_func, const time_type& time, void* token)
timer_base	/usr/include/boost/asio/detail/timer_queue.hpp	/^  class timer_base$/;"	c	class:boost::asio::detail::timer_queue	access:private
timer_interrupt_issued_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  bool timer_interrupt_issued_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
timer_mutex_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  mutex timer_mutex_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
timer_queue	/usr/include/boost/asio/detail/timer_queue.hpp	/^  timer_queue()$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:()
timer_queue	/usr/include/boost/asio/detail/timer_queue.hpp	/^class timer_queue$/;"	c	namespace:boost::asio::detail	inherits:timer_queue_base
timer_queues_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  std::vector<timer_queue_base*> timer_queues_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
timer_queues_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  std::vector<timer_queue_base*> timer_queues_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
timer_queues_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  std::vector<timer_queue_base*> timer_queues_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
timer_queues_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  std::vector<timer_queue_base*> timer_queues_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
timer_queues_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  std::vector<timer_queue_base*> timer_queues_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
timer_queues_copy_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  std::vector<timer_queue_base*> timer_queues_copy_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
timer_queues_for_cleanup_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  std::vector<timer_queue_base*> timer_queues_for_cleanup_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
timer_queues_for_cleanup_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  std::vector<timer_queue_base*> timer_queues_for_cleanup_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
timer_queues_for_cleanup_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  std::vector<timer_queue_base*> timer_queues_for_cleanup_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
timer_queues_for_cleanup_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  std::vector<timer_queue_base*> timer_queues_for_cleanup_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
timer_queue_	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  timer_queue<Time_Traits> timer_queue_;$/;"	m	class:boost::asio::detail::deadline_timer_service	access:private
timer_queue_base	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^class timer_queue_base$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
timer_thread_	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  long timer_thread_;$/;"	m	class:boost::asio::detail::win_iocp_io_service	access:private
time_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    time_type time_;$/;"	m	class:boost::asio::detail::timer_queue::timer_base	access:private
time_traits	/usr/include/boost/asio/time_traits.hpp	/^struct time_traits<boost::posix_time::ptime>$/;"	s	namespace:boost::asio
time_type	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  typedef typename traits_type::time_type time_type;$/;"	t	class:boost::asio::basic_deadline_timer	access:public
time_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef typename traits_type::time_type time_type;$/;"	t	class:boost::asio::deadline_timer_service	access:public
time_type	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  typedef typename Time_Traits::time_type time_type;$/;"	t	class:boost::asio::detail::deadline_timer_service	access:public
time_type	/usr/include/boost/asio/detail/timer_queue.hpp	/^  typedef typename Time_Traits::time_type time_type;$/;"	t	class:boost::asio::detail::timer_queue	access:public
time_type	/usr/include/boost/asio/time_traits.hpp	/^  typedef boost::posix_time::ptime time_type;$/;"	t	struct:boost::asio::time_traits	access:public
tlsv1	/usr/include/boost/asio/ssl/context_base.hpp	/^    tlsv1,$/;"	e	enum:boost::asio::ssl::context_base::method
tlsv1_client	/usr/include/boost/asio/ssl/context_base.hpp	/^    tlsv1_client,$/;"	e	enum:boost::asio::ssl::context_base::method
tlsv1_server	/usr/include/boost/asio/ssl/context_base.hpp	/^    tlsv1_server,$/;"	e	enum:boost::asio::ssl::context_base::method
token_	/usr/include/boost/asio/detail/timer_queue.hpp	/^    void* token_;$/;"	m	class:boost::asio::detail::timer_queue::timer_base	access:private
top_	/usr/include/boost/asio/detail/call_stack.hpp	/^  static tss_ptr<context> top_;$/;"	m	class:boost::asio::detail::call_stack	access:private
top_	/usr/include/boost/asio/detail/call_stack.hpp	/^call_stack<Owner>::top_;$/;"	m	class:boost::asio::detail::call_stack
to_bytes	/usr/include/boost/asio/ip/address_v4.hpp	/^  bytes_type to_bytes() const$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:() const
to_bytes	/usr/include/boost/asio/ip/address_v6.hpp	/^  bytes_type to_bytes() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
to_posix_duration	/usr/include/boost/asio/time_traits.hpp	/^  static boost::posix_time::time_duration to_posix_duration($/;"	f	struct:boost::asio::time_traits	access:public	signature:( const duration_type& d)
to_string	/usr/include/boost/asio/ip/address.hpp	/^  std::string to_string() const$/;"	f	class:boost::asio::ip::address	access:public	signature:() const
to_string	/usr/include/boost/asio/ip/address.hpp	/^  std::string to_string(boost::system::error_code& ec) const$/;"	f	class:boost::asio::ip::address	access:public	signature:(boost::system::error_code& ec) const
to_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  std::string to_string() const$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:() const
to_string	/usr/include/boost/asio/ip/address_v4.hpp	/^  std::string to_string(boost::system::error_code& ec) const$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:(boost::system::error_code& ec) const
to_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  std::string to_string() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
to_string	/usr/include/boost/asio/ip/address_v6.hpp	/^  std::string to_string(boost::system::error_code& ec) const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(boost::system::error_code& ec) const
to_ulong	/usr/include/boost/asio/ip/address_v4.hpp	/^  unsigned long to_ulong() const$/;"	f	class:boost::asio::ip::address_v4	access:public	signature:() const
to_v4	/usr/include/boost/asio/ip/address.hpp	/^  boost::asio::ip::address_v4 to_v4() const$/;"	f	class:boost::asio::ip::address	access:public	signature:() const
to_v4	/usr/include/boost/asio/ip/address_v6.hpp	/^  address_v4 to_v4() const$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:() const
to_v6	/usr/include/boost/asio/ip/address.hpp	/^  boost::asio::ip::address_v6 to_v6() const$/;"	f	class:boost::asio::ip::address	access:public	signature:() const
traits_type	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  typedef TimeTraits traits_type;$/;"	t	class:boost::asio::basic_deadline_timer	access:public
traits_type	/usr/include/boost/asio/deadline_timer_service.hpp	/^  typedef TimeTraits traits_type;$/;"	t	class:boost::asio::deadline_timer_service	access:public
transfer_all_t	/usr/include/boost/asio/completion_condition.hpp	/^class transfer_all_t$/;"	c	namespace:boost::asio::detail
transfer_at_least	/usr/include/boost/asio/completion_condition.hpp	/^inline detail::transfer_at_least_t transfer_at_least(std::size_t minimum)$/;"	f	namespace:boost::asio	signature:(std::size_t minimum)
transfer_at_least	/usr/include/boost/asio/completion_condition.hpp	/^unspecified transfer_at_least(std::size_t minimum);$/;"	p	namespace:boost::asio	signature:(std::size_t minimum)
transfer_at_least_t	/usr/include/boost/asio/completion_condition.hpp	/^  explicit transfer_at_least_t(std::size_t minimum)$/;"	f	class:boost::asio::detail::transfer_at_least_t	access:public	signature:(std::size_t minimum)
transfer_at_least_t	/usr/include/boost/asio/completion_condition.hpp	/^class transfer_at_least_t$/;"	c	namespace:boost::asio::detail
transfer_timer_dispatching	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    transfer_timer_dispatching = 1,$/;"	e	enum:boost::asio::detail::win_iocp_io_service::__anon20
translate_addrinfo_error	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline boost::system::error_code translate_addrinfo_error(int error)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int error)
translate_netdb_error	/usr/include/boost/asio/detail/socket_ops.hpp	/^inline boost::system::error_code translate_netdb_error(int error)$/;"	f	namespace:boost::asio::detail::socket_ops	signature:(int error)
try_again	/usr/include/boost/asio/error.hpp	/^  try_again = BOOST_ASIO_WIN_OR_POSIX($/;"	e	enum:boost::asio::error::basic_errors
tss_key_	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^  pthread_key_t tss_key_;$/;"	m	class:boost::asio::detail::posix_tss_ptr	access:private
tss_key_	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  DWORD tss_key_;$/;"	m	class:boost::asio::detail::win_tss_ptr	access:private
tss_ptr	/usr/include/boost/asio/detail/tss_ptr.hpp	/^class tss_ptr$/;"	c	namespace:boost::asio::detail	inherits:null_tss_ptr
two	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { one, onepointfive, two };$/;"	e	enum:boost::asio::serial_port_base::stop_bits::type
type	/usr/include/boost/asio/buffers_iterator.hpp	/^      typedef ByteType type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types_helper::byte_type	access:public
type	/usr/include/boost/asio/buffers_iterator.hpp	/^      typedef typename boost::add_const<ByteType>::type type;$/;"	t	struct:boost::asio::detail::buffers_iterator_types_helper::byte_type	access:public
type	/usr/include/boost/asio/ip/icmp.hpp	/^  int type() const$/;"	f	class:boost::asio::ip::icmp	access:public	signature:() const
type	/usr/include/boost/asio/ip/tcp.hpp	/^  int type() const$/;"	f	class:boost::asio::ip::tcp	access:public	signature:() const
type	/usr/include/boost/asio/ip/udp.hpp	/^  int type() const$/;"	f	class:boost::asio::ip::udp	access:public	signature:() const
type	/usr/include/boost/asio/local/datagram_protocol.hpp	/^  int type() const$/;"	f	class:boost::asio::local::datagram_protocol	access:public	signature:() const
type	/usr/include/boost/asio/local/stream_protocol.hpp	/^  int type() const$/;"	f	class:boost::asio::local::stream_protocol	access:public	signature:() const
type	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, odd, even };$/;"	g	class:boost::asio::serial_port_base::parity	access:public
type	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { none, software, hardware };$/;"	g	class:boost::asio::serial_port_base::flow_control	access:public
type	/usr/include/boost/asio/serial_port_base.hpp	/^    enum type { one, onepointfive, two };$/;"	g	class:boost::asio::serial_port_base::stop_bits	access:public
typeid_wrapper	/usr/include/boost/asio/detail/service_registry.hpp	/^class typeid_wrapper {};$/;"	c	namespace:boost::asio::detail
type_	/usr/include/boost/asio/ip/address.hpp	/^  enum { ipv4, ipv6 } type_;$/;"	m	class:boost::asio::ip::address	typeref:enum:boost::asio::ip::address::__anon26	access:private
type_info_	/usr/include/boost/asio/io_service.hpp	/^  const std::type_info* type_info_;$/;"	m	class:boost::asio::io_service::service	access:private
u	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  } u;$/;"	m	struct:boost::asio::detail::in6_addr_emulation	typeref:union:boost::asio::detail::in6_addr_emulation::__anon8	access:public
udp	/usr/include/boost/asio/ip/udp.hpp	/^  explicit udp(int family)$/;"	f	class:boost::asio::ip::udp	access:private	signature:(int family)
udp	/usr/include/boost/asio/ip/udp.hpp	/^class udp$/;"	c	namespace:boost::asio::ip
unblock	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^  void unblock()$/;"	f	class:boost::asio::detail::null_signal_blocker	access:public	signature:()
unblock	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  void unblock()$/;"	f	class:boost::asio::detail::posix_signal_blocker	access:public	signature:()
unblock	/usr/include/boost/asio/detail/win_signal_blocker.hpp	/^  void unblock()$/;"	f	class:boost::asio::detail::win_signal_blocker	access:public	signature:()
unbuffered_	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  bool unbuffered_;$/;"	m	class:boost::asio::basic_socket_streambuf	access:private
underflow	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  int_type underflow()$/;"	f	class:boost::asio::basic_socket_streambuf	access:protected	signature:()
underflow	/usr/include/boost/asio/basic_streambuf.hpp	/^  int_type underflow()$/;"	f	class:boost::asio::basic_streambuf	access:protected	signature:()
unicast	/usr/include/boost/asio/ip/unicast.hpp	/^namespace unicast {$/;"	n	namespace:boost::asio::ip
unicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  explicit unicast_hops(int v)$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:(int v)
unicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  unicast_hops()$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:()
unicast_hops	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^class unicast_hops$/;"	c	namespace:boost::asio::ip::detail::socket_option
unlock	/usr/include/boost/asio/detail/null_mutex.hpp	/^  void unlock()$/;"	f	class:boost::asio::detail::null_mutex	access:public	signature:()
unlock	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  void unlock()$/;"	f	class:boost::asio::detail::posix_mutex	access:public	signature:()
unlock	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  void unlock()$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:()
unlock	/usr/include/boost/asio/detail/win_mutex.hpp	/^  void unlock()$/;"	f	class:boost::asio::detail::win_mutex	access:public	signature:()
up_heap	/usr/include/boost/asio/detail/timer_queue.hpp	/^  void up_heap(size_t index)$/;"	f	class:boost::asio::detail::timer_queue	access:private	signature:(size_t index)
user_handler_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  user_handler_func  user_handler_;$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
user_handler_func	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  user_handler_func;$/;"	t	namespace:boost::asio::ssl::detail
user_set_linger	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^      user_set_linger = 8$/;"	e	enum:boost::asio::detail::reactive_socket_service::implementation_type::__anon15
user_set_non_blocking	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^      user_set_non_blocking = 1, \/\/ The user wants a non-blocking descriptor.$/;"	e	enum:boost::asio::detail::reactive_descriptor_service::implementation_type::__anon11
user_set_non_blocking	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^      user_set_non_blocking = 1,$/;"	e	enum:boost::asio::detail::reactive_socket_service::implementation_type::__anon15
user_set_non_blocking	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^      user_set_non_blocking = 4 \/\/ The user wants a non-blocking socket.$/;"	e	enum:boost::asio::detail::win_iocp_socket_service::implementation_type::__anon23
use_certificate_chain_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  boost::system::error_code use_certificate_chain_file($/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:( const std::string& filename, boost::system::error_code& ec)
use_certificate_chain_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  void use_certificate_chain_file(const std::string& filename)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& filename)
use_certificate_chain_file	/usr/include/boost/asio/ssl/context_service.hpp	/^  boost::system::error_code use_certificate_chain_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
use_certificate_chain_file	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  boost::system::error_code use_certificate_chain_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
use_certificate_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  boost::system::error_code use_certificate_file(const std::string& filename,$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& filename, file_format format, boost::system::error_code& ec)
use_certificate_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  void use_certificate_file(const std::string& filename, file_format format)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& filename, file_format format)
use_certificate_file	/usr/include/boost/asio/ssl/context_service.hpp	/^  boost::system::error_code use_certificate_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
use_certificate_file	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  boost::system::error_code use_certificate_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
use_private_key_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  boost::system::error_code use_private_key_file(const std::string& filename,$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& filename, file_format format, boost::system::error_code& ec)
use_private_key_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  void use_private_key_file(const std::string& filename, file_format format)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& filename, file_format format)
use_private_key_file	/usr/include/boost/asio/ssl/context_service.hpp	/^  boost::system::error_code use_private_key_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
use_private_key_file	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  boost::system::error_code use_private_key_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
use_rsa_private_key_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  boost::system::error_code use_rsa_private_key_file($/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:( const std::string& filename, file_format format, boost::system::error_code& ec)
use_rsa_private_key_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  void use_rsa_private_key_file(const std::string& filename, file_format format)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& filename, file_format format)
use_rsa_private_key_file	/usr/include/boost/asio/ssl/context_service.hpp	/^  boost::system::error_code use_rsa_private_key_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
use_rsa_private_key_file	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  boost::system::error_code use_rsa_private_key_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, context_base::file_format format, boost::system::error_code& ec)
use_service	/usr/include/boost/asio/detail/service_registry.hpp	/^  Service& use_service()$/;"	f	class:boost::asio::detail::service_registry	access:public	signature:()
use_service	/usr/include/boost/asio/io_service.hpp	/^  friend Service& use_service(io_service& ios);$/;"	p	class:boost::asio::io_service	access:friend	signature:(io_service& ios)
use_service	/usr/include/boost/asio/io_service.hpp	/^template <typename Service> Service& use_service(io_service& ios);$/;"	p	namespace:boost::asio	signature:(io_service& ios)
use_tmp_dh_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  boost::system::error_code use_tmp_dh_file(const std::string& filename,$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& filename, boost::system::error_code& ec)
use_tmp_dh_file	/usr/include/boost/asio/ssl/basic_context.hpp	/^  void use_tmp_dh_file(const std::string& filename)$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:(const std::string& filename)
use_tmp_dh_file	/usr/include/boost/asio/ssl/context_service.hpp	/^  boost::system::error_code use_tmp_dh_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
use_tmp_dh_file	/usr/include/boost/asio/ssl/detail/openssl_context_service.hpp	/^  boost::system::error_code use_tmp_dh_file(impl_type& impl,$/;"	f	class:boost::asio::ssl::detail::openssl_context_service	access:public	signature:(impl_type& impl, const std::string& filename, boost::system::error_code& ec)
u_long_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef u_long u_long_type;$/;"	t	namespace:boost::asio::detail
u_short_type	/usr/include/boost/asio/detail/socket_types.hpp	/^typedef u_short u_short_type;$/;"	t	namespace:boost::asio::detail
v4	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^    boost::asio::detail::sockaddr_in4_type v4;$/;"	m	union:boost::asio::ip::basic_endpoint::data_union	access:public
v4	/usr/include/boost/asio/ip/icmp.hpp	/^  static icmp v4()$/;"	f	class:boost::asio::ip::icmp	access:public	signature:()
v4	/usr/include/boost/asio/ip/tcp.hpp	/^  static tcp v4()$/;"	f	class:boost::asio::ip::tcp	access:public	signature:()
v4	/usr/include/boost/asio/ip/udp.hpp	/^  static udp v4()$/;"	f	class:boost::asio::ip::udp	access:public	signature:()
v4_compatible	/usr/include/boost/asio/ip/address_v6.hpp	/^  static address_v6 v4_compatible(const address_v4& addr)$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(const address_v4& addr)
v4_mapped	/usr/include/boost/asio/ip/address_v6.hpp	/^  static address_v6 v4_mapped(const address_v4& addr)$/;"	f	class:boost::asio::ip::address_v6	access:public	signature:(const address_v4& addr)
v4_mapped	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  static const int v4_mapped = implementation_defined;$/;"	m	class:boost::asio::ip::resolver_query_base	access:public
v6	/usr/include/boost/asio/ip/basic_endpoint.hpp	/^    boost::asio::detail::sockaddr_in6_type v6;$/;"	m	union:boost::asio::ip::basic_endpoint::data_union	access:public
v6	/usr/include/boost/asio/ip/icmp.hpp	/^  static icmp v6()$/;"	f	class:boost::asio::ip::icmp	access:public	signature:()
v6	/usr/include/boost/asio/ip/tcp.hpp	/^  static tcp v6()$/;"	f	class:boost::asio::ip::tcp	access:public	signature:()
v6	/usr/include/boost/asio/ip/udp.hpp	/^  static udp v6()$/;"	f	class:boost::asio::ip::udp	access:public	signature:()
v6_only	/usr/include/boost/asio/ip/v6_only.hpp	/^typedef implementation_defined v6_only;$/;"	t	namespace:boost::asio::ip
value	/usr/include/boost/asio/detail/socket_option.hpp	/^  bool value() const$/;"	f	class:boost::asio::detail::socket_option::boolean	access:public	signature:() const
value	/usr/include/boost/asio/detail/socket_option.hpp	/^  int value() const$/;"	f	class:boost::asio::detail::socket_option::integer	access:public	signature:() const
value	/usr/include/boost/asio/error.hpp	/^  static const bool value = true;$/;"	m	struct:boost::system::is_error_code_enum	access:public
value	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  bool value() const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_enable_loopback	access:public	signature:() const
value	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int value() const$/;"	f	class:boost::asio::ip::detail::socket_option::multicast_hops	access:public	signature:() const
value	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int value() const$/;"	f	class:boost::asio::ip::detail::socket_option::unicast_hops	access:public	signature:() const
value	/usr/include/boost/asio/is_read_buffered.hpp	/^  static const bool value;$/;"	m	class:boost::asio::is_read_buffered	access:public
value	/usr/include/boost/asio/is_write_buffered.hpp	/^  static const bool value;$/;"	m	class:boost::asio::is_write_buffered	access:public
value	/usr/include/boost/asio/read_until.hpp	/^    enum { value = (sizeof((inner<const T&>::helper)((ref)())) == 1) };$/;"	e	enum:boost::asio::detail::has_result_type::__anon27
value	/usr/include/boost/asio/read_until.hpp	/^  static const bool value;$/;"	m	struct:boost::asio::is_match_condition	access:public
value	/usr/include/boost/asio/serial_port_base.hpp	/^    type value() const;$/;"	p	class:boost::asio::serial_port_base::flow_control	access:public	signature:() const
value	/usr/include/boost/asio/serial_port_base.hpp	/^    type value() const;$/;"	p	class:boost::asio::serial_port_base::parity	access:public	signature:() const
value	/usr/include/boost/asio/serial_port_base.hpp	/^    type value() const;$/;"	p	class:boost::asio::serial_port_base::stop_bits	access:public	signature:() const
value	/usr/include/boost/asio/serial_port_base.hpp	/^    unsigned int value() const;$/;"	p	class:boost::asio::serial_port_base::baud_rate	access:public	signature:() const
value	/usr/include/boost/asio/serial_port_base.hpp	/^    unsigned int value() const;$/;"	p	class:boost::asio::serial_port_base::character_size	access:public	signature:() const
values_	/usr/include/boost/asio/detail/hash_map.hpp	/^  std::list<value_type> values_;$/;"	m	class:boost::asio::detail::hash_map	access:private
values_	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  boost::shared_ptr<values_type> values_;$/;"	m	class:boost::asio::ip::basic_resolver_iterator	access:private
values_erase	/usr/include/boost/asio/detail/hash_map.hpp	/^  void values_erase(iterator it)$/;"	f	class:boost::asio::detail::hash_map	access:private	signature:(iterator it)
values_insert	/usr/include/boost/asio/detail/hash_map.hpp	/^  iterator values_insert(iterator it, const value_type& v)$/;"	f	class:boost::asio::detail::hash_map	access:private	signature:(iterator it, const value_type& v)
values_iter_type	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  typedef typename values_type::const_iterator values_iter_type;$/;"	t	class:boost::asio::ip::basic_resolver_iterator	access:private
values_type	/usr/include/boost/asio/ip/basic_resolver_iterator.hpp	/^  typedef std::vector<basic_resolver_entry<InternetProtocol> > values_type;$/;"	t	class:boost::asio::ip::basic_resolver_iterator	access:private
value_	/usr/include/boost/asio/detail/io_control.hpp	/^  detail::ioctl_arg_type value_;$/;"	m	class:boost::asio::detail::io_control::bytes_readable	access:private
value_	/usr/include/boost/asio/detail/io_control.hpp	/^  detail::ioctl_arg_type value_;$/;"	m	class:boost::asio::detail::io_control::non_blocking_io	access:private
value_	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^  T* value_;$/;"	m	class:boost::asio::detail::null_tss_ptr	access:private
value_	/usr/include/boost/asio/detail/socket_option.hpp	/^  ::linger value_;$/;"	m	class:boost::asio::detail::socket_option::linger	access:private
value_	/usr/include/boost/asio/detail/socket_option.hpp	/^  int value_;$/;"	m	class:boost::asio::detail::socket_option::boolean	access:private
value_	/usr/include/boost/asio/detail/socket_option.hpp	/^  int value_;$/;"	m	class:boost::asio::detail::socket_option::integer	access:private
value_	/usr/include/boost/asio/ip/detail/socket_option.hpp	/^  int value_;$/;"	m	class:boost::asio::ip::detail::socket_option::unicast_hops	access:private
value_	/usr/include/boost/asio/serial_port_base.hpp	/^    type value_;$/;"	m	class:boost::asio::serial_port_base::flow_control	access:private
value_	/usr/include/boost/asio/serial_port_base.hpp	/^    type value_;$/;"	m	class:boost::asio::serial_port_base::parity	access:private
value_	/usr/include/boost/asio/serial_port_base.hpp	/^    type value_;$/;"	m	class:boost::asio::serial_port_base::stop_bits	access:private
value_	/usr/include/boost/asio/serial_port_base.hpp	/^    unsigned int value_;$/;"	m	class:boost::asio::serial_port_base::baud_rate	access:private
value_	/usr/include/boost/asio/serial_port_base.hpp	/^    unsigned int value_;$/;"	m	class:boost::asio::serial_port_base::character_size	access:private
value_type	/usr/include/boost/asio/buffer.hpp	/^  typedef const_buffer value_type;$/;"	t	class:boost::asio::const_buffers_1	access:public
value_type	/usr/include/boost/asio/buffer.hpp	/^  typedef mutable_buffer value_type;$/;"	t	class:boost::asio::mutable_buffers_1	access:public
value_type	/usr/include/boost/asio/buffer.hpp	/^  typedef mutable_buffer value_type;$/;"	t	class:boost::asio::null_buffers	access:public
value_type	/usr/include/boost/asio/detail/consuming_buffers.hpp	/^  typedef Buffer value_type;$/;"	t	class:boost::asio::detail::consuming_buffers	access:public
value_type	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  typedef Object value_type;$/;"	t	struct:boost::asio::detail::handler_alloc_traits	access:public
value_type	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  typedef typename Alloc_Traits::value_type value_type;$/;"	t	class:boost::asio::detail::handler_ptr	access:public
value_type	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  typedef typename Alloc_Traits::value_type value_type;$/;"	t	class:boost::asio::detail::raw_handler_ptr	access:public
value_type	/usr/include/boost/asio/detail/hash_map.hpp	/^  typedef std::pair<K, V> value_type;$/;"	t	class:boost::asio::detail::hash_map	access:public
verify_client_once	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const int verify_client_once = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
verify_fail_if_no_peer_cert	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const int verify_fail_if_no_peer_cert = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
verify_mode	/usr/include/boost/asio/ssl/context_base.hpp	/^  typedef int verify_mode;$/;"	t	class:boost::asio::ssl::context_base	access:public
verify_none	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const int verify_none = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
verify_peer	/usr/include/boost/asio/ssl/context_base.hpp	/^  static const int verify_peer = implementation_defined;$/;"	m	class:boost::asio::ssl::context_base	access:public
version_	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    unsigned long version_;$/;"	m	class:boost::asio::detail::indirect_handler_queue::node	access:private
wait	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  void wait()$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:()
wait	/usr/include/boost/asio/basic_deadline_timer.hpp	/^  void wait(boost::system::error_code& ec)$/;"	f	class:boost::asio::basic_deadline_timer	access:public	signature:(boost::system::error_code& ec)
wait	/usr/include/boost/asio/deadline_timer_service.hpp	/^  void wait(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::deadline_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
wait	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  void wait(implementation_type& impl, boost::system::error_code& ec)$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:(implementation_type& impl, boost::system::error_code& ec)
wait	/usr/include/boost/asio/detail/null_event.hpp	/^  void wait(Lock&)$/;"	f	class:boost::asio::detail::null_event	access:public	signature:(Lock&)
wait	/usr/include/boost/asio/detail/posix_event.hpp	/^  void wait(Lock& lock)$/;"	f	class:boost::asio::detail::posix_event	access:public	signature:(Lock& lock)
wait	/usr/include/boost/asio/detail/win_event.hpp	/^  void wait(Lock& lock)$/;"	f	class:boost::asio::detail::win_event	access:public	signature:(Lock& lock)
wait_duration	/usr/include/boost/asio/detail/timer_queue.hpp	/^  virtual boost::posix_time::time_duration wait_duration() const$/;"	f	class:boost::asio::detail::timer_queue	access:public	signature:() const
wait_duration	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual boost::posix_time::time_duration wait_duration() const = 0;$/;"	p	class:boost::asio::detail::timer_queue_base	access:public	signature:() const
wait_handler	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^    wait_handler(boost::asio::io_service& io_service, Handler handler)$/;"	f	class:boost::asio::detail::deadline_timer_service::wait_handler	access:public	signature:(boost::asio::io_service& io_service, Handler handler)
wait_handler	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  class wait_handler : $/;"	c	class:boost::asio::detail::deadline_timer_service	inherits:handler_base_from_member	access:public
wait_in_progress_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  bool wait_in_progress_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
wait_in_progress_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  bool wait_in_progress_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
wait_in_progress_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  bool wait_in_progress_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
wakeup_event	/usr/include/boost/asio/detail/task_io_service.hpp	/^    event wakeup_event;$/;"	m	struct:boost::asio::detail::task_io_service::idle_thread_info	access:public
wakeup_event	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^    event wakeup_event;$/;"	m	struct:boost::asio::detail::task_io_service::idle_thread_info	access:public
weak_cancel_token_type	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^  typedef boost::weak_ptr<void> weak_cancel_token_type;$/;"	t	class:boost::asio::detail::win_iocp_socket_service	access:public
WIN32	/usr/include/boost/asio/detail/socket_types.hpp	46;"	d
WIN32	/usr/include/boost/asio/detail/socket_types.hpp	56;"	d
WIN32_LEAN_AND_MEAN	/usr/include/boost/asio/detail/socket_types.hpp	68;"	d
wince_thread	/usr/include/boost/asio/detail/wince_thread.hpp	/^  wince_thread(Function f)$/;"	f	class:boost::asio::detail::wince_thread	access:public	signature:(Function f)
wince_thread	/usr/include/boost/asio/detail/wince_thread.hpp	/^class wince_thread$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
wince_thread_function	/usr/include/boost/asio/detail/wince_thread.hpp	/^  friend DWORD WINAPI wince_thread_function(LPVOID arg);$/;"	p	class:boost::asio::detail::wince_thread	access:friend	signature:(LPVOID arg)
wince_thread_function	/usr/include/boost/asio/detail/wince_thread.hpp	/^DWORD WINAPI wince_thread_function(LPVOID arg);$/;"	p	namespace:boost::asio::detail	signature:(LPVOID arg)
wince_thread_function	/usr/include/boost/asio/detail/wince_thread.hpp	/^inline DWORD WINAPI wince_thread_function(LPVOID arg)$/;"	f	namespace:boost::asio::detail	signature:(LPVOID arg)
windows	/usr/include/boost/asio/windows/basic_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
windows	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
windows	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
windows	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
windows	/usr/include/boost/asio/windows/random_access_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
windows	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
windows	/usr/include/boost/asio/windows/stream_handle.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
windows	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^namespace windows {$/;"	n	namespace:boost::asio
winsock_init	/usr/include/boost/asio/detail/winsock_init.hpp	/^  winsock_init()$/;"	f	class:boost::asio::detail::winsock_init	access:public	signature:()
winsock_init	/usr/include/boost/asio/detail/winsock_init.hpp	/^class winsock_init$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
win_event	/usr/include/boost/asio/detail/win_event.hpp	/^  win_event()$/;"	f	class:boost::asio::detail::win_event	access:public	signature:()
win_event	/usr/include/boost/asio/detail/win_event.hpp	/^class win_event$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
win_fd_set	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  struct win_fd_set$/;"	s	class:boost::asio::detail::win_fd_set_adapter	access:private
win_fd_set_adapter	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  win_fd_set_adapter()$/;"	f	class:boost::asio::detail::win_fd_set_adapter	access:public	signature:()
win_fd_set_adapter	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^class win_fd_set_adapter$/;"	c	namespace:boost::asio::detail
win_fd_set_size	/usr/include/boost/asio/detail/win_fd_set_adapter.hpp	/^  enum { win_fd_set_size = 1024 };$/;"	e	enum:boost::asio::detail::win_fd_set_adapter::__anon19
win_iocp_handle_service	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  win_iocp_handle_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(boost::asio::io_service& io_service)
win_iocp_handle_service	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^class win_iocp_handle_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
win_iocp_io_service	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  win_iocp_io_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:(boost::asio::io_service& io_service)
win_iocp_io_service	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^class win_iocp_io_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
win_iocp_overlapped_ptr	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  explicit win_iocp_overlapped_ptr($/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:( boost::asio::io_service& io_service, Handler handler)
win_iocp_overlapped_ptr	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  win_iocp_overlapped_ptr()$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:()
win_iocp_overlapped_ptr	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^class win_iocp_overlapped_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
win_iocp_serial_port_service	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  win_iocp_serial_port_service(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(boost::asio::io_service& io_service)
win_iocp_serial_port_service	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^class win_iocp_serial_port_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
win_iocp_socket_service	/usr/include/boost/asio/detail/win_iocp_socket_service.hpp	/^class win_iocp_socket_service$/;"	c	namespace:boost::asio::detail	inherits:boost::asio::detail::service_base
win_mutex	/usr/include/boost/asio/detail/win_mutex.hpp	/^  win_mutex()$/;"	f	class:boost::asio::detail::win_mutex	access:public	signature:()
win_mutex	/usr/include/boost/asio/detail/win_mutex.hpp	/^class win_mutex$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
win_signal_blocker	/usr/include/boost/asio/detail/win_signal_blocker.hpp	/^  win_signal_blocker()$/;"	f	class:boost::asio::detail::win_signal_blocker	access:public	signature:()
win_signal_blocker	/usr/include/boost/asio/detail/win_signal_blocker.hpp	/^class win_signal_blocker$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
win_thread	/usr/include/boost/asio/detail/win_thread.hpp	/^  win_thread(Function f)$/;"	f	class:boost::asio::detail::win_thread	access:public	signature:(Function f)
win_thread	/usr/include/boost/asio/detail/win_thread.hpp	/^class win_thread$/;"	c	namespace:boost::asio::detail	inherits:noncopyable,win_thread_base
win_thread_base	/usr/include/boost/asio/detail/win_thread.hpp	/^class win_thread_base$/;"	c	namespace:boost::asio::detail
win_thread_function	/usr/include/boost/asio/detail/win_thread.hpp	/^  friend unsigned int __stdcall win_thread_function(void* arg);$/;"	p	class:boost::asio::detail::win_thread	access:friend	signature:(void* arg)
win_thread_function	/usr/include/boost/asio/detail/win_thread.hpp	/^inline unsigned int __stdcall win_thread_function(void* arg)$/;"	f	namespace:boost::asio::detail	signature:(void* arg)
win_thread_function	/usr/include/boost/asio/detail/win_thread.hpp	/^unsigned int __stdcall win_thread_function(void* arg);$/;"	p	namespace:boost::asio::detail	signature:(void* arg)
win_tss_ptr	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  win_tss_ptr()$/;"	f	class:boost::asio::detail::win_tss_ptr	access:public	signature:()
win_tss_ptr	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^class win_tss_ptr$/;"	c	namespace:boost::asio::detail	inherits:noncopyable
Word	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^    u_short Word[8];$/;"	m	union:boost::asio::detail::in6_addr_emulation::__anon8	access:public
work	/usr/include/boost/asio/io_service.hpp	/^  explicit work(boost::asio::io_service& io_service);$/;"	p	class:boost::asio::io_service::work	access:public	signature:(boost::asio::io_service& io_service)
work	/usr/include/boost/asio/io_service.hpp	/^  work(const work& other);$/;"	p	class:boost::asio::io_service::work	access:public	signature:(const work& other)
work	/usr/include/boost/asio/io_service.hpp	/^class io_service::work$/;"	c	class:boost::asio::io_service
work_	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::deadline_timer_service::wait_handler	access:private
work_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::null_buffers_operation	access:private
work_	/usr/include/boost/asio/detail/reactive_descriptor_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::read_operation	access:private
work_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::null_buffers_operation	access:private
work_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::receive_from_operation	access:private
work_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::receive_operation	access:private
work_	/usr/include/boost/asio/detail/reactive_socket_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::send_to_operation	access:private
work_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::resolver_service::resolve_endpoint_handler	access:private
work_	/usr/include/boost/asio/detail/resolver_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::resolver_service::resolve_query_handler	access:private
work_	/usr/include/boost/asio/detail/resolver_service.hpp	/^  boost::scoped_ptr<boost::asio::io_service::work> work_;$/;"	m	class:boost::asio::detail::resolver_service	access:private
work_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::read_operation	access:private
work_	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::detail::win_iocp_handle_service::write_operation	access:private
work_	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    boost::asio::io_service::work work_;$/;"	m	class:boost::asio::ssl::detail::openssl_stream_service::base_handler	access:private
work_finished	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void work_finished()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
work_finished	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void work_finished()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
work_finished	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void work_finished()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
work_io_service_	/usr/include/boost/asio/detail/resolver_service.hpp	/^  boost::scoped_ptr<boost::asio::io_service> work_io_service_;$/;"	m	class:boost::asio::detail::resolver_service	access:private
work_io_service_runner	/usr/include/boost/asio/detail/resolver_service.hpp	/^    work_io_service_runner(boost::asio::io_service& io_service)$/;"	f	class:boost::asio::detail::resolver_service::work_io_service_runner	access:public	signature:(boost::asio::io_service& io_service)
work_io_service_runner	/usr/include/boost/asio/detail/resolver_service.hpp	/^  class work_io_service_runner$/;"	c	class:boost::asio::detail::resolver_service	access:private
work_started	/usr/include/boost/asio/detail/task_io_service.hpp	/^  void work_started()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
work_started	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^  void work_started()$/;"	f	class:boost::asio::detail::task_io_service	access:public	signature:()
work_started	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^  void work_started()$/;"	f	class:boost::asio::detail::win_iocp_io_service	access:public	signature:()
work_thread_	/usr/include/boost/asio/detail/resolver_service.hpp	/^  boost::scoped_ptr<boost::asio::detail::thread> work_thread_;$/;"	m	class:boost::asio::detail::resolver_service	access:private
would_block	/usr/include/boost/asio/error.hpp	/^  would_block = BOOST_ASIO_SOCKET_ERROR(EWOULDBLOCK)$/;"	e	enum:boost::asio::error::basic_errors
wrap	/usr/include/boost/asio/detail/handler_queue.hpp	/^  static handler* wrap(Handler h)$/;"	f	class:boost::asio::detail::handler_queue	access:public	signature:(Handler h)
wrap	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  static handler* wrap(Handler h)$/;"	f	class:boost::asio::detail::indirect_handler_queue	access:public	signature:(Handler h)
wrap	/usr/include/boost/asio/io_service.hpp	/^  wrap(Handler handler);$/;"	p	class:boost::asio::io_service	access:public	signature:(Handler handler)
wrap	/usr/include/boost/asio/strand.hpp	/^  wrap(Handler handler)$/;"	f	class:boost::asio::io_service::strand	access:public	signature:(Handler handler)
wrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^  wrapped_handler($/;"	f	class:boost::asio::detail::wrapped_handler	access:public	signature:( typename boost::add_reference<Dispatcher>::type dispatcher, Handler handler)
wrapped_handler	/usr/include/boost/asio/detail/wrapped_handler.hpp	/^class wrapped_handler$/;"	c	namespace:boost::asio::detail
write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, basic_streambuf<Allocator>& b);$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, basic_streambuf<Allocator>& b)
write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, basic_streambuf<Allocator>& b,$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers);$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers)
write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers, CompletionCondition completion_condition)
write	/usr/include/boost/asio/write.hpp	/^std::size_t write(SyncWriteStream& s, const ConstBufferSequence& buffers,$/;"	p	namespace:boost::asio	signature:(SyncWriteStream& s, const ConstBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
write_	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  write_func  write_;$/;"	m	class:boost::asio::ssl::detail::openssl_operation	access:private
write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition)
write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d, boost::uint64_t offset,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b, CompletionCondition completion_condition, boost::system::error_code& ec)
write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, basic_streambuf<Allocator>& b)
write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers)
write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition)
write_at	/usr/include/boost/asio/write_at.hpp	/^std::size_t write_at(SyncRandomAccessWriteDevice& d,$/;"	p	namespace:boost::asio	signature:(SyncRandomAccessWriteDevice& d, boost::uint64_t offset, const ConstBufferSequence& buffers, CompletionCondition completion_condition, boost::system::error_code& ec)
write_descriptor_	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  int write_descriptor_;$/;"	m	class:boost::asio::detail::eventfd_select_interrupter	access:private
write_descriptor_	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  int write_descriptor_;$/;"	m	class:boost::asio::detail::pipe_select_interrupter	access:private
write_descriptor_	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  socket_type write_descriptor_;$/;"	m	class:boost::asio::detail::socket_select_interrupter	access:private
write_func	/usr/include/boost/asio/ssl/detail/openssl_operation.hpp	/^  typedef boost::function<int (bool, int)> write_func;$/;"	t	class:boost::asio::ssl::detail::openssl_operation	access:private
write_operation	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    write_operation(win_iocp_io_service& io_service,$/;"	f	class:boost::asio::detail::win_iocp_handle_service::write_operation	access:public	signature:(win_iocp_io_service& io_service, const ConstBufferSequence& buffers, Handler handler)
write_operation	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  class write_operation$/;"	c	class:boost::asio::detail::win_iocp_handle_service	inherits:operation	access:public
write_op_queue_	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  reactor_op_queue<socket_type> write_op_queue_;$/;"	m	class:boost::asio::detail::dev_poll_reactor	access:private
write_op_queue_	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  reactor_op_queue<socket_type> write_op_queue_;$/;"	m	class:boost::asio::detail::epoll_reactor	access:private
write_op_queue_	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  reactor_op_queue<socket_type> write_op_queue_;$/;"	m	class:boost::asio::detail::kqueue_reactor	access:private
write_op_queue_	/usr/include/boost/asio/detail/select_reactor.hpp	/^  reactor_op_queue<socket_type> write_op_queue_;$/;"	m	class:boost::asio::detail::select_reactor	access:private
write_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const ConstBufferSequence& buffers)
write_some	/usr/include/boost/asio/basic_serial_port.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_serial_port	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers)
write_some	/usr/include/boost/asio/basic_stream_socket.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::basic_stream_socket	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const ConstBufferSequence& buffers)
write_some	/usr/include/boost/asio/buffered_read_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_read_stream	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const ConstBufferSequence& buffers)
write_some	/usr/include/boost/asio/buffered_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_stream	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const ConstBufferSequence& buffers)
write_some	/usr/include/boost/asio/buffered_write_stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::buffered_write_stream	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/detail/reactive_serial_port_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::reactive_serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, const null_buffers& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/detail/win_iocp_serial_port_service.hpp	/^  size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::detail::win_iocp_serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const ConstBufferSequence& buffers)
write_some	/usr/include/boost/asio/posix/basic_stream_descriptor.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::posix::basic_stream_descriptor	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/posix/stream_descriptor_service.hpp	/^  std::size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::posix::stream_descriptor_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/serial_port_service.hpp	/^  std::size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::serial_port_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^  std::size_t write_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const Const_Buffers& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/ssl/stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(const ConstBufferSequence& buffers)
write_some	/usr/include/boost/asio/ssl/stream.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::ssl::stream	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/ssl/stream_service.hpp	/^  std::size_t write_some(impl_type& impl, Stream& next_layer,$/;"	f	class:boost::asio::ssl::stream_service	access:public	signature:(impl_type& impl, Stream& next_layer, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers)$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const ConstBufferSequence& buffers)
write_some	/usr/include/boost/asio/windows/basic_stream_handle.hpp	/^  std::size_t write_some(const ConstBufferSequence& buffers,$/;"	f	class:boost::asio::windows::basic_stream_handle	access:public	signature:(const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some	/usr/include/boost/asio/windows/stream_handle_service.hpp	/^  std::size_t write_some(implementation_type& impl,$/;"	f	class:boost::asio::windows::stream_handle_service	access:public	signature:(implementation_type& impl, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::detail::win_iocp_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some_at	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^  size_t write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	p	class:boost::asio::detail::win_iocp_handle_service	access:private	signature:(implementation_type& impl, boost::uint64_t offset, const null_buffers& buffers, boost::system::error_code& ec)
write_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  std::size_t write_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const ConstBufferSequence& buffers)
write_some_at	/usr/include/boost/asio/windows/basic_random_access_handle.hpp	/^  std::size_t write_some_at(boost::uint64_t offset,$/;"	f	class:boost::asio::windows::basic_random_access_handle	access:public	signature:(boost::uint64_t offset, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some_at	/usr/include/boost/asio/windows/random_access_handle_service.hpp	/^  std::size_t write_some_at(implementation_type& impl, boost::uint64_t offset,$/;"	f	class:boost::asio::windows::random_access_handle_service	access:public	signature:(implementation_type& impl, boost::uint64_t offset, const ConstBufferSequence& buffers, boost::system::error_code& ec)
write_some_handler	/usr/include/boost/asio/buffered_write_stream.hpp	/^    write_some_handler(boost::asio::io_service& io_service,$/;"	f	class:boost::asio::buffered_write_stream::write_some_handler	access:public	signature:(boost::asio::io_service& io_service, detail::buffered_stream_storage& storage, const ConstBufferSequence& buffers, WriteHandler handler)
write_some_handler	/usr/include/boost/asio/buffered_write_stream.hpp	/^  class write_some_handler$/;"	c	class:boost::asio::buffered_write_stream	access:public
write_stream_type	/usr/include/boost/asio/buffered_stream.hpp	/^  typedef buffered_write_stream<Stream> write_stream_type;$/;"	t	class:boost::asio::buffered_stream	access:private
_ReadWriteBarrier	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^extern "C" void _ReadWriteBarrier();$/;"	p	signature:()
_S6_u8	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	71;"	d
_S6_un	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	70;"	d
_WIN32_WINNT	/usr/include/boost/asio/detail/socket_types.hpp	41;"	d
_WSPIAPI_H_	/usr/include/boost/asio/detail/socket_types.hpp	62;"	d
_WSPIAPI_H_	/usr/include/boost/asio/detail/socket_types.hpp	83;"	d
__ss_align	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  __int64 __ss_align;$/;"	m	struct:boost::asio::detail::sockaddr_storage_emulation	access:public
__ss_pad1	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  char __ss_pad1[sockaddr_storage_pad1size];$/;"	m	struct:boost::asio::detail::sockaddr_storage_emulation	access:public
__ss_pad2	/usr/include/boost/asio/detail/old_win_sdk_compat.hpp	/^  char __ss_pad2[sockaddr_storage_pad2size];$/;"	m	struct:boost::asio::detail::sockaddr_storage_emulation	access:public
~auto_addrinfo	/usr/include/boost/asio/detail/resolver_service.hpp	/^    ~auto_addrinfo()$/;"	f	class:boost::asio::detail::resolver_service::auto_addrinfo	access:public	signature:()
~auto_work	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    ~auto_work()$/;"	f	struct:boost::asio::detail::win_iocp_io_service::auto_work	access:public	signature:()
~base_handler	/usr/include/boost/asio/ssl/detail/openssl_stream_service.hpp	/^    ~base_handler()$/;"	f	class:boost::asio::ssl::detail::openssl_stream_service::base_handler	access:public	signature:()
~basic_context	/usr/include/boost/asio/ssl/basic_context.hpp	/^  ~basic_context()$/;"	f	class:boost::asio::ssl::basic_context	access:public	signature:()
~basic_descriptor	/usr/include/boost/asio/posix/basic_descriptor.hpp	/^  ~basic_descriptor()$/;"	f	class:boost::asio::posix::basic_descriptor	access:protected	signature:()
~basic_handle	/usr/include/boost/asio/windows/basic_handle.hpp	/^  ~basic_handle()$/;"	f	class:boost::asio::windows::basic_handle	access:protected	signature:()
~basic_io_object	/usr/include/boost/asio/basic_io_object.hpp	/^  ~basic_io_object()$/;"	f	class:boost::asio::basic_io_object	access:protected	signature:()
~basic_socket	/usr/include/boost/asio/basic_socket.hpp	/^  ~basic_socket()$/;"	f	class:boost::asio::basic_socket	access:protected	signature:()
~basic_socket_streambuf	/usr/include/boost/asio/basic_socket_streambuf.hpp	/^  virtual ~basic_socket_streambuf()$/;"	f	class:boost::asio::basic_socket_streambuf	access:public	signature:()
~buffer_debug_check	/usr/include/boost/asio/buffer.hpp	/^  ~buffer_debug_check()$/;"	f	class:boost::asio::detail::buffer_debug_check	access:public	signature:()
~buffer_resize_guard	/usr/include/boost/asio/detail/buffer_resize_guard.hpp	/^  ~buffer_resize_guard()$/;"	f	class:boost::asio::detail::buffer_resize_guard	access:public	signature:()
~context	/usr/include/boost/asio/detail/call_stack.hpp	/^    ~context()$/;"	f	class:boost::asio::detail::call_stack::context	access:public	signature:()
~context_base	/usr/include/boost/asio/ssl/context_base.hpp	/^  ~context_base()$/;"	f	class:boost::asio::ssl::context_base	access:protected	signature:()
~deadline_timer_service	/usr/include/boost/asio/detail/deadline_timer_service.hpp	/^  ~deadline_timer_service()$/;"	f	class:boost::asio::detail::deadline_timer_service	access:public	signature:()
~descriptor_base	/usr/include/boost/asio/posix/descriptor_base.hpp	/^  ~descriptor_base()$/;"	f	class:boost::asio::posix::descriptor_base	access:protected	signature:()
~dev_poll_reactor	/usr/include/boost/asio/detail/dev_poll_reactor.hpp	/^  ~dev_poll_reactor()$/;"	f	class:boost::asio::detail::dev_poll_reactor	access:public	signature:()
~do_init	/usr/include/boost/asio/detail/winsock_init.hpp	/^    ~do_init()$/;"	f	struct:boost::asio::detail::winsock_init::do_init	access:public	signature:()
~do_init	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^    ~do_init()$/;"	f	class:boost::asio::ssl::detail::openssl_init::do_init	access:public	signature:()
~epoll_reactor	/usr/include/boost/asio/detail/epoll_reactor.hpp	/^  ~epoll_reactor()$/;"	f	class:boost::asio::detail::epoll_reactor	access:public	signature:()
~eventfd_select_interrupter	/usr/include/boost/asio/detail/eventfd_select_interrupter.hpp	/^  ~eventfd_select_interrupter()$/;"	f	class:boost::asio::detail::eventfd_select_interrupter	access:public	signature:()
~func_base	/usr/include/boost/asio/detail/posix_thread.hpp	/^    virtual ~func_base() {}$/;"	f	class:boost::asio::detail::posix_thread::func_base	access:public	signature:()
~func_base	/usr/include/boost/asio/detail/wince_thread.hpp	/^    virtual ~func_base() {}$/;"	f	class:boost::asio::detail::wince_thread::func_base	access:public	signature:()
~func_base	/usr/include/boost/asio/detail/win_thread.hpp	/^    virtual ~func_base() {}$/;"	f	class:boost::asio::detail::win_thread::func_base	access:public	signature:()
~handler	/usr/include/boost/asio/detail/handler_queue.hpp	/^    ~handler()$/;"	f	class:boost::asio::detail::handler_queue::handler	access:protected	signature:()
~handler	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    ~handler()$/;"	f	class:boost::asio::detail::indirect_handler_queue::handler	access:protected	signature:()
~handler_base	/usr/include/boost/asio/detail/strand_service.hpp	/^    ~handler_base()$/;"	f	class:boost::asio::detail::strand_service::handler_base	access:protected	signature:()
~handler_base_from_member	/usr/include/boost/asio/detail/handler_base_from_member.hpp	/^  ~handler_base_from_member()$/;"	f	class:boost::asio::detail::handler_base_from_member	access:protected	signature:()
~handler_cleanup	/usr/include/boost/asio/detail/task_io_service.hpp	/^    ~handler_cleanup()$/;"	f	class:boost::asio::detail::task_io_service::handler_cleanup	access:public	signature:()
~handler_cleanup	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^    ~handler_cleanup()$/;"	f	class:boost::asio::detail::task_io_service::handler_cleanup	access:public	signature:()
~handler_operation	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    ~handler_operation()$/;"	f	struct:boost::asio::detail::win_iocp_io_service::handler_operation	access:public	signature:()
~handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  ~handler_ptr()$/;"	f	class:boost::asio::detail::handler_ptr	access:public	signature:()
~indirect_handler_queue	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^  ~indirect_handler_queue()$/;"	f	class:boost::asio::detail::indirect_handler_queue	access:public	signature:()
~iocp_holder	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    ~iocp_holder() { if (handle) ::CloseHandle(handle); }$/;"	f	struct:boost::asio::detail::win_iocp_io_service::iocp_holder	access:public	signature:()
~io_service	/usr/include/boost/asio/io_service.hpp	/^  ~io_service();$/;"	p	class:boost::asio::io_service	access:public	signature:()
~kqueue_reactor	/usr/include/boost/asio/detail/kqueue_reactor.hpp	/^  ~kqueue_reactor()$/;"	f	class:boost::asio::detail::kqueue_reactor	access:public	signature:()
~local_free_on_block_exit	/usr/include/boost/asio/detail/local_free_on_block_exit.hpp	/^  ~local_free_on_block_exit()$/;"	f	class:boost::asio::detail::local_free_on_block_exit	access:public	signature:()
~noncopyable	/usr/include/boost/asio/detail/noncopyable.hpp	/^  ~noncopyable() {}$/;"	f	class:boost::asio::detail::noncopyable	access:protected	signature:()
~null_event	/usr/include/boost/asio/detail/null_event.hpp	/^  ~null_event()$/;"	f	class:boost::asio::detail::null_event	access:public	signature:()
~null_mutex	/usr/include/boost/asio/detail/null_mutex.hpp	/^  ~null_mutex()$/;"	f	class:boost::asio::detail::null_mutex	access:public	signature:()
~null_signal_blocker	/usr/include/boost/asio/detail/null_signal_blocker.hpp	/^  ~null_signal_blocker()$/;"	f	class:boost::asio::detail::null_signal_blocker	access:public	signature:()
~null_thread	/usr/include/boost/asio/detail/null_thread.hpp	/^  ~null_thread()$/;"	f	class:boost::asio::detail::null_thread	access:public	signature:()
~null_tss_ptr	/usr/include/boost/asio/detail/null_tss_ptr.hpp	/^  ~null_tss_ptr()$/;"	f	class:boost::asio::detail::null_tss_ptr	access:public	signature:()
~openssl_init	/usr/include/boost/asio/ssl/detail/openssl_init.hpp	/^  ~openssl_init()$/;"	f	class:boost::asio::ssl::detail::openssl_init	access:public	signature:()
~operation	/usr/include/boost/asio/detail/win_iocp_io_service.hpp	/^    ~operation()$/;"	f	class:boost::asio::detail::win_iocp_io_service::operation	access:protected	signature:()
~op_base	/usr/include/boost/asio/detail/reactor_op_queue.hpp	/^    ~op_base()$/;"	f	class:boost::asio::detail::reactor_op_queue::op_base	access:protected	signature:()
~overlapped_operation_base	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^    ~overlapped_operation_base()$/;"	f	struct:boost::asio::detail::win_iocp_overlapped_ptr::overlapped_operation_base	access:public	signature:()
~overlapped_ptr	/usr/include/boost/asio/windows/overlapped_ptr.hpp	/^  ~overlapped_ptr()$/;"	f	class:boost::asio::windows::overlapped_ptr	access:public	signature:()
~overlapped_wrapper	/usr/include/boost/asio/detail/win_iocp_handle_service.hpp	/^    ~overlapped_wrapper()$/;"	f	class:boost::asio::detail::win_iocp_handle_service::overlapped_wrapper	access:public	signature:()
~pipe_select_interrupter	/usr/include/boost/asio/detail/pipe_select_interrupter.hpp	/^  ~pipe_select_interrupter()$/;"	f	class:boost::asio::detail::pipe_select_interrupter	access:public	signature:()
~posix_event	/usr/include/boost/asio/detail/posix_event.hpp	/^  ~posix_event()$/;"	f	class:boost::asio::detail::posix_event	access:public	signature:()
~posix_mutex	/usr/include/boost/asio/detail/posix_mutex.hpp	/^  ~posix_mutex()$/;"	f	class:boost::asio::detail::posix_mutex	access:public	signature:()
~posix_signal_blocker	/usr/include/boost/asio/detail/posix_signal_blocker.hpp	/^  ~posix_signal_blocker()$/;"	f	class:boost::asio::detail::posix_signal_blocker	access:public	signature:()
~posix_thread	/usr/include/boost/asio/detail/posix_thread.hpp	/^  ~posix_thread()$/;"	f	class:boost::asio::detail::posix_thread	access:public	signature:()
~posix_tss_ptr	/usr/include/boost/asio/detail/posix_tss_ptr.hpp	/^  ~posix_tss_ptr()$/;"	f	class:boost::asio::detail::posix_tss_ptr	access:public	signature:()
~post_next_waiter_on_exit	/usr/include/boost/asio/detail/strand_service.hpp	/^    ~post_next_waiter_on_exit()$/;"	f	class:boost::asio::detail::strand_service::post_next_waiter_on_exit	access:public	signature:()
~raw_handler_ptr	/usr/include/boost/asio/detail/handler_alloc_helpers.hpp	/^  ~raw_handler_ptr()$/;"	f	class:boost::asio::detail::raw_handler_ptr	access:public	signature:()
~resolver_query_base	/usr/include/boost/asio/ip/resolver_query_base.hpp	/^  ~resolver_query_base()$/;"	f	class:boost::asio::ip::resolver_query_base	access:protected	signature:()
~resolver_service	/usr/include/boost/asio/detail/resolver_service.hpp	/^  ~resolver_service()$/;"	f	class:boost::asio::detail::resolver_service	access:public	signature:()
~scoped_lock	/usr/include/boost/asio/detail/scoped_lock.hpp	/^  ~scoped_lock()$/;"	f	class:boost::asio::detail::scoped_lock	access:public	signature:()
~scoped_ptr	/usr/include/boost/asio/detail/handler_queue.hpp	/^    ~scoped_ptr()$/;"	f	class:boost::asio::detail::handler_queue::scoped_ptr	access:public	signature:()
~scoped_ptr	/usr/include/boost/asio/detail/indirect_handler_queue.hpp	/^    ~scoped_ptr()$/;"	f	class:boost::asio::detail::indirect_handler_queue::scoped_ptr	access:public	signature:()
~select_reactor	/usr/include/boost/asio/detail/select_reactor.hpp	/^  ~select_reactor()$/;"	f	class:boost::asio::detail::select_reactor	access:public	signature:()
~serial_port_base	/usr/include/boost/asio/serial_port_base.hpp	/^  ~serial_port_base()$/;"	f	class:boost::asio::serial_port_base	access:protected	signature:()
~service	/usr/include/boost/asio/io_service.hpp	/^  virtual ~service();$/;"	p	class:boost::asio::io_service::service	access:protected	signature:()
~service_registry	/usr/include/boost/asio/detail/service_registry.hpp	/^  ~service_registry()$/;"	f	class:boost::asio::detail::service_registry	access:public	signature:()
~socket_base	/usr/include/boost/asio/socket_base.hpp	/^  ~socket_base()$/;"	f	class:boost::asio::socket_base	access:protected	signature:()
~socket_holder	/usr/include/boost/asio/detail/socket_holder.hpp	/^  ~socket_holder()$/;"	f	class:boost::asio::detail::socket_holder	access:public	signature:()
~socket_select_interrupter	/usr/include/boost/asio/detail/socket_select_interrupter.hpp	/^  ~socket_select_interrupter()$/;"	f	class:boost::asio::detail::socket_select_interrupter	access:public	signature:()
~strand	/usr/include/boost/asio/strand.hpp	/^  ~strand()$/;"	f	class:boost::asio::io_service::strand	access:public	signature:()
~stream	/usr/include/boost/asio/ssl/stream.hpp	/^  ~stream()$/;"	f	class:boost::asio::ssl::stream	access:public	signature:()
~stream_base	/usr/include/boost/asio/ssl/stream_base.hpp	/^  ~stream_base()$/;"	f	class:boost::asio::ssl::stream_base	access:protected	signature:()
~task_cleanup	/usr/include/boost/asio/detail/task_io_service.hpp	/^    ~task_cleanup()$/;"	f	class:boost::asio::detail::task_io_service::task_cleanup	access:public	signature:()
~task_cleanup	/usr/include/boost/asio/detail/task_io_service_2lock.hpp	/^    ~task_cleanup()$/;"	f	class:boost::asio::detail::task_io_service::task_cleanup	access:public	signature:()
~timer_base	/usr/include/boost/asio/detail/timer_queue.hpp	/^    ~timer_base()$/;"	f	class:boost::asio::detail::timer_queue::timer_base	access:protected	signature:()
~timer_queue_base	/usr/include/boost/asio/detail/timer_queue_base.hpp	/^  virtual ~timer_queue_base() {}$/;"	f	class:boost::asio::detail::timer_queue_base	access:public	signature:()
~wince_thread	/usr/include/boost/asio/detail/wince_thread.hpp	/^  ~wince_thread()$/;"	f	class:boost::asio::detail::wince_thread	access:public	signature:()
~winsock_init	/usr/include/boost/asio/detail/winsock_init.hpp	/^  ~winsock_init()$/;"	f	class:boost::asio::detail::winsock_init	access:public	signature:()
~win_event	/usr/include/boost/asio/detail/win_event.hpp	/^  ~win_event()$/;"	f	class:boost::asio::detail::win_event	access:public	signature:()
~win_iocp_overlapped_ptr	/usr/include/boost/asio/detail/win_iocp_overlapped_ptr.hpp	/^  ~win_iocp_overlapped_ptr()$/;"	f	class:boost::asio::detail::win_iocp_overlapped_ptr	access:public	signature:()
~win_mutex	/usr/include/boost/asio/detail/win_mutex.hpp	/^  ~win_mutex()$/;"	f	class:boost::asio::detail::win_mutex	access:public	signature:()
~win_signal_blocker	/usr/include/boost/asio/detail/win_signal_blocker.hpp	/^  ~win_signal_blocker()$/;"	f	class:boost::asio::detail::win_signal_blocker	access:public	signature:()
~win_thread	/usr/include/boost/asio/detail/win_thread.hpp	/^  ~win_thread()$/;"	f	class:boost::asio::detail::win_thread	access:public	signature:()
~win_tss_ptr	/usr/include/boost/asio/detail/win_tss_ptr.hpp	/^  ~win_tss_ptr()$/;"	f	class:boost::asio::detail::win_tss_ptr	access:public	signature:()
~work	/usr/include/boost/asio/io_service.hpp	/^  ~work();$/;"	p	class:boost::asio::io_service::work	access:public	signature:()
