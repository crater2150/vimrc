!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	2	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
a	/usr/include/boost/range/concepts.hpp	/^        T a;$/;"	m	struct:boost::SinglePassRangeConcept	access:public
abstract_value_type	/usr/include/boost/range/iterator_range.hpp	/^                                 reference, value_type >::type abstract_value_type;$/;"	t	class:boost::iterator_range	access:private
adl_begin	/usr/include/boost/range/iterator_range.hpp	/^            static IteratorT adl_begin( ForwardRange& r )$/;"	f	struct:boost::iterator_range_detail::iterator_range_impl	access:public	signature:( ForwardRange& r )
adl_end	/usr/include/boost/range/iterator_range.hpp	/^            static IteratorT adl_end( ForwardRange& r )$/;"	f	struct:boost::iterator_range_detail::iterator_range_impl	access:public	signature:( ForwardRange& r )
advance_begin	/usr/include/boost/range/iterator_range.hpp	/^           iterator_range& advance_begin( difference_type n )$/;"	f	class:boost::iterator_range	access:public	signature:( difference_type n )
advance_end	/usr/include/boost/range/iterator_range.hpp	/^           iterator_range& advance_end( difference_type n )$/;"	f	class:boost::iterator_range	access:public	signature:( difference_type n )
algorithm	/usr/include/boost/range/detail/collection_traits.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
algorithm	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
apply	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                struct apply$/;"	s	struct:boost::algorithm::detail::array_traits_select	access:public
ar	/usr/include/boost/range/detail/remove_extent.hpp	/^            static T* ar;$/;"	m	struct:boost::range_detail::remove_extent	access:public
array_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<4>::type    array_;$/;"	t	namespace:boost::range_detail
array_base_types	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                >::type array_base_types;$/;"	t	struct:boost::algorithm::detail::array_traits_selector	access:private
array_container_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_container_traits$/;"	s	namespace:boost::algorithm::detail
array_container_traits_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_container_traits_selector$/;"	s	namespace:boost::algorithm::detail
array_functions	/usr/include/boost/range/detail/microsoft.hpp	/^    struct array_functions$/;"	s	namespace:boost::range_detail_microsoft
array_length	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                struct array_length$/;"	s	struct:boost::algorithm::detail::array_length_selector	access:public
array_length_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_length_selector$/;"	s	namespace:boost::algorithm::detail
array_length_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_length_selector<char>$/;"	s	namespace:boost::algorithm::detail
array_length_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_length_selector<wchar_t>$/;"	s	namespace:boost::algorithm::detail
array_length_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                        BOOST_NESTED_TEMPLATE array_length<traits_type> array_length_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:private
array_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    pair_t >::type array_t;$/;"	t	class:boost::range_detail::range	access:private
array_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits$/;"	s	namespace:boost::algorithm::detail
array_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits<T[sz]>$/;"	s	namespace:boost::algorithm::detail
array_traits_cv_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_cv_selector$/;"	s	namespace:boost::algorithm::detail
array_traits_impl	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_impl$/;"	s	namespace:boost::algorithm::detail
array_traits_impl_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_impl_selector$/;"	s	namespace:boost::algorithm::detail
array_traits_select	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_select$/;"	s	namespace:boost::algorithm::detail
array_traits_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_selector $/;"	s	namespace:boost::algorithm::detail
array_traits_void	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_void$/;"	s	namespace:boost::algorithm::detail
as_array	/usr/include/boost/range/as_array.hpp	/^    as_array( const Range& r )$/;"	f	namespace:boost	signature:( const Range& r )
as_array	/usr/include/boost/range/as_array.hpp	/^    as_array( R& r )$/;"	f	namespace:boost	signature:( R& r )
as_literal	/usr/include/boost/range/as_literal.hpp	/^    as_literal( const Range& r )$/;"	f	namespace:boost	signature:( const Range& r )
as_literal	/usr/include/boost/range/as_literal.hpp	/^    as_literal( Range& r )$/;"	f	namespace:boost	signature:( Range& r )
as_literal	/usr/include/boost/range/detail/as_literal.hpp	/^    as_literal( Range& r )$/;"	f	namespace:boost	signature:( Range& r )
ATL	/usr/include/boost/range/atl.hpp	/^namespace ATL {$/;"	n
atl_array_functions	/usr/include/boost/range/atl.hpp	/^    struct atl_array_functions :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
atl_rb_tree_tag	/usr/include/boost/range/atl.hpp	/^    struct atl_rb_tree_tag$/;"	s	namespace:boost::range_detail_microsoft
atl_string_tag	/usr/include/boost/range/atl.hpp	/^    struct atl_string_tag$/;"	s	namespace:boost::range_detail_microsoft
back	/usr/include/boost/range/iterator_range.hpp	/^           reference back() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
back	/usr/include/boost/range/sub_range.hpp	/^        const_reference back() const$/;"	f	class:boost::sub_range	access:public	signature:() const
back	/usr/include/boost/range/sub_range.hpp	/^        reference back()$/;"	f	class:boost::sub_range	access:public	signature:()
bare_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename remove_cv<T>::type bare_t;$/;"	t	struct:boost::range_detail_microsoft::const_iterator_of	access:public
bare_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename remove_cv<T>::type bare_t;$/;"	t	struct:boost::range_detail_microsoft::customization_of	access:public
bare_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename remove_cv<T>::type bare_t;$/;"	t	struct:boost::range_detail_microsoft::mutable_iterator_of	access:public
base	/usr/include/boost/range/sub_range.hpp	/^        typedef iterator_range< iterator_t  > base;$/;"	t	class:boost::sub_range	access:private
begin	/usr/include/boost/range/atl.hpp	/^        Iterator begin(X const& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X const& x)
begin	/usr/include/boost/range/atl.hpp	/^        Iterator begin(X& x) \/\/ redefine$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
begin	/usr/include/boost/range/atl.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
begin	/usr/include/boost/range/atl.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::indirected_list_functions	access:public	signature:(X& x)
begin	/usr/include/boost/range/atl.hpp	/^        typename mutable_<Iterator, X>::type begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
begin	/usr/include/boost/range/begin.hpp	/^inline BOOST_DEDUCED_TYPENAME range_iterator<const T>::type begin( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
begin	/usr/include/boost/range/begin.hpp	/^inline BOOST_DEDUCED_TYPENAME range_iterator<T>::type begin( T& r )$/;"	f	namespace:boost	signature:( T& r )
begin	/usr/include/boost/range/detail/begin.hpp	/^    begin( C& c )$/;"	f	namespace:boost	signature:( C& c )
begin	/usr/include/boost/range/detail/collection_traits.hpp	/^        begin( C& c )$/;"	f	namespace:boost::algorithm	signature:( C& c )
begin	/usr/include/boost/range/detail/collection_traits.hpp	/^        begin( const C& c )$/;"	f	namespace:boost::algorithm	signature:( const C& c )
begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator begin( const A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( const A& a )
begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator begin( const C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( const C& c )
begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator begin( const P& p )$/;"	f	struct:boost::algorithm::detail::pair_container_traits	access:public	signature:( const P& p )
begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator begin( const P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( const P& p )
begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator begin( A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( A& a )
begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator begin( C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( C& c )
begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator begin( P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( P& p )
begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator begin( A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( A& a )
begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator begin( C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( C& c )
begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator begin( P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( P& p )
begin	/usr/include/boost/range/detail/microsoft.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::array_functions	access:public	signature:(X& x)
begin	/usr/include/boost/range/detail/microsoft.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::list_functions	access:public	signature:(X& x)
begin	/usr/include/boost/range/iterator_range.hpp	/^            IteratorT begin() const $/;"	f	class:boost::iterator_range	access:public	signature:() const
begin	/usr/include/boost/range/mfc.hpp	/^        Iterator begin(X const& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X const& x)
begin	/usr/include/boost/range/mfc.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
begin	/usr/include/boost/range/mfc.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_functions	access:public	signature:(X& x)
begin	/usr/include/boost/range/mfc.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_map_functions	access:public	signature:(X& x)
begin	/usr/include/boost/range/mfc.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_functions	access:public	signature:(X& x)
begin	/usr/include/boost/range/mfc.hpp	/^        typename mutable_<Iterator, X>::type begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
begin	/usr/include/boost/range/sub_range.hpp	/^        const_iterator  begin() const    { return base::begin(); }$/;"	f	class:boost::sub_range	access:public	signature:() const
begin	/usr/include/boost/range/sub_range.hpp	/^        iterator        begin()          { return base::begin(); }$/;"	f	class:boost::sub_range	access:public	signature:()
begin_of	/usr/include/boost/range/detail/microsoft.hpp	/^    begin_of(T const& x)$/;"	f	namespace:boost::range_detail_microsoft	signature:(T const& x)
begin_of	/usr/include/boost/range/detail/microsoft.hpp	/^    begin_of(T& x)$/;"	f	namespace:boost::range_detail_microsoft	signature:(T& x)
BidirectionalRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct BidirectionalRangeConcept $/;"	s	namespace:boost
boost	/usr/include/boost/range/as_array.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/as_literal.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/atl.hpp	/^namespace boost { namespace range_detail_microsoft {$/;"	n
boost	/usr/include/boost/range/atl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/range/begin.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/category.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/concepts.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/range/const_iterator.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/const_reverse_iterator.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/detail/as_literal.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/detail/begin.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/collection_traits.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/range/detail/common.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/const_iterator.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/detail_str.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/difference_type.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/empty.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/end.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/implementation_help.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/iterator.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/microsoft.hpp	/^namespace boost { namespace range_detail_microsoft {$/;"	n
boost	/usr/include/boost/range/detail/remove_extent.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/sfinae.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/size.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/sizer.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/size_type.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/str_types.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/detail/value_type.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/vc6/end.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/detail/vc6/size.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/difference_type.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/distance.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/empty.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/end.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/iterator.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/iterator_range.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/mfc.hpp	/^namespace boost { namespace range_detail_microsoft {$/;"	n
boost	/usr/include/boost/range/mutable_iterator.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/pointer.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/rbegin.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/reference.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/rend.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/result_iterator.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/reverse_iterator.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/reverse_result_iterator.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/size.hpp	/^namespace boost $/;"	n
boost	/usr/include/boost/range/size_type.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/sub_range.hpp	/^namespace boost$/;"	n
boost	/usr/include/boost/range/value_type.hpp	/^namespace boost$/;"	n
boost::algorithm	/usr/include/boost/range/detail/collection_traits.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^    namespace algorithm {$/;"	n	namespace:boost
boost::algorithm::begin	/usr/include/boost/range/detail/collection_traits.hpp	/^        begin( C& c )$/;"	f	namespace:boost::algorithm	signature:( C& c )
boost::algorithm::begin	/usr/include/boost/range/detail/collection_traits.hpp	/^        begin( const C& c )$/;"	f	namespace:boost::algorithm	signature:( const C& c )
boost::algorithm::collection_traits	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct collection_traits$/;"	s	namespace:boost::algorithm
boost::algorithm::collection_traits::const_iterator	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::const_iterator const_iterator;$/;"	t	struct:boost::algorithm::collection_traits	access:public
boost::algorithm::collection_traits::container_helper_type	/usr/include/boost/range/detail/collection_traits.hpp	/^                >::type container_helper_type;$/;"	t	struct:boost::algorithm::collection_traits	access:private
boost::algorithm::collection_traits::difference_type	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::difference_type difference_type;$/;"	t	struct:boost::algorithm::collection_traits	access:public
boost::algorithm::collection_traits::function_type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef container_helper_type function_type;        $/;"	t	struct:boost::algorithm::collection_traits	access:public
boost::algorithm::collection_traits::iterator	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::iterator iterator;$/;"	t	struct:boost::algorithm::collection_traits	access:public
boost::algorithm::collection_traits::result_iterator	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::result_iterator result_iterator;$/;"	t	struct:boost::algorithm::collection_traits	access:public
boost::algorithm::collection_traits::size_type	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::size_type size_type;$/;"	t	struct:boost::algorithm::collection_traits	access:public
boost::algorithm::collection_traits::value_type	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::value_type value_type;$/;"	t	struct:boost::algorithm::collection_traits	access:public
boost::algorithm::const_iterator_of	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct const_iterator_of$/;"	s	namespace:boost::algorithm
boost::algorithm::const_iterator_of::type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef BOOST_STRING_TYPENAME collection_traits<C>::const_iterator type;$/;"	t	struct:boost::algorithm::const_iterator_of	access:public
boost::algorithm::detail	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
boost::algorithm::detail::array_container_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_container_traits$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_container_traits::array_length_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                        BOOST_NESTED_TEMPLATE array_length<traits_type> array_length_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:private
boost::algorithm::detail::array_container_traits::begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator begin( const A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( const A& a )
boost::algorithm::detail::array_container_traits::begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator begin( A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( A& a )
boost::algorithm::detail::array_container_traits::begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator begin( A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( A& a )
boost::algorithm::detail::array_container_traits::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                BOOST_STATIC_CONSTANT( size_type, array_size = traits_type::array_size );$/;"	p	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( size_type, array_size = traits_type::array_size )
boost::algorithm::detail::array_container_traits::char_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    ::boost::remove_cv<value_type>::type char_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:private
boost::algorithm::detail::array_container_traits::const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::const_iterator const_iterator;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
boost::algorithm::detail::array_container_traits::difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::difference_type difference_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
boost::algorithm::detail::array_container_traits::empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static bool empty( const A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( const A& a )
boost::algorithm::detail::array_container_traits::end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator end( const A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( const A& a )
boost::algorithm::detail::array_container_traits::end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator end( A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( A& a )
boost::algorithm::detail::array_container_traits::end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator end( A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( A& a )
boost::algorithm::detail::array_container_traits::iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::iterator iterator;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
boost::algorithm::detail::array_container_traits::result_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    >::type result_iterator;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
boost::algorithm::detail::array_container_traits::size	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static size_type size( const A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( const A& a )
boost::algorithm::detail::array_container_traits::size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::size_type size_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
boost::algorithm::detail::array_container_traits::traits_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef array_traits<T> traits_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:private
boost::algorithm::detail::array_container_traits::value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::value_type value_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
boost::algorithm::detail::array_container_traits_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_container_traits_selector$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_container_traits_selector::type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef array_container_traits<T> type;$/;"	t	struct:boost::algorithm::detail::array_container_traits_selector	access:public
boost::algorithm::detail::array_length_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_length_selector$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_length_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_length_selector<char>$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_length_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_length_selector<wchar_t>$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_length_selector::array_length	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                struct array_length$/;"	s	struct:boost::algorithm::detail::array_length_selector	access:public
boost::algorithm::detail::array_length_selector::array_length::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    BOOST_STATIC_CONSTANT($/;"	p	struct:boost::algorithm::detail::array_length_selector::array_length	access:public	signature:( size_type, array_size=TraitsT::array_size )
boost::algorithm::detail::array_length_selector::array_length::empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    static bool empty( const A& )$/;"	f	struct:boost::algorithm::detail::array_length_selector::array_length	access:public	signature:( const A& )
boost::algorithm::detail::array_length_selector::array_length::empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    static bool empty( const A& a )$/;"	f	struct:boost::algorithm::detail::array_length_selector::array_length	access:public	signature:( const A& a )
boost::algorithm::detail::array_length_selector::array_length::length	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    static size_type length( const A& )$/;"	f	struct:boost::algorithm::detail::array_length_selector::array_length	access:public	signature:( const A& )
boost::algorithm::detail::array_length_selector::array_length::length	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    static size_type length( const A& a )$/;"	f	struct:boost::algorithm::detail::array_length_selector::array_length	access:public	signature:( const A& a )
boost::algorithm::detail::array_length_selector::array_length::size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                        TraitsT::size_type size_type;$/;"	t	struct:boost::algorithm::detail::array_length_selector::array_length	access:public
boost::algorithm::detail::array_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits<T[sz]>$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_traits::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                BOOST_STATIC_CONSTANT( size_type, array_size = sz );$/;"	p	struct:boost::algorithm::detail::array_traits	access:public	signature:( size_type, array_size = sz )
boost::algorithm::detail::array_traits::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                BOOST_STATIC_CONSTANT( size_type, array_size = traits_type::array_size );$/;"	p	struct:boost::algorithm::detail::array_traits	access:public	signature:( size_type, array_size = traits_type::array_size )
boost::algorithm::detail::array_traits::const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::const_iterator const_iterator;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits::const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef const T* const_iterator;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits::difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::difference_type difference_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits::difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits::iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::iterator iterator;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits::iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef T* iterator;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits::size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::size_type size_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits::size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::size_t size_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits::traits_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    array_traits_selector<T>::type traits_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits::value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::value_type value_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits::value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef T value_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
boost::algorithm::detail::array_traits_cv_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_cv_selector$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_traits_cv_selector::type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    >::type type;$/;"	t	struct:boost::algorithm::detail::array_traits_cv_selector	access:public
boost::algorithm::detail::array_traits_impl	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_impl$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_traits_impl::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                BOOST_STATIC_CONSTANT( size_type, array_size = sizeof(T)\/sizeof(BaseT) );$/;"	p	struct:boost::algorithm::detail::array_traits_impl	access:public	signature:( size_type, array_size = sizeof(T)/sizeof(BaseT) )
boost::algorithm::detail::array_traits_impl::const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef const BaseT* const_iterator;$/;"	t	struct:boost::algorithm::detail::array_traits_impl	access:public
boost::algorithm::detail::array_traits_impl::difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::algorithm::detail::array_traits_impl	access:public
boost::algorithm::detail::array_traits_impl::iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BaseT* iterator;$/;"	t	struct:boost::algorithm::detail::array_traits_impl	access:public
boost::algorithm::detail::array_traits_impl::size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::size_t size_type;$/;"	t	struct:boost::algorithm::detail::array_traits_impl	access:public
boost::algorithm::detail::array_traits_impl::value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BaseT value_type;$/;"	t	struct:boost::algorithm::detail::array_traits_impl	access:public
boost::algorithm::detail::array_traits_impl_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_impl_selector$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_traits_impl_selector::type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef array_traits_impl<T,BaseT> type;$/;"	t	struct:boost::algorithm::detail::array_traits_impl_selector	access:public
boost::algorithm::detail::array_traits_select	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_select$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_traits_select::apply	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                struct apply$/;"	s	struct:boost::algorithm::detail::array_traits_select	access:public
boost::algorithm::detail::array_traits_select::apply::type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                            ::boost::mpl::identity<T1> >::type type;$/;"	t	struct:boost::algorithm::detail::array_traits_select::apply	access:public
boost::algorithm::detail::array_traits_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_selector $/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_traits_selector::array_base_types	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                >::type array_base_types;$/;"	t	struct:boost::algorithm::detail::array_traits_selector	access:private
boost::algorithm::detail::array_traits_selector::type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                        ::boost::algorithm::detail::array_traits_select<T> >::type type;$/;"	t	struct:boost::algorithm::detail::array_traits_selector	access:public
boost::algorithm::detail::array_traits_void	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct array_traits_void$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::array_traits_void::type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef void type;$/;"	t	struct:boost::algorithm::detail::array_traits_void	access:public
boost::algorithm::detail::default_container_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct default_container_traits$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::default_container_traits::begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator begin( const C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( const C& c )
boost::algorithm::detail::default_container_traits::begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator begin( C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( C& c )
boost::algorithm::detail::default_container_traits::begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator begin( C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( C& c )
boost::algorithm::detail::default_container_traits::const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME ContainerT::const_iterator const_iterator;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
boost::algorithm::detail::default_container_traits::difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME ContainerT::difference_type difference_type;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
boost::algorithm::detail::default_container_traits::empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static bool empty( const C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( const C& c )
boost::algorithm::detail::default_container_traits::end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator end( const C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( const C& c )
boost::algorithm::detail::default_container_traits::end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator end( C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( C& c )
boost::algorithm::detail::default_container_traits::end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator end( C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( C& c )
boost::algorithm::detail::default_container_traits::iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME ContainerT::iterator iterator;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
boost::algorithm::detail::default_container_traits::result_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    >::type result_iterator;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
boost::algorithm::detail::default_container_traits::size	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static size_type size( const C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( const C& c )
boost::algorithm::detail::default_container_traits::size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME ContainerT::size_type size_type;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
boost::algorithm::detail::default_container_traits::value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME ContainerT::value_type value_type;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
boost::algorithm::detail::default_container_traits_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct default_container_traits_selector$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::default_container_traits_selector::type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef default_container_traits<T> type;$/;"	t	struct:boost::algorithm::detail::default_container_traits_selector	access:public
boost::algorithm::detail::is_pair	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            template<typename T> struct is_pair$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::is_pair::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                BOOST_STATIC_CONSTANT( bool, value=$/;"	p	struct:boost::algorithm::detail::is_pair	access:public	signature:( bool, value= sizeof(is_pair_impl(t))==sizeof(yes_type) )
boost::algorithm::detail::is_pair::t	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static T* t;$/;"	m	struct:boost::algorithm::detail::is_pair	access:private
boost::algorithm::detail::is_pair_impl	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            no_type is_pair_impl( ... );$/;"	p	namespace:boost::algorithm::detail	signature:( .... )
boost::algorithm::detail::is_pair_impl	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            yes_type is_pair_impl( const std::pair<T,U>* );$/;"	p	namespace:boost::algorithm::detail	signature:( const std::pair<T,U>* )
boost::algorithm::detail::pair_container_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct pair_container_traits$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::pair_container_traits::begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator begin( const P& p )$/;"	f	struct:boost::algorithm::detail::pair_container_traits	access:public	signature:( const P& p )
boost::algorithm::detail::pair_container_traits::const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef element_type const_iterator;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
boost::algorithm::detail::pair_container_traits::difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    iterator_traits<element_type>::difference_type difference_type;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
boost::algorithm::detail::pair_container_traits::element_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME PairT::first_type element_type;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
boost::algorithm::detail::pair_container_traits::empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static bool empty( const P& p )$/;"	f	struct:boost::algorithm::detail::pair_container_traits	access:public	signature:( const P& p )
boost::algorithm::detail::pair_container_traits::end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator end( const P& p )$/;"	f	struct:boost::algorithm::detail::pair_container_traits	access:public	signature:( const P& p )
boost::algorithm::detail::pair_container_traits::iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef element_type iterator;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
boost::algorithm::detail::pair_container_traits::result_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef element_type result_iterator;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
boost::algorithm::detail::pair_container_traits::size	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static size_type size( const P& p )$/;"	f	struct:boost::algorithm::detail::pair_container_traits	access:public	signature:( const P& p )
boost::algorithm::detail::pair_container_traits::size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::size_t size_type;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
boost::algorithm::detail::pair_container_traits::value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    iterator_traits<element_type>::value_type value_type;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
boost::algorithm::detail::pair_container_traits_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct pair_container_traits_selector$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::pair_container_traits_selector::type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef pair_container_traits<T> type;$/;"	t	struct:boost::algorithm::detail::pair_container_traits_selector	access:public
boost::algorithm::detail::pointer_container_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct pointer_container_traits$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::pointer_container_traits::begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator begin( const P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( const P& p )
boost::algorithm::detail::pointer_container_traits::begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator begin( P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( P& p )
boost::algorithm::detail::pointer_container_traits::begin	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator begin( P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( P& p )
boost::algorithm::detail::pointer_container_traits::char_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef ::std::char_traits<char_type> char_traits;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
boost::algorithm::detail::pointer_container_traits::char_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    ::boost::remove_cv<value_type>::type char_type;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
boost::algorithm::detail::pointer_container_traits::const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef const value_type* const_iterator;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
boost::algorithm::detail::pointer_container_traits::difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
boost::algorithm::detail::pointer_container_traits::empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static bool empty( const P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( const P& p )
boost::algorithm::detail::pointer_container_traits::end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator end( const P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( const P& p )
boost::algorithm::detail::pointer_container_traits::end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator end( P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( P& p )
boost::algorithm::detail::pointer_container_traits::end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator end( P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( P& p )
boost::algorithm::detail::pointer_container_traits::iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef value_type* iterator;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
boost::algorithm::detail::pointer_container_traits::result_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    >::type result_iterator;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
boost::algorithm::detail::pointer_container_traits::size	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static size_type size( const P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( const P& p )
boost::algorithm::detail::pointer_container_traits::size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::size_t size_type;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
boost::algorithm::detail::pointer_container_traits::value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    ::boost::remove_pointer<T>::type value_type;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
boost::algorithm::detail::pointer_container_traits_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct pointer_container_traits_selector$/;"	s	namespace:boost::algorithm::detail
boost::algorithm::detail::pointer_container_traits_selector::type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef pointer_container_traits<T> type;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits_selector	access:public
boost::algorithm::difference_type_of	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct difference_type_of$/;"	s	namespace:boost::algorithm
boost::algorithm::difference_type_of::type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef BOOST_STRING_TYPENAME collection_traits<C>::difference_type type;$/;"	t	struct:boost::algorithm::difference_type_of	access:public
boost::algorithm::empty	/usr/include/boost/range/detail/collection_traits.hpp	/^        inline bool empty( const C& c )$/;"	f	namespace:boost::algorithm	signature:( const C& c )
boost::algorithm::end	/usr/include/boost/range/detail/collection_traits.hpp	/^        end( C& c )$/;"	f	namespace:boost::algorithm	signature:( C& c )
boost::algorithm::end	/usr/include/boost/range/detail/collection_traits.hpp	/^        end( const C& c )$/;"	f	namespace:boost::algorithm	signature:( const C& c )
boost::algorithm::iterator_of	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct iterator_of$/;"	s	namespace:boost::algorithm
boost::algorithm::iterator_of::type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef BOOST_STRING_TYPENAME collection_traits<C>::iterator type;$/;"	t	struct:boost::algorithm::iterator_of	access:public
boost::algorithm::result_iterator_of	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct result_iterator_of$/;"	s	namespace:boost::algorithm
boost::algorithm::result_iterator_of::type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef BOOST_STRING_TYPENAME collection_traits<C>::result_iterator type;$/;"	t	struct:boost::algorithm::result_iterator_of	access:public
boost::algorithm::size	/usr/include/boost/range/detail/collection_traits.hpp	/^        size( const C& c )$/;"	f	namespace:boost::algorithm	signature:( const C& c )
boost::algorithm::value_type_of	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct value_type_of$/;"	s	namespace:boost::algorithm
boost::algorithm::value_type_of::type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef BOOST_STRING_TYPENAME collection_traits<C>::value_type type;$/;"	t	struct:boost::algorithm::value_type_of	access:public
boost::as_array	/usr/include/boost/range/as_array.hpp	/^    as_array( const Range& r )$/;"	f	namespace:boost	signature:( const Range& r )
boost::as_array	/usr/include/boost/range/as_array.hpp	/^    as_array( R& r )$/;"	f	namespace:boost	signature:( R& r )
boost::as_literal	/usr/include/boost/range/as_literal.hpp	/^    as_literal( const Range& r )$/;"	f	namespace:boost	signature:( const Range& r )
boost::as_literal	/usr/include/boost/range/as_literal.hpp	/^    as_literal( Range& r )$/;"	f	namespace:boost	signature:( Range& r )
boost::as_literal	/usr/include/boost/range/detail/as_literal.hpp	/^    as_literal( Range& r )$/;"	f	namespace:boost	signature:( Range& r )
boost::begin	/usr/include/boost/range/begin.hpp	/^inline BOOST_DEDUCED_TYPENAME range_iterator<const T>::type begin( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
boost::begin	/usr/include/boost/range/begin.hpp	/^inline BOOST_DEDUCED_TYPENAME range_iterator<T>::type begin( T& r )$/;"	f	namespace:boost	signature:( T& r )
boost::begin	/usr/include/boost/range/detail/begin.hpp	/^    begin( C& c )$/;"	f	namespace:boost	signature:( C& c )
boost::BidirectionalRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct BidirectionalRangeConcept $/;"	s	namespace:boost
boost::BidirectionalRangeConcept::constraints	/usr/include/boost/range/concepts.hpp	/^        void constraints()$/;"	f	struct:boost::BidirectionalRangeConcept	access:public	signature:()
boost::const_begin	/usr/include/boost/range/begin.hpp	/^    const_begin( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
boost::const_end	/usr/include/boost/range/end.hpp	/^    const_end( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
boost::const_rbegin	/usr/include/boost/range/rbegin.hpp	/^const_rbegin( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
boost::const_rend	/usr/include/boost/range/rend.hpp	/^const_rend( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
boost::copy_range	/usr/include/boost/range/iterator_range.hpp	/^        inline SeqT copy_range( const Range& r )$/;"	f	namespace:boost	signature:( const Range& r )
boost::detail	/usr/include/boost/range/size_type.hpp	/^    namespace detail$/;"	n	namespace:boost
boost::detail::range_size	/usr/include/boost/range/size_type.hpp	/^        struct range_size$/;"	s	namespace:boost::detail
boost::detail::range_size	/usr/include/boost/range/size_type.hpp	/^        struct range_size< std::pair<Iterator,Iterator> >$/;"	s	namespace:boost::detail
boost::detail::range_size	/usr/include/boost/range/size_type.hpp	/^        struct range_size< T[sz] >$/;"	s	namespace:boost::detail
boost::detail::range_size::type	/usr/include/boost/range/size_type.hpp	/^            typedef BOOST_DEDUCED_TYPENAME C::size_type type;$/;"	t	struct:boost::detail::range_size	access:public
boost::detail::range_size::type	/usr/include/boost/range/size_type.hpp	/^            typedef std::size_t type;$/;"	t	struct:boost::detail::range_size	access:public
boost::distance	/usr/include/boost/range/distance.hpp	/^    distance( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
boost::empty	/usr/include/boost/range/detail/empty.hpp	/^    empty( const C& c )$/;"	f	namespace:boost	signature:( const C& c )
boost::empty	/usr/include/boost/range/empty.hpp	/^    inline bool empty( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
boost::end	/usr/include/boost/range/detail/end.hpp	/^    end( C& c )$/;"	f	namespace:boost	signature:( C& c )
boost::end	/usr/include/boost/range/detail/vc6/end.hpp	/^    end( C& c )$/;"	f	namespace:boost	signature:( C& c )
boost::end	/usr/include/boost/range/end.hpp	/^inline BOOST_DEDUCED_TYPENAME range_iterator<const T>::type end( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
boost::end	/usr/include/boost/range/end.hpp	/^inline BOOST_DEDUCED_TYPENAME range_iterator<T>::type end( T& r )$/;"	f	namespace:boost	signature:( T& r )
boost::ForwardRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct ForwardRangeConcept $/;"	s	namespace:boost
boost::ForwardRangeConcept::constraints	/usr/include/boost/range/concepts.hpp	/^        void constraints()$/;"	f	struct:boost::ForwardRangeConcept	access:public	signature:()
boost::iterator_range	/usr/include/boost/range/iterator_range.hpp	/^        class iterator_range$/;"	c	namespace:boost
boost::iterator_range::abstract_value_type	/usr/include/boost/range/iterator_range.hpp	/^                                 reference, value_type >::type abstract_value_type;$/;"	t	class:boost::iterator_range	access:private
boost::iterator_range::advance_begin	/usr/include/boost/range/iterator_range.hpp	/^           iterator_range& advance_begin( difference_type n )$/;"	f	class:boost::iterator_range	access:public	signature:( difference_type n )
boost::iterator_range::advance_end	/usr/include/boost/range/iterator_range.hpp	/^           iterator_range& advance_end( difference_type n )$/;"	f	class:boost::iterator_range	access:public	signature:( difference_type n )
boost::iterator_range::back	/usr/include/boost/range/iterator_range.hpp	/^           reference back() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
boost::iterator_range::begin	/usr/include/boost/range/iterator_range.hpp	/^            IteratorT begin() const $/;"	f	class:boost::iterator_range	access:public	signature:() const
boost::iterator_range::const_iterator	/usr/include/boost/range/iterator_range.hpp	/^            typedef IteratorT const_iterator;$/;"	t	class:boost::iterator_range	access:public
boost::iterator_range::difference_type	/usr/include/boost/range/iterator_range.hpp	/^                iterator_difference<IteratorT>::type difference_type;$/;"	t	class:boost::iterator_range	access:public
boost::iterator_range::empty	/usr/include/boost/range/iterator_range.hpp	/^            bool empty() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
boost::iterator_range::end	/usr/include/boost/range/iterator_range.hpp	/^            IteratorT end() const $/;"	f	class:boost::iterator_range	access:public	signature:() const
boost::iterator_range::equal	/usr/include/boost/range/iterator_range.hpp	/^            bool equal( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
boost::iterator_range::front	/usr/include/boost/range/iterator_range.hpp	/^           reference front() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
boost::iterator_range::impl	/usr/include/boost/range/iterator_range.hpp	/^            typedef iterator_range_detail::iterator_range_impl<IteratorT> impl;$/;"	t	class:boost::iterator_range	access:protected
boost::iterator_range::is_singular	/usr/include/boost/range/iterator_range.hpp	/^            bool is_singular() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
boost::iterator_range::iterator	/usr/include/boost/range/iterator_range.hpp	/^            typedef IteratorT iterator;$/;"	t	class:boost::iterator_range	access:public
boost::iterator_range::iterator_range	/usr/include/boost/range/iterator_range.hpp	/^            iterator_range( const Range& r ) : $/;"	f	class:boost::iterator_range	access:public	signature:( const Range& r )
boost::iterator_range::iterator_range	/usr/include/boost/range/iterator_range.hpp	/^            iterator_range( const Range& r, iterator_range_detail::const_range_tag ) : $/;"	f	class:boost::iterator_range	access:public	signature:( const Range& r, iterator_range_detail::const_range_tag )
boost::iterator_range::iterator_range	/usr/include/boost/range/iterator_range.hpp	/^            iterator_range( Iterator Begin, Iterator End ) : $/;"	f	class:boost::iterator_range	access:public	signature:( Iterator Begin, Iterator End )
boost::iterator_range::iterator_range	/usr/include/boost/range/iterator_range.hpp	/^            iterator_range( Range& r ) : $/;"	f	class:boost::iterator_range	access:public	signature:( Range& r )
boost::iterator_range::iterator_range	/usr/include/boost/range/iterator_range.hpp	/^            iterator_range( Range& r, iterator_range_detail::range_tag ) : $/;"	f	class:boost::iterator_range	access:public	signature:( Range& r, iterator_range_detail::range_tag )
boost::iterator_range::iterator_range	/usr/include/boost/range/iterator_range.hpp	/^            iterator_range() : m_Begin( iterator() ), m_End( iterator() )$/;"	f	class:boost::iterator_range	access:public	signature:()
boost::iterator_range::iterator_range_	/usr/include/boost/range/iterator_range.hpp	/^            typedef iterator_range iterator_range_;$/;"	t	class:boost::iterator_range	access:protected
boost::iterator_range::m_Begin	/usr/include/boost/range/iterator_range.hpp	/^            IteratorT m_Begin;$/;"	m	class:boost::iterator_range	access:private
boost::iterator_range::m_End	/usr/include/boost/range/iterator_range.hpp	/^            IteratorT m_End;$/;"	m	class:boost::iterator_range	access:private
boost::iterator_range::operator !=	/usr/include/boost/range/iterator_range.hpp	/^            bool operator!=( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
boost::iterator_range::operator ()	/usr/include/boost/range/iterator_range.hpp	/^           abstract_value_type operator()( difference_type at ) const                              $/;"	f	class:boost::iterator_range	access:public	signature:( difference_type at ) const
boost::iterator_range::operator <	/usr/include/boost/range/iterator_range.hpp	/^           bool operator<( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
boost::iterator_range::operator =	/usr/include/boost/range/iterator_range.hpp	/^            iterator_range& operator=( const ForwardRange& r )$/;"	f	class:boost::iterator_range	access:public	signature:( const ForwardRange& r )
boost::iterator_range::operator =	/usr/include/boost/range/iterator_range.hpp	/^            iterator_range& operator=( const iterator_range<Iterator>& r )    $/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range<Iterator>& r )
boost::iterator_range::operator =	/usr/include/boost/range/iterator_range.hpp	/^            iterator_range& operator=( ForwardRange& r )$/;"	f	class:boost::iterator_range	access:public	signature:( ForwardRange& r )
boost::iterator_range::operator =	/usr/include/boost/range/iterator_range.hpp	/^            this_type& operator=( const this_type& r )    $/;"	f	class:boost::iterator_range	access:public	signature:( const this_type& r )
boost::iterator_range::operator ==	/usr/include/boost/range/iterator_range.hpp	/^            bool operator==( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
boost::iterator_range::operator bool	/usr/include/boost/range/iterator_range.hpp	/^            operator bool() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
boost::iterator_range::operator unspecified_bool_type	/usr/include/boost/range/iterator_range.hpp	/^            operator unspecified_bool_type() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
boost::iterator_range::operator []	/usr/include/boost/range/iterator_range.hpp	/^           reference operator[]( difference_type at ) const$/;"	f	class:boost::iterator_range	access:public	signature:( difference_type at ) const
boost::iterator_range::reference	/usr/include/boost/range/iterator_range.hpp	/^                iterator_reference<IteratorT>::type reference;$/;"	t	class:boost::iterator_range	access:public
boost::iterator_range::singular	/usr/include/boost/range/iterator_range.hpp	/^            bool      singular;$/;"	m	class:boost::iterator_range	access:private
boost::iterator_range::size	/usr/include/boost/range/iterator_range.hpp	/^            difference_type size() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
boost::iterator_range::size_type	/usr/include/boost/range/iterator_range.hpp	/^            typedef std::size_t size_type; \/\/ note: must be unsigned$/;"	t	class:boost::iterator_range	access:public
boost::iterator_range::this_type	/usr/include/boost/range/iterator_range.hpp	/^            typedef iterator_range<IteratorT> this_type;$/;"	t	class:boost::iterator_range	access:public
boost::iterator_range::type	/usr/include/boost/range/iterator_range.hpp	/^            typedef iterator_range<IteratorT> type;$/;"	t	class:boost::iterator_range	access:public
boost::iterator_range::value_type	/usr/include/boost/range/iterator_range.hpp	/^                iterator_value<IteratorT>::type value_type;$/;"	t	class:boost::iterator_range	access:public
boost::iterator_range_detail	/usr/include/boost/range/iterator_range.hpp	/^        namespace iterator_range_detail$/;"	n	namespace:boost
boost::iterator_range_detail	/usr/include/boost/range/iterator_range.hpp	/^    namespace iterator_range_detail$/;"	n	namespace:boost
boost::iterator_range_detail::const_range_tag	/usr/include/boost/range/iterator_range.hpp	/^        struct const_range_tag { };$/;"	s	namespace:boost::iterator_range_detail
boost::iterator_range_detail::equal	/usr/include/boost/range/iterator_range.hpp	/^        inline bool equal( const Left& l, const Right& r )$/;"	f	namespace:boost::iterator_range_detail	signature:( const Left& l, const Right& r )
boost::iterator_range_detail::iterator_range_impl	/usr/include/boost/range/iterator_range.hpp	/^        struct iterator_range_impl {$/;"	s	namespace:boost::iterator_range_detail
boost::iterator_range_detail::iterator_range_impl::adl_begin	/usr/include/boost/range/iterator_range.hpp	/^            static IteratorT adl_begin( ForwardRange& r )$/;"	f	struct:boost::iterator_range_detail::iterator_range_impl	access:public	signature:( ForwardRange& r )
boost::iterator_range_detail::iterator_range_impl::adl_end	/usr/include/boost/range/iterator_range.hpp	/^            static IteratorT adl_end( ForwardRange& r )$/;"	f	struct:boost::iterator_range_detail::iterator_range_impl	access:public	signature:( ForwardRange& r )
boost::iterator_range_detail::less_than	/usr/include/boost/range/iterator_range.hpp	/^        inline bool less_than( const Left& l, const Right& r )$/;"	f	namespace:boost::iterator_range_detail	signature:( const Left& l, const Right& r )
boost::iterator_range_detail::make_range_impl	/usr/include/boost/range/iterator_range.hpp	/^            make_range_impl( Range& r, $/;"	f	namespace:boost::iterator_range_detail	signature:( Range& r, BOOST_DEDUCED_TYPENAME range_difference<Range>::type advance_begin, BOOST_DEDUCED_TYPENAME range_difference<Range>::type advance_end )
boost::iterator_range_detail::range_tag	/usr/include/boost/range/iterator_range.hpp	/^        struct range_tag { };$/;"	s	namespace:boost::iterator_range_detail
boost::make_iterator_range	/usr/include/boost/range/iterator_range.hpp	/^        make_iterator_range( const ForwardRange& r ) $/;"	f	namespace:boost	signature:( const ForwardRange& r )
boost::make_iterator_range	/usr/include/boost/range/iterator_range.hpp	/^        make_iterator_range( ForwardRange& r ) $/;"	f	namespace:boost	signature:( ForwardRange& r )
boost::make_iterator_range	/usr/include/boost/range/iterator_range.hpp	/^        make_iterator_range( IteratorT Begin, IteratorT End ) $/;"	f	namespace:boost	signature:( IteratorT Begin, IteratorT End )
boost::make_iterator_range	/usr/include/boost/range/iterator_range.hpp	/^        make_iterator_range( Range& r ) $/;"	f	namespace:boost	signature:( Range& r )
boost::make_iterator_range	/usr/include/boost/range/iterator_range.hpp	/^        make_iterator_range( Range& r, $/;"	f	namespace:boost	signature:( Range& r, BOOST_DEDUCED_TYPENAME range_difference<Range>::type advance_begin, BOOST_DEDUCED_TYPENAME range_difference<Range>::type advance_end )
boost::operator !=	/usr/include/boost/range/iterator_range.hpp	/^        inline bool operator!=( const ForwardRange& l, $/;"	f	namespace:boost	signature:( const ForwardRange& l, const iterator_range<IteratorT>& r )
boost::operator !=	/usr/include/boost/range/iterator_range.hpp	/^        inline bool operator!=( const iterator_range<Iterator1T>& l, $/;"	f	namespace:boost	signature:( const iterator_range<Iterator1T>& l, const iterator_range<Iterator2T>& r )
boost::operator !=	/usr/include/boost/range/iterator_range.hpp	/^        inline bool operator!=( const iterator_range<IteratorT>& l, $/;"	f	namespace:boost	signature:( const iterator_range<IteratorT>& l, const ForwardRange& r )
boost::operator !=	/usr/include/boost/range/sub_range.hpp	/^    inline bool operator!=( const sub_range<ForwardRange>& l,$/;"	f	namespace:boost	signature:( const sub_range<ForwardRange>& l, const sub_range<ForwardRange2>& r )
boost::operator <	/usr/include/boost/range/iterator_range.hpp	/^        inline bool operator<( const ForwardRange& l, $/;"	f	namespace:boost	signature:( const ForwardRange& l, const iterator_range<IteratorT>& r )
boost::operator <	/usr/include/boost/range/iterator_range.hpp	/^        inline bool operator<( const iterator_range<Iterator1T>& l, $/;"	f	namespace:boost	signature:( const iterator_range<Iterator1T>& l, const iterator_range<Iterator2T>& r )
boost::operator <	/usr/include/boost/range/iterator_range.hpp	/^        inline bool operator<( const iterator_range<IteratorT>& l, $/;"	f	namespace:boost	signature:( const iterator_range<IteratorT>& l, const ForwardRange& r )
boost::operator <	/usr/include/boost/range/sub_range.hpp	/^    inline bool operator<( const sub_range<ForwardRange>& l,$/;"	f	namespace:boost	signature:( const sub_range<ForwardRange>& l, const sub_range<ForwardRange2>& r )
boost::operator <<	/usr/include/boost/range/iterator_range.hpp	/^        inline std::basic_ostream<Elem,Traits>& operator<<( $/;"	f	namespace:boost	signature:( std::basic_ostream<Elem, Traits>& Os, const iterator_range<IteratorT>& r )
boost::operator <<	/usr/include/boost/range/iterator_range.hpp	/^        inline std::ostream& operator<<( $/;"	f	namespace:boost	signature:( std::ostream& Os, const iterator_range<IteratorT>& r )
boost::operator ==	/usr/include/boost/range/iterator_range.hpp	/^        inline bool operator==( const ForwardRange& l, $/;"	f	namespace:boost	signature:( const ForwardRange& l, const iterator_range<IteratorT>& r )
boost::operator ==	/usr/include/boost/range/iterator_range.hpp	/^        inline bool operator==( const iterator_range<Iterator1T>& l, $/;"	f	namespace:boost	signature:( const iterator_range<Iterator1T>& l, const iterator_range<Iterator2T>& r )
boost::operator ==	/usr/include/boost/range/iterator_range.hpp	/^        inline bool operator==( const iterator_range<IteratorT>& l, $/;"	f	namespace:boost	signature:( const iterator_range<IteratorT>& l, const ForwardRange& r )
boost::operator ==	/usr/include/boost/range/sub_range.hpp	/^    inline bool operator==( const sub_range<ForwardRange>& l,$/;"	f	namespace:boost	signature:( const sub_range<ForwardRange>& l, const sub_range<ForwardRange2>& r )
boost::pointee	/usr/include/boost/range/atl.hpp	/^    struct pointee< ATL::CAdapt<T> > :$/;"	s	namespace:boost	inherits:pointee
boost::pointee	/usr/include/boost/range/atl.hpp	/^    struct pointee< ATL::CAutoPtr<E> > :$/;"	s	namespace:boost	inherits:mpl::identity
boost::pointee	/usr/include/boost/range/atl.hpp	/^    struct pointee< ATL::CComPtr<T> > :$/;"	s	namespace:boost	inherits:mpl::identity
boost::pointee	/usr/include/boost/range/atl.hpp	/^    struct pointee< ATL::CComQIPtr<T, piid> > :$/;"	s	namespace:boost	inherits:mpl::identity
boost::pointee	/usr/include/boost/range/atl.hpp	/^    struct pointee< ATL::CHeapPtr<E, Allocator> > :$/;"	s	namespace:boost	inherits:mpl::identity
boost::RandomAccessRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct RandomAccessRangeConcept $/;"	s	namespace:boost
boost::RandomAccessRangeConcept::constraints	/usr/include/boost/range/concepts.hpp	/^        void constraints()$/;"	f	struct:boost::RandomAccessRangeConcept	access:public	signature:()
boost::range_category	/usr/include/boost/range/category.hpp	/^    struct range_category : iterator_category< typename range_iterator<T>::type >$/;"	s	namespace:boost	inherits:iterator_category
boost::range_const_iterator	/usr/include/boost/range/const_iterator.hpp	/^    struct range_const_iterator$/;"	s	namespace:boost
boost::range_const_iterator	/usr/include/boost/range/const_iterator.hpp	/^    struct range_const_iterator< std::pair<Iterator,Iterator> >$/;"	s	namespace:boost
boost::range_const_iterator	/usr/include/boost/range/const_iterator.hpp	/^    struct range_const_iterator< T[sz] >$/;"	s	namespace:boost
boost::range_const_iterator	/usr/include/boost/range/detail/const_iterator.hpp	/^    class range_const_iterator$/;"	c	namespace:boost
boost::range_const_iterator	/usr/include/boost/range/detail/str_types.hpp	/^    struct range_const_iterator<T*>$/;"	s	namespace:boost
boost::range_const_iterator::c_type	/usr/include/boost/range/detail/const_iterator.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_detail::range<C>::type c_type;$/;"	t	class:boost::range_const_iterator	access:private
boost::range_const_iterator::type	/usr/include/boost/range/const_iterator.hpp	/^        typedef BOOST_DEDUCED_TYPENAME C::const_iterator type;$/;"	t	struct:boost::range_const_iterator	access:public
boost::range_const_iterator::type	/usr/include/boost/range/const_iterator.hpp	/^        typedef const T* type;$/;"	t	struct:boost::range_const_iterator	access:public
boost::range_const_iterator::type	/usr/include/boost/range/const_iterator.hpp	/^        typedef Iterator type;$/;"	t	struct:boost::range_const_iterator	access:public
boost::range_const_iterator::type	/usr/include/boost/range/detail/const_iterator.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_detail::range_const_iterator_<c_type>::BOOST_NESTED_TEMPLATE pts<C>::type type; $/;"	t	class:boost::range_const_iterator	access:public
boost::range_const_iterator::type	/usr/include/boost/range/detail/str_types.hpp	/^        typedef const T* type;$/;"	t	struct:boost::range_const_iterator	access:public
boost::range_const_reverse_iterator	/usr/include/boost/range/const_reverse_iterator.hpp	/^    struct range_const_reverse_iterator : range_reverse_iterator<const C>$/;"	s	namespace:boost	inherits:range_reverse_iterator
boost::range_detail	/usr/include/boost/range/as_literal.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/begin.hpp	/^namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/begin.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/common.hpp	/^    namespace range_detail $/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/const_iterator.hpp	/^    namespace range_detail $/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/detail_str.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/difference_type.hpp	/^    namespace range_detail $/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/empty.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/end.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/implementation_help.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/iterator.hpp	/^    namespace range_detail $/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/remove_extent.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/sfinae.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/size.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/size_type.hpp	/^    namespace range_detail $/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/value_type.hpp	/^    namespace range_detail $/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/vc6/end.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/detail/vc6/size.hpp	/^    namespace range_detail$/;"	n	namespace:boost
boost::range_detail	/usr/include/boost/range/end.hpp	/^namespace range_detail$/;"	n	namespace:boost
boost::range_detail::array_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<4>::type    array_;$/;"	t	namespace:boost::range_detail
boost::range_detail::BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline const T* array_end( const T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	namespace:boost::range_detail	signature:()
boost::range_detail::BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline std::size_t array_size( const T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	namespace:boost::range_detail	signature:()
boost::range_detail::BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline std::size_t array_size( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	namespace:boost::range_detail	signature:()
boost::range_detail::BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline T* array_end( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	namespace:boost::range_detail	signature:()
boost::range_detail::boost_range_silence_warning	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline void boost_range_silence_warning( const T& ) { }$/;"	f	namespace:boost::range_detail	signature:( const T& )
boost::range_detail::char_array_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<6>::type    char_array_;$/;"	t	namespace:boost::range_detail
boost::range_detail::char_or_wchar_t_array_tag	/usr/include/boost/range/detail/sfinae.hpp	/^        struct char_or_wchar_t_array_tag {};$/;"	s	namespace:boost::range_detail
boost::range_detail::char_ptr_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<8>::type    char_ptr_;$/;"	t	namespace:boost::range_detail
boost::range_detail::const_array_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<5>::type    const_array_;$/;"	t	namespace:boost::range_detail
boost::range_detail::const_char_ptr_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<9>::type    const_char_ptr_;$/;"	t	namespace:boost::range_detail
boost::range_detail::const_std_pair_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<3>::type    const_std_pair_;$/;"	t	namespace:boost::range_detail
boost::range_detail::const_wchar_t_ptr_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<11>::type   const_wchar_t_ptr_;$/;"	t	namespace:boost::range_detail
boost::range_detail::is_char_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_char_array_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
boost::range_detail::is_char_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_char_array_impl( char BOOST_RANGE_ARRAY_REF()[sz] );$/;"	p	namespace:boost::range_detail	signature:( char BOOST_RANGE_ARRAY_REF()[sz] )
boost::range_detail::is_char_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_char_array_impl( const char BOOST_RANGE_ARRAY_REF()[sz] );$/;"	p	namespace:boost::range_detail	signature:( const char BOOST_RANGE_ARRAY_REF()[sz] )
boost::range_detail::is_char_ptr	/usr/include/boost/range/as_literal.hpp	/^        inline bool is_char_ptr( char* )$/;"	f	namespace:boost::range_detail	signature:( char* )
boost::range_detail::is_char_ptr	/usr/include/boost/range/as_literal.hpp	/^        inline bool is_char_ptr( const char* )$/;"	f	namespace:boost::range_detail	signature:( const char* )
boost::range_detail::is_char_ptr	/usr/include/boost/range/as_literal.hpp	/^        inline bool is_char_ptr( const wchar_t* )$/;"	f	namespace:boost::range_detail	signature:( const wchar_t* )
boost::range_detail::is_char_ptr	/usr/include/boost/range/as_literal.hpp	/^        inline bool is_char_ptr( wchar_t* )$/;"	f	namespace:boost::range_detail	signature:( wchar_t* )
boost::range_detail::is_char_ptr	/usr/include/boost/range/as_literal.hpp	/^        inline long is_char_ptr( T \/* r *\/ )$/;"	f	namespace:boost::range_detail	signature:( T )
boost::range_detail::is_char_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_char_ptr_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
boost::range_detail::is_char_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_char_ptr_impl( char* const );$/;"	p	namespace:boost::range_detail	signature:( char* const )
boost::range_detail::is_const_char_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_const_char_ptr_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
boost::range_detail::is_const_char_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_const_char_ptr_impl( const char* const );$/;"	p	namespace:boost::range_detail	signature:( const char* const )
boost::range_detail::is_const_wchar_t_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_const_wchar_t_ptr_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
boost::range_detail::is_const_wchar_t_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_const_wchar_t_ptr_impl( const wchar_t* const );$/;"	p	namespace:boost::range_detail	signature:( const wchar_t* const )
boost::range_detail::is_pair_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_pair_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
boost::range_detail::is_pair_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_pair_impl( const std::pair<Iterator,Iterator>* );$/;"	p	namespace:boost::range_detail	signature:( const std::pair<Iterator,Iterator>* )
boost::range_detail::is_string_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_string_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
boost::range_detail::is_string_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_string_impl( const wchar_t* const );$/;"	p	namespace:boost::range_detail	signature:( const wchar_t* const )
boost::range_detail::is_wchar_t_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_wchar_t_array_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
boost::range_detail::is_wchar_t_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_wchar_t_array_impl( const wchar_t BOOST_RANGE_ARRAY_REF()[sz] );$/;"	p	namespace:boost::range_detail	signature:( const wchar_t BOOST_RANGE_ARRAY_REF()[sz] )
boost::range_detail::is_wchar_t_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_wchar_t_array_impl( wchar_t BOOST_RANGE_ARRAY_REF()[sz] );$/;"	p	namespace:boost::range_detail	signature:( wchar_t BOOST_RANGE_ARRAY_REF()[sz] )
boost::range_detail::is_wchar_t_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_wchar_t_ptr_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
boost::range_detail::is_wchar_t_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_wchar_t_ptr_impl( wchar_t* const );$/;"	p	namespace:boost::range_detail	signature:( wchar_t* const )
boost::range_detail::length	/usr/include/boost/range/as_literal.hpp	/^        inline std::size_t length( const char* s )$/;"	f	namespace:boost::range_detail	signature:( const char* s )
boost::range_detail::length	/usr/include/boost/range/as_literal.hpp	/^        inline std::size_t length( const wchar_t* s )$/;"	f	namespace:boost::range_detail	signature:( const wchar_t* s )
boost::range_detail::make_range	/usr/include/boost/range/as_literal.hpp	/^        make_range( T& r, long )$/;"	f	namespace:boost::range_detail	signature:( T& r, long )
boost::range_detail::make_range	/usr/include/boost/range/as_literal.hpp	/^        make_range( T* const r, bool )$/;"	f	namespace:boost::range_detail	signature:( T* const r, bool )
boost::range_detail::range	/usr/include/boost/range/detail/common.hpp	/^        class range$/;"	c	namespace:boost::range_detail
boost::range_detail::range::array_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    pair_t >::type array_t;$/;"	t	class:boost::range_detail::range	access:private
boost::range_detail::range::char_array_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    wchar_array_t >::type char_array_t;$/;"	t	class:boost::range_detail::range	access:private
boost::range_detail::range::char_ptr_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    const_char_ptr_t >::type char_ptr_t;$/;"	t	class:boost::range_detail::range	access:private
boost::range_detail::range::const_char_ptr_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    string_t >::type const_char_ptr_t;$/;"	t	class:boost::range_detail::range	access:private
boost::range_detail::range::const_wchar_ptr_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    char_ptr_t >::type const_wchar_ptr_t;$/;"	t	class:boost::range_detail::range	access:private
boost::range_detail::range::pair_t	/usr/include/boost/range/detail/common.hpp	/^                                                                  void >::type pair_t;$/;"	t	class:boost::range_detail::range	access:private
boost::range_detail::range::string_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    array_t >::type string_t;$/;"	t	class:boost::range_detail::range	access:private
boost::range_detail::range::type	/usr/include/boost/range/detail/common.hpp	/^                                                                    char_array_t >::type type;  $/;"	t	class:boost::range_detail::range	access:public
boost::range_detail::range::wchar_array_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    wchar_ptr_t >::type wchar_array_t;$/;"	t	class:boost::range_detail::range	access:private
boost::range_detail::range::wchar_ptr_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    const_wchar_ptr_t >::type wchar_ptr_t;$/;"	t	class:boost::range_detail::range	access:private
boost::range_detail::range_begin	/usr/include/boost/range/begin.hpp	/^    inline Iterator range_begin( const std::pair<Iterator,Iterator>& p )$/;"	f	namespace:boost::range_detail	signature:( const std::pair<Iterator,Iterator>& p )
boost::range_detail::range_begin	/usr/include/boost/range/begin.hpp	/^    inline Iterator range_begin( std::pair<Iterator,Iterator>& p )$/;"	f	namespace:boost::range_detail	signature:( std::pair<Iterator,Iterator>& p )
boost::range_detail::range_begin	/usr/include/boost/range/begin.hpp	/^    range_begin( C& c )$/;"	f	namespace:boost::range_detail	signature:( C& c )
boost::range_detail::range_begin	/usr/include/boost/range/detail/begin.hpp	/^        struct range_begin<array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_begin	/usr/include/boost/range/detail/begin.hpp	/^        struct range_begin<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_begin	/usr/include/boost/range/detail/begin.hpp	/^        struct range_begin<std_pair_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_begin	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_begin<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_begin	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_begin<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_begin	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_begin<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_begin	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_begin<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_begin::BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/begin.hpp	/^            static T* fun( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:()
boost::range_detail::range_begin::fun	/usr/include/boost/range/detail/begin.hpp	/^            static BOOST_RANGE_DEDUCED_TYPENAME range_iterator<C>::type fun( C& c )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( C& c )
boost::range_detail::range_begin::fun	/usr/include/boost/range/detail/begin.hpp	/^            static BOOST_RANGE_DEDUCED_TYPENAME range_iterator<P>::type fun( const P& p )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( const P& p )
boost::range_detail::range_begin::fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static char* fun( char* s )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( char* s )
boost::range_detail::range_begin::fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static const char* fun( const char* s )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( const char* s )
boost::range_detail::range_begin::fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static const wchar_t* fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( const wchar_t* s )
boost::range_detail::range_begin::fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static wchar_t* fun( wchar_t* s )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( wchar_t* s )
boost::range_detail::range_const_iterator_	/usr/include/boost/range/detail/const_iterator.hpp	/^        struct range_const_iterator_<array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_const_iterator_	/usr/include/boost/range/detail/const_iterator.hpp	/^        struct range_const_iterator_<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_const_iterator_	/usr/include/boost/range/detail/const_iterator.hpp	/^        struct range_const_iterator_<std_pair_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_const_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_const_iterator_<char_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_const_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_const_iterator_<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_const_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_const_iterator_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_const_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_const_iterator_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_const_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_const_iterator_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_const_iterator_::pts	/usr/include/boost/range/detail/const_iterator.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_const_iterator_	access:public
boost::range_detail::range_const_iterator_::pts	/usr/include/boost/range/detail/detail_str.hpp	/^             struct pts$/;"	s	struct:boost::range_detail::range_const_iterator_	access:public
boost::range_detail::range_const_iterator_::pts	/usr/include/boost/range/detail/detail_str.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_const_iterator_	access:public
boost::range_detail::range_const_iterator_::pts::type	/usr/include/boost/range/detail/const_iterator.hpp	/^                    remove_extent<T>::type* type;$/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
boost::range_detail::range_const_iterator_::pts::type	/usr/include/boost/range/detail/const_iterator.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME C::const_iterator type;$/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
boost::range_detail::range_const_iterator_::pts::type	/usr/include/boost/range/detail/const_iterator.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME P::first_type type;$/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
boost::range_detail::range_const_iterator_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                    remove_extent<T>::type* type;$/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
boost::range_detail::range_const_iterator_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                 typedef const wchar_t* type; $/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
boost::range_detail::range_const_iterator_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef const char* type; $/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
boost::range_detail::range_const_iterator_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef const wchar_t* type; $/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
boost::range_detail::range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<char_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<std_pair_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_difference_type_::pts	/usr/include/boost/range/detail/difference_type.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_difference_type_	access:public
boost::range_detail::range_difference_type_::pts::type	/usr/include/boost/range/detail/difference_type.hpp	/^                typedef BOOST_DEDUCED_TYPENAME C::difference_type type;$/;"	t	struct:boost::range_detail::range_difference_type_::pts	access:public
boost::range_detail::range_difference_type_::pts::type	/usr/include/boost/range/detail/difference_type.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME boost::iterator_difference< BOOST_DEDUCED_TYPENAME P::first_type>::type type;                $/;"	t	struct:boost::range_detail::range_difference_type_::pts	access:public
boost::range_detail::range_difference_type_::pts::type	/usr/include/boost/range/detail/difference_type.hpp	/^                typedef std::ptrdiff_t type;$/;"	t	struct:boost::range_detail::range_difference_type_::pts	access:public
boost::range_detail::range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<std_pair_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_empty::fun	/usr/include/boost/range/detail/empty.hpp	/^            static bool fun( C& c )$/;"	f	struct:boost::range_detail::range_empty	access:public	signature:( C& c )
boost::range_detail::range_empty::fun	/usr/include/boost/range/detail/empty.hpp	/^            static bool fun( const char* s )$/;"	f	struct:boost::range_detail::range_empty	access:public	signature:( const char* s )
boost::range_detail::range_empty::fun	/usr/include/boost/range/detail/empty.hpp	/^            static bool fun( const P& p )$/;"	f	struct:boost::range_detail::range_empty	access:public	signature:( const P& p )
boost::range_detail::range_empty::fun	/usr/include/boost/range/detail/empty.hpp	/^            static bool fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_empty	access:public	signature:( const wchar_t* s )
boost::range_detail::range_empty::fun	/usr/include/boost/range/detail/empty.hpp	/^            static bool fun( T BOOST_ARRAY_REF[sz] )$/;"	f	struct:boost::range_detail::range_empty	access:public	signature:( T BOOST_ARRAY_REF[sz] )
boost::range_detail::range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<char_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<wchar_t_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/end.hpp	/^        struct range_end<array_>  $/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/end.hpp	/^        struct range_end<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/end.hpp	/^        struct range_end<std_pair_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<array_>  $/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<char_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<std_pair_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<wchar_t_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_end	/usr/include/boost/range/end.hpp	/^        inline Iterator range_end( const std::pair<Iterator,Iterator>& p )$/;"	f	namespace:boost::range_detail	signature:( const std::pair<Iterator,Iterator>& p )
boost::range_detail::range_end	/usr/include/boost/range/end.hpp	/^        inline Iterator range_end( std::pair<Iterator,Iterator>& p )$/;"	f	namespace:boost::range_detail	signature:( std::pair<Iterator,Iterator>& p )
boost::range_detail::range_end	/usr/include/boost/range/end.hpp	/^        range_end( C& c )$/;"	f	namespace:boost::range_detail	signature:( C& c )
boost::range_detail::range_end::BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/detail_str.hpp	/^            static T* fun( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:()
boost::range_detail::range_end::BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/end.hpp	/^            static T* fun( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:()
boost::range_detail::range_end::fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static char* fun( char* s )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( char* s )
boost::range_detail::range_end::fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static const char* fun( const char* s )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( const char* s )
boost::range_detail::range_end::fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static const wchar_t* fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( const wchar_t* s )
boost::range_detail::range_end::fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static wchar_t* fun( wchar_t* s )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( wchar_t* s )
boost::range_detail::range_end::fun	/usr/include/boost/range/detail/end.hpp	/^            fun( C& c )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( C& c )
boost::range_detail::range_end::fun	/usr/include/boost/range/detail/end.hpp	/^            fun( const P& p )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( const P& p )
boost::range_detail::range_end::inner	/usr/include/boost/range/detail/vc6/end.hpp	/^            struct inner {$/;"	s	struct:boost::range_detail::range_end	access:public
boost::range_detail::range_end::inner::fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                fun( C& c )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( C& c )
boost::range_detail::range_end::inner::fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                fun( const P& p )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( const P& p )
boost::range_detail::range_end::inner::fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                fun(T& t)$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:(T& t)
boost::range_detail::range_end::inner::fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                static char* fun( char* s )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( char* s )
boost::range_detail::range_end::inner::fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                static const char* fun( const char* s )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( const char* s )
boost::range_detail::range_end::inner::fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                static const wchar_t* fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( const wchar_t* s )
boost::range_detail::range_end::inner::fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                static wchar_t* fun( wchar_t* s )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( wchar_t* s )
boost::range_detail::range_helper	/usr/include/boost/range/detail/common.hpp	/^        struct range_helper$/;"	s	namespace:boost::range_detail
boost::range_detail::range_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_array_               = boost::is_array<C>::value );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_array_ = boost::is_array<C>::value )
boost::range_detail::range_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_char_array_          = sizeof( boost::range_detail::is_char_array_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_char_array_ = sizeof( boost::range_detail::is_char_array_impl( ptr ) ) == sizeof( yes_type ) )
boost::range_detail::range_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_char_ptr_            = sizeof( boost::range_detail::is_char_ptr_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_char_ptr_ = sizeof( boost::range_detail::is_char_ptr_impl( ptr ) ) == sizeof( yes_type ) )
boost::range_detail::range_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_const_char_ptr_      = sizeof( boost::range_detail::is_const_char_ptr_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_const_char_ptr_ = sizeof( boost::range_detail::is_const_char_ptr_impl( ptr ) ) == sizeof( yes_type ) )
boost::range_detail::range_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_const_wchar_t_ptr_   = sizeof( boost::range_detail::is_const_wchar_t_ptr_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_const_wchar_t_ptr_ = sizeof( boost::range_detail::is_const_wchar_t_ptr_impl( ptr ) ) == sizeof( yes_type ) )
boost::range_detail::range_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_pair_                = sizeof( boost::range_detail::is_pair_impl( c ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_pair_ = sizeof( boost::range_detail::is_pair_impl( c ) ) == sizeof( yes_type ) )
boost::range_detail::range_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_string_              = (boost::type_traits::ice_or<is_const_char_ptr_, is_const_wchar_t_ptr_>::value ));$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_string_ = (boost::type_traits::ice_or<is_const_char_ptr_, is_const_wchar_t_ptr_>::value ))
boost::range_detail::range_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_wchar_t_array_       = sizeof( boost::range_detail::is_wchar_t_array_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_wchar_t_array_ = sizeof( boost::range_detail::is_wchar_t_array_impl( ptr ) ) == sizeof( yes_type ) )
boost::range_detail::range_helper::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_wchar_t_ptr_         = sizeof( boost::range_detail::is_wchar_t_ptr_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_wchar_t_ptr_ = sizeof( boost::range_detail::is_wchar_t_ptr_impl( ptr ) ) == sizeof( yes_type ) )
boost::range_detail::range_helper::c	/usr/include/boost/range/detail/common.hpp	/^            static C* c;$/;"	m	struct:boost::range_detail::range_helper	access:public
boost::range_detail::range_helper::ptr	/usr/include/boost/range/detail/common.hpp	/^            static C  ptr;$/;"	m	struct:boost::range_detail::range_helper	access:public
boost::range_detail::range_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_iterator_<char_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_iterator_<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_iterator_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_iterator_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_iterator_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_iterator_	/usr/include/boost/range/detail/iterator.hpp	/^        struct range_iterator_ {$/;"	s	namespace:boost::range_detail
boost::range_detail::range_iterator_	/usr/include/boost/range/detail/iterator.hpp	/^        struct range_iterator_<array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_iterator_	/usr/include/boost/range/detail/iterator.hpp	/^        struct range_iterator_<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_iterator_	/usr/include/boost/range/detail/iterator.hpp	/^        struct range_iterator_<std_pair_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_iterator_::pts	/usr/include/boost/range/detail/detail_str.hpp	/^             struct pts$/;"	s	struct:boost::range_detail::range_iterator_	access:public
boost::range_detail::range_iterator_::pts	/usr/include/boost/range/detail/detail_str.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_iterator_	access:public
boost::range_detail::range_iterator_::pts	/usr/include/boost/range/detail/iterator.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_iterator_	access:public
boost::range_detail::range_iterator_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                    remove_extent<T>::type* type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
boost::range_detail::range_iterator_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                 typedef const wchar_t* type; $/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
boost::range_detail::range_iterator_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef char* type; $/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
boost::range_detail::range_iterator_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef const char* type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
boost::range_detail::range_iterator_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef wchar_t* type; $/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
boost::range_detail::range_iterator_::pts::type	/usr/include/boost/range/detail/iterator.hpp	/^                    remove_extent<T>::type* type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
boost::range_detail::range_iterator_::pts::type	/usr/include/boost/range/detail/iterator.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME C::iterator type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
boost::range_detail::range_iterator_::pts::type	/usr/include/boost/range/detail/iterator.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME P::first_type type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
boost::range_detail::range_iterator_::pts::type	/usr/include/boost/range/detail/iterator.hpp	/^                typedef int type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
boost::range_detail::range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<char_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<std_pair_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<wchar_t_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<char_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<std_pair_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<wchar_t_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_::BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/size.hpp	/^            static std::size_t fun( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	struct:boost::range_detail::range_size_	access:public	signature:()
boost::range_detail::range_size_::fun	/usr/include/boost/range/detail/size.hpp	/^            fun( const P& p )$/;"	f	struct:boost::range_detail::range_size_	access:public	signature:( const P& p )
boost::range_detail::range_size_::fun	/usr/include/boost/range/detail/size.hpp	/^            static BOOST_RANGE_DEDUCED_TYPENAME C::size_type fun( const C& c )$/;"	f	struct:boost::range_detail::range_size_	access:public	signature:( const C& c )
boost::range_detail::range_size_::fun	/usr/include/boost/range/detail/size.hpp	/^            static std::size_t fun( const char* s )$/;"	f	struct:boost::range_detail::range_size_	access:public	signature:( const char* s )
boost::range_detail::range_size_::fun	/usr/include/boost/range/detail/size.hpp	/^            static std::size_t fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_size_	access:public	signature:( const wchar_t* s )
boost::range_detail::range_size_::inner	/usr/include/boost/range/detail/vc6/size.hpp	/^            struct inner {$/;"	s	struct:boost::range_detail::range_size_	access:public
boost::range_detail::range_size_::inner::fun	/usr/include/boost/range/detail/vc6/size.hpp	/^                fun( const P& p )$/;"	f	struct:boost::range_detail::range_size_::inner	access:public	signature:( const P& p )
boost::range_detail::range_size_::inner::fun	/usr/include/boost/range/detail/vc6/size.hpp	/^                static BOOST_RANGE_DEDUCED_TYPENAME C::size_type fun( const C& c )$/;"	f	struct:boost::range_detail::range_size_::inner	access:public	signature:( const C& c )
boost::range_detail::range_size_::inner::fun	/usr/include/boost/range/detail/vc6/size.hpp	/^                static std::size_t fun( const char* s )$/;"	f	struct:boost::range_detail::range_size_::inner	access:public	signature:( const char* s )
boost::range_detail::range_size_::inner::fun	/usr/include/boost/range/detail/vc6/size.hpp	/^                static std::size_t fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_size_::inner	access:public	signature:( const wchar_t* s )
boost::range_detail::range_size_::inner::fun	/usr/include/boost/range/detail/vc6/size.hpp	/^                static std::size_t fun(T& t)$/;"	f	struct:boost::range_detail::range_size_::inner	access:public	signature:(T& t)
boost::range_detail::range_size_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_size_type_<char_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_size_type_<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_size_type_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_size_type_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_size_type_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_type_	/usr/include/boost/range/detail/size_type.hpp	/^        struct range_size_type_<array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_type_	/usr/include/boost/range/detail/size_type.hpp	/^        struct range_size_type_<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_type_	/usr/include/boost/range/detail/size_type.hpp	/^        struct range_size_type_<std_pair_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_size_type_::pts	/usr/include/boost/range/detail/detail_str.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_size_type_	access:public
boost::range_detail::range_size_type_::pts	/usr/include/boost/range/detail/size_type.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_size_type_	access:public
boost::range_detail::range_size_type_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef std::size_t type;$/;"	t	struct:boost::range_detail::range_size_type_::pts	access:public
boost::range_detail::range_size_type_::pts::type	/usr/include/boost/range/detail/size_type.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME C::size_type type;$/;"	t	struct:boost::range_detail::range_size_type_::pts	access:public
boost::range_detail::range_size_type_::pts::type	/usr/include/boost/range/detail/size_type.hpp	/^                typedef std::size_t type;$/;"	t	struct:boost::range_detail::range_size_type_::pts	access:public
boost::range_detail::range_value_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_value_type_<char_array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_value_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_value_type_<char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_value_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_value_type_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_value_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_value_type_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_value_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_value_type_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_value_type_	/usr/include/boost/range/detail/value_type.hpp	/^        struct range_value_type_<array_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_value_type_	/usr/include/boost/range/detail/value_type.hpp	/^        struct range_value_type_<std_container_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_value_type_	/usr/include/boost/range/detail/value_type.hpp	/^        struct range_value_type_<std_pair_>$/;"	s	namespace:boost::range_detail
boost::range_detail::range_value_type_::pts	/usr/include/boost/range/detail/detail_str.hpp	/^             struct pts$/;"	s	struct:boost::range_detail::range_value_type_	access:public
boost::range_detail::range_value_type_::pts	/usr/include/boost/range/detail/detail_str.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_value_type_	access:public
boost::range_detail::range_value_type_::pts	/usr/include/boost/range/detail/value_type.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_value_type_	access:public
boost::range_detail::range_value_type_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                 typedef char type; $/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
boost::range_detail::range_value_type_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                 typedef const char type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
boost::range_detail::range_value_type_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                 typedef wchar_t type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
boost::range_detail::range_value_type_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef char type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
boost::range_detail::range_value_type_::pts::type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef const wchar_t type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
boost::range_detail::range_value_type_::pts::type	/usr/include/boost/range/detail/value_type.hpp	/^                typedef BOOST_DEDUCED_TYPENAME remove_extent<T>::type type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
boost::range_detail::range_value_type_::pts::type	/usr/include/boost/range/detail/value_type.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME boost::iterator_value< BOOST_RANGE_DEDUCED_TYPENAME P::first_type >::type type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
boost::range_detail::range_value_type_::pts::type	/usr/include/boost/range/detail/value_type.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME C::value_type type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
boost::range_detail::remove_extent	/usr/include/boost/range/detail/remove_extent.hpp	/^        struct remove_extent {$/;"	s	namespace:boost::range_detail
boost::range_detail::remove_extent::ar	/usr/include/boost/range/detail/remove_extent.hpp	/^            static T* ar;$/;"	m	struct:boost::range_detail::remove_extent	access:public
boost::range_detail::remove_extent::BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/remove_extent.hpp	/^            BOOST_STATIC_CONSTANT(std::size_t, size = sizeof(*ar) \/ sizeof((*ar)[0]));$/;"	p	struct:boost::range_detail::remove_extent	access:public	signature:(std::size_t, size = sizeof(*ar) / sizeof((*ar)[0]))
boost::range_detail::remove_extent::result1	/usr/include/boost/range/detail/remove_extent.hpp	/^                    >::type result1;$/;"	t	struct:boost::range_detail::remove_extent	access:public
boost::range_detail::remove_extent::result2	/usr/include/boost/range/detail/remove_extent.hpp	/^                    > result2;$/;"	t	struct:boost::range_detail::remove_extent	access:public
boost::range_detail::remove_extent::type	/usr/include/boost/range/detail/remove_extent.hpp	/^                    >::type type;$/;"	t	struct:boost::range_detail::remove_extent	access:public
boost::range_detail::select	/usr/include/boost/range/detail/remove_extent.hpp	/^        struct select {$/;"	s	namespace:boost::range_detail
boost::range_detail::select::result1	/usr/include/boost/range/detail/remove_extent.hpp	/^                    >::type result1;$/;"	t	struct:boost::range_detail::select	access:public
boost::range_detail::select::result2	/usr/include/boost/range/detail/remove_extent.hpp	/^                    > result2;$/;"	t	struct:boost::range_detail::select	access:public
boost::range_detail::select::type	/usr/include/boost/range/detail/remove_extent.hpp	/^                    >::type type;$/;"	t	struct:boost::range_detail::select	access:public
boost::range_detail::std_container_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<1>::type    std_container_;$/;"	t	namespace:boost::range_detail
boost::range_detail::std_pair_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<2>::type    std_pair_;$/;"	t	namespace:boost::range_detail
boost::range_detail::string_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<12>::type   string_;$/;"	t	namespace:boost::range_detail
boost::range_detail::str_begin	/usr/include/boost/range/detail/detail_str.hpp	/^        str_begin( C& c )$/;"	f	namespace:boost::range_detail	signature:( C& c )
boost::range_detail::str_end	/usr/include/boost/range/detail/detail_str.hpp	/^        str_end( C& c )$/;"	f	namespace:boost::range_detail	signature:( C& c )
boost::range_detail::str_end	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline Char* str_end( Char* s )$/;"	f	namespace:boost::range_detail	signature:( Char* s )
boost::range_detail::str_end	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline const char* str_end( const char* s, const char* )$/;"	f	namespace:boost::range_detail	signature:( const char* s, const char* )
boost::range_detail::str_end	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline const wchar_t* str_end( const wchar_t* s, const wchar_t* )$/;"	f	namespace:boost::range_detail	signature:( const wchar_t* s, const wchar_t* )
boost::range_detail::str_size	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline std::size_t str_size( const Char* const& s )$/;"	f	namespace:boost::range_detail	signature:( const Char* const& s )
boost::range_detail::wchar_t_array_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<7>::type    wchar_t_array_;$/;"	t	namespace:boost::range_detail
boost::range_detail::wchar_t_ptr_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<10>::type   wchar_t_ptr_;$/;"	t	namespace:boost::range_detail
boost::range_detail_microsoft	/usr/include/boost/range/atl.hpp	/^namespace boost { namespace range_detail_microsoft {$/;"	n	namespace:boost
boost::range_detail_microsoft	/usr/include/boost/range/detail/microsoft.hpp	/^namespace boost { namespace range_detail_microsoft {$/;"	n	namespace:boost
boost::range_detail_microsoft	/usr/include/boost/range/mfc.hpp	/^namespace boost { namespace range_detail_microsoft {$/;"	n	namespace:boost
boost::range_detail_microsoft::array_functions	/usr/include/boost/range/detail/microsoft.hpp	/^    struct array_functions$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::array_functions::begin	/usr/include/boost/range/detail/microsoft.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::array_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::array_functions::end	/usr/include/boost/range/detail/microsoft.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::array_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::atl_array_functions	/usr/include/boost/range/atl.hpp	/^    struct atl_array_functions :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
boost::range_detail_microsoft::atl_array_functions::end	/usr/include/boost/range/atl.hpp	/^        Iterator end(X& x) \/\/ redefine$/;"	f	struct:boost::range_detail_microsoft::atl_array_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::atl_rb_tree_tag	/usr/include/boost/range/atl.hpp	/^    struct atl_rb_tree_tag$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::atl_string_tag	/usr/include/boost/range/atl.hpp	/^    struct atl_string_tag$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::begin_of	/usr/include/boost/range/detail/microsoft.hpp	/^    begin_of(T const& x)$/;"	f	namespace:boost::range_detail_microsoft	signature:(T const& x)
boost::range_detail_microsoft::begin_of	/usr/include/boost/range/detail/microsoft.hpp	/^    begin_of(T& x)$/;"	f	namespace:boost::range_detail_microsoft	signature:(T& x)
boost::range_detail_microsoft::compatible_mutable_iterator	/usr/include/boost/range/detail/microsoft.hpp	/^    struct compatible_mutable_iterator : $/;"	s	namespace:boost::range_detail_microsoft	inherits:BOOST_RANGE_DETAIL_MICROSOFT_range_mutable_iterator
boost::range_detail_microsoft::const_iterator_of	/usr/include/boost/range/detail/microsoft.hpp	/^    struct const_iterator_of$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::const_iterator_of::bare_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename remove_cv<T>::type bare_t;$/;"	t	struct:boost::range_detail_microsoft::const_iterator_of	access:public
boost::range_detail_microsoft::const_iterator_of::cust_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename customization_of<bare_t>::type cust_t;$/;"	t	struct:boost::range_detail_microsoft::const_iterator_of	access:public
boost::range_detail_microsoft::const_iterator_of::type	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename cust_t::template meta<bare_t>::const_iterator type;$/;"	t	struct:boost::range_detail_microsoft::const_iterator_of	access:public
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CAtlArray<E, ETraits> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:atl_array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CAtlList<E, ETraits> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CAtlMap<K, V, KTraits, VTraits> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:customization
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CAutoPtrArray<E> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:atl_array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CAutoPtrList<E> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:indirected_list_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CComBSTR >$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CHeapPtrList<E, Allocator> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:indirected_list_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CInterfaceArray<I, piid> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:atl_array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CInterfaceList<I, piid> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CSimpleArray<T, TEqual> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CSimpleMap<TKey, TVal, TEqual> >$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CSimpleValArray<T> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CStaticString<BaseType, t_nSize> >$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< atl_rb_tree_tag > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:indirected_list_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/atl.hpp	/^    struct customization< atl_string_tag >$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CArray<Type, ArgType> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CByteArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CDWordArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CList<Type, ArgType> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMap<Key, ArgKey, Mapped, ArgMapped> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_cpair_map_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapPtrToPtr > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapPtrToWord > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapStringToOb > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapStringToPtr > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapStringToString > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_cpair_map_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapWordToOb > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapWordToPtr > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CObArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_ptr_array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CObList > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CPtrArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_ptr_array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CPtrList > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CString >$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CStringArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CStringList > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CTypedPtrArray<BaseClass, PtrType> >$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CTypedPtrList<BaseClass, PtrType> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CTypedPtrMap<BaseClass, KeyPtrType, MappedPtrType> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CUIntArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
boost::range_detail_microsoft::customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CWordArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
boost::range_detail_microsoft::customization::begin	/usr/include/boost/range/atl.hpp	/^        Iterator begin(X const& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X const& x)
boost::range_detail_microsoft::customization::begin	/usr/include/boost/range/atl.hpp	/^        Iterator begin(X& x) \/\/ redefine$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
boost::range_detail_microsoft::customization::begin	/usr/include/boost/range/atl.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
boost::range_detail_microsoft::customization::begin	/usr/include/boost/range/atl.hpp	/^        typename mutable_<Iterator, X>::type begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
boost::range_detail_microsoft::customization::begin	/usr/include/boost/range/mfc.hpp	/^        Iterator begin(X const& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X const& x)
boost::range_detail_microsoft::customization::begin	/usr/include/boost/range/mfc.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
boost::range_detail_microsoft::customization::begin	/usr/include/boost/range/mfc.hpp	/^        typename mutable_<Iterator, X>::type begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
boost::range_detail_microsoft::customization::end	/usr/include/boost/range/atl.hpp	/^        Iterator end(X const& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X const& x)
boost::range_detail_microsoft::customization::end	/usr/include/boost/range/atl.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
boost::range_detail_microsoft::customization::end	/usr/include/boost/range/mfc.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
boost::range_detail_microsoft::customization::fun	/usr/include/boost/range/mfc.hpp	/^        struct fun$/;"	s	struct:boost::range_detail_microsoft::customization	access:public
boost::range_detail_microsoft::customization::fun::operator ()	/usr/include/boost/range/mfc.hpp	/^            result_type operator()(PtrType_ p) const$/;"	f	struct:boost::range_detail_microsoft::customization::fun	access:public	signature:(PtrType_ p) const
boost::range_detail_microsoft::customization::fun::result_type	/usr/include/boost/range/mfc.hpp	/^            typedef val_t_ * const result_type;$/;"	t	struct:boost::range_detail_microsoft::customization::fun	access:public
boost::range_detail_microsoft::customization::fun::val_t	/usr/include/boost/range/mfc.hpp	/^            typedef typename remove_pointer<PtrType>::type val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::fun	access:public
boost::range_detail_microsoft::customization::fun::val_t_	/usr/include/boost/range/mfc.hpp	/^            >::type val_t_;$/;"	t	struct:boost::range_detail_microsoft::customization::fun	access:public
boost::range_detail_microsoft::customization::meta	/usr/include/boost/range/atl.hpp	/^        struct meta$/;"	s	struct:boost::range_detail_microsoft::customization	access:public
boost::range_detail_microsoft::customization::meta	/usr/include/boost/range/mfc.hpp	/^        struct meta$/;"	s	struct:boost::range_detail_microsoft::customization	access:public
boost::range_detail_microsoft::customization::meta::citer_t	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X const, val_t const *, val_t const *> citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::citer_t	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X const, val_t const> citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::citer_t	/usr/include/boost/range/atl.hpp	/^            typedef val_t const *citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::citer_t	/usr/include/boost/range/mfc.hpp	/^            typedef typename range_const_iterator<BaseClass>::type citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef indirect_iterator<citer_t> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X const, val_t const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef mutable_iterator const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef OLECHAR const *const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef typename X::PCXSTR const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef val_t const *const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef zip_iterator< tuple<k_citer_t, v_citer_t> > const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, ::CObject const * const, ::CObject const * const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, ::CObject const *> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, val_t const * const, val_t const * const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, val_t const, val_t const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, val_t const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, void const * const, void const * const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, void const *> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_cpair_map_iterator<X const, pair_t const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_ptr_array_iterator<X const, CObject const *> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_ptr_array_iterator<X const, void const *> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mutable_iterator const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef TCHAR const *const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef transform_iterator<fun<X const>, citer_t> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef val_t const *const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::key_t	/usr/include/boost/range/mfc.hpp	/^            typedef ::CString key_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::key_t	/usr/include/boost/range/mfc.hpp	/^            typedef void *key_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::key_t	/usr/include/boost/range/mfc.hpp	/^            typedef WORD key_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::k_citer_t	/usr/include/boost/range/atl.hpp	/^            typedef k_val_t const *k_citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::k_miter_t	/usr/include/boost/range/atl.hpp	/^            typedef k_val_t *k_miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::k_val_t	/usr/include/boost/range/atl.hpp	/^            typedef TKey k_val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mapped_t	/usr/include/boost/range/mfc.hpp	/^            typedef ::CObject *mapped_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mapped_t	/usr/include/boost/range/mfc.hpp	/^            typedef void *mapped_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mapped_t	/usr/include/boost/range/mfc.hpp	/^            typedef WORD mapped_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::miter_t	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X, val_t *, val_t *> miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::miter_t	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X, val_t> miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::miter_t	/usr/include/boost/range/atl.hpp	/^            typedef val_t *miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::miter_t	/usr/include/boost/range/mfc.hpp	/^            typedef typename compatible_mutable_iterator<BaseClass>::type miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef BaseType const *mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef indirect_iterator<miter_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X, val_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef OLECHAR *mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef typename X::PXSTR mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef val_t *mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef zip_iterator< tuple<k_miter_t, v_miter_t> > mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X, ::CObject *> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X, val_t * const, val_t * const> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X, val_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X, void *> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_cpair_map_iterator<X, pair_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_map_iterator<X, KeyPtrType, MappedPtrType> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_map_iterator<X, key_t, mapped_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_ptr_array_iterator<X, CObject *> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_ptr_array_iterator<X, void *> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef TCHAR *mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef transform_iterator<fun<X>, miter_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef val_t *mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::pair_t	/usr/include/boost/range/mfc.hpp	/^            typedef typename X::CPair pair_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/atl.hpp	/^            typedef ATL::CAutoPtr<E> val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/atl.hpp	/^            typedef ATL::CComQIPtr<I, piid> val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/atl.hpp	/^            typedef ATL::CHeapPtr<E, Allocator> val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/atl.hpp	/^            typedef E val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/atl.hpp	/^            typedef T val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/atl.hpp	/^            typedef typename X::CPair val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/mfc.hpp	/^            typedef ::CString val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/mfc.hpp	/^            typedef BYTE val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/mfc.hpp	/^            typedef DWORD val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/mfc.hpp	/^            typedef Type val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/mfc.hpp	/^            typedef typename remove_pointer<PtrType>::type val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/mfc.hpp	/^            typedef UINT val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::val_t	/usr/include/boost/range/mfc.hpp	/^            typedef WORD val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::v_citer_t	/usr/include/boost/range/atl.hpp	/^            typedef v_val_t const *v_citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::v_miter_t	/usr/include/boost/range/atl.hpp	/^            typedef v_val_t *v_miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization::meta::v_val_t	/usr/include/boost/range/atl.hpp	/^            typedef TVal v_val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
boost::range_detail_microsoft::customization_of	/usr/include/boost/range/detail/microsoft.hpp	/^    struct customization_of$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::customization_of::bare_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename remove_cv<T>::type bare_t;$/;"	t	struct:boost::range_detail_microsoft::customization_of	access:public
boost::range_detail_microsoft::customization_of::tag_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename customization_tag<bare_t>::type tag_t;$/;"	t	struct:boost::range_detail_microsoft::customization_of	access:public
boost::range_detail_microsoft::customization_of::type	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef customization<tag_t> type;$/;"	t	struct:boost::range_detail_microsoft::customization_of	access:public
boost::range_detail_microsoft::customization_tag_of	/usr/include/boost/range/detail/microsoft.hpp	/^    struct customization_tag_of$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::customization_tag_of::type	/usr/include/boost/range/detail/microsoft.hpp	/^        >::type type;$/;"	t	struct:boost::range_detail_microsoft::customization_tag_of	access:public
boost::range_detail_microsoft::end_of	/usr/include/boost/range/detail/microsoft.hpp	/^    end_of(T const& x)$/;"	f	namespace:boost::range_detail_microsoft	signature:(T const& x)
boost::range_detail_microsoft::end_of	/usr/include/boost/range/detail/microsoft.hpp	/^    end_of(T& x)$/;"	f	namespace:boost::range_detail_microsoft	signature:(T& x)
boost::range_detail_microsoft::indirected_list_functions	/usr/include/boost/range/atl.hpp	/^    struct indirected_list_functions$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::indirected_list_functions::begin	/usr/include/boost/range/atl.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::indirected_list_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::indirected_list_functions::end	/usr/include/boost/range/atl.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::indirected_list_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::list_functions	/usr/include/boost/range/detail/microsoft.hpp	/^    struct list_functions$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::list_functions::begin	/usr/include/boost/range/detail/microsoft.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::list_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::list_functions::end	/usr/include/boost/range/detail/microsoft.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::list_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::list_iterator	/usr/include/boost/range/detail/microsoft.hpp	/^    struct list_iterator :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_iterator_super::type
boost::range_detail_microsoft::list_iterator::decrement	/usr/include/boost/range/detail/microsoft.hpp	/^        void decrement()$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:private	signature:()
boost::range_detail_microsoft::list_iterator::dereference	/usr/include/boost/range/detail/microsoft.hpp	/^        ref_t dereference() const$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:private	signature:() const
boost::range_detail_microsoft::list_iterator::equal	/usr/include/boost/range/detail/microsoft.hpp	/^        bool equal(self_t const& other) const$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:private	signature:(self_t const& other) const
boost::range_detail_microsoft::list_iterator::increment	/usr/include/boost/range/detail/microsoft.hpp	/^        void increment()$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:private	signature:()
boost::range_detail_microsoft::list_iterator::list_iterator	/usr/include/boost/range/detail/microsoft.hpp	/^        explicit list_iterator()$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:public	signature:()
boost::range_detail_microsoft::list_iterator::list_iterator	/usr/include/boost/range/detail/microsoft.hpp	/^        explicit list_iterator(ListT& lst, POSITION pos) :$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:public	signature:(ListT& lst, POSITION pos)
boost::range_detail_microsoft::list_iterator::list_iterator	/usr/include/boost/range/detail/microsoft.hpp	/^        list_iterator(list_iterator<ListT_, Value_, Reference_, Traversal_> const& other) :$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:public	signature:(list_iterator<ListT_, Value_, Reference_, Traversal_> const& other)
boost::range_detail_microsoft::list_iterator::m_plst	/usr/include/boost/range/detail/microsoft.hpp	/^        ListT *m_plst;$/;"	m	struct:boost::range_detail_microsoft::list_iterator	access:private
boost::range_detail_microsoft::list_iterator::m_pos	/usr/include/boost/range/detail/microsoft.hpp	/^        POSITION m_pos;$/;"	m	struct:boost::range_detail_microsoft::list_iterator	access:private
boost::range_detail_microsoft::list_iterator::ref_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename super_t::reference ref_t;$/;"	t	struct:boost::range_detail_microsoft::list_iterator	access:private
boost::range_detail_microsoft::list_iterator::self_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef list_iterator self_t;$/;"	t	struct:boost::range_detail_microsoft::list_iterator	access:private
boost::range_detail_microsoft::list_iterator::super_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename list_iterator_super<ListT, Value, Reference, Traversal>::type super_t;$/;"	t	struct:boost::range_detail_microsoft::list_iterator	access:private
boost::range_detail_microsoft::list_iterator_super	/usr/include/boost/range/detail/microsoft.hpp	/^    struct list_iterator_super$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::list_iterator_super::ref_t	/usr/include/boost/range/detail/microsoft.hpp	/^        >::type ref_t;$/;"	t	struct:boost::range_detail_microsoft::list_iterator_super	access:public
boost::range_detail_microsoft::list_iterator_super::trv_t	/usr/include/boost/range/detail/microsoft.hpp	/^        >::type trv_t;$/;"	t	struct:boost::range_detail_microsoft::list_iterator_super	access:public
boost::range_detail_microsoft::list_iterator_super::type	/usr/include/boost/range/detail/microsoft.hpp	/^        > type;$/;"	t	struct:boost::range_detail_microsoft::list_iterator_super	access:public
boost::range_detail_microsoft::mfc_cpair_map_functions	/usr/include/boost/range/mfc.hpp	/^    struct mfc_cpair_map_functions$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::mfc_cpair_map_functions::begin	/usr/include/boost/range/mfc.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::mfc_cpair_map_functions::end	/usr/include/boost/range/mfc.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::mfc_cpair_map_iterator	/usr/include/boost/range/mfc.hpp	/^    struct mfc_cpair_map_iterator :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_pget_map_iterator_super::type
boost::range_detail_microsoft::mfc_cpair_map_iterator::dereference	/usr/include/boost/range/mfc.hpp	/^        ref_t dereference() const$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private	signature:() const
boost::range_detail_microsoft::mfc_cpair_map_iterator::equal	/usr/include/boost/range/mfc.hpp	/^        bool equal(self_t const& other) const$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private	signature:(self_t const& other) const
boost::range_detail_microsoft::mfc_cpair_map_iterator::increment	/usr/include/boost/range/mfc.hpp	/^        void increment()$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private	signature:()
boost::range_detail_microsoft::mfc_cpair_map_iterator::mfc_cpair_map_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_cpair_map_iterator()$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:public	signature:()
boost::range_detail_microsoft::mfc_cpair_map_iterator::mfc_cpair_map_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_cpair_map_iterator(MapT& map, PairT *pp) :$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:public	signature:(MapT& map, PairT *pp)
boost::range_detail_microsoft::mfc_cpair_map_iterator::mfc_cpair_map_iterator	/usr/include/boost/range/mfc.hpp	/^        mfc_cpair_map_iterator(mfc_cpair_map_iterator<MapT_, PairT_> const& other) :$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:public	signature:(mfc_cpair_map_iterator<MapT_, PairT_> const& other)
boost::range_detail_microsoft::mfc_cpair_map_iterator::m_pmap	/usr/include/boost/range/mfc.hpp	/^        MapT  *m_pmap;$/;"	m	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private
boost::range_detail_microsoft::mfc_cpair_map_iterator::m_pp	/usr/include/boost/range/mfc.hpp	/^        PairT *m_pp;$/;"	m	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private
boost::range_detail_microsoft::mfc_cpair_map_iterator::ref_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename super_t::reference ref_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private
boost::range_detail_microsoft::mfc_cpair_map_iterator::self_t	/usr/include/boost/range/mfc.hpp	/^        typedef mfc_cpair_map_iterator self_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private
boost::range_detail_microsoft::mfc_cpair_map_iterator::super_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename mfc_pget_map_iterator_super<MapT, PairT>::type super_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private
boost::range_detail_microsoft::mfc_map_functions	/usr/include/boost/range/mfc.hpp	/^    struct mfc_map_functions$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::mfc_map_functions::begin	/usr/include/boost/range/mfc.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_map_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::mfc_map_functions::end	/usr/include/boost/range/mfc.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_map_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::mfc_map_iterator	/usr/include/boost/range/mfc.hpp	/^    struct mfc_map_iterator :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_iterator_super::type
boost::range_detail_microsoft::mfc_map_iterator::dereference	/usr/include/boost/range/mfc.hpp	/^        ref_t dereference() const$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private	signature:() const
boost::range_detail_microsoft::mfc_map_iterator::equal	/usr/include/boost/range/mfc.hpp	/^        bool equal(self_t const& other) const$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private	signature:(self_t const& other) const
boost::range_detail_microsoft::mfc_map_iterator::increment	/usr/include/boost/range/mfc.hpp	/^        void increment()$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private	signature:()
boost::range_detail_microsoft::mfc_map_iterator::mfc_map_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_map_iterator()$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:public	signature:()
boost::range_detail_microsoft::mfc_map_iterator::mfc_map_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_map_iterator(MapT const& map) :$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:public	signature:(MapT const& map)
boost::range_detail_microsoft::mfc_map_iterator::mfc_map_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_map_iterator(MapT const& map, POSITION pos) :$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:public	signature:(MapT const& map, POSITION pos)
boost::range_detail_microsoft::mfc_map_iterator::mfc_map_iterator	/usr/include/boost/range/mfc.hpp	/^        mfc_map_iterator(mfc_map_iterator<MapT_, KeyT_, MappedT_> const& other) :$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:public	signature:(mfc_map_iterator<MapT_, KeyT_, MappedT_> const& other)
boost::range_detail_microsoft::mfc_map_iterator::m_key	/usr/include/boost/range/mfc.hpp	/^        KeyT m_key; MappedT m_mapped;$/;"	m	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
boost::range_detail_microsoft::mfc_map_iterator::m_mapped	/usr/include/boost/range/mfc.hpp	/^        KeyT m_key; MappedT m_mapped;$/;"	m	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
boost::range_detail_microsoft::mfc_map_iterator::m_pmap	/usr/include/boost/range/mfc.hpp	/^        MapT const *m_pmap;$/;"	m	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
boost::range_detail_microsoft::mfc_map_iterator::m_pos	/usr/include/boost/range/mfc.hpp	/^        POSITION m_pos, m_posNext;$/;"	m	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
boost::range_detail_microsoft::mfc_map_iterator::m_posNext	/usr/include/boost/range/mfc.hpp	/^        POSITION m_pos, m_posNext;$/;"	m	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
boost::range_detail_microsoft::mfc_map_iterator::ref_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename super_t::reference ref_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
boost::range_detail_microsoft::mfc_map_iterator::self_t	/usr/include/boost/range/mfc.hpp	/^        typedef mfc_map_iterator self_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
boost::range_detail_microsoft::mfc_map_iterator::super_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename mfc_map_iterator_super<MapT, KeyT, MappedT>::type super_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
boost::range_detail_microsoft::mfc_map_iterator_super	/usr/include/boost/range/mfc.hpp	/^    struct mfc_map_iterator_super$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::mfc_map_iterator_super::type	/usr/include/boost/range/mfc.hpp	/^        > type;$/;"	t	struct:boost::range_detail_microsoft::mfc_map_iterator_super	access:public
boost::range_detail_microsoft::mfc_pget_map_iterator_super	/usr/include/boost/range/mfc.hpp	/^    struct mfc_pget_map_iterator_super$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::mfc_pget_map_iterator_super::type	/usr/include/boost/range/mfc.hpp	/^        > type;$/;"	t	struct:boost::range_detail_microsoft::mfc_pget_map_iterator_super	access:public
boost::range_detail_microsoft::mfc_ptr_array_functions	/usr/include/boost/range/mfc.hpp	/^    struct mfc_ptr_array_functions$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::mfc_ptr_array_functions::begin	/usr/include/boost/range/mfc.hpp	/^        Iterator begin(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::mfc_ptr_array_functions::end	/usr/include/boost/range/mfc.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_functions	access:public	signature:(X& x)
boost::range_detail_microsoft::mfc_ptr_array_iterator	/usr/include/boost/range/mfc.hpp	/^    struct mfc_ptr_array_iterator :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_ptr_array_iterator_super::type
boost::range_detail_microsoft::mfc_ptr_array_iterator::dereference	/usr/include/boost/range/mfc.hpp	/^        ref_t dereference() const$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private	signature:() const
boost::range_detail_microsoft::mfc_ptr_array_iterator::equal	/usr/include/boost/range/mfc.hpp	/^        bool equal(self_t const& other) const$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private	signature:(self_t const& other) const
boost::range_detail_microsoft::mfc_ptr_array_iterator::mfc_ptr_array_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_ptr_array_iterator()$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:public	signature:()
boost::range_detail_microsoft::mfc_ptr_array_iterator::mfc_ptr_array_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_ptr_array_iterator(ArrayT& arr, INT_PTR index) :$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:public	signature:(ArrayT& arr, INT_PTR index)
boost::range_detail_microsoft::mfc_ptr_array_iterator::mfc_ptr_array_iterator	/usr/include/boost/range/mfc.hpp	/^        mfc_ptr_array_iterator(mfc_ptr_array_iterator<ArrayT_, PtrType_> const& other) :$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:public	signature:(mfc_ptr_array_iterator<ArrayT_, PtrType_> const& other)
boost::range_detail_microsoft::mfc_ptr_array_iterator::m_parr	/usr/include/boost/range/mfc.hpp	/^        ArrayT *m_parr;$/;"	m	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private
boost::range_detail_microsoft::mfc_ptr_array_iterator::ref_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename super_t::reference ref_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private
boost::range_detail_microsoft::mfc_ptr_array_iterator::self_t	/usr/include/boost/range/mfc.hpp	/^        typedef mfc_ptr_array_iterator self_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private
boost::range_detail_microsoft::mfc_ptr_array_iterator::super_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename mfc_ptr_array_iterator_super<ArrayT, PtrType>::type super_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private
boost::range_detail_microsoft::mfc_ptr_array_iterator_super	/usr/include/boost/range/mfc.hpp	/^    struct mfc_ptr_array_iterator_super$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::mfc_ptr_array_iterator_super::type	/usr/include/boost/range/mfc.hpp	/^        > type;$/;"	t	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator_super	access:public
boost::range_detail_microsoft::mutable_	/usr/include/boost/range/detail/microsoft.hpp	/^    struct mutable_ :$/;"	s	namespace:boost::range_detail_microsoft	inherits:disable_if
boost::range_detail_microsoft::mutable_iterator_of	/usr/include/boost/range/detail/microsoft.hpp	/^    struct mutable_iterator_of$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::mutable_iterator_of::bare_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename remove_cv<T>::type bare_t;$/;"	t	struct:boost::range_detail_microsoft::mutable_iterator_of	access:public
boost::range_detail_microsoft::mutable_iterator_of::cust_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename customization_of<bare_t>::type cust_t;$/;"	t	struct:boost::range_detail_microsoft::mutable_iterator_of	access:public
boost::range_detail_microsoft::mutable_iterator_of::type	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename cust_t::template meta<bare_t>::mutable_iterator type;$/;"	t	struct:boost::range_detail_microsoft::mutable_iterator_of	access:public
boost::range_detail_microsoft::size_of	/usr/include/boost/range/detail/microsoft.hpp	/^    size_of(T const& x)$/;"	f	namespace:boost::range_detail_microsoft	signature:(T const& x)
boost::range_detail_microsoft::size_type_of	/usr/include/boost/range/detail/microsoft.hpp	/^    struct size_type_of$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_microsoft::size_type_of::miter_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename range_detail_microsoft::mutable_iterator_of<T>::type miter_t;$/;"	t	struct:boost::range_detail_microsoft::size_type_of	access:public
boost::range_detail_microsoft::size_type_of::type	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename iterator_difference<miter_t>::type type;$/;"	t	struct:boost::range_detail_microsoft::size_type_of	access:public
boost::range_detail_microsoft::test_bidirectional	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_bidirectional(Range& rng)$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range& rng)
boost::range_detail_microsoft::test_const_iter	/usr/include/boost/range/detail/microsoft.hpp	/^    struct test_const_iter :$/;"	s	namespace:boost::range_detail_microsoft	inherits:boost::is_same
boost::range_detail_microsoft::test_emptiness	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_emptiness(Range& )$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range& )
boost::range_detail_microsoft::test_equals	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_equals(Range1 const& rng1, Range2 const& rng2)$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range1 const& rng1, Range2 const& rng2)
boost::range_detail_microsoft::test_find_key_and_mapped	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_find_key_and_mapped(AssocContainer const& ac, PairT const& pa)$/;"	f	namespace:boost::range_detail_microsoft	signature:(AssocContainer const& ac, PairT const& pa)
boost::range_detail_microsoft::test_forward	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_forward(Range& rng)$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range& rng)
boost::range_detail_microsoft::test_init_array	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_init_array(ArrayT& arr, SampleRange const& sample)$/;"	f	namespace:boost::range_detail_microsoft	signature:(ArrayT& arr, SampleRange const& sample)
boost::range_detail_microsoft::test_init_list	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_init_list(ListT& lst, SampleRange const& sample)$/;"	f	namespace:boost::range_detail_microsoft	signature:(ListT& lst, SampleRange const& sample)
boost::range_detail_microsoft::test_init_map	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_init_map(MapT& map, SampleMap const& sample)$/;"	f	namespace:boost::range_detail_microsoft	signature:(MapT& map, SampleMap const& sample)
boost::range_detail_microsoft::test_init_string	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_init_string(StringT& str, SampleRange const& sample)$/;"	f	namespace:boost::range_detail_microsoft	signature:(StringT& str, SampleRange const& sample)
boost::range_detail_microsoft::test_mutable_iter	/usr/include/boost/range/detail/microsoft.hpp	/^    struct test_mutable_iter :$/;"	s	namespace:boost::range_detail_microsoft	inherits:boost::is_same
boost::range_detail_microsoft::test_random_access	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_random_access(Range& rng)$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range& rng)
boost::range_detail_microsoft::test_trivial	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_trivial(Range& rng)$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range& rng)
boost::range_detail_microsoft::using_type_as_tag	/usr/include/boost/range/detail/microsoft.hpp	/^    struct using_type_as_tag$/;"	s	namespace:boost::range_detail_microsoft
boost::range_detail_vc7_1	/usr/include/boost/range/iterator.hpp	/^    namespace range_detail_vc7_1  $/;"	n	namespace:boost
boost::range_detail_vc7_1::range_iterator	/usr/include/boost/range/iterator.hpp	/^       struct range_iterator  $/;"	s	namespace:boost::range_detail_vc7_1
boost::range_detail_vc7_1::range_iterator	/usr/include/boost/range/iterator.hpp	/^       struct range_iterator< C, void(T[]) >  $/;"	s	namespace:boost::range_detail_vc7_1
boost::range_detail_vc7_1::range_iterator::type	/usr/include/boost/range/iterator.hpp	/^                               range_mutable_iterator<C> >::type type;  $/;"	t	struct:boost::range_detail_vc7_1::range_iterator	access:public
boost::range_detail_vc7_1::range_iterator::type	/usr/include/boost/range/iterator.hpp	/^           typedef T* type;  $/;"	t	struct:boost::range_detail_vc7_1::range_iterator	access:public
boost::range_difference	/usr/include/boost/range/detail/difference_type.hpp	/^    class range_difference$/;"	c	namespace:boost
boost::range_difference	/usr/include/boost/range/difference_type.hpp	/^    struct range_difference : iterator_difference< typename range_iterator<T>::type >$/;"	s	namespace:boost	inherits:iterator_difference
boost::range_difference::c_type	/usr/include/boost/range/detail/difference_type.hpp	/^        typedef BOOST_RANGE_DEDUCED_TYPENAME range_detail::range<C>::type c_type;$/;"	t	class:boost::range_difference	access:private
boost::range_difference::type	/usr/include/boost/range/detail/difference_type.hpp	/^        typedef BOOST_RANGE_DEDUCED_TYPENAME range_detail::range_difference_type_<c_type>::BOOST_NESTED_TEMPLATE pts<C>::type type; $/;"	t	class:boost::range_difference	access:public
boost::range_iterator	/usr/include/boost/range/iterator.hpp	/^    struct range_iterator$/;"	s	namespace:boost
boost::range_iterator::type	/usr/include/boost/range/iterator.hpp	/^               range_detail_vc7_1::range_iterator<C>::type type;  $/;"	t	struct:boost::range_iterator	access:public
boost::range_mutable_iterator	/usr/include/boost/range/detail/iterator.hpp	/^    class range_mutable_iterator$/;"	c	namespace:boost
boost::range_mutable_iterator	/usr/include/boost/range/detail/str_types.hpp	/^    struct range_mutable_iterator<T*>$/;"	s	namespace:boost
boost::range_mutable_iterator	/usr/include/boost/range/mutable_iterator.hpp	/^    struct range_mutable_iterator$/;"	s	namespace:boost
boost::range_mutable_iterator	/usr/include/boost/range/mutable_iterator.hpp	/^    struct range_mutable_iterator< std::pair<Iterator,Iterator> >$/;"	s	namespace:boost
boost::range_mutable_iterator	/usr/include/boost/range/mutable_iterator.hpp	/^    struct range_mutable_iterator< T[sz] >$/;"	s	namespace:boost
boost::range_mutable_iterator::c_type	/usr/include/boost/range/detail/iterator.hpp	/^        typedef BOOST_RANGE_DEDUCED_TYPENAME range_detail::range<C>::type c_type;$/;"	t	class:boost::range_mutable_iterator	access:private
boost::range_mutable_iterator::type	/usr/include/boost/range/detail/iterator.hpp	/^        typedef typename range_detail::range_iterator_<c_type>::BOOST_NESTED_TEMPLATE pts<C>::type type; $/;"	t	class:boost::range_mutable_iterator	access:public
boost::range_mutable_iterator::type	/usr/include/boost/range/detail/str_types.hpp	/^        typedef T* type;$/;"	t	struct:boost::range_mutable_iterator	access:public
boost::range_mutable_iterator::type	/usr/include/boost/range/mutable_iterator.hpp	/^        typedef BOOST_DEDUCED_TYPENAME C::iterator type;$/;"	t	struct:boost::range_mutable_iterator	access:public
boost::range_mutable_iterator::type	/usr/include/boost/range/mutable_iterator.hpp	/^        typedef Iterator type;$/;"	t	struct:boost::range_mutable_iterator	access:public
boost::range_mutable_iterator::type	/usr/include/boost/range/mutable_iterator.hpp	/^        typedef T* type;$/;"	t	struct:boost::range_mutable_iterator	access:public
boost::range_pointer	/usr/include/boost/range/pointer.hpp	/^    struct range_pointer : iterator_pointer< typename range_iterator<T>::type >$/;"	s	namespace:boost	inherits:iterator_pointer
boost::range_reference	/usr/include/boost/range/reference.hpp	/^    struct range_reference : iterator_reference< typename range_iterator<T>::type >$/;"	s	namespace:boost	inherits:iterator_reference
boost::range_result_iterator	/usr/include/boost/range/result_iterator.hpp	/^    struct range_result_iterator : range_iterator<C>$/;"	s	namespace:boost	inherits:range_iterator
boost::range_reverse_iterator	/usr/include/boost/range/reverse_iterator.hpp	/^    struct range_reverse_iterator$/;"	s	namespace:boost
boost::range_reverse_iterator::type	/usr/include/boost/range/reverse_iterator.hpp	/^            BOOST_DEDUCED_TYPENAME range_iterator<C>::type > type;$/;"	t	struct:boost::range_reverse_iterator	access:public
boost::range_reverse_result_iterator	/usr/include/boost/range/reverse_result_iterator.hpp	/^    struct range_reverse_result_iterator : range_reverse_iterator<C>$/;"	s	namespace:boost	inherits:range_reverse_iterator
boost::range_size	/usr/include/boost/range/detail/size_type.hpp	/^    class range_size$/;"	c	namespace:boost
boost::range_size	/usr/include/boost/range/detail/str_types.hpp	/^    struct range_size<T*>$/;"	s	namespace:boost
boost::range_size	/usr/include/boost/range/size_type.hpp	/^    struct range_size : $/;"	s	namespace:boost	inherits:detail::range_size
boost::range_size	/usr/include/boost/range/size_type.hpp	/^    struct range_size<const T > : range_size<T>$/;"	s	namespace:boost	inherits:range_size
boost::range_size::c_type	/usr/include/boost/range/detail/size_type.hpp	/^        typedef typename range_detail::range<C>::type c_type;$/;"	t	class:boost::range_size	access:private
boost::range_size::type	/usr/include/boost/range/detail/size_type.hpp	/^        typedef typename range_detail::range_size_type_<c_type>::BOOST_NESTED_TEMPLATE pts<C>::type type; $/;"	t	class:boost::range_size	access:public
boost::range_size::type	/usr/include/boost/range/detail/str_types.hpp	/^       typedef std::size_t type;$/;"	t	struct:boost::range_size	access:public
boost::range_value	/usr/include/boost/range/detail/value_type.hpp	/^    class range_value$/;"	c	namespace:boost
boost::range_value	/usr/include/boost/range/value_type.hpp	/^    struct range_value : iterator_value< typename range_iterator<T>::type >$/;"	s	namespace:boost	inherits:iterator_value
boost::range_value::c_type	/usr/include/boost/range/detail/value_type.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_detail::range<C>::type c_type;$/;"	t	class:boost::range_value	access:private
boost::range_value::type	/usr/include/boost/range/detail/value_type.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_detail::range_value_type_<c_type>::BOOST_NESTED_TEMPLATE pts<C>::type type; $/;"	t	class:boost::range_value	access:public
boost::rbegin	/usr/include/boost/range/rbegin.hpp	/^rbegin( C& c )$/;"	f	namespace:boost	signature:( C& c )
boost::rend	/usr/include/boost/range/rend.hpp	/^rend( C& c )$/;"	f	namespace:boost	signature:( C& c )
boost::SinglePassRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct SinglePassRangeConcept $/;"	s	namespace:boost
boost::SinglePassRangeConcept::a	/usr/include/boost/range/concepts.hpp	/^        T a;$/;"	m	struct:boost::SinglePassRangeConcept	access:public
boost::SinglePassRangeConcept::ci	/usr/include/boost/range/concepts.hpp	/^        range_const_iterator ci;$/;"	m	struct:boost::SinglePassRangeConcept	access:public
boost::SinglePassRangeConcept::constraints	/usr/include/boost/range/concepts.hpp	/^        void constraints()$/;"	f	struct:boost::SinglePassRangeConcept	access:public	signature:()
boost::SinglePassRangeConcept::const_constraints	/usr/include/boost/range/concepts.hpp	/^        void const_constraints(const T& a)$/;"	f	struct:boost::SinglePassRangeConcept	access:public	signature:(const T& a)
boost::SinglePassRangeConcept::i	/usr/include/boost/range/concepts.hpp	/^        range_iterator i;$/;"	m	struct:boost::SinglePassRangeConcept	access:public
boost::SinglePassRangeConcept::range_const_iterator	/usr/include/boost/range/concepts.hpp	/^        typedef typename range_iterator<T const>::type  range_const_iterator;$/;"	t	struct:boost::SinglePassRangeConcept	access:public
boost::SinglePassRangeConcept::range_iterator	/usr/include/boost/range/concepts.hpp	/^        typedef typename range_iterator<T>::type        range_iterator;$/;"	t	struct:boost::SinglePassRangeConcept	access:public
boost::size	/usr/include/boost/range/detail/size.hpp	/^    size( const C& c )$/;"	f	namespace:boost	signature:( const C& c )
boost::size	/usr/include/boost/range/detail/vc6/size.hpp	/^    size( const C& c )$/;"	f	namespace:boost	signature:( const C& c )
boost::size	/usr/include/boost/range/size.hpp	/^    inline BOOST_DEDUCED_TYPENAME range_difference<T>::type size( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
boost::sizer	/usr/include/boost/range/detail/sizer.hpp	/^    char (& sizer( const T BOOST_RANGE_ARRAY_REF()[sz] ) )[sz];$/;"	p	namespace:boost	signature:(const T BOOST_RANGE_ARRAY_REF(
boost::sizer	/usr/include/boost/range/detail/sizer.hpp	/^    char (& sizer( T BOOST_RANGE_ARRAY_REF()[sz] ) )[sz];$/;"	p	namespace:boost	signature:(T BOOST_RANGE_ARRAY_REF(
boost::sub_range	/usr/include/boost/range/sub_range.hpp	/^    class sub_range : public iterator_range< BOOST_DEDUCED_TYPENAME range_iterator<ForwardRange>::type > $/;"	c	namespace:boost	inherits:iterator_range
boost::sub_range::back	/usr/include/boost/range/sub_range.hpp	/^        const_reference back() const$/;"	f	class:boost::sub_range	access:public	signature:() const
boost::sub_range::back	/usr/include/boost/range/sub_range.hpp	/^        reference back()$/;"	f	class:boost::sub_range	access:public	signature:()
boost::sub_range::base	/usr/include/boost/range/sub_range.hpp	/^        typedef iterator_range< iterator_t  > base;$/;"	t	class:boost::sub_range	access:private
boost::sub_range::begin	/usr/include/boost/range/sub_range.hpp	/^        const_iterator  begin() const    { return base::begin(); }$/;"	f	class:boost::sub_range	access:public	signature:() const
boost::sub_range::begin	/usr/include/boost/range/sub_range.hpp	/^        iterator        begin()          { return base::begin(); }$/;"	f	class:boost::sub_range	access:public	signature:()
boost::sub_range::const_iterator	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_iterator<const ForwardRange>::type   const_iterator;$/;"	t	class:boost::sub_range	access:public
boost::sub_range::const_reference	/usr/include/boost/range/sub_range.hpp	/^                                 reference >::type const_reference;$/;"	t	class:boost::sub_range	access:public
boost::sub_range::difference_type	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_difference<ForwardRange>::type       difference_type;$/;"	t	class:boost::sub_range	access:public
boost::sub_range::end	/usr/include/boost/range/sub_range.hpp	/^        const_iterator  end() const      { return base::end();   }$/;"	f	class:boost::sub_range	access:public	signature:() const
boost::sub_range::end	/usr/include/boost/range/sub_range.hpp	/^        iterator        end()            { return base::end();   }$/;"	f	class:boost::sub_range	access:public	signature:()
boost::sub_range::front	/usr/include/boost/range/sub_range.hpp	/^        const_reference front() const$/;"	f	class:boost::sub_range	access:public	signature:() const
boost::sub_range::front	/usr/include/boost/range/sub_range.hpp	/^        reference front()$/;"	f	class:boost::sub_range	access:public	signature:()
boost::sub_range::impl	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base::impl impl;$/;"	t	class:boost::sub_range	access:private
boost::sub_range::iterator	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_iterator<ForwardRange>::type         iterator;$/;"	t	class:boost::sub_range	access:public
boost::sub_range::iterator_t	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_iterator<ForwardRange>::type iterator_t;$/;"	t	class:boost::sub_range	access:private
boost::sub_range::operator =	/usr/include/boost/range/sub_range.hpp	/^        sub_range& operator=( const ForwardRange2& r )$/;"	f	class:boost::sub_range	access:public	signature:( const ForwardRange2& r )
boost::sub_range::operator =	/usr/include/boost/range/sub_range.hpp	/^        sub_range& operator=( const sub_range& r )$/;"	f	class:boost::sub_range	access:public	signature:( const sub_range& r )
boost::sub_range::operator =	/usr/include/boost/range/sub_range.hpp	/^        sub_range& operator=( ForwardRange2& r )$/;"	f	class:boost::sub_range	access:public	signature:( ForwardRange2& r )
boost::sub_range::operator []	/usr/include/boost/range/sub_range.hpp	/^        const_reference operator[]( difference_type sz ) const$/;"	f	class:boost::sub_range	access:public	signature:( difference_type sz ) const
boost::sub_range::operator []	/usr/include/boost/range/sub_range.hpp	/^        reference operator[]( difference_type sz )$/;"	f	class:boost::sub_range	access:public	signature:( difference_type sz )
boost::sub_range::reference	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base::reference                            reference;$/;"	t	class:boost::sub_range	access:public
boost::sub_range::size	/usr/include/boost/range/sub_range.hpp	/^        difference_type size() const     { return base::size();  }   $/;"	f	class:boost::sub_range	access:public	signature:() const
boost::sub_range::size_type	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_size<ForwardRange>::type             size_type;$/;"	t	class:boost::sub_range	access:public
boost::sub_range::sub_range	/usr/include/boost/range/sub_range.hpp	/^        sub_range( const ForwardRange2& r ) : $/;"	f	class:boost::sub_range	access:public	signature:( const ForwardRange2& r )
boost::sub_range::sub_range	/usr/include/boost/range/sub_range.hpp	/^        sub_range( const sub_range& r ) $/;"	f	class:boost::sub_range	access:public	signature:( const sub_range& r )
boost::sub_range::sub_range	/usr/include/boost/range/sub_range.hpp	/^        sub_range( ForwardRange2& r ) : $/;"	f	class:boost::sub_range	access:public	signature:( ForwardRange2& r )
boost::sub_range::sub_range	/usr/include/boost/range/sub_range.hpp	/^        sub_range( Iter first, Iter last ) :$/;"	f	class:boost::sub_range	access:public	signature:( Iter first, Iter last )
boost::sub_range::sub_range	/usr/include/boost/range/sub_range.hpp	/^        sub_range() : base() $/;"	f	class:boost::sub_range	access:public	signature:()
boost::sub_range::value_type	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_value<ForwardRange>::type            value_type;$/;"	t	class:boost::sub_range	access:public
BOOST_OLD_IOSTREAMS	/usr/include/boost/range/iterator_range.hpp	27;"	d
BOOST_OLD_IOSTREAMS	/usr/include/boost/range/iterator_range.hpp	652;"	d
BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/config.hpp	45;"	d
BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/config.hpp	48;"	d
BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/begin.hpp	/^            static T* fun( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:()
BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/detail_str.hpp	/^            static T* fun( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:()
BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/end.hpp	/^            static T* fun( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:()
BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline const T* array_end( const T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	namespace:boost::range_detail	signature:()
BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline std::size_t array_size( const T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	namespace:boost::range_detail	signature:()
BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline std::size_t array_size( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	namespace:boost::range_detail	signature:()
BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline T* array_end( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	namespace:boost::range_detail	signature:()
BOOST_RANGE_ARRAY_REF	/usr/include/boost/range/detail/size.hpp	/^            static std::size_t fun( T BOOST_RANGE_ARRAY_REF()[sz] )$/;"	f	struct:boost::range_detail::range_size_	access:public	signature:()
BOOST_RANGE_AS_ARRAY_HPP	/usr/include/boost/range/as_array.hpp	12;"	d
BOOST_RANGE_AS_LITERAL_HPP	/usr/include/boost/range/as_literal.hpp	12;"	d
BOOST_RANGE_ATL_HAS_OLD_CSIMPLESTRING	/usr/include/boost/range/atl.hpp	40;"	d
BOOST_RANGE_ATL_HAS_OLD_CSIMPLE_XXX	/usr/include/boost/range/atl.hpp	33;"	d
BOOST_RANGE_ATL_HPP	/usr/include/boost/range/atl.hpp	2;"	d
BOOST_RANGE_ATL_NO_COLLECTIONS	/usr/include/boost/range/atl.hpp	26;"	d
BOOST_RANGE_BEGIN_HPP	/usr/include/boost/range/begin.hpp	12;"	d
BOOST_RANGE_CATEGORY_HPP	/usr/include/boost/range/category.hpp	12;"	d
BOOST_RANGE_CONCEPTS_HPP	/usr/include/boost/range/concepts.hpp	12;"	d
BOOST_RANGE_CONFIG_HPP	/usr/include/boost/range/config.hpp	12;"	d
BOOST_RANGE_CONST_ITERATOR_HPP	/usr/include/boost/range/const_iterator.hpp	12;"	d
BOOST_RANGE_CONST_REVERSE_ITERATOR_HPP	/usr/include/boost/range/const_reverse_iterator.hpp	12;"	d
BOOST_RANGE_DEDUCED_TYPENAME	/usr/include/boost/range/config.hpp	27;"	d
BOOST_RANGE_DEDUCED_TYPENAME	/usr/include/boost/range/config.hpp	30;"	d
BOOST_RANGE_DEDUCED_TYPENAME	/usr/include/boost/range/config.hpp	32;"	d
BOOST_RANGE_DETAIL_AS_LITERAL_HPP	/usr/include/boost/range/detail/as_literal.hpp	12;"	d
BOOST_RANGE_DETAIL_BEGIN_HPP	/usr/include/boost/range/detail/begin.hpp	12;"	d
BOOST_RANGE_DETAIL_COMMON_HPP	/usr/include/boost/range/detail/common.hpp	12;"	d
BOOST_RANGE_DETAIL_CONST_ITERATOR_HPP	/usr/include/boost/range/detail/const_iterator.hpp	12;"	d
BOOST_RANGE_DETAIL_DETAIL_STR_HPP	/usr/include/boost/range/detail/detail_str.hpp	12;"	d
BOOST_RANGE_DETAIL_DIFFERENCE_TYPE_HPP	/usr/include/boost/range/detail/difference_type.hpp	12;"	d
BOOST_RANGE_DETAIL_EMPTY_HPP	/usr/include/boost/range/detail/empty.hpp	12;"	d
BOOST_RANGE_DETAIL_END_HPP	/usr/include/boost/range/detail/end.hpp	12;"	d
BOOST_RANGE_DETAIL_IMPLEMENTATION_HELP_HPP	/usr/include/boost/range/detail/implementation_help.hpp	12;"	d
BOOST_RANGE_DETAIL_ITERATOR_HPP	/usr/include/boost/range/detail/iterator.hpp	12;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_namespace_close	/usr/include/boost/range/detail/microsoft.hpp	213;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_namespace_close_op	/usr/include/boost/range/detail/microsoft.hpp	217;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_namespace_expand_op	/usr/include/boost/range/detail/microsoft.hpp	222;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_namespace_open	/usr/include/boost/range/detail/microsoft.hpp	204;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_namespace_open_op	/usr/include/boost/range/detail/microsoft.hpp	208;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE	/usr/include/boost/range/detail/microsoft.hpp	350;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_begin	/usr/include/boost/range/detail/microsoft.hpp	472;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_begin_const	/usr/include/boost/range/detail/microsoft.hpp	482;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_const_iterator	/usr/include/boost/range/detail/microsoft.hpp	453;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_end	/usr/include/boost/range/detail/microsoft.hpp	492;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_end_const	/usr/include/boost/range/detail/microsoft.hpp	502;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_fullname	/usr/include/boost/range/detail/microsoft.hpp	428;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_impl	/usr/include/boost/range/detail/microsoft.hpp	369;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_mutable_iterator	/usr/include/boost/range/detail/microsoft.hpp	445;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_params	/usr/include/boost/range/detail/microsoft.hpp	419;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_params_op	/usr/include/boost/range/detail/microsoft.hpp	423;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_size	/usr/include/boost/range/detail/microsoft.hpp	514;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_size_type	/usr/include/boost/range/detail/microsoft.hpp	461;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_tag	/usr/include/boost/range/detail/microsoft.hpp	434;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_to_param_seq	/usr/include/boost/range/detail/microsoft.hpp	357;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TEMPLATE_to_param_seq_op	/usr/include/boost/range/detail/microsoft.hpp	364;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE	/usr/include/boost/range/detail/microsoft.hpp	227;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE_begin	/usr/include/boost/range/detail/microsoft.hpp	291;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE_begin_const	/usr/include/boost/range/detail/microsoft.hpp	301;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE_const_iterator	/usr/include/boost/range/detail/microsoft.hpp	272;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE_end	/usr/include/boost/range/detail/microsoft.hpp	311;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE_end_const	/usr/include/boost/range/detail/microsoft.hpp	321;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE_fullname	/usr/include/boost/range/detail/microsoft.hpp	248;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE_mutable_iterator	/usr/include/boost/range/detail/microsoft.hpp	264;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE_size	/usr/include/boost/range/detail/microsoft.hpp	333;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE_size_type	/usr/include/boost/range/detail/microsoft.hpp	280;"	d
BOOST_RANGE_DETAIL_MICROSOFT_CUSTOMIZATION_TYPE_tag	/usr/include/boost/range/detail/microsoft.hpp	253;"	d
BOOST_RANGE_DETAIL_MICROSOFT_HPP	/usr/include/boost/range/detail/microsoft.hpp	2;"	d
BOOST_RANGE_DETAIL_MICROSOFT_range_begin	/usr/include/boost/range/detail/microsoft.hpp	26;"	d
BOOST_RANGE_DETAIL_MICROSOFT_range_begin	/usr/include/boost/range/detail/microsoft.hpp	30;"	d
BOOST_RANGE_DETAIL_MICROSOFT_range_end	/usr/include/boost/range/detail/microsoft.hpp	27;"	d
BOOST_RANGE_DETAIL_MICROSOFT_range_end	/usr/include/boost/range/detail/microsoft.hpp	31;"	d
BOOST_RANGE_DETAIL_MICROSOFT_range_mutable_iterator	/usr/include/boost/range/detail/microsoft.hpp	25;"	d
BOOST_RANGE_DETAIL_MICROSOFT_range_mutable_iterator	/usr/include/boost/range/detail/microsoft.hpp	29;"	d
BOOST_RANGE_DETAIL_MICROSOFT_RANGE_VERSION_1	/usr/include/boost/range/detail/microsoft.hpp	21;"	d
BOOST_RANGE_DETAIL_REMOVE_BOUNDS_HPP	/usr/include/boost/range/detail/remove_extent.hpp	13;"	d
BOOST_RANGE_DETAIL_SFINAE_HPP	/usr/include/boost/range/detail/sfinae.hpp	12;"	d
BOOST_RANGE_DETAIL_SIZER_HPP	/usr/include/boost/range/detail/sizer.hpp	12;"	d
BOOST_RANGE_DETAIL_SIZE_HPP	/usr/include/boost/range/detail/size.hpp	13;"	d
BOOST_RANGE_DETAIL_SIZE_TYPE_HPP	/usr/include/boost/range/detail/size_type.hpp	12;"	d
BOOST_RANGE_DETAIL_STR_TYPES_HPP	/usr/include/boost/range/detail/str_types.hpp	12;"	d
BOOST_RANGE_DETAIL_VALUE_TYPE_HPP	/usr/include/boost/range/detail/value_type.hpp	12;"	d
BOOST_RANGE_DETAIL_VC6_END_HPP	/usr/include/boost/range/detail/vc6/end.hpp	12;"	d
BOOST_RANGE_DETAIL_VC6_SIZE_HPP	/usr/include/boost/range/detail/vc6/size.hpp	13;"	d
BOOST_RANGE_DIFFERENCE_TYPE_HPP	/usr/include/boost/range/difference_type.hpp	12;"	d
BOOST_RANGE_DISTANCE_HPP	/usr/include/boost/range/distance.hpp	12;"	d
BOOST_RANGE_EMPTY_HPP	/usr/include/boost/range/empty.hpp	12;"	d
BOOST_RANGE_END_HPP	/usr/include/boost/range/end.hpp	12;"	d
BOOST_RANGE_FUNCTIONS_HPP	/usr/include/boost/range/functions.hpp	12;"	d
BOOST_RANGE_ITERATOR_HPP	/usr/include/boost/range/iterator.hpp	12;"	d
BOOST_RANGE_ITERATOR_RANGE_HPP	/usr/include/boost/range/iterator_range.hpp	12;"	d
BOOST_RANGE_METAFUNCTIONS_HPP	/usr/include/boost/range/metafunctions.hpp	12;"	d
BOOST_RANGE_MFC_CONST_COL_RETURNS_NON_REF	/usr/include/boost/range/mfc.hpp	42;"	d
BOOST_RANGE_MFC_HAS_LEGACY_STRING	/usr/include/boost/range/mfc.hpp	33;"	d
BOOST_RANGE_MFC_HPP	/usr/include/boost/range/mfc.hpp	2;"	d
BOOST_RANGE_MFC_NO_CPAIR	/usr/include/boost/range/mfc.hpp	26;"	d
BOOST_RANGE_MUTABLE_ITERATOR_HPP	/usr/include/boost/range/mutable_iterator.hpp	12;"	d
BOOST_RANGE_NO_ARRAY_SUPPORT	/usr/include/boost/range/config.hpp	41;"	d
BOOST_RANGE_NO_STATIC_ASSERT	/usr/include/boost/range/config.hpp	46;"	d
BOOST_RANGE_POINTER_TYPE_HPP	/usr/include/boost/range/pointer.hpp	12;"	d
BOOST_RANGE_RBEGIN_HPP	/usr/include/boost/range/rbegin.hpp	12;"	d
BOOST_RANGE_REFERENCE_TYPE_HPP	/usr/include/boost/range/reference.hpp	12;"	d
BOOST_RANGE_REND_HPP	/usr/include/boost/range/rend.hpp	12;"	d
BOOST_RANGE_RESULT_ITERATOR_HPP	/usr/include/boost/range/result_iterator.hpp	12;"	d
BOOST_RANGE_REVERSE_ITERATOR_HPP	/usr/include/boost/range/reverse_iterator.hpp	12;"	d
BOOST_RANGE_REVERSE_RESULT_ITERATOR_HPP	/usr/include/boost/range/reverse_result_iterator.hpp	12;"	d
boost_range_silence_warning	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline void boost_range_silence_warning( const T& ) { }$/;"	f	namespace:boost::range_detail	signature:( const T& )
BOOST_RANGE_SIZE_HPP	/usr/include/boost/range/size.hpp	12;"	d
BOOST_RANGE_SIZE_TYPE_HPP	/usr/include/boost/range/size_type.hpp	12;"	d
BOOST_RANGE_STRING_COLLECTION_TRAITS_HPP	/usr/include/boost/range/detail/collection_traits.hpp	23;"	d
BOOST_RANGE_STRING_DETAIL_COLLECTION_TRAITS_HPP	/usr/include/boost/range/detail/collection_traits_detail.hpp	11;"	d
BOOST_RANGE_SUB_RANGE_HPP	/usr/include/boost/range/sub_range.hpp	12;"	d
BOOST_RANGE_VALUE_TYPE_HPP	/usr/include/boost/range/value_type.hpp	12;"	d
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    BOOST_STATIC_CONSTANT($/;"	p	struct:boost::algorithm::detail::array_length_selector::array_length	access:public	signature:( size_type, array_size=TraitsT::array_size )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                BOOST_STATIC_CONSTANT( bool, value=$/;"	p	struct:boost::algorithm::detail::is_pair	access:public	signature:( bool, value= sizeof(is_pair_impl(t))==sizeof(yes_type) )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                BOOST_STATIC_CONSTANT( size_type, array_size = sizeof(T)\/sizeof(BaseT) );$/;"	p	struct:boost::algorithm::detail::array_traits_impl	access:public	signature:( size_type, array_size = sizeof(T)/sizeof(BaseT) )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                BOOST_STATIC_CONSTANT( size_type, array_size = sz );$/;"	p	struct:boost::algorithm::detail::array_traits	access:public	signature:( size_type, array_size = sz )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                BOOST_STATIC_CONSTANT( size_type, array_size = traits_type::array_size );$/;"	p	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( size_type, array_size = traits_type::array_size )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                BOOST_STATIC_CONSTANT( size_type, array_size = traits_type::array_size );$/;"	p	struct:boost::algorithm::detail::array_traits	access:public	signature:( size_type, array_size = traits_type::array_size )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_array_               = boost::is_array<C>::value );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_array_ = boost::is_array<C>::value )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_char_array_          = sizeof( boost::range_detail::is_char_array_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_char_array_ = sizeof( boost::range_detail::is_char_array_impl( ptr ) ) == sizeof( yes_type ) )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_char_ptr_            = sizeof( boost::range_detail::is_char_ptr_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_char_ptr_ = sizeof( boost::range_detail::is_char_ptr_impl( ptr ) ) == sizeof( yes_type ) )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_const_char_ptr_      = sizeof( boost::range_detail::is_const_char_ptr_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_const_char_ptr_ = sizeof( boost::range_detail::is_const_char_ptr_impl( ptr ) ) == sizeof( yes_type ) )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_const_wchar_t_ptr_   = sizeof( boost::range_detail::is_const_wchar_t_ptr_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_const_wchar_t_ptr_ = sizeof( boost::range_detail::is_const_wchar_t_ptr_impl( ptr ) ) == sizeof( yes_type ) )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_pair_                = sizeof( boost::range_detail::is_pair_impl( c ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_pair_ = sizeof( boost::range_detail::is_pair_impl( c ) ) == sizeof( yes_type ) )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_string_              = (boost::type_traits::ice_or<is_const_char_ptr_, is_const_wchar_t_ptr_>::value ));$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_string_ = (boost::type_traits::ice_or<is_const_char_ptr_, is_const_wchar_t_ptr_>::value ))
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_wchar_t_array_       = sizeof( boost::range_detail::is_wchar_t_array_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_wchar_t_array_ = sizeof( boost::range_detail::is_wchar_t_array_impl( ptr ) ) == sizeof( yes_type ) )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/common.hpp	/^            BOOST_STATIC_CONSTANT( bool, is_wchar_t_ptr_         = sizeof( boost::range_detail::is_wchar_t_ptr_impl( ptr ) ) == sizeof( yes_type ) );$/;"	p	struct:boost::range_detail::range_helper	access:public	signature:( bool, is_wchar_t_ptr_ = sizeof( boost::range_detail::is_wchar_t_ptr_impl( ptr ) ) == sizeof( yes_type ) )
BOOST_STATIC_CONSTANT	/usr/include/boost/range/detail/remove_extent.hpp	/^            BOOST_STATIC_CONSTANT(std::size_t, size = sizeof(*ar) \/ sizeof((*ar)[0]));$/;"	p	struct:boost::range_detail::remove_extent	access:public	signature:(std::size_t, size = sizeof(*ar) / sizeof((*ar)[0]))
c	/usr/include/boost/range/detail/common.hpp	/^            static C* c;$/;"	m	struct:boost::range_detail::range_helper	access:public
char_array_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<6>::type    char_array_;$/;"	t	namespace:boost::range_detail
char_array_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    wchar_array_t >::type char_array_t;$/;"	t	class:boost::range_detail::range	access:private
char_or_wchar_t_array_tag	/usr/include/boost/range/detail/sfinae.hpp	/^        struct char_or_wchar_t_array_tag {};$/;"	s	namespace:boost::range_detail
char_ptr_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<8>::type    char_ptr_;$/;"	t	namespace:boost::range_detail
char_ptr_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    const_char_ptr_t >::type char_ptr_t;$/;"	t	class:boost::range_detail::range	access:private
char_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef ::std::char_traits<char_type> char_traits;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
char_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    ::boost::remove_cv<value_type>::type char_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:private
char_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    ::boost::remove_cv<value_type>::type char_type;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
ci	/usr/include/boost/range/concepts.hpp	/^        range_const_iterator ci;$/;"	m	struct:boost::SinglePassRangeConcept	access:public
citer_t	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X const, val_t const *, val_t const *> citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
citer_t	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X const, val_t const> citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
citer_t	/usr/include/boost/range/atl.hpp	/^            typedef val_t const *citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
citer_t	/usr/include/boost/range/mfc.hpp	/^            typedef typename range_const_iterator<BaseClass>::type citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
collection_traits	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct collection_traits$/;"	s	namespace:boost::algorithm
compatible_mutable_iterator	/usr/include/boost/range/detail/microsoft.hpp	/^    struct compatible_mutable_iterator : $/;"	s	namespace:boost::range_detail_microsoft	inherits:BOOST_RANGE_DETAIL_MICROSOFT_range_mutable_iterator
constraints	/usr/include/boost/range/concepts.hpp	/^        void constraints()$/;"	f	struct:boost::BidirectionalRangeConcept	access:public	signature:()
constraints	/usr/include/boost/range/concepts.hpp	/^        void constraints()$/;"	f	struct:boost::ForwardRangeConcept	access:public	signature:()
constraints	/usr/include/boost/range/concepts.hpp	/^        void constraints()$/;"	f	struct:boost::RandomAccessRangeConcept	access:public	signature:()
constraints	/usr/include/boost/range/concepts.hpp	/^        void constraints()$/;"	f	struct:boost::SinglePassRangeConcept	access:public	signature:()
const_array_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<5>::type    const_array_;$/;"	t	namespace:boost::range_detail
const_begin	/usr/include/boost/range/begin.hpp	/^    const_begin( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
const_char_ptr_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<9>::type    const_char_ptr_;$/;"	t	namespace:boost::range_detail
const_char_ptr_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    string_t >::type const_char_ptr_t;$/;"	t	class:boost::range_detail::range	access:private
const_constraints	/usr/include/boost/range/concepts.hpp	/^        void const_constraints(const T& a)$/;"	f	struct:boost::SinglePassRangeConcept	access:public	signature:(const T& a)
const_end	/usr/include/boost/range/end.hpp	/^    const_end( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef indirect_iterator<citer_t> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X const, val_t const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef mutable_iterator const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef OLECHAR const *const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef typename X::PCXSTR const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef val_t const *const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/atl.hpp	/^            typedef zip_iterator< tuple<k_citer_t, v_citer_t> > const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::const_iterator const_iterator;$/;"	t	struct:boost::algorithm::collection_traits	access:public
const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::const_iterator const_iterator;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::const_iterator const_iterator;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME ContainerT::const_iterator const_iterator;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef const BaseT* const_iterator;$/;"	t	struct:boost::algorithm::detail::array_traits_impl	access:public
const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef const T* const_iterator;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef const value_type* const_iterator;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
const_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef element_type const_iterator;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
const_iterator	/usr/include/boost/range/iterator_range.hpp	/^            typedef IteratorT const_iterator;$/;"	t	class:boost::iterator_range	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, ::CObject const * const, ::CObject const * const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, ::CObject const *> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, val_t const * const, val_t const * const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, val_t const, val_t const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, val_t const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, void const * const, void const * const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X const, void const *> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_cpair_map_iterator<X const, pair_t const> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_ptr_array_iterator<X const, CObject const *> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_ptr_array_iterator<X const, void const *> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mutable_iterator const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef TCHAR const *const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef transform_iterator<fun<X const>, citer_t> const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef val_t const *const_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
const_iterator	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_iterator<const ForwardRange>::type   const_iterator;$/;"	t	class:boost::sub_range	access:public
const_iterator_of	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct const_iterator_of$/;"	s	namespace:boost::algorithm
const_iterator_of	/usr/include/boost/range/detail/microsoft.hpp	/^    struct const_iterator_of$/;"	s	namespace:boost::range_detail_microsoft
const_range_tag	/usr/include/boost/range/iterator_range.hpp	/^        struct const_range_tag { };$/;"	s	namespace:boost::iterator_range_detail
const_rbegin	/usr/include/boost/range/rbegin.hpp	/^const_rbegin( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
const_reference	/usr/include/boost/range/sub_range.hpp	/^                                 reference >::type const_reference;$/;"	t	class:boost::sub_range	access:public
const_rend	/usr/include/boost/range/rend.hpp	/^const_rend( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
const_std_pair_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<3>::type    const_std_pair_;$/;"	t	namespace:boost::range_detail
const_wchar_ptr_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    char_ptr_t >::type const_wchar_ptr_t;$/;"	t	class:boost::range_detail::range	access:private
const_wchar_t_ptr_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<11>::type   const_wchar_t_ptr_;$/;"	t	namespace:boost::range_detail
container_helper_type	/usr/include/boost/range/detail/collection_traits.hpp	/^                >::type container_helper_type;$/;"	t	struct:boost::algorithm::collection_traits	access:private
copy_range	/usr/include/boost/range/iterator_range.hpp	/^        inline SeqT copy_range( const Range& r )$/;"	f	namespace:boost	signature:( const Range& r )
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CAtlArray<E, ETraits> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:atl_array_functions
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CAtlList<E, ETraits> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CAtlMap<K, V, KTraits, VTraits> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:customization
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CAutoPtrArray<E> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:atl_array_functions
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CAutoPtrList<E> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:indirected_list_functions
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CComBSTR >$/;"	s	namespace:boost::range_detail_microsoft
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CHeapPtrList<E, Allocator> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:indirected_list_functions
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CInterfaceArray<I, piid> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:atl_array_functions
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CInterfaceList<I, piid> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CSimpleArray<T, TEqual> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CSimpleMap<TKey, TVal, TEqual> >$/;"	s	namespace:boost::range_detail_microsoft
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CSimpleValArray<T> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< ATL::CStaticString<BaseType, t_nSize> >$/;"	s	namespace:boost::range_detail_microsoft
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< atl_rb_tree_tag > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:indirected_list_functions
customization	/usr/include/boost/range/atl.hpp	/^    struct customization< atl_string_tag >$/;"	s	namespace:boost::range_detail_microsoft
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CArray<Type, ArgType> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CByteArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CDWordArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CList<Type, ArgType> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMap<Key, ArgKey, Mapped, ArgMapped> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_cpair_map_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapPtrToPtr > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapPtrToWord > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapStringToOb > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapStringToPtr > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapStringToString > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_cpair_map_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapWordToOb > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CMapWordToPtr > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CObArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_ptr_array_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CObList > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CPtrArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_ptr_array_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CPtrList > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CString >$/;"	s	namespace:boost::range_detail_microsoft
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CStringArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CStringList > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CTypedPtrArray<BaseClass, PtrType> >$/;"	s	namespace:boost::range_detail_microsoft
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CTypedPtrList<BaseClass, PtrType> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CTypedPtrMap<BaseClass, KeyPtrType, MappedPtrType> > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CUIntArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
customization	/usr/include/boost/range/mfc.hpp	/^    struct customization< ::CWordArray > :$/;"	s	namespace:boost::range_detail_microsoft	inherits:array_functions
customization_of	/usr/include/boost/range/detail/microsoft.hpp	/^    struct customization_of$/;"	s	namespace:boost::range_detail_microsoft
customization_tag_of	/usr/include/boost/range/detail/microsoft.hpp	/^    struct customization_tag_of$/;"	s	namespace:boost::range_detail_microsoft
cust_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename customization_of<bare_t>::type cust_t;$/;"	t	struct:boost::range_detail_microsoft::const_iterator_of	access:public
cust_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename customization_of<bare_t>::type cust_t;$/;"	t	struct:boost::range_detail_microsoft::mutable_iterator_of	access:public
c_type	/usr/include/boost/range/detail/const_iterator.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_detail::range<C>::type c_type;$/;"	t	class:boost::range_const_iterator	access:private
c_type	/usr/include/boost/range/detail/difference_type.hpp	/^        typedef BOOST_RANGE_DEDUCED_TYPENAME range_detail::range<C>::type c_type;$/;"	t	class:boost::range_difference	access:private
c_type	/usr/include/boost/range/detail/iterator.hpp	/^        typedef BOOST_RANGE_DEDUCED_TYPENAME range_detail::range<C>::type c_type;$/;"	t	class:boost::range_mutable_iterator	access:private
c_type	/usr/include/boost/range/detail/size_type.hpp	/^        typedef typename range_detail::range<C>::type c_type;$/;"	t	class:boost::range_size	access:private
c_type	/usr/include/boost/range/detail/value_type.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_detail::range<C>::type c_type;$/;"	t	class:boost::range_value	access:private
decrement	/usr/include/boost/range/detail/microsoft.hpp	/^        void decrement()$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:private	signature:()
default_container_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct default_container_traits$/;"	s	namespace:boost::algorithm::detail
default_container_traits_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct default_container_traits_selector$/;"	s	namespace:boost::algorithm::detail
dereference	/usr/include/boost/range/detail/microsoft.hpp	/^        ref_t dereference() const$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:private	signature:() const
dereference	/usr/include/boost/range/mfc.hpp	/^        ref_t dereference() const$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private	signature:() const
dereference	/usr/include/boost/range/mfc.hpp	/^        ref_t dereference() const$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private	signature:() const
dereference	/usr/include/boost/range/mfc.hpp	/^        ref_t dereference() const$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private	signature:() const
detail	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^        namespace detail {$/;"	n	namespace:boost::algorithm
detail	/usr/include/boost/range/size_type.hpp	/^    namespace detail$/;"	n	namespace:boost
difference_type	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::difference_type difference_type;$/;"	t	struct:boost::algorithm::collection_traits	access:public
difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    iterator_traits<element_type>::difference_type difference_type;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::difference_type difference_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::difference_type difference_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME ContainerT::difference_type difference_type;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::algorithm::detail::array_traits_impl	access:public
difference_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::ptrdiff_t difference_type;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
difference_type	/usr/include/boost/range/iterator_range.hpp	/^                iterator_difference<IteratorT>::type difference_type;$/;"	t	class:boost::iterator_range	access:public
difference_type	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_difference<ForwardRange>::type       difference_type;$/;"	t	class:boost::sub_range	access:public
difference_type_of	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct difference_type_of$/;"	s	namespace:boost::algorithm
distance	/usr/include/boost/range/distance.hpp	/^    distance( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
element_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME PairT::first_type element_type;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
empty	/usr/include/boost/range/detail/collection_traits.hpp	/^        inline bool empty( const C& c )$/;"	f	namespace:boost::algorithm	signature:( const C& c )
empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    static bool empty( const A& )$/;"	f	struct:boost::algorithm::detail::array_length_selector::array_length	access:public	signature:( const A& )
empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    static bool empty( const A& a )$/;"	f	struct:boost::algorithm::detail::array_length_selector::array_length	access:public	signature:( const A& a )
empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static bool empty( const A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( const A& a )
empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static bool empty( const C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( const C& c )
empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static bool empty( const P& p )$/;"	f	struct:boost::algorithm::detail::pair_container_traits	access:public	signature:( const P& p )
empty	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static bool empty( const P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( const P& p )
empty	/usr/include/boost/range/detail/empty.hpp	/^    empty( const C& c )$/;"	f	namespace:boost	signature:( const C& c )
empty	/usr/include/boost/range/empty.hpp	/^    inline bool empty( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
empty	/usr/include/boost/range/iterator_range.hpp	/^            bool empty() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
end	/usr/include/boost/range/atl.hpp	/^        Iterator end(X const& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X const& x)
end	/usr/include/boost/range/atl.hpp	/^        Iterator end(X& x) \/\/ redefine$/;"	f	struct:boost::range_detail_microsoft::atl_array_functions	access:public	signature:(X& x)
end	/usr/include/boost/range/atl.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
end	/usr/include/boost/range/atl.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::indirected_list_functions	access:public	signature:(X& x)
end	/usr/include/boost/range/detail/collection_traits.hpp	/^        end( C& c )$/;"	f	namespace:boost::algorithm	signature:( C& c )
end	/usr/include/boost/range/detail/collection_traits.hpp	/^        end( const C& c )$/;"	f	namespace:boost::algorithm	signature:( const C& c )
end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator end( const A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( const A& a )
end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator end( const C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( const C& c )
end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator end( const P& p )$/;"	f	struct:boost::algorithm::detail::pair_container_traits	access:public	signature:( const P& p )
end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static const_iterator end( const P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( const P& p )
end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator end( A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( A& a )
end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator end( C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( C& c )
end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static iterator end( P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( P& p )
end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator end( A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( A& a )
end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator end( C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( C& c )
end	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static result_iterator end( P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( P& p )
end	/usr/include/boost/range/detail/end.hpp	/^    end( C& c )$/;"	f	namespace:boost	signature:( C& c )
end	/usr/include/boost/range/detail/microsoft.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::array_functions	access:public	signature:(X& x)
end	/usr/include/boost/range/detail/microsoft.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::list_functions	access:public	signature:(X& x)
end	/usr/include/boost/range/detail/vc6/end.hpp	/^    end( C& c )$/;"	f	namespace:boost	signature:( C& c )
end	/usr/include/boost/range/end.hpp	/^inline BOOST_DEDUCED_TYPENAME range_iterator<const T>::type end( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
end	/usr/include/boost/range/end.hpp	/^inline BOOST_DEDUCED_TYPENAME range_iterator<T>::type end( T& r )$/;"	f	namespace:boost	signature:( T& r )
end	/usr/include/boost/range/iterator_range.hpp	/^            IteratorT end() const $/;"	f	class:boost::iterator_range	access:public	signature:() const
end	/usr/include/boost/range/mfc.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::customization	access:public	signature:(X& x)
end	/usr/include/boost/range/mfc.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_functions	access:public	signature:(X& x)
end	/usr/include/boost/range/mfc.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_map_functions	access:public	signature:(X& x)
end	/usr/include/boost/range/mfc.hpp	/^        Iterator end(X& x)$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_functions	access:public	signature:(X& x)
end	/usr/include/boost/range/sub_range.hpp	/^        const_iterator  end() const      { return base::end();   }$/;"	f	class:boost::sub_range	access:public	signature:() const
end	/usr/include/boost/range/sub_range.hpp	/^        iterator        end()            { return base::end();   }$/;"	f	class:boost::sub_range	access:public	signature:()
end_of	/usr/include/boost/range/detail/microsoft.hpp	/^    end_of(T const& x)$/;"	f	namespace:boost::range_detail_microsoft	signature:(T const& x)
end_of	/usr/include/boost/range/detail/microsoft.hpp	/^    end_of(T& x)$/;"	f	namespace:boost::range_detail_microsoft	signature:(T& x)
equal	/usr/include/boost/range/detail/microsoft.hpp	/^        bool equal(self_t const& other) const$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:private	signature:(self_t const& other) const
equal	/usr/include/boost/range/iterator_range.hpp	/^            bool equal( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
equal	/usr/include/boost/range/iterator_range.hpp	/^        inline bool equal( const Left& l, const Right& r )$/;"	f	namespace:boost::iterator_range_detail	signature:( const Left& l, const Right& r )
equal	/usr/include/boost/range/mfc.hpp	/^        bool equal(self_t const& other) const$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private	signature:(self_t const& other) const
equal	/usr/include/boost/range/mfc.hpp	/^        bool equal(self_t const& other) const$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private	signature:(self_t const& other) const
equal	/usr/include/boost/range/mfc.hpp	/^        bool equal(self_t const& other) const$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private	signature:(self_t const& other) const
ForwardRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct ForwardRangeConcept $/;"	s	namespace:boost
front	/usr/include/boost/range/iterator_range.hpp	/^           reference front() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
front	/usr/include/boost/range/sub_range.hpp	/^        const_reference front() const$/;"	f	class:boost::sub_range	access:public	signature:() const
front	/usr/include/boost/range/sub_range.hpp	/^        reference front()$/;"	f	class:boost::sub_range	access:public	signature:()
fun	/usr/include/boost/range/detail/begin.hpp	/^            static BOOST_RANGE_DEDUCED_TYPENAME range_iterator<C>::type fun( C& c )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( C& c )
fun	/usr/include/boost/range/detail/begin.hpp	/^            static BOOST_RANGE_DEDUCED_TYPENAME range_iterator<P>::type fun( const P& p )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( const P& p )
fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static char* fun( char* s )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( char* s )
fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static char* fun( char* s )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( char* s )
fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static const char* fun( const char* s )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( const char* s )
fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static const char* fun( const char* s )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( const char* s )
fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static const wchar_t* fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( const wchar_t* s )
fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static const wchar_t* fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( const wchar_t* s )
fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static wchar_t* fun( wchar_t* s )$/;"	f	struct:boost::range_detail::range_begin	access:public	signature:( wchar_t* s )
fun	/usr/include/boost/range/detail/detail_str.hpp	/^            static wchar_t* fun( wchar_t* s )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( wchar_t* s )
fun	/usr/include/boost/range/detail/empty.hpp	/^            static bool fun( C& c )$/;"	f	struct:boost::range_detail::range_empty	access:public	signature:( C& c )
fun	/usr/include/boost/range/detail/empty.hpp	/^            static bool fun( const char* s )$/;"	f	struct:boost::range_detail::range_empty	access:public	signature:( const char* s )
fun	/usr/include/boost/range/detail/empty.hpp	/^            static bool fun( const P& p )$/;"	f	struct:boost::range_detail::range_empty	access:public	signature:( const P& p )
fun	/usr/include/boost/range/detail/empty.hpp	/^            static bool fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_empty	access:public	signature:( const wchar_t* s )
fun	/usr/include/boost/range/detail/empty.hpp	/^            static bool fun( T BOOST_ARRAY_REF[sz] )$/;"	f	struct:boost::range_detail::range_empty	access:public	signature:( T BOOST_ARRAY_REF[sz] )
fun	/usr/include/boost/range/detail/end.hpp	/^            fun( C& c )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( C& c )
fun	/usr/include/boost/range/detail/end.hpp	/^            fun( const P& p )$/;"	f	struct:boost::range_detail::range_end	access:public	signature:( const P& p )
fun	/usr/include/boost/range/detail/size.hpp	/^            fun( const P& p )$/;"	f	struct:boost::range_detail::range_size_	access:public	signature:( const P& p )
fun	/usr/include/boost/range/detail/size.hpp	/^            static BOOST_RANGE_DEDUCED_TYPENAME C::size_type fun( const C& c )$/;"	f	struct:boost::range_detail::range_size_	access:public	signature:( const C& c )
fun	/usr/include/boost/range/detail/size.hpp	/^            static std::size_t fun( const char* s )$/;"	f	struct:boost::range_detail::range_size_	access:public	signature:( const char* s )
fun	/usr/include/boost/range/detail/size.hpp	/^            static std::size_t fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_size_	access:public	signature:( const wchar_t* s )
fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                fun( C& c )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( C& c )
fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                fun( const P& p )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( const P& p )
fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                fun(T& t)$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:(T& t)
fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                static char* fun( char* s )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( char* s )
fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                static const char* fun( const char* s )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( const char* s )
fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                static const wchar_t* fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( const wchar_t* s )
fun	/usr/include/boost/range/detail/vc6/end.hpp	/^                static wchar_t* fun( wchar_t* s )$/;"	f	struct:boost::range_detail::range_end::inner	access:public	signature:( wchar_t* s )
fun	/usr/include/boost/range/detail/vc6/size.hpp	/^                fun( const P& p )$/;"	f	struct:boost::range_detail::range_size_::inner	access:public	signature:( const P& p )
fun	/usr/include/boost/range/detail/vc6/size.hpp	/^                static BOOST_RANGE_DEDUCED_TYPENAME C::size_type fun( const C& c )$/;"	f	struct:boost::range_detail::range_size_::inner	access:public	signature:( const C& c )
fun	/usr/include/boost/range/detail/vc6/size.hpp	/^                static std::size_t fun( const char* s )$/;"	f	struct:boost::range_detail::range_size_::inner	access:public	signature:( const char* s )
fun	/usr/include/boost/range/detail/vc6/size.hpp	/^                static std::size_t fun( const wchar_t* s )$/;"	f	struct:boost::range_detail::range_size_::inner	access:public	signature:( const wchar_t* s )
fun	/usr/include/boost/range/detail/vc6/size.hpp	/^                static std::size_t fun(T& t)$/;"	f	struct:boost::range_detail::range_size_::inner	access:public	signature:(T& t)
fun	/usr/include/boost/range/mfc.hpp	/^        struct fun$/;"	s	struct:boost::range_detail_microsoft::customization	access:public
function_type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef container_helper_type function_type;        $/;"	t	struct:boost::algorithm::collection_traits	access:public
i	/usr/include/boost/range/concepts.hpp	/^        range_iterator i;$/;"	m	struct:boost::SinglePassRangeConcept	access:public
impl	/usr/include/boost/range/iterator_range.hpp	/^            typedef iterator_range_detail::iterator_range_impl<IteratorT> impl;$/;"	t	class:boost::iterator_range	access:protected
impl	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base::impl impl;$/;"	t	class:boost::sub_range	access:private
increment	/usr/include/boost/range/detail/microsoft.hpp	/^        void increment()$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:private	signature:()
increment	/usr/include/boost/range/mfc.hpp	/^        void increment()$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private	signature:()
increment	/usr/include/boost/range/mfc.hpp	/^        void increment()$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private	signature:()
indirected_list_functions	/usr/include/boost/range/atl.hpp	/^    struct indirected_list_functions$/;"	s	namespace:boost::range_detail_microsoft
inner	/usr/include/boost/range/detail/vc6/end.hpp	/^            struct inner {$/;"	s	struct:boost::range_detail::range_end	access:public
inner	/usr/include/boost/range/detail/vc6/size.hpp	/^            struct inner {$/;"	s	struct:boost::range_detail::range_size_	access:public
is_char_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_char_array_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
is_char_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_char_array_impl( char BOOST_RANGE_ARRAY_REF()[sz] );$/;"	p	namespace:boost::range_detail	signature:( char BOOST_RANGE_ARRAY_REF()[sz] )
is_char_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_char_array_impl( const char BOOST_RANGE_ARRAY_REF()[sz] );$/;"	p	namespace:boost::range_detail	signature:( const char BOOST_RANGE_ARRAY_REF()[sz] )
is_char_ptr	/usr/include/boost/range/as_literal.hpp	/^        inline bool is_char_ptr( char* )$/;"	f	namespace:boost::range_detail	signature:( char* )
is_char_ptr	/usr/include/boost/range/as_literal.hpp	/^        inline bool is_char_ptr( const char* )$/;"	f	namespace:boost::range_detail	signature:( const char* )
is_char_ptr	/usr/include/boost/range/as_literal.hpp	/^        inline bool is_char_ptr( const wchar_t* )$/;"	f	namespace:boost::range_detail	signature:( const wchar_t* )
is_char_ptr	/usr/include/boost/range/as_literal.hpp	/^        inline bool is_char_ptr( wchar_t* )$/;"	f	namespace:boost::range_detail	signature:( wchar_t* )
is_char_ptr	/usr/include/boost/range/as_literal.hpp	/^        inline long is_char_ptr( T \/* r *\/ )$/;"	f	namespace:boost::range_detail	signature:( T )
is_char_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_char_ptr_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
is_char_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_char_ptr_impl( char* const );$/;"	p	namespace:boost::range_detail	signature:( char* const )
is_const_char_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_const_char_ptr_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
is_const_char_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_const_char_ptr_impl( const char* const );$/;"	p	namespace:boost::range_detail	signature:( const char* const )
is_const_wchar_t_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_const_wchar_t_ptr_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
is_const_wchar_t_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_const_wchar_t_ptr_impl( const wchar_t* const );$/;"	p	namespace:boost::range_detail	signature:( const wchar_t* const )
is_pair	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            template<typename T> struct is_pair$/;"	s	namespace:boost::algorithm::detail
is_pair_impl	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            no_type is_pair_impl( ... );$/;"	p	namespace:boost::algorithm::detail	signature:( .... )
is_pair_impl	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            yes_type is_pair_impl( const std::pair<T,U>* );$/;"	p	namespace:boost::algorithm::detail	signature:( const std::pair<T,U>* )
is_pair_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_pair_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
is_pair_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_pair_impl( const std::pair<Iterator,Iterator>* );$/;"	p	namespace:boost::range_detail	signature:( const std::pair<Iterator,Iterator>* )
is_singular	/usr/include/boost/range/iterator_range.hpp	/^            bool is_singular() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
is_string_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_string_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
is_string_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_string_impl( const wchar_t* const );$/;"	p	namespace:boost::range_detail	signature:( const wchar_t* const )
is_wchar_t_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_wchar_t_array_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
is_wchar_t_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_wchar_t_array_impl( const wchar_t BOOST_RANGE_ARRAY_REF()[sz] );$/;"	p	namespace:boost::range_detail	signature:( const wchar_t BOOST_RANGE_ARRAY_REF()[sz] )
is_wchar_t_array_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_wchar_t_array_impl( wchar_t BOOST_RANGE_ARRAY_REF()[sz] );$/;"	p	namespace:boost::range_detail	signature:( wchar_t BOOST_RANGE_ARRAY_REF()[sz] )
is_wchar_t_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        no_type  is_wchar_t_ptr_impl( ... );$/;"	p	namespace:boost::range_detail	signature:( .... )
is_wchar_t_ptr_impl	/usr/include/boost/range/detail/sfinae.hpp	/^        yes_type is_wchar_t_ptr_impl( wchar_t* const );$/;"	p	namespace:boost::range_detail	signature:( wchar_t* const )
iterator	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::iterator iterator;$/;"	t	struct:boost::algorithm::collection_traits	access:public
iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::iterator iterator;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::iterator iterator;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BaseT* iterator;$/;"	t	struct:boost::algorithm::detail::array_traits_impl	access:public
iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME ContainerT::iterator iterator;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef element_type iterator;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef T* iterator;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef value_type* iterator;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
iterator	/usr/include/boost/range/iterator_range.hpp	/^            typedef IteratorT iterator;$/;"	t	class:boost::iterator_range	access:public
iterator	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_iterator<ForwardRange>::type         iterator;$/;"	t	class:boost::sub_range	access:public
iterator_of	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct iterator_of$/;"	s	namespace:boost::algorithm
iterator_range	/usr/include/boost/range/iterator_range.hpp	/^            iterator_range( const Range& r ) : $/;"	f	class:boost::iterator_range	access:public	signature:( const Range& r )
iterator_range	/usr/include/boost/range/iterator_range.hpp	/^            iterator_range( const Range& r, iterator_range_detail::const_range_tag ) : $/;"	f	class:boost::iterator_range	access:public	signature:( const Range& r, iterator_range_detail::const_range_tag )
iterator_range	/usr/include/boost/range/iterator_range.hpp	/^            iterator_range( Iterator Begin, Iterator End ) : $/;"	f	class:boost::iterator_range	access:public	signature:( Iterator Begin, Iterator End )
iterator_range	/usr/include/boost/range/iterator_range.hpp	/^            iterator_range( Range& r ) : $/;"	f	class:boost::iterator_range	access:public	signature:( Range& r )
iterator_range	/usr/include/boost/range/iterator_range.hpp	/^            iterator_range( Range& r, iterator_range_detail::range_tag ) : $/;"	f	class:boost::iterator_range	access:public	signature:( Range& r, iterator_range_detail::range_tag )
iterator_range	/usr/include/boost/range/iterator_range.hpp	/^            iterator_range() : m_Begin( iterator() ), m_End( iterator() )$/;"	f	class:boost::iterator_range	access:public	signature:()
iterator_range	/usr/include/boost/range/iterator_range.hpp	/^        class iterator_range$/;"	c	namespace:boost
iterator_range_	/usr/include/boost/range/iterator_range.hpp	/^            typedef iterator_range iterator_range_;$/;"	t	class:boost::iterator_range	access:protected
iterator_range_detail	/usr/include/boost/range/iterator_range.hpp	/^        namespace iterator_range_detail$/;"	n	namespace:boost
iterator_range_detail	/usr/include/boost/range/iterator_range.hpp	/^    namespace iterator_range_detail$/;"	n	namespace:boost
iterator_range_impl	/usr/include/boost/range/iterator_range.hpp	/^        struct iterator_range_impl {$/;"	s	namespace:boost::iterator_range_detail
iterator_t	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_iterator<ForwardRange>::type iterator_t;$/;"	t	class:boost::sub_range	access:private
key_t	/usr/include/boost/range/mfc.hpp	/^            typedef ::CString key_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
key_t	/usr/include/boost/range/mfc.hpp	/^            typedef void *key_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
key_t	/usr/include/boost/range/mfc.hpp	/^            typedef WORD key_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
k_citer_t	/usr/include/boost/range/atl.hpp	/^            typedef k_val_t const *k_citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
k_miter_t	/usr/include/boost/range/atl.hpp	/^            typedef k_val_t *k_miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
k_val_t	/usr/include/boost/range/atl.hpp	/^            typedef TKey k_val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
length	/usr/include/boost/range/as_literal.hpp	/^        inline std::size_t length( const char* s )$/;"	f	namespace:boost::range_detail	signature:( const char* s )
length	/usr/include/boost/range/as_literal.hpp	/^        inline std::size_t length( const wchar_t* s )$/;"	f	namespace:boost::range_detail	signature:( const wchar_t* s )
length	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    static size_type length( const A& )$/;"	f	struct:boost::algorithm::detail::array_length_selector::array_length	access:public	signature:( const A& )
length	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    static size_type length( const A& a )$/;"	f	struct:boost::algorithm::detail::array_length_selector::array_length	access:public	signature:( const A& a )
less_than	/usr/include/boost/range/iterator_range.hpp	/^        inline bool less_than( const Left& l, const Right& r )$/;"	f	namespace:boost::iterator_range_detail	signature:( const Left& l, const Right& r )
list_functions	/usr/include/boost/range/detail/microsoft.hpp	/^    struct list_functions$/;"	s	namespace:boost::range_detail_microsoft
list_iterator	/usr/include/boost/range/detail/microsoft.hpp	/^        explicit list_iterator()$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:public	signature:()
list_iterator	/usr/include/boost/range/detail/microsoft.hpp	/^        explicit list_iterator(ListT& lst, POSITION pos) :$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:public	signature:(ListT& lst, POSITION pos)
list_iterator	/usr/include/boost/range/detail/microsoft.hpp	/^        list_iterator(list_iterator<ListT_, Value_, Reference_, Traversal_> const& other) :$/;"	f	struct:boost::range_detail_microsoft::list_iterator	access:public	signature:(list_iterator<ListT_, Value_, Reference_, Traversal_> const& other)
list_iterator	/usr/include/boost/range/detail/microsoft.hpp	/^    struct list_iterator :$/;"	s	namespace:boost::range_detail_microsoft	inherits:list_iterator_super::type
list_iterator_super	/usr/include/boost/range/detail/microsoft.hpp	/^    struct list_iterator_super$/;"	s	namespace:boost::range_detail_microsoft
make_iterator_range	/usr/include/boost/range/iterator_range.hpp	/^        make_iterator_range( const ForwardRange& r ) $/;"	f	namespace:boost	signature:( const ForwardRange& r )
make_iterator_range	/usr/include/boost/range/iterator_range.hpp	/^        make_iterator_range( ForwardRange& r ) $/;"	f	namespace:boost	signature:( ForwardRange& r )
make_iterator_range	/usr/include/boost/range/iterator_range.hpp	/^        make_iterator_range( IteratorT Begin, IteratorT End ) $/;"	f	namespace:boost	signature:( IteratorT Begin, IteratorT End )
make_iterator_range	/usr/include/boost/range/iterator_range.hpp	/^        make_iterator_range( Range& r ) $/;"	f	namespace:boost	signature:( Range& r )
make_iterator_range	/usr/include/boost/range/iterator_range.hpp	/^        make_iterator_range( Range& r, $/;"	f	namespace:boost	signature:( Range& r, BOOST_DEDUCED_TYPENAME range_difference<Range>::type advance_begin, BOOST_DEDUCED_TYPENAME range_difference<Range>::type advance_end )
make_range	/usr/include/boost/range/as_literal.hpp	/^        make_range( T& r, long )$/;"	f	namespace:boost::range_detail	signature:( T& r, long )
make_range	/usr/include/boost/range/as_literal.hpp	/^        make_range( T* const r, bool )$/;"	f	namespace:boost::range_detail	signature:( T* const r, bool )
make_range_impl	/usr/include/boost/range/iterator_range.hpp	/^            make_range_impl( Range& r, $/;"	f	namespace:boost::iterator_range_detail	signature:( Range& r, BOOST_DEDUCED_TYPENAME range_difference<Range>::type advance_begin, BOOST_DEDUCED_TYPENAME range_difference<Range>::type advance_end )
mapped_t	/usr/include/boost/range/mfc.hpp	/^            typedef ::CObject *mapped_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mapped_t	/usr/include/boost/range/mfc.hpp	/^            typedef void *mapped_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mapped_t	/usr/include/boost/range/mfc.hpp	/^            typedef WORD mapped_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
meta	/usr/include/boost/range/atl.hpp	/^        struct meta$/;"	s	struct:boost::range_detail_microsoft::customization	access:public
meta	/usr/include/boost/range/mfc.hpp	/^        struct meta$/;"	s	struct:boost::range_detail_microsoft::customization	access:public
mfc_cpair_map_functions	/usr/include/boost/range/mfc.hpp	/^    struct mfc_cpair_map_functions$/;"	s	namespace:boost::range_detail_microsoft
mfc_cpair_map_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_cpair_map_iterator()$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:public	signature:()
mfc_cpair_map_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_cpair_map_iterator(MapT& map, PairT *pp) :$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:public	signature:(MapT& map, PairT *pp)
mfc_cpair_map_iterator	/usr/include/boost/range/mfc.hpp	/^        mfc_cpair_map_iterator(mfc_cpair_map_iterator<MapT_, PairT_> const& other) :$/;"	f	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:public	signature:(mfc_cpair_map_iterator<MapT_, PairT_> const& other)
mfc_cpair_map_iterator	/usr/include/boost/range/mfc.hpp	/^    struct mfc_cpair_map_iterator :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_pget_map_iterator_super::type
mfc_map_functions	/usr/include/boost/range/mfc.hpp	/^    struct mfc_map_functions$/;"	s	namespace:boost::range_detail_microsoft
mfc_map_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_map_iterator()$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:public	signature:()
mfc_map_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_map_iterator(MapT const& map) :$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:public	signature:(MapT const& map)
mfc_map_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_map_iterator(MapT const& map, POSITION pos) :$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:public	signature:(MapT const& map, POSITION pos)
mfc_map_iterator	/usr/include/boost/range/mfc.hpp	/^        mfc_map_iterator(mfc_map_iterator<MapT_, KeyT_, MappedT_> const& other) :$/;"	f	struct:boost::range_detail_microsoft::mfc_map_iterator	access:public	signature:(mfc_map_iterator<MapT_, KeyT_, MappedT_> const& other)
mfc_map_iterator	/usr/include/boost/range/mfc.hpp	/^    struct mfc_map_iterator :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_map_iterator_super::type
mfc_map_iterator_super	/usr/include/boost/range/mfc.hpp	/^    struct mfc_map_iterator_super$/;"	s	namespace:boost::range_detail_microsoft
mfc_pget_map_iterator_super	/usr/include/boost/range/mfc.hpp	/^    struct mfc_pget_map_iterator_super$/;"	s	namespace:boost::range_detail_microsoft
mfc_ptr_array_functions	/usr/include/boost/range/mfc.hpp	/^    struct mfc_ptr_array_functions$/;"	s	namespace:boost::range_detail_microsoft
mfc_ptr_array_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_ptr_array_iterator()$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:public	signature:()
mfc_ptr_array_iterator	/usr/include/boost/range/mfc.hpp	/^        explicit mfc_ptr_array_iterator(ArrayT& arr, INT_PTR index) :$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:public	signature:(ArrayT& arr, INT_PTR index)
mfc_ptr_array_iterator	/usr/include/boost/range/mfc.hpp	/^        mfc_ptr_array_iterator(mfc_ptr_array_iterator<ArrayT_, PtrType_> const& other) :$/;"	f	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:public	signature:(mfc_ptr_array_iterator<ArrayT_, PtrType_> const& other)
mfc_ptr_array_iterator	/usr/include/boost/range/mfc.hpp	/^    struct mfc_ptr_array_iterator :$/;"	s	namespace:boost::range_detail_microsoft	inherits:mfc_ptr_array_iterator_super::type
mfc_ptr_array_iterator_super	/usr/include/boost/range/mfc.hpp	/^    struct mfc_ptr_array_iterator_super$/;"	s	namespace:boost::range_detail_microsoft
miter_t	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X, val_t *, val_t *> miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
miter_t	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X, val_t> miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
miter_t	/usr/include/boost/range/atl.hpp	/^            typedef val_t *miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
miter_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename range_detail_microsoft::mutable_iterator_of<T>::type miter_t;$/;"	t	struct:boost::range_detail_microsoft::size_type_of	access:public
miter_t	/usr/include/boost/range/mfc.hpp	/^            typedef typename compatible_mutable_iterator<BaseClass>::type miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_	/usr/include/boost/range/detail/microsoft.hpp	/^    struct mutable_ :$/;"	s	namespace:boost::range_detail_microsoft	inherits:disable_if
mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef BaseType const *mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef indirect_iterator<miter_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef list_iterator<X, val_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef OLECHAR *mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef typename X::PXSTR mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef val_t *mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/atl.hpp	/^            typedef zip_iterator< tuple<k_miter_t, v_miter_t> > mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X, ::CObject *> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X, val_t * const, val_t * const> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X, val_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef list_iterator<X, void *> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_cpair_map_iterator<X, pair_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_map_iterator<X, KeyPtrType, MappedPtrType> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_map_iterator<X, key_t, mapped_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_ptr_array_iterator<X, CObject *> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef mfc_ptr_array_iterator<X, void *> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef TCHAR *mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef transform_iterator<fun<X>, miter_t> mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator	/usr/include/boost/range/mfc.hpp	/^            typedef val_t *mutable_iterator;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
mutable_iterator_of	/usr/include/boost/range/detail/microsoft.hpp	/^    struct mutable_iterator_of$/;"	s	namespace:boost::range_detail_microsoft
m_Begin	/usr/include/boost/range/iterator_range.hpp	/^            IteratorT m_Begin;$/;"	m	class:boost::iterator_range	access:private
m_End	/usr/include/boost/range/iterator_range.hpp	/^            IteratorT m_End;$/;"	m	class:boost::iterator_range	access:private
m_key	/usr/include/boost/range/mfc.hpp	/^        KeyT m_key; MappedT m_mapped;$/;"	m	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
m_mapped	/usr/include/boost/range/mfc.hpp	/^        KeyT m_key; MappedT m_mapped;$/;"	m	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
m_parr	/usr/include/boost/range/mfc.hpp	/^        ArrayT *m_parr;$/;"	m	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private
m_plst	/usr/include/boost/range/detail/microsoft.hpp	/^        ListT *m_plst;$/;"	m	struct:boost::range_detail_microsoft::list_iterator	access:private
m_pmap	/usr/include/boost/range/mfc.hpp	/^        MapT  *m_pmap;$/;"	m	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private
m_pmap	/usr/include/boost/range/mfc.hpp	/^        MapT const *m_pmap;$/;"	m	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
m_pos	/usr/include/boost/range/detail/microsoft.hpp	/^        POSITION m_pos;$/;"	m	struct:boost::range_detail_microsoft::list_iterator	access:private
m_pos	/usr/include/boost/range/mfc.hpp	/^        POSITION m_pos, m_posNext;$/;"	m	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
m_posNext	/usr/include/boost/range/mfc.hpp	/^        POSITION m_pos, m_posNext;$/;"	m	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
m_pp	/usr/include/boost/range/mfc.hpp	/^        PairT *m_pp;$/;"	m	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private
operator !=	/usr/include/boost/range/iterator_range.hpp	/^            bool operator!=( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
operator !=	/usr/include/boost/range/iterator_range.hpp	/^        inline bool operator!=( const ForwardRange& l, $/;"	f	namespace:boost	signature:( const ForwardRange& l, const iterator_range<IteratorT>& r )
operator !=	/usr/include/boost/range/iterator_range.hpp	/^        inline bool operator!=( const iterator_range<Iterator1T>& l, $/;"	f	namespace:boost	signature:( const iterator_range<Iterator1T>& l, const iterator_range<Iterator2T>& r )
operator !=	/usr/include/boost/range/iterator_range.hpp	/^        inline bool operator!=( const iterator_range<IteratorT>& l, $/;"	f	namespace:boost	signature:( const iterator_range<IteratorT>& l, const ForwardRange& r )
operator !=	/usr/include/boost/range/sub_range.hpp	/^    inline bool operator!=( const sub_range<ForwardRange>& l,$/;"	f	namespace:boost	signature:( const sub_range<ForwardRange>& l, const sub_range<ForwardRange2>& r )
operator ()	/usr/include/boost/range/iterator_range.hpp	/^           abstract_value_type operator()( difference_type at ) const                              $/;"	f	class:boost::iterator_range	access:public	signature:( difference_type at ) const
operator ()	/usr/include/boost/range/mfc.hpp	/^            result_type operator()(PtrType_ p) const$/;"	f	struct:boost::range_detail_microsoft::customization::fun	access:public	signature:(PtrType_ p) const
operator <	/usr/include/boost/range/iterator_range.hpp	/^           bool operator<( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
operator <	/usr/include/boost/range/iterator_range.hpp	/^        inline bool operator<( const ForwardRange& l, $/;"	f	namespace:boost	signature:( const ForwardRange& l, const iterator_range<IteratorT>& r )
operator <	/usr/include/boost/range/iterator_range.hpp	/^        inline bool operator<( const iterator_range<Iterator1T>& l, $/;"	f	namespace:boost	signature:( const iterator_range<Iterator1T>& l, const iterator_range<Iterator2T>& r )
operator <	/usr/include/boost/range/iterator_range.hpp	/^        inline bool operator<( const iterator_range<IteratorT>& l, $/;"	f	namespace:boost	signature:( const iterator_range<IteratorT>& l, const ForwardRange& r )
operator <	/usr/include/boost/range/sub_range.hpp	/^    inline bool operator<( const sub_range<ForwardRange>& l,$/;"	f	namespace:boost	signature:( const sub_range<ForwardRange>& l, const sub_range<ForwardRange2>& r )
operator <<	/usr/include/boost/range/iterator_range.hpp	/^        inline std::basic_ostream<Elem,Traits>& operator<<( $/;"	f	namespace:boost	signature:( std::basic_ostream<Elem, Traits>& Os, const iterator_range<IteratorT>& r )
operator <<	/usr/include/boost/range/iterator_range.hpp	/^        inline std::ostream& operator<<( $/;"	f	namespace:boost	signature:( std::ostream& Os, const iterator_range<IteratorT>& r )
operator =	/usr/include/boost/range/iterator_range.hpp	/^            iterator_range& operator=( const ForwardRange& r )$/;"	f	class:boost::iterator_range	access:public	signature:( const ForwardRange& r )
operator =	/usr/include/boost/range/iterator_range.hpp	/^            iterator_range& operator=( const iterator_range<Iterator>& r )    $/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range<Iterator>& r )
operator =	/usr/include/boost/range/iterator_range.hpp	/^            iterator_range& operator=( ForwardRange& r )$/;"	f	class:boost::iterator_range	access:public	signature:( ForwardRange& r )
operator =	/usr/include/boost/range/iterator_range.hpp	/^            this_type& operator=( const this_type& r )    $/;"	f	class:boost::iterator_range	access:public	signature:( const this_type& r )
operator =	/usr/include/boost/range/sub_range.hpp	/^        sub_range& operator=( const ForwardRange2& r )$/;"	f	class:boost::sub_range	access:public	signature:( const ForwardRange2& r )
operator =	/usr/include/boost/range/sub_range.hpp	/^        sub_range& operator=( const sub_range& r )$/;"	f	class:boost::sub_range	access:public	signature:( const sub_range& r )
operator =	/usr/include/boost/range/sub_range.hpp	/^        sub_range& operator=( ForwardRange2& r )$/;"	f	class:boost::sub_range	access:public	signature:( ForwardRange2& r )
operator ==	/usr/include/boost/range/iterator_range.hpp	/^            bool operator==( const iterator_range& r ) const$/;"	f	class:boost::iterator_range	access:public	signature:( const iterator_range& r ) const
operator ==	/usr/include/boost/range/iterator_range.hpp	/^        inline bool operator==( const ForwardRange& l, $/;"	f	namespace:boost	signature:( const ForwardRange& l, const iterator_range<IteratorT>& r )
operator ==	/usr/include/boost/range/iterator_range.hpp	/^        inline bool operator==( const iterator_range<Iterator1T>& l, $/;"	f	namespace:boost	signature:( const iterator_range<Iterator1T>& l, const iterator_range<Iterator2T>& r )
operator ==	/usr/include/boost/range/iterator_range.hpp	/^        inline bool operator==( const iterator_range<IteratorT>& l, $/;"	f	namespace:boost	signature:( const iterator_range<IteratorT>& l, const ForwardRange& r )
operator ==	/usr/include/boost/range/sub_range.hpp	/^    inline bool operator==( const sub_range<ForwardRange>& l,$/;"	f	namespace:boost	signature:( const sub_range<ForwardRange>& l, const sub_range<ForwardRange2>& r )
operator bool	/usr/include/boost/range/iterator_range.hpp	/^            operator bool() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
operator unspecified_bool_type	/usr/include/boost/range/iterator_range.hpp	/^            operator unspecified_bool_type() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
operator []	/usr/include/boost/range/iterator_range.hpp	/^           reference operator[]( difference_type at ) const$/;"	f	class:boost::iterator_range	access:public	signature:( difference_type at ) const
operator []	/usr/include/boost/range/sub_range.hpp	/^        const_reference operator[]( difference_type sz ) const$/;"	f	class:boost::sub_range	access:public	signature:( difference_type sz ) const
operator []	/usr/include/boost/range/sub_range.hpp	/^        reference operator[]( difference_type sz )$/;"	f	class:boost::sub_range	access:public	signature:( difference_type sz )
pair_container_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct pair_container_traits$/;"	s	namespace:boost::algorithm::detail
pair_container_traits_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct pair_container_traits_selector$/;"	s	namespace:boost::algorithm::detail
pair_t	/usr/include/boost/range/detail/common.hpp	/^                                                                  void >::type pair_t;$/;"	t	class:boost::range_detail::range	access:private
pair_t	/usr/include/boost/range/mfc.hpp	/^            typedef typename X::CPair pair_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
pointee	/usr/include/boost/range/atl.hpp	/^    struct pointee< ATL::CAdapt<T> > :$/;"	s	namespace:boost	inherits:pointee
pointee	/usr/include/boost/range/atl.hpp	/^    struct pointee< ATL::CAutoPtr<E> > :$/;"	s	namespace:boost	inherits:mpl::identity
pointee	/usr/include/boost/range/atl.hpp	/^    struct pointee< ATL::CComPtr<T> > :$/;"	s	namespace:boost	inherits:mpl::identity
pointee	/usr/include/boost/range/atl.hpp	/^    struct pointee< ATL::CComQIPtr<T, piid> > :$/;"	s	namespace:boost	inherits:mpl::identity
pointee	/usr/include/boost/range/atl.hpp	/^    struct pointee< ATL::CHeapPtr<E, Allocator> > :$/;"	s	namespace:boost	inherits:mpl::identity
pointer_container_traits	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct pointer_container_traits$/;"	s	namespace:boost::algorithm::detail
pointer_container_traits_selector	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^            struct pointer_container_traits_selector$/;"	s	namespace:boost::algorithm::detail
POSITION	/usr/include/boost/range/detail/microsoft.hpp	/^typedef __POSITION *POSITION;$/;"	t
ptr	/usr/include/boost/range/detail/common.hpp	/^            static C  ptr;$/;"	m	struct:boost::range_detail::range_helper	access:public
pts	/usr/include/boost/range/detail/const_iterator.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_const_iterator_	access:public
pts	/usr/include/boost/range/detail/detail_str.hpp	/^             struct pts$/;"	s	struct:boost::range_detail::range_const_iterator_	access:public
pts	/usr/include/boost/range/detail/detail_str.hpp	/^             struct pts$/;"	s	struct:boost::range_detail::range_iterator_	access:public
pts	/usr/include/boost/range/detail/detail_str.hpp	/^             struct pts$/;"	s	struct:boost::range_detail::range_value_type_	access:public
pts	/usr/include/boost/range/detail/detail_str.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_const_iterator_	access:public
pts	/usr/include/boost/range/detail/detail_str.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_iterator_	access:public
pts	/usr/include/boost/range/detail/detail_str.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_size_type_	access:public
pts	/usr/include/boost/range/detail/detail_str.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_value_type_	access:public
pts	/usr/include/boost/range/detail/difference_type.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_difference_type_	access:public
pts	/usr/include/boost/range/detail/iterator.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_iterator_	access:public
pts	/usr/include/boost/range/detail/size_type.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_size_type_	access:public
pts	/usr/include/boost/range/detail/value_type.hpp	/^            struct pts$/;"	s	struct:boost::range_detail::range_value_type_	access:public
RandomAccessRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct RandomAccessRangeConcept $/;"	s	namespace:boost
range	/usr/include/boost/range/detail/common.hpp	/^        class range$/;"	c	namespace:boost::range_detail
range_begin	/usr/include/boost/range/begin.hpp	/^    inline Iterator range_begin( const std::pair<Iterator,Iterator>& p )$/;"	f	namespace:boost::range_detail	signature:( const std::pair<Iterator,Iterator>& p )
range_begin	/usr/include/boost/range/begin.hpp	/^    inline Iterator range_begin( std::pair<Iterator,Iterator>& p )$/;"	f	namespace:boost::range_detail	signature:( std::pair<Iterator,Iterator>& p )
range_begin	/usr/include/boost/range/begin.hpp	/^    range_begin( C& c )$/;"	f	namespace:boost::range_detail	signature:( C& c )
range_begin	/usr/include/boost/range/detail/begin.hpp	/^        struct range_begin<array_>$/;"	s	namespace:boost::range_detail
range_begin	/usr/include/boost/range/detail/begin.hpp	/^        struct range_begin<std_container_>$/;"	s	namespace:boost::range_detail
range_begin	/usr/include/boost/range/detail/begin.hpp	/^        struct range_begin<std_pair_>$/;"	s	namespace:boost::range_detail
range_begin	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_begin<char_ptr_>$/;"	s	namespace:boost::range_detail
range_begin	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_begin<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_begin	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_begin<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_begin	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_begin<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_category	/usr/include/boost/range/category.hpp	/^    struct range_category : iterator_category< typename range_iterator<T>::type >$/;"	s	namespace:boost	inherits:iterator_category
range_const_iterator	/usr/include/boost/range/concepts.hpp	/^        typedef typename range_iterator<T const>::type  range_const_iterator;$/;"	t	struct:boost::SinglePassRangeConcept	access:public
range_const_iterator	/usr/include/boost/range/const_iterator.hpp	/^    struct range_const_iterator$/;"	s	namespace:boost
range_const_iterator	/usr/include/boost/range/const_iterator.hpp	/^    struct range_const_iterator< std::pair<Iterator,Iterator> >$/;"	s	namespace:boost
range_const_iterator	/usr/include/boost/range/const_iterator.hpp	/^    struct range_const_iterator< T[sz] >$/;"	s	namespace:boost
range_const_iterator	/usr/include/boost/range/detail/const_iterator.hpp	/^    class range_const_iterator$/;"	c	namespace:boost
range_const_iterator	/usr/include/boost/range/detail/str_types.hpp	/^    struct range_const_iterator<T*>$/;"	s	namespace:boost
range_const_iterator_	/usr/include/boost/range/detail/const_iterator.hpp	/^        struct range_const_iterator_<array_>$/;"	s	namespace:boost::range_detail
range_const_iterator_	/usr/include/boost/range/detail/const_iterator.hpp	/^        struct range_const_iterator_<std_container_>$/;"	s	namespace:boost::range_detail
range_const_iterator_	/usr/include/boost/range/detail/const_iterator.hpp	/^        struct range_const_iterator_<std_pair_>$/;"	s	namespace:boost::range_detail
range_const_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_const_iterator_<char_array_>$/;"	s	namespace:boost::range_detail
range_const_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_const_iterator_<char_ptr_>$/;"	s	namespace:boost::range_detail
range_const_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_const_iterator_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_const_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_const_iterator_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_const_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_const_iterator_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_const_reverse_iterator	/usr/include/boost/range/const_reverse_iterator.hpp	/^    struct range_const_reverse_iterator : range_reverse_iterator<const C>$/;"	s	namespace:boost	inherits:range_reverse_iterator
range_detail	/usr/include/boost/range/as_literal.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/begin.hpp	/^namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/begin.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/common.hpp	/^    namespace range_detail $/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/const_iterator.hpp	/^    namespace range_detail $/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/detail_str.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/difference_type.hpp	/^    namespace range_detail $/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/empty.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/end.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/implementation_help.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/iterator.hpp	/^    namespace range_detail $/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/remove_extent.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/sfinae.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/size.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/size_type.hpp	/^    namespace range_detail $/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/value_type.hpp	/^    namespace range_detail $/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/vc6/end.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/detail/vc6/size.hpp	/^    namespace range_detail$/;"	n	namespace:boost
range_detail	/usr/include/boost/range/end.hpp	/^namespace range_detail$/;"	n	namespace:boost
range_detail_microsoft	/usr/include/boost/range/atl.hpp	/^namespace boost { namespace range_detail_microsoft {$/;"	n	namespace:boost
range_detail_microsoft	/usr/include/boost/range/detail/microsoft.hpp	/^namespace boost { namespace range_detail_microsoft {$/;"	n	namespace:boost
range_detail_microsoft	/usr/include/boost/range/mfc.hpp	/^namespace boost { namespace range_detail_microsoft {$/;"	n	namespace:boost
range_detail_vc7_1	/usr/include/boost/range/iterator.hpp	/^    namespace range_detail_vc7_1  $/;"	n	namespace:boost
range_difference	/usr/include/boost/range/detail/difference_type.hpp	/^    class range_difference$/;"	c	namespace:boost
range_difference	/usr/include/boost/range/difference_type.hpp	/^    struct range_difference : iterator_difference< typename range_iterator<T>::type >$/;"	s	namespace:boost	inherits:iterator_difference
range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<array_>$/;"	s	namespace:boost::range_detail
range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<char_array_>$/;"	s	namespace:boost::range_detail
range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<char_ptr_>$/;"	s	namespace:boost::range_detail
range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<std_container_>$/;"	s	namespace:boost::range_detail
range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<std_pair_>$/;"	s	namespace:boost::range_detail
range_difference_type_	/usr/include/boost/range/detail/difference_type.hpp	/^        struct range_difference_type_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<array_>$/;"	s	namespace:boost::range_detail
range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<char_ptr_>$/;"	s	namespace:boost::range_detail
range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<std_container_>$/;"	s	namespace:boost::range_detail
range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<std_pair_>$/;"	s	namespace:boost::range_detail
range_empty	/usr/include/boost/range/detail/empty.hpp	/^        struct range_empty<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<char_array_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<char_ptr_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<wchar_t_array_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_end<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/end.hpp	/^        struct range_end<array_>  $/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/end.hpp	/^        struct range_end<std_container_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/end.hpp	/^        struct range_end<std_pair_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<array_>  $/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<char_array_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<char_ptr_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<std_container_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<std_pair_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<wchar_t_array_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/detail/vc6/end.hpp	/^        struct range_end<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_end	/usr/include/boost/range/end.hpp	/^        inline Iterator range_end( const std::pair<Iterator,Iterator>& p )$/;"	f	namespace:boost::range_detail	signature:( const std::pair<Iterator,Iterator>& p )
range_end	/usr/include/boost/range/end.hpp	/^        inline Iterator range_end( std::pair<Iterator,Iterator>& p )$/;"	f	namespace:boost::range_detail	signature:( std::pair<Iterator,Iterator>& p )
range_end	/usr/include/boost/range/end.hpp	/^        range_end( C& c )$/;"	f	namespace:boost::range_detail	signature:( C& c )
range_helper	/usr/include/boost/range/detail/common.hpp	/^        struct range_helper$/;"	s	namespace:boost::range_detail
range_iterator	/usr/include/boost/range/concepts.hpp	/^        typedef typename range_iterator<T>::type        range_iterator;$/;"	t	struct:boost::SinglePassRangeConcept	access:public
range_iterator	/usr/include/boost/range/iterator.hpp	/^       struct range_iterator  $/;"	s	namespace:boost::range_detail_vc7_1
range_iterator	/usr/include/boost/range/iterator.hpp	/^       struct range_iterator< C, void(T[]) >  $/;"	s	namespace:boost::range_detail_vc7_1
range_iterator	/usr/include/boost/range/iterator.hpp	/^    struct range_iterator$/;"	s	namespace:boost
range_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_iterator_<char_array_>$/;"	s	namespace:boost::range_detail
range_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_iterator_<char_ptr_>$/;"	s	namespace:boost::range_detail
range_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_iterator_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_iterator_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_iterator_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_iterator_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_iterator_	/usr/include/boost/range/detail/iterator.hpp	/^        struct range_iterator_ {$/;"	s	namespace:boost::range_detail
range_iterator_	/usr/include/boost/range/detail/iterator.hpp	/^        struct range_iterator_<array_>$/;"	s	namespace:boost::range_detail
range_iterator_	/usr/include/boost/range/detail/iterator.hpp	/^        struct range_iterator_<std_container_>$/;"	s	namespace:boost::range_detail
range_iterator_	/usr/include/boost/range/detail/iterator.hpp	/^        struct range_iterator_<std_pair_>$/;"	s	namespace:boost::range_detail
range_mutable_iterator	/usr/include/boost/range/detail/iterator.hpp	/^    class range_mutable_iterator$/;"	c	namespace:boost
range_mutable_iterator	/usr/include/boost/range/detail/str_types.hpp	/^    struct range_mutable_iterator<T*>$/;"	s	namespace:boost
range_mutable_iterator	/usr/include/boost/range/mutable_iterator.hpp	/^    struct range_mutable_iterator$/;"	s	namespace:boost
range_mutable_iterator	/usr/include/boost/range/mutable_iterator.hpp	/^    struct range_mutable_iterator< std::pair<Iterator,Iterator> >$/;"	s	namespace:boost
range_mutable_iterator	/usr/include/boost/range/mutable_iterator.hpp	/^    struct range_mutable_iterator< T[sz] >$/;"	s	namespace:boost
range_pointer	/usr/include/boost/range/pointer.hpp	/^    struct range_pointer : iterator_pointer< typename range_iterator<T>::type >$/;"	s	namespace:boost	inherits:iterator_pointer
range_reference	/usr/include/boost/range/reference.hpp	/^    struct range_reference : iterator_reference< typename range_iterator<T>::type >$/;"	s	namespace:boost	inherits:iterator_reference
range_result_iterator	/usr/include/boost/range/result_iterator.hpp	/^    struct range_result_iterator : range_iterator<C>$/;"	s	namespace:boost	inherits:range_iterator
range_reverse_iterator	/usr/include/boost/range/reverse_iterator.hpp	/^    struct range_reverse_iterator$/;"	s	namespace:boost
range_reverse_result_iterator	/usr/include/boost/range/reverse_result_iterator.hpp	/^    struct range_reverse_result_iterator : range_reverse_iterator<C>$/;"	s	namespace:boost	inherits:range_reverse_iterator
range_size	/usr/include/boost/range/detail/size_type.hpp	/^    class range_size$/;"	c	namespace:boost
range_size	/usr/include/boost/range/detail/str_types.hpp	/^    struct range_size<T*>$/;"	s	namespace:boost
range_size	/usr/include/boost/range/size_type.hpp	/^        struct range_size$/;"	s	namespace:boost::detail
range_size	/usr/include/boost/range/size_type.hpp	/^        struct range_size< std::pair<Iterator,Iterator> >$/;"	s	namespace:boost::detail
range_size	/usr/include/boost/range/size_type.hpp	/^        struct range_size< T[sz] >$/;"	s	namespace:boost::detail
range_size	/usr/include/boost/range/size_type.hpp	/^    struct range_size : $/;"	s	namespace:boost	inherits:detail::range_size
range_size	/usr/include/boost/range/size_type.hpp	/^    struct range_size<const T > : range_size<T>$/;"	s	namespace:boost	inherits:range_size
range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<array_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<char_array_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<char_ptr_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<std_container_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<std_pair_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<wchar_t_array_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/size.hpp	/^        struct range_size_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<array_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<char_array_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<char_ptr_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<std_container_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<std_pair_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<wchar_t_array_>$/;"	s	namespace:boost::range_detail
range_size_	/usr/include/boost/range/detail/vc6/size.hpp	/^        struct range_size_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_size_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_size_type_<char_array_>$/;"	s	namespace:boost::range_detail
range_size_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_size_type_<char_ptr_>$/;"	s	namespace:boost::range_detail
range_size_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_size_type_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_size_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_size_type_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_size_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_size_type_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_size_type_	/usr/include/boost/range/detail/size_type.hpp	/^        struct range_size_type_<array_>$/;"	s	namespace:boost::range_detail
range_size_type_	/usr/include/boost/range/detail/size_type.hpp	/^        struct range_size_type_<std_container_>$/;"	s	namespace:boost::range_detail
range_size_type_	/usr/include/boost/range/detail/size_type.hpp	/^        struct range_size_type_<std_pair_>$/;"	s	namespace:boost::range_detail
range_tag	/usr/include/boost/range/iterator_range.hpp	/^        struct range_tag { };$/;"	s	namespace:boost::iterator_range_detail
range_value	/usr/include/boost/range/detail/value_type.hpp	/^    class range_value$/;"	c	namespace:boost
range_value	/usr/include/boost/range/value_type.hpp	/^    struct range_value : iterator_value< typename range_iterator<T>::type >$/;"	s	namespace:boost	inherits:iterator_value
range_value_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_value_type_<char_array_>$/;"	s	namespace:boost::range_detail
range_value_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_value_type_<char_ptr_>$/;"	s	namespace:boost::range_detail
range_value_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_value_type_<const_char_ptr_>$/;"	s	namespace:boost::range_detail
range_value_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_value_type_<const_wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_value_type_	/usr/include/boost/range/detail/detail_str.hpp	/^        struct range_value_type_<wchar_t_ptr_>$/;"	s	namespace:boost::range_detail
range_value_type_	/usr/include/boost/range/detail/value_type.hpp	/^        struct range_value_type_<array_>$/;"	s	namespace:boost::range_detail
range_value_type_	/usr/include/boost/range/detail/value_type.hpp	/^        struct range_value_type_<std_container_>$/;"	s	namespace:boost::range_detail
range_value_type_	/usr/include/boost/range/detail/value_type.hpp	/^        struct range_value_type_<std_pair_>$/;"	s	namespace:boost::range_detail
rbegin	/usr/include/boost/range/rbegin.hpp	/^rbegin( C& c )$/;"	f	namespace:boost	signature:( C& c )
reference	/usr/include/boost/range/iterator_range.hpp	/^                iterator_reference<IteratorT>::type reference;$/;"	t	class:boost::iterator_range	access:public
reference	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME base::reference                            reference;$/;"	t	class:boost::sub_range	access:public
ref_t	/usr/include/boost/range/detail/microsoft.hpp	/^        >::type ref_t;$/;"	t	struct:boost::range_detail_microsoft::list_iterator_super	access:public
ref_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename super_t::reference ref_t;$/;"	t	struct:boost::range_detail_microsoft::list_iterator	access:private
ref_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename super_t::reference ref_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private
ref_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename super_t::reference ref_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
ref_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename super_t::reference ref_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private
remove_extent	/usr/include/boost/range/detail/remove_extent.hpp	/^        struct remove_extent {$/;"	s	namespace:boost::range_detail
rend	/usr/include/boost/range/rend.hpp	/^rend( C& c )$/;"	f	namespace:boost	signature:( C& c )
result1	/usr/include/boost/range/detail/remove_extent.hpp	/^                    >::type result1;$/;"	t	struct:boost::range_detail::remove_extent	access:public
result1	/usr/include/boost/range/detail/remove_extent.hpp	/^                    >::type result1;$/;"	t	struct:boost::range_detail::select	access:public
result2	/usr/include/boost/range/detail/remove_extent.hpp	/^                    > result2;$/;"	t	struct:boost::range_detail::remove_extent	access:public
result2	/usr/include/boost/range/detail/remove_extent.hpp	/^                    > result2;$/;"	t	struct:boost::range_detail::select	access:public
result_iterator	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::result_iterator result_iterator;$/;"	t	struct:boost::algorithm::collection_traits	access:public
result_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    >::type result_iterator;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
result_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    >::type result_iterator;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
result_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    >::type result_iterator;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
result_iterator	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef element_type result_iterator;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
result_iterator_of	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct result_iterator_of$/;"	s	namespace:boost::algorithm
result_type	/usr/include/boost/range/mfc.hpp	/^            typedef val_t_ * const result_type;$/;"	t	struct:boost::range_detail_microsoft::customization::fun	access:public
select	/usr/include/boost/range/detail/remove_extent.hpp	/^        struct select {$/;"	s	namespace:boost::range_detail
self_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef list_iterator self_t;$/;"	t	struct:boost::range_detail_microsoft::list_iterator	access:private
self_t	/usr/include/boost/range/mfc.hpp	/^        typedef mfc_cpair_map_iterator self_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private
self_t	/usr/include/boost/range/mfc.hpp	/^        typedef mfc_map_iterator self_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
self_t	/usr/include/boost/range/mfc.hpp	/^        typedef mfc_ptr_array_iterator self_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private
SinglePassRangeConcept	/usr/include/boost/range/concepts.hpp	/^    struct SinglePassRangeConcept $/;"	s	namespace:boost
singular	/usr/include/boost/range/iterator_range.hpp	/^            bool      singular;$/;"	m	class:boost::iterator_range	access:private
size	/usr/include/boost/range/detail/collection_traits.hpp	/^        size( const C& c )$/;"	f	namespace:boost::algorithm	signature:( const C& c )
size	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static size_type size( const A& a )$/;"	f	struct:boost::algorithm::detail::array_container_traits	access:public	signature:( const A& a )
size	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static size_type size( const C& c )$/;"	f	struct:boost::algorithm::detail::default_container_traits	access:public	signature:( const C& c )
size	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static size_type size( const P& p )$/;"	f	struct:boost::algorithm::detail::pair_container_traits	access:public	signature:( const P& p )
size	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static size_type size( const P& p )$/;"	f	struct:boost::algorithm::detail::pointer_container_traits	access:public	signature:( const P& p )
size	/usr/include/boost/range/detail/size.hpp	/^    size( const C& c )$/;"	f	namespace:boost	signature:( const C& c )
size	/usr/include/boost/range/detail/vc6/size.hpp	/^    size( const C& c )$/;"	f	namespace:boost	signature:( const C& c )
size	/usr/include/boost/range/iterator_range.hpp	/^            difference_type size() const$/;"	f	class:boost::iterator_range	access:public	signature:() const
size	/usr/include/boost/range/size.hpp	/^    inline BOOST_DEDUCED_TYPENAME range_difference<T>::type size( const T& r )$/;"	f	namespace:boost	signature:( const T& r )
size	/usr/include/boost/range/sub_range.hpp	/^        difference_type size() const     { return base::size();  }   $/;"	f	class:boost::sub_range	access:public	signature:() const
sizer	/usr/include/boost/range/detail/sizer.hpp	/^    char (& sizer( const T BOOST_RANGE_ARRAY_REF()[sz] ) )[sz];$/;"	p	namespace:boost	signature:(const T BOOST_RANGE_ARRAY_REF(
sizer	/usr/include/boost/range/detail/sizer.hpp	/^    char (& sizer( T BOOST_RANGE_ARRAY_REF()[sz] ) )[sz];$/;"	p	namespace:boost	signature:(T BOOST_RANGE_ARRAY_REF(
size_of	/usr/include/boost/range/detail/microsoft.hpp	/^    size_of(T const& x)$/;"	f	namespace:boost::range_detail_microsoft	signature:(T const& x)
size_type	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::size_type size_type;$/;"	t	struct:boost::algorithm::collection_traits	access:public
size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                        TraitsT::size_type size_type;$/;"	t	struct:boost::algorithm::detail::array_length_selector::array_length	access:public
size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::size_type size_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::size_type size_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME ContainerT::size_type size_type;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::size_t size_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::size_t size_type;$/;"	t	struct:boost::algorithm::detail::array_traits_impl	access:public
size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::size_t size_type;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
size_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef std::size_t size_type;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
size_type	/usr/include/boost/range/iterator_range.hpp	/^            typedef std::size_t size_type; \/\/ note: must be unsigned$/;"	t	class:boost::iterator_range	access:public
size_type	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_size<ForwardRange>::type             size_type;$/;"	t	class:boost::sub_range	access:public
size_type_of	/usr/include/boost/range/detail/microsoft.hpp	/^    struct size_type_of$/;"	s	namespace:boost::range_detail_microsoft
std_container_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<1>::type    std_container_;$/;"	t	namespace:boost::range_detail
std_pair_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<2>::type    std_pair_;$/;"	t	namespace:boost::range_detail
string_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<12>::type   string_;$/;"	t	namespace:boost::range_detail
string_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    array_t >::type string_t;$/;"	t	class:boost::range_detail::range	access:private
str_begin	/usr/include/boost/range/detail/detail_str.hpp	/^        str_begin( C& c )$/;"	f	namespace:boost::range_detail	signature:( C& c )
str_end	/usr/include/boost/range/detail/detail_str.hpp	/^        str_end( C& c )$/;"	f	namespace:boost::range_detail	signature:( C& c )
str_end	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline Char* str_end( Char* s )$/;"	f	namespace:boost::range_detail	signature:( Char* s )
str_end	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline const char* str_end( const char* s, const char* )$/;"	f	namespace:boost::range_detail	signature:( const char* s, const char* )
str_end	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline const wchar_t* str_end( const wchar_t* s, const wchar_t* )$/;"	f	namespace:boost::range_detail	signature:( const wchar_t* s, const wchar_t* )
str_size	/usr/include/boost/range/detail/implementation_help.hpp	/^        inline std::size_t str_size( const Char* const& s )$/;"	f	namespace:boost::range_detail	signature:( const Char* const& s )
sub_range	/usr/include/boost/range/sub_range.hpp	/^        sub_range( const ForwardRange2& r ) : $/;"	f	class:boost::sub_range	access:public	signature:( const ForwardRange2& r )
sub_range	/usr/include/boost/range/sub_range.hpp	/^        sub_range( const sub_range& r ) $/;"	f	class:boost::sub_range	access:public	signature:( const sub_range& r )
sub_range	/usr/include/boost/range/sub_range.hpp	/^        sub_range( ForwardRange2& r ) : $/;"	f	class:boost::sub_range	access:public	signature:( ForwardRange2& r )
sub_range	/usr/include/boost/range/sub_range.hpp	/^        sub_range( Iter first, Iter last ) :$/;"	f	class:boost::sub_range	access:public	signature:( Iter first, Iter last )
sub_range	/usr/include/boost/range/sub_range.hpp	/^        sub_range() : base() $/;"	f	class:boost::sub_range	access:public	signature:()
sub_range	/usr/include/boost/range/sub_range.hpp	/^    class sub_range : public iterator_range< BOOST_DEDUCED_TYPENAME range_iterator<ForwardRange>::type > $/;"	c	namespace:boost	inherits:iterator_range
super_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename list_iterator_super<ListT, Value, Reference, Traversal>::type super_t;$/;"	t	struct:boost::range_detail_microsoft::list_iterator	access:private
super_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename mfc_map_iterator_super<MapT, KeyT, MappedT>::type super_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_map_iterator	access:private
super_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename mfc_pget_map_iterator_super<MapT, PairT>::type super_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_cpair_map_iterator	access:private
super_t	/usr/include/boost/range/mfc.hpp	/^        typedef typename mfc_ptr_array_iterator_super<ArrayT, PtrType>::type super_t;$/;"	t	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator	access:private
t	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                static T* t;$/;"	m	struct:boost::algorithm::detail::is_pair	access:private
tag_t	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename customization_tag<bare_t>::type tag_t;$/;"	t	struct:boost::range_detail_microsoft::customization_of	access:public
test_bidirectional	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_bidirectional(Range& rng)$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range& rng)
test_const_iter	/usr/include/boost/range/detail/microsoft.hpp	/^    struct test_const_iter :$/;"	s	namespace:boost::range_detail_microsoft	inherits:boost::is_same
test_emptiness	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_emptiness(Range& )$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range& )
test_equals	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_equals(Range1 const& rng1, Range2 const& rng2)$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range1 const& rng1, Range2 const& rng2)
test_find_key_and_mapped	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_find_key_and_mapped(AssocContainer const& ac, PairT const& pa)$/;"	f	namespace:boost::range_detail_microsoft	signature:(AssocContainer const& ac, PairT const& pa)
test_forward	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_forward(Range& rng)$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range& rng)
test_init_array	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_init_array(ArrayT& arr, SampleRange const& sample)$/;"	f	namespace:boost::range_detail_microsoft	signature:(ArrayT& arr, SampleRange const& sample)
test_init_list	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_init_list(ListT& lst, SampleRange const& sample)$/;"	f	namespace:boost::range_detail_microsoft	signature:(ListT& lst, SampleRange const& sample)
test_init_map	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_init_map(MapT& map, SampleMap const& sample)$/;"	f	namespace:boost::range_detail_microsoft	signature:(MapT& map, SampleMap const& sample)
test_init_string	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_init_string(StringT& str, SampleRange const& sample)$/;"	f	namespace:boost::range_detail_microsoft	signature:(StringT& str, SampleRange const& sample)
test_mutable_iter	/usr/include/boost/range/detail/microsoft.hpp	/^    struct test_mutable_iter :$/;"	s	namespace:boost::range_detail_microsoft	inherits:boost::is_same
test_random_access	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_random_access(Range& rng)$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range& rng)
test_trivial	/usr/include/boost/range/detail/microsoft.hpp	/^    bool test_trivial(Range& rng)$/;"	f	namespace:boost::range_detail_microsoft	signature:(Range& rng)
this_type	/usr/include/boost/range/iterator_range.hpp	/^            typedef iterator_range<IteratorT> this_type;$/;"	t	class:boost::iterator_range	access:public
traits_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    array_traits_selector<T>::type traits_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
traits_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef array_traits<T> traits_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:private
trv_t	/usr/include/boost/range/detail/microsoft.hpp	/^        >::type trv_t;$/;"	t	struct:boost::range_detail_microsoft::list_iterator_super	access:public
type	/usr/include/boost/range/const_iterator.hpp	/^        typedef BOOST_DEDUCED_TYPENAME C::const_iterator type;$/;"	t	struct:boost::range_const_iterator	access:public
type	/usr/include/boost/range/const_iterator.hpp	/^        typedef const T* type;$/;"	t	struct:boost::range_const_iterator	access:public
type	/usr/include/boost/range/const_iterator.hpp	/^        typedef Iterator type;$/;"	t	struct:boost::range_const_iterator	access:public
type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef BOOST_STRING_TYPENAME collection_traits<C>::const_iterator type;$/;"	t	struct:boost::algorithm::const_iterator_of	access:public
type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef BOOST_STRING_TYPENAME collection_traits<C>::difference_type type;$/;"	t	struct:boost::algorithm::difference_type_of	access:public
type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef BOOST_STRING_TYPENAME collection_traits<C>::iterator type;$/;"	t	struct:boost::algorithm::iterator_of	access:public
type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef BOOST_STRING_TYPENAME collection_traits<C>::result_iterator type;$/;"	t	struct:boost::algorithm::result_iterator_of	access:public
type	/usr/include/boost/range/detail/collection_traits.hpp	/^            typedef BOOST_STRING_TYPENAME collection_traits<C>::value_type type;$/;"	t	struct:boost::algorithm::value_type_of	access:public
type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                            ::boost::mpl::identity<T1> >::type type;$/;"	t	struct:boost::algorithm::detail::array_traits_select::apply	access:public
type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                        ::boost::algorithm::detail::array_traits_select<T> >::type type;$/;"	t	struct:boost::algorithm::detail::array_traits_selector	access:public
type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    >::type type;$/;"	t	struct:boost::algorithm::detail::array_traits_cv_selector	access:public
type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef array_container_traits<T> type;$/;"	t	struct:boost::algorithm::detail::array_container_traits_selector	access:public
type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef array_traits_impl<T,BaseT> type;$/;"	t	struct:boost::algorithm::detail::array_traits_impl_selector	access:public
type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef default_container_traits<T> type;$/;"	t	struct:boost::algorithm::detail::default_container_traits_selector	access:public
type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef pair_container_traits<T> type;$/;"	t	struct:boost::algorithm::detail::pair_container_traits_selector	access:public
type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef pointer_container_traits<T> type;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits_selector	access:public
type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef void type;$/;"	t	struct:boost::algorithm::detail::array_traits_void	access:public
type	/usr/include/boost/range/detail/common.hpp	/^                                                                    char_array_t >::type type;  $/;"	t	class:boost::range_detail::range	access:public
type	/usr/include/boost/range/detail/const_iterator.hpp	/^                    remove_extent<T>::type* type;$/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
type	/usr/include/boost/range/detail/const_iterator.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME C::const_iterator type;$/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
type	/usr/include/boost/range/detail/const_iterator.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME P::first_type type;$/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
type	/usr/include/boost/range/detail/const_iterator.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_detail::range_const_iterator_<c_type>::BOOST_NESTED_TEMPLATE pts<C>::type type; $/;"	t	class:boost::range_const_iterator	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                    remove_extent<T>::type* type;$/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                    remove_extent<T>::type* type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                 typedef char type; $/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                 typedef const char type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                 typedef const wchar_t* type; $/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                 typedef const wchar_t* type; $/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                 typedef wchar_t type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef char type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef char* type; $/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef const char* type; $/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef const char* type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef const wchar_t type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef const wchar_t* type; $/;"	t	struct:boost::range_detail::range_const_iterator_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef std::size_t type;$/;"	t	struct:boost::range_detail::range_size_type_::pts	access:public
type	/usr/include/boost/range/detail/detail_str.hpp	/^                typedef wchar_t* type; $/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
type	/usr/include/boost/range/detail/difference_type.hpp	/^                typedef BOOST_DEDUCED_TYPENAME C::difference_type type;$/;"	t	struct:boost::range_detail::range_difference_type_::pts	access:public
type	/usr/include/boost/range/detail/difference_type.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME boost::iterator_difference< BOOST_DEDUCED_TYPENAME P::first_type>::type type;                $/;"	t	struct:boost::range_detail::range_difference_type_::pts	access:public
type	/usr/include/boost/range/detail/difference_type.hpp	/^                typedef std::ptrdiff_t type;$/;"	t	struct:boost::range_detail::range_difference_type_::pts	access:public
type	/usr/include/boost/range/detail/difference_type.hpp	/^        typedef BOOST_RANGE_DEDUCED_TYPENAME range_detail::range_difference_type_<c_type>::BOOST_NESTED_TEMPLATE pts<C>::type type; $/;"	t	class:boost::range_difference	access:public
type	/usr/include/boost/range/detail/iterator.hpp	/^                    remove_extent<T>::type* type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
type	/usr/include/boost/range/detail/iterator.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME C::iterator type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
type	/usr/include/boost/range/detail/iterator.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME P::first_type type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
type	/usr/include/boost/range/detail/iterator.hpp	/^                typedef int type;$/;"	t	struct:boost::range_detail::range_iterator_::pts	access:public
type	/usr/include/boost/range/detail/iterator.hpp	/^        typedef typename range_detail::range_iterator_<c_type>::BOOST_NESTED_TEMPLATE pts<C>::type type; $/;"	t	class:boost::range_mutable_iterator	access:public
type	/usr/include/boost/range/detail/microsoft.hpp	/^        > type;$/;"	t	struct:boost::range_detail_microsoft::list_iterator_super	access:public
type	/usr/include/boost/range/detail/microsoft.hpp	/^        >::type type;$/;"	t	struct:boost::range_detail_microsoft::customization_tag_of	access:public
type	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef customization<tag_t> type;$/;"	t	struct:boost::range_detail_microsoft::customization_of	access:public
type	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename cust_t::template meta<bare_t>::const_iterator type;$/;"	t	struct:boost::range_detail_microsoft::const_iterator_of	access:public
type	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename cust_t::template meta<bare_t>::mutable_iterator type;$/;"	t	struct:boost::range_detail_microsoft::mutable_iterator_of	access:public
type	/usr/include/boost/range/detail/microsoft.hpp	/^        typedef typename iterator_difference<miter_t>::type type;$/;"	t	struct:boost::range_detail_microsoft::size_type_of	access:public
type	/usr/include/boost/range/detail/remove_extent.hpp	/^                    >::type type;$/;"	t	struct:boost::range_detail::remove_extent	access:public
type	/usr/include/boost/range/detail/remove_extent.hpp	/^                    >::type type;$/;"	t	struct:boost::range_detail::select	access:public
type	/usr/include/boost/range/detail/size_type.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME C::size_type type;$/;"	t	struct:boost::range_detail::range_size_type_::pts	access:public
type	/usr/include/boost/range/detail/size_type.hpp	/^                typedef std::size_t type;$/;"	t	struct:boost::range_detail::range_size_type_::pts	access:public
type	/usr/include/boost/range/detail/size_type.hpp	/^        typedef typename range_detail::range_size_type_<c_type>::BOOST_NESTED_TEMPLATE pts<C>::type type; $/;"	t	class:boost::range_size	access:public
type	/usr/include/boost/range/detail/str_types.hpp	/^        typedef const T* type;$/;"	t	struct:boost::range_const_iterator	access:public
type	/usr/include/boost/range/detail/str_types.hpp	/^        typedef T* type;$/;"	t	struct:boost::range_mutable_iterator	access:public
type	/usr/include/boost/range/detail/str_types.hpp	/^       typedef std::size_t type;$/;"	t	struct:boost::range_size	access:public
type	/usr/include/boost/range/detail/value_type.hpp	/^                typedef BOOST_DEDUCED_TYPENAME remove_extent<T>::type type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
type	/usr/include/boost/range/detail/value_type.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME boost::iterator_value< BOOST_RANGE_DEDUCED_TYPENAME P::first_type >::type type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
type	/usr/include/boost/range/detail/value_type.hpp	/^                typedef BOOST_RANGE_DEDUCED_TYPENAME C::value_type type;$/;"	t	struct:boost::range_detail::range_value_type_::pts	access:public
type	/usr/include/boost/range/detail/value_type.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_detail::range_value_type_<c_type>::BOOST_NESTED_TEMPLATE pts<C>::type type; $/;"	t	class:boost::range_value	access:public
type	/usr/include/boost/range/iterator.hpp	/^                               range_mutable_iterator<C> >::type type;  $/;"	t	struct:boost::range_detail_vc7_1::range_iterator	access:public
type	/usr/include/boost/range/iterator.hpp	/^               range_detail_vc7_1::range_iterator<C>::type type;  $/;"	t	struct:boost::range_iterator	access:public
type	/usr/include/boost/range/iterator.hpp	/^           typedef T* type;  $/;"	t	struct:boost::range_detail_vc7_1::range_iterator	access:public
type	/usr/include/boost/range/iterator_range.hpp	/^            typedef iterator_range<IteratorT> type;$/;"	t	class:boost::iterator_range	access:public
type	/usr/include/boost/range/mfc.hpp	/^        > type;$/;"	t	struct:boost::range_detail_microsoft::mfc_map_iterator_super	access:public
type	/usr/include/boost/range/mfc.hpp	/^        > type;$/;"	t	struct:boost::range_detail_microsoft::mfc_pget_map_iterator_super	access:public
type	/usr/include/boost/range/mfc.hpp	/^        > type;$/;"	t	struct:boost::range_detail_microsoft::mfc_ptr_array_iterator_super	access:public
type	/usr/include/boost/range/mutable_iterator.hpp	/^        typedef BOOST_DEDUCED_TYPENAME C::iterator type;$/;"	t	struct:boost::range_mutable_iterator	access:public
type	/usr/include/boost/range/mutable_iterator.hpp	/^        typedef Iterator type;$/;"	t	struct:boost::range_mutable_iterator	access:public
type	/usr/include/boost/range/mutable_iterator.hpp	/^        typedef T* type;$/;"	t	struct:boost::range_mutable_iterator	access:public
type	/usr/include/boost/range/reverse_iterator.hpp	/^            BOOST_DEDUCED_TYPENAME range_iterator<C>::type > type;$/;"	t	struct:boost::range_reverse_iterator	access:public
type	/usr/include/boost/range/size_type.hpp	/^            typedef BOOST_DEDUCED_TYPENAME C::size_type type;$/;"	t	struct:boost::detail::range_size	access:public
type	/usr/include/boost/range/size_type.hpp	/^            typedef std::size_t type;$/;"	t	struct:boost::detail::range_size	access:public
using_type_as_tag	/usr/include/boost/range/detail/microsoft.hpp	/^    struct using_type_as_tag$/;"	s	namespace:boost::range_detail_microsoft
value_type	/usr/include/boost/range/detail/collection_traits.hpp	/^                container_helper_type::value_type value_type;$/;"	t	struct:boost::algorithm::collection_traits	access:public
value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    ::boost::remove_pointer<T>::type value_type;$/;"	t	struct:boost::algorithm::detail::pointer_container_traits	access:public
value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    iterator_traits<element_type>::value_type value_type;$/;"	t	struct:boost::algorithm::detail::pair_container_traits	access:public
value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::value_type value_type;$/;"	t	struct:boost::algorithm::detail::array_container_traits	access:public
value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                    traits_type::value_type value_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BaseT value_type;$/;"	t	struct:boost::algorithm::detail::array_traits_impl	access:public
value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef BOOST_STRING_TYPENAME ContainerT::value_type value_type;$/;"	t	struct:boost::algorithm::detail::default_container_traits	access:public
value_type	/usr/include/boost/range/detail/collection_traits_detail.hpp	/^                typedef T value_type;$/;"	t	struct:boost::algorithm::detail::array_traits	access:public
value_type	/usr/include/boost/range/iterator_range.hpp	/^                iterator_value<IteratorT>::type value_type;$/;"	t	class:boost::iterator_range	access:public
value_type	/usr/include/boost/range/sub_range.hpp	/^        typedef BOOST_DEDUCED_TYPENAME range_value<ForwardRange>::type            value_type;$/;"	t	class:boost::sub_range	access:public
value_type_of	/usr/include/boost/range/detail/collection_traits.hpp	/^        struct value_type_of$/;"	s	namespace:boost::algorithm
val_t	/usr/include/boost/range/atl.hpp	/^            typedef ATL::CAutoPtr<E> val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/atl.hpp	/^            typedef ATL::CComQIPtr<I, piid> val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/atl.hpp	/^            typedef ATL::CHeapPtr<E, Allocator> val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/atl.hpp	/^            typedef E val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/atl.hpp	/^            typedef T val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/atl.hpp	/^            typedef typename X::CPair val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/mfc.hpp	/^            typedef ::CString val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/mfc.hpp	/^            typedef BYTE val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/mfc.hpp	/^            typedef DWORD val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/mfc.hpp	/^            typedef Type val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/mfc.hpp	/^            typedef typename remove_pointer<PtrType>::type val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::fun	access:public
val_t	/usr/include/boost/range/mfc.hpp	/^            typedef typename remove_pointer<PtrType>::type val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/mfc.hpp	/^            typedef UINT val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t	/usr/include/boost/range/mfc.hpp	/^            typedef WORD val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
val_t_	/usr/include/boost/range/mfc.hpp	/^            >::type val_t_;$/;"	t	struct:boost::range_detail_microsoft::customization::fun	access:public
v_citer_t	/usr/include/boost/range/atl.hpp	/^            typedef v_val_t const *v_citer_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
v_miter_t	/usr/include/boost/range/atl.hpp	/^            typedef v_val_t *v_miter_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
v_val_t	/usr/include/boost/range/atl.hpp	/^            typedef TVal v_val_t;$/;"	t	struct:boost::range_detail_microsoft::customization::meta	access:public
wchar_array_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    wchar_ptr_t >::type wchar_array_t;$/;"	t	class:boost::range_detail::range	access:private
wchar_ptr_t	/usr/include/boost/range/detail/common.hpp	/^                                                                    const_wchar_ptr_t >::type wchar_ptr_t;$/;"	t	class:boost::range_detail::range	access:private
wchar_t_array_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<7>::type    wchar_t_array_;$/;"	t	namespace:boost::range_detail
wchar_t_ptr_	/usr/include/boost/range/detail/common.hpp	/^        typedef mpl::int_<10>::type   wchar_t_ptr_;$/;"	t	namespace:boost::range_detail
