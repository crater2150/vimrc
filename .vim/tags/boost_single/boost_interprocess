!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	2	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
a	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   node_alloc_holder(BOOST_INTERPROCESS_RV_REF(ValAlloc) a, const Pred &c) $/;"	m	namespace:boost::container::containers_detail
a	/usr/include/boost/interprocess/containers/container/string.hpp	/^      long_alignment_type  a;$/;"	m	struct:boost::container::containers_detail::basic_string_base::long_raw_t	access:public
abs_time	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_INTERPROCESS_RV_REF(upgradable_lock<T>) upgr, boost::posix_time::ptime &abs_time$/;"	m	class:boost::interprocess::scoped_lock	access:public
accept_ownership	/usr/include/boost/interprocess/sync/lock_options.hpp	/^static const accept_ownership_type  accept_ownership = accept_ownership_type();$/;"	m	namespace:boost::interprocess
accept_ownership_type	/usr/include/boost/interprocess/sync/lock_options.hpp	/^struct accept_ownership_type{};$/;"	s	namespace:boost::interprocess
AceCount	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short AceCount;$/;"	m	struct:boost::interprocess::winapi::_interprocess_acl	access:public
AclRevision	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char  AclRevision;$/;"	m	struct:boost::interprocess::winapi::_interprocess_acl	access:public
AclSize	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short AclSize;$/;"	m	struct:boost::interprocess::winapi::_interprocess_acl	access:public
acquire_file_lock	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool acquire_file_lock(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd)
acquire_file_lock_sharable	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool acquire_file_lock_sharable(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd)
adaptive_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool$/;"	f	class:boost::interprocess::adaptive_pool	access:public	signature:(const adaptive_pool<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
adaptive_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool(SegmentManager *segment_mngr) $/;"	f	class:boost::interprocess::adaptive_pool	access:public	signature:(SegmentManager *segment_mngr)
adaptive_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^class adaptive_pool$/;"	c	namespace:boost::interprocess	inherits:detail::adaptive_pool_base
adaptive_pool_base	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_base$/;"	f	class:boost::interprocess::detail::adaptive_pool_base	access:public	signature:(const adaptive_pool_base<Version, T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
adaptive_pool_base	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_base(const adaptive_pool_base &other) $/;"	f	class:boost::interprocess::detail::adaptive_pool_base	access:public	signature:(const adaptive_pool_base &other)
adaptive_pool_base	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_base(segment_manager *segment_mngr) $/;"	f	class:boost::interprocess::detail::adaptive_pool_base	access:public	signature:(segment_manager *segment_mngr)
adaptive_pool_base	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^class adaptive_pool_base$/;"	c	namespace:boost::interprocess::detail	inherits:node_pool_allocation_impl
adaptive_pool_types	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^struct adaptive_pool_types$/;"	s	namespace:boost::container::containers_detail
adaptive_pool_v1	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_v1$/;"	f	class:boost::interprocess::detail::adaptive_pool_v1	access:public	signature:(const adaptive_pool_v1<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
adaptive_pool_v1	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_v1(SegmentManager *segment_mngr) $/;"	f	class:boost::interprocess::detail::adaptive_pool_v1	access:public	signature:(SegmentManager *segment_mngr)
adaptive_pool_v1	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^class adaptive_pool_v1$/;"	c	namespace:boost::interprocess::detail	inherits:adaptive_pool_base
addr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^         void *addr;$/;"	m	struct:boost::interprocess::flat_map_intersegment::segment_group_t::segment_data	access:public
addr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      void * addr;$/;"	m	struct:boost::interprocess::intersegment_base::direct_addressing	access:public
address	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   const_pointer address(const_reference value) const$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const_reference value) const
address	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   pointer address(reference value) const$/;"	f	class:boost::interprocess::allocator	access:public	signature:(reference value) const
address	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   const_pointer address(const_reference value) const$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:(const_reference value) const
address	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   pointer address(reference value) const$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:(reference value) const
address_of	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      void *address_of(std::size_t segment_id)$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:(std::size_t segment_id)
add_leading_slash	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void add_leading_slash(const char *name, std::string &new_name)$/;"	f	namespace:boost::interprocess::detail	signature:(const char *name, std::string &new_name)
add_ref_copy	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    void add_ref_copy()$/;"	f	class:boost::interprocess::detail::sp_counted_base	access:public	signature:()
add_ref_lock	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    bool add_ref_lock() \/\/ true on success$/;"	f	class:boost::interprocess::detail::sp_counted_base	access:public	signature:()
add_to_pool	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void add_to_pool(size_type n)$/;"	f	class:boost::container::stable_vector	access:private	signature:(size_type n)
add_to_pool	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void add_to_pool(size_type n, allocator_v1)$/;"	f	class:boost::container::stable_vector	access:private	signature:(size_type n, allocator_v1)
add_to_pool	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void add_to_pool(size_type n, allocator_v2)$/;"	f	class:boost::container::stable_vector	access:private	signature:(size_type n, allocator_v2)
advance	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void advance(Difference n)$/;"	f	class:boost::container::constant_iterator	access:private	signature:(Difference n)
advance	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void advance(Difference n)$/;"	f	class:boost::container::default_construct_iterator	access:private	signature:(Difference n)
advance	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void advance(Difference n)$/;"	f	class:boost::container::repeat_iterator	access:private	signature:(Difference n)
advance	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void advance(std::ptrdiff_t n)$/;"	f	class:boost::container::emplace_iterator	access:private	signature:(std::ptrdiff_t n)
advance	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   void advance(typename Iterator::difference_type n)$/;"	f	class:boost::container::transform_iterator	access:private	signature:(typename Iterator::difference_type n)
advance	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void advance(std::ptrdiff_t n)$/;"	f	class:boost::container::stable_vector_detail::iterator	access:private	signature:(std::ptrdiff_t n)
advance	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   void advance(typename Iterator::difference_type n)$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:(typename Iterator::difference_type n)
advanced_insert_aux_emplace	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   explicit advanced_insert_aux_emplace(Args&&... args)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:public	signature:(Args&&.... args)
advanced_insert_aux_emplace	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^struct advanced_insert_aux_emplace$/;"	s	namespace:boost::container::containers_detail	inherits:advanced_insert_aux_int
advanced_insert_aux_int	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^struct advanced_insert_aux_int$/;"	s	namespace:boost::container::containers_detail
advanced_insert_aux_int_t	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef containers_detail::advanced_insert_aux_int<value_type, iterator> advanced_insert_aux_int_t;$/;"	t	class:boost::container::deque	access:private
advanced_insert_aux_int_t	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef containers_detail::advanced_insert_aux_int<T, T*>    advanced_insert_aux_int_t;$/;"	t	class:boost::container::vector	access:private
advanced_insert_aux_proxy	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   advanced_insert_aux_proxy(FwdIt first, FwdIt last)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_proxy	access:public	signature:(FwdIt first, FwdIt last)
advanced_insert_aux_proxy	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^struct advanced_insert_aux_proxy$/;"	s	namespace:boost::container::containers_detail	inherits:advanced_insert_aux_int
advanced_sem_op	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^inline bool advanced_sem_op(int id, int value, bool undo = true)$/;"	f	namespace:boost::interprocess::xsi	signature:(int id, int value, bool undo = true)
advanced_sem_open_or_create	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^inline bool advanced_sem_open_or_create(::key_t key, int initval, int &semid, int perm)$/;"	f	namespace:boost::interprocess::xsi	signature:(::key_t key, int initval, int &semid, int perm)
advanced_sem_rm	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^inline bool advanced_sem_rm(int id)$/;"	f	namespace:boost::interprocess::xsi	signature:(int id)
algo_impl_t	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   typedef detail::memory_algorithm_common<simple_seq_fit_impl> algo_impl_t;$/;"	t	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
algo_impl_t	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef detail::memory_algorithm_common<rbtree_best_fit> algo_impl_t;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
align	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t align      = std::size_t(1) << align_bits;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
alignment	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   std::size_t alignment;$/;"	m	struct:boost::interprocess::detail::in_place_interface	access:public
Alignment	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const std::size_t Alignment              = MemoryAlgorithm::Alignment;$/;"	m	class:boost::interprocess::detail::memory_algorithm_common	access:public
Alignment	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   enum { Alignment      = boost::alignment_of<boost::detail::max_align>::value  };$/;"	e	enum:boost::interprocess::detail::simple_seq_fit_impl::__anon26
Alignment	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const std::size_t Alignment      = detail::alignment_of<detail::max_align>::value;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	access:public
Alignment	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t Alignment = !MemAlignment$/;"	m	class:boost::interprocess::rbtree_best_fit	access:public
AlignmentMask	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t AlignmentMask = (Alignment - 1);$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
AlignmentOfValueType	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static const size_type  AlignmentOfValueType =$/;"	m	class:boost::container::containers_detail::basic_string_base	access:protected
alignment_logic	/usr/include/boost/interprocess/containers/container/detail/type_traits.hpp	/^struct alignment_logic$/;"	s	namespace:boost::container::containers_detail
alignment_logic	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct alignment_logic$/;"	s	namespace:boost::interprocess::detail
alignment_of_hack	/usr/include/boost/interprocess/containers/container/detail/type_traits.hpp	/^    alignment_of_hack();$/;"	p	struct:boost::container::containers_detail::alignment_of_hack	access:public	signature:()
alignment_of_hack	/usr/include/boost/interprocess/containers/container/detail/type_traits.hpp	/^struct alignment_of_hack$/;"	s	namespace:boost::container::containers_detail
alignment_of_hack	/usr/include/boost/interprocess/detail/type_traits.hpp	/^    alignment_of_hack();$/;"	p	struct:boost::interprocess::detail::alignment_of_hack	access:public	signature:()
alignment_of_hack	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct alignment_of_hack$/;"	s	namespace:boost::interprocess::detail
AlignOnlyFalse	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef false_                      AlignOnlyFalse;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
AlignOnlyTrue	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef true_                       AlignOnlyTrue;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
align_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t align_bits = 12;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
align_nodes	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   static void align_nodes(impl_iterator first,impl_iterator last)$/;"	f	class:boost::container::stable_vector	access:private	signature:(impl_iterator first,impl_iterator last)
alloc	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   allocator_type &alloc() $/;"	f	class:boost::container::deque_base	access:protected	signature:()
alloc	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const allocator_type &alloc() const $/;"	f	class:boost::container::deque_base	access:protected	signature:() const
alloc	/usr/include/boost/interprocess/containers/container/string.hpp	/^   A &alloc()$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:()
alloc	/usr/include/boost/interprocess/containers/container/string.hpp	/^   const A &alloc() const$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:() const
alloc	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      :  base_t(static_cast<base_t&>(mx).alloc())$/;"	f	class:boost::container::vector	access:public	signature:()
alloc	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   A &alloc()$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:public	signature:()
alloc	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const A &alloc() const$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:public	signature:() const
alloc	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      allocator_type alloc;$/;"	m	struct:boost::interprocess::iunordered_set_index_aux::allocator_holder	access:public
allocate	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   pointer allocate(size_type count, cvoid_ptr hint = 0)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(size_type count, cvoid_ptr hint = 0)
allocate	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   pointer allocate(size_type count, cvoid_pointer hint = 0)$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:(size_type count, cvoid_pointer hint = 0)
allocate	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   pointer allocate(size_type count, cvoid_pointer hint = 0)$/;"	f	class:boost::interprocess::detail::node_pool_allocation_impl	access:public	signature:(size_type count, cvoid_pointer hint = 0)
allocate	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void* allocate             (std::size_t nbytes)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(std::size_t nbytes)
allocate	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void* allocate             (std::size_t nbytes, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(std::size_t nbytes, std::nothrow_t nothrow)
allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^   void* allocate             (std::size_t nbytes)$/;"	f	class:boost::interprocess::multi_simple_seq_fit	access:public	signature:(std::size_t nbytes)
allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   allocate(std::size_t nbytes)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t nbytes)
allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* allocate             (std::size_t nbytes);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t nbytes)
allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   allocate(std::size_t nbytes)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t nbytes)
allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void* allocate             (std::size_t nbytes);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t nbytes)
allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   allocate(std::size_t nbytes)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(std::size_t nbytes)
allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void* allocate             (std::size_t nbytes);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(std::size_t nbytes)
allocate	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * allocate (std::size_t nbytes, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::size_t nbytes, std::nothrow_t)
allocate	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * allocate(std::size_t nbytes)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::size_t nbytes)
AllocatedCtrlBytes	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const std::size_t AllocatedCtrlBytes     = MemoryAlgorithm::AllocatedCtrlBytes;$/;"	m	class:boost::interprocess::detail::memory_algorithm_common	access:public
AllocatedCtrlBytes	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const std::size_t AllocatedCtrlBytes = BlockCtrlBytes;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
AllocatedCtrlBytes	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t AllocatedCtrlBytes  = detail::ct_rounded_size<sizeof(SizeHolder), Alignment>::value;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
AllocatedCtrlUnits	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const std::size_t AllocatedCtrlUnits     = MemoryAlgorithm::AllocatedCtrlUnits;$/;"	m	class:boost::interprocess::detail::memory_algorithm_common	access:public
AllocatedCtrlUnits	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const std::size_t AllocatedCtrlUnits = BlockCtrlUnits;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
AllocatedCtrlUnits	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t AllocatedCtrlUnits  = AllocatedCtrlBytes\/Alignment;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
allocate_aligned	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void * allocate_aligned (std::size_t nbytes, std::size_t alignment, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(std::size_t nbytes, std::size_t alignment, std::nothrow_t nothrow)
allocate_aligned	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void * allocate_aligned(std::size_t nbytes, std::size_t alignment)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(std::size_t nbytes, std::size_t alignment)
allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void* allocate_aligned$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(MemoryAlgorithm *memory_algo, std::size_t nbytes, std::size_t alignment)
allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   allocate_aligned(std::size_t nbytes, std::size_t alignment)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t nbytes, std::size_t alignment)
allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* allocate_aligned     (std::size_t nbytes, std::size_t alignment);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t nbytes, std::size_t alignment)
allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   allocate_aligned(std::size_t nbytes, std::size_t alignment)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t nbytes, std::size_t alignment)
allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void* allocate_aligned     (std::size_t nbytes, std::size_t alignment);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t nbytes, std::size_t alignment)
allocate_aligned	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   allocate_aligned(std::size_t nbytes, std::size_t alignment)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(std::size_t nbytes, std::size_t alignment)
allocate_aligned	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void* allocate_aligned     (std::size_t nbytes, std::size_t alignment);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(std::size_t nbytes, std::size_t alignment)
allocate_aligned	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * allocate_aligned (std::size_t nbytes, std::size_t alignment, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::size_t nbytes, std::size_t alignment, std::nothrow_t)
allocate_aligned	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * allocate_aligned(std::size_t nbytes, std::size_t alignment)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::size_t nbytes, std::size_t alignment)
allocate_individual	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   multiallocation_chain allocate_individual$/;"	f	class:boost::interprocess::allocator	access:public	signature:(std::size_t num_elements)
allocate_individual	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   multiallocation_chain allocate_individual(std::size_t num_elements)$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:(std::size_t num_elements)
allocate_individual	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   multiallocation_chain allocate_individual(std::size_t num_elements)$/;"	f	class:boost::interprocess::detail::node_pool_allocation_impl	access:public	signature:(std::size_t num_elements)
allocate_initial_block	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void allocate_initial_block(std::size_t n)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(std::size_t n)
allocate_many	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   multiallocation_chain allocate_many$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const size_type *elem_sizes, size_type n_elements)
allocate_many	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   multiallocation_chain allocate_many$/;"	f	class:boost::interprocess::allocator	access:public	signature:(size_type elem_size, std::size_t num_elements)
allocate_many	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   multiallocation_chain allocate_many(const size_type *elem_sizes, size_type n_elements)$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:(const size_type *elem_sizes, size_type n_elements)
allocate_many	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   multiallocation_chain allocate_many(size_type elem_size, std::size_t num_elements)$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:(size_type elem_size, std::size_t num_elements)
allocate_many	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   multiallocation_chain allocate_many(const std::size_t *elem_sizes, std::size_t n_elements)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(const std::size_t *elem_sizes, std::size_t n_elements)
allocate_many	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   multiallocation_chain allocate_many(const std::size_t *elem_sizes, std::size_t n_elements, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(const std::size_t *elem_sizes, std::size_t n_elements, std::nothrow_t nothrow)
allocate_many	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   multiallocation_chain allocate_many(std::size_t elem_bytes, std::size_t num_elements)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(std::size_t elem_bytes, std::size_t num_elements)
allocate_many	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   multiallocation_chain allocate_many(std::size_t elem_bytes, std::size_t num_elements, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(std::size_t elem_bytes, std::size_t num_elements, std::nothrow_t nothrow)
allocate_many	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static multiallocation_chain allocate_many$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:( MemoryAlgorithm *memory_algo , const std::size_t *elem_sizes , std::size_t n_elements , std::size_t sizeof_element)
allocate_many	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static multiallocation_chain allocate_many$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(MemoryAlgorithm *memory_algo, std::size_t elem_bytes, std::size_t n_elements)
allocate_many	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      allocate_many(const std::size_t *elem_sizes, std::size_t n_elements, std::size_t sizeof_element)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(const std::size_t *elem_sizes, std::size_t n_elements, std::size_t sizeof_element)
allocate_many	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      allocate_many(std::size_t elem_bytes, std::size_t num_elements)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t elem_bytes, std::size_t num_elements)
allocate_many	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   multiallocation_chain allocate_many(const std::size_t *elem_sizes, std::size_t n_elements, std::size_t sizeof_element)$/;"	f	class:boost::interprocess::rbtree_best_fit	access:public	signature:(const std::size_t *elem_sizes, std::size_t n_elements, std::size_t sizeof_element)
allocate_many	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   multiallocation_chain allocate_many(std::size_t elem_bytes, std::size_t num_elements)$/;"	f	class:boost::interprocess::rbtree_best_fit	access:public	signature:(std::size_t elem_bytes, std::size_t num_elements)
allocate_many	/usr/include/boost/interprocess/segment_manager.hpp	/^   multiallocation_chain allocate_many$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(const std::size_t *element_lenghts, std::size_t n_elements, std::size_t sizeof_element = 1)
allocate_many	/usr/include/boost/interprocess/segment_manager.hpp	/^   multiallocation_chain allocate_many$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(const std::size_t *elem_sizes, std::size_t n_elements, std::size_t sizeof_element, std::nothrow_t)
allocate_many	/usr/include/boost/interprocess/segment_manager.hpp	/^   multiallocation_chain allocate_many$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::size_t elem_bytes, std::size_t num_elements, std::nothrow_t)
allocate_many	/usr/include/boost/interprocess/segment_manager.hpp	/^   multiallocation_chain allocate_many(std::size_t elem_bytes, std::size_t num_elements)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::size_t elem_bytes, std::size_t num_elements)
allocate_many_and_construct	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   FwdIterator allocate_many_and_construct$/;"	f	namespace:boost::container::containers_detail	signature:(FwdIterator beg, difference_type n, Inserter inserter)
allocate_new	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type allocate_new       = boost::container::allocate_new;$/;"	m	namespace:boost::interprocess
allocate_new	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^static const allocation_type allocate_new       = (allocation_type)allocate_new_v;$/;"	m	namespace:boost::container
allocate_new_v	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^   allocate_new_v   = 0x01,$/;"	e	enum:boost::container::allocation_type_v
allocate_node	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void *allocate_node()$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:()
allocate_node	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void *allocate_node()$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:()
allocate_node	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void *allocate_node()$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:()
allocate_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   multiallocation_chain allocate_nodes(const std::size_t n)$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:(const std::size_t n)
allocate_nodes	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   multiallocation_chain allocate_nodes(const std::size_t n)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:(const std::size_t n)
allocate_nodes	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   multiallocation_chain allocate_nodes(const std::size_t n)$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:(const std::size_t n)
allocate_one	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   pointer allocate_one()$/;"	f	class:boost::interprocess::allocator	access:public	signature:()
allocate_one	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   pointer allocate_one()$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:()
allocate_one	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   pointer allocate_one()$/;"	f	class:boost::interprocess::detail::node_pool_allocation_impl	access:public	signature:()
allocate_one	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   NodePtr allocate_one()$/;"	f	namespace:boost::container::containers_detail	signature:()
allocate_one	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   NodePtr allocate_one(allocator_v1)$/;"	f	namespace:boost::container::containers_detail	signature:(allocator_v1)
allocate_one	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   NodePtr allocate_one(allocator_v2)$/;"	f	namespace:boost::container::containers_detail	signature:(allocator_v2)
allocate_one	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   node_type_ptr_t allocate_one()$/;"	f	class:boost::container::stable_vector	access:private	signature:()
allocate_one	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   node_type_ptr_t allocate_one(allocator_v1)$/;"	f	class:boost::container::stable_vector	access:private	signature:(allocator_v1)
allocate_one	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   node_type_ptr_t allocate_one(allocator_v2)$/;"	f	class:boost::container::stable_vector	access:private	signature:(allocator_v2)
AllocationBase	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *         AllocationBase;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
AllocationProtect	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  AllocationProtect;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
allocation_command	/usr/include/boost/interprocess/allocators/allocator.hpp	/^      allocation_command(boost::interprocess::allocation_type command,$/;"	f	class:boost::interprocess::allocator	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, const pointer &reuse = 0)
allocation_command	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      allocation_command(boost::interprocess::allocation_type command,$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, const pointer &reuse = 0)
allocation_command	/usr/include/boost/interprocess/containers/container/string.hpp	/^      allocation_command(allocation_type command,$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, const pointer &reuse, allocator_v1)
allocation_command	/usr/include/boost/interprocess/containers/container/string.hpp	/^      allocation_command(allocation_type command,$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, pointer reuse = 0)
allocation_command	/usr/include/boost/interprocess/containers/container/string.hpp	/^      allocation_command(allocation_type command,$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, pointer reuse, allocator_v2)
allocation_command	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      allocation_command(allocation_type command,$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:public	signature:(allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, const pointer &reuse = 0)
allocation_command	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      allocation_command(allocation_type command,$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:public	signature:(allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, const pointer &reuse, allocator_v1)
allocation_command	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      allocation_command(allocation_type command,$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:public	signature:(allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, const pointer &reuse, allocator_v2)
allocation_command	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size,std::size_t &received_size, T *reuse_ptr = 0)
allocation_command	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size,std::size_t &received_size, void *reuse_ptr = 0, std::size_t backwards_multiple = 1)
allocation_command	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   allocation_command  (boost::interprocess::allocation_type command,   std::size_t min_size,$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command, std::size_t min_size, std::size_t preferred_size,std::size_t &received_size, void *reuse_ptr, std::size_t backwards_multiple)
allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size,std::size_t &received_size, T *reuse_ptr = 0)
allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size,std::size_t &received_size, T *reuse_ptr)
allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size,std::size_t &received_size, T *reuse_ptr = 0)
allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size,std::size_t &received_size, T *reuse_ptr)
allocation_command	/usr/include/boost/interprocess/segment_manager.hpp	/^      allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size,std::size_t &received_size, T *reuse_ptr = 0)
allocation_type	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^typedef int allocation_type;$/;"	t	namespace:boost::interprocess
allocation_type	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^typedef int allocation_type;$/;"	t	namespace:boost::container
allocation_type_v	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^enum allocation_type_v$/;"	g	namespace:boost::container
allocator	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   allocator(const allocator &other) $/;"	f	class:boost::interprocess::allocator	access:public	signature:(const allocator &other)
allocator	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   allocator(const allocator<T2, SegmentManager> &other) $/;"	f	class:boost::interprocess::allocator	access:public	signature:(const allocator<T2, SegmentManager> &other)
allocator	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   allocator(segment_manager *segment_mngr) $/;"	f	class:boost::interprocess::allocator	access:public	signature:(segment_manager *segment_mngr)
allocator	/usr/include/boost/interprocess/allocators/allocator.hpp	/^class allocator $/;"	c	namespace:boost::interprocess
allocator	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   struct allocator$/;"	s	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
allocator	/usr/include/boost/interprocess/segment_manager.hpp	/^   struct allocator$/;"	s	class:boost::interprocess::segment_manager	access:public
allocator_destroyer	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   allocator_destroyer(A &a)$/;"	f	class:boost::container::containers_detail::allocator_destroyer	access:public	signature:(A &a)
allocator_destroyer	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^class allocator_destroyer$/;"	c	namespace:boost::container::containers_detail
allocator_destroyer_and_chain_builder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   allocator_destroyer_and_chain_builder(A &a, multiallocation_chain &c)$/;"	f	class:boost::container::containers_detail::allocator_destroyer_and_chain_builder	access:public	signature:(A &a, multiallocation_chain &c)
allocator_destroyer_and_chain_builder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^class allocator_destroyer_and_chain_builder$/;"	c	namespace:boost::container::containers_detail
allocator_holder	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      allocator_holder(segment_manager_base *mngr)$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::allocator_holder	access:public	signature:(segment_manager_base *mngr)
allocator_holder	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      iunordered_set_index_aux<MapConfig>::allocator_holder    allocator_holder;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
allocator_holder	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   struct allocator_holder$/;"	s	struct:boost::interprocess::iunordered_set_index_aux	access:public
allocator_multialloc_chain_node_deallocator	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   allocator_multialloc_chain_node_deallocator(A &a)$/;"	f	class:boost::container::containers_detail::allocator_multialloc_chain_node_deallocator	access:public	signature:(A &a)
allocator_multialloc_chain_node_deallocator	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^class allocator_multialloc_chain_node_deallocator$/;"	c	namespace:boost::container::containers_detail
allocator_t	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef Alloc                                      allocator_t;$/;"	t	class:boost::container::containers_detail::flat_tree	access:private
allocator_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      rebind<T>::other                             allocator_type;$/;"	t	class:boost::container::deque_base	access:public
allocator_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef A allocator_type;$/;"	t	struct:boost::container::deque_value_traits	access:public
allocator_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Base::allocator_type        allocator_type;$/;"	t	class:boost::container::deque	access:public
allocator_type	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef typename vector_t::allocator_type          allocator_type;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
allocator_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef A                                          allocator_type;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
allocator_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::allocator_type         allocator_type;$/;"	t	class:boost::container::flat_map	access:public
allocator_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::allocator_type         allocator_type;$/;"	t	class:boost::container::flat_multimap	access:public
allocator_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::allocator_type         allocator_type;$/;"	t	class:boost::container::flat_multiset	access:public
allocator_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::allocator_type         allocator_type;$/;"	t	class:boost::container::flat_set	access:public
allocator_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef A                                       allocator_type;$/;"	t	class:boost::container::list	access:public
allocator_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::allocator_type         allocator_type;$/;"	t	class:boost::container::map	access:public
allocator_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::allocator_type         allocator_type;$/;"	t	class:boost::container::multimap	access:public
allocator_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::allocator_type         allocator_type;$/;"	t	class:boost::container::multiset	access:public
allocator_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::allocator_type         allocator_type;$/;"	t	class:boost::container::set	access:public
allocator_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef A                                       allocator_type;$/;"	t	class:boost::container::slist	access:public
allocator_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef Allocator                                  allocator_type;$/;"	t	class:boost::container::stable_vector	access:public
allocator_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef A                                       allocator_type;$/;"	t	class:boost::container::basic_string	access:public
allocator_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef A allocator_type;$/;"	t	class:boost::container::containers_detail::basic_string_base	access:public
allocator_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef A                                       allocator_type;$/;"	t	class:boost::container::vector	access:public
allocator_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef A allocator_type;$/;"	t	struct:boost::container::containers_detail::vector_value_traits	access:public
allocator_type	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^                    ,segment_manager_base>   allocator_type;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
allocator_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      <bucket_type, segment_manager_base>             allocator_type;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
allocator_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      iunordered_set_index_aux<MapConfig>::allocator_type      allocator_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
allocator_type	/usr/include/boost/interprocess/indexes/map_index.hpp	/^         segment_manager_base>                     allocator_type;$/;"	t	struct:boost::interprocess::detail::map_index_aux	access:public
allocator_type	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^                  segment_manager_base>      allocator_type;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
allocator_v1	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef containers_detail::integral_constant<unsigned, 1>     allocator_v1;$/;"	t	class:boost::container::containers_detail::allocator_destroyer	access:private
allocator_v1	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef containers_detail::integral_constant<unsigned, 1>     allocator_v1;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
allocator_v1	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef containers_detail::integral_constant<unsigned, 1>     allocator_v1;$/;"	t	struct:boost::container::containers_detail::scoped_deallocator	access:public
allocator_v1	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename AllocHolder::allocator_v1         allocator_v1;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
allocator_v1	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename AllocHolder::allocator_v1         allocator_v1;$/;"	t	class:boost::container::list	access:private
allocator_v1	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename AllocHolder::allocator_v1         allocator_v1;$/;"	t	class:boost::container::slist	access:private
allocator_v1	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      integral_constant<unsigned, 1>                  allocator_v1;$/;"	t	class:boost::container::stable_vector	access:private
allocator_v1	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef containers_detail::integral_constant<unsigned, 1>      allocator_v1;$/;"	t	class:boost::container::containers_detail::basic_string_base	access:protected
allocator_v1	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef containers_detail::integral_constant<unsigned, 1>      allocator_v1;$/;"	t	struct:boost::container::containers_detail::vector_alloc_holder	access:public
allocator_v1	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename base_t::allocator_v1           allocator_v1;$/;"	t	class:boost::container::vector	access:private
allocator_v1	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef detail::integral_constant<unsigned, 1>     allocator_v1;$/;"	t	struct:boost::interprocess::detail::scoped_ptr_dealloc_functor	access:public
allocator_v2	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef containers_detail::integral_constant<unsigned, 2>     allocator_v2;$/;"	t	class:boost::container::containers_detail::allocator_destroyer	access:private
allocator_v2	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef containers_detail::integral_constant<unsigned, 2>     allocator_v2;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
allocator_v2	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef containers_detail::integral_constant<unsigned, 2>     allocator_v2;$/;"	t	struct:boost::container::containers_detail::scoped_deallocator	access:public
allocator_v2	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename AllocHolder::allocator_v2         allocator_v2;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
allocator_v2	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename AllocHolder::allocator_v2         allocator_v2;$/;"	t	class:boost::container::list	access:private
allocator_v2	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename AllocHolder::allocator_v2         allocator_v2;$/;"	t	class:boost::container::slist	access:private
allocator_v2	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      integral_constant<unsigned, 2>                  allocator_v2;$/;"	t	class:boost::container::stable_vector	access:private
allocator_v2	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef containers_detail::integral_constant<unsigned, 2>      allocator_v2;$/;"	t	class:boost::container::containers_detail::basic_string_base	access:protected
allocator_v2	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef containers_detail::integral_constant<unsigned, 2>      allocator_v2;$/;"	t	struct:boost::container::containers_detail::vector_alloc_holder	access:public
allocator_v2	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename base_t::allocator_v2           allocator_v2;$/;"	t	class:boost::container::vector	access:private
allocator_v2	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef detail::integral_constant<unsigned, 2>     allocator_v2;$/;"	t	struct:boost::interprocess::detail::scoped_ptr_dealloc_functor	access:public
AllocHolder	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      :  AllocHolder(x, x.key_comp())$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(x, x.key_comp())
AllocHolder	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef containers_detail::node_alloc_holder<A, Icont>        AllocHolder;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
AllocHolder	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef containers_detail::node_alloc_holder<A, Icont>        AllocHolder;$/;"	t	class:boost::container::list	access:private
AllocHolder	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      : AllocHolder(boost::interprocess::move((AllocHolder&)x))$/;"	f	class:boost::container::slist	access:public	signature:(AllocHolder&)x
AllocHolder	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef containers_detail::node_alloc_holder<A, Icont>        AllocHolder;$/;"	t	class:boost::container::slist	access:private
alloc_ptr_t	/usr/include/boost/interprocess/allocators/allocator.hpp	/^      <cvoid_ptr, segment_manager>::type     alloc_ptr_t;$/;"	t	class:boost::interprocess::allocator	access:private
alloc_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t alloc_type() const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:() const
alloc_version	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^         version<A>::value>                           alloc_version;$/;"	t	class:boost::container::containers_detail::allocator_destroyer	access:private
alloc_version	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^         version<Allocator>::value>                   alloc_version;$/;"	t	struct:boost::container::containers_detail::scoped_deallocator	access:public
alloc_version	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^         version<NodeAlloc>::value>                   alloc_version;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
alloc_version	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename AllocHolder::alloc_version        alloc_version;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
alloc_version	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename AllocHolder::alloc_version        alloc_version;$/;"	t	class:boost::container::list	access:private
alloc_version	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename AllocHolder::alloc_version        alloc_version;$/;"	t	class:boost::container::slist	access:private
alloc_version	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      version<Allocator>::value>                      alloc_version;$/;"	t	class:boost::container::stable_vector	access:private
alloc_version	/usr/include/boost/interprocess/containers/container/string.hpp	/^      boost::container::containers_detail::version<A>::value> alloc_version;$/;"	t	class:boost::container::containers_detail::basic_string_base	access:protected
alloc_version	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      boost::container::containers_detail::version<A>::value> alloc_version;$/;"	t	struct:boost::container::containers_detail::vector_alloc_holder	access:public
alloc_version	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename base_t::alloc_version          alloc_version;$/;"	t	class:boost::container::vector	access:private
alloc_version	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^      boost::interprocess::version<Allocator>::value>                   alloc_version;$/;"	t	struct:boost::interprocess::detail::scoped_ptr_dealloc_functor	access:public
all_memory_deallocated	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool all_memory_deallocated()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:()
all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^    all_memory_deallocated()$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:()
all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   bool all_memory_deallocated();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:()
all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^    all_memory_deallocated()$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:()
all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   bool all_memory_deallocated();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:()
all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^    all_memory_deallocated()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   bool all_memory_deallocated();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:()
all_memory_deallocated	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool all_memory_deallocated()$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:()
already_exists_error	/usr/include/boost/interprocess/errors.hpp	/^   already_exists_error,$/;"	e	enum:boost::interprocess::error_code_t
anonymous_instance	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^static const detail::anonymous_instance_t   * anonymous_instance = 0;$/;"	m	namespace:boost::interprocess
anonymous_instance_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^typedef instance_t<anonymous_type>  anonymous_instance_t;$/;"	t	namespace:boost::interprocess::detail
anonymous_shared_memory	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^anonymous_shared_memory(std::size_t size, void *address = 0)$/;"	f	namespace:boost::interprocess	signature:(std::size_t size, void *address = 0)
anonymous_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^enum instance_type {   anonymous_type, named_type, unique_type, max_allocation_type };$/;"	e	enum:boost::interprocess::instance_type
append	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& append(const basic_string& s) $/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s)
append	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& append(const basic_string& s, size_type pos, size_type n)$/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s, size_type pos, size_type n)
append	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& append(const CharT* s) $/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s)
append	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& append(const CharT* s, size_type n) $/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type n)
append	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& append(InputIter first, InputIter last)$/;"	f	class:boost::container::basic_string	access:public	signature:(InputIter first, InputIter last)
append	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& append(size_type n, CharT c)$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type n, CharT c)
args_	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   tuple<Args&&...> args_;$/;"	m	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:private
args_	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   containers_detail::tuple<Args&&...> args_;$/;"	m	struct:boost::container::emplace_functor	access:public
args_	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   tuple<Args&&...> args_;$/;"	m	struct:boost::interprocess::detail::CtorNArg	access:private
array_allocation_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^class array_allocation_impl$/;"	c	namespace:boost::interprocess::detail
array_construct	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^inline void array_construct(void *mem, std::size_t num, detail::in_place_interface &table)$/;"	f	namespace:boost::interprocess::detail	signature:(void *mem, std::size_t num, detail::in_place_interface &table)
assert_alignment	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void assert_alignment(const void *ptr)$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(const void *ptr)
assert_alignment	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void assert_alignment(std::size_t uint_ptr)$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(std::size_t uint_ptr)
assign	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void assign(InpIt first, InpIt last)$/;"	f	class:boost::container::deque	access:public	signature:(InpIt first, InpIt last)
assign	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void assign(size_type n, const T& val)$/;"	f	class:boost::container::deque	access:public	signature:(size_type n, const T& val)
assign	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      void assign (const ConvertibleToAlloc &c2alloc)$/;"	f	struct:boost::container::containers_detail::members_holder	access:public	signature:(const ConvertibleToAlloc &c2alloc)
assign	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void assign(InpIt first, InpIt last) $/;"	f	class:boost::container::list	access:public	signature:(InpIt first, InpIt last)
assign	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void assign(size_type n, const T& val) $/;"	f	class:boost::container::list	access:public	signature:(size_type n, const T& val)
assign	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void assign(InpIt first, InpIt last) $/;"	f	class:boost::container::slist	access:public	signature:(InpIt first, InpIt last)
assign	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void assign(size_type n, const T& val)$/;"	f	class:boost::container::slist	access:public	signature:(size_type n, const T& val)
assign	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void assign(InputIterator first,InputIterator last)$/;"	f	class:boost::container::stable_vector	access:public	signature:(InputIterator first,InputIterator last)
assign	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void assign(size_type n,const T& t)$/;"	f	class:boost::container::stable_vector	access:public	signature:(size_type n,const T& t)
assign	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& assign(const basic_string& s) $/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s)
assign	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& assign(const basic_string& s, $/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s, size_type pos, size_type n)
assign	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& assign(const CharT* f, const CharT* l)$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* f, const CharT* l)
assign	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& assign(const CharT* s)$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s)
assign	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& assign(const CharT* s, size_type n)$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type n)
assign	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& assign(InputIter first, InputIter last) $/;"	f	class:boost::container::basic_string	access:public	signature:(InputIter first, InputIter last)
assign	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& assign(size_type n, CharT c)$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type n, CharT c)
assign	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void assign(InIt first, InIt last) $/;"	f	class:boost::container::vector	access:public	signature:(InIt first, InIt last)
assign	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void assign(size_type n, const value_type& val)$/;"	f	class:boost::container::vector	access:public	signature:(size_type n, const value_type& val)
assign_dispatch	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void assign_dispatch(InputIterator first, InputIterator last, boost::mpl::false_)$/;"	f	class:boost::container::stable_vector	access:private	signature:(InputIterator first, InputIterator last, boost::mpl::false_)
assign_dispatch	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void assign_dispatch(Integer n, Integer t, boost::mpl::true_)$/;"	f	class:boost::container::stable_vector	access:private	signature:(Integer n, Integer t, boost::mpl::true_)
at	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_reference at(size_type n) const$/;"	f	class:boost::container::deque	access:public	signature:(size_type n) const
at	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   reference at(size_type n)$/;"	f	class:boost::container::deque	access:public	signature:(size_type n)
at	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const T& at(const key_type& k) const$/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& k) const
at	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   T& at(const key_type& k)$/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& k)
at	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const T& at(const key_type& k) const$/;"	f	class:boost::container::map	access:public	signature:(const key_type& k) const
at	/usr/include/boost/interprocess/containers/container/map.hpp	/^   T& at(const key_type& k)$/;"	f	class:boost::container::map	access:public	signature:(const key_type& k)
at	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_reference at(size_type n)const$/;"	f	class:boost::container::stable_vector	access:public	signature:(size_type n) const
at	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   reference at(size_type n)$/;"	f	class:boost::container::stable_vector	access:public	signature:(size_type n)
at	/usr/include/boost/interprocess/containers/container/string.hpp	/^   const_reference at(size_type n) const {$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type n) const
at	/usr/include/boost/interprocess/containers/container/string.hpp	/^   reference at(size_type n) {$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type n)
at	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_reference at(size_type n) const$/;"	f	class:boost::container::vector	access:public	signature:(size_type n) const
at	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   reference at(size_type n)$/;"	f	class:boost::container::vector	access:public	signature:(size_type n)
atomic_add_unless32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline bool atomic_add_unless32$/;"	f	namespace:boost::interprocess::detail	signature:(volatile boost::uint32_t *mem, boost::uint32_t value, volatile boost::uint32_t unless_this)
atomic_cas32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_cas32$/;"	f	namespace:boost::interprocess::detail	signature:(volatile boost::uint32_t *mem, boost::uint32_t with, boost::uint32_t cmp)
atomic_cas32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_cas32$/;"	p	namespace:boost::interprocess::detail	signature:(volatile boost::uint32_t *mem, boost::uint32_t with, boost::uint32_t cmp)
atomic_dec32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_dec32(volatile boost::uint32_t *mem)$/;"	f	namespace:boost::interprocess::detail	signature:(volatile boost::uint32_t *mem)
atomic_func	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void atomic_func(Func &f)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(Func &f)
atomic_func	/usr/include/boost/interprocess/segment_manager.hpp	/^   void atomic_func(Func &f)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(Func &f)
atomic_inc32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_inc32(volatile boost::uint32_t *mem)$/;"	f	namespace:boost::interprocess::detail	signature:(volatile boost::uint32_t *mem)
atomic_inc32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_inc32(volatile boost::uint32_t *mem);$/;"	p	namespace:boost::interprocess::detail	signature:(volatile boost::uint32_t *mem)
atomic_read32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_read32(volatile boost::uint32_t *mem)$/;"	f	namespace:boost::interprocess::detail	signature:(volatile boost::uint32_t *mem)
atomic_read32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_read32(volatile boost::uint32_t *mem);$/;"	p	namespace:boost::interprocess::detail	signature:(volatile boost::uint32_t *mem)
atomic_write32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline void atomic_write32(volatile boost::uint32_t *mem, boost::uint32_t val)$/;"	f	namespace:boost::interprocess::detail	signature:(volatile boost::uint32_t *mem, boost::uint32_t val)
atomic_write32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline void atomic_write32(volatile boost::uint32_t *mem, boost::uint32_t val);$/;"	p	namespace:boost::interprocess::detail	signature:(volatile boost::uint32_t *mem, boost::uint32_t val)
Attributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long Attributes;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
aux_pointer_t	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef typename segment_manager::void_pointer  aux_pointer_t;$/;"	t	class:boost::interprocess::allocator	access:private
a_	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   A & a_;$/;"	m	class:boost::container::containers_detail::allocator_destroyer	access:private
a_	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   A & a_;$/;"	m	class:boost::container::containers_detail::allocator_destroyer_and_chain_builder	access:private
a_	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   A & a_;$/;"	m	class:boost::container::containers_detail::allocator_multialloc_chain_node_deallocator	access:private
b	/usr/include/boost/interprocess/containers/container/string.hpp	/^      unsigned char        b[sizeof(long_t) - sizeof(long_alignment_type)];$/;"	m	struct:boost::container::containers_detail::basic_string_base::long_raw_t	access:public
back	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_reference back() const  {  return *(cend()-1);  }$/;"	f	class:boost::container::deque	access:public	signature:() const
back	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   reference back()  {  return *(end()-1); }$/;"	f	class:boost::container::deque	access:public	signature:()
back	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const_reference back()  const $/;"	f	class:boost::container::list	access:public	signature:() const
back	/usr/include/boost/interprocess/containers/container/list.hpp	/^   reference back()              $/;"	f	class:boost::container::list	access:public	signature:()
back	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_reference back()const$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
back	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   reference back()$/;"	f	class:boost::container::stable_vector	access:public	signature:()
back	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_reference   back()  const $/;"	f	class:boost::container::vector	access:public	signature:() const
back	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   reference         back()        $/;"	f	class:boost::container::vector	access:public	signature:()
back_insertion_functor	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      back_insertion_functor(Icont &icont)$/;"	f	class:boost::container::containers_detail::rbtree::back_insertion_functor	access:public	signature:(Icont &icont)
back_insertion_functor	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   class back_insertion_functor$/;"	c	class:boost::container::containers_detail::rbtree	access:private
back_move_inserter	/usr/include/boost/interprocess/detail/move.hpp	/^inline back_move_insert_iterator<C> back_move_inserter(C& x)$/;"	f	namespace:boost::interprocess	signature:(C& x)
back_move_insert_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^   explicit back_move_insert_iterator(C& x) : container_m(&x) { }$/;"	f	class:boost::interprocess::back_move_insert_iterator	access:public	signature:(C& x)
back_move_insert_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^class back_move_insert_iterator$/;"	c	namespace:boost::interprocess	inherits:std::iterator
bad_alloc	/usr/include/boost/interprocess/exceptions.hpp	/^class bad_alloc : public interprocess_exception$/;"	c	namespace:boost::interprocess	inherits:interprocess_exception
bad_weak_ptr	/usr/include/boost/interprocess/smart_ptr/detail/bad_weak_ptr.hpp	/^class bad_weak_ptr$/;"	c	namespace:boost::interprocess	inherits:std::exception
barrier	/usr/include/boost/interprocess/sync/emulation/interprocess_barrier.hpp	/^inline barrier::barrier(unsigned int count)$/;"	f	class:boost::interprocess::barrier	signature:(unsigned int count)
barrier	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^   barrier(unsigned int count);$/;"	p	class:boost::interprocess::barrier	access:public	signature:(unsigned int count)
barrier	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^class barrier$/;"	c	namespace:boost::interprocess
barrier	/usr/include/boost/interprocess/sync/posix/interprocess_barrier.hpp	/^inline barrier::barrier(unsigned int count)$/;"	f	class:boost::interprocess::barrier	signature:(unsigned int count)
barrierattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      barrierattr_wrapper()$/;"	f	struct:boost::interprocess::detail::barrierattr_wrapper	access:public	signature:()
barrierattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   struct barrierattr_wrapper $/;"	s	namespace:boost::interprocess::detail
barrier_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      barrier_initializer(pthread_barrier_t &mut, $/;"	f	class:boost::interprocess::detail::barrier_initializer	access:public	signature:(pthread_barrier_t &mut, pthread_barrierattr_t &mut_attr, int count)
barrier_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   class barrier_initializer$/;"	c	namespace:boost::interprocess::detail
Base	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      :  Base(mx.alloc())$/;"	f	class:boost::container::deque	access:public	signature:(mx.alloc())
Base	/usr/include/boost/interprocess/containers/container/deque.hpp	/^  typedef deque_base<T, Alloc> Base;$/;"	t	class:boost::container::deque	access:private
base	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   const Iterator & base() const$/;"	f	class:boost::container::transform_iterator	access:public	signature:() const
base	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   Iterator & base()$/;"	f	class:boost::container::transform_iterator	access:public	signature:()
base	/usr/include/boost/interprocess/detail/move.hpp	/^   iterator_type base() const$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:() const
base	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   const Iterator & base() const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:() const
base	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   Iterator & base()$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:()
Base	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef segment_manager_base<MemoryAlgorithm> Base;$/;"	t	class:boost::interprocess::segment_manager	access:private
base2_t	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^      <shared_memory_object>                       base2_t;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:private
BaseAddress	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *         BaseAddress;  $/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
base_constants_t	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   struct base_constants_t$/;"	s	class:boost::interprocess::interprocess_upgradable_mutex	access:private
base_t	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^         < 1, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> base_t;$/;"	t	class:boost::interprocess::detail::adaptive_pool_v1	access:public
base_t	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^         < 2, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> base_t;$/;"	t	class:boost::interprocess::adaptive_pool	access:private
base_t	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^         , 1> base_t;$/;"	t	class:boost::interprocess::detail::cached_adaptive_pool_v1	access:public
base_t	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^         , 2> base_t;$/;"	t	class:boost::interprocess::cached_adaptive_pool	access:public
base_t	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^         , 1> base_t;$/;"	t	class:boost::interprocess::detail::cached_node_allocator_v1	access:public
base_t	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^         , 2> base_t;$/;"	t	class:boost::interprocess::cached_node_allocator	access:public
base_t	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^      <typename SegmentManager::segment_manager_base_type> base_t;$/;"	t	class:boost::interprocess::detail::private_adaptive_node_pool	access:private
base_t	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^      > base_t;$/;"	t	class:boost::interprocess::detail::shared_adaptive_node_pool	access:private
base_t	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^         , typename NodePool::segment_manager> base_t;$/;"	t	class:boost::interprocess::detail::cached_allocator_impl	access:private
base_t	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^      <typename SegmentManager::segment_manager_base_type> base_t;$/;"	t	class:boost::interprocess::detail::private_node_pool	access:private
base_t	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^      > base_t;$/;"	t	class:boost::interprocess::detail::shared_node_pool	access:private
base_t	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^         < 1, T, SegmentManager, NodesPerBlock> base_t;$/;"	t	class:boost::interprocess::detail::node_allocator_v1	access:public
base_t	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^         < 2, T, SegmentManager, NodesPerBlock> base_t;$/;"	t	class:boost::interprocess::node_allocator	access:private
base_t	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^         < 1, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> base_t;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_v1	access:public
base_t	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^         < 2, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> base_t;$/;"	t	class:boost::interprocess::private_adaptive_pool	access:private
base_t	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^         < 1, T, SegmentManager, NodesPerBlock> base_t;$/;"	t	class:boost::interprocess::detail::private_node_allocator_v1	access:public
base_t	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^         < 2, T, SegmentManager, NodesPerBlock> base_t;$/;"	t	class:boost::interprocess::private_node_allocator	access:private
base_t	/usr/include/boost/interprocess/containers/container/string.hpp	/^      : base_t(boost::interprocess::move((base_t&)s))$/;"	f	class:boost::container::basic_string	access:public	signature:(base_t&)s
base_t	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef containers_detail::basic_string_base<A> base_t;$/;"	t	class:boost::container::basic_string	access:private
base_t	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef containers_detail::vector_alloc_holder<A> base_t;$/;"	t	class:boost::container::vector	access:private
base_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef PT                                      base_t;$/;"	t	class:boost::interprocess::intersegment_ptr	access:private
base_t	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      <CharType, MemoryAlgorithm, IndexType>                   base_t;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
base_t	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^      <CharType, AllocationAlgorithm, IndexType>    base_t;$/;"	t	class:boost::interprocess::basic_managed_external_buffer	access:private
base_t	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^      <CharType, AllocationAlgorithm, IndexType>             base_t;$/;"	t	class:boost::interprocess::basic_managed_heap_memory	access:private
base_t	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^      detail::managed_open_or_create_impl<detail::file_wrapper>::ManagedOpenOrCreateUserOffset>   base_t;$/;"	t	class:boost::interprocess::basic_managed_mapped_file	access:public
base_t	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^      detail::managed_open_or_create_impl<shared_memory_object>::ManagedOpenOrCreateUserOffset>   base_t;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:private
base_t	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^      detail::managed_open_or_create_impl<windows_shared_memory>::ManagedOpenOrCreateUserOffset>   base_t;$/;"	t	class:boost::interprocess::basic_managed_windows_shared_memory	access:private
base_t	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^   typedef detail::simple_seq_fit_impl<MutexFamily, VoidPtr> base_t;$/;"	t	class:boost::interprocess::multi_simple_seq_fit	access:private
base_t	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	/^   typedef detail::simple_seq_fit_impl<MutexFamily, VoidPointer> base_t;$/;"	t	class:boost::interprocess::simple_seq_fit	access:private
base_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_iostream<char_type, CharTraits>            base_t;$/;"	t	class:boost::interprocess::basic_bufferstream	access:private
base_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_istream<char_type, CharTraits>            base_t;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:private
base_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_ostream<char_type, CharTraits>  base_t;$/;"	t	class:boost::interprocess::basic_obufferstream	access:private
base_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_streambuf<char_type, traits_type>  base_t;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
base_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_iostream<char_type, CharTraits>            base_t;$/;"	t	class:boost::interprocess::basic_vectorstream	access:private
base_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_istream<char_type, CharTraits>            base_t;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:private
base_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_ostream<char_type, CharTraits>  base_t;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:private
base_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_streambuf<char_type, traits_type> base_t;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:private
base_type	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef typename index_aux::index_t    base_type;$/;"	t	class:boost::interprocess::flat_map_index	access:private
base_type	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef typename index_aux::index_t       base_type;$/;"	t	class:boost::interprocess::map_index	access:private
base_type	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef typename index_aux::index_t          base_type;$/;"	t	class:boost::interprocess::unordered_map_index	access:private
basic_bufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   explicit basic_bufferbuf(CharT *buffer, std::size_t length, $/;"	f	class:boost::interprocess::basic_bufferbuf	access:public	signature:(CharT *buffer, std::size_t length, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
basic_bufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   explicit basic_bufferbuf(std::ios_base::openmode mode$/;"	f	class:boost::interprocess::basic_bufferbuf	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
basic_bufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^class basic_bufferbuf $/;"	c	namespace:boost::interprocess	inherits:std::basic_streambuf
basic_bufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferstream(CharT *buffer, std::size_t length,$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:(CharT *buffer, std::size_t length, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
basic_bufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferstream(std::ios_base::openmode mode $/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
basic_bufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^class basic_bufferstream $/;"	c	namespace:boost::interprocess	inherits:std::basic_iostream
basic_ibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_ibufferstream(const CharT *buffer, std::size_t length,$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:(const CharT *buffer, std::size_t length, std::ios_base::openmode mode = std::ios_base::in)
basic_ibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_ibufferstream(std::ios_base::openmode mode = std::ios_base::in)$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in)
basic_ibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^class basic_ibufferstream$/;"	c	namespace:boost::interprocess	inherits:std::basic_istream
basic_ios_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_ios<char_type, CharTraits>                 basic_ios_t;$/;"	t	class:boost::interprocess::basic_bufferstream	access:private
basic_ios_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_ios<char_type, CharTraits>                basic_ios_t;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:private
basic_ios_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_ios<char_type, CharTraits>      basic_ios_t;$/;"	t	class:boost::interprocess::basic_obufferstream	access:private
basic_ios_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_ios<char_type, CharTraits>                 basic_ios_t;$/;"	t	class:boost::interprocess::basic_vectorstream	access:private
basic_ios_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_ios<char_type, CharTraits>                basic_ios_t;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:private
basic_ios_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_ios<char_type, CharTraits>      basic_ios_t;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:private
basic_ivectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_ivectorstream(const VectorParameter &param,$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:(const VectorParameter &param, std::ios_base::openmode mode = std::ios_base::in)
basic_ivectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_ivectorstream(std::ios_base::openmode mode = std::ios_base::in)$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in)
basic_ivectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^class basic_ivectorstream$/;"	c	namespace:boost::interprocess	inherits:std::basic_istream
basic_managed_external_buffer	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   basic_managed_external_buffer$/;"	f	class:boost::interprocess::basic_managed_external_buffer	access:public	signature:(create_only_t, void *addr, std::size_t size)
basic_managed_external_buffer	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   basic_managed_external_buffer$/;"	f	class:boost::interprocess::basic_managed_external_buffer	access:public	signature:(open_only_t, void *addr, std::size_t size)
basic_managed_external_buffer	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   basic_managed_external_buffer()$/;"	f	class:boost::interprocess::basic_managed_external_buffer	access:public	signature:()
basic_managed_external_buffer	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^class basic_managed_external_buffer $/;"	c	namespace:boost::interprocess	inherits:detail::basic_managed_memory_impl
basic_managed_heap_memory	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   basic_managed_heap_memory(){}$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:public	signature:()
basic_managed_heap_memory	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   basic_managed_heap_memory(std::size_t size)$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:public	signature:(std::size_t size)
basic_managed_heap_memory	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^class basic_managed_heap_memory $/;"	c	namespace:boost::interprocess	inherits:detail::basic_managed_memory_impl
basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file (open_copy_on_write_t, const char* name, $/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(open_copy_on_write_t, const char* name, const void *addr = 0)
basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file (open_only_t open_only, const char* name, $/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(open_only_t open_only, const char* name, const void *addr = 0)
basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file (open_or_create_t open_or_create,$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(open_or_create_t open_or_create, const char *name, std::size_t size, const void *addr = 0)
basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file (open_read_only_t, const char* name, $/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(open_read_only_t, const char* name, const void *addr = 0)
basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file()$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:()
basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file(create_only_t create_only, const char *name,$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(create_only_t create_only, const char *name, std::size_t size, const void *addr = 0)
basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^class basic_managed_mapped_file $/;"	c	namespace:boost::interprocess	inherits:detail::basic_managed_memory_impl
basic_managed_memory_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   basic_managed_memory_impl() $/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:()
basic_managed_memory_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   basic_managed_memory_impl(const basic_managed_memory_impl &);$/;"	p	class:boost::interprocess::detail::basic_managed_memory_impl	access:private	signature:(const basic_managed_memory_impl &)
basic_managed_memory_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^class basic_managed_memory_impl$/;"	c	namespace:boost::interprocess::detail
basic_managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   basic_managed_multi_shared_memory(create_only_t,$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:public	signature:(create_only_t, const char *name, std::size_t size)
basic_managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   basic_managed_multi_shared_memory(open_only_t, const char *name)$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:public	signature:(open_only_t, const char *name)
basic_managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   basic_managed_multi_shared_memory(open_or_create_t,$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:public	signature:(open_or_create_t, const char *name, std::size_t size)
basic_managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^class basic_managed_multi_shared_memory $/;"	c	namespace:boost::interprocess	inherits:detail::basic_managed_memory_impl
basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory (open_copy_on_write_t, const char* name, $/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(open_copy_on_write_t, const char* name, const void *addr = 0)
basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory (open_only_t open_only, const char* name, $/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(open_only_t open_only, const char* name, const void *addr = 0)
basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory (open_or_create_t open_or_create,$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(open_or_create_t open_or_create, const char *name, std::size_t size, const void *addr = 0)
basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory (open_read_only_t, const char* name, $/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(open_read_only_t, const char* name, const void *addr = 0)
basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:()
basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory(create_only_t create_only, const char *name,$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(create_only_t create_only, const char *name, std::size_t size, const void *addr = 0)
basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^class basic_managed_shared_memory $/;"	c	namespace:boost::interprocess	inherits:detail::basic_managed_memory_impl,detail::managed_open_or_create_impl
basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(create_only_t create_only, const char *name, std::size_t size, const void *addr = 0)
basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(open_copy_on_write_t, const char* name, const void *addr = 0)
basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(open_only_t open_only, const char* name, const void *addr = 0)
basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(open_or_create_t open_or_create, const char *name, std::size_t size, const void *addr = 0)
basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(open_read_only_t, const char* name, const void *addr = 0)
basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:()
basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^class basic_managed_windows_shared_memory $/;"	c	namespace:boost::interprocess	inherits:detail::basic_managed_memory_impl
basic_multiallocation_chain	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   basic_multiallocation_chain()$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:()
basic_multiallocation_chain	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^class basic_multiallocation_chain$/;"	c	namespace:boost::container::containers_detail
basic_obufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_obufferstream(CharT *buffer, std::size_t length,$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:(CharT *buffer, std::size_t length, std::ios_base::openmode mode = std::ios_base::out)
basic_obufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_obufferstream(std::ios_base::openmode mode = std::ios_base::out)$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::out)
basic_obufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^class basic_obufferstream$/;"	c	namespace:boost::interprocess	inherits:std::basic_ostream
basic_ovectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_ovectorstream(const VectorParameter &param,$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:(const VectorParameter &param, std::ios_base::openmode mode = std::ios_base::out)
basic_ovectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_ovectorstream(std::ios_base::openmode mode = std::ios_base::out)$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::out)
basic_ovectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^class basic_ovectorstream$/;"	c	namespace:boost::interprocess	inherits:std::basic_ostream
basic_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string(const basic_string& s) $/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s)
basic_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string(const basic_string& s, size_type pos, size_type n = npos,$/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s, size_type pos, size_type n = npos, const allocator_type& a = allocator_type())
basic_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string(const CharT* s, size_type n,$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type n, const allocator_type& a = allocator_type())
basic_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string(const CharT* s,$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, const allocator_type& a = allocator_type())
basic_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string(InputIterator f, InputIterator l,$/;"	f	class:boost::container::basic_string	access:public	signature:(InputIterator f, InputIterator l, const allocator_type& a = allocator_type())
basic_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string(reserve_t, std::size_t n,$/;"	f	class:boost::container::basic_string	access:public	signature:(reserve_t, std::size_t n, const allocator_type& a = allocator_type())
basic_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string(size_type n, CharT c,$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type n, CharT c, const allocator_type& a = allocator_type())
basic_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^   explicit basic_string(const allocator_type& a = allocator_type())$/;"	f	class:boost::container::basic_string	access:public	signature:(const allocator_type& a = allocator_type())
basic_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^class basic_string$/;"	c	namespace:boost::container	inherits:containers_detail::basic_string_base
basic_string_base	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string_base();$/;"	p	class:boost::container::containers_detail::basic_string_base	access:private	signature:()
basic_string_base	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string_base(const allocator_type& a)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:public	signature:(const allocator_type& a)
basic_string_base	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string_base(const allocator_type& a, std::size_t n)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:public	signature:(const allocator_type& a, std::size_t n)
basic_string_base	/usr/include/boost/interprocess/containers/container/string.hpp	/^class basic_string_base$/;"	c	namespace:boost::container::containers_detail
basic_vectorbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf(const basic_vectorbuf&);$/;"	p	class:boost::interprocess::basic_vectorbuf	access:private	signature:(const basic_vectorbuf&)
basic_vectorbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   explicit basic_vectorbuf(const VectorParameter &param,$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:(const VectorParameter &param, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
basic_vectorbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   explicit basic_vectorbuf(std::ios_base::openmode mode$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
basic_vectorbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^class basic_vectorbuf$/;"	c	namespace:boost::interprocess	inherits:std::basic_streambuf
basic_vectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorstream(const VectorParameter &param, std::ios_base::openmode mode$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:(const VectorParameter &param, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
basic_vectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorstream(std::ios_base::openmode mode $/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
basic_vectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^class basic_vectorstream$/;"	c	namespace:boost::interprocess	inherits:std::basic_iostream
before_begin	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   iterator before_begin()$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:()
before_begin	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   iterator before_begin()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
before_begin	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   const_iterator before_begin() const$/;"	f	class:boost::container::slist	access:public	signature:() const
before_begin	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator before_begin() $/;"	f	class:boost::container::slist	access:public	signature:()
beg	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t beg      :  begin_bits;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
begin	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::deque	access:public	signature:() const
begin	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator begin() $/;"	f	class:boost::container::deque	access:public	signature:()
begin	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
begin	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator begin() $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:()
begin	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   iterator begin()$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:()
begin	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   iterator begin()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
begin	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_iterator begin() const$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
begin	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator begin()$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:()
begin	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
begin	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
begin	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator begin() $/;"	f	class:boost::container::flat_map	access:public	signature:()
begin	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator begin() $/;"	f	class:boost::container::flat_multimap	access:public	signature:()
begin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
begin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
begin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator begin() $/;"	f	class:boost::container::flat_multiset	access:public	signature:()
begin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator begin() $/;"	f	class:boost::container::flat_set	access:public	signature:()
begin	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const_iterator begin() const$/;"	f	class:boost::container::list	access:public	signature:() const
begin	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator begin()$/;"	f	class:boost::container::list	access:public	signature:()
begin	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::map	access:public	signature:() const
begin	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
begin	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator begin() $/;"	f	class:boost::container::map	access:public	signature:()
begin	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator begin() $/;"	f	class:boost::container::multimap	access:public	signature:()
begin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
begin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::set	access:public	signature:() const
begin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator begin() $/;"	f	class:boost::container::multiset	access:public	signature:()
begin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator begin() $/;"	f	class:boost::container::set	access:public	signature:()
begin	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::slist	access:public	signature:() const
begin	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator begin() $/;"	f	class:boost::container::slist	access:public	signature:()
begin	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_iterator  begin()const$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
begin	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator  begin()$/;"	f	class:boost::container::stable_vector	access:public	signature:()
begin	/usr/include/boost/interprocess/containers/container/string.hpp	/^   const_iterator begin() const$/;"	f	class:boost::container::basic_string	access:public	signature:() const
begin	/usr/include/boost/interprocess/containers/container/string.hpp	/^   iterator begin()$/;"	f	class:boost::container::basic_string	access:public	signature:()
begin	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_iterator begin() const$/;"	f	class:boost::container::vector	access:public	signature:() const
begin	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator begin()      $/;"	f	class:boost::container::vector	access:public	signature:()
begin	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   const_iterator begin() const$/;"	f	class:boost::interprocess::null_index	access:public	signature:() const
begin	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   iterator begin()$/;"	f	class:boost::interprocess::null_index	access:public	signature:()
begin_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t begin_bits             = max_segment_size_bits - align_bits;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
beg_	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^      const char *      beg_;$/;"	m	struct:boost::container::containers_detail::private_node_pool_impl::is_between	access:private
belongs_to_segment	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool belongs_to_segment (const void *ptr) const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(const void *ptr) const
bInheritHandle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   int bInheritHandle;$/;"	m	struct:boost::interprocess::winapi::interprocess_security_attributes	access:public
bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::ptrdiff_t bits  :  2;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t bits     :  2;$/;"	m	struct:boost::interprocess::intersegment_base::segmented_addressing	access:public
BlockCtrlBytes	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const std::size_t BlockCtrlBytes         = MemoryAlgorithm::BlockCtrlBytes;$/;"	m	class:boost::interprocess::detail::memory_algorithm_common	access:public
BlockCtrlBytes	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   enum { BlockCtrlBytes = detail::ct_rounded_size<sizeof(block_ctrl), Alignment>::value  };$/;"	e	enum:boost::interprocess::detail::simple_seq_fit_impl::__anon27
BlockCtrlBytes	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const std::size_t BlockCtrlBytes = detail::ct_rounded_size<sizeof(block_ctrl), Alignment>::value;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
BlockCtrlBytes	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t BlockCtrlBytes = detail::ct_rounded_size<sizeof(block_ctrl), Alignment>::value;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
BlockCtrlSize	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   enum { BlockCtrlSize  = BlockCtrlBytes\/Alignment   };$/;"	e	enum:boost::interprocess::detail::simple_seq_fit_impl::__anon28
BlockCtrlUnits	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const std::size_t BlockCtrlUnits         = MemoryAlgorithm::BlockCtrlUnits;$/;"	m	class:boost::interprocess::detail::memory_algorithm_common	access:public
BlockCtrlUnits	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const std::size_t BlockCtrlUnits = BlockCtrlBytes\/Alignment;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
BlockCtrlUnits	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t BlockCtrlUnits = BlockCtrlBytes\/Alignment;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
BlockHdrAlignment	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   enum  {  BlockHdrAlignment = detail::alignment_of<block_header>::value  };$/;"	e	enum:boost::interprocess::detail::intrusive_value_type_impl::__anon12
blocking	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   enum block_t   {  blocking,   timed,   non_blocking   };$/;"	e	enum:boost::interprocess::message_queue::block_t
blockslist_t	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^      , bi::constant_time_size<false> >::type      blockslist_t;$/;"	t	class:boost::container::containers_detail::private_node_pool_impl	access:private
block_ctrl	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   typedef typename MemoryAlgorithm::block_ctrl                block_ctrl;$/;"	t	class:boost::interprocess::detail::memory_algorithm_common	access:public
block_ctrl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   struct block_ctrl$/;"	s	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
block_ctrl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   class block_ctrl$/;"	c	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
block_ctrl	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      block_ctrl()$/;"	f	struct:boost::interprocess::rbtree_best_fit::block_ctrl	access:public	signature:()
block_ctrl	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   struct block_ctrl$/;"	s	class:boost::interprocess::rbtree_best_fit	inherits:SizeHolder,TreeHook	access:private
block_ctrl_ptr	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      pointer_to_other<void_pointer, block_ctrl>::type block_ctrl_ptr;$/;"	t	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
block_ctrl_ptr	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      pointer_to_other<void_pointer, block_ctrl>::type block_ctrl_ptr;$/;"	t	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
block_ctrl_ptr	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      pointer_to_other<void_pointer, block_ctrl>::type   block_ctrl_ptr;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
block_destroyer	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      block_destroyer(const this_type *impl)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl::block_destroyer	access:public	signature:(const this_type *impl)
block_destroyer	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   class block_destroyer$/;"	c	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
block_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   block_header(std::size_t value_bytes$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:(std::size_t value_bytes ,std::size_t value_alignment ,std::size_t alloc_type ,std::size_t sizeof_char ,std::size_t num_char )
block_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct block_header$/;"	s	namespace:boost::interprocess::detail
block_header_from_value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   static block_header *block_header_from_value(const void *value, std::size_t sz, std::size_t algn)$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:(const void *value, std::size_t sz, std::size_t algn)
block_header_from_value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   static block_header *block_header_from_value(T *value)$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:(T *value)
block_header_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef detail::block_header block_header_t;$/;"	t	class:boost::interprocess::segment_manager	access:private
block_info_t	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   struct block_info_t$/;"	s	struct:boost::container::containers_detail::adaptive_pool_types	inherits:hdr_offset_holder,multiset_hook_t	access:public
block_info_t	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef typename adaptive_pool_types<void_pointer>::block_info_t     block_info_t;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
block_iterator	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef typename block_multiset_t::iterator               block_iterator;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
block_multiset_t	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      <block_info_t, bi::base_hook<multiset_hook_t> >::type  block_multiset_t;$/;"	t	struct:boost::container::containers_detail::adaptive_pool_types	access:public
block_multiset_t	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef typename adaptive_pool_types<void_pointer>::block_multiset_t block_multiset_t;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
block_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   enum block_t   {  blocking,   timed,   non_blocking   };$/;"	g	class:boost::interprocess::message_queue	access:private
bool_	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct bool_ : integral_constant<bool, C_>$/;"	s	namespace:boost::container::containers_detail	inherits:integral_constant
bool_	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct bool_ : integral_constant<bool, C_>$/;"	s	namespace:boost::interprocess::detail	inherits:integral_constant
boost	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/allocators/allocator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^namespace boost{ $/;"	n
boost	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^namespace boost{ namespace container{ namespace containers_detail{$/;"	n
boost	/usr/include/boost/interprocess/containers/container/deque.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^namespace boost { namespace container { namespace containers_detail {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/math_functions.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/pool_common.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/type_traits.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/value_init.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/list.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/map.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/set.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/slist.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/string.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/container/vector.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/containers_fwd.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/deque.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/flat_map.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/flat_set.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/list.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/map.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/pair.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/set.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/slist.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/stable_vector.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/string.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/vector.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/containers/version_type.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/creation_tags.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/atomic.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^namespace boost { namespace interprocess { namespace detail {$/;"	n
boost	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/intermodule_singleton.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/detail/interprocess_tester.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/math_functions.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/min_max.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/move.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/mpl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/posix_time_types_wrk.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/type_traits.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/utilities.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/win32_api.hpp	/^namespace boost  {$/;"	n
boost	/usr/include/boost/interprocess/detail/win32_api.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/errors.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/exceptions.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/file_mapping.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^namespace boost { namespace interprocess {$/;"	n
boost	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^namespace boost { namespace interprocess {$/;"	n
boost	/usr/include/boost/interprocess/indexes/map_index.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/indexes/null_index.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^namespace boost { namespace interprocess {$/;"	n
boost	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^namespace boost{  namespace interprocess{$/;"	n
boost	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/mapped_region.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/offset_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/offset_ptr.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/segment_manager.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/shared_memory_object.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/detail/bad_weak_ptr.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^namespace boost{$/;"	n
boost	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^namespace boost {  namespace interprocess {$/;"	n
boost	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^namespace boost {  namespace interprocess {$/;"	n
boost	/usr/include/boost/interprocess/sync/emulation/interprocess_barrier.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/emulation/interprocess_condition.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/emulation/interprocess_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/emulation/interprocess_recursive_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/emulation/interprocess_semaphore.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/file_lock.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/lock_options.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/named_condition.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/posix/interprocess_barrier.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/posix/interprocess_condition.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/posix/interprocess_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/posix/interprocess_recursive_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/posix/interprocess_semaphore.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/posix/ptime_to_timespec.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^namespace boost {$/;"	n
boost	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^namespace boost {$/;"	n
boost::container	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^namespace boost{ namespace container{ namespace containers_detail{$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/deque.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^namespace boost { namespace container { namespace containers_detail {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^namespace container { $/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^namespace container { $/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^namespace container { $/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^namespace container { $/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/math_functions.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^namespace container { $/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^namespace container { $/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/pool_common.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^namespace container { $/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/type_traits.hpp	/^namespace container { $/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/value_init.hpp	/^namespace container { $/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^namespace container { $/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/list.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/map.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/set.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/slist.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/string.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container	/usr/include/boost/interprocess/containers/container/vector.hpp	/^namespace container {$/;"	n	namespace:boost
boost::container::allocate_new	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^static const allocation_type allocate_new       = (allocation_type)allocate_new_v;$/;"	m	namespace:boost::container
boost::container::allocate_new_v	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^   allocate_new_v   = 0x01,$/;"	e	enum:boost::container::allocation_type_v
boost::container::allocation_type	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^typedef int allocation_type;$/;"	t	namespace:boost::container
boost::container::allocation_type_v	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^enum allocation_type_v$/;"	g	namespace:boost::container
boost::container::basic_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^class basic_string$/;"	c	namespace:boost::container	inherits:containers_detail::basic_string_base
boost::container::basic_string::allocator_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef A                                       allocator_type;$/;"	t	class:boost::container::basic_string	access:public
boost::container::basic_string::append	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& append(const basic_string& s) $/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s)
boost::container::basic_string::append	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& append(const basic_string& s, size_type pos, size_type n)$/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s, size_type pos, size_type n)
boost::container::basic_string::append	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& append(const CharT* s) $/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s)
boost::container::basic_string::append	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& append(const CharT* s, size_type n) $/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type n)
boost::container::basic_string::append	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& append(InputIter first, InputIter last)$/;"	f	class:boost::container::basic_string	access:public	signature:(InputIter first, InputIter last)
boost::container::basic_string::append	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& append(size_type n, CharT c)$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type n, CharT c)
boost::container::basic_string::assign	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& assign(const basic_string& s) $/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s)
boost::container::basic_string::assign	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& assign(const basic_string& s, $/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s, size_type pos, size_type n)
boost::container::basic_string::assign	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& assign(const CharT* f, const CharT* l)$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* f, const CharT* l)
boost::container::basic_string::assign	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& assign(const CharT* s)$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s)
boost::container::basic_string::assign	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& assign(const CharT* s, size_type n)$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type n)
boost::container::basic_string::assign	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& assign(InputIter first, InputIter last) $/;"	f	class:boost::container::basic_string	access:public	signature:(InputIter first, InputIter last)
boost::container::basic_string::assign	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& assign(size_type n, CharT c)$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type n, CharT c)
boost::container::basic_string::at	/usr/include/boost/interprocess/containers/container/string.hpp	/^   const_reference at(size_type n) const {$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type n) const
boost::container::basic_string::at	/usr/include/boost/interprocess/containers/container/string.hpp	/^   reference at(size_type n) {$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type n)
boost::container::basic_string::base_t	/usr/include/boost/interprocess/containers/container/string.hpp	/^      : base_t(boost::interprocess::move((base_t&)s))$/;"	f	class:boost::container::basic_string	access:public	signature:(base_t&)s
boost::container::basic_string::base_t	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef containers_detail::basic_string_base<A> base_t;$/;"	t	class:boost::container::basic_string	access:private
boost::container::basic_string::basic_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string(const basic_string& s) $/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s)
boost::container::basic_string::basic_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string(const basic_string& s, size_type pos, size_type n = npos,$/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s, size_type pos, size_type n = npos, const allocator_type& a = allocator_type())
boost::container::basic_string::basic_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string(const CharT* s, size_type n,$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type n, const allocator_type& a = allocator_type())
boost::container::basic_string::basic_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string(const CharT* s,$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, const allocator_type& a = allocator_type())
boost::container::basic_string::basic_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string(InputIterator f, InputIterator l,$/;"	f	class:boost::container::basic_string	access:public	signature:(InputIterator f, InputIterator l, const allocator_type& a = allocator_type())
boost::container::basic_string::basic_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string(reserve_t, std::size_t n,$/;"	f	class:boost::container::basic_string	access:public	signature:(reserve_t, std::size_t n, const allocator_type& a = allocator_type())
boost::container::basic_string::basic_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string(size_type n, CharT c,$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type n, CharT c, const allocator_type& a = allocator_type())
boost::container::basic_string::basic_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^   explicit basic_string(const allocator_type& a = allocator_type())$/;"	f	class:boost::container::basic_string	access:public	signature:(const allocator_type& a = allocator_type())
boost::container::basic_string::begin	/usr/include/boost/interprocess/containers/container/string.hpp	/^   const_iterator begin() const$/;"	f	class:boost::container::basic_string	access:public	signature:() const
boost::container::basic_string::begin	/usr/include/boost/interprocess/containers/container/string.hpp	/^   iterator begin()$/;"	f	class:boost::container::basic_string	access:public	signature:()
boost::container::basic_string::capacity	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type capacity() const$/;"	f	class:boost::container::basic_string	access:public	signature:() const
boost::container::basic_string::clear	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void clear()$/;"	f	class:boost::container::basic_string	access:public	signature:()
boost::container::basic_string::compare	/usr/include/boost/interprocess/containers/container/string.hpp	/^   int compare(const basic_string& s) const $/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s) const
boost::container::basic_string::compare	/usr/include/boost/interprocess/containers/container/string.hpp	/^   int compare(const CharT* s) const $/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s) const
boost::container::basic_string::compare	/usr/include/boost/interprocess/containers/container/string.hpp	/^   int compare(size_type pos1, size_type n1, const basic_string& s) const $/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos1, size_type n1, const basic_string& s) const
boost::container::basic_string::compare	/usr/include/boost/interprocess/containers/container/string.hpp	/^   int compare(size_type pos1, size_type n1, const CharT* s,$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos1, size_type n1, const CharT* s, size_type n2 = npos) const
boost::container::basic_string::compare	/usr/include/boost/interprocess/containers/container/string.hpp	/^   int compare(size_type pos1, size_type n1,$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos1, size_type n1, const basic_string& s, size_type pos2, size_type n2) const
boost::container::basic_string::const_iterator	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef const_pointer                           const_iterator;$/;"	t	class:boost::container::basic_string	access:public
boost::container::basic_string::const_pointer	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef typename A::const_pointer               const_pointer;$/;"	t	class:boost::container::basic_string	access:public
boost::container::basic_string::const_reference	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef typename A::const_reference             const_reference;$/;"	t	class:boost::container::basic_string	access:public
boost::container::basic_string::const_reverse_iterator	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:boost::container::basic_string	access:public
boost::container::basic_string::copy	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type copy(CharT* s, size_type n, size_type pos = 0) const $/;"	f	class:boost::container::basic_string	access:public	signature:(CharT* s, size_type n, size_type pos = 0) const
boost::container::basic_string::cvalue_iterator	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef constant_iterator<CharT, difference_type> cvalue_iterator;$/;"	t	class:boost::container::basic_string	access:private
boost::container::basic_string::c_str	/usr/include/boost/interprocess/containers/container/string.hpp	/^   const CharT* c_str() const $/;"	f	class:boost::container::basic_string	access:public	signature:() const
boost::container::basic_string::data	/usr/include/boost/interprocess/containers/container/string.hpp	/^   const CharT* data()  const $/;"	f	class:boost::container::basic_string	access:public	signature:() const
boost::container::basic_string::difference_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef typename A::difference_type             difference_type;$/;"	t	class:boost::container::basic_string	access:public
boost::container::basic_string::empty	/usr/include/boost/interprocess/containers/container/string.hpp	/^   bool empty() const$/;"	f	class:boost::container::basic_string	access:public	signature:() const
boost::container::basic_string::end	/usr/include/boost/interprocess/containers/container/string.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::basic_string	access:public	signature:() const
boost::container::basic_string::end	/usr/include/boost/interprocess/containers/container/string.hpp	/^   iterator end()$/;"	f	class:boost::container::basic_string	access:public	signature:()
boost::container::basic_string::Eq_traits	/usr/include/boost/interprocess/containers/container/string.hpp	/^   struct Eq_traits$/;"	s	class:boost::container::basic_string	inherits:std::binary_function	access:protected
boost::container::basic_string::Eq_traits::operator ()	/usr/include/boost/interprocess/containers/container/string.hpp	/^      bool operator()(const typename Tr::char_type& x,$/;"	f	struct:boost::container::basic_string::Eq_traits	access:public	signature:(const typename Tr::char_type& x, const typename Tr::char_type& y) const
boost::container::basic_string::erase	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& erase(size_type pos = 0, size_type n = npos) $/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos = 0, size_type n = npos)
boost::container::basic_string::erase	/usr/include/boost/interprocess/containers/container/string.hpp	/^   iterator erase(iterator first, iterator last)$/;"	f	class:boost::container::basic_string	access:public	signature:(iterator first, iterator last)
boost::container::basic_string::erase	/usr/include/boost/interprocess/containers/container/string.hpp	/^   iterator erase(iterator position) $/;"	f	class:boost::container::basic_string	access:public	signature:(iterator position)
boost::container::basic_string::find	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find(CharT c, size_type pos = 0) const$/;"	f	class:boost::container::basic_string	access:public	signature:(CharT c, size_type pos = 0) const
boost::container::basic_string::find	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find(const basic_string& s, size_type pos = 0) const $/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s, size_type pos = 0) const
boost::container::basic_string::find	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find(const CharT* s, size_type pos = 0) const $/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos = 0) const
boost::container::basic_string::find	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find(const CharT* s, size_type pos, size_type n) const$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos, size_type n) const
boost::container::basic_string::find_first_not_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_first_not_of(CharT c, size_type pos = 0) const$/;"	f	class:boost::container::basic_string	access:public	signature:(CharT c, size_type pos = 0) const
boost::container::basic_string::find_first_not_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_first_not_of(const basic_string& s, $/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s, size_type pos = 0) const
boost::container::basic_string::find_first_not_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_first_not_of(const CharT* s, size_type pos = 0) const $/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos = 0) const
boost::container::basic_string::find_first_not_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_first_not_of(const CharT* s, size_type pos,$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos, size_type n) const
boost::container::basic_string::find_first_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_first_of(const basic_string& s, size_type pos = 0) const $/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s, size_type pos = 0) const
boost::container::basic_string::find_first_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_first_of(const CharT* s, size_type pos = 0) const $/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos = 0) const
boost::container::basic_string::find_first_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_first_of(const CharT* s, size_type pos, $/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos, size_type n) const
boost::container::basic_string::find_first_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^  size_type find_first_of(CharT c, size_type pos = 0) const $/;"	f	class:boost::container::basic_string	access:public	signature:(CharT c, size_type pos = 0) const
boost::container::basic_string::find_last_not_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_last_not_of(CharT c, size_type pos = npos) const$/;"	f	class:boost::container::basic_string	access:public	signature:(CharT c, size_type pos = npos) const
boost::container::basic_string::find_last_not_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_last_not_of(const basic_string& s, $/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s, size_type pos = npos) const
boost::container::basic_string::find_last_not_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_last_not_of(const CharT* s, size_type pos = npos) const$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos = npos) const
boost::container::basic_string::find_last_not_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_last_not_of(const CharT* s, size_type pos, size_type n) const$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos, size_type n) const
boost::container::basic_string::find_last_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_last_of(CharT c, size_type pos = npos) const $/;"	f	class:boost::container::basic_string	access:public	signature:(CharT c, size_type pos = npos) const
boost::container::basic_string::find_last_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_last_of(const basic_string& s,$/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s, size_type pos = npos) const
boost::container::basic_string::find_last_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_last_of(const CharT* s, size_type pos = npos) const $/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos = npos) const
boost::container::basic_string::find_last_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_last_of(const CharT* s, size_type pos, size_type n) const$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos, size_type n) const
boost::container::basic_string::get_allocator	/usr/include/boost/interprocess/containers/container/string.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::basic_string	access:public	signature:() const
boost::container::basic_string::insert	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& insert(size_type pos, const basic_string& s) $/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos, const basic_string& s)
boost::container::basic_string::insert	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& insert(size_type pos, const basic_string& s,$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos, const basic_string& s, size_type beg, size_type n)
boost::container::basic_string::insert	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& insert(size_type pos, const CharT* s) $/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos, const CharT* s)
boost::container::basic_string::insert	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& insert(size_type pos, const CharT* s, size_type n) $/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos, const CharT* s, size_type n)
boost::container::basic_string::insert	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& insert(size_type pos, size_type n, CharT c) $/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos, size_type n, CharT c)
boost::container::basic_string::insert	/usr/include/boost/interprocess/containers/container/string.hpp	/^   iterator insert(iterator position, CharT c) $/;"	f	class:boost::container::basic_string	access:public	signature:(iterator position, CharT c)
boost::container::basic_string::insert	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void insert(iterator p, InputIter first, InputIter last) $/;"	f	class:boost::container::basic_string	access:public	signature:(iterator p, InputIter first, InputIter last)
boost::container::basic_string::insert	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void insert(iterator position, std::size_t n, CharT c)$/;"	f	class:boost::container::basic_string	access:public	signature:(iterator position, std::size_t n, CharT c)
boost::container::basic_string::InternalBufferChars	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static const typename base_t::size_type InternalBufferChars = base_t::InternalBufferChars;$/;"	m	class:boost::container::basic_string	access:private
boost::container::basic_string::iterator	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef pointer                                 iterator;$/;"	t	class:boost::container::basic_string	access:public
boost::container::basic_string::length	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type length() const$/;"	f	class:boost::container::basic_string	access:public	signature:() const
boost::container::basic_string::max_size	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type max_size() const$/;"	f	class:boost::container::basic_string	access:public	signature:() const
boost::container::basic_string::Not_within_traits	/usr/include/boost/interprocess/containers/container/string.hpp	/^   struct Not_within_traits$/;"	s	class:boost::container::basic_string	inherits:std::unary_function	access:protected
boost::container::basic_string::Not_within_traits::m_first	/usr/include/boost/interprocess/containers/container/string.hpp	/^      const Pointer m_first;$/;"	m	struct:boost::container::basic_string::Not_within_traits	access:public
boost::container::basic_string::Not_within_traits::m_last	/usr/include/boost/interprocess/containers/container/string.hpp	/^      const Pointer m_last;$/;"	m	struct:boost::container::basic_string::Not_within_traits	access:public
boost::container::basic_string::Not_within_traits::Not_within_traits	/usr/include/boost/interprocess/containers/container/string.hpp	/^      Not_within_traits(Pointer f, Pointer l) $/;"	f	struct:boost::container::basic_string::Not_within_traits	access:public	signature:(Pointer f, Pointer l)
boost::container::basic_string::Not_within_traits::operator ()	/usr/include/boost/interprocess/containers/container/string.hpp	/^      bool operator()(const typename Tr::char_type& x) const $/;"	f	struct:boost::container::basic_string::Not_within_traits	access:public	signature:(const typename Tr::char_type& x) const
boost::container::basic_string::Not_within_traits::Pointer	/usr/include/boost/interprocess/containers/container/string.hpp	/^      typedef const typename Tr::char_type* Pointer;$/;"	t	struct:boost::container::basic_string::Not_within_traits	access:public
boost::container::basic_string::npos	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static const size_type npos;$/;"	m	class:boost::container::basic_string	access:public
boost::container::basic_string::npos	/usr/include/boost/interprocess/containers/container/string.hpp	/^basic_string<CharT,Traits,A>::npos $/;"	m	class:boost::container::basic_string
boost::container::basic_string::operator +=	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& operator+=(CharT c)$/;"	f	class:boost::container::basic_string	access:public	signature:(CharT c)
boost::container::basic_string::operator +=	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& operator+=(const basic_string& s)$/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s)
boost::container::basic_string::operator +=	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& operator+=(const CharT* s)$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s)
boost::container::basic_string::operator =	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& operator=(CharT c)$/;"	f	class:boost::container::basic_string	access:public	signature:(CharT c)
boost::container::basic_string::operator =	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& operator=(const CharT* s) $/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s)
boost::container::basic_string::operator []	/usr/include/boost/interprocess/containers/container/string.hpp	/^   const_reference operator[](size_type n) const$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type n) const
boost::container::basic_string::operator []	/usr/include/boost/interprocess/containers/container/string.hpp	/^   reference operator[](size_type n)$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type n)
boost::container::basic_string::pointer	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef typename A::pointer                     pointer;$/;"	t	class:boost::container::basic_string	access:public
boost::container::basic_string::pop_back	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void pop_back()$/;"	f	class:boost::container::basic_string	access:public	signature:()
boost::container::basic_string::priv_assign_dispatch	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& priv_assign_dispatch(InputIter f, InputIter l,$/;"	f	class:boost::container::basic_string	access:private	signature:(InputIter f, InputIter l, containers_detail::false_)
boost::container::basic_string::priv_assign_dispatch	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& priv_assign_dispatch(Integer n, Integer x, containers_detail::true_) $/;"	f	class:boost::container::basic_string	access:private	signature:(Integer n, Integer x, containers_detail::true_)
boost::container::basic_string::priv_construct_null	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_construct_null(pointer p)$/;"	f	class:boost::container::basic_string	access:private	signature:(pointer p)
boost::container::basic_string::priv_copy	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_copy(const CharT* first, const CharT* last, CharT* result) $/;"	f	class:boost::container::basic_string	access:private	signature:(const CharT* first, const CharT* last, CharT* result)
boost::container::basic_string::priv_copy	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_copy(InputIterator first, InputIterator last, iterator result)$/;"	f	class:boost::container::basic_string	access:private	signature:(InputIterator first, InputIterator last, iterator result)
boost::container::basic_string::priv_initialize_dispatch	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_initialize_dispatch(InputIter f, InputIter l, containers_detail::false_)$/;"	f	class:boost::container::basic_string	access:private	signature:(InputIter f, InputIter l, containers_detail::false_)
boost::container::basic_string::priv_initialize_dispatch	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_initialize_dispatch(Integer n, Integer x, containers_detail::true_)$/;"	f	class:boost::container::basic_string	access:private	signature:(Integer n, Integer x, containers_detail::true_)
boost::container::basic_string::priv_insert	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_insert(iterator p, InputIter first, InputIter last, std::input_iterator_tag)$/;"	f	class:boost::container::basic_string	access:private	signature:(iterator p, InputIter first, InputIter last, std::input_iterator_tag)
boost::container::basic_string::priv_insert	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_insert(iterator position, ForwardIter first, $/;"	f	class:boost::container::basic_string	access:private	signature:(iterator position, ForwardIter first, ForwardIter last, std::forward_iterator_tag)
boost::container::basic_string::priv_insert_dispatch	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_insert_dispatch(iterator p, InputIter first, InputIter last,$/;"	f	class:boost::container::basic_string	access:private	signature:(iterator p, InputIter first, InputIter last, containers_detail::false_)
boost::container::basic_string::priv_insert_dispatch	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_insert_dispatch(iterator p, Integer n, Integer x,$/;"	f	class:boost::container::basic_string	access:private	signature:(iterator p, Integer n, Integer x, containers_detail::true_)
boost::container::basic_string::priv_null	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static CharT priv_null()$/;"	f	class:boost::container::basic_string	access:private	signature:()
boost::container::basic_string::priv_range_initialize	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_range_initialize(ForwardIter f, ForwardIter l, $/;"	f	class:boost::container::basic_string	access:private	signature:(ForwardIter f, ForwardIter l, std::forward_iterator_tag)
boost::container::basic_string::priv_range_initialize	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_range_initialize(InputIter f, InputIter l)$/;"	f	class:boost::container::basic_string	access:private	signature:(InputIter f, InputIter l)
boost::container::basic_string::priv_range_initialize	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_range_initialize(InputIter f, InputIter l,$/;"	f	class:boost::container::basic_string	access:private	signature:(InputIter f, InputIter l, std::input_iterator_tag)
boost::container::basic_string::priv_replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& priv_replace(iterator first, iterator last,$/;"	f	class:boost::container::basic_string	access:private	signature:(iterator first, iterator last, ForwardIter f, ForwardIter l, std::forward_iterator_tag)
boost::container::basic_string::priv_replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& priv_replace(iterator first, iterator last,$/;"	f	class:boost::container::basic_string	access:private	signature:(iterator first, iterator last, InputIter f, InputIter l, std::input_iterator_tag)
boost::container::basic_string::priv_replace_dispatch	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& priv_replace_dispatch(iterator first, iterator last,$/;"	f	class:boost::container::basic_string	access:private	signature:(iterator first, iterator last, InputIter f, InputIter l, containers_detail::false_)
boost::container::basic_string::priv_replace_dispatch	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& priv_replace_dispatch(iterator first, iterator last,$/;"	f	class:boost::container::basic_string	access:private	signature:(iterator first, iterator last, Integer n, Integer x, containers_detail::true_)
boost::container::basic_string::priv_terminate_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_terminate_string() $/;"	f	class:boost::container::basic_string	access:private	signature:()
boost::container::basic_string::priv_uninitialized_copy	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type priv_uninitialized_copy(InpIt first, InpIt last, FwdIt dest)$/;"	f	class:boost::container::basic_string	access:private	signature:(InpIt first, InpIt last, FwdIt dest)
boost::container::basic_string::priv_uninitialized_fill_n	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_uninitialized_fill_n(FwdIt first, Count count, const CharT val)$/;"	f	class:boost::container::basic_string	access:private	signature:(FwdIt first, Count count, const CharT val)
boost::container::basic_string::push_back	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void push_back(CharT c)$/;"	f	class:boost::container::basic_string	access:public	signature:(CharT c)
boost::container::basic_string::rbegin	/usr/include/boost/interprocess/containers/container/string.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::basic_string	access:public	signature:() const
boost::container::basic_string::rbegin	/usr/include/boost/interprocess/containers/container/string.hpp	/^   reverse_iterator rbegin()             $/;"	f	class:boost::container::basic_string	access:public	signature:()
boost::container::basic_string::reference	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef typename A::reference                   reference;$/;"	t	class:boost::container::basic_string	access:public
boost::container::basic_string::rend	/usr/include/boost/interprocess/containers/container/string.hpp	/^   const_reverse_iterator rend()   const $/;"	f	class:boost::container::basic_string	access:public	signature:() const
boost::container::basic_string::rend	/usr/include/boost/interprocess/containers/container/string.hpp	/^   reverse_iterator rend()               $/;"	f	class:boost::container::basic_string	access:public	signature:()
boost::container::basic_string::replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& replace(iterator first, iterator last, $/;"	f	class:boost::container::basic_string	access:public	signature:(iterator first, iterator last, const basic_string& s)
boost::container::basic_string::replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& replace(iterator first, iterator last, $/;"	f	class:boost::container::basic_string	access:public	signature:(iterator first, iterator last, size_type n, CharT c)
boost::container::basic_string::replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& replace(iterator first, iterator last,$/;"	f	class:boost::container::basic_string	access:public	signature:(iterator first, iterator last, const CharT* s)
boost::container::basic_string::replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& replace(iterator first, iterator last,$/;"	f	class:boost::container::basic_string	access:public	signature:(iterator first, iterator last, const CharT* s, size_type n)
boost::container::basic_string::replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& replace(iterator first, iterator last,$/;"	f	class:boost::container::basic_string	access:public	signature:(iterator first, iterator last, InputIter f, InputIter l)
boost::container::basic_string::replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& replace(size_type pos, size_type n, $/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos, size_type n, const basic_string& s)
boost::container::basic_string::replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& replace(size_type pos, size_type n1,$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos, size_type n1, const CharT* s)
boost::container::basic_string::replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& replace(size_type pos, size_type n1,$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos, size_type n1, const CharT* s, size_type n2)
boost::container::basic_string::replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& replace(size_type pos, size_type n1,$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos, size_type n1, size_type n2, CharT c)
boost::container::basic_string::replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& replace(size_type pos1, size_type n1,$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos1, size_type n1, const basic_string& s, size_type pos2, size_type n2)
boost::container::basic_string::reserve	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void reserve(size_type res_arg)$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type res_arg)
boost::container::basic_string::reserve_t	/usr/include/boost/interprocess/containers/container/string.hpp	/^   struct reserve_t {};$/;"	s	class:boost::container::basic_string	access:public
boost::container::basic_string::resize	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void resize(size_type n)$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type n)
boost::container::basic_string::resize	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void resize(size_type n, CharT c)$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type n, CharT c)
boost::container::basic_string::reverse_iterator	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef std::reverse_iterator<iterator>       reverse_iterator;$/;"	t	class:boost::container::basic_string	access:public
boost::container::basic_string::rfind	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type rfind(CharT c, size_type pos = npos) const$/;"	f	class:boost::container::basic_string	access:public	signature:(CharT c, size_type pos = npos) const
boost::container::basic_string::rfind	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type rfind(const basic_string& s, size_type pos = npos) const $/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s, size_type pos = npos) const
boost::container::basic_string::rfind	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type rfind(const CharT* s, size_type pos = npos) const $/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos = npos) const
boost::container::basic_string::rfind	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type rfind(const CharT* s, size_type pos, size_type n) const$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos, size_type n) const
boost::container::basic_string::size	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type size() const    $/;"	f	class:boost::container::basic_string	access:public	signature:() const
boost::container::basic_string::size_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef typename A::size_type                   size_type;$/;"	t	class:boost::container::basic_string	access:public
boost::container::basic_string::stored_allocator_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef allocator_type                          stored_allocator_type;$/;"	t	class:boost::container::basic_string	access:public
boost::container::basic_string::substr	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string substr(size_type pos = 0, size_type n = npos) const $/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos = 0, size_type n = npos) const
boost::container::basic_string::swap	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void swap(basic_string& x)$/;"	f	class:boost::container::basic_string	access:public	signature:(basic_string& x)
boost::container::basic_string::s_compare	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static int s_compare(const_pointer f1, const_pointer l1,$/;"	f	class:boost::container::basic_string	access:private	signature:(const_pointer f1, const_pointer l1, const_pointer f2, const_pointer l2)
boost::container::basic_string::traits_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef Traits                                  traits_type;$/;"	t	class:boost::container::basic_string	access:public
boost::container::basic_string::value_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef CharT                                   value_type;$/;"	t	class:boost::container::basic_string	access:public
boost::container::basic_string::~basic_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^   ~basic_string() $/;"	f	class:boost::container::basic_string	access:public	signature:()
boost::container::constant_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^class constant_iterator$/;"	c	namespace:boost::container	inherits:std::iterator
boost::container::constant_iterator::advance	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void advance(Difference n)$/;"	f	class:boost::container::constant_iterator	access:private	signature:(Difference n)
boost::container::constant_iterator::constant_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   constant_iterator()$/;"	f	class:boost::container::constant_iterator	access:public	signature:()
boost::container::constant_iterator::constant_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   explicit constant_iterator(const T &ref, Difference range_size)$/;"	f	class:boost::container::constant_iterator	access:public	signature:(const T &ref, Difference range_size)
boost::container::constant_iterator::decrement	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void decrement()$/;"	f	class:boost::container::constant_iterator	access:private	signature:()
boost::container::constant_iterator::dereference	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   const T & dereference() const$/;"	f	class:boost::container::constant_iterator	access:private	signature:() const
boost::container::constant_iterator::distance_to	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   Difference distance_to(const this_type &other)const$/;"	f	class:boost::container::constant_iterator	access:private	signature:(const this_type &other) const
boost::container::constant_iterator::equal	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   bool equal(const this_type &other) const$/;"	f	class:boost::container::constant_iterator	access:private	signature:(const this_type &other) const
boost::container::constant_iterator::increment	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void increment()$/;"	f	class:boost::container::constant_iterator	access:private	signature:()
boost::container::constant_iterator::less	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   bool less(const this_type &other) const$/;"	f	class:boost::container::constant_iterator	access:private	signature:(const this_type &other) const
boost::container::constant_iterator::m_num	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   Difference  m_num;$/;"	m	class:boost::container::constant_iterator	access:private
boost::container::constant_iterator::m_ptr	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   const T *   m_ptr;$/;"	m	class:boost::container::constant_iterator	access:private
boost::container::constant_iterator::operator !=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator!= (const constant_iterator& i, const constant_iterator& i2)$/;"	f	class:boost::container::constant_iterator	access:friend	signature:(const constant_iterator& i, const constant_iterator& i2)
boost::container::constant_iterator::operator *	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   const T& operator*() const$/;"	f	class:boost::container::constant_iterator	access:public	signature:() const
boost::container::constant_iterator::operator +	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   constant_iterator operator+(Difference off) const$/;"	f	class:boost::container::constant_iterator	access:public	signature:(Difference off) const
boost::container::constant_iterator::operator +	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend constant_iterator operator+(Difference off, const constant_iterator& right)$/;"	f	class:boost::container::constant_iterator	access:friend	signature:(Difference off, const constant_iterator& right)
boost::container::constant_iterator::operator ++	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   constant_iterator operator++(int)$/;"	f	class:boost::container::constant_iterator	access:public	signature:(int)
boost::container::constant_iterator::operator ++	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   constant_iterator& operator++() $/;"	f	class:boost::container::constant_iterator	access:public	signature:()
boost::container::constant_iterator::operator +=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   constant_iterator& operator+=(Difference off)$/;"	f	class:boost::container::constant_iterator	access:public	signature:(Difference off)
boost::container::constant_iterator::operator -	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   constant_iterator operator-(Difference off) const$/;"	f	class:boost::container::constant_iterator	access:public	signature:(Difference off) const
boost::container::constant_iterator::operator -	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend Difference operator- (const constant_iterator& i, const constant_iterator& i2)$/;"	f	class:boost::container::constant_iterator	access:friend	signature:(const constant_iterator& i, const constant_iterator& i2)
boost::container::constant_iterator::operator -=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   constant_iterator& operator-=(Difference off)$/;"	f	class:boost::container::constant_iterator	access:public	signature:(Difference off)
boost::container::constant_iterator::operator ->	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   const T* operator->() const$/;"	f	class:boost::container::constant_iterator	access:public	signature:() const
boost::container::constant_iterator::operator <	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator< (const constant_iterator& i, const constant_iterator& i2)$/;"	f	class:boost::container::constant_iterator	access:friend	signature:(const constant_iterator& i, const constant_iterator& i2)
boost::container::constant_iterator::operator <=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator<= (const constant_iterator& i, const constant_iterator& i2)$/;"	f	class:boost::container::constant_iterator	access:friend	signature:(const constant_iterator& i, const constant_iterator& i2)
boost::container::constant_iterator::operator ==	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator== (const constant_iterator& i, const constant_iterator& i2)$/;"	f	class:boost::container::constant_iterator	access:friend	signature:(const constant_iterator& i, const constant_iterator& i2)
boost::container::constant_iterator::operator >	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator> (const constant_iterator& i, const constant_iterator& i2)$/;"	f	class:boost::container::constant_iterator	access:friend	signature:(const constant_iterator& i, const constant_iterator& i2)
boost::container::constant_iterator::operator >=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator>= (const constant_iterator& i, const constant_iterator& i2)$/;"	f	class:boost::container::constant_iterator	access:friend	signature:(const constant_iterator& i, const constant_iterator& i2)
boost::container::constant_iterator::this_type	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   typedef  constant_iterator<T, Difference> this_type;$/;"	t	class:boost::container::constant_iterator	access:private
boost::container::construct_in_place	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^inline void construct_in_place(T *dest, default_construct_iterator<U, D>)$/;"	f	namespace:boost::container	signature:(T *dest, default_construct_iterator<U, D>)
boost::container::construct_in_place	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^inline void construct_in_place(T *dest, emplace_iterator<U, E> ei)$/;"	f	namespace:boost::container	signature:(T *dest, emplace_iterator<U, E> ei)
boost::container::construct_in_place	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^inline void construct_in_place(T* dest, InpIt source)$/;"	f	namespace:boost::container	signature:(T* dest, InpIt source)
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^namespace boost{ namespace container{ namespace containers_detail{$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^namespace boost { namespace container { namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^namespace containers_detail  {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/detail/math_functions.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/detail/pool_common.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/detail/type_traits.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/detail/value_init.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/list.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/slist.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/string.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail	/usr/include/boost/interprocess/containers/container/vector.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
boost::container::containers_detail::a	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   node_alloc_holder(BOOST_INTERPROCESS_RV_REF(ValAlloc) a, const Pred &c) $/;"	m	namespace:boost::container::containers_detail
boost::container::containers_detail::adaptive_pool_types	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^struct adaptive_pool_types$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::adaptive_pool_types::block_info_t	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   struct block_info_t$/;"	s	struct:boost::container::containers_detail::adaptive_pool_types	inherits:hdr_offset_holder,multiset_hook_t	access:public
boost::container::containers_detail::adaptive_pool_types::block_info_t::free_nodes	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      free_nodes_t free_nodes;$/;"	m	struct:boost::container::containers_detail::adaptive_pool_types::block_info_t	access:public
boost::container::containers_detail::adaptive_pool_types::block_info_t::free_nodes_t	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      typedef typename node_slist<void_pointer>::node_slist_t free_nodes_t;$/;"	t	struct:boost::container::containers_detail::adaptive_pool_types::block_info_t	access:public
boost::container::containers_detail::adaptive_pool_types::block_info_t::operator <	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      friend bool operator <(const block_info_t &l, const block_info_t &r)$/;"	f	struct:boost::container::containers_detail::adaptive_pool_types::block_info_t	access:friend	signature:(const block_info_t &l, const block_info_t &r)
boost::container::containers_detail::adaptive_pool_types::block_multiset_t	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      <block_info_t, bi::base_hook<multiset_hook_t> >::type  block_multiset_t;$/;"	t	struct:boost::container::containers_detail::adaptive_pool_types	access:public
boost::container::containers_detail::adaptive_pool_types::multiset_hook_t	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      , bi::link_mode<bi::normal_link> >::type multiset_hook_t;$/;"	t	struct:boost::container::containers_detail::adaptive_pool_types	access:public
boost::container::containers_detail::adaptive_pool_types::void_pointer	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef VoidPointer void_pointer;$/;"	t	struct:boost::container::containers_detail::adaptive_pool_types	access:public
boost::container::containers_detail::advanced_insert_aux_emplace	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^struct advanced_insert_aux_emplace$/;"	s	namespace:boost::container::containers_detail	inherits:advanced_insert_aux_int
boost::container::containers_detail::advanced_insert_aux_emplace::advanced_insert_aux_emplace	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   explicit advanced_insert_aux_emplace(Args&&... args)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:public	signature:(Args&&.... args)
boost::container::containers_detail::advanced_insert_aux_emplace::args_	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   tuple<Args&&...> args_;$/;"	m	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:private
boost::container::containers_detail::advanced_insert_aux_emplace::copy_all_to	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void copy_all_to(Iterator p)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:public	signature:(Iterator p)
boost::container::containers_detail::advanced_insert_aux_emplace::copy_some_and_update	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void copy_some_and_update(Iterator p, difference_type division_count, bool first_n)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:public	signature:(Iterator p, difference_type division_count, bool first_n)
boost::container::containers_detail::advanced_insert_aux_emplace::difference_type	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   typedef typename advanced_insert_aux_int<T, Iterator>::difference_type difference_type;$/;"	t	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:public
boost::container::containers_detail::advanced_insert_aux_emplace::index_tuple_t	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   typedef typename build_number_seq<sizeof...(Args)>::type             index_tuple_t;$/;"	t	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:public
boost::container::containers_detail::advanced_insert_aux_emplace::priv_copy_all_to	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   void priv_copy_all_to(const index_tuple<IdxPack...>&, Iterator p)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:private	signature:(const index_tuple<IdxPack...>&, Iterator p)
boost::container::containers_detail::advanced_insert_aux_emplace::priv_copy_some_and_update	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   void priv_copy_some_and_update(const index_tuple<IdxPack...>&, Iterator p, difference_type division_count, bool first_n)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:private	signature:(const index_tuple<IdxPack...>&, Iterator p, difference_type division_count, bool first_n)
boost::container::containers_detail::advanced_insert_aux_emplace::priv_uninitialized_copy_all_to	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   void priv_uninitialized_copy_all_to(const index_tuple<IdxPack...>&, Iterator p)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:private	signature:(const index_tuple<IdxPack...>&, Iterator p)
boost::container::containers_detail::advanced_insert_aux_emplace::priv_uninitialized_copy_some_and_update	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   void priv_uninitialized_copy_some_and_update(const index_tuple<IdxPack...>&, Iterator p, difference_type division_count, bool first_n)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:private	signature:(const index_tuple<IdxPack...>&, Iterator p, difference_type division_count, bool first_n)
boost::container::containers_detail::advanced_insert_aux_emplace::uninitialized_copy_all_to	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void uninitialized_copy_all_to(Iterator p)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:public	signature:(Iterator p)
boost::container::containers_detail::advanced_insert_aux_emplace::uninitialized_copy_some_and_update	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void uninitialized_copy_some_and_update(Iterator p, difference_type division_count, bool first_n)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:public	signature:(Iterator p, difference_type division_count, bool first_n)
boost::container::containers_detail::advanced_insert_aux_emplace::used_	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   bool used_;$/;"	m	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:private
boost::container::containers_detail::advanced_insert_aux_emplace::~advanced_insert_aux_emplace	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   ~advanced_insert_aux_emplace()$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:public	signature:()
boost::container::containers_detail::advanced_insert_aux_int	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^struct advanced_insert_aux_int$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::advanced_insert_aux_int::copy_all_to	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void copy_all_to(Iterator p) = 0;$/;"	p	struct:boost::container::containers_detail::advanced_insert_aux_int	access:public	signature:(Iterator p)
boost::container::containers_detail::advanced_insert_aux_int::copy_some_and_update	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void copy_some_and_update(Iterator pos, difference_type division_count, bool first) = 0;$/;"	p	struct:boost::container::containers_detail::advanced_insert_aux_int	access:public	signature:(Iterator pos, difference_type division_count, bool first)
boost::container::containers_detail::advanced_insert_aux_int::difference_type	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   typedef typename std::iterator_traits<Iterator>::difference_type difference_type;$/;"	t	struct:boost::container::containers_detail::advanced_insert_aux_int	access:public
boost::container::containers_detail::advanced_insert_aux_int::uninitialized_copy_all_to	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void uninitialized_copy_all_to(Iterator p) = 0;$/;"	p	struct:boost::container::containers_detail::advanced_insert_aux_int	access:public	signature:(Iterator p)
boost::container::containers_detail::advanced_insert_aux_int::uninitialized_copy_some_and_update	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void uninitialized_copy_some_and_update(Iterator pos, difference_type division_count, bool first) = 0;$/;"	p	struct:boost::container::containers_detail::advanced_insert_aux_int	access:public	signature:(Iterator pos, difference_type division_count, bool first)
boost::container::containers_detail::advanced_insert_aux_int::~advanced_insert_aux_int	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual ~advanced_insert_aux_int() {}$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_int	access:public	signature:()
boost::container::containers_detail::advanced_insert_aux_proxy	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^struct advanced_insert_aux_proxy$/;"	s	namespace:boost::container::containers_detail	inherits:advanced_insert_aux_int
boost::container::containers_detail::advanced_insert_aux_proxy::advanced_insert_aux_proxy	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   advanced_insert_aux_proxy(FwdIt first, FwdIt last)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_proxy	access:public	signature:(FwdIt first, FwdIt last)
boost::container::containers_detail::advanced_insert_aux_proxy::copy_all_to	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void copy_all_to(Iterator p)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_proxy	access:public	signature:(Iterator p)
boost::container::containers_detail::advanced_insert_aux_proxy::copy_some_and_update	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void copy_some_and_update(Iterator pos, difference_type division_count, bool first_n)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_proxy	access:public	signature:(Iterator pos, difference_type division_count, bool first_n)
boost::container::containers_detail::advanced_insert_aux_proxy::difference_type	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   typedef typename advanced_insert_aux_int<T, Iterator>::difference_type difference_type;$/;"	t	struct:boost::container::containers_detail::advanced_insert_aux_proxy	access:public
boost::container::containers_detail::advanced_insert_aux_proxy::first_	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   FwdIt first_, last_;$/;"	m	struct:boost::container::containers_detail::advanced_insert_aux_proxy	access:public
boost::container::containers_detail::advanced_insert_aux_proxy::last_	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   FwdIt first_, last_;$/;"	m	struct:boost::container::containers_detail::advanced_insert_aux_proxy	access:public
boost::container::containers_detail::advanced_insert_aux_proxy::uninitialized_copy_all_to	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void uninitialized_copy_all_to(Iterator p)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_proxy	access:public	signature:(Iterator p)
boost::container::containers_detail::advanced_insert_aux_proxy::uninitialized_copy_some_and_update	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void uninitialized_copy_some_and_update(Iterator pos, difference_type division_count, bool first_n)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_proxy	access:public	signature:(Iterator pos, difference_type division_count, bool first_n)
boost::container::containers_detail::advanced_insert_aux_proxy::~advanced_insert_aux_proxy	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual ~advanced_insert_aux_proxy()$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_proxy	access:public	signature:()
boost::container::containers_detail::alignment_logic	/usr/include/boost/interprocess/containers/container/detail/type_traits.hpp	/^struct alignment_logic$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::alignment_logic::value	/usr/include/boost/interprocess/containers/container/detail/type_traits.hpp	/^    enum{   value = A < S ? A : S  };$/;"	e	enum:boost::container::containers_detail::alignment_logic::__anon5
boost::container::containers_detail::alignment_of_hack	/usr/include/boost/interprocess/containers/container/detail/type_traits.hpp	/^struct alignment_of_hack$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::alignment_of_hack::alignment_of_hack	/usr/include/boost/interprocess/containers/container/detail/type_traits.hpp	/^    alignment_of_hack();$/;"	p	struct:boost::container::containers_detail::alignment_of_hack	access:public	signature:()
boost::container::containers_detail::alignment_of_hack::c	/usr/include/boost/interprocess/containers/container/detail/type_traits.hpp	/^    char c;$/;"	m	struct:boost::container::containers_detail::alignment_of_hack	access:public
boost::container::containers_detail::alignment_of_hack::t	/usr/include/boost/interprocess/containers/container/detail/type_traits.hpp	/^    T t;$/;"	m	struct:boost::container::containers_detail::alignment_of_hack	access:public
boost::container::containers_detail::allocate_many_and_construct	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   FwdIterator allocate_many_and_construct$/;"	f	namespace:boost::container::containers_detail	signature:(FwdIterator beg, difference_type n, Inserter inserter)
boost::container::containers_detail::allocate_one	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   NodePtr allocate_one()$/;"	f	namespace:boost::container::containers_detail	signature:()
boost::container::containers_detail::allocate_one	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   NodePtr allocate_one(allocator_v1)$/;"	f	namespace:boost::container::containers_detail	signature:(allocator_v1)
boost::container::containers_detail::allocate_one	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   NodePtr allocate_one(allocator_v2)$/;"	f	namespace:boost::container::containers_detail	signature:(allocator_v2)
boost::container::containers_detail::allocator_destroyer	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^class allocator_destroyer$/;"	c	namespace:boost::container::containers_detail
boost::container::containers_detail::allocator_destroyer::allocator_destroyer	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   allocator_destroyer(A &a)$/;"	f	class:boost::container::containers_detail::allocator_destroyer	access:public	signature:(A &a)
boost::container::containers_detail::allocator_destroyer::allocator_v1	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef containers_detail::integral_constant<unsigned, 1>     allocator_v1;$/;"	t	class:boost::container::containers_detail::allocator_destroyer	access:private
boost::container::containers_detail::allocator_destroyer::allocator_v2	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef containers_detail::integral_constant<unsigned, 2>     allocator_v2;$/;"	t	class:boost::container::containers_detail::allocator_destroyer	access:private
boost::container::containers_detail::allocator_destroyer::alloc_version	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^         version<A>::value>                           alloc_version;$/;"	t	class:boost::container::containers_detail::allocator_destroyer	access:private
boost::container::containers_detail::allocator_destroyer::a_	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   A & a_;$/;"	m	class:boost::container::containers_detail::allocator_destroyer	access:private
boost::container::containers_detail::allocator_destroyer::operator ()	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   void operator()(const typename A::pointer &p)$/;"	f	class:boost::container::containers_detail::allocator_destroyer	access:public	signature:(const typename A::pointer &p)
boost::container::containers_detail::allocator_destroyer::priv_deallocate	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   void priv_deallocate(const typename A::pointer &p, allocator_v1)$/;"	f	class:boost::container::containers_detail::allocator_destroyer	access:private	signature:(const typename A::pointer &p, allocator_v1)
boost::container::containers_detail::allocator_destroyer::priv_deallocate	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   void priv_deallocate(const typename A::pointer &p, allocator_v2)$/;"	f	class:boost::container::containers_detail::allocator_destroyer	access:private	signature:(const typename A::pointer &p, allocator_v2)
boost::container::containers_detail::allocator_destroyer::value_type	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef typename A::value_type value_type;$/;"	t	class:boost::container::containers_detail::allocator_destroyer	access:private
boost::container::containers_detail::allocator_destroyer_and_chain_builder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^class allocator_destroyer_and_chain_builder$/;"	c	namespace:boost::container::containers_detail
boost::container::containers_detail::allocator_destroyer_and_chain_builder::allocator_destroyer_and_chain_builder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   allocator_destroyer_and_chain_builder(A &a, multiallocation_chain &c)$/;"	f	class:boost::container::containers_detail::allocator_destroyer_and_chain_builder	access:public	signature:(A &a, multiallocation_chain &c)
boost::container::containers_detail::allocator_destroyer_and_chain_builder::a_	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   A & a_;$/;"	m	class:boost::container::containers_detail::allocator_destroyer_and_chain_builder	access:private
boost::container::containers_detail::allocator_destroyer_and_chain_builder::c_	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   multiallocation_chain &c_;$/;"	m	class:boost::container::containers_detail::allocator_destroyer_and_chain_builder	access:private
boost::container::containers_detail::allocator_destroyer_and_chain_builder::multiallocation_chain	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename A::multiallocation_chain    multiallocation_chain;$/;"	t	class:boost::container::containers_detail::allocator_destroyer_and_chain_builder	access:private
boost::container::containers_detail::allocator_destroyer_and_chain_builder::operator ()	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void operator()(const typename A::pointer &p)$/;"	f	class:boost::container::containers_detail::allocator_destroyer_and_chain_builder	access:public	signature:(const typename A::pointer &p)
boost::container::containers_detail::allocator_destroyer_and_chain_builder::value_type	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename A::value_type value_type;$/;"	t	class:boost::container::containers_detail::allocator_destroyer_and_chain_builder	access:private
boost::container::containers_detail::allocator_multialloc_chain_node_deallocator	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^class allocator_multialloc_chain_node_deallocator$/;"	c	namespace:boost::container::containers_detail
boost::container::containers_detail::allocator_multialloc_chain_node_deallocator::allocator_multialloc_chain_node_deallocator	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   allocator_multialloc_chain_node_deallocator(A &a)$/;"	f	class:boost::container::containers_detail::allocator_multialloc_chain_node_deallocator	access:public	signature:(A &a)
boost::container::containers_detail::allocator_multialloc_chain_node_deallocator::a_	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   A & a_;$/;"	m	class:boost::container::containers_detail::allocator_multialloc_chain_node_deallocator	access:private
boost::container::containers_detail::allocator_multialloc_chain_node_deallocator::chain_builder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef allocator_destroyer_and_chain_builder<A> chain_builder;$/;"	t	class:boost::container::containers_detail::allocator_multialloc_chain_node_deallocator	access:private
boost::container::containers_detail::allocator_multialloc_chain_node_deallocator::c_	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   multiallocation_chain c_;$/;"	m	class:boost::container::containers_detail::allocator_multialloc_chain_node_deallocator	access:private
boost::container::containers_detail::allocator_multialloc_chain_node_deallocator::get_chain_builder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   chain_builder get_chain_builder()$/;"	f	class:boost::container::containers_detail::allocator_multialloc_chain_node_deallocator	access:public	signature:()
boost::container::containers_detail::allocator_multialloc_chain_node_deallocator::multiallocation_chain	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename A::multiallocation_chain    multiallocation_chain;$/;"	t	class:boost::container::containers_detail::allocator_multialloc_chain_node_deallocator	access:private
boost::container::containers_detail::allocator_multialloc_chain_node_deallocator::value_type	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename A::value_type value_type;$/;"	t	class:boost::container::containers_detail::allocator_multialloc_chain_node_deallocator	access:private
boost::container::containers_detail::allocator_multialloc_chain_node_deallocator::~allocator_multialloc_chain_node_deallocator	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   ~allocator_multialloc_chain_node_deallocator()$/;"	f	class:boost::container::containers_detail::allocator_multialloc_chain_node_deallocator	access:public	signature:()
boost::container::containers_detail::basic_multiallocation_chain	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^class basic_multiallocation_chain$/;"	c	namespace:boost::container::containers_detail
boost::container::containers_detail::basic_multiallocation_chain::basic_multiallocation_chain	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   basic_multiallocation_chain()$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:()
boost::container::containers_detail::basic_multiallocation_chain::before_begin	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   iterator before_begin()$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:()
boost::container::containers_detail::basic_multiallocation_chain::begin	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   iterator begin()$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:()
boost::container::containers_detail::basic_multiallocation_chain::clear	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void clear()$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:()
boost::container::containers_detail::basic_multiallocation_chain::empty	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   bool empty() const$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:() const
boost::container::containers_detail::basic_multiallocation_chain::end	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   iterator end()$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:()
boost::container::containers_detail::basic_multiallocation_chain::extract_data	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   std::pair<void_pointer, void_pointer> extract_data()$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:()
boost::container::containers_detail::basic_multiallocation_chain::front	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void *front()$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:()
boost::container::containers_detail::basic_multiallocation_chain::incorporate_after	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void incorporate_after(iterator after_this, void_pointer begin , iterator before_end)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:(iterator after_this, void_pointer begin , iterator before_end)
boost::container::containers_detail::basic_multiallocation_chain::incorporate_after	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void incorporate_after(iterator after_this, void_pointer begin, void_pointer before_end, std::size_t n)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:(iterator after_this, void_pointer begin, void_pointer before_end, std::size_t n)
boost::container::containers_detail::basic_multiallocation_chain::insert_after	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   iterator insert_after(iterator it, void_pointer m)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:(iterator it, void_pointer m)
boost::container::containers_detail::basic_multiallocation_chain::iterator	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   typedef typename slist_impl_t::iterator iterator;$/;"	t	class:boost::container::containers_detail::basic_multiallocation_chain	access:public
boost::container::containers_detail::basic_multiallocation_chain::iterator_to	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   static iterator iterator_to(void_pointer p)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:(void_pointer p)
boost::container::containers_detail::basic_multiallocation_chain::last	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   iterator last()$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:()
boost::container::containers_detail::basic_multiallocation_chain::node	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^                        > node;$/;"	t	class:boost::container::containers_detail::basic_multiallocation_chain	access:private
boost::container::containers_detail::basic_multiallocation_chain::pop_front	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void pop_front()$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:()
boost::container::containers_detail::basic_multiallocation_chain::push_back	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void push_back(void_pointer m)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:(void_pointer m)
boost::container::containers_detail::basic_multiallocation_chain::push_front	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void push_front(void_pointer m)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:(void_pointer m)
boost::container::containers_detail::basic_multiallocation_chain::size	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   std::size_t size() const$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:() const
boost::container::containers_detail::basic_multiallocation_chain::slist_impl_	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^      :  slist_impl_()$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:()
boost::container::containers_detail::basic_multiallocation_chain::slist_impl_	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   slist_impl_t slist_impl_;$/;"	m	class:boost::container::containers_detail::basic_multiallocation_chain	access:private
boost::container::containers_detail::basic_multiallocation_chain::slist_impl_t	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^                    > slist_impl_t;$/;"	t	class:boost::container::containers_detail::basic_multiallocation_chain	access:private
boost::container::containers_detail::basic_multiallocation_chain::splice_after	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void splice_after(iterator after_this, basic_multiallocation_chain &x)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:(iterator after_this, basic_multiallocation_chain &x)
boost::container::containers_detail::basic_multiallocation_chain::splice_after	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void splice_after(iterator after_this, basic_multiallocation_chain &x, iterator before_begin, iterator before_end)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:(iterator after_this, basic_multiallocation_chain &x, iterator before_begin, iterator before_end)
boost::container::containers_detail::basic_multiallocation_chain::splice_after	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void splice_after(iterator after_this, basic_multiallocation_chain &x, iterator before_begin, iterator before_end, std::size_t n)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:(iterator after_this, basic_multiallocation_chain &x, iterator before_begin, iterator before_end, std::size_t n)
boost::container::containers_detail::basic_multiallocation_chain::swap	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void swap(basic_multiallocation_chain &x)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:(basic_multiallocation_chain &x)
boost::container::containers_detail::basic_multiallocation_chain::to_node	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   static node & to_node(VoidPointer p)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:private	signature:(VoidPointer p)
boost::container::containers_detail::basic_multiallocation_chain::void_pointer	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   typedef VoidPointer  void_pointer;$/;"	t	class:boost::container::containers_detail::basic_multiallocation_chain	access:public
boost::container::containers_detail::basic_string_base	/usr/include/boost/interprocess/containers/container/string.hpp	/^class basic_string_base$/;"	c	namespace:boost::container::containers_detail
boost::container::containers_detail::basic_string_base::AlignmentOfValueType	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static const size_type  AlignmentOfValueType =$/;"	m	class:boost::container::containers_detail::basic_string_base	access:protected
boost::container::containers_detail::basic_string_base::alloc	/usr/include/boost/interprocess/containers/container/string.hpp	/^   A &alloc()$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:()
boost::container::containers_detail::basic_string_base::alloc	/usr/include/boost/interprocess/containers/container/string.hpp	/^   const A &alloc() const$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:() const
boost::container::containers_detail::basic_string_base::allocate_initial_block	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void allocate_initial_block(std::size_t n)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(std::size_t n)
boost::container::containers_detail::basic_string_base::allocation_command	/usr/include/boost/interprocess/containers/container/string.hpp	/^      allocation_command(allocation_type command,$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, const pointer &reuse, allocator_v1)
boost::container::containers_detail::basic_string_base::allocation_command	/usr/include/boost/interprocess/containers/container/string.hpp	/^      allocation_command(allocation_type command,$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, pointer reuse = 0)
boost::container::containers_detail::basic_string_base::allocation_command	/usr/include/boost/interprocess/containers/container/string.hpp	/^      allocation_command(allocation_type command,$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, pointer reuse, allocator_v2)
boost::container::containers_detail::basic_string_base::allocator_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef A allocator_type;$/;"	t	class:boost::container::containers_detail::basic_string_base	access:public
boost::container::containers_detail::basic_string_base::allocator_v1	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef containers_detail::integral_constant<unsigned, 1>      allocator_v1;$/;"	t	class:boost::container::containers_detail::basic_string_base	access:protected
boost::container::containers_detail::basic_string_base::allocator_v2	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef containers_detail::integral_constant<unsigned, 2>      allocator_v2;$/;"	t	class:boost::container::containers_detail::basic_string_base	access:protected
boost::container::containers_detail::basic_string_base::alloc_version	/usr/include/boost/interprocess/containers/container/string.hpp	/^      boost::container::containers_detail::version<A>::value> alloc_version;$/;"	t	class:boost::container::containers_detail::basic_string_base	access:protected
boost::container::containers_detail::basic_string_base::basic_string_base	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string_base();$/;"	p	class:boost::container::containers_detail::basic_string_base	access:private	signature:()
boost::container::containers_detail::basic_string_base::basic_string_base	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string_base(const allocator_type& a)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:public	signature:(const allocator_type& a)
boost::container::containers_detail::basic_string_base::basic_string_base	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string_base(const allocator_type& a, std::size_t n)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:public	signature:(const allocator_type& a, std::size_t n)
boost::container::containers_detail::basic_string_base::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/containers/container/string.hpp	/^   BOOST_STATIC_ASSERT((containers_detail::alignment_of<long_alignment_type>::value % $/;"	p	class:boost::container::containers_detail::basic_string_base	access:private	signature:(containers_detail::alignment_of<long_alignment_type>::value % containers_detail::alignment_of<long_t>::value) == 0
boost::container::containers_detail::basic_string_base::construct	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void construct(pointer p, const value_type &value = value_type())$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(pointer p, const value_type &value = value_type())
boost::container::containers_detail::basic_string_base::deallocate	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void deallocate(pointer p, std::size_t n) $/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(pointer p, std::size_t n)
boost::container::containers_detail::basic_string_base::deallocate_block	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void deallocate_block() $/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:()
boost::container::containers_detail::basic_string_base::destroy	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void destroy(pointer p)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(pointer p)
boost::container::containers_detail::basic_string_base::destroy	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void destroy(pointer p, size_type n)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(pointer p, size_type n)
boost::container::containers_detail::basic_string_base::init	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void init()$/;"	f	class:boost::container::containers_detail::basic_string_base	access:private	signature:()
boost::container::containers_detail::basic_string_base::InternalBufferChars	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static const size_type InternalBufferChars = (sizeof(repr_t) - ShortDataOffset)\/sizeof(value_type);$/;"	m	class:boost::container::containers_detail::basic_string_base	access:protected
boost::container::containers_detail::basic_string_base::is_short	/usr/include/boost/interprocess/containers/container/string.hpp	/^   bool is_short() const$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:() const
boost::container::containers_detail::basic_string_base::is_short	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void is_short(bool yes)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(bool yes)
boost::container::containers_detail::basic_string_base::long_alignment_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef void *long_alignment_type;$/;"	t	class:boost::container::containers_detail::basic_string_base	access:private
boost::container::containers_detail::basic_string_base::long_raw_t	/usr/include/boost/interprocess/containers/container/string.hpp	/^   struct long_raw_t$/;"	s	class:boost::container::containers_detail::basic_string_base	access:private
boost::container::containers_detail::basic_string_base::long_raw_t::a	/usr/include/boost/interprocess/containers/container/string.hpp	/^      long_alignment_type  a;$/;"	m	struct:boost::container::containers_detail::basic_string_base::long_raw_t	access:public
boost::container::containers_detail::basic_string_base::long_raw_t::b	/usr/include/boost/interprocess/containers/container/string.hpp	/^      unsigned char        b[sizeof(long_t) - sizeof(long_alignment_type)];$/;"	m	struct:boost::container::containers_detail::basic_string_base::long_raw_t	access:public
boost::container::containers_detail::basic_string_base::long_t	/usr/include/boost/interprocess/containers/container/string.hpp	/^   struct long_t$/;"	s	class:boost::container::containers_detail::basic_string_base	access:private
boost::container::containers_detail::basic_string_base::long_t::is_short	/usr/include/boost/interprocess/containers/container/string.hpp	/^      size_type      is_short  : 1;$/;"	m	struct:boost::container::containers_detail::basic_string_base::long_t	access:public
boost::container::containers_detail::basic_string_base::long_t::length	/usr/include/boost/interprocess/containers/container/string.hpp	/^      size_type      length    : (sizeof(size_type)*CHAR_BIT - 1);$/;"	m	struct:boost::container::containers_detail::basic_string_base::long_t	access:public
boost::container::containers_detail::basic_string_base::long_t::long_t	/usr/include/boost/interprocess/containers/container/string.hpp	/^      long_t()$/;"	f	struct:boost::container::containers_detail::basic_string_base::long_t	access:public	signature:()
boost::container::containers_detail::basic_string_base::long_t::long_t	/usr/include/boost/interprocess/containers/container/string.hpp	/^      long_t(const long_t &other)$/;"	f	struct:boost::container::containers_detail::basic_string_base::long_t	access:public	signature:(const long_t &other)
boost::container::containers_detail::basic_string_base::long_t::operator =	/usr/include/boost/interprocess/containers/container/string.hpp	/^      long_t &operator =(const long_t &other)$/;"	f	struct:boost::container::containers_detail::basic_string_base::long_t	access:public	signature:(const long_t &other)
boost::container::containers_detail::basic_string_base::long_t::start	/usr/include/boost/interprocess/containers/container/string.hpp	/^      pointer        start;$/;"	m	struct:boost::container::containers_detail::basic_string_base::long_t	access:public
boost::container::containers_detail::basic_string_base::long_t::storage	/usr/include/boost/interprocess/containers/container/string.hpp	/^      size_type      storage;$/;"	m	struct:boost::container::containers_detail::basic_string_base::long_t	access:public
boost::container::containers_detail::basic_string_base::max_size	/usr/include/boost/interprocess/containers/container/string.hpp	/^   std::size_t max_size() const$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:() const
boost::container::containers_detail::basic_string_base::members_	/usr/include/boost/interprocess/containers/container/string.hpp	/^      :  members_(b.members_)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:public	signature:(b.members_)
boost::container::containers_detail::basic_string_base::members_	/usr/include/boost/interprocess/containers/container/string.hpp	/^   } members_;$/;"	m	class:boost::container::containers_detail::basic_string_base	typeref:struct:boost::container::containers_detail::basic_string_base::members_holder	access:protected
boost::container::containers_detail::basic_string_base::members_holder	/usr/include/boost/interprocess/containers/container/string.hpp	/^   struct members_holder$/;"	s	class:boost::container::containers_detail::basic_string_base	inherits:A	access:protected
boost::container::containers_detail::basic_string_base::members_holder::members_holder	/usr/include/boost/interprocess/containers/container/string.hpp	/^      members_holder(const A &a)$/;"	f	struct:boost::container::containers_detail::basic_string_base::members_holder	access:public	signature:(const A &a)
boost::container::containers_detail::basic_string_base::members_holder::m_repr	/usr/include/boost/interprocess/containers/container/string.hpp	/^      repr_t m_repr;$/;"	m	struct:boost::container::containers_detail::basic_string_base::members_holder	access:public
boost::container::containers_detail::basic_string_base::MinAllocation	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static const size_type MinAllocation = InternalBufferChars*2;$/;"	m	class:boost::container::containers_detail::basic_string_base	access:private
boost::container::containers_detail::basic_string_base::MinInternalBufferChars	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static const size_type  MinInternalBufferChars = 8;$/;"	m	class:boost::container::containers_detail::basic_string_base	access:protected
boost::container::containers_detail::basic_string_base::next_capacity	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type next_capacity(size_type additional_objects) const$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(size_type additional_objects) const
boost::container::containers_detail::basic_string_base::pointer	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef typename A::pointer     pointer;$/;"	t	class:boost::container::containers_detail::basic_string_base	access:public
boost::container::containers_detail::basic_string_base::priv_addr	/usr/include/boost/interprocess/containers/container/string.hpp	/^   pointer priv_addr() const$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:() const
boost::container::containers_detail::basic_string_base::priv_addr	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_addr(pointer addr)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(pointer addr)
boost::container::containers_detail::basic_string_base::priv_capacity	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type priv_capacity() const$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:() const
boost::container::containers_detail::basic_string_base::priv_size	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type priv_size() const$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:() const
boost::container::containers_detail::basic_string_base::priv_size	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_size(size_type sz)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(size_type sz)
boost::container::containers_detail::basic_string_base::priv_storage	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type priv_storage() const$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:() const
boost::container::containers_detail::basic_string_base::priv_storage	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_storage(size_type storage)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(size_type storage)
boost::container::containers_detail::basic_string_base::repr_t	/usr/include/boost/interprocess/containers/container/string.hpp	/^   union repr_t$/;"	u	class:boost::container::containers_detail::basic_string_base	access:protected
boost::container::containers_detail::basic_string_base::repr_t::long_repr	/usr/include/boost/interprocess/containers/container/string.hpp	/^      long_t &long_repr() const$/;"	f	union:boost::container::containers_detail::basic_string_base::repr_t	access:public	signature:() const
boost::container::containers_detail::basic_string_base::repr_t::r	/usr/include/boost/interprocess/containers/container/string.hpp	/^      long_raw_t  r;$/;"	m	union:boost::container::containers_detail::basic_string_base::repr_t	access:public
boost::container::containers_detail::basic_string_base::repr_t::s	/usr/include/boost/interprocess/containers/container/string.hpp	/^      short_t     s;$/;"	m	union:boost::container::containers_detail::basic_string_base::repr_t	access:public
boost::container::containers_detail::basic_string_base::repr_t::short_repr	/usr/include/boost/interprocess/containers/container/string.hpp	/^      short_t &short_repr() const$/;"	f	union:boost::container::containers_detail::basic_string_base::repr_t	access:public	signature:() const
boost::container::containers_detail::basic_string_base::ShortDataOffset	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static const size_type  ShortDataOffset =$/;"	m	class:boost::container::containers_detail::basic_string_base	access:protected
boost::container::containers_detail::basic_string_base::short_header	/usr/include/boost/interprocess/containers/container/string.hpp	/^   struct short_header$/;"	s	class:boost::container::containers_detail::basic_string_base	access:private
boost::container::containers_detail::basic_string_base::short_header::is_short	/usr/include/boost/interprocess/containers/container/string.hpp	/^      unsigned char  is_short  : 1;$/;"	m	struct:boost::container::containers_detail::basic_string_base::short_header	access:public
boost::container::containers_detail::basic_string_base::short_header::length	/usr/include/boost/interprocess/containers/container/string.hpp	/^      unsigned char  length    : (CHAR_BIT - 1);$/;"	m	struct:boost::container::containers_detail::basic_string_base::short_header	access:public
boost::container::containers_detail::basic_string_base::short_t	/usr/include/boost/interprocess/containers/container/string.hpp	/^   struct short_t$/;"	s	class:boost::container::containers_detail::basic_string_base	access:protected
boost::container::containers_detail::basic_string_base::short_t::data	/usr/include/boost/interprocess/containers/container/string.hpp	/^      value_type     data[UnalignedFinalInternalBufferChars];$/;"	m	struct:boost::container::containers_detail::basic_string_base::short_t	access:public
boost::container::containers_detail::basic_string_base::short_t::h	/usr/include/boost/interprocess/containers/container/string.hpp	/^      short_header   h; $/;"	m	struct:boost::container::containers_detail::basic_string_base::short_t	access:public
boost::container::containers_detail::basic_string_base::size_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef typename A::size_type   size_type;$/;"	t	class:boost::container::containers_detail::basic_string_base	access:public
boost::container::containers_detail::basic_string_base::stored_allocator_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef allocator_type                          stored_allocator_type;$/;"	t	class:boost::container::containers_detail::basic_string_base	access:public
boost::container::containers_detail::basic_string_base::swap	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void swap(basic_string_base& other)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(basic_string_base& other)
boost::container::containers_detail::basic_string_base::throw_length_error	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void throw_length_error() const$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:() const
boost::container::containers_detail::basic_string_base::throw_out_of_range	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void throw_out_of_range() const$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:() const
boost::container::containers_detail::basic_string_base::UnalignedFinalInternalBufferChars	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static const size_type  UnalignedFinalInternalBufferChars = $/;"	m	class:boost::container::containers_detail::basic_string_base	access:protected
boost::container::containers_detail::basic_string_base::value_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef typename A::value_type  value_type;$/;"	t	class:boost::container::containers_detail::basic_string_base	access:public
boost::container::containers_detail::basic_string_base::ZeroCostInternalBufferChars	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static const size_type  ZeroCostInternalBufferChars =$/;"	m	class:boost::container::containers_detail::basic_string_base	access:protected
boost::container::containers_detail::basic_string_base::~basic_string_base	/usr/include/boost/interprocess/containers/container/string.hpp	/^   ~basic_string_base() $/;"	f	class:boost::container::containers_detail::basic_string_base	access:public	signature:()
boost::container::containers_detail::bool_	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct bool_ : integral_constant<bool, C_>$/;"	s	namespace:boost::container::containers_detail	inherits:integral_constant
boost::container::containers_detail::bool_::value	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   static const bool value = C_;$/;"	m	struct:boost::container::containers_detail::bool_	access:public
boost::container::containers_detail::build_number_seq	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^struct build_number_seq<0, index_tuple<Indexes...> >$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::build_number_seq	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^struct build_number_seq<Num, index_tuple<Indexes...> >$/;"	s	namespace:boost::container::containers_detail	inherits:build_number_seq
boost::container::containers_detail::build_number_seq::type	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^{  typedef index_tuple<Indexes...> type;  };$/;"	t	struct:boost::container::containers_detail::build_number_seq	access:public
boost::container::containers_detail::calculate_alignment	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^inline std::size_t calculate_alignment$/;"	f	namespace:boost::container::containers_detail	signature:( std::size_t overhead_percent, std::size_t real_node_size , std::size_t hdr_size, std::size_t hdr_offset_size, std::size_t payload_per_allocation)
boost::container::containers_detail::calculate_num_subblocks	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^inline void calculate_num_subblocks$/;"	f	namespace:boost::container::containers_detail	signature:(std::size_t alignment, std::size_t real_node_size, std::size_t elements_per_block , std::size_t &num_subblocks, std::size_t &real_num_node, std::size_t overhead_percent , std::size_t hdr_size, std::size_t hdr_offset_size, std::size_t payload_per_allocation)
boost::container::containers_detail::cast_functor	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^struct cast_functor$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::cast_functor::operator ()	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   result_type operator()(U &ptr) const$/;"	f	struct:boost::container::containers_detail::cast_functor	access:public	signature:(U &ptr) const
boost::container::containers_detail::cast_functor::result_type	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   typedef typename containers_detail::add_reference<T>::type result_type;$/;"	t	struct:boost::container::containers_detail::cast_functor	access:public
boost::container::containers_detail::clear	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void clear(allocator_v1)$/;"	f	namespace:boost::container::containers_detail	signature:(allocator_v1)
boost::container::containers_detail::clear	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void clear(allocator_v2)$/;"	f	namespace:boost::container::containers_detail	signature:(allocator_v2)
boost::container::containers_detail::cloner	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   struct cloner$/;"	s	namespace:boost::container::containers_detail	access:protected
boost::container::containers_detail::cloner::cloner	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      cloner(node_alloc_holder &holder)$/;"	f	struct:boost::container::containers_detail::cloner	access:public	signature:(node_alloc_holder &holder)
boost::container::containers_detail::cloner::m_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      node_alloc_holder &m_holder;$/;"	m	struct:boost::container::containers_detail::cloner	access:public
boost::container::containers_detail::cloner::operator ()	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      NodePtr operator()(const Node &other) const$/;"	f	struct:boost::container::containers_detail::cloner	access:public	signature:(const Node &other) const
boost::container::containers_detail::construct	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   static void construct(const NodePtr &ptr)$/;"	f	namespace:boost::container::containers_detail	signature:(const NodePtr &ptr)
boost::container::containers_detail::construct	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   static void construct(const NodePtr &ptr, Args &&...args)$/;"	f	namespace:boost::container::containers_detail	signature:(const NodePtr &ptr, Args &&...args)
boost::container::containers_detail::construct	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   static void construct(const NodePtr &ptr,$/;"	f	namespace:boost::container::containers_detail	signature:(const NodePtr &ptr, BOOST_INTERPROCESS_RV_REF_2_TEMPL_ARGS(std::pair, Convertible1, Convertible2) value)
boost::container::containers_detail::construct_in_place_impl	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^inline void construct_in_place_impl(T* dest, const InpIt &source, containers_detail::false_)$/;"	f	namespace:boost::container::containers_detail	signature:(T* dest, const InpIt &source, containers_detail::false_)
boost::container::containers_detail::construct_in_place_impl	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^inline void construct_in_place_impl(T* dest, const InpIt &source, containers_detail::true_)$/;"	f	namespace:boost::container::containers_detail	signature:(T* dest, const InpIt &source, containers_detail::true_)
boost::container::containers_detail::create_node	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   NodePtr create_node()$/;"	f	namespace:boost::container::containers_detail	signature:()
boost::container::containers_detail::create_node	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   NodePtr create_node(Args &&...args)$/;"	f	namespace:boost::container::containers_detail	signature:(Args &&....args)
boost::container::containers_detail::create_node_and_deallocator	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   Deallocator create_node_and_deallocator()$/;"	f	namespace:boost::container::containers_detail	signature:()
boost::container::containers_detail::create_node_from_it	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   NodePtr create_node_from_it(It it)$/;"	f	namespace:boost::container::containers_detail	signature:(It it)
boost::container::containers_detail::ct_rounded_size	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^struct ct_rounded_size$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::ct_rounded_size::value	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^   enum { value = ((OrigSize-1)\/RoundTo+1)*RoundTo };$/;"	e	enum:boost::container::containers_detail::ct_rounded_size::__anon6
boost::container::containers_detail::deallocate_one	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void deallocate_one(NodePtr p)$/;"	f	namespace:boost::container::containers_detail	signature:(NodePtr p)
boost::container::containers_detail::deallocate_one	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void deallocate_one(NodePtr p, allocator_v1)$/;"	f	namespace:boost::container::containers_detail	signature:(NodePtr p, allocator_v1)
boost::container::containers_detail::deallocate_one	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void deallocate_one(NodePtr p, allocator_v2)$/;"	f	namespace:boost::container::containers_detail	signature:(NodePtr p, allocator_v2)
boost::container::containers_detail::default_construct_aux_proxy	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^struct default_construct_aux_proxy$/;"	s	namespace:boost::container::containers_detail	inherits:advanced_insert_aux_int
boost::container::containers_detail::default_construct_aux_proxy::copy_all_to	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void copy_all_to(Iterator)$/;"	f	struct:boost::container::containers_detail::default_construct_aux_proxy	access:public	signature:(Iterator)
boost::container::containers_detail::default_construct_aux_proxy::copy_some_and_update	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void copy_some_and_update(Iterator , difference_type division_count, bool first_n)$/;"	f	struct:boost::container::containers_detail::default_construct_aux_proxy	access:public	signature:(Iterator , difference_type division_count, bool first_n)
boost::container::containers_detail::default_construct_aux_proxy::count_	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   SizeType count_;$/;"	m	struct:boost::container::containers_detail::default_construct_aux_proxy	access:public
boost::container::containers_detail::default_construct_aux_proxy::default_construct_aux_proxy	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   default_construct_aux_proxy(SizeType count)$/;"	f	struct:boost::container::containers_detail::default_construct_aux_proxy	access:public	signature:(SizeType count)
boost::container::containers_detail::default_construct_aux_proxy::difference_type	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   typedef typename advanced_insert_aux_int<T, Iterator>::difference_type difference_type;$/;"	t	struct:boost::container::containers_detail::default_construct_aux_proxy	access:public
boost::container::containers_detail::default_construct_aux_proxy::uninitialized_copy_all_to	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void uninitialized_copy_all_to(Iterator p)$/;"	f	struct:boost::container::containers_detail::default_construct_aux_proxy	access:public	signature:(Iterator p)
boost::container::containers_detail::default_construct_aux_proxy::uninitialized_copy_impl	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   void uninitialized_copy_impl(Iterator p, const SizeType n)$/;"	f	struct:boost::container::containers_detail::default_construct_aux_proxy	access:public	signature:(Iterator p, const SizeType n)
boost::container::containers_detail::default_construct_aux_proxy::uninitialized_copy_some_and_update	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void uninitialized_copy_some_and_update(Iterator pos, difference_type division_count, bool first_n)$/;"	f	struct:boost::container::containers_detail::default_construct_aux_proxy	access:public	signature:(Iterator pos, difference_type division_count, bool first_n)
boost::container::containers_detail::default_construct_aux_proxy::~default_construct_aux_proxy	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual ~default_construct_aux_proxy()$/;"	f	struct:boost::container::containers_detail::default_construct_aux_proxy	access:public	signature:()
boost::container::containers_detail::destroy	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   static void destroy(const NodePtr &ptr)$/;"	f	namespace:boost::container::containers_detail	signature:(const NodePtr &ptr)
boost::container::containers_detail::destroyer	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   struct destroyer$/;"	s	namespace:boost::container::containers_detail	access:protected
boost::container::containers_detail::destroyer::destroyer	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      destroyer(node_alloc_holder &holder)$/;"	f	struct:boost::container::containers_detail::destroyer	access:public	signature:(node_alloc_holder &holder)
boost::container::containers_detail::destroyer::m_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      node_alloc_holder &m_holder;$/;"	m	struct:boost::container::containers_detail::destroyer	access:public
boost::container::containers_detail::destroyer::operator ()	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      void operator()(NodePtr n) const$/;"	f	struct:boost::container::containers_detail::destroyer	access:public	signature:(NodePtr n) const
boost::container::containers_detail::destroy_node	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void destroy_node(NodePtr node)$/;"	f	namespace:boost::container::containers_detail	signature:(NodePtr node)
boost::container::containers_detail::disable_if	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct disable_if : public enable_if_c<!Cond::value, T> {};$/;"	s	namespace:boost::container::containers_detail	inherits:enable_if_c
boost::container::containers_detail::do_swap	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^inline void do_swap(T& x, T& y)$/;"	f	namespace:boost::container::containers_detail	signature:(T& x, T& y)
boost::container::containers_detail::enable_if	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct enable_if : public enable_if_c<Cond::value, T> {};$/;"	s	namespace:boost::container::containers_detail	inherits:enable_if_c
boost::container::containers_detail::enable_if_c	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct enable_if_c {$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::enable_if_c	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct enable_if_c<false, T> {};$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::enable_if_c::type	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^  typedef T type;$/;"	t	struct:boost::container::containers_detail::enable_if_c	access:public
boost::container::containers_detail::erase_key	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   size_type erase_key(const Key& k, const Comparator &comp, allocator_v1)$/;"	f	namespace:boost::container::containers_detail	signature:(const Key& k, const Comparator &comp, allocator_v1)
boost::container::containers_detail::erase_key	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   size_type erase_key(const Key& k, const Comparator &comp, allocator_v2)$/;"	f	namespace:boost::container::containers_detail	signature:(const Key& k, const Comparator &comp, allocator_v2)
boost::container::containers_detail::erase_range	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   icont_iterator erase_range(icont_iterator first, icont_iterator last, allocator_v1)$/;"	f	namespace:boost::container::containers_detail	signature:(icont_iterator first, icont_iterator last, allocator_v1)
boost::container::containers_detail::erase_range	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   icont_iterator erase_range(icont_iterator first, icont_iterator last, allocator_v2)$/;"	f	namespace:boost::container::containers_detail	signature:(icont_iterator first, icont_iterator last, allocator_v2)
boost::container::containers_detail::false_	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^typedef bool_<false>       false_;$/;"	t	namespace:boost::container::containers_detail
boost::container::containers_detail::false_type	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^typedef false_ false_type;$/;"	t	namespace:boost::container::containers_detail
boost::container::containers_detail::flat_tree	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^class flat_tree$/;"	c	namespace:boost::container::containers_detail
boost::container::containers_detail::flat_tree::allocator_t	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef Alloc                                      allocator_t;$/;"	t	class:boost::container::containers_detail::flat_tree	access:private
boost::container::containers_detail::flat_tree::allocator_type	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef typename vector_t::allocator_type          allocator_type;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
boost::container::containers_detail::flat_tree::begin	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
boost::container::containers_detail::flat_tree::begin	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator begin() $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:()
boost::container::containers_detail::flat_tree::capacity	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   size_type capacity() const           $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
boost::container::containers_detail::flat_tree::cbegin	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_iterator cbegin() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
boost::container::containers_detail::flat_tree::cend	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_iterator cend() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
boost::container::containers_detail::flat_tree::clear	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   void clear()$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:()
boost::container::containers_detail::flat_tree::const_iterator	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef typename vector_t::const_iterator          const_iterator;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
boost::container::containers_detail::flat_tree::const_pointer	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef typename vector_t::const_pointer           const_pointer;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
boost::container::containers_detail::flat_tree::const_reference	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef typename vector_t::const_reference         const_reference;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
boost::container::containers_detail::flat_tree::const_reverse_iterator	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef std::reverse_iterator<const_iterator>      const_reverse_iterator;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
boost::container::containers_detail::flat_tree::count	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   size_type count(const key_type& k) const$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const key_type& k) const
boost::container::containers_detail::flat_tree::crbegin	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_reverse_iterator crbegin() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
boost::container::containers_detail::flat_tree::crend	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_reverse_iterator crend() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
boost::container::containers_detail::flat_tree::Data	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   struct Data $/;"	s	class:boost::container::containers_detail::flat_tree	inherits:value_compare	access:private
boost::container::containers_detail::flat_tree::Data::Data	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      Data(const Compare &comp,$/;"	f	struct:boost::container::containers_detail::flat_tree::Data	access:public	signature:(const Compare &comp, const allocator_t &alloc)
boost::container::containers_detail::flat_tree::Data::Data	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      Data(const Compare &comp,$/;"	f	struct:boost::container::containers_detail::flat_tree::Data	access:public	signature:(const Compare &comp, const vector_t &vect)
boost::container::containers_detail::flat_tree::Data::Data	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      Data(const Data &d)$/;"	f	struct:boost::container::containers_detail::flat_tree::Data	access:public	signature:(const Data &d)
boost::container::containers_detail::flat_tree::Data::Data	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      Data(const value_compare &comp,$/;"	f	struct:boost::container::containers_detail::flat_tree::Data	access:public	signature:(const value_compare &comp, const vector_t &vect)
boost::container::containers_detail::flat_tree::Data::m_vect	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      vector_t m_vect;$/;"	m	struct:boost::container::containers_detail::flat_tree::Data	access:public
boost::container::containers_detail::flat_tree::difference_type	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef typename allocator_type::difference_type   difference_type;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
boost::container::containers_detail::flat_tree::emplace_equal	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator emplace_equal()$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:()
boost::container::containers_detail::flat_tree::emplace_equal	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator emplace_equal(Args&&... args)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(Args&&.... args)
boost::container::containers_detail::flat_tree::emplace_hint_equal	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator emplace_hint_equal(const_iterator hint)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const_iterator hint)
boost::container::containers_detail::flat_tree::emplace_hint_equal	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator emplace_hint_equal(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const_iterator hint, Args&&... args)
boost::container::containers_detail::flat_tree::emplace_hint_unique	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator emplace_hint_unique(const_iterator hint)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const_iterator hint)
boost::container::containers_detail::flat_tree::emplace_hint_unique	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator emplace_hint_unique(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const_iterator hint, Args&&... args)
boost::container::containers_detail::flat_tree::emplace_unique	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator emplace_unique()$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:()
boost::container::containers_detail::flat_tree::emplace_unique	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator emplace_unique(Args&&... args)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(Args&&.... args)
boost::container::containers_detail::flat_tree::empty	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   bool empty() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
boost::container::containers_detail::flat_tree::end	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
boost::container::containers_detail::flat_tree::end	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator end() $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:()
boost::container::containers_detail::flat_tree::equal_range	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   std::pair<const_iterator, const_iterator> equal_range(const key_type& k) const$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const key_type& k) const
boost::container::containers_detail::flat_tree::equal_range	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   std::pair<iterator,iterator> equal_range(const key_type& k)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const key_type& k)
boost::container::containers_detail::flat_tree::erase	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const_iterator first, const_iterator last)
boost::container::containers_detail::flat_tree::erase	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator erase(const_iterator position)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const_iterator position)
boost::container::containers_detail::flat_tree::erase	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   size_type erase(const key_type& k)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const key_type& k)
boost::container::containers_detail::flat_tree::find	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_iterator find(const key_type& k) const$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const key_type& k) const
boost::container::containers_detail::flat_tree::find	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator find(const key_type& k)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const key_type& k)
boost::container::containers_detail::flat_tree::flat_tree	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   flat_tree( ordered_range_t, InputIterator first, InputIterator last$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:( ordered_range_t, InputIterator first, InputIterator last , const Compare& comp = Compare() , const allocator_type& a = allocator_type())
boost::container::containers_detail::flat_tree::flat_tree	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   flat_tree(const Compare& comp     = Compare(), $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const Compare& comp = Compare(), const allocator_type& a = allocator_type())
boost::container::containers_detail::flat_tree::flat_tree	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   flat_tree(const flat_tree& x) $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const flat_tree& x)
boost::container::containers_detail::flat_tree::get_allocator	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
boost::container::containers_detail::flat_tree::get_stored_allocator	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
boost::container::containers_detail::flat_tree::get_stored_allocator	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:()
boost::container::containers_detail::flat_tree::insert_commit_data	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   struct insert_commit_data$/;"	s	class:boost::container::containers_detail::flat_tree	access:private
boost::container::containers_detail::flat_tree::insert_commit_data::position	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      const_iterator position;$/;"	m	struct:boost::container::containers_detail::flat_tree::insert_commit_data	access:public
boost::container::containers_detail::flat_tree::insert_equal	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator insert_equal(const value_type& val)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const value_type& val)
boost::container::containers_detail::flat_tree::insert_equal	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator insert_equal(const_iterator pos, BOOST_INTERPROCESS_RV_REF(value_type) mval)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const_iterator pos, BOOST_INTERPROCESS_RV_REF(value_type) mval)
boost::container::containers_detail::flat_tree::insert_equal	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator insert_equal(const_iterator pos, const value_type& val)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const_iterator pos, const value_type& val)
boost::container::containers_detail::flat_tree::insert_equal	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   void insert_equal(InIt first, InIt last)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(InIt first, InIt last)
boost::container::containers_detail::flat_tree::insert_unique	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator insert_unique(const_iterator pos, BOOST_INTERPROCESS_RV_REF(value_type) mval)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const_iterator pos, BOOST_INTERPROCESS_RV_REF(value_type) mval)
boost::container::containers_detail::flat_tree::insert_unique	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator insert_unique(const_iterator pos, const value_type& val)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const_iterator pos, const value_type& val)
boost::container::containers_detail::flat_tree::insert_unique	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   std::pair<iterator,bool> insert_unique(const value_type& val)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const value_type& val)
boost::container::containers_detail::flat_tree::insert_unique	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   void insert_unique(InIt first, InIt last)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(InIt first, InIt last)
boost::container::containers_detail::flat_tree::iterator	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef typename vector_t::iterator                iterator;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
boost::container::containers_detail::flat_tree::key_comp	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   Compare key_comp() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
boost::container::containers_detail::flat_tree::key_compare	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef Compare                                    key_compare;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
boost::container::containers_detail::flat_tree::key_type	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef Key                                        key_type;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
boost::container::containers_detail::flat_tree::lower_bound	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_iterator lower_bound(const key_type& k) const$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const key_type& k) const
boost::container::containers_detail::flat_tree::lower_bound	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator lower_bound(const key_type& k)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const key_type& k)
boost::container::containers_detail::flat_tree::max_size	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
boost::container::containers_detail::flat_tree::move	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      :  m_data(boost::interprocess::move(x.m_data))$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(x.m_data)
boost::container::containers_detail::flat_tree::m_data	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   Data m_data;$/;"	m	class:boost::container::containers_detail::flat_tree	access:private
boost::container::containers_detail::flat_tree::pointer	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef typename vector_t::pointer                 pointer;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
boost::container::containers_detail::flat_tree::priv_equal_range	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      priv_equal_range(RanIt first, RanIt last, const key_type& key) const$/;"	f	class:boost::container::containers_detail::flat_tree	access:private	signature:(RanIt first, RanIt last, const key_type& key) const
boost::container::containers_detail::flat_tree::priv_insert_commit	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator priv_insert_commit$/;"	f	class:boost::container::containers_detail::flat_tree	access:private	signature:(insert_commit_data &commit_data, BOOST_INTERPROCESS_FWD_REF(Convertible) convertible)
boost::container::containers_detail::flat_tree::priv_insert_equal	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   void priv_insert_equal(FwdIt first, FwdIt last, std::forward_iterator_tag)$/;"	f	class:boost::container::containers_detail::flat_tree	access:private	signature:(FwdIt first, FwdIt last, std::forward_iterator_tag)
boost::container::containers_detail::flat_tree::priv_insert_equal	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   void priv_insert_equal(InIt first, InIt last, std::input_iterator_tag)$/;"	f	class:boost::container::containers_detail::flat_tree	access:private	signature:(InIt first, InIt last, std::input_iterator_tag)
boost::container::containers_detail::flat_tree::priv_insert_equal_prepare	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   void priv_insert_equal_prepare$/;"	f	class:boost::container::containers_detail::flat_tree	access:private	signature:(const_iterator pos, const value_type& val, insert_commit_data &data)
boost::container::containers_detail::flat_tree::priv_insert_unique_prepare	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   std::pair<iterator,bool> priv_insert_unique_prepare$/;"	f	class:boost::container::containers_detail::flat_tree	access:private	signature:(const value_type& val, insert_commit_data &commit_data)
boost::container::containers_detail::flat_tree::priv_insert_unique_prepare	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   std::pair<iterator,bool> priv_insert_unique_prepare$/;"	f	class:boost::container::containers_detail::flat_tree	access:private	signature:(const_iterator beg, const_iterator end, const value_type& val, insert_commit_data &commit_data)
boost::container::containers_detail::flat_tree::priv_insert_unique_prepare	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   std::pair<iterator,bool> priv_insert_unique_prepare$/;"	f	class:boost::container::containers_detail::flat_tree	access:private	signature:(const_iterator pos, const value_type& val, insert_commit_data &commit_data)
boost::container::containers_detail::flat_tree::priv_lower_bound	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   RanIt priv_lower_bound(RanIt first, RanIt last,$/;"	f	class:boost::container::containers_detail::flat_tree	access:private	signature:(RanIt first, RanIt last, const key_type & key) const
boost::container::containers_detail::flat_tree::priv_upper_bound	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   RanIt priv_upper_bound(RanIt first, RanIt last,$/;"	f	class:boost::container::containers_detail::flat_tree	access:private	signature:(RanIt first, RanIt last, const key_type & key) const
boost::container::containers_detail::flat_tree::rbegin	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
boost::container::containers_detail::flat_tree::rbegin	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   reverse_iterator rbegin() $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:()
boost::container::containers_detail::flat_tree::reference	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef typename vector_t::reference               reference;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
boost::container::containers_detail::flat_tree::rend	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_reverse_iterator rend() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
boost::container::containers_detail::flat_tree::rend	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   reverse_iterator rend() $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:()
boost::container::containers_detail::flat_tree::reserve	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   void reserve(size_type count)       $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(size_type count)
boost::container::containers_detail::flat_tree::reverse_iterator	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef std::reverse_iterator<iterator>            reverse_iterator;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
boost::container::containers_detail::flat_tree::shrink_to_fit	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:()
boost::container::containers_detail::flat_tree::size	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   size_type size() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
boost::container::containers_detail::flat_tree::size_type	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef typename allocator_type::size_type         size_type;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
boost::container::containers_detail::flat_tree::stored_allocator_type	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef allocator_type                             stored_allocator_type;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
boost::container::containers_detail::flat_tree::swap	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   void swap(flat_tree& other) $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(flat_tree& other)
boost::container::containers_detail::flat_tree::upper_bound	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_iterator upper_bound(const key_type& k) const$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const key_type& k) const
boost::container::containers_detail::flat_tree::upper_bound	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator upper_bound(const key_type& k)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const key_type& k)
boost::container::containers_detail::flat_tree::value_compare	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   class value_compare$/;"	c	class:boost::container::containers_detail::flat_tree	inherits:Compare	access:public
boost::container::containers_detail::flat_tree::value_compare::first_argument_type	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      typedef Value              first_argument_type;$/;"	t	class:boost::container::containers_detail::flat_tree::value_compare	access:private
boost::container::containers_detail::flat_tree::value_compare::get_comp	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      Compare &get_comp()$/;"	f	class:boost::container::containers_detail::flat_tree::value_compare	access:public	signature:()
boost::container::containers_detail::flat_tree::value_compare::get_comp	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      const Compare &get_comp() const$/;"	f	class:boost::container::containers_detail::flat_tree::value_compare	access:public	signature:() const
boost::container::containers_detail::flat_tree::value_compare::operator ()	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      bool operator()(const Value& lhs, const Value& rhs) const$/;"	f	class:boost::container::containers_detail::flat_tree::value_compare	access:public	signature:(const Value& lhs, const Value& rhs) const
boost::container::containers_detail::flat_tree::value_compare::return_type	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      typedef bool               return_type;$/;"	t	class:boost::container::containers_detail::flat_tree::value_compare	access:private
boost::container::containers_detail::flat_tree::value_compare::second_argument_type	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      typedef Value              second_argument_type;$/;"	t	class:boost::container::containers_detail::flat_tree::value_compare	access:private
boost::container::containers_detail::flat_tree::value_compare::value_compare	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      value_compare(const Compare &pred) $/;"	f	class:boost::container::containers_detail::flat_tree::value_compare	access:public	signature:(const Compare &pred)
boost::container::containers_detail::flat_tree::value_type	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef typename vector_t::value_type              value_type;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
boost::container::containers_detail::flat_tree::vector_t	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef boost::container::vector<Value, Alloc>  vector_t;$/;"	t	class:boost::container::containers_detail::flat_tree	access:private
boost::container::containers_detail::flat_tree::~flat_tree	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   ~flat_tree()$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:()
boost::container::containers_detail::floor_log2	/usr/include/boost/interprocess/containers/container/detail/math_functions.hpp	/^inline std::size_t floor_log2 (std::size_t x)$/;"	f	namespace:boost::container::containers_detail	signature:(std::size_t x)
boost::container::containers_detail::gcd	/usr/include/boost/interprocess/containers/container/detail/math_functions.hpp	/^inline Integer gcd(Integer A, Integer B)$/;"	f	namespace:boost::container::containers_detail	signature:(Integer A, Integer B)
boost::container::containers_detail::get	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^typename get_impl<I, tuple<Values...> >::const_type get(const tuple<Values...>& t)$/;"	f	namespace:boost::container::containers_detail	signature:(const tuple<Values...>& t)
boost::container::containers_detail::get	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^typename get_impl<I, tuple<Values...> >::type get(tuple<Values...>& t)$/;"	f	namespace:boost::container::containers_detail	signature:(tuple<Values...>& t)
boost::container::containers_detail::get_impl	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^class get_impl<0, tuple<Head, Values...> >$/;"	c	namespace:boost::container::containers_detail
boost::container::containers_detail::get_impl	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^class get_impl<I, tuple<Head, Values...> >$/;"	c	namespace:boost::container::containers_detail
boost::container::containers_detail::get_impl::const_type	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typedef typename add_const_reference<Element>::type            const_type;$/;"	t	class:boost::container::containers_detail::get_impl	access:public
boost::container::containers_detail::get_impl::const_type	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typedef typename add_const_reference<Head>::type   const_type;$/;"	t	class:boost::container::containers_detail::get_impl	access:public
boost::container::containers_detail::get_impl::Element	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typedef typename tuple_element<I-1, tuple<Values...> >::type   Element;$/;"	t	class:boost::container::containers_detail::get_impl	access:private
boost::container::containers_detail::get_impl::get	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   static const_type get(const tuple<Head, Values...>& t)  { return Next::get(t.tail()); }$/;"	f	class:boost::container::containers_detail::get_impl	access:public	signature:(const tuple<Head, Values...>& t)
boost::container::containers_detail::get_impl::get	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   static const_type get(const tuple<Head, Values...>& t){ return t.head(); }$/;"	f	class:boost::container::containers_detail::get_impl	access:public	signature:(const tuple<Head, Values...>& t)
boost::container::containers_detail::get_impl::get	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   static type       get(tuple<Head, Values...>& t)      { return t.head(); }$/;"	f	class:boost::container::containers_detail::get_impl	access:public	signature:(tuple<Head, Values...>& t)
boost::container::containers_detail::get_impl::get	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   static type get(tuple<Head, Values...>& t)              { return Next::get(t.tail()); }$/;"	f	class:boost::container::containers_detail::get_impl	access:public	signature:(tuple<Head, Values...>& t)
boost::container::containers_detail::get_impl::Next	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typedef get_impl<I-1, tuple<Values...> >                       Next;$/;"	t	class:boost::container::containers_detail::get_impl	access:private
boost::container::containers_detail::get_impl::type	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typedef typename add_reference<Element>::type                  type;$/;"	t	class:boost::container::containers_detail::get_impl	access:public
boost::container::containers_detail::get_impl::type	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typedef typename add_reference<Head>::type         type;$/;"	t	class:boost::container::containers_detail::get_impl	access:public
boost::container::containers_detail::get_next_capacity	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^   get_next_capacity(const SizeType max_size$/;"	f	namespace:boost::container::containers_detail	signature:(const SizeType max_size ,const SizeType capacity ,const SizeType n)
boost::container::containers_detail::get_pointer	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^get_pointer(const Ptr &ptr)$/;"	f	namespace:boost::container::containers_detail	signature:(const Ptr &ptr)
boost::container::containers_detail::get_rounded_size	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^inline std::size_t get_rounded_size(std::size_t orig_size, std::size_t round_to)$/;"	f	namespace:boost::container::containers_detail	signature:(std::size_t orig_size, std::size_t round_to)
boost::container::containers_detail::hdr_offset_holder	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^struct hdr_offset_holder$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::hdr_offset_holder::hdr_offset	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   std::size_t hdr_offset;$/;"	m	struct:boost::container::containers_detail::hdr_offset_holder	access:public
boost::container::containers_detail::hdr_offset_holder::hdr_offset_holder	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   hdr_offset_holder(std::size_t offset = 0)$/;"	f	struct:boost::container::containers_detail::hdr_offset_holder	access:public	signature:(std::size_t offset = 0)
boost::container::containers_detail::icont	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   const ICont &icont() const$/;"	f	namespace:boost::container::containers_detail	access:protected	signature:() const
boost::container::containers_detail::icont	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   ICont &icont()$/;"	f	namespace:boost::container::containers_detail	access:protected	signature:()
boost::container::containers_detail::identity	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct identity $/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::identity::operator ()	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   const T& operator()(const T& x) const $/;"	f	struct:boost::container::containers_detail::identity	access:public	signature:(const T& x) const
boost::container::containers_detail::identity::type	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   typedef T type;$/;"	t	struct:boost::container::containers_detail::identity	access:public
boost::container::containers_detail::if_	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct if_$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::if_::type	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   typedef typename if_c<0 != T1::value, T2, T3>::type type;$/;"	t	struct:boost::container::containers_detail::if_	access:public
boost::container::containers_detail::if_c	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct if_c$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::if_c	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct if_c<false,T1,T2>$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::if_c::type	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^    typedef T1 type;$/;"	t	struct:boost::container::containers_detail::if_c	access:public
boost::container::containers_detail::if_c::type	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^    typedef T2 type;$/;"	t	struct:boost::container::containers_detail::if_c	access:public
boost::container::containers_detail::impl	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^namespace impl{$/;"	n	namespace:boost::container::containers_detail
boost::container::containers_detail::impl::extract_version	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^struct extract_version$/;"	s	namespace:boost::container::containers_detail::impl
boost::container::containers_detail::impl::extract_version	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^struct extract_version<T, true>$/;"	s	namespace:boost::container::containers_detail::impl
boost::container::containers_detail::impl::extract_version::value	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^   static const unsigned value = 1;$/;"	m	struct:boost::container::containers_detail::impl::extract_version	access:public
boost::container::containers_detail::impl::extract_version::value	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^   static const unsigned value = T::version::value;$/;"	m	struct:boost::container::containers_detail::impl::extract_version	access:public
boost::container::containers_detail::impl::has_version	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^struct has_version$/;"	s	namespace:boost::container::containers_detail::impl
boost::container::containers_detail::impl::has_version::dummy	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^   void dummy(){}$/;"	f	struct:boost::container::containers_detail::impl::has_version	access:public	signature:()
boost::container::containers_detail::impl::has_version::test	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^   template <class U> static char test(const typename U::version*);$/;"	p	struct:boost::container::containers_detail::impl::has_version	access:private	signature:(const typename U::version*)
boost::container::containers_detail::impl::has_version::test	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^   template <class U> static two test(...);$/;"	p	struct:boost::container::containers_detail::impl::has_version	access:private	signature:(....)
boost::container::containers_detail::impl::has_version::two	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^   struct two {char _[2];};$/;"	s	struct:boost::container::containers_detail::impl::has_version	access:private
boost::container::containers_detail::impl::has_version::two::_	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^   struct two {char _[2];};$/;"	m	struct:boost::container::containers_detail::impl::has_version::two	access:public
boost::container::containers_detail::impl::has_version::value	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^   static const bool value = sizeof(test<T>(0)) == 1;$/;"	m	struct:boost::container::containers_detail::impl::has_version	access:public
boost::container::containers_detail::impl::version	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^struct version$/;"	s	namespace:boost::container::containers_detail::impl
boost::container::containers_detail::impl::version	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^struct version<T, true>$/;"	s	namespace:boost::container::containers_detail::impl
boost::container::containers_detail::impl::version::value	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^   static const unsigned value = 1;$/;"	m	struct:boost::container::containers_detail::impl::version	access:public
boost::container::containers_detail::impl::version::value	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^   static const unsigned value = extract_version<T>::value;$/;"	m	struct:boost::container::containers_detail::impl::version	access:public
boost::container::containers_detail::index_tuple	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^struct index_tuple{};$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::integral_constant	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct integral_constant$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::integral_constant::type	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   typedef integral_constant<T,val> type;$/;"	t	struct:boost::container::containers_detail::integral_constant	access:public
boost::container::containers_detail::integral_constant::value	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   static const T value = val;$/;"	m	struct:boost::container::containers_detail::integral_constant	access:public
boost::container::containers_detail::intrusive_list_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^struct intrusive_list_type$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::intrusive_list_type::container_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^      >::type                                   container_type;$/;"	t	struct:boost::container::containers_detail::intrusive_list_type	access:public
boost::container::containers_detail::intrusive_list_type::node_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^         <value_type, void_pointer>             node_type;$/;"	t	struct:boost::container::containers_detail::intrusive_list_type	access:public
boost::container::containers_detail::intrusive_list_type::type	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef container_type                       type ;$/;"	t	struct:boost::container::containers_detail::intrusive_list_type	access:public
boost::container::containers_detail::intrusive_list_type::value_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename A::value_type               value_type;$/;"	t	struct:boost::container::containers_detail::intrusive_list_type	access:public
boost::container::containers_detail::intrusive_list_type::void_pointer	/usr/include/boost/interprocess/containers/container/list.hpp	/^      <typename A::pointer, void>::type         void_pointer;$/;"	t	struct:boost::container::containers_detail::intrusive_list_type	access:public
boost::container::containers_detail::intrusive_rbtree_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^struct intrusive_rbtree_type$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::intrusive_rbtree_type::container_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      >::type                                      container_type;$/;"	t	struct:boost::container::containers_detail::intrusive_rbtree_type	access:public
boost::container::containers_detail::intrusive_rbtree_type::node_compare_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef node_compare<ValueCompare, node_type>   node_compare_type;$/;"	t	struct:boost::container::containers_detail::intrusive_rbtree_type	access:public
boost::container::containers_detail::intrusive_rbtree_type::node_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^         <value_type, void_pointer>                node_type;$/;"	t	struct:boost::container::containers_detail::intrusive_rbtree_type	access:public
boost::container::containers_detail::intrusive_rbtree_type::type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef container_type                          type ;$/;"	t	struct:boost::container::containers_detail::intrusive_rbtree_type	access:public
boost::container::containers_detail::intrusive_rbtree_type::value_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename A::value_type                  value_type;$/;"	t	struct:boost::container::containers_detail::intrusive_rbtree_type	access:public
boost::container::containers_detail::intrusive_rbtree_type::void_pointer	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      <typename A::pointer, void>::type            void_pointer;$/;"	t	struct:boost::container::containers_detail::intrusive_rbtree_type	access:public
boost::container::containers_detail::intrusive_slist_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^struct intrusive_slist_type$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::intrusive_slist_type::container_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      >::type                                   container_type;$/;"	t	struct:boost::container::containers_detail::intrusive_slist_type	access:public
boost::container::containers_detail::intrusive_slist_type::node_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^         <value_type, void_pointer>             node_type;$/;"	t	struct:boost::container::containers_detail::intrusive_slist_type	access:public
boost::container::containers_detail::intrusive_slist_type::type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef container_type                       type ;$/;"	t	struct:boost::container::containers_detail::intrusive_slist_type	access:public
boost::container::containers_detail::intrusive_slist_type::value_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename A::value_type               value_type;$/;"	t	struct:boost::container::containers_detail::intrusive_slist_type	access:public
boost::container::containers_detail::intrusive_slist_type::void_pointer	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      <typename A::pointer, void>::type         void_pointer;$/;"	t	struct:boost::container::containers_detail::intrusive_slist_type	access:public
boost::container::containers_detail::is_convertible	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^class is_convertible$/;"	c	namespace:boost::container::containers_detail
boost::container::containers_detail::is_convertible::dispatch	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   static false_t dispatch(...);$/;"	p	class:boost::container::containers_detail::is_convertible	access:private	signature:(....)
boost::container::containers_detail::is_convertible::dispatch	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   static true_t dispatch(U);$/;"	p	class:boost::container::containers_detail::is_convertible	access:private	signature:(U)
boost::container::containers_detail::is_convertible::false_t	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   class false_t { char dummy[2]; };$/;"	c	class:boost::container::containers_detail::is_convertible	access:private
boost::container::containers_detail::is_convertible::false_t::dummy	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   class false_t { char dummy[2]; };$/;"	m	class:boost::container::containers_detail::is_convertible::false_t	access:private
boost::container::containers_detail::is_convertible::trigger	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   static T trigger();$/;"	p	class:boost::container::containers_detail::is_convertible	access:private	signature:()
boost::container::containers_detail::is_convertible::true_t	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   typedef char true_t;$/;"	t	class:boost::container::containers_detail::is_convertible	access:private
boost::container::containers_detail::is_convertible::value	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   enum { value = sizeof(dispatch(trigger())) == sizeof(true_t) };$/;"	e	enum:boost::container::containers_detail::is_convertible::__anon4
boost::container::containers_detail::is_stateless_segment_manager	/usr/include/boost/interprocess/containers/container/detail/pool_common.hpp	/^struct is_stateless_segment_manager$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::is_stateless_segment_manager::value	/usr/include/boost/interprocess/containers/container/detail/pool_common.hpp	/^   static const bool value = false;$/;"	m	struct:boost::container::containers_detail::is_stateless_segment_manager	access:public
boost::container::containers_detail::lcm	/usr/include/boost/interprocess/containers/container/detail/math_functions.hpp	/^inline Integer lcm(const Integer & A, const Integer & B)$/;"	f	namespace:boost::container::containers_detail	signature:(const Integer & A, const Integer & B)
boost::container::containers_detail::list_hook	/usr/include/boost/interprocess/containers/container/list.hpp	/^struct list_hook$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::list_hook::type	/usr/include/boost/interprocess/containers/container/list.hpp	/^      <containers_detail::bi::void_pointer<VoidPointer>, containers_detail::bi::link_mode<containers_detail::bi::normal_link> >::type type;$/;"	t	struct:boost::container::containers_detail::list_hook	access:public
boost::container::containers_detail::list_node	/usr/include/boost/interprocess/containers/container/list.hpp	/^struct list_node$/;"	s	namespace:boost::container::containers_detail	inherits:list_hook::type
boost::container::containers_detail::list_node::list_node	/usr/include/boost/interprocess/containers/container/list.hpp	/^   list_node()$/;"	f	struct:boost::container::containers_detail::list_node	access:public	signature:()
boost::container::containers_detail::list_node::list_node	/usr/include/boost/interprocess/containers/container/list.hpp	/^   list_node(Args &&...args)$/;"	f	struct:boost::container::containers_detail::list_node	access:public	signature:(Args &&....args)
boost::container::containers_detail::list_node::m_data	/usr/include/boost/interprocess/containers/container/list.hpp	/^   T m_data;$/;"	m	struct:boost::container::containers_detail::list_node	access:public
boost::container::containers_detail::log2_ceil	/usr/include/boost/interprocess/containers/container/detail/math_functions.hpp	/^inline Integer log2_ceil(const Integer & A)$/;"	f	namespace:boost::container::containers_detail	signature:(const Integer & A)
boost::container::containers_detail::ls_zeros	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct ls_zeros$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::ls_zeros	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct ls_zeros<0>$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::ls_zeros	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct ls_zeros<1>$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::ls_zeros::value	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   static const std::size_t value = (S & std::size_t(1)) ? 0 : (1u + ls_zeros<(S >> 1u)>::value);$/;"	m	struct:boost::container::containers_detail::ls_zeros	access:public
boost::container::containers_detail::ls_zeros::value	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   static const std::size_t value = 0;$/;"	m	struct:boost::container::containers_detail::ls_zeros	access:public
boost::container::containers_detail::max_size	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   size_type max_size() const$/;"	f	namespace:boost::container::containers_detail	signature:() const
boost::container::containers_detail::max_value	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^const T &max_value(const T &a, const T &b)$/;"	f	namespace:boost::container::containers_detail	signature:(const T &a, const T &b)
boost::container::containers_detail::members_	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      : members_(a, typename ICont::value_compare(c))$/;"	f	namespace:boost::container::containers_detail	signature:(a, typename ICont::value_compare(c))
boost::container::containers_detail::members_	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   } members_;$/;"	m	namespace:boost::container::containers_detail	typeref:struct:boost::container::containers_detail::members_holder	access:protected
boost::container::containers_detail::members_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   struct members_holder$/;"	s	namespace:boost::container::containers_detail	inherits:NodeAlloc	access:protected
boost::container::containers_detail::members_holder::assign	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      void assign (const ConvertibleToAlloc &c2alloc)$/;"	f	struct:boost::container::containers_detail::members_holder	access:public	signature:(const ConvertibleToAlloc &c2alloc)
boost::container::containers_detail::members_holder::members_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      members_holder(const ConvertibleToAlloc &c2alloc)$/;"	f	struct:boost::container::containers_detail::members_holder	access:public	signature:(const ConvertibleToAlloc &c2alloc)
boost::container::containers_detail::members_holder::members_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      members_holder(const ConvertibleToAlloc &c2alloc, const Pred &c)$/;"	f	struct:boost::container::containers_detail::members_holder	access:public	signature:(const ConvertibleToAlloc &c2alloc, const Pred &c)
boost::container::containers_detail::members_holder::members_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      members_holder(const members_holder&);$/;"	p	struct:boost::container::containers_detail::members_holder	access:private	signature:(const members_holder&)
boost::container::containers_detail::members_holder::m_icont	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      ICont m_icont;$/;"	m	struct:boost::container::containers_detail::members_holder	access:public
boost::container::containers_detail::min_value	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^const T &min_value(const T &a, const T &b)$/;"	f	namespace:boost::container::containers_detail	signature:(const T &a, const T &b)
boost::container::containers_detail::move_const_ref_type	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^struct move_const_ref_type$/;"	s	namespace:boost::container::containers_detail	inherits:if_c
boost::container::containers_detail::nat	/usr/include/boost/interprocess/containers/container/detail/type_traits.hpp	/^struct nat{};$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::node_alloc	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   const NodeAlloc &node_alloc() const$/;"	f	namespace:boost::container::containers_detail	access:protected	signature:() const
boost::container::containers_detail::node_alloc	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   NodeAlloc &node_alloc()$/;"	f	namespace:boost::container::containers_detail	access:protected	signature:()
boost::container::containers_detail::node_alloc_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   node_alloc_holder(const node_alloc_holder &other, const Pred &c)$/;"	f	namespace:boost::container::containers_detail	signature:(const node_alloc_holder &other, const Pred &c)
boost::container::containers_detail::node_alloc_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   node_alloc_holder(const ValAlloc &a, const Pred &c) $/;"	f	namespace:boost::container::containers_detail	signature:(const ValAlloc &a, const Pred &c)
boost::container::containers_detail::node_alloc_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^struct node_alloc_holder$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::node_alloc_holder::allocator_v1	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef containers_detail::integral_constant<unsigned, 1>     allocator_v1;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
boost::container::containers_detail::node_alloc_holder::allocator_v2	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef containers_detail::integral_constant<unsigned, 2>     allocator_v2;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
boost::container::containers_detail::node_alloc_holder::alloc_version	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^         version<NodeAlloc>::value>                   alloc_version;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
boost::container::containers_detail::node_alloc_holder::Deallocator	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef containers_detail::scoped_deallocator<NodeAlloc>      Deallocator;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
boost::container::containers_detail::node_alloc_holder::Destroyer	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef allocator_destroyer<NodeAlloc>             Destroyer;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
boost::container::containers_detail::node_alloc_holder::difference_type	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename NodeAlloc::difference_type        difference_type;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
boost::container::containers_detail::node_alloc_holder::icont_citerator	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename ICont::const_iterator             icont_citerator;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
boost::container::containers_detail::node_alloc_holder::icont_iterator	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename ICont::iterator                   icont_iterator;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
boost::container::containers_detail::node_alloc_holder::Node	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename ICont::value_type                 Node;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
boost::container::containers_detail::node_alloc_holder::NodeAlloc	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename A::template rebind<Node>::other   NodeAlloc;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
boost::container::containers_detail::node_alloc_holder::NodePtr	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename NodeAlloc::pointer                NodePtr;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
boost::container::containers_detail::node_alloc_holder::node_alloc_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   node_alloc_holder(const node_alloc_holder &other)$/;"	f	struct:boost::container::containers_detail::node_alloc_holder	access:public	signature:(const node_alloc_holder &other)
boost::container::containers_detail::node_alloc_holder::node_alloc_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   node_alloc_holder(const ValAlloc &a) $/;"	f	struct:boost::container::containers_detail::node_alloc_holder	access:public	signature:(const ValAlloc &a)
boost::container::containers_detail::node_alloc_holder::other	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   node_alloc_holder(BOOST_INTERPROCESS_RV_REF(node_alloc_holder) other)$/;"	m	struct:boost::container::containers_detail::node_alloc_holder	access:public
boost::container::containers_detail::node_alloc_holder::self_t	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef node_alloc_holder<A, ICont>                self_t;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
boost::container::containers_detail::node_alloc_holder::size_type	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename NodeAlloc::size_type              size_type;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
boost::container::containers_detail::node_alloc_holder::ValAlloc	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef A                                          ValAlloc;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
boost::container::containers_detail::node_alloc_holder::value_type	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename A::value_type                     value_type;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
boost::container::containers_detail::node_compare	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^struct node_compare$/;"	s	namespace:boost::container::containers_detail	inherits:ValueCompare
boost::container::containers_detail::node_compare::key_of_value	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename ValueCompare::key_of_value key_of_value;$/;"	t	struct:boost::container::containers_detail::node_compare	access:public
boost::container::containers_detail::node_compare::key_type	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename ValueCompare::key_type     key_type;$/;"	t	struct:boost::container::containers_detail::node_compare	access:public
boost::container::containers_detail::node_compare::node_compare	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   node_compare(const ValueCompare &pred)$/;"	f	struct:boost::container::containers_detail::node_compare	access:public	signature:(const ValueCompare &pred)
boost::container::containers_detail::node_compare::operator ()	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   bool operator()(const Node &a, const Node &b) const$/;"	f	struct:boost::container::containers_detail::node_compare	access:public	signature:(const Node &a, const Node &b) const
boost::container::containers_detail::node_compare::value_comp	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   ValueCompare &value_comp() const$/;"	f	struct:boost::container::containers_detail::node_compare	access:public	signature:() const
boost::container::containers_detail::node_compare::value_comp	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   ValueCompare &value_comp()$/;"	f	struct:boost::container::containers_detail::node_compare	access:public	signature:()
boost::container::containers_detail::node_compare::value_type	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename ValueCompare::value_type   value_type;$/;"	t	struct:boost::container::containers_detail::node_compare	access:public
boost::container::containers_detail::node_slist	/usr/include/boost/interprocess/containers/container/detail/pool_common.hpp	/^struct node_slist$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::node_slist::node_slist_t	/usr/include/boost/interprocess/containers/container/detail/pool_common.hpp	/^      <node_t, bi::linear<true>, bi::base_hook<slist_hook_t> >::type node_slist_t;$/;"	t	struct:boost::container::containers_detail::node_slist	access:public
boost::container::containers_detail::node_slist::node_t	/usr/include/boost/interprocess/containers/container/detail/pool_common.hpp	/^   typedef slist_hook_t node_t;$/;"	t	struct:boost::container::containers_detail::node_slist	access:public
boost::container::containers_detail::node_slist::slist_hook_t	/usr/include/boost/interprocess/containers/container/detail/pool_common.hpp	/^      <bi::void_pointer<VoidPointer>, bi::link_mode<bi::normal_link> >::type slist_hook_t;$/;"	t	struct:boost::container::containers_detail::node_slist	access:public
boost::container::containers_detail::non_const_icont	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   ICont &non_const_icont() const$/;"	f	namespace:boost::container::containers_detail	access:protected	signature:() const
boost::container::containers_detail::no_type	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct no_type$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::no_type::padding	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   char padding[8];$/;"	m	struct:boost::container::containers_detail::no_type	access:public
boost::container::containers_detail::null_scoped_array_deallocator	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^struct null_scoped_array_deallocator$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::null_scoped_array_deallocator::null_scoped_array_deallocator	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   null_scoped_array_deallocator(pointer, Allocator&, size_type)$/;"	f	struct:boost::container::containers_detail::null_scoped_array_deallocator	access:public	signature:(pointer, Allocator&, size_type)
boost::container::containers_detail::null_scoped_array_deallocator::pointer	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef typename Allocator::pointer    pointer;$/;"	t	struct:boost::container::containers_detail::null_scoped_array_deallocator	access:public
boost::container::containers_detail::null_scoped_array_deallocator::release	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   void release()$/;"	f	struct:boost::container::containers_detail::null_scoped_array_deallocator	access:public	signature:()
boost::container::containers_detail::null_scoped_array_deallocator::size_type	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef typename Allocator::size_type  size_type;$/;"	t	struct:boost::container::containers_detail::null_scoped_array_deallocator	access:public
boost::container::containers_detail::null_scoped_destructor_n	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^struct null_scoped_destructor_n$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::null_scoped_destructor_n::increment_size	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   void increment_size(size_type)$/;"	f	struct:boost::container::containers_detail::null_scoped_destructor_n	access:public	signature:(size_type)
boost::container::containers_detail::null_scoped_destructor_n::null_scoped_destructor_n	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   null_scoped_destructor_n(pointer, size_type)$/;"	f	struct:boost::container::containers_detail::null_scoped_destructor_n	access:public	signature:(pointer, size_type)
boost::container::containers_detail::null_scoped_destructor_n::pointer	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef typename Allocator::pointer pointer;$/;"	t	struct:boost::container::containers_detail::null_scoped_destructor_n	access:public
boost::container::containers_detail::null_scoped_destructor_n::release	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   void release()$/;"	f	struct:boost::container::containers_detail::null_scoped_destructor_n	access:public	signature:()
boost::container::containers_detail::null_scoped_destructor_n::size_type	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef typename Allocator::size_type size_type;$/;"	t	struct:boost::container::containers_detail::null_scoped_destructor_n	access:public
boost::container::containers_detail::operator !=	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^operator!=(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& y)
boost::container::containers_detail::operator !=	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^operator!=(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& y)
boost::container::containers_detail::operator <	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^operator<(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& y)
boost::container::containers_detail::operator <	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^operator<(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& y)
boost::container::containers_detail::operator <=	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^operator<=(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& y)
boost::container::containers_detail::operator <=	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^operator<=(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& y)
boost::container::containers_detail::operator ==	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^operator==(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& y)
boost::container::containers_detail::operator ==	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^operator==(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& y)
boost::container::containers_detail::operator >	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^operator>(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& y)
boost::container::containers_detail::operator >	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^operator>(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& y)
boost::container::containers_detail::operator >=	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^operator>=(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& y)
boost::container::containers_detail::operator >=	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^operator>=(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& y)
boost::container::containers_detail::pair	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^struct pair$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::pair::BOOST_CONTAINERS_PARAM	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   pair( BOOST_CONTAINERS_PARAM(U, u)$/;"	p	struct:boost::container::containers_detail::pair	access:public	signature:(U, u)
boost::container::containers_detail::pair::containers_detail::disable_if::type	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^          < containers_detail::is_same<U, ::boost::interprocess::rv<pair> > >::type* = 0$/;"	m	class:boost::container::containers_detail::pair::containers_detail::disable_if	access:public
boost::container::containers_detail::pair::first	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   T1 first;$/;"	m	struct:boost::container::containers_detail::pair	access:public
boost::container::containers_detail::pair::first_type	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   typedef T1 first_type;$/;"	t	struct:boost::container::containers_detail::pair	access:public
boost::container::containers_detail::pair::make_pair	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^inline pair<T1, T2> make_pair(T1 x, T2 y)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(T1 x, T2 y)
boost::container::containers_detail::pair::move	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^      : first(boost::interprocess::move(p.first)), second(boost::interprocess::move(p.second))$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(p.second)
boost::container::containers_detail::pair::operator !=	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^inline bool operator!=(const pair<T1,T2>& x, const pair<T1,T2>& y)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(const pair<T1,T2>& x, const pair<T1,T2>& y)
boost::container::containers_detail::pair::operator <	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^inline bool operator< (const pair<T1,T2>& x, const pair<T1,T2>& y)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(const pair<T1,T2>& x, const pair<T1,T2>& y)
boost::container::containers_detail::pair::operator <=	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^inline bool operator<=(const pair<T1,T2>& x, const pair<T1,T2>& y)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(const pair<T1,T2>& x, const pair<T1,T2>& y)
boost::container::containers_detail::pair::operator ==	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^inline bool operator==(const pair<T1,T2>& x, const pair<T1,T2>& y)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(const pair<T1,T2>& x, const pair<T1,T2>& y)
boost::container::containers_detail::pair::operator >	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^inline bool operator> (const pair<T1,T2>& x, const pair<T1,T2>& y)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(const pair<T1,T2>& x, const pair<T1,T2>& y)
boost::container::containers_detail::pair::operator >=	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^inline bool operator>=(const pair<T1,T2>& x, const pair<T1,T2>& y)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(const pair<T1,T2>& x, const pair<T1,T2>& y)
boost::container::containers_detail::pair::p	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   pair(BOOST_INTERPROCESS_RV_REF(pair) p)$/;"	m	struct:boost::container::containers_detail::pair	access:public
boost::container::containers_detail::pair::p	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   pair(BOOST_INTERPROCESS_RV_REF_2_TEMPL_ARGS(pair, D, S) p)$/;"	m	struct:boost::container::containers_detail::pair	access:public
boost::container::containers_detail::pair::p	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   pair(BOOST_INTERPROCESS_RV_REF_2_TEMPL_ARGS(std::pair, D, S) p)$/;"	m	struct:boost::container::containers_detail::pair	access:public
boost::container::containers_detail::pair::pair	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   pair()$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:()
boost::container::containers_detail::pair::pair	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   pair(const pair<T1, T2>& x)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(const pair<T1, T2>& x)
boost::container::containers_detail::pair::pair	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   pair(const std::pair<D, S>& p)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(const std::pair<D, S>& p)
boost::container::containers_detail::pair::pair	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   pair(pair<T1, T2>& x)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(pair<T1, T2>& x)
boost::container::containers_detail::pair::pair	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   pair(std::pair<T1, T2>& x)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(std::pair<T1, T2>& x)
boost::container::containers_detail::pair::pair	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   pair(U &&u, Args &&... args)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(U &&u, Args &&... args)
boost::container::containers_detail::pair::second	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   T2 second;$/;"	m	struct:boost::container::containers_detail::pair	access:public
boost::container::containers_detail::pair::second_type	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   typedef T2 second_type;$/;"	t	struct:boost::container::containers_detail::pair	access:public
boost::container::containers_detail::pair::swap	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^inline void swap(pair<T1, T2>& x, pair<T1, T2>& y)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(pair<T1, T2>& x, pair<T1, T2>& y)
boost::container::containers_detail::private_adaptive_node_pool_impl	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^class private_adaptive_node_pool_impl$/;"	c	namespace:boost::container::containers_detail
boost::container::containers_detail::private_adaptive_node_pool_impl::AlignOnlyFalse	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef false_                      AlignOnlyFalse;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::AlignOnlyTrue	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef true_                       AlignOnlyTrue;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::allocate_node	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void *allocate_node()$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:()
boost::container::containers_detail::private_adaptive_node_pool_impl::allocate_nodes	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   multiallocation_chain allocate_nodes(const std::size_t n)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:(const std::size_t n)
boost::container::containers_detail::private_adaptive_node_pool_impl::block_destroyer	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   class block_destroyer$/;"	c	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::block_destroyer::block_destroyer	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      block_destroyer(const this_type *impl)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl::block_destroyer	access:public	signature:(const this_type *impl)
boost::container::containers_detail::private_adaptive_node_pool_impl::block_destroyer::do_destroy	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      void do_destroy(typename block_multiset_t::pointer to_deallocate, AlignOnlyFalse)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl::block_destroyer	access:private	signature:(typename block_multiset_t::pointer to_deallocate, AlignOnlyFalse)
boost::container::containers_detail::private_adaptive_node_pool_impl::block_destroyer::do_destroy	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      void do_destroy(typename block_multiset_t::pointer to_deallocate, AlignOnlyTrue)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl::block_destroyer	access:private	signature:(typename block_multiset_t::pointer to_deallocate, AlignOnlyTrue)
boost::container::containers_detail::private_adaptive_node_pool_impl::block_destroyer::mp_impl	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      const this_type *mp_impl;$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl::block_destroyer	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::block_destroyer::operator ()	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      void operator()(typename block_multiset_t::pointer to_deallocate)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl::block_destroyer	access:public	signature:(typename block_multiset_t::pointer to_deallocate)
boost::container::containers_detail::private_adaptive_node_pool_impl::block_info_t	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef typename adaptive_pool_types<void_pointer>::block_info_t     block_info_t;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::block_iterator	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef typename block_multiset_t::iterator               block_iterator;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::block_multiset_t	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef typename adaptive_pool_types<void_pointer>::block_multiset_t block_multiset_t;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::deallocate_free_blocks	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void deallocate_free_blocks()$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:()
boost::container::containers_detail::private_adaptive_node_pool_impl::deallocate_free_chunks	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void deallocate_free_chunks()$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:()
boost::container::containers_detail::private_adaptive_node_pool_impl::deallocate_node	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void deallocate_node(void *pElem)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:(void *pElem)
boost::container::containers_detail::private_adaptive_node_pool_impl::deallocate_nodes	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void deallocate_nodes(multiallocation_chain nodes)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:(multiallocation_chain nodes)
boost::container::containers_detail::private_adaptive_node_pool_impl::free_nodes_t	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef typename node_slist<void_pointer>::node_slist_t free_nodes_t;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public
boost::container::containers_detail::private_adaptive_node_pool_impl::get_real_num_node	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   std::size_t get_real_num_node() const$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:() const
boost::container::containers_detail::private_adaptive_node_pool_impl::get_segment_manager_base	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   segment_manager_base_type* get_segment_manager_base()const$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:() const
boost::container::containers_detail::private_adaptive_node_pool_impl::HdrOffsetSize	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   static const std::size_t HdrOffsetSize = ((sizeof(hdr_offset_holder)-1)\/MaxAlign+1)*MaxAlign;$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::HdrSize	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   static const std::size_t HdrSize  = ((sizeof(block_info_t)-1)\/MaxAlign+1)*MaxAlign;$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::IsAlignOnly	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef bool_<AlignOnly>            IsAlignOnly;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::MaxAlign	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   static const std::size_t MaxAlign = alignment_of<node_t>::value;$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::mp_segment_mngr_base	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   segment_mngr_base_ptr_t                mp_segment_mngr_base;   \/\/Segment manager$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::multiallocation_chain	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef typename SegmentManagerBase::multiallocation_chain     multiallocation_chain;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public
boost::container::containers_detail::private_adaptive_node_pool_impl::m_block_multiset	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   block_multiset_t                       m_block_multiset;       \/\/Intrusive block list$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::m_max_free_blocks	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   const std::size_t m_max_free_blocks;$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::m_num_subblocks	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   std::size_t m_num_subblocks;$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::m_real_block_alignment	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   const std::size_t m_real_block_alignment;$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::m_real_node_size	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   const std::size_t m_real_node_size;$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::m_real_num_node	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   std::size_t m_real_num_node;$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::m_totally_free_blocks	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   std::size_t                            m_totally_free_blocks;  \/\/Free blocks$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::node_t	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef typename node_slist<void_pointer>::node_t node_t;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public
boost::container::containers_detail::private_adaptive_node_pool_impl::num_free_nodes	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   std::size_t num_free_nodes()$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:()
boost::container::containers_detail::private_adaptive_node_pool_impl::operator =	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   private_adaptive_node_pool_impl &operator=(const private_adaptive_node_pool_impl &);$/;"	p	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(const private_adaptive_node_pool_impl &)
boost::container::containers_detail::private_adaptive_node_pool_impl::PayloadPerAllocation	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   static const std::size_t PayloadPerAllocation = SegmentManagerBase::PayloadPerAllocation;$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::private_adaptive_node_pool_impl	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   private_adaptive_node_pool_impl$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:( segment_manager_base_type *segment_mngr_base , std::size_t node_size , std::size_t nodes_per_block , std::size_t max_free_blocks , unsigned char overhead_percent )
boost::container::containers_detail::private_adaptive_node_pool_impl::private_adaptive_node_pool_impl	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   private_adaptive_node_pool_impl();$/;"	p	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:()
boost::container::containers_detail::private_adaptive_node_pool_impl::private_adaptive_node_pool_impl	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   private_adaptive_node_pool_impl(const private_adaptive_node_pool_impl &);$/;"	p	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(const private_adaptive_node_pool_impl &)
boost::container::containers_detail::private_adaptive_node_pool_impl::priv_alloc_block	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void priv_alloc_block(std::size_t n)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(std::size_t n)
boost::container::containers_detail::private_adaptive_node_pool_impl::priv_alloc_block	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void priv_alloc_block(std::size_t n, AlignOnlyFalse)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(std::size_t n, AlignOnlyFalse)
boost::container::containers_detail::private_adaptive_node_pool_impl::priv_alloc_block	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void priv_alloc_block(std::size_t n, AlignOnlyTrue)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(std::size_t n, AlignOnlyTrue)
boost::container::containers_detail::private_adaptive_node_pool_impl::priv_block_from_node	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   block_info_t *priv_block_from_node(void *node) const$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(void *node) const
boost::container::containers_detail::private_adaptive_node_pool_impl::priv_block_from_node	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   block_info_t *priv_block_from_node(void *node, AlignOnlyFalse) const$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(void *node, AlignOnlyFalse) const
boost::container::containers_detail::private_adaptive_node_pool_impl::priv_block_from_node	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   block_info_t *priv_block_from_node(void *node, AlignOnlyTrue) const$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(void *node, AlignOnlyTrue) const
boost::container::containers_detail::private_adaptive_node_pool_impl::priv_clear	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void priv_clear()$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:()
boost::container::containers_detail::private_adaptive_node_pool_impl::priv_deallocate_free_blocks	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void priv_deallocate_free_blocks(std::size_t max_free_blocks)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(std::size_t max_free_blocks)
boost::container::containers_detail::private_adaptive_node_pool_impl::priv_first_subblock_from_block	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   hdr_offset_holder *priv_first_subblock_from_block(block_info_t *block) const$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(block_info_t *block) const
boost::container::containers_detail::private_adaptive_node_pool_impl::priv_invariants	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void priv_invariants()$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:()
boost::container::containers_detail::private_adaptive_node_pool_impl::priv_reinsert_nodes_in_block	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void priv_reinsert_nodes_in_block(multiallocation_chain &chain, std::size_t n)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(multiallocation_chain &chain, std::size_t n)
boost::container::containers_detail::private_adaptive_node_pool_impl::priv_take_first_node	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   node_t *priv_take_first_node()$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:()
boost::container::containers_detail::private_adaptive_node_pool_impl::segment_manager_base_type	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef SegmentManagerBase                 segment_manager_base_type;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public
boost::container::containers_detail::private_adaptive_node_pool_impl::segment_mngr_base_ptr_t	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      <void_pointer, segment_manager_base_type>::type   segment_mngr_base_ptr_t;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::swap	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void swap(private_adaptive_node_pool_impl &other)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:(private_adaptive_node_pool_impl &other)
boost::container::containers_detail::private_adaptive_node_pool_impl::this_type	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef private_adaptive_node_pool_impl this_type;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::void_pointer	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef typename SegmentManagerBase::void_pointer void_pointer;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
boost::container::containers_detail::private_adaptive_node_pool_impl::~private_adaptive_node_pool_impl	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   ~private_adaptive_node_pool_impl()$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:()
boost::container::containers_detail::private_node_pool_impl	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^class private_node_pool_impl$/;"	c	namespace:boost::container::containers_detail
boost::container::containers_detail::private_node_pool_impl::allocate_node	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void *allocate_node()$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:()
boost::container::containers_detail::private_node_pool_impl::allocate_nodes	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   multiallocation_chain allocate_nodes(const std::size_t n)$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:(const std::size_t n)
boost::container::containers_detail::private_node_pool_impl::blockslist_t	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^      , bi::constant_time_size<false> >::type      blockslist_t;$/;"	t	class:boost::container::containers_detail::private_node_pool_impl	access:private
boost::container::containers_detail::private_node_pool_impl::deallocate_free_blocks	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void deallocate_free_blocks()$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:()
boost::container::containers_detail::private_node_pool_impl::deallocate_free_chunks	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void deallocate_free_chunks()$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:private	signature:()
boost::container::containers_detail::private_node_pool_impl::deallocate_node	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void deallocate_node(void *ptr)$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:(void *ptr)
boost::container::containers_detail::private_node_pool_impl::deallocate_nodes	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void deallocate_nodes(multiallocation_chain chain)$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:(multiallocation_chain chain)
boost::container::containers_detail::private_node_pool_impl::free_nodes_t	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   typedef typename node_slist<void_pointer>::node_slist_t        free_nodes_t;$/;"	t	class:boost::container::containers_detail::private_node_pool_impl	access:public
boost::container::containers_detail::private_node_pool_impl::get_block_from_hook	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void *get_block_from_hook (node_t *hook, std::size_t blocksize)$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:private	signature:(node_t *hook, std::size_t blocksize)
boost::container::containers_detail::private_node_pool_impl::get_block_hook	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   static node_t & get_block_hook (void *block, std::size_t blocksize)$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:private	signature:(void *block, std::size_t blocksize)
boost::container::containers_detail::private_node_pool_impl::get_real_num_node	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   std::size_t get_real_num_node() const$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:() const
boost::container::containers_detail::private_node_pool_impl::get_segment_manager_base	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   segment_manager_base_type* get_segment_manager_base()const$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:() const
boost::container::containers_detail::private_node_pool_impl::is_between	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   struct is_between$/;"	s	class:boost::container::containers_detail::private_node_pool_impl	inherits:std::unary_function	access:private
boost::container::containers_detail::private_node_pool_impl::is_between::beg_	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^      const char *      beg_;$/;"	m	struct:boost::container::containers_detail::private_node_pool_impl::is_between	access:private
boost::container::containers_detail::private_node_pool_impl::is_between::end_	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^      const char *      end_;$/;"	m	struct:boost::container::containers_detail::private_node_pool_impl::is_between	access:private
boost::container::containers_detail::private_node_pool_impl::is_between::is_between	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^      is_between(const void *addr, std::size_t size)$/;"	f	struct:boost::container::containers_detail::private_node_pool_impl::is_between	access:public	signature:(const void *addr, std::size_t size)
boost::container::containers_detail::private_node_pool_impl::is_between::operator ()	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^      bool operator()(typename free_nodes_t::const_reference v) const$/;"	f	struct:boost::container::containers_detail::private_node_pool_impl::is_between	access:public	signature:(typename free_nodes_t::const_reference v) const
boost::container::containers_detail::private_node_pool_impl::mp_segment_mngr_base	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   segment_mngr_base_ptr_t mp_segment_mngr_base;   \/\/Segment manager$/;"	m	class:boost::container::containers_detail::private_node_pool_impl	access:private
boost::container::containers_detail::private_node_pool_impl::multiallocation_chain	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   typedef typename SegmentManagerBase::multiallocation_chain     multiallocation_chain;$/;"	t	class:boost::container::containers_detail::private_node_pool_impl	access:public
boost::container::containers_detail::private_node_pool_impl::m_allocated	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   std::size_t       m_allocated;      \/\/Used nodes for debugging$/;"	m	class:boost::container::containers_detail::private_node_pool_impl	access:private
boost::container::containers_detail::private_node_pool_impl::m_blocklist	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   blockslist_t      m_blocklist;      \/\/Intrusive container of blocks$/;"	m	class:boost::container::containers_detail::private_node_pool_impl	access:private
boost::container::containers_detail::private_node_pool_impl::m_freelist	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   free_nodes_t      m_freelist;       \/\/Intrusive container of free nods$/;"	m	class:boost::container::containers_detail::private_node_pool_impl	access:private
boost::container::containers_detail::private_node_pool_impl::m_nodes_per_block	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   const std::size_t m_nodes_per_block;$/;"	m	class:boost::container::containers_detail::private_node_pool_impl	access:private
boost::container::containers_detail::private_node_pool_impl::m_real_node_size	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   const std::size_t m_real_node_size;$/;"	m	class:boost::container::containers_detail::private_node_pool_impl	access:private
boost::container::containers_detail::private_node_pool_impl::node_t	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   typedef typename node_slist<void_pointer>::node_t              node_t;$/;"	t	class:boost::container::containers_detail::private_node_pool_impl	access:public
boost::container::containers_detail::private_node_pool_impl::num_free_nodes	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   std::size_t num_free_nodes()$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:()
boost::container::containers_detail::private_node_pool_impl::operator =	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   private_node_pool_impl &operator=(const private_node_pool_impl &);$/;"	p	class:boost::container::containers_detail::private_node_pool_impl	access:private	signature:(const private_node_pool_impl &)
boost::container::containers_detail::private_node_pool_impl::private_node_pool_impl	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   private_node_pool_impl();$/;"	p	class:boost::container::containers_detail::private_node_pool_impl	access:private	signature:()
boost::container::containers_detail::private_node_pool_impl::private_node_pool_impl	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   private_node_pool_impl(const private_node_pool_impl &);$/;"	p	class:boost::container::containers_detail::private_node_pool_impl	access:private	signature:(const private_node_pool_impl &)
boost::container::containers_detail::private_node_pool_impl::private_node_pool_impl	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   private_node_pool_impl(segment_manager_base_type *segment_mngr_base, std::size_t node_size, std::size_t nodes_per_block)$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:(segment_manager_base_type *segment_mngr_base, std::size_t node_size, std::size_t nodes_per_block)
boost::container::containers_detail::private_node_pool_impl::priv_alloc_block	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void priv_alloc_block(std::size_t num_blocks = 1)$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:private	signature:(std::size_t num_blocks = 1)
boost::container::containers_detail::private_node_pool_impl::priv_alloc_node	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   node_t *priv_alloc_node()$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:private	signature:()
boost::container::containers_detail::private_node_pool_impl::priv_dealloc_node	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void priv_dealloc_node(void *pElem)$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:private	signature:(void *pElem)
boost::container::containers_detail::private_node_pool_impl::purge_blocks	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void purge_blocks()$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:()
boost::container::containers_detail::private_node_pool_impl::purge_chunks	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void purge_chunks()$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:private	signature:()
boost::container::containers_detail::private_node_pool_impl::push_in_list	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   struct push_in_list$/;"	s	class:boost::container::containers_detail::private_node_pool_impl	access:private
boost::container::containers_detail::private_node_pool_impl::push_in_list::last_it_	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^      typename free_nodes_t::iterator &last_it_;$/;"	m	struct:boost::container::containers_detail::private_node_pool_impl::push_in_list	access:private
boost::container::containers_detail::private_node_pool_impl::push_in_list::operator ()	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^      void operator()(typename free_nodes_t::pointer p) const$/;"	f	struct:boost::container::containers_detail::private_node_pool_impl::push_in_list	access:public	signature:(typename free_nodes_t::pointer p) const
boost::container::containers_detail::private_node_pool_impl::push_in_list::push_in_list	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^      push_in_list(free_nodes_t &l, typename free_nodes_t::iterator &it)$/;"	f	struct:boost::container::containers_detail::private_node_pool_impl::push_in_list	access:public	signature:(free_nodes_t &l, typename free_nodes_t::iterator &it)
boost::container::containers_detail::private_node_pool_impl::push_in_list::slist_	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^      free_nodes_t &slist_;$/;"	m	struct:boost::container::containers_detail::private_node_pool_impl::push_in_list	access:private
boost::container::containers_detail::private_node_pool_impl::segment_manager_base_type	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   typedef SegmentManagerBase segment_manager_base_type;$/;"	t	class:boost::container::containers_detail::private_node_pool_impl	access:public
boost::container::containers_detail::private_node_pool_impl::segment_mngr_base_ptr_t	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^      <void_pointer, segment_manager_base_type>::type   segment_mngr_base_ptr_t;$/;"	t	class:boost::container::containers_detail::private_node_pool_impl	access:private
boost::container::containers_detail::private_node_pool_impl::slist_hook_t	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   typedef typename node_slist<void_pointer>::slist_hook_t        slist_hook_t;$/;"	t	class:boost::container::containers_detail::private_node_pool_impl	access:public
boost::container::containers_detail::private_node_pool_impl::swap	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void swap(private_node_pool_impl &other)$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:(private_node_pool_impl &other)
boost::container::containers_detail::private_node_pool_impl::void_pointer	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   typedef typename SegmentManagerBase::void_pointer              void_pointer;$/;"	t	class:boost::container::containers_detail::private_node_pool_impl	access:public
boost::container::containers_detail::private_node_pool_impl::~private_node_pool_impl	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   ~private_node_pool_impl()$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:()
boost::container::containers_detail::rbtree	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^class rbtree$/;"	c	namespace:boost::container::containers_detail	inherits:containers_detail::node_alloc_holder
boost::container::containers_detail::rbtree::allocator_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef A                                          allocator_type;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
boost::container::containers_detail::rbtree::allocator_v1	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename AllocHolder::allocator_v1         allocator_v1;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
boost::container::containers_detail::rbtree::allocator_v2	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename AllocHolder::allocator_v2         allocator_v2;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
boost::container::containers_detail::rbtree::AllocHolder	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      :  AllocHolder(x, x.key_comp())$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(x, x.key_comp())
boost::container::containers_detail::rbtree::AllocHolder	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef containers_detail::node_alloc_holder<A, Icont>        AllocHolder;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
boost::container::containers_detail::rbtree::alloc_version	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename AllocHolder::alloc_version        alloc_version;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
boost::container::containers_detail::rbtree::back_insertion_functor	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   class back_insertion_functor$/;"	c	class:boost::container::containers_detail::rbtree	access:private
boost::container::containers_detail::rbtree::back_insertion_functor::back_insertion_functor	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      back_insertion_functor(Icont &icont)$/;"	f	class:boost::container::containers_detail::rbtree::back_insertion_functor	access:public	signature:(Icont &icont)
boost::container::containers_detail::rbtree::back_insertion_functor::icont_	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      Icont &icont_;$/;"	m	class:boost::container::containers_detail::rbtree::back_insertion_functor	access:private
boost::container::containers_detail::rbtree::back_insertion_functor::operator ()	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      void operator()(Node &n)$/;"	f	class:boost::container::containers_detail::rbtree::back_insertion_functor	access:public	signature:(Node &n)
boost::container::containers_detail::rbtree::begin	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_iterator begin() const$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
boost::container::containers_detail::rbtree::begin	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator begin()$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:()
boost::container::containers_detail::rbtree::cbegin	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_iterator cbegin() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
boost::container::containers_detail::rbtree::cend	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_iterator cend() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
boost::container::containers_detail::rbtree::clear	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void clear() $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:()
boost::container::containers_detail::rbtree::const_iterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   class const_iterator$/;"	c	class:boost::container::containers_detail::rbtree	inherits:std::iterator	access:public
boost::container::containers_detail::rbtree::const_iterator::const_iterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      const_iterator()$/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:public	signature:()
boost::container::containers_detail::rbtree::const_iterator::const_iterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      explicit const_iterator(iiterator it)  : m_it(it){}$/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:protected	signature:(iiterator it)
boost::container::containers_detail::rbtree::const_iterator::difference_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      typedef rbtree_difference_type        difference_type;$/;"	t	class:boost::container::containers_detail::rbtree::const_iterator	access:public
boost::container::containers_detail::rbtree::const_iterator::get	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      iiterator get()$/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:private	signature:()
boost::container::containers_detail::rbtree::const_iterator::iiterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      typedef typename Icont::iterator  iiterator;$/;"	t	class:boost::container::containers_detail::rbtree::const_iterator	access:protected
boost::container::containers_detail::rbtree::const_iterator::m_it	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      iiterator m_it;$/;"	m	class:boost::container::containers_detail::rbtree::const_iterator	access:protected
boost::container::containers_detail::rbtree::const_iterator::operator !=	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      bool operator!=   (const const_iterator& r)  const$/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:public	signature:(const const_iterator& r) const
boost::container::containers_detail::rbtree::const_iterator::operator *	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      const_reference operator*()  const $/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:public	signature:() const
boost::container::containers_detail::rbtree::const_iterator::operator ++	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      const_iterator operator++(int)      $/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:public	signature:(int)
boost::container::containers_detail::rbtree::const_iterator::operator ++	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      const_iterator& operator++()       $/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:public	signature:()
boost::container::containers_detail::rbtree::const_iterator::operator --	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      const_iterator operator--(int)$/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:public	signature:(int)
boost::container::containers_detail::rbtree::const_iterator::operator --	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      const_iterator& operator--()$/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:public	signature:()
boost::container::containers_detail::rbtree::const_iterator::operator ->	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      const_pointer   operator->() const $/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:public	signature:() const
boost::container::containers_detail::rbtree::const_iterator::operator ==	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      bool operator==   (const const_iterator& r)  const$/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:public	signature:(const const_iterator& r) const
boost::container::containers_detail::rbtree::const_iterator::prot_decr	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      void prot_decr() { --m_it; }$/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:protected	signature:()
boost::container::containers_detail::rbtree::const_iterator::prot_incr	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      void prot_incr() { ++m_it; }$/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:protected	signature:()
boost::container::containers_detail::rbtree::const_pointer	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename A::const_pointer                  const_pointer;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
boost::container::containers_detail::rbtree::const_reference	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename A::const_reference                const_reference;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
boost::container::containers_detail::rbtree::const_reverse_iterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
boost::container::containers_detail::rbtree::count	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   size_type count(const key_type& k) const$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& k) const
boost::container::containers_detail::rbtree::crbegin	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_reverse_iterator crbegin() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
boost::container::containers_detail::rbtree::crend	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_reverse_iterator crend() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
boost::container::containers_detail::rbtree::Destroyer	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef containers_detail::allocator_destroyer<NodeAlloc>     Destroyer;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
boost::container::containers_detail::rbtree::difference_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename A::difference_type                difference_type;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
boost::container::containers_detail::rbtree::emplace_equal	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator emplace_equal()$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:()
boost::container::containers_detail::rbtree::emplace_equal	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator emplace_equal(Args&&... args)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(Args&&.... args)
boost::container::containers_detail::rbtree::emplace_hint_equal	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator emplace_hint_equal(const_iterator hint)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator hint)
boost::container::containers_detail::rbtree::emplace_hint_equal	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator emplace_hint_equal(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator hint, Args&&... args)
boost::container::containers_detail::rbtree::emplace_hint_unique	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator emplace_hint_unique(const_iterator hint)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator hint)
boost::container::containers_detail::rbtree::emplace_hint_unique	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator emplace_hint_unique(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator hint, Args&&... args)
boost::container::containers_detail::rbtree::emplace_unique	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator emplace_unique()$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:()
boost::container::containers_detail::rbtree::emplace_unique	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator emplace_unique(Args&&... args)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(Args&&.... args)
boost::container::containers_detail::rbtree::emplace_unique_hint_impl	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator emplace_unique_hint_impl(const_iterator hint, NodePtr p)$/;"	f	class:boost::container::containers_detail::rbtree	access:private	signature:(const_iterator hint, NodePtr p)
boost::container::containers_detail::rbtree::emplace_unique_impl	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator emplace_unique_impl(NodePtr p)$/;"	f	class:boost::container::containers_detail::rbtree	access:private	signature:(NodePtr p)
boost::container::containers_detail::rbtree::empty	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   bool empty() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
boost::container::containers_detail::rbtree::end	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_iterator end() const$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
boost::container::containers_detail::rbtree::end	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator end()$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:()
boost::container::containers_detail::rbtree::equal_range	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   std::pair<const_iterator, const_iterator> equal_range(const key_type& k) const$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& k) const
boost::container::containers_detail::rbtree::equal_range	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   std::pair<iterator,iterator> equal_range(const key_type& k)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& k)
boost::container::containers_detail::rbtree::erase	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator first, const_iterator last)
boost::container::containers_detail::rbtree::erase	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator erase(const_iterator position)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator position)
boost::container::containers_detail::rbtree::erase	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   size_type erase(const key_type& k)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& k)
boost::container::containers_detail::rbtree::find	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_iterator find(const key_type& k) const$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& k) const
boost::container::containers_detail::rbtree::find	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator find(const key_type& k)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& k)
boost::container::containers_detail::rbtree::get_allocator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
boost::container::containers_detail::rbtree::get_stored_allocator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
boost::container::containers_detail::rbtree::get_stored_allocator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:()
boost::container::containers_detail::rbtree::iconst_iterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename Icont::const_iterator             iconst_iterator;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
boost::container::containers_detail::rbtree::Icont	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^         >::type                                      Icont;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
boost::container::containers_detail::rbtree::iiterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename Icont::iterator                   iiterator;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
boost::container::containers_detail::rbtree::insertion_functor	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   class insertion_functor$/;"	c	class:boost::container::containers_detail::rbtree	access:private
boost::container::containers_detail::rbtree::insertion_functor::icont_	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      Icont &icont_;$/;"	m	class:boost::container::containers_detail::rbtree::insertion_functor	access:private
boost::container::containers_detail::rbtree::insertion_functor::insertion_functor	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      insertion_functor(Icont &icont)$/;"	f	class:boost::container::containers_detail::rbtree::insertion_functor	access:public	signature:(Icont &icont)
boost::container::containers_detail::rbtree::insertion_functor::operator ()	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      void operator()(Node &n)$/;"	f	class:boost::container::containers_detail::rbtree::insertion_functor	access:public	signature:(Node &n)
boost::container::containers_detail::rbtree::insert_commit_data	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename Icont::insert_commit_data insert_commit_data;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
boost::container::containers_detail::rbtree::insert_equal	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator insert_equal(const value_type& v)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const value_type& v)
boost::container::containers_detail::rbtree::insert_equal	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator insert_equal(const_iterator hint, BOOST_INTERPROCESS_FWD_REF(MovableConvertible) mv)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator hint, BOOST_INTERPROCESS_FWD_REF(MovableConvertible) mv)
boost::container::containers_detail::rbtree::insert_equal	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator insert_equal(const_iterator hint, const value_type& v)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator hint, const value_type& v)
boost::container::containers_detail::rbtree::insert_equal	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void insert_equal(InputIterator first, InputIterator last)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(InputIterator first, InputIterator last)
boost::container::containers_detail::rbtree::insert_unique	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator insert_unique(const_iterator hint, BOOST_INTERPROCESS_FWD_REF(MovableConvertible) mv)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator hint, BOOST_INTERPROCESS_FWD_REF(MovableConvertible) mv)
boost::container::containers_detail::rbtree::insert_unique	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator insert_unique(const_iterator hint, const value_type& v)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator hint, const value_type& v)
boost::container::containers_detail::rbtree::insert_unique	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   std::pair<iterator,bool> insert_unique(const value_type& v)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const value_type& v)
boost::container::containers_detail::rbtree::insert_unique	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void insert_unique(InputIterator first, InputIterator last)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(InputIterator first, InputIterator last)
boost::container::containers_detail::rbtree::insert_unique_check	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   std::pair<iterator,bool> insert_unique_check$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& key, insert_commit_data &data)
boost::container::containers_detail::rbtree::insert_unique_check	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   std::pair<iterator,bool> insert_unique_check$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator hint, const key_type& key, insert_commit_data &data)
boost::container::containers_detail::rbtree::insert_unique_commit	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator insert_unique_commit(const value_type& v, insert_commit_data &data)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const value_type& v, insert_commit_data &data)
boost::container::containers_detail::rbtree::iterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   class iterator : public const_iterator$/;"	c	class:boost::container::containers_detail::rbtree	inherits:const_iterator	access:public
boost::container::containers_detail::rbtree::iterator::get	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      iiterator get()$/;"	f	class:boost::container::containers_detail::rbtree::iterator	access:private	signature:()
boost::container::containers_detail::rbtree::iterator::iterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      explicit iterator(iiterator it)$/;"	f	class:boost::container::containers_detail::rbtree::iterator	access:private	signature:(iiterator it)
boost::container::containers_detail::rbtree::iterator::iterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      iterator(){}$/;"	f	class:boost::container::containers_detail::rbtree::iterator	access:public	signature:()
boost::container::containers_detail::rbtree::iterator::operator *	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      reference operator*()  const {  return  this->m_it->get_data();  }$/;"	f	class:boost::container::containers_detail::rbtree::iterator	access:public	signature:() const
boost::container::containers_detail::rbtree::iterator::operator ++	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      iterator operator++(int)$/;"	f	class:boost::container::containers_detail::rbtree::iterator	access:public	signature:(int)
boost::container::containers_detail::rbtree::iterator::operator ++	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      iterator& operator++()  $/;"	f	class:boost::container::containers_detail::rbtree::iterator	access:public	signature:()
boost::container::containers_detail::rbtree::iterator::operator --	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      iterator operator--(int)$/;"	f	class:boost::container::containers_detail::rbtree::iterator	access:public	signature:(int)
boost::container::containers_detail::rbtree::iterator::operator --	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      iterator& operator--()$/;"	f	class:boost::container::containers_detail::rbtree::iterator	access:public	signature:()
boost::container::containers_detail::rbtree::iterator::operator ->	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      pointer   operator->() const {  return  pointer(&this->m_it->get_data());  }$/;"	f	class:boost::container::containers_detail::rbtree::iterator	access:public	signature:() const
boost::container::containers_detail::rbtree::iterator::pointer	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      typedef rbtree_pointer       pointer;$/;"	t	class:boost::container::containers_detail::rbtree::iterator	access:public
boost::container::containers_detail::rbtree::iterator::reference	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      typedef rbtree_reference     reference;$/;"	t	class:boost::container::containers_detail::rbtree::iterator	access:public
boost::container::containers_detail::rbtree::KeyNodeCompare	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef key_node_compare<value_compare>  KeyNodeCompare;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
boost::container::containers_detail::rbtree::key_comp	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   key_compare key_comp() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
boost::container::containers_detail::rbtree::key_compare	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef KeyCompare                                 key_compare;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
boost::container::containers_detail::rbtree::key_node_compare	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   struct key_node_compare$/;"	s	class:boost::container::containers_detail::rbtree	inherits:KeyValueCompare	access:private
boost::container::containers_detail::rbtree::key_node_compare::key_node_compare	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      key_node_compare(KeyValueCompare comp)$/;"	f	struct:boost::container::containers_detail::rbtree::key_node_compare	access:public	signature:(KeyValueCompare comp)
boost::container::containers_detail::rbtree::key_node_compare::operator ()	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      bool operator()(const KeyType &k, const Node &n) const$/;"	f	struct:boost::container::containers_detail::rbtree::key_node_compare	access:public	signature:(const KeyType &k, const Node &n) const
boost::container::containers_detail::rbtree::key_node_compare::operator ()	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      bool operator()(const Node &n, const KeyType &k) const$/;"	f	struct:boost::container::containers_detail::rbtree::key_node_compare	access:public	signature:(const Node &n, const KeyType &k) const
boost::container::containers_detail::rbtree::key_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef Key                                        key_type;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
boost::container::containers_detail::rbtree::lower_bound	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_iterator lower_bound(const key_type& k) const$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& k) const
boost::container::containers_detail::rbtree::lower_bound	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator lower_bound(const key_type& k)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& k)
boost::container::containers_detail::rbtree::max_size	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
boost::container::containers_detail::rbtree::mv	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      (BOOST_INTERPROCESS_FWD_REF(MovableConvertible) mv, insert_commit_data &data)$/;"	m	class:boost::container::containers_detail::rbtree	access:public
boost::container::containers_detail::rbtree::Node	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename AllocHolder::Node                 Node;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
boost::container::containers_detail::rbtree::NodeAlloc	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename AllocHolder::NodeAlloc            NodeAlloc;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
boost::container::containers_detail::rbtree::NodePtr	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename AllocHolder::NodePtr              NodePtr;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
boost::container::containers_detail::rbtree::pointer	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename A::pointer                        pointer;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
boost::container::containers_detail::rbtree::priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::containers_detail::rbtree	access:private	signature:(FwdIterator beg, FwdIterator end, bool unique, allocator_v2, std::forward_iterator_tag)
boost::container::containers_detail::rbtree::priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::containers_detail::rbtree	access:private	signature:(InpIterator beg, InpIterator end, bool unique, allocator_v1, std::input_iterator_tag)
boost::container::containers_detail::rbtree::priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::containers_detail::rbtree	access:private	signature:(InpIterator beg, InpIterator end, bool unique, allocator_v2, std::input_iterator_tag)
boost::container::containers_detail::rbtree::priv_create_and_insert_ordered_nodes	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void priv_create_and_insert_ordered_nodes$/;"	f	class:boost::container::containers_detail::rbtree	access:private	signature:(FwdIterator beg, FwdIterator end, allocator_v2, std::forward_iterator_tag)
boost::container::containers_detail::rbtree::priv_create_and_insert_ordered_nodes	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void priv_create_and_insert_ordered_nodes$/;"	f	class:boost::container::containers_detail::rbtree	access:private	signature:(InpIterator beg, InpIterator end, allocator_v1, std::input_iterator_tag)
boost::container::containers_detail::rbtree::priv_create_and_insert_ordered_nodes	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void priv_create_and_insert_ordered_nodes$/;"	f	class:boost::container::containers_detail::rbtree	access:private	signature:(InpIterator beg, InpIterator end, allocator_v2, std::input_iterator_tag)
boost::container::containers_detail::rbtree::rbegin	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_reverse_iterator rbegin() const$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
boost::container::containers_detail::rbtree::rbegin	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   reverse_iterator rbegin()$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:()
boost::container::containers_detail::rbtree::rbtree	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   rbtree( ordered_range_t, InputIterator first, InputIterator last$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:( ordered_range_t, InputIterator first, InputIterator last , const key_compare& comp = key_compare(), const allocator_type& a = allocator_type())
boost::container::containers_detail::rbtree::rbtree	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   rbtree(const key_compare& comp = key_compare(), $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_compare& comp = key_compare(), const allocator_type& a = allocator_type())
boost::container::containers_detail::rbtree::rbtree	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   rbtree(const rbtree& x) $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const rbtree& x)
boost::container::containers_detail::rbtree::rbtree	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   rbtree(InputIterator first, InputIterator last, const key_compare& comp,$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(InputIterator first, InputIterator last, const key_compare& comp, const allocator_type& a, bool unique_insertion)
boost::container::containers_detail::rbtree::rbtree_const_pointer	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef const_pointer                              rbtree_const_pointer;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
boost::container::containers_detail::rbtree::rbtree_const_reference	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef const_reference                            rbtree_const_reference;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
boost::container::containers_detail::rbtree::rbtree_difference_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef difference_type                            rbtree_difference_type;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
boost::container::containers_detail::rbtree::rbtree_pointer	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef pointer                                    rbtree_pointer;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
boost::container::containers_detail::rbtree::rbtree_reference	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef reference                                  rbtree_reference;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
boost::container::containers_detail::rbtree::RecyclingCloner	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   class RecyclingCloner$/;"	c	class:boost::container::containers_detail::rbtree	access:private
boost::container::containers_detail::rbtree::RecyclingCloner::m_holder	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      AllocHolder &m_holder;$/;"	m	class:boost::container::containers_detail::rbtree::RecyclingCloner	access:public
boost::container::containers_detail::rbtree::RecyclingCloner::m_icont	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      Icont &m_icont;$/;"	m	class:boost::container::containers_detail::rbtree::RecyclingCloner	access:public
boost::container::containers_detail::rbtree::RecyclingCloner::operator ()	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      NodePtr operator()(const Node &other) const$/;"	f	class:boost::container::containers_detail::rbtree::RecyclingCloner	access:public	signature:(const Node &other) const
boost::container::containers_detail::rbtree::RecyclingCloner::RecyclingCloner	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      RecyclingCloner(AllocHolder &holder, Icont &irbtree)$/;"	f	class:boost::container::containers_detail::rbtree::RecyclingCloner	access:public	signature:(AllocHolder &holder, Icont &irbtree)
boost::container::containers_detail::rbtree::reference	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename A::reference                      reference;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
boost::container::containers_detail::rbtree::rend	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_reverse_iterator rend() const$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
boost::container::containers_detail::rbtree::rend	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   reverse_iterator rend()$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:()
boost::container::containers_detail::rbtree::reverse_iterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef std::reverse_iterator<iterator>        reverse_iterator;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
boost::container::containers_detail::rbtree::size	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   size_type size() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
boost::container::containers_detail::rbtree::size_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename A::size_type                      size_type;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
boost::container::containers_detail::rbtree::stored_allocator_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef NodeAlloc                                  stored_allocator_type;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
boost::container::containers_detail::rbtree::swap	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void swap(ThisType& x)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(ThisType& x)
boost::container::containers_detail::rbtree::ThisType	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^                  , KeyCompare, A>                    ThisType;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
boost::container::containers_detail::rbtree::upper_bound	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_iterator upper_bound(const key_type& k) const$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& k) const
boost::container::containers_detail::rbtree::upper_bound	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator upper_bound(const key_type& k)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& k)
boost::container::containers_detail::rbtree::ValAlloc	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename AllocHolder::ValAlloc             ValAlloc;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
boost::container::containers_detail::rbtree::value_comp	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   value_compare value_comp() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
boost::container::containers_detail::rbtree::value_compare	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^                        , KeyCompare, KeyOfValue>     value_compare;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
boost::container::containers_detail::rbtree::value_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef Value                                      value_type;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
boost::container::containers_detail::rbtree::~rbtree	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   ~rbtree()$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:()
boost::container::containers_detail::rbtree_hook	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^struct rbtree_hook$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::rbtree_hook::type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      >::type  type;$/;"	t	struct:boost::container::containers_detail::rbtree_hook	access:public
boost::container::containers_detail::rbtree_node	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^struct rbtree_node$/;"	s	namespace:boost::container::containers_detail	inherits:rbtree_hook::type
boost::container::containers_detail::rbtree_node::construct	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   static void construct(node_type *ptr, BOOST_INTERPROCESS_FWD_REF(Convertible) convertible)$/;"	f	struct:boost::container::containers_detail::rbtree_node	access:public	signature:(node_type *ptr, BOOST_INTERPROCESS_FWD_REF(Convertible) convertible)
boost::container::containers_detail::rbtree_node::do_assign	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void do_assign(const pair<const A, B> &p)$/;"	f	struct:boost::container::containers_detail::rbtree_node	access:private	signature:(const pair<const A, B> &p)
boost::container::containers_detail::rbtree_node::do_assign	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void do_assign(const std::pair<const A, B> &p)$/;"	f	struct:boost::container::containers_detail::rbtree_node	access:private	signature:(const std::pair<const A, B> &p)
boost::container::containers_detail::rbtree_node::do_assign	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void do_assign(const V &v)$/;"	f	struct:boost::container::containers_detail::rbtree_node	access:private	signature:(const V &v)
boost::container::containers_detail::rbtree_node::get_data	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const T &get_data() const$/;"	f	struct:boost::container::containers_detail::rbtree_node	access:public	signature:() const
boost::container::containers_detail::rbtree_node::get_data	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   T &get_data()$/;"	f	struct:boost::container::containers_detail::rbtree_node	access:public	signature:()
boost::container::containers_detail::rbtree_node::hook_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename rbtree_hook<VoidPointer>::type hook_type;$/;"	t	struct:boost::container::containers_detail::rbtree_node	access:public
boost::container::containers_detail::rbtree_node::internal_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename rbtree_type<T>::type internal_type;$/;"	t	struct:boost::container::containers_detail::rbtree_node	access:public
boost::container::containers_detail::rbtree_node::m_data	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   internal_type m_data;$/;"	m	struct:boost::container::containers_detail::rbtree_node	access:private
boost::container::containers_detail::rbtree_node::node_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef rbtree_node<T, VoidPointer> node_type;$/;"	t	struct:boost::container::containers_detail::rbtree_node	access:public
boost::container::containers_detail::rbtree_node::operator =	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   rbtree_node &operator=(const rbtree_node &other)$/;"	f	struct:boost::container::containers_detail::rbtree_node	access:public	signature:(const rbtree_node &other)
boost::container::containers_detail::rbtree_node::rbtree_node	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   rbtree_node()$/;"	f	struct:boost::container::containers_detail::rbtree_node	access:public	signature:()
boost::container::containers_detail::rbtree_node::rbtree_node	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   rbtree_node(Args &&...args)$/;"	f	struct:boost::container::containers_detail::rbtree_node	access:public	signature:(Args &&....args)
boost::container::containers_detail::rbtree_node::rbtree_node	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   rbtree_node(const rbtree_node &other)$/;"	f	struct:boost::container::containers_detail::rbtree_node	access:public	signature:(const rbtree_node &other)
boost::container::containers_detail::rbtree_node::value_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef T value_type;$/;"	t	struct:boost::container::containers_detail::rbtree_node	access:public
boost::container::containers_detail::rbtree_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^struct rbtree_type$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::rbtree_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^struct rbtree_type< std::pair<T1, T2> >$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::rbtree_type::type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef pair<T1, T2> type;$/;"	t	struct:boost::container::containers_detail::rbtree_type	access:public
boost::container::containers_detail::rbtree_type::type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef T type;$/;"	t	struct:boost::container::containers_detail::rbtree_type	access:public
boost::container::containers_detail::scoped_array_deallocator	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^struct scoped_array_deallocator$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::scoped_array_deallocator::m_alloc	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   Allocator&  m_alloc;$/;"	m	struct:boost::container::containers_detail::scoped_array_deallocator	access:private
boost::container::containers_detail::scoped_array_deallocator::m_length	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   size_type   m_length;$/;"	m	struct:boost::container::containers_detail::scoped_array_deallocator	access:private
boost::container::containers_detail::scoped_array_deallocator::m_ptr	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   pointer     m_ptr;$/;"	m	struct:boost::container::containers_detail::scoped_array_deallocator	access:private
boost::container::containers_detail::scoped_array_deallocator::pointer	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef typename Allocator::pointer    pointer;$/;"	t	struct:boost::container::containers_detail::scoped_array_deallocator	access:public
boost::container::containers_detail::scoped_array_deallocator::release	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   void release()$/;"	f	struct:boost::container::containers_detail::scoped_array_deallocator	access:public	signature:()
boost::container::containers_detail::scoped_array_deallocator::scoped_array_deallocator	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   scoped_array_deallocator(pointer p, Allocator& a, size_type length)$/;"	f	struct:boost::container::containers_detail::scoped_array_deallocator	access:public	signature:(pointer p, Allocator& a, size_type length)
boost::container::containers_detail::scoped_array_deallocator::size_type	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef typename Allocator::size_type  size_type;$/;"	t	struct:boost::container::containers_detail::scoped_array_deallocator	access:public
boost::container::containers_detail::scoped_array_deallocator::~scoped_array_deallocator	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   ~scoped_array_deallocator()$/;"	f	struct:boost::container::containers_detail::scoped_array_deallocator	access:public	signature:()
boost::container::containers_detail::scoped_deallocator	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^struct scoped_deallocator$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::scoped_deallocator::allocator_v1	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef containers_detail::integral_constant<unsigned, 1>     allocator_v1;$/;"	t	struct:boost::container::containers_detail::scoped_deallocator	access:public
boost::container::containers_detail::scoped_deallocator::allocator_v2	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef containers_detail::integral_constant<unsigned, 2>     allocator_v2;$/;"	t	struct:boost::container::containers_detail::scoped_deallocator	access:public
boost::container::containers_detail::scoped_deallocator::alloc_version	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^         version<Allocator>::value>                   alloc_version;$/;"	t	struct:boost::container::containers_detail::scoped_deallocator	access:public
boost::container::containers_detail::scoped_deallocator::get	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   pointer get() const$/;"	f	struct:boost::container::containers_detail::scoped_deallocator	access:public	signature:() const
boost::container::containers_detail::scoped_deallocator::m_alloc	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      :  m_ptr(o.m_ptr), m_alloc(o.m_alloc)$/;"	f	struct:boost::container::containers_detail::scoped_deallocator	access:public	signature:(o.m_alloc)
boost::container::containers_detail::scoped_deallocator::m_alloc	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   Allocator&  m_alloc;$/;"	m	struct:boost::container::containers_detail::scoped_deallocator	access:public
boost::container::containers_detail::scoped_deallocator::m_ptr	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   pointer     m_ptr;$/;"	m	struct:boost::container::containers_detail::scoped_deallocator	access:public
boost::container::containers_detail::scoped_deallocator::o	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   scoped_deallocator(BOOST_INTERPROCESS_RV_REF(scoped_deallocator) o)$/;"	m	struct:boost::container::containers_detail::scoped_deallocator	access:public
boost::container::containers_detail::scoped_deallocator::pointer	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename Allocator::pointer pointer;$/;"	t	struct:boost::container::containers_detail::scoped_deallocator	access:public
boost::container::containers_detail::scoped_deallocator::priv_deallocate	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void priv_deallocate(allocator_v1)$/;"	f	struct:boost::container::containers_detail::scoped_deallocator	access:private	signature:(allocator_v1)
boost::container::containers_detail::scoped_deallocator::priv_deallocate	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void priv_deallocate(allocator_v2)$/;"	f	struct:boost::container::containers_detail::scoped_deallocator	access:private	signature:(allocator_v2)
boost::container::containers_detail::scoped_deallocator::release	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void release()$/;"	f	struct:boost::container::containers_detail::scoped_deallocator	access:public	signature:()
boost::container::containers_detail::scoped_deallocator::scoped_deallocator	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   scoped_deallocator(pointer p, Allocator& a)$/;"	f	struct:boost::container::containers_detail::scoped_deallocator	access:public	signature:(pointer p, Allocator& a)
boost::container::containers_detail::scoped_deallocator::~scoped_deallocator	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   ~scoped_deallocator()$/;"	f	struct:boost::container::containers_detail::scoped_deallocator	access:public	signature:()
boost::container::containers_detail::scoped_destructor_n	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^struct scoped_destructor_n$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::scoped_destructor_n::increment_size	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   void increment_size(size_type inc)$/;"	f	struct:boost::container::containers_detail::scoped_destructor_n	access:public	signature:(size_type inc)
boost::container::containers_detail::scoped_destructor_n::m_n	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   size_type   m_n;$/;"	m	struct:boost::container::containers_detail::scoped_destructor_n	access:public
boost::container::containers_detail::scoped_destructor_n::m_p	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   pointer     m_p;$/;"	m	struct:boost::container::containers_detail::scoped_destructor_n	access:public
boost::container::containers_detail::scoped_destructor_n::pointer	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef typename Allocator::pointer    pointer;$/;"	t	struct:boost::container::containers_detail::scoped_destructor_n	access:public
boost::container::containers_detail::scoped_destructor_n::release	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   void release()$/;"	f	struct:boost::container::containers_detail::scoped_destructor_n	access:public	signature:()
boost::container::containers_detail::scoped_destructor_n::scoped_destructor_n	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   scoped_destructor_n(pointer p, size_type n)$/;"	f	struct:boost::container::containers_detail::scoped_destructor_n	access:public	signature:(pointer p, size_type n)
boost::container::containers_detail::scoped_destructor_n::size_type	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef typename Allocator::size_type  size_type;$/;"	t	struct:boost::container::containers_detail::scoped_destructor_n	access:public
boost::container::containers_detail::scoped_destructor_n::value_type	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef typename Allocator::value_type value_type;$/;"	t	struct:boost::container::containers_detail::scoped_destructor_n	access:public
boost::container::containers_detail::scoped_destructor_n::~scoped_destructor_n	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   ~scoped_destructor_n()$/;"	f	struct:boost::container::containers_detail::scoped_destructor_n	access:public	signature:()
boost::container::containers_detail::select1st	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct select1st $/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::select1st::operator ()	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   const typename Pair::first_type& operator()(const OtherPair& x) const $/;"	f	struct:boost::container::containers_detail::select1st	access:public	signature:(const OtherPair& x) const
boost::container::containers_detail::select1st::operator ()	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   const typename Pair::first_type& operator()(const typename Pair::first_type& x) const $/;"	f	struct:boost::container::containers_detail::select1st	access:public	signature:(const typename Pair::first_type& x) const
boost::container::containers_detail::slist_hook	/usr/include/boost/interprocess/containers/container/slist.hpp	/^struct slist_hook$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::slist_hook::type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      <containers_detail::bi::void_pointer<VoidPointer>, containers_detail::bi::link_mode<containers_detail::bi::normal_link> >::type type;$/;"	t	struct:boost::container::containers_detail::slist_hook	access:public
boost::container::containers_detail::slist_node	/usr/include/boost/interprocess/containers/container/slist.hpp	/^struct slist_node$/;"	s	namespace:boost::container::containers_detail	inherits:slist_hook::type
boost::container::containers_detail::slist_node::m_data	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   T m_data;$/;"	m	struct:boost::container::containers_detail::slist_node	access:public
boost::container::containers_detail::slist_node::slist_node	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   slist_node()$/;"	f	struct:boost::container::containers_detail::slist_node	access:public	signature:()
boost::container::containers_detail::slist_node::slist_node	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   slist_node(Args &&...args)$/;"	f	struct:boost::container::containers_detail::slist_node	access:public	signature:(Args &&....args)
boost::container::containers_detail::smart_ptr_type	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^struct smart_ptr_type$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::smart_ptr_type	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^struct smart_ptr_type<T*>$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::smart_ptr_type::get	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^   static pointer get (const SmartPtr &smartptr)$/;"	f	struct:boost::container::containers_detail::smart_ptr_type	access:public	signature:(const SmartPtr &smartptr)
boost::container::containers_detail::smart_ptr_type::get	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^   static pointer get (pointer ptr)$/;"	f	struct:boost::container::containers_detail::smart_ptr_type	access:public	signature:(pointer ptr)
boost::container::containers_detail::smart_ptr_type::pointer	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^   typedef value_type *pointer;$/;"	t	struct:boost::container::containers_detail::smart_ptr_type	access:public
boost::container::containers_detail::smart_ptr_type::value_type	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^   typedef T value_type;$/;"	t	struct:boost::container::containers_detail::smart_ptr_type	access:public
boost::container::containers_detail::smart_ptr_type::value_type	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^   typedef typename SmartPtr::value_type value_type;$/;"	t	struct:boost::container::containers_detail::smart_ptr_type	access:public
boost::container::containers_detail::string_fill	/usr/include/boost/interprocess/containers/container/string.hpp	/^string_fill(std::basic_ostream<CharT, Traits>& os,$/;"	f	namespace:boost::container::containers_detail	signature:(std::basic_ostream<CharT, Traits>& os, std::basic_streambuf<CharT, Traits>* buf, std::size_t n)
boost::container::containers_detail::swap	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^swap(flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& y)
boost::container::containers_detail::swap	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void swap(node_alloc_holder &x)$/;"	f	namespace:boost::container::containers_detail	signature:(node_alloc_holder &x)
boost::container::containers_detail::swap	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^swap(rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, rbtree<Key,Value,KeyOfValue,KeyCompare,A>& y)
boost::container::containers_detail::tie_forward	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^tuple<Values&&...> tie_forward(Values&&... values)$/;"	f	namespace:boost::container::containers_detail	signature:(Values&&.... values)
boost::container::containers_detail::transform_multiallocation_chain	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^class transform_multiallocation_chain$/;"	c	namespace:boost::container::containers_detail
boost::container::containers_detail::transform_multiallocation_chain::before_begin	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   iterator before_begin()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
boost::container::containers_detail::transform_multiallocation_chain::begin	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   iterator begin()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
boost::container::containers_detail::transform_multiallocation_chain::cast	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   static pointer cast(void_pointer p)$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:private	signature:(void_pointer p)
boost::container::containers_detail::transform_multiallocation_chain::clear	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void clear()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
boost::container::containers_detail::transform_multiallocation_chain::empty	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   bool empty() const$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:() const
boost::container::containers_detail::transform_multiallocation_chain::end	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   iterator end()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
boost::container::containers_detail::transform_multiallocation_chain::extract_data	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   std::pair<void_pointer, void_pointer> extract_data()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
boost::container::containers_detail::transform_multiallocation_chain::extract_multiallocation_chain	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   MultiallocationChain extract_multiallocation_chain()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
boost::container::containers_detail::transform_multiallocation_chain::front	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   pointer front()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
boost::container::containers_detail::transform_multiallocation_chain::holder_	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^      : holder_()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
boost::container::containers_detail::transform_multiallocation_chain::holder_	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   MultiallocationChain   holder_;$/;"	m	class:boost::container::containers_detail::transform_multiallocation_chain	access:private
boost::container::containers_detail::transform_multiallocation_chain::incorporate_after	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void incorporate_after(iterator after_this, void_pointer begin, void_pointer before_end, std::size_t n)$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:(iterator after_this, void_pointer begin, void_pointer before_end, std::size_t n)
boost::container::containers_detail::transform_multiallocation_chain::insert_after	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   iterator insert_after(iterator it, pointer m)$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:(iterator it, pointer m)
boost::container::containers_detail::transform_multiallocation_chain::iterator	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^      , containers_detail::cast_functor <T> >                 iterator;$/;"	t	class:boost::container::containers_detail::transform_multiallocation_chain	access:public
boost::container::containers_detail::transform_multiallocation_chain::iterator_to	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   static iterator iterator_to(pointer p)$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:(pointer p)
boost::container::containers_detail::transform_multiallocation_chain::last	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   iterator last()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
boost::container::containers_detail::transform_multiallocation_chain::move	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^      : holder_(boost::interprocess::move(other))$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:(other)
boost::container::containers_detail::transform_multiallocation_chain::pointer	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^      <void_pointer, T>::type                            pointer;$/;"	t	class:boost::container::containers_detail::transform_multiallocation_chain	access:private
boost::container::containers_detail::transform_multiallocation_chain::pop_front	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void pop_front()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
boost::container::containers_detail::transform_multiallocation_chain::push_front	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void push_front(pointer mem)$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:(pointer mem)
boost::container::containers_detail::transform_multiallocation_chain::size	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   std::size_t size() const$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:() const
boost::container::containers_detail::transform_multiallocation_chain::splice_after	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void splice_after(iterator after_this, transform_multiallocation_chain &x, iterator before_begin, iterator before_end, std::size_t n)$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:(iterator after_this, transform_multiallocation_chain &x, iterator before_begin, iterator before_end, std::size_t n)
boost::container::containers_detail::transform_multiallocation_chain::swap	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void swap(transform_multiallocation_chain &other_chain)$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:(transform_multiallocation_chain &other_chain)
boost::container::containers_detail::transform_multiallocation_chain::transform_multiallocation_chain	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   transform_multiallocation_chain()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
boost::container::containers_detail::transform_multiallocation_chain::void_pointer	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   typedef typename MultiallocationChain::void_pointer   void_pointer;$/;"	t	class:boost::container::containers_detail::transform_multiallocation_chain	access:private
boost::container::containers_detail::true_	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^typedef bool_<true>        true_;$/;"	t	namespace:boost::container::containers_detail
boost::container::containers_detail::true_type	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^typedef true_  true_type;$/;"	t	namespace:boost::container::containers_detail
boost::container::containers_detail::tuple	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^class tuple<Head, Tail...>$/;"	c	namespace:boost::container::containers_detail	inherits:tuple
boost::container::containers_detail::tuple	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^template<> class tuple<>$/;"	c	namespace:boost::container::containers_detail
boost::container::containers_detail::tuple::head	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typename add_reference<const Head>::type head() const {  return m_head; }$/;"	f	class:boost::container::containers_detail::tuple	access:public	signature:() const
boost::container::containers_detail::tuple::head	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typename add_reference<Head>::type head()             {  return m_head; }$/;"	f	class:boost::container::containers_detail::tuple	access:public	signature:()
boost::container::containers_detail::tuple::inherited	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typedef tuple<Tail...> inherited;$/;"	t	class:boost::container::containers_detail::tuple	access:private
boost::container::containers_detail::tuple::m_head	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   Head m_head;$/;"	m	class:boost::container::containers_detail::tuple	access:protected
boost::container::containers_detail::tuple::operator =	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   tuple& operator=(const tuple<VValues...>& other)$/;"	f	class:boost::container::containers_detail::tuple	access:public	signature:(const tuple<VValues...>& other)
boost::container::containers_detail::tuple::tail	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   const inherited& tail() const { return *this; }$/;"	f	class:boost::container::containers_detail::tuple	access:public	signature:() const
boost::container::containers_detail::tuple::tail	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   inherited& tail()             { return *this; }$/;"	f	class:boost::container::containers_detail::tuple	access:public	signature:()
boost::container::containers_detail::tuple::tuple	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   tuple() { }$/;"	f	class:boost::container::containers_detail::tuple	access:public	signature:()
boost::container::containers_detail::tuple::tuple	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   tuple(const tuple<VValues...>& other)$/;"	f	class:boost::container::containers_detail::tuple	access:public	signature:(const tuple<VValues...>& other)
boost::container::containers_detail::tuple::tuple	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   tuple(typename add_const_reference<Head>::type v,$/;"	f	class:boost::container::containers_detail::tuple	access:public	signature:(typename add_const_reference<Head>::type v, typename add_const_reference<Tail>::type... vtail)
boost::container::containers_detail::tuple_element	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^struct tuple_element<0, tuple<Head, Tail...> >$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::tuple_element	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^struct tuple_element<I, tuple<Head, Tail...> >$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::tuple_element::type	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typedef Head type;$/;"	t	struct:boost::container::containers_detail::tuple_element	access:public
boost::container::containers_detail::tuple_element::type	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typedef typename tuple_element<I-1, tuple<Tail...> >::type type;$/;"	t	struct:boost::container::containers_detail::tuple_element	access:public
boost::container::containers_detail::upper_power_of_2	/usr/include/boost/interprocess/containers/container/detail/math_functions.hpp	/^inline Integer upper_power_of_2(const Integer & A)$/;"	f	namespace:boost::container::containers_detail	signature:(const Integer & A)
boost::container::containers_detail::value_compare_impl	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^struct value_compare_impl$/;"	s	namespace:boost::container::containers_detail	inherits:KeyCompare
boost::container::containers_detail::value_compare_impl::key_comp	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const key_compare &key_comp() const$/;"	f	struct:boost::container::containers_detail::value_compare_impl	access:public	signature:() const
boost::container::containers_detail::value_compare_impl::key_comp	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   key_compare &key_comp()$/;"	f	struct:boost::container::containers_detail::value_compare_impl	access:public	signature:()
boost::container::containers_detail::value_compare_impl::key_compare	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef KeyCompare   key_compare; $/;"	t	struct:boost::container::containers_detail::value_compare_impl	access:public
boost::container::containers_detail::value_compare_impl::key_of_value	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef KeyOfValue   key_of_value;$/;"	t	struct:boost::container::containers_detail::value_compare_impl	access:public
boost::container::containers_detail::value_compare_impl::key_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef Key          key_type;$/;"	t	struct:boost::container::containers_detail::value_compare_impl	access:public
boost::container::containers_detail::value_compare_impl::operator ()	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   bool operator()(const A &a, const B &b) const$/;"	f	struct:boost::container::containers_detail::value_compare_impl	access:public	signature:(const A &a, const B &b) const
boost::container::containers_detail::value_compare_impl::value_compare_impl	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   value_compare_impl(key_compare kcomp)$/;"	f	struct:boost::container::containers_detail::value_compare_impl	access:public	signature:(key_compare kcomp)
boost::container::containers_detail::value_compare_impl::value_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef Value        value_type;$/;"	t	struct:boost::container::containers_detail::value_compare_impl	access:public
boost::container::containers_detail::value_init	/usr/include/boost/interprocess/containers/container/detail/value_init.hpp	/^struct value_init$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::value_init::m_t	/usr/include/boost/interprocess/containers/container/detail/value_init.hpp	/^   T m_t;$/;"	m	struct:boost::container::containers_detail::value_init	access:public
boost::container::containers_detail::value_init::value_init	/usr/include/boost/interprocess/containers/container/detail/value_init.hpp	/^   value_init()$/;"	f	struct:boost::container::containers_detail::value_init	access:public	signature:()
boost::container::containers_detail::vector_alloc_holder	/usr/include/boost/interprocess/containers/container/vector.hpp	/^struct vector_alloc_holder $/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::vector_alloc_holder::alloc	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   A &alloc()$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:public	signature:()
boost::container::containers_detail::vector_alloc_holder::alloc	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const A &alloc() const$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:public	signature:() const
boost::container::containers_detail::vector_alloc_holder::allocation_command	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      allocation_command(allocation_type command,$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:public	signature:(allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, const pointer &reuse = 0)
boost::container::containers_detail::vector_alloc_holder::allocation_command	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      allocation_command(allocation_type command,$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:public	signature:(allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, const pointer &reuse, allocator_v1)
boost::container::containers_detail::vector_alloc_holder::allocation_command	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      allocation_command(allocation_type command,$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:public	signature:(allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, const pointer &reuse, allocator_v2)
boost::container::containers_detail::vector_alloc_holder::allocator_v1	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef containers_detail::integral_constant<unsigned, 1>      allocator_v1;$/;"	t	struct:boost::container::containers_detail::vector_alloc_holder	access:public
boost::container::containers_detail::vector_alloc_holder::allocator_v2	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef containers_detail::integral_constant<unsigned, 2>      allocator_v2;$/;"	t	struct:boost::container::containers_detail::vector_alloc_holder	access:public
boost::container::containers_detail::vector_alloc_holder::alloc_version	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      boost::container::containers_detail::version<A>::value> alloc_version;$/;"	t	struct:boost::container::containers_detail::vector_alloc_holder	access:public
boost::container::containers_detail::vector_alloc_holder::destroy	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void destroy(value_type* p)$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:protected	signature:(value_type* p)
boost::container::containers_detail::vector_alloc_holder::destroy_n	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void destroy_n(value_type* p, size_type n)$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:protected	signature:(value_type* p, size_type n)
boost::container::containers_detail::vector_alloc_holder::members_	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   } members_;$/;"	m	struct:boost::container::containers_detail::vector_alloc_holder	typeref:struct:boost::container::containers_detail::vector_alloc_holder::members_holder	access:public
boost::container::containers_detail::vector_alloc_holder::members_holder	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   struct members_holder$/;"	s	struct:boost::container::containers_detail::vector_alloc_holder	inherits:A	access:public
boost::container::containers_detail::vector_alloc_holder::members_holder::members_holder	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      members_holder(const A &alloc)$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder::members_holder	access:public	signature:(const A &alloc)
boost::container::containers_detail::vector_alloc_holder::members_holder::members_holder	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      members_holder(const members_holder&);$/;"	p	struct:boost::container::containers_detail::vector_alloc_holder::members_holder	access:private	signature:(const members_holder&)
boost::container::containers_detail::vector_alloc_holder::members_holder::m_capacity	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      size_type   m_capacity;$/;"	m	struct:boost::container::containers_detail::vector_alloc_holder::members_holder	access:public
boost::container::containers_detail::vector_alloc_holder::members_holder::m_size	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      size_type   m_size;$/;"	m	struct:boost::container::containers_detail::vector_alloc_holder::members_holder	access:public
boost::container::containers_detail::vector_alloc_holder::members_holder::m_start	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      pointer     m_start;$/;"	m	struct:boost::container::containers_detail::vector_alloc_holder::members_holder	access:public
boost::container::containers_detail::vector_alloc_holder::next_capacity	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   size_type next_capacity(size_type additional_objects) const$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:public	signature:(size_type additional_objects) const
boost::container::containers_detail::vector_alloc_holder::pointer	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename A::pointer      pointer;$/;"	t	struct:boost::container::containers_detail::vector_alloc_holder	access:public
boost::container::containers_detail::vector_alloc_holder::prot_deallocate	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void prot_deallocate()$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:protected	signature:()
boost::container::containers_detail::vector_alloc_holder::prot_destroy_all	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void prot_destroy_all()$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:protected	signature:()
boost::container::containers_detail::vector_alloc_holder::size_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename A::size_type    size_type;$/;"	t	struct:boost::container::containers_detail::vector_alloc_holder	access:public
boost::container::containers_detail::vector_alloc_holder::value_traits	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef vector_value_traits<value_type, A> value_traits;$/;"	t	struct:boost::container::containers_detail::vector_alloc_holder	access:public
boost::container::containers_detail::vector_alloc_holder::value_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename A::value_type   value_type;$/;"	t	struct:boost::container::containers_detail::vector_alloc_holder	access:public
boost::container::containers_detail::vector_alloc_holder::vector_alloc_holder	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_alloc_holder(const A &a)$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:public	signature:(const A &a)
boost::container::containers_detail::vector_alloc_holder::~vector_alloc_holder	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   ~vector_alloc_holder()$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:public	signature:()
boost::container::containers_detail::vector_const_iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^class vector_const_iterator$/;"	c	namespace:boost::container::containers_detail	inherits:std::iterator
boost::container::containers_detail::vector_const_iterator::difference_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename std::iterator_traits<Pointer>::difference_type   difference_type;$/;"	t	class:boost::container::containers_detail::vector_const_iterator	access:public
boost::container::containers_detail::vector_const_iterator::get_ptr	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   Pointer get_ptr() const    {  return   m_ptr;  }$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:() const
boost::container::containers_detail::vector_const_iterator::m_ptr	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   Pointer m_ptr;$/;"	m	class:boost::container::containers_detail::vector_const_iterator	access:protected
boost::container::containers_detail::vector_const_iterator::operator !=	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   bool operator!=   (const vector_const_iterator& r)  const$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(const vector_const_iterator& r) const
boost::container::containers_detail::vector_const_iterator::operator *	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   reference operator*()   const  $/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:() const
boost::container::containers_detail::vector_const_iterator::operator +	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   friend vector_const_iterator operator+(difference_type off, const vector_const_iterator& right)$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:friend	signature:(difference_type off, const vector_const_iterator& right)
boost::container::containers_detail::vector_const_iterator::operator +	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_const_iterator operator+(difference_type off) const$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(difference_type off) const
boost::container::containers_detail::vector_const_iterator::operator ++	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_const_iterator operator++(int)      $/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(int)
boost::container::containers_detail::vector_const_iterator::operator ++	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_const_iterator& operator++()       $/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:()
boost::container::containers_detail::vector_const_iterator::operator +=	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_const_iterator& operator+=(difference_type off)$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(difference_type off)
boost::container::containers_detail::vector_const_iterator::operator -	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   difference_type operator-(const vector_const_iterator& right) const$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(const vector_const_iterator& right) const
boost::container::containers_detail::vector_const_iterator::operator -	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_const_iterator operator-(difference_type off) const$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(difference_type off) const
boost::container::containers_detail::vector_const_iterator::operator --	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_const_iterator operator--(int)$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(int)
boost::container::containers_detail::vector_const_iterator::operator --	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_const_iterator& operator--()$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:()
boost::container::containers_detail::vector_const_iterator::operator -=	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_const_iterator& operator-=(difference_type off)$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(difference_type off)
boost::container::containers_detail::vector_const_iterator::operator ->	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const value_type * operator->()  const  $/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:() const
boost::container::containers_detail::vector_const_iterator::operator <	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   bool operator<    (const vector_const_iterator& r)  const$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(const vector_const_iterator& r) const
boost::container::containers_detail::vector_const_iterator::operator <=	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   bool operator<=   (const vector_const_iterator& r)  const$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(const vector_const_iterator& r) const
boost::container::containers_detail::vector_const_iterator::operator ==	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   bool operator==   (const vector_const_iterator& r)  const$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(const vector_const_iterator& r) const
boost::container::containers_detail::vector_const_iterator::operator >	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   bool operator>    (const vector_const_iterator& r)  const$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(const vector_const_iterator& r) const
boost::container::containers_detail::vector_const_iterator::operator >=	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   bool operator>=   (const vector_const_iterator& r)  const$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(const vector_const_iterator& r) const
boost::container::containers_detail::vector_const_iterator::operator []	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   reference operator[](difference_type off) const$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(difference_type off) const
boost::container::containers_detail::vector_const_iterator::pointer	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename boost::pointer_to_other<Pointer, value_type>::type      pointer;$/;"	t	class:boost::container::containers_detail::vector_const_iterator	access:public
boost::container::containers_detail::vector_const_iterator::reference	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef const value_type&                                               reference;$/;"	t	class:boost::container::containers_detail::vector_const_iterator	access:public
boost::container::containers_detail::vector_const_iterator::value_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename std::iterator_traits<Pointer>::value_type  value_type;$/;"	t	class:boost::container::containers_detail::vector_const_iterator	access:public
boost::container::containers_detail::vector_const_iterator::vector_const_iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   explicit vector_const_iterator(Pointer ptr)  : m_ptr(ptr){}$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(Pointer ptr)
boost::container::containers_detail::vector_const_iterator::vector_const_iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_const_iterator() : m_ptr(0){}$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:()
boost::container::containers_detail::vector_iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^class vector_iterator$/;"	c	namespace:boost::container::containers_detail	inherits:vector_const_iterator
boost::container::containers_detail::vector_iterator::difference_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename vector_const_iterator<Pointer>::difference_type  difference_type;$/;"	t	class:boost::container::containers_detail::vector_iterator	access:public
boost::container::containers_detail::vector_iterator::operator *	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   reference operator*()  const  $/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:() const
boost::container::containers_detail::vector_iterator::operator +	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   friend vector_iterator operator+(difference_type off, const vector_iterator& right)$/;"	f	class:boost::container::containers_detail::vector_iterator	access:friend	signature:(difference_type off, const vector_iterator& right)
boost::container::containers_detail::vector_iterator::operator +	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_iterator operator+(difference_type off) const$/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:(difference_type off) const
boost::container::containers_detail::vector_iterator::operator ++	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_iterator operator++(int)$/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:(int)
boost::container::containers_detail::vector_iterator::operator ++	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_iterator& operator++()  $/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:()
boost::container::containers_detail::vector_iterator::operator +=	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_iterator& operator+=(difference_type off)$/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:(difference_type off)
boost::container::containers_detail::vector_iterator::operator -	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   difference_type operator-(const vector_const_iterator<Pointer>& right) const$/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:(const vector_const_iterator<Pointer>& right) const
boost::container::containers_detail::vector_iterator::operator -	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_iterator operator-(difference_type off) const$/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:(difference_type off) const
boost::container::containers_detail::vector_iterator::operator --	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_iterator operator--(int)$/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:(int)
boost::container::containers_detail::vector_iterator::operator --	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_iterator& operator--()$/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:()
boost::container::containers_detail::vector_iterator::operator -=	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_iterator& operator-=(difference_type off)$/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:(difference_type off)
boost::container::containers_detail::vector_iterator::operator ->	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   value_type* operator->() const  $/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:() const
boost::container::containers_detail::vector_iterator::operator []	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   reference operator[](difference_type off) const $/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:(difference_type off) const
boost::container::containers_detail::vector_iterator::pointer	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef Pointer                                                   pointer;$/;"	t	class:boost::container::containers_detail::vector_iterator	access:public
boost::container::containers_detail::vector_iterator::reference	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef value_type&                                               reference;$/;"	t	class:boost::container::containers_detail::vector_iterator	access:public
boost::container::containers_detail::vector_iterator::value_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename std::iterator_traits<Pointer>::value_type        value_type;$/;"	t	class:boost::container::containers_detail::vector_iterator	access:public
boost::container::containers_detail::vector_iterator::vector_iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   explicit vector_iterator(Pointer ptr)$/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:(Pointer ptr)
boost::container::containers_detail::vector_iterator::vector_iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_iterator()$/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:()
boost::container::containers_detail::vector_value_traits	/usr/include/boost/interprocess/containers/container/vector.hpp	/^struct vector_value_traits$/;"	s	namespace:boost::container::containers_detail
boost::container::containers_detail::vector_value_traits::allocator_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef A allocator_type;$/;"	t	struct:boost::container::containers_detail::vector_value_traits	access:public
boost::container::containers_detail::vector_value_traits::nothrow_assign	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   static const bool nothrow_assign = has_nothrow_assign<value_type>::value;$/;"	m	struct:boost::container::containers_detail::vector_value_traits	access:public
boost::container::containers_detail::vector_value_traits::nothrow_copy	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   static const bool nothrow_copy = has_nothrow_copy<value_type>::value;$/;"	m	struct:boost::container::containers_detail::vector_value_traits	access:public
boost::container::containers_detail::vector_value_traits::OldArrayDestructor	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      >::type   OldArrayDestructor;$/;"	t	struct:boost::container::containers_detail::vector_value_traits	access:public
boost::container::containers_detail::vector_value_traits::trivial_assign	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   static const bool trivial_assign = has_trivial_assign<value_type>::value;$/;"	m	struct:boost::container::containers_detail::vector_value_traits	access:public
boost::container::containers_detail::vector_value_traits::trivial_copy	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   static const bool trivial_copy = has_trivial_copy<value_type>::value;$/;"	m	struct:boost::container::containers_detail::vector_value_traits	access:public
boost::container::containers_detail::vector_value_traits::trivial_dctr	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   static const bool trivial_dctr = boost::has_trivial_destructor<value_type>::value;$/;"	m	struct:boost::container::containers_detail::vector_value_traits	access:public
boost::container::containers_detail::vector_value_traits::trivial_dctr_after_move	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   static const bool trivial_dctr_after_move = false;$/;"	m	struct:boost::container::containers_detail::vector_value_traits	access:public
boost::container::containers_detail::vector_value_traits::UCopiedArrayDeallocator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      >::type   UCopiedArrayDeallocator;$/;"	t	struct:boost::container::containers_detail::vector_value_traits	access:public
boost::container::containers_detail::vector_value_traits::UCopiedArrayDestructor	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      >::type   UCopiedArrayDestructor;$/;"	t	struct:boost::container::containers_detail::vector_value_traits	access:public
boost::container::containers_detail::vector_value_traits::value_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef T value_type;$/;"	t	struct:boost::container::containers_detail::vector_value_traits	access:public
boost::container::containers_detail::version	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^struct version$/;"	s	namespace:boost::container::containers_detail	inherits:containers_detail::integral_constant
boost::container::containers_detail::version_type	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^struct version_type$/;"	s	namespace:boost::container::containers_detail	inherits:containers_detail::integral_constant
boost::container::containers_detail::version_type::type	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^    typedef T type;$/;"	t	struct:boost::container::containers_detail::version_type	access:public
boost::container::containers_detail::version_type::version_type	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^    version_type(const version_type<T, 0>&);$/;"	p	struct:boost::container::containers_detail::version_type	access:public	signature:(const version_type<T, 0>&)
boost::container::containers_detail::yes_type	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^typedef char yes_type;$/;"	t	namespace:boost::container::containers_detail
boost::container::containers_detail::~node_alloc_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   ~node_alloc_holder()$/;"	f	namespace:boost::container::containers_detail	signature:()
boost::container::copy_n	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^OutIt copy_n(InIt first, typename std::iterator_traits<InIt>::difference_type length, OutIt dest)$/;"	f	namespace:boost::container	signature:(InIt first, typename std::iterator_traits<InIt>::difference_type length, OutIt dest)
boost::container::copy_n_dispatch	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^OutIt copy_n_dispatch(InIt first, typename std::iterator_traits<InIt>::difference_type length, OutIt dest, containers_detail::bool_<false>)$/;"	f	namespace:boost::container	signature:(InIt first, typename std::iterator_traits<InIt>::difference_type length, OutIt dest, containers_detail::bool_<false>)
boost::container::copy_n_dispatch	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^T *copy_n_dispatch(const T *first, typename std::iterator_traits<const T*>::difference_type length, T *dest, containers_detail::bool_<true>)$/;"	f	namespace:boost::container	signature:(const T *first, typename std::iterator_traits<const T*>::difference_type length, T *dest, containers_detail::bool_<true>)
boost::container::default_construct_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^class default_construct_iterator$/;"	c	namespace:boost::container	inherits:std::iterator
boost::container::default_construct_iterator::advance	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void advance(Difference n)$/;"	f	class:boost::container::default_construct_iterator	access:private	signature:(Difference n)
boost::container::default_construct_iterator::decrement	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void decrement()$/;"	f	class:boost::container::default_construct_iterator	access:private	signature:()
boost::container::default_construct_iterator::default_construct_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   default_construct_iterator()$/;"	f	class:boost::container::default_construct_iterator	access:public	signature:()
boost::container::default_construct_iterator::default_construct_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   explicit default_construct_iterator(Difference range_size)$/;"	f	class:boost::container::default_construct_iterator	access:public	signature:(Difference range_size)
boost::container::default_construct_iterator::dereference	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   const T & dereference() const$/;"	f	class:boost::container::default_construct_iterator	access:private	signature:() const
boost::container::default_construct_iterator::distance_to	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   Difference distance_to(const this_type &other)const$/;"	f	class:boost::container::default_construct_iterator	access:private	signature:(const this_type &other) const
boost::container::default_construct_iterator::equal	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   bool equal(const this_type &other) const$/;"	f	class:boost::container::default_construct_iterator	access:private	signature:(const this_type &other) const
boost::container::default_construct_iterator::increment	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void increment()$/;"	f	class:boost::container::default_construct_iterator	access:private	signature:()
boost::container::default_construct_iterator::less	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   bool less(const this_type &other) const$/;"	f	class:boost::container::default_construct_iterator	access:private	signature:(const this_type &other) const
boost::container::default_construct_iterator::m_num	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   Difference  m_num;$/;"	m	class:boost::container::default_construct_iterator	access:private
boost::container::default_construct_iterator::operator !=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator!= (const default_construct_iterator& i, const default_construct_iterator& i2)$/;"	f	class:boost::container::default_construct_iterator	access:friend	signature:(const default_construct_iterator& i, const default_construct_iterator& i2)
boost::container::default_construct_iterator::operator *	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   const T& operator*() const$/;"	f	class:boost::container::default_construct_iterator	access:public	signature:() const
boost::container::default_construct_iterator::operator +	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   default_construct_iterator operator+(Difference off) const$/;"	f	class:boost::container::default_construct_iterator	access:public	signature:(Difference off) const
boost::container::default_construct_iterator::operator +	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend default_construct_iterator operator+(Difference off, const default_construct_iterator& right)$/;"	f	class:boost::container::default_construct_iterator	access:friend	signature:(Difference off, const default_construct_iterator& right)
boost::container::default_construct_iterator::operator ++	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   default_construct_iterator operator++(int)$/;"	f	class:boost::container::default_construct_iterator	access:public	signature:(int)
boost::container::default_construct_iterator::operator ++	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   default_construct_iterator& operator++() $/;"	f	class:boost::container::default_construct_iterator	access:public	signature:()
boost::container::default_construct_iterator::operator +=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   default_construct_iterator& operator+=(Difference off)$/;"	f	class:boost::container::default_construct_iterator	access:public	signature:(Difference off)
boost::container::default_construct_iterator::operator -	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   default_construct_iterator operator-(Difference off) const$/;"	f	class:boost::container::default_construct_iterator	access:public	signature:(Difference off) const
boost::container::default_construct_iterator::operator -	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend Difference operator- (const default_construct_iterator& i, const default_construct_iterator& i2)$/;"	f	class:boost::container::default_construct_iterator	access:friend	signature:(const default_construct_iterator& i, const default_construct_iterator& i2)
boost::container::default_construct_iterator::operator -=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   default_construct_iterator& operator-=(Difference off)$/;"	f	class:boost::container::default_construct_iterator	access:public	signature:(Difference off)
boost::container::default_construct_iterator::operator ->	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   const T* operator->() const$/;"	f	class:boost::container::default_construct_iterator	access:public	signature:() const
boost::container::default_construct_iterator::operator <	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator< (const default_construct_iterator& i, const default_construct_iterator& i2)$/;"	f	class:boost::container::default_construct_iterator	access:friend	signature:(const default_construct_iterator& i, const default_construct_iterator& i2)
boost::container::default_construct_iterator::operator <=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator<= (const default_construct_iterator& i, const default_construct_iterator& i2)$/;"	f	class:boost::container::default_construct_iterator	access:friend	signature:(const default_construct_iterator& i, const default_construct_iterator& i2)
boost::container::default_construct_iterator::operator ==	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator== (const default_construct_iterator& i, const default_construct_iterator& i2)$/;"	f	class:boost::container::default_construct_iterator	access:friend	signature:(const default_construct_iterator& i, const default_construct_iterator& i2)
boost::container::default_construct_iterator::operator >	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator> (const default_construct_iterator& i, const default_construct_iterator& i2)$/;"	f	class:boost::container::default_construct_iterator	access:friend	signature:(const default_construct_iterator& i, const default_construct_iterator& i2)
boost::container::default_construct_iterator::operator >=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator>= (const default_construct_iterator& i, const default_construct_iterator& i2)$/;"	f	class:boost::container::default_construct_iterator	access:friend	signature:(const default_construct_iterator& i, const default_construct_iterator& i2)
boost::container::default_construct_iterator::this_type	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   typedef  default_construct_iterator<T, Difference> this_type;$/;"	t	class:boost::container::default_construct_iterator	access:private
boost::container::deque	/usr/include/boost/interprocess/containers/container/deque.hpp	/^class deque : protected deque_base<T, Alloc>$/;"	c	namespace:boost::container	inherits:deque_base
boost::container::deque::advanced_insert_aux_int_t	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef containers_detail::advanced_insert_aux_int<value_type, iterator> advanced_insert_aux_int_t;$/;"	t	class:boost::container::deque	access:private
boost::container::deque::allocator_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Base::allocator_type        allocator_type;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::assign	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void assign(InpIt first, InpIt last)$/;"	f	class:boost::container::deque	access:public	signature:(InpIt first, InpIt last)
boost::container::deque::assign	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void assign(size_type n, const T& val)$/;"	f	class:boost::container::deque	access:public	signature:(size_type n, const T& val)
boost::container::deque::at	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_reference at(size_type n) const$/;"	f	class:boost::container::deque	access:public	signature:(size_type n) const
boost::container::deque::at	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   reference at(size_type n)$/;"	f	class:boost::container::deque	access:public	signature:(size_type n)
boost::container::deque::back	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_reference back() const  {  return *(cend()-1);  }$/;"	f	class:boost::container::deque	access:public	signature:() const
boost::container::deque::back	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   reference back()  {  return *(end()-1); }$/;"	f	class:boost::container::deque	access:public	signature:()
boost::container::deque::Base	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      :  Base(mx.alloc())$/;"	f	class:boost::container::deque	access:public	signature:(mx.alloc())
boost::container::deque::Base	/usr/include/boost/interprocess/containers/container/deque.hpp	/^  typedef deque_base<T, Alloc> Base;$/;"	t	class:boost::container::deque	access:private
boost::container::deque::begin	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::deque	access:public	signature:() const
boost::container::deque::begin	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator begin() $/;"	f	class:boost::container::deque	access:public	signature:()
boost::container::deque::cbegin	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_iterator cbegin() const $/;"	f	class:boost::container::deque	access:public	signature:() const
boost::container::deque::cend	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_iterator cend() const $/;"	f	class:boost::container::deque	access:public	signature:() const
boost::container::deque::clear	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void clear()$/;"	f	class:boost::container::deque	access:public	signature:()
boost::container::deque::const_iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Base::const_iterator        const_iterator;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::const_pointer	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef val_alloc_cptr                       const_pointer;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::const_reference	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef val_alloc_cref                       const_reference;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::const_reverse_iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::crbegin	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_reverse_iterator crbegin() const $/;"	f	class:boost::container::deque	access:public	signature:() const
boost::container::deque::crend	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_reverse_iterator crend() const $/;"	f	class:boost::container::deque	access:public	signature:() const
boost::container::deque::deque	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   deque(const deque& x)$/;"	f	class:boost::container::deque	access:public	signature:(const deque& x)
boost::container::deque::deque	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   deque(InpIt first, InpIt last, const allocator_type& a = allocator_type())$/;"	f	class:boost::container::deque	access:public	signature:(InpIt first, InpIt last, const allocator_type& a = allocator_type())
boost::container::deque::deque	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   deque(size_type n, const value_type& value,$/;"	f	class:boost::container::deque	access:public	signature:(size_type n, const value_type& value, const allocator_type& a = allocator_type())
boost::container::deque::deque	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   explicit deque(const allocator_type& a = allocator_type()) $/;"	f	class:boost::container::deque	access:public	signature:(const allocator_type& a = allocator_type())
boost::container::deque::deque	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   explicit deque(size_type n) : Base(allocator_type(), n)$/;"	f	class:boost::container::deque	access:public	signature:(size_type n)
boost::container::deque::difference_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef std::ptrdiff_t                       difference_type;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::emplace	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator emplace(const_iterator p)$/;"	f	class:boost::container::deque	access:public	signature:(const_iterator p)
boost::container::deque::emplace	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator emplace(const_iterator p, Args&&... args)$/;"	f	class:boost::container::deque	access:public	signature:(const_iterator p, Args&&... args)
boost::container::deque::emplace_back	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void emplace_back()$/;"	f	class:boost::container::deque	access:public	signature:()
boost::container::deque::emplace_back	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void emplace_back(Args&&... args)$/;"	f	class:boost::container::deque	access:public	signature:(Args&&.... args)
boost::container::deque::emplace_front	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void emplace_front()$/;"	f	class:boost::container::deque	access:public	signature:()
boost::container::deque::emplace_front	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void emplace_front(Args&&... args)$/;"	f	class:boost::container::deque	access:public	signature:(Args&&.... args)
boost::container::deque::empty	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   bool empty() const $/;"	f	class:boost::container::deque	access:public	signature:() const
boost::container::deque::end	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::deque	access:public	signature:() const
boost::container::deque::end	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator end() $/;"	f	class:boost::container::deque	access:public	signature:()
boost::container::deque::erase	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::deque	access:public	signature:(const_iterator first, const_iterator last)
boost::container::deque::erase	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator erase(const_iterator pos) $/;"	f	class:boost::container::deque	access:public	signature:(const_iterator pos)
boost::container::deque::front	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_reference front() const $/;"	f	class:boost::container::deque	access:public	signature:() const
boost::container::deque::front	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   reference front() { return *this->members_.m_start; }$/;"	f	class:boost::container::deque	access:public	signature:()
boost::container::deque::get_allocator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   allocator_type get_allocator() const { return Base::alloc(); }$/;"	f	class:boost::container::deque	access:private	signature:() const
boost::container::deque::index_pointer	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef ptr_alloc_ptr index_pointer;$/;"	t	class:boost::container::deque	access:private
boost::container::deque::insert	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator insert(const_iterator position, BOOST_INTERPROCESS_RV_REF(value_type) mx) $/;"	f	class:boost::container::deque	access:public	signature:(const_iterator position, BOOST_INTERPROCESS_RV_REF(value_type) mx)
boost::container::deque::insert	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator insert(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::deque	access:public	signature:(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
boost::container::deque::insert	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator insert(const_iterator position, insert_const_ref_type x) $/;"	f	class:boost::container::deque	access:public	signature:(const_iterator position, insert_const_ref_type x)
boost::container::deque::insert	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator insert(const_iterator position, T &x)$/;"	f	class:boost::container::deque	access:public	signature:(const_iterator position, T &x)
boost::container::deque::insert	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void insert(const_iterator pos, InpIt first, InpIt last) $/;"	f	class:boost::container::deque	access:public	signature:(const_iterator pos, InpIt first, InpIt last)
boost::container::deque::insert	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void insert(const_iterator pos, size_type n, const value_type& x)$/;"	f	class:boost::container::deque	access:public	signature:(const_iterator pos, size_type n, const value_type& x)
boost::container::deque::insert_const_ref_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      move_const_ref_type<T>::type                    insert_const_ref_type;$/;"	t	class:boost::container::deque	access:private
boost::container::deque::iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Base::iterator              iterator;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::max_size	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::deque	access:public	signature:() const
boost::container::deque::move_it	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef boost::interprocess::move_iterator<r_iterator>    move_it;$/;"	t	class:boost::container::deque	access:private
boost::container::deque::operator []	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_reference operator[](size_type n) const $/;"	f	class:boost::container::deque	access:public	signature:(size_type n) const
boost::container::deque::operator []	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   reference operator[](size_type n)$/;"	f	class:boost::container::deque	access:public	signature:(size_type n)
boost::container::deque::pointer	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef val_alloc_ptr                        pointer;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::pop_back	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void pop_back() $/;"	f	class:boost::container::deque	access:public	signature:()
boost::container::deque::pop_front	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void pop_front() $/;"	f	class:boost::container::deque	access:public	signature:()
boost::container::deque::priv_assign_aux	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_assign_aux(FwdIt first, FwdIt last, std::forward_iterator_tag)$/;"	f	class:boost::container::deque	access:private	signature:(FwdIt first, FwdIt last, std::forward_iterator_tag)
boost::container::deque::priv_assign_aux	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_assign_aux(InpIt first, InpIt last, std::input_iterator_tag)$/;"	f	class:boost::container::deque	access:private	signature:(InpIt first, InpIt last, std::input_iterator_tag)
boost::container::deque::priv_assign_dispatch	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_assign_dispatch(InpIt first, InpIt last, containers_detail::false_) $/;"	f	class:boost::container::deque	access:private	signature:(InpIt first, InpIt last, containers_detail::false_)
boost::container::deque::priv_assign_dispatch	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_assign_dispatch(Integer n, Integer val, containers_detail::true_)$/;"	f	class:boost::container::deque	access:private	signature:(Integer n, Integer val, containers_detail::true_)
boost::container::deque::priv_destroy_range	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_destroy_range(iterator p, iterator p2)$/;"	f	class:boost::container::deque	access:private	signature:(iterator p, iterator p2)
boost::container::deque::priv_destroy_range	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_destroy_range(pointer p, pointer p2)$/;"	f	class:boost::container::deque	access:private	signature:(pointer p, pointer p2)
boost::container::deque::priv_fill_assign	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_fill_assign(size_type n, const T& val)$/;"	f	class:boost::container::deque	access:private	signature:(size_type n, const T& val)
boost::container::deque::priv_fill_initialize	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_fill_initialize(const value_type& value) $/;"	f	class:boost::container::deque	access:private	signature:(const value_type& value)
boost::container::deque::priv_fill_insert	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_fill_insert(const_iterator pos, size_type n, const value_type& x)$/;"	f	class:boost::container::deque	access:private	signature:(const_iterator pos, size_type n, const value_type& x)
boost::container::deque::priv_initialize_dispatch	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_initialize_dispatch(InpIt first, InpIt last, containers_detail::false_) $/;"	f	class:boost::container::deque	access:private	signature:(InpIt first, InpIt last, containers_detail::false_)
boost::container::deque::priv_initialize_dispatch	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_initialize_dispatch(Integer n, Integer x, containers_detail::true_) $/;"	f	class:boost::container::deque	access:private	signature:(Integer n, Integer x, containers_detail::true_)
boost::container::deque::priv_insert	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator priv_insert(const_iterator position, const value_type &x) $/;"	f	class:boost::container::deque	access:private	signature:(const_iterator position, const value_type &x)
boost::container::deque::priv_insert_aux	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_insert_aux(const_iterator p, FwdIt first, FwdIt last)$/;"	f	class:boost::container::deque	access:private	signature:(const_iterator p, FwdIt first, FwdIt last)
boost::container::deque::priv_insert_aux	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_insert_aux(const_iterator pos, FwdIt first, FwdIt last, std::forward_iterator_tag) $/;"	f	class:boost::container::deque	access:private	signature:(const_iterator pos, FwdIt first, FwdIt last, std::forward_iterator_tag)
boost::container::deque::priv_insert_aux	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_insert_aux(const_iterator pos, InpIt first, InpIt last, std::input_iterator_tag)$/;"	f	class:boost::container::deque	access:private	signature:(const_iterator pos, InpIt first, InpIt last, std::input_iterator_tag)
boost::container::deque::priv_insert_aux	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_insert_aux(const_iterator pos, size_type n, const value_type& x)$/;"	f	class:boost::container::deque	access:private	signature:(const_iterator pos, size_type n, const value_type& x)
boost::container::deque::priv_insert_aux_impl	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_insert_aux_impl(const_iterator p, size_type n, advanced_insert_aux_int_t &interf)$/;"	f	class:boost::container::deque	access:private	signature:(const_iterator p, size_type n, advanced_insert_aux_int_t &interf)
boost::container::deque::priv_insert_dispatch	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_insert_dispatch(const_iterator pos, Integer n, Integer x, containers_detail::true_) $/;"	f	class:boost::container::deque	access:private	signature:(const_iterator pos, Integer n, Integer x, containers_detail::true_)
boost::container::deque::priv_insert_dispatch	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_insert_dispatch(const_iterator pos,InpIt first, InpIt last, containers_detail::false_) $/;"	f	class:boost::container::deque	access:private	signature:(const_iterator pos,InpIt first, InpIt last, containers_detail::false_)
boost::container::deque::priv_pop_back_aux	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_pop_back_aux()$/;"	f	class:boost::container::deque	access:private	signature:()
boost::container::deque::priv_pop_front_aux	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_pop_front_aux()$/;"	f	class:boost::container::deque	access:private	signature:()
boost::container::deque::priv_push_back	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_push_back(const value_type &t)$/;"	f	class:boost::container::deque	access:private	signature:(const value_type &t)
boost::container::deque::priv_push_back_simple_available	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   bool priv_push_back_simple_available() const$/;"	f	class:boost::container::deque	access:private	signature:() const
boost::container::deque::priv_push_back_simple_commit	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_push_back_simple_commit()$/;"	f	class:boost::container::deque	access:private	signature:()
boost::container::deque::priv_push_back_simple_pos	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void *priv_push_back_simple_pos() const$/;"	f	class:boost::container::deque	access:private	signature:() const
boost::container::deque::priv_push_front	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_push_front(const value_type &t)$/;"	f	class:boost::container::deque	access:private	signature:(const value_type &t)
boost::container::deque::priv_push_front_simple_available	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   bool priv_push_front_simple_available() const$/;"	f	class:boost::container::deque	access:private	signature:() const
boost::container::deque::priv_push_front_simple_commit	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_push_front_simple_commit()$/;"	f	class:boost::container::deque	access:private	signature:()
boost::container::deque::priv_push_front_simple_pos	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void *priv_push_front_simple_pos() const$/;"	f	class:boost::container::deque	access:private	signature:() const
boost::container::deque::priv_range_check	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_range_check(size_type n) const $/;"	f	class:boost::container::deque	access:public	signature:(size_type n) const
boost::container::deque::priv_range_initialize	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_range_initialize(FwdIt first, FwdIt last, std::forward_iterator_tag)$/;"	f	class:boost::container::deque	access:private	signature:(FwdIt first, FwdIt last, std::forward_iterator_tag)
boost::container::deque::priv_range_initialize	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_range_initialize(InpIt first, InpIt last, std::input_iterator_tag)$/;"	f	class:boost::container::deque	access:private	signature:(InpIt first, InpIt last, std::input_iterator_tag)
boost::container::deque::priv_reallocate_map	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_reallocate_map(size_type nodes_to_add, bool add_at_front)$/;"	f	class:boost::container::deque	access:private	signature:(size_type nodes_to_add, bool add_at_front)
boost::container::deque::priv_reserve_elements_at_back	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator priv_reserve_elements_at_back(size_type n) $/;"	f	class:boost::container::deque	access:private	signature:(size_type n)
boost::container::deque::priv_reserve_elements_at_front	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator priv_reserve_elements_at_front(size_type n) $/;"	f	class:boost::container::deque	access:private	signature:(size_type n)
boost::container::deque::ptr_alloc_cptr	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename ptr_alloc_t::const_pointer    ptr_alloc_cptr;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::ptr_alloc_cref	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename ptr_alloc_t::const_reference  ptr_alloc_cref;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::ptr_alloc_ptr	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename ptr_alloc_t::pointer          ptr_alloc_ptr;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::ptr_alloc_ref	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename ptr_alloc_t::reference        ptr_alloc_ref;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::ptr_alloc_t	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      rebind<val_alloc_ptr>::other                ptr_alloc_t;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::ptr_alloc_val	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename ptr_alloc_t::value_type       ptr_alloc_val;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::push_back	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void push_back(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::deque	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
boost::container::deque::push_back	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void push_back(insert_const_ref_type t)$/;"	f	class:boost::container::deque	access:public	signature:(insert_const_ref_type t)
boost::container::deque::push_back	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void push_back(T &x) { push_back(const_cast<const T &>(x)); }$/;"	f	class:boost::container::deque	access:public	signature:(T &x)
boost::container::deque::push_front	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void push_front(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::deque	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
boost::container::deque::push_front	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void push_front(insert_const_ref_type t)$/;"	f	class:boost::container::deque	access:public	signature:(insert_const_ref_type t)
boost::container::deque::push_front	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void push_front(T &x) { push_front(const_cast<const T &>(x)); }$/;"	f	class:boost::container::deque	access:public	signature:(T &x)
boost::container::deque::rbegin	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::deque	access:public	signature:() const
boost::container::deque::rbegin	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   reverse_iterator rbegin() $/;"	f	class:boost::container::deque	access:public	signature:()
boost::container::deque::reference	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef val_alloc_ref                        reference;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::rend	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_reverse_iterator rend() const $/;"	f	class:boost::container::deque	access:public	signature:() const
boost::container::deque::rend	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   reverse_iterator rend() $/;"	f	class:boost::container::deque	access:public	signature:()
boost::container::deque::resize	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void resize(size_type new_size) $/;"	f	class:boost::container::deque	access:public	signature:(size_type new_size)
boost::container::deque::resize	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void resize(size_type new_size, const value_type& x) $/;"	f	class:boost::container::deque	access:public	signature:(size_type new_size, const value_type& x)
boost::container::deque::reverse_iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef std::reverse_iterator<iterator>      reverse_iterator;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::r_iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef repeat_iterator<T, difference_type>  r_iterator;$/;"	t	class:boost::container::deque	access:private
boost::container::deque::size	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   size_type size() const $/;"	f	class:boost::container::deque	access:public	signature:() const
boost::container::deque::size_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef std::size_t                          size_type;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::swap	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void swap(deque &x)$/;"	f	class:boost::container::deque	access:public	signature:(deque &x)
boost::container::deque::s_buffer_size	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   static std::size_t s_buffer_size() $/;"	f	class:boost::container::deque	access:private	signature:()
boost::container::deque::value_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef T                                    value_type;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::val_alloc_cptr	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::const_pointer        val_alloc_cptr;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::val_alloc_cref	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::const_reference      val_alloc_cref;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::val_alloc_ptr	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::pointer              val_alloc_ptr;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::val_alloc_ref	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::reference            val_alloc_ref;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::val_alloc_val	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::value_type           val_alloc_val;$/;"	t	class:boost::container::deque	access:public
boost::container::deque::~deque	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   ~deque() $/;"	f	class:boost::container::deque	access:public	signature:()
boost::container::deque_base	/usr/include/boost/interprocess/containers/container/deque.hpp	/^class deque_base$/;"	c	namespace:boost::container
boost::container::deque_base::alloc	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   allocator_type &alloc() $/;"	f	class:boost::container::deque_base	access:protected	signature:()
boost::container::deque_base::alloc	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const allocator_type &alloc() const $/;"	f	class:boost::container::deque_base	access:protected	signature:() const
boost::container::deque_base::allocator_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      rebind<T>::other                             allocator_type;$/;"	t	class:boost::container::deque_base	access:public
boost::container::deque_base::const_iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   class const_iterator $/;"	c	class:boost::container::deque_base	inherits:std::iterator	access:public
boost::container::deque_base::const_iterator::const_iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      const_iterator() : m_cur(0), m_first(0), m_last(0), m_node(0) {}$/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:()
boost::container::deque_base::const_iterator::const_iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      const_iterator(const const_iterator& x)$/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(const const_iterator& x)
boost::container::deque_base::const_iterator::const_iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      const_iterator(val_alloc_ptr x, index_pointer y) $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(val_alloc_ptr x, index_pointer y)
boost::container::deque_base::const_iterator::difference_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef std::ptrdiff_t                    difference_type;$/;"	t	class:boost::container::deque_base::const_iterator	access:public
boost::container::deque_base::const_iterator::index_pointer	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef ptr_alloc_ptr                     index_pointer;$/;"	t	class:boost::container::deque_base::const_iterator	access:public
boost::container::deque_base::const_iterator::iterator_category	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef std::random_access_iterator_tag   iterator_category;$/;"	t	class:boost::container::deque_base::const_iterator	access:public
boost::container::deque_base::const_iterator::m_cur	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      val_alloc_ptr  m_cur;$/;"	m	class:boost::container::deque_base::const_iterator	access:protected
boost::container::deque_base::const_iterator::m_first	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      val_alloc_ptr  m_first;$/;"	m	class:boost::container::deque_base::const_iterator	access:protected
boost::container::deque_base::const_iterator::m_last	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      val_alloc_ptr  m_last;$/;"	m	class:boost::container::deque_base::const_iterator	access:protected
boost::container::deque_base::const_iterator::m_node	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      index_pointer  m_node;$/;"	m	class:boost::container::deque_base::const_iterator	access:protected
boost::container::deque_base::const_iterator::operator !=	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      bool operator!=(const self_t& x) const $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(const self_t& x) const
boost::container::deque_base::const_iterator::operator *	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      reference operator*() const $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:() const
boost::container::deque_base::const_iterator::operator +	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      friend const_iterator operator+(std::ptrdiff_t n, const const_iterator& x)$/;"	f	class:boost::container::deque_base::const_iterator	access:friend	signature:(std::ptrdiff_t n, const const_iterator& x)
boost::container::deque_base::const_iterator::operator +	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      self_t operator+(difference_type n) const$/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(difference_type n) const
boost::container::deque_base::const_iterator::operator ++	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      self_t operator++(int)  $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(int)
boost::container::deque_base::const_iterator::operator ++	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      self_t& operator++() $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:()
boost::container::deque_base::const_iterator::operator +=	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      self_t& operator+=(difference_type n)$/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(difference_type n)
boost::container::deque_base::const_iterator::operator -	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      difference_type operator-(const self_t& x) const $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(const self_t& x) const
boost::container::deque_base::const_iterator::operator -	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      self_t operator-(difference_type n) const $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(difference_type n) const
boost::container::deque_base::const_iterator::operator --	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      self_t operator--(int) $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(int)
boost::container::deque_base::const_iterator::operator --	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      self_t& operator--() $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:()
boost::container::deque_base::const_iterator::operator -=	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      self_t& operator-=(difference_type n) $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(difference_type n)
boost::container::deque_base::const_iterator::operator ->	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      pointer operator->() const $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:() const
boost::container::deque_base::const_iterator::operator <	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      bool operator<(const self_t& x) const $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(const self_t& x) const
boost::container::deque_base::const_iterator::operator <=	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      bool operator<=(const self_t& x) const $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(const self_t& x) const
boost::container::deque_base::const_iterator::operator ==	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      bool operator==(const self_t& x) const $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(const self_t& x) const
boost::container::deque_base::const_iterator::operator >	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      bool operator>(const self_t& x) const  $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(const self_t& x) const
boost::container::deque_base::const_iterator::operator >=	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      bool operator>=(const self_t& x) const $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(const self_t& x) const
boost::container::deque_base::const_iterator::operator []	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      reference operator[](difference_type n) const $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(difference_type n) const
boost::container::deque_base::const_iterator::pointer	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef val_alloc_cptr                    pointer;$/;"	t	class:boost::container::deque_base::const_iterator	access:public
boost::container::deque_base::const_iterator::priv_set_node	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      void priv_set_node(index_pointer new_node) $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(index_pointer new_node)
boost::container::deque_base::const_iterator::reference	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef val_alloc_cref                    reference;$/;"	t	class:boost::container::deque_base::const_iterator	access:public
boost::container::deque_base::const_iterator::self_t	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef const_iterator                    self_t;$/;"	t	class:boost::container::deque_base::const_iterator	access:public
boost::container::deque_base::const_iterator::size_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef std::size_t                       size_type;$/;"	t	class:boost::container::deque_base::const_iterator	access:public
boost::container::deque_base::const_iterator::s_buffer_size	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      static std::size_t s_buffer_size() { return deque_base<T, Alloc>::s_buffer_size(); }$/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:()
boost::container::deque_base::const_iterator::value_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef val_alloc_val                     value_type;$/;"	t	class:boost::container::deque_base::const_iterator	access:public
boost::container::deque_base::deque_base	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   deque_base(const allocator_type& a) $/;"	f	class:boost::container::deque_base	access:public	signature:(const allocator_type& a)
boost::container::deque_base::deque_base	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   deque_base(const allocator_type& a, std::size_t num_elements)$/;"	f	class:boost::container::deque_base	access:public	signature:(const allocator_type& a, std::size_t num_elements)
boost::container::deque_base::deque_base	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   deque_base(const deque_base&);$/;"	p	class:boost::container::deque_base	access:private	signature:(const deque_base&)
boost::container::deque_base::InitialMapSize	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   enum { InitialMapSize = 8 };$/;"	e	enum:boost::container::deque_base::__anon3
boost::container::deque_base::iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   class iterator : public const_iterator$/;"	c	class:boost::container::deque_base	inherits:const_iterator	access:public
boost::container::deque_base::iterator::difference_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef std::ptrdiff_t                    difference_type;$/;"	t	class:boost::container::deque_base::iterator	access:public
boost::container::deque_base::iterator::index_pointer	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef ptr_alloc_ptr                     index_pointer;$/;"	t	class:boost::container::deque_base::iterator	access:public
boost::container::deque_base::iterator::iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      explicit iterator(const const_iterator& x) : const_iterator(x){}$/;"	f	class:boost::container::deque_base::iterator	access:private	signature:(const const_iterator& x)
boost::container::deque_base::iterator::iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator() : const_iterator(){}$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:()
boost::container::deque_base::iterator::iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator(const iterator& x) : const_iterator(x){}$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:(const iterator& x)
boost::container::deque_base::iterator::iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator(val_alloc_ptr x, index_pointer y) : const_iterator(x, y){}$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:(val_alloc_ptr x, index_pointer y)
boost::container::deque_base::iterator::iterator_category	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef std::random_access_iterator_tag   iterator_category;$/;"	t	class:boost::container::deque_base::iterator	access:public
boost::container::deque_base::iterator::operator *	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      reference operator*() const { return *this->m_cur; }$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:() const
boost::container::deque_base::iterator::operator +	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      friend iterator operator+(difference_type off, const iterator& right)$/;"	f	class:boost::container::deque_base::iterator	access:friend	signature:(difference_type off, const iterator& right)
boost::container::deque_base::iterator::operator +	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator operator+(difference_type off) const$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:(difference_type off) const
boost::container::deque_base::iterator::operator ++	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator operator++(int)$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:(int)
boost::container::deque_base::iterator::operator ++	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator& operator++()  $/;"	f	class:boost::container::deque_base::iterator	access:public	signature:()
boost::container::deque_base::iterator::operator +=	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator& operator+=(difference_type off)$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:(difference_type off)
boost::container::deque_base::iterator::operator -	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      difference_type operator-(const const_iterator& right) const$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:(const const_iterator& right) const
boost::container::deque_base::iterator::operator -	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator operator-(difference_type off) const$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:(difference_type off) const
boost::container::deque_base::iterator::operator --	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator operator--(int)$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:(int)
boost::container::deque_base::iterator::operator --	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator& operator--()$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:()
boost::container::deque_base::iterator::operator -=	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator& operator-=(difference_type off)$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:(difference_type off)
boost::container::deque_base::iterator::operator ->	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      pointer operator->() const { return this->m_cur; }$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:() const
boost::container::deque_base::iterator::operator []	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      reference operator[](difference_type n) const { return *(*this + n); }$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:(difference_type n) const
boost::container::deque_base::iterator::pointer	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef val_alloc_ptr                     pointer;$/;"	t	class:boost::container::deque_base::iterator	access:public
boost::container::deque_base::iterator::reference	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef val_alloc_ref                     reference;$/;"	t	class:boost::container::deque_base::iterator	access:public
boost::container::deque_base::iterator::self_t	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef const_iterator                    self_t;$/;"	t	class:boost::container::deque_base::iterator	access:public
boost::container::deque_base::iterator::size_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef std::size_t                       size_type;$/;"	t	class:boost::container::deque_base::iterator	access:public
boost::container::deque_base::iterator::value_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef val_alloc_val                     value_type;$/;"	t	class:boost::container::deque_base::iterator	access:public
boost::container::deque_base::map_allocator_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      rebind<typename Alloc::pointer>::other map_allocator_type;$/;"	t	class:boost::container::deque_base	access:protected
boost::container::deque_base::members_	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   } members_;$/;"	m	class:boost::container::deque_base	typeref:struct:boost::container::deque_base::members_holder	access:protected
boost::container::deque_base::members_holder	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   struct members_holder$/;"	s	class:boost::container::deque_base	inherits:ptr_alloc_t,allocator_type	access:protected
boost::container::deque_base::members_holder::members_holder	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      members_holder(const allocator_type &a)$/;"	f	struct:boost::container::deque_base::members_holder	access:public	signature:(const allocator_type &a)
boost::container::deque_base::members_holder::m_finish	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator        m_finish;$/;"	m	struct:boost::container::deque_base::members_holder	access:public
boost::container::deque_base::members_holder::m_map	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      ptr_alloc_ptr   m_map;$/;"	m	struct:boost::container::deque_base::members_holder	access:public
boost::container::deque_base::members_holder::m_map_size	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      std::size_t     m_map_size;$/;"	m	struct:boost::container::deque_base::members_holder	access:public
boost::container::deque_base::members_holder::m_start	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator        m_start;$/;"	m	struct:boost::container::deque_base::members_holder	access:public
boost::container::deque_base::priv_allocate_map	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   ptr_alloc_ptr priv_allocate_map(std::size_t n) $/;"	f	class:boost::container::deque_base	access:protected	signature:(std::size_t n)
boost::container::deque_base::priv_allocate_node	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   val_alloc_ptr priv_allocate_node() $/;"	f	class:boost::container::deque_base	access:protected	signature:()
boost::container::deque_base::priv_create_nodes	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_create_nodes(ptr_alloc_ptr nstart, ptr_alloc_ptr nfinish)$/;"	f	class:boost::container::deque_base	access:protected	signature:(ptr_alloc_ptr nstart, ptr_alloc_ptr nfinish)
boost::container::deque_base::priv_deallocate_map	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_deallocate_map(ptr_alloc_ptr p, std::size_t n) $/;"	f	class:boost::container::deque_base	access:protected	signature:(ptr_alloc_ptr p, std::size_t n)
boost::container::deque_base::priv_deallocate_node	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_deallocate_node(val_alloc_ptr p) $/;"	f	class:boost::container::deque_base	access:protected	signature:(val_alloc_ptr p)
boost::container::deque_base::priv_destroy_nodes	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_destroy_nodes(ptr_alloc_ptr nstart, ptr_alloc_ptr nfinish)$/;"	f	class:boost::container::deque_base	access:protected	signature:(ptr_alloc_ptr nstart, ptr_alloc_ptr nfinish)
boost::container::deque_base::priv_initialize_map	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_initialize_map(std::size_t num_elements)$/;"	f	class:boost::container::deque_base	access:protected	signature:(std::size_t num_elements)
boost::container::deque_base::ptr_alloc	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const ptr_alloc_t &ptr_alloc() const $/;"	f	class:boost::container::deque_base	access:protected	signature:() const
boost::container::deque_base::ptr_alloc	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   ptr_alloc_t &ptr_alloc() $/;"	f	class:boost::container::deque_base	access:protected	signature:()
boost::container::deque_base::ptr_alloc_cptr	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename ptr_alloc_t::const_pointer     ptr_alloc_cptr;$/;"	t	class:boost::container::deque_base	access:public
boost::container::deque_base::ptr_alloc_cref	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename ptr_alloc_t::const_reference   ptr_alloc_cref;$/;"	t	class:boost::container::deque_base	access:public
boost::container::deque_base::ptr_alloc_ptr	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename ptr_alloc_t::pointer           ptr_alloc_ptr;$/;"	t	class:boost::container::deque_base	access:public
boost::container::deque_base::ptr_alloc_ref	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename ptr_alloc_t::reference         ptr_alloc_ref;$/;"	t	class:boost::container::deque_base	access:public
boost::container::deque_base::ptr_alloc_t	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      <typename Alloc::pointer>::other             ptr_alloc_t;$/;"	t	class:boost::container::deque_base	access:public
boost::container::deque_base::ptr_alloc_val	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename ptr_alloc_t::value_type        ptr_alloc_val;$/;"	t	class:boost::container::deque_base	access:public
boost::container::deque_base::stored_allocator_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef allocator_type                          stored_allocator_type;$/;"	t	class:boost::container::deque_base	access:public
boost::container::deque_base::s_buffer_size	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   static std::size_t s_buffer_size() { return deque_buf_size(sizeof(T)); }$/;"	f	class:boost::container::deque_base	access:protected	signature:()
boost::container::deque_base::traits_t	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef deque_value_traits<T, Alloc>            traits_t;$/;"	t	class:boost::container::deque_base	access:protected
boost::container::deque_base::val_alloc_cptr	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::const_pointer           val_alloc_cptr;$/;"	t	class:boost::container::deque_base	access:public
boost::container::deque_base::val_alloc_cref	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::const_reference         val_alloc_cref;$/;"	t	class:boost::container::deque_base	access:public
boost::container::deque_base::val_alloc_diff	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::value_type              val_alloc_diff;$/;"	t	class:boost::container::deque_base	access:public
boost::container::deque_base::val_alloc_ptr	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::pointer                 val_alloc_ptr;$/;"	t	class:boost::container::deque_base	access:public
boost::container::deque_base::val_alloc_ref	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::reference               val_alloc_ref;$/;"	t	class:boost::container::deque_base	access:public
boost::container::deque_base::val_alloc_val	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::value_type              val_alloc_val;$/;"	t	class:boost::container::deque_base	access:public
boost::container::deque_base::~deque_base	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   ~deque_base()$/;"	f	class:boost::container::deque_base	access:public	signature:()
boost::container::deque_buf_size	/usr/include/boost/interprocess/containers/container/deque.hpp	/^inline std::size_t deque_buf_size(std::size_t size) $/;"	f	namespace:boost::container	signature:(std::size_t size)
boost::container::deque_value_traits	/usr/include/boost/interprocess/containers/container/deque.hpp	/^struct deque_value_traits$/;"	s	namespace:boost::container
boost::container::deque_value_traits::allocator_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef A allocator_type;$/;"	t	struct:boost::container::deque_value_traits	access:public
boost::container::deque_value_traits::nothrow_assign	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   static const bool nothrow_assign = has_nothrow_assign<value_type>::value;$/;"	m	struct:boost::container::deque_value_traits	access:public
boost::container::deque_value_traits::nothrow_copy	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   static const bool nothrow_copy = has_nothrow_copy<value_type>::value;$/;"	m	struct:boost::container::deque_value_traits	access:public
boost::container::deque_value_traits::trivial_assign	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   static const bool trivial_assign = has_trivial_assign<value_type>::value;$/;"	m	struct:boost::container::deque_value_traits	access:public
boost::container::deque_value_traits::trivial_copy	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   static const bool trivial_copy = has_trivial_copy<value_type>::value;$/;"	m	struct:boost::container::deque_value_traits	access:public
boost::container::deque_value_traits::trivial_dctr	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   static const bool trivial_dctr = boost::has_trivial_destructor<value_type>::value;$/;"	m	struct:boost::container::deque_value_traits	access:public
boost::container::deque_value_traits::trivial_dctr_after_move	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   static const bool trivial_dctr_after_move = false;$/;"	m	struct:boost::container::deque_value_traits	access:public
boost::container::deque_value_traits::value_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef T value_type;$/;"	t	struct:boost::container::deque_value_traits	access:public
boost::container::detail_really_deep_namespace	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^namespace detail_really_deep_namespace {$/;"	n	namespace:boost::container
boost::container::detail_really_deep_namespace::dummy	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^struct dummy$/;"	s	namespace:boost::container::detail_really_deep_namespace
boost::container::detail_really_deep_namespace::dummy::dummy	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^   dummy()$/;"	f	struct:boost::container::detail_really_deep_namespace::dummy	access:public	signature:()
boost::container::emplace_functor	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^struct emplace_functor$/;"	s	namespace:boost::container
boost::container::emplace_functor::args_	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   containers_detail::tuple<Args&&...> args_;$/;"	m	struct:boost::container::emplace_functor	access:public
boost::container::emplace_functor::emplace_functor	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   emplace_functor()$/;"	f	struct:boost::container::emplace_functor	access:public	signature:()
boost::container::emplace_functor::emplace_functor	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   emplace_functor(Args&&... args)$/;"	f	struct:boost::container::emplace_functor	access:public	signature:(Args&&.... args)
boost::container::emplace_functor::index_tuple_t	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   typedef typename containers_detail::build_number_seq<sizeof...(Args)>::type index_tuple_t;$/;"	t	struct:boost::container::emplace_functor	access:public
boost::container::emplace_functor::inplace_impl	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void inplace_impl(T* ptr, const containers_detail::index_tuple<IdxPack...>&)$/;"	f	struct:boost::container::emplace_functor	access:public	signature:(T* ptr, const containers_detail::index_tuple<IdxPack...>&)
boost::container::emplace_functor::operator ()	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void operator()(T *ptr)$/;"	f	struct:boost::container::emplace_functor	access:public	signature:(T *ptr)
boost::container::emplace_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^class emplace_iterator$/;"	c	namespace:boost::container	inherits:std::iterator
boost::container::emplace_iterator::advance	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void advance(std::ptrdiff_t n)$/;"	f	class:boost::container::emplace_iterator	access:private	signature:(std::ptrdiff_t n)
boost::container::emplace_iterator::construct_in_place	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void construct_in_place(T* ptr)$/;"	f	class:boost::container::emplace_iterator	access:public	signature:(T* ptr)
boost::container::emplace_iterator::decrement	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void decrement()$/;"	f	class:boost::container::emplace_iterator	access:private	signature:()
boost::container::emplace_iterator::dereference	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   const T & dereference() const$/;"	f	class:boost::container::emplace_iterator	access:private	signature:() const
boost::container::emplace_iterator::distance_to	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   std::ptrdiff_t distance_to(const this_type &other)const$/;"	f	class:boost::container::emplace_iterator	access:private	signature:(const this_type &other) const
boost::container::emplace_iterator::emplace_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   emplace_iterator()$/;"	f	class:boost::container::emplace_iterator	access:public	signature:()
boost::container::emplace_iterator::emplace_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   explicit emplace_iterator(E&e)$/;"	f	class:boost::container::emplace_iterator	access:public	signature:(E&e)
boost::container::emplace_iterator::equal	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   bool equal(const this_type &other) const$/;"	f	class:boost::container::emplace_iterator	access:private	signature:(const this_type &other) const
boost::container::emplace_iterator::increment	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void increment()$/;"	f	class:boost::container::emplace_iterator	access:private	signature:()
boost::container::emplace_iterator::less	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   bool less(const this_type &other) const$/;"	f	class:boost::container::emplace_iterator	access:private	signature:(const this_type &other) const
boost::container::emplace_iterator::m_num	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   std::ptrdiff_t m_num;$/;"	m	class:boost::container::emplace_iterator	access:private
boost::container::emplace_iterator::m_pe	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   E *            m_pe;$/;"	m	class:boost::container::emplace_iterator	access:private
boost::container::emplace_iterator::operator !=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator!= (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::emplace_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
boost::container::emplace_iterator::operator *	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   const T& operator*() const$/;"	f	class:boost::container::emplace_iterator	access:public	signature:() const
boost::container::emplace_iterator::operator +	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend this_type operator+(std::ptrdiff_t off, const this_type& right)$/;"	f	class:boost::container::emplace_iterator	access:friend	signature:(std::ptrdiff_t off, const this_type& right)
boost::container::emplace_iterator::operator +	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type operator+(std::ptrdiff_t off) const$/;"	f	class:boost::container::emplace_iterator	access:public	signature:(std::ptrdiff_t off) const
boost::container::emplace_iterator::operator ++	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type operator++(int)$/;"	f	class:boost::container::emplace_iterator	access:public	signature:(int)
boost::container::emplace_iterator::operator ++	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type& operator++() $/;"	f	class:boost::container::emplace_iterator	access:public	signature:()
boost::container::emplace_iterator::operator +=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type& operator+=(std::ptrdiff_t off)$/;"	f	class:boost::container::emplace_iterator	access:public	signature:(std::ptrdiff_t off)
boost::container::emplace_iterator::operator -	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend std::ptrdiff_t operator- (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::emplace_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
boost::container::emplace_iterator::operator -	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type operator-(std::ptrdiff_t off) const$/;"	f	class:boost::container::emplace_iterator	access:public	signature:(std::ptrdiff_t off) const
boost::container::emplace_iterator::operator -=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type& operator-=(std::ptrdiff_t off)$/;"	f	class:boost::container::emplace_iterator	access:public	signature:(std::ptrdiff_t off)
boost::container::emplace_iterator::operator ->	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   const T* operator->() const$/;"	f	class:boost::container::emplace_iterator	access:public	signature:() const
boost::container::emplace_iterator::operator <	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator< (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::emplace_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
boost::container::emplace_iterator::operator <=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator<= (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::emplace_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
boost::container::emplace_iterator::operator ==	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator== (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::emplace_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
boost::container::emplace_iterator::operator >	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator> (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::emplace_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
boost::container::emplace_iterator::operator >=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator>= (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::emplace_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
boost::container::emplace_iterator::this_type	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   typedef emplace_iterator this_type;$/;"	t	class:boost::container::emplace_iterator	access:private
boost::container::expand_bwd	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^static const allocation_type expand_bwd         = (allocation_type)expand_bwd_v;$/;"	m	namespace:boost::container
boost::container::expand_bwd_v	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^   expand_bwd_v     = 0x04,$/;"	e	enum:boost::container::allocation_type_v
boost::container::expand_fwd	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^static const allocation_type expand_fwd         = (allocation_type)expand_fwd_v;$/;"	m	namespace:boost::container
boost::container::expand_fwd_v	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^   expand_fwd_v     = 0x02,$/;"	e	enum:boost::container::allocation_type_v
boost::container::flat_map	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^class flat_map $/;"	c	namespace:boost::container
boost::container::flat_map::allocator_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::allocator_type         allocator_type;$/;"	t	class:boost::container::flat_map	access:public
boost::container::flat_map::at	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const T& at(const key_type& k) const$/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& k) const
boost::container::flat_map::at	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   T& at(const key_type& k)$/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& k)
boost::container::flat_map::begin	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
boost::container::flat_map::begin	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator begin() $/;"	f	class:boost::container::flat_map	access:public	signature:()
boost::container::flat_map::capacity	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   size_type capacity() const           $/;"	f	class:boost::container::flat_map	access:public	signature:() const
boost::container::flat_map::cbegin	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator cbegin() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
boost::container::flat_map::cend	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator cend() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
boost::container::flat_map::clear	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   void clear() $/;"	f	class:boost::container::flat_map	access:public	signature:()
boost::container::flat_map::const_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::const_iterator         const_iterator;$/;"	t	class:boost::container::flat_map	access:public
boost::container::flat_map::const_pointer	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::const_pointer          const_pointer;$/;"	t	class:boost::container::flat_map	access:public
boost::container::flat_map::const_reference	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::const_reference        const_reference;$/;"	t	class:boost::container::flat_map	access:public
boost::container::flat_map::const_reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::container::flat_map	access:public
boost::container::flat_map::count	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   size_type count(const key_type& x) const $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& x) const
boost::container::flat_map::crbegin	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_reverse_iterator crbegin() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
boost::container::flat_map::crend	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_reverse_iterator crend() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
boost::container::flat_map::difference_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::difference_type        difference_type;$/;"	t	class:boost::container::flat_map	access:public
boost::container::flat_map::emplace	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator emplace()$/;"	f	class:boost::container::flat_map	access:public	signature:()
boost::container::flat_map::emplace	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator emplace(Args&&... args)$/;"	f	class:boost::container::flat_map	access:public	signature:(Args&&.... args)
boost::container::flat_map::emplace_hint	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator emplace_hint(const_iterator hint)$/;"	f	class:boost::container::flat_map	access:public	signature:(const_iterator hint)
boost::container::flat_map::emplace_hint	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator emplace_hint(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::flat_map	access:public	signature:(const_iterator hint, Args&&... args)
boost::container::flat_map::empty	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   bool empty() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
boost::container::flat_map::end	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
boost::container::flat_map::end	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator end() $/;"	f	class:boost::container::flat_map	access:public	signature:()
boost::container::flat_map::equal_range	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   std::pair<const_iterator,const_iterator> equal_range(const key_type& x) const $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& x) const
boost::container::flat_map::equal_range	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   std::pair<iterator,iterator> equal_range(const key_type& x) $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& x)
boost::container::flat_map::erase	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::flat_map	access:public	signature:(const_iterator first, const_iterator last)
boost::container::flat_map::erase	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator erase(const_iterator position) $/;"	f	class:boost::container::flat_map	access:public	signature:(const_iterator position)
boost::container::flat_map::erase	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   size_type erase(const key_type& x) $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& x)
boost::container::flat_map::find	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator find(const key_type& x) const $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& x) const
boost::container::flat_map::find	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator find(const key_type& x) $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& x)
boost::container::flat_map::flat_map	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   explicit flat_map(const Pred& comp = Pred(), const allocator_type& a = allocator_type()) $/;"	f	class:boost::container::flat_map	access:public	signature:(const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::flat_map::flat_map	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   flat_map( ordered_unique_range_t, InputIterator first, InputIterator last$/;"	f	class:boost::container::flat_map	access:public	signature:( ordered_unique_range_t, InputIterator first, InputIterator last , const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::flat_map::flat_map	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   flat_map(const flat_map<Key,T,Pred,Alloc>& x) $/;"	f	class:boost::container::flat_map	access:public	signature:(const flat_map<Key,T,Pred,Alloc>& x)
boost::container::flat_map::flat_map	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   flat_map(InputIterator first, InputIterator last, const Pred& comp = Pred(),$/;"	f	class:boost::container::flat_map	access:public	signature:(InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::flat_map::force	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   static D &force(const S &s)$/;"	f	class:boost::container::flat_map	access:private	signature:(const S &s)
boost::container::flat_map::force_copy	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   static D force_copy(S s)$/;"	f	class:boost::container::flat_map	access:private	signature:(S s)
boost::container::flat_map::get_allocator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
boost::container::flat_map::get_stored_allocator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
boost::container::flat_map::get_stored_allocator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::flat_map	access:public	signature:()
boost::container::flat_map::impl_allocator_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::allocator_type          impl_allocator_type;$/;"	t	class:boost::container::flat_map	access:private
boost::container::flat_map::impl_const_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::const_iterator          impl_const_iterator;$/;"	t	class:boost::container::flat_map	access:private
boost::container::flat_map::impl_const_pointer	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::const_pointer           impl_const_pointer;$/;"	t	class:boost::container::flat_map	access:private
boost::container::flat_map::impl_const_reference	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::const_reference         impl_const_reference;$/;"	t	class:boost::container::flat_map	access:private
boost::container::flat_map::impl_const_reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::const_reverse_iterator  impl_const_reverse_iterator;$/;"	t	class:boost::container::flat_map	access:private
boost::container::flat_map::impl_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::iterator                impl_iterator;$/;"	t	class:boost::container::flat_map	access:private
boost::container::flat_map::impl_pointer	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::pointer                 impl_pointer;$/;"	t	class:boost::container::flat_map	access:private
boost::container::flat_map::impl_reference	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::reference               impl_reference;$/;"	t	class:boost::container::flat_map	access:private
boost::container::flat_map::impl_reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::reverse_iterator        impl_reverse_iterator;$/;"	t	class:boost::container::flat_map	access:private
boost::container::flat_map::impl_tree_t	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^                              rebind<containers_detail::pair<Key, T> >::other> impl_tree_t;$/;"	t	class:boost::container::flat_map	access:private
boost::container::flat_map::impl_value_compare	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::value_compare           impl_value_compare;$/;"	t	class:boost::container::flat_map	access:private
boost::container::flat_map::impl_value_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::value_type              impl_value_type;$/;"	t	class:boost::container::flat_map	access:private
boost::container::flat_map::insert	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator insert(const_iterator position, BOOST_INTERPROCESS_RV_REF(impl_value_type) x)$/;"	f	class:boost::container::flat_map	access:public	signature:(const_iterator position, BOOST_INTERPROCESS_RV_REF(impl_value_type) x)
boost::container::flat_map::insert	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator insert(const_iterator position, BOOST_INTERPROCESS_RV_REF(value_type) x)$/;"	f	class:boost::container::flat_map	access:public	signature:(const_iterator position, BOOST_INTERPROCESS_RV_REF(value_type) x)
boost::container::flat_map::insert	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator insert(const_iterator position, const value_type& x)$/;"	f	class:boost::container::flat_map	access:public	signature:(const_iterator position, const value_type& x)
boost::container::flat_map::insert	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   std::pair<iterator,bool> insert(const value_type& x) $/;"	f	class:boost::container::flat_map	access:public	signature:(const value_type& x)
boost::container::flat_map::insert	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   void insert(InputIterator first, InputIterator last) $/;"	f	class:boost::container::flat_map	access:public	signature:(InputIterator first, InputIterator last)
boost::container::flat_map::iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::iterator               iterator;$/;"	t	class:boost::container::flat_map	access:public
boost::container::flat_map::key_comp	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   key_compare key_comp() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
boost::container::flat_map::key_compare	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::key_compare            key_compare;$/;"	t	class:boost::container::flat_map	access:public
boost::container::flat_map::key_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::key_type               key_type;$/;"	t	class:boost::container::flat_map	access:public
boost::container::flat_map::lower_bound	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator lower_bound(const key_type& x) const $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& x) const
boost::container::flat_map::lower_bound	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator lower_bound(const key_type& x) $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& x)
boost::container::flat_map::mapped_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef T                                       mapped_type;$/;"	t	class:boost::container::flat_map	access:public
boost::container::flat_map::max_size	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
boost::container::flat_map::move	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^      : m_flat_tree(boost::interprocess::move(x.m_flat_tree))$/;"	f	class:boost::container::flat_map	access:public	signature:(x.m_flat_tree)
boost::container::flat_map::m_flat_tree	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   impl_tree_t m_flat_tree;  \/\/ flat tree representing flat_map$/;"	m	class:boost::container::flat_map	access:private
boost::container::flat_map::operator <	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   friend bool operator< (const flat_map<K1, T1, C1, A1>&,$/;"	p	class:boost::container::flat_map	access:friend	signature:(const flat_map<K1, T1, C1, A1>&, const flat_map<K1, T1, C1, A1>&)
boost::container::flat_map::operator ==	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   friend bool operator== (const flat_map<K1, T1, C1, A1>&,$/;"	p	class:boost::container::flat_map	access:friend	signature:(const flat_map<K1, T1, C1, A1>&, const flat_map<K1, T1, C1, A1>&)
boost::container::flat_map::operator []	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   T &operator[](const key_type& k) $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& k)
boost::container::flat_map::pointer	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::pointer                pointer;$/;"	t	class:boost::container::flat_map	access:public
boost::container::flat_map::rbegin	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
boost::container::flat_map::rbegin	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   reverse_iterator rbegin() $/;"	f	class:boost::container::flat_map	access:public	signature:()
boost::container::flat_map::reference	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::reference              reference;$/;"	t	class:boost::container::flat_map	access:public
boost::container::flat_map::rend	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_reverse_iterator rend() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
boost::container::flat_map::rend	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   reverse_iterator rend() $/;"	f	class:boost::container::flat_map	access:public	signature:()
boost::container::flat_map::reserve	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   void reserve(size_type count)       $/;"	f	class:boost::container::flat_map	access:public	signature:(size_type count)
boost::container::flat_map::reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::reverse_iterator       reverse_iterator;$/;"	t	class:boost::container::flat_map	access:public
boost::container::flat_map::shrink_to_fit	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::container::flat_map	access:public	signature:()
boost::container::flat_map::size	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   size_type size() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
boost::container::flat_map::size_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::size_type              size_type;$/;"	t	class:boost::container::flat_map	access:public
boost::container::flat_map::stored_allocator_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::stored_allocator_type  stored_allocator_type;$/;"	t	class:boost::container::flat_map	access:public
boost::container::flat_map::swap	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   void swap(flat_map& x)$/;"	f	class:boost::container::flat_map	access:public	signature:(flat_map& x)
boost::container::flat_map::tree_t	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^                           Alloc> tree_t;$/;"	t	class:boost::container::flat_map	access:private
boost::container::flat_map::upper_bound	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator upper_bound(const key_type& x) const $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& x) const
boost::container::flat_map::upper_bound	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator upper_bound(const key_type& x) $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& x)
boost::container::flat_map::value_comp	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   value_compare value_comp() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
boost::container::flat_map::value_compare	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::value_compare          value_compare;$/;"	t	class:boost::container::flat_map	access:public
boost::container::flat_map::value_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::value_type             value_type;$/;"	t	class:boost::container::flat_map	access:public
boost::container::flat_multimap	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^class flat_multimap $/;"	c	namespace:boost::container
boost::container::flat_multimap::allocator_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::allocator_type         allocator_type;$/;"	t	class:boost::container::flat_multimap	access:public
boost::container::flat_multimap::begin	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
boost::container::flat_multimap::begin	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator begin() $/;"	f	class:boost::container::flat_multimap	access:public	signature:()
boost::container::flat_multimap::capacity	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   size_type capacity() const           $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
boost::container::flat_multimap::clear	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   void clear() $/;"	f	class:boost::container::flat_multimap	access:public	signature:()
boost::container::flat_multimap::const_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::const_iterator         const_iterator;$/;"	t	class:boost::container::flat_multimap	access:public
boost::container::flat_multimap::const_pointer	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::const_pointer          const_pointer;$/;"	t	class:boost::container::flat_multimap	access:public
boost::container::flat_multimap::const_reference	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::const_reference        const_reference;$/;"	t	class:boost::container::flat_multimap	access:public
boost::container::flat_multimap::const_reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::container::flat_multimap	access:public
boost::container::flat_multimap::count	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   size_type count(const key_type& x) const $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const key_type& x) const
boost::container::flat_multimap::difference_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::difference_type        difference_type;$/;"	t	class:boost::container::flat_multimap	access:public
boost::container::flat_multimap::emplace	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator emplace()$/;"	f	class:boost::container::flat_multimap	access:public	signature:()
boost::container::flat_multimap::emplace	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator emplace(Args&&... args)$/;"	f	class:boost::container::flat_multimap	access:public	signature:(Args&&.... args)
boost::container::flat_multimap::emplace_hint	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator emplace_hint(const_iterator hint)$/;"	f	class:boost::container::flat_multimap	access:public	signature:(const_iterator hint)
boost::container::flat_multimap::emplace_hint	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator emplace_hint(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::flat_multimap	access:public	signature:(const_iterator hint, Args&&... args)
boost::container::flat_multimap::empty	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   bool empty() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
boost::container::flat_multimap::end	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
boost::container::flat_multimap::end	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator end() $/;"	f	class:boost::container::flat_multimap	access:public	signature:()
boost::container::flat_multimap::equal_range	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^      equal_range(const key_type& x) const $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const key_type& x) const
boost::container::flat_multimap::equal_range	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   std::pair<iterator,iterator> equal_range(const key_type& x) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const key_type& x)
boost::container::flat_multimap::erase	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::flat_multimap	access:public	signature:(const_iterator first, const_iterator last)
boost::container::flat_multimap::erase	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator erase(const_iterator position) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const_iterator position)
boost::container::flat_multimap::erase	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   size_type erase(const key_type& x) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const key_type& x)
boost::container::flat_multimap::find	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator find(const key_type& x) const $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const key_type& x) const
boost::container::flat_multimap::find	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator find(const key_type& x)$/;"	f	class:boost::container::flat_multimap	access:public	signature:(const key_type& x)
boost::container::flat_multimap::flat_multimap	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   explicit flat_multimap(const Pred& comp = Pred(),$/;"	f	class:boost::container::flat_multimap	access:public	signature:(const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::flat_multimap::flat_multimap	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   flat_multimap(const flat_multimap<Key,T,Pred,Alloc>& x) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const flat_multimap<Key,T,Pred,Alloc>& x)
boost::container::flat_multimap::flat_multimap	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   flat_multimap(InputIterator first, InputIterator last,$/;"	f	class:boost::container::flat_multimap	access:public	signature:(InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::flat_multimap::flat_multimap	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   flat_multimap(ordered_range_t, InputIterator first, InputIterator last,$/;"	f	class:boost::container::flat_multimap	access:public	signature:(ordered_range_t, InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::flat_multimap::force	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   static D &force(const S &s)$/;"	f	class:boost::container::flat_multimap	access:private	signature:(const S &s)
boost::container::flat_multimap::force_copy	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   static D force_copy(S s)$/;"	f	class:boost::container::flat_multimap	access:private	signature:(S s)
boost::container::flat_multimap::get_allocator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
boost::container::flat_multimap::get_stored_allocator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
boost::container::flat_multimap::get_stored_allocator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::flat_multimap	access:public	signature:()
boost::container::flat_multimap::impl_allocator_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::allocator_type          impl_allocator_type;$/;"	t	class:boost::container::flat_multimap	access:private
boost::container::flat_multimap::impl_const_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::const_iterator          impl_const_iterator;$/;"	t	class:boost::container::flat_multimap	access:private
boost::container::flat_multimap::impl_const_pointer	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::const_pointer           impl_const_pointer;$/;"	t	class:boost::container::flat_multimap	access:private
boost::container::flat_multimap::impl_const_reference	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::const_reference         impl_const_reference;$/;"	t	class:boost::container::flat_multimap	access:private
boost::container::flat_multimap::impl_const_reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::const_reverse_iterator  impl_const_reverse_iterator;$/;"	t	class:boost::container::flat_multimap	access:private
boost::container::flat_multimap::impl_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::iterator                impl_iterator;$/;"	t	class:boost::container::flat_multimap	access:private
boost::container::flat_multimap::impl_pointer	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::pointer                 impl_pointer;$/;"	t	class:boost::container::flat_multimap	access:private
boost::container::flat_multimap::impl_reference	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::reference               impl_reference;$/;"	t	class:boost::container::flat_multimap	access:private
boost::container::flat_multimap::impl_reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::reverse_iterator        impl_reverse_iterator;$/;"	t	class:boost::container::flat_multimap	access:private
boost::container::flat_multimap::impl_tree_t	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^                              rebind<containers_detail::pair<Key, T> >::other> impl_tree_t;$/;"	t	class:boost::container::flat_multimap	access:private
boost::container::flat_multimap::impl_value_compare	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::value_compare           impl_value_compare;$/;"	t	class:boost::container::flat_multimap	access:private
boost::container::flat_multimap::impl_value_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::value_type              impl_value_type;$/;"	t	class:boost::container::flat_multimap	access:private
boost::container::flat_multimap::insert	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator insert(const value_type& x) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const value_type& x)
boost::container::flat_multimap::insert	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator insert(const_iterator position, BOOST_INTERPROCESS_RV_REF(impl_value_type) x) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const_iterator position, BOOST_INTERPROCESS_RV_REF(impl_value_type) x)
boost::container::flat_multimap::insert	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator insert(const_iterator position, BOOST_INTERPROCESS_RV_REF(value_type) x) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const_iterator position, BOOST_INTERPROCESS_RV_REF(value_type) x)
boost::container::flat_multimap::insert	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator insert(const_iterator position, const value_type& x) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const_iterator position, const value_type& x)
boost::container::flat_multimap::insert	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   void insert(InputIterator first, InputIterator last) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(InputIterator first, InputIterator last)
boost::container::flat_multimap::iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::iterator               iterator;$/;"	t	class:boost::container::flat_multimap	access:public
boost::container::flat_multimap::key_comp	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   key_compare key_comp() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
boost::container::flat_multimap::key_compare	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::key_compare            key_compare;$/;"	t	class:boost::container::flat_multimap	access:public
boost::container::flat_multimap::key_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::key_type               key_type;$/;"	t	class:boost::container::flat_multimap	access:public
boost::container::flat_multimap::lower_bound	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator lower_bound(const key_type& x) const $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const key_type& x) const
boost::container::flat_multimap::lower_bound	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator lower_bound(const key_type& x) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const key_type& x)
boost::container::flat_multimap::mapped_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef T                                       mapped_type;$/;"	t	class:boost::container::flat_multimap	access:public
boost::container::flat_multimap::max_size	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
boost::container::flat_multimap::move	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^      : m_flat_tree(boost::interprocess::move(x.m_flat_tree))$/;"	f	class:boost::container::flat_multimap	access:public	signature:(x.m_flat_tree)
boost::container::flat_multimap::m_flat_tree	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   impl_tree_t m_flat_tree;  \/\/ flat tree representing flat_map$/;"	m	class:boost::container::flat_multimap	access:private
boost::container::flat_multimap::operator <	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   friend bool operator< (const flat_multimap<K1, T1, C1, A1>& x,$/;"	p	class:boost::container::flat_multimap	access:friend	signature:(const flat_multimap<K1, T1, C1, A1>& x, const flat_multimap<K1, T1, C1, A1>& y)
boost::container::flat_multimap::operator ==	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   friend bool operator== (const flat_multimap<K1, T1, C1, A1>& x,$/;"	p	class:boost::container::flat_multimap	access:friend	signature:(const flat_multimap<K1, T1, C1, A1>& x, const flat_multimap<K1, T1, C1, A1>& y)
boost::container::flat_multimap::pointer	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::pointer                pointer;$/;"	t	class:boost::container::flat_multimap	access:public
boost::container::flat_multimap::rbegin	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
boost::container::flat_multimap::rbegin	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   reverse_iterator rbegin() $/;"	f	class:boost::container::flat_multimap	access:public	signature:()
boost::container::flat_multimap::reference	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::reference              reference;$/;"	t	class:boost::container::flat_multimap	access:public
boost::container::flat_multimap::rend	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_reverse_iterator rend() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
boost::container::flat_multimap::rend	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   reverse_iterator rend() $/;"	f	class:boost::container::flat_multimap	access:public	signature:()
boost::container::flat_multimap::reserve	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   void reserve(size_type count)       $/;"	f	class:boost::container::flat_multimap	access:public	signature:(size_type count)
boost::container::flat_multimap::reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::reverse_iterator       reverse_iterator;$/;"	t	class:boost::container::flat_multimap	access:public
boost::container::flat_multimap::shrink_to_fit	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::container::flat_multimap	access:public	signature:()
boost::container::flat_multimap::size	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   size_type size() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
boost::container::flat_multimap::size_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::size_type              size_type;$/;"	t	class:boost::container::flat_multimap	access:public
boost::container::flat_multimap::stored_allocator_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::stored_allocator_type  stored_allocator_type;$/;"	t	class:boost::container::flat_multimap	access:public
boost::container::flat_multimap::swap	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   void swap(flat_multimap& x)$/;"	f	class:boost::container::flat_multimap	access:public	signature:(flat_multimap& x)
boost::container::flat_multimap::tree_t	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^                           Alloc> tree_t;$/;"	t	class:boost::container::flat_multimap	access:private
boost::container::flat_multimap::upper_bound	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator upper_bound(const key_type& x) const $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const key_type& x) const
boost::container::flat_multimap::upper_bound	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator upper_bound(const key_type& x) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const key_type& x)
boost::container::flat_multimap::value_comp	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   value_compare value_comp() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
boost::container::flat_multimap::value_compare	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::value_compare          value_compare;$/;"	t	class:boost::container::flat_multimap	access:public
boost::container::flat_multimap::value_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::value_type             value_type;$/;"	t	class:boost::container::flat_multimap	access:public
boost::container::flat_multiset	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^class flat_multiset $/;"	c	namespace:boost::container
boost::container::flat_multiset::allocator_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::allocator_type         allocator_type;$/;"	t	class:boost::container::flat_multiset	access:public
boost::container::flat_multiset::begin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
boost::container::flat_multiset::begin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator begin() $/;"	f	class:boost::container::flat_multiset	access:public	signature:()
boost::container::flat_multiset::capacity	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   size_type capacity() const           $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
boost::container::flat_multiset::cbegin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator cbegin() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
boost::container::flat_multiset::cend	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator cend() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
boost::container::flat_multiset::clear	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   void clear() $/;"	f	class:boost::container::flat_multiset	access:public	signature:()
boost::container::flat_multiset::const_iterator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::const_iterator         const_iterator;$/;"	t	class:boost::container::flat_multiset	access:public
boost::container::flat_multiset::const_pointer	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::const_pointer          const_pointer;$/;"	t	class:boost::container::flat_multiset	access:public
boost::container::flat_multiset::const_reference	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::const_reference        const_reference;$/;"	t	class:boost::container::flat_multiset	access:public
boost::container::flat_multiset::const_reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::container::flat_multiset	access:public
boost::container::flat_multiset::count	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   size_type count(const key_type& x) const $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const key_type& x) const
boost::container::flat_multiset::crbegin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_reverse_iterator crbegin() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
boost::container::flat_multiset::crend	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_reverse_iterator crend() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
boost::container::flat_multiset::difference_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::difference_type        difference_type;$/;"	t	class:boost::container::flat_multiset	access:public
boost::container::flat_multiset::emplace	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator emplace()$/;"	f	class:boost::container::flat_multiset	access:public	signature:()
boost::container::flat_multiset::emplace	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator emplace(Args&&... args)$/;"	f	class:boost::container::flat_multiset	access:public	signature:(Args&&.... args)
boost::container::flat_multiset::emplace_hint	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator emplace_hint(const_iterator hint)$/;"	f	class:boost::container::flat_multiset	access:public	signature:(const_iterator hint)
boost::container::flat_multiset::emplace_hint	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator emplace_hint(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::flat_multiset	access:public	signature:(const_iterator hint, Args&&... args)
boost::container::flat_multiset::empty	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   bool empty() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
boost::container::flat_multiset::end	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
boost::container::flat_multiset::end	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator end() $/;"	f	class:boost::container::flat_multiset	access:public	signature:()
boost::container::flat_multiset::equal_range	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^      equal_range(const key_type& x) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const key_type& x)
boost::container::flat_multiset::equal_range	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^      equal_range(const key_type& x) const $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const key_type& x) const
boost::container::flat_multiset::erase	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator erase(const_iterator first, const_iterator last) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const_iterator first, const_iterator last)
boost::container::flat_multiset::erase	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator erase(const_iterator position) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const_iterator position)
boost::container::flat_multiset::erase	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   size_type erase(const key_type& x) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const key_type& x)
boost::container::flat_multiset::find	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator find(const key_type& x) const $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const key_type& x) const
boost::container::flat_multiset::find	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator find(const key_type& x) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const key_type& x)
boost::container::flat_multiset::flat_multiset	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   explicit flat_multiset(const Pred& comp = Pred(),$/;"	f	class:boost::container::flat_multiset	access:public	signature:(const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::flat_multiset::flat_multiset	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   flat_multiset(const flat_multiset<T,Pred,Alloc>& x) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const flat_multiset<T,Pred,Alloc>& x)
boost::container::flat_multiset::flat_multiset	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   flat_multiset(InputIterator first, InputIterator last,$/;"	f	class:boost::container::flat_multiset	access:public	signature:(InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::flat_multiset::flat_multiset	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   flat_multiset(ordered_range_t, InputIterator first, InputIterator last,$/;"	f	class:boost::container::flat_multiset	access:public	signature:(ordered_range_t, InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::flat_multiset::get_allocator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
boost::container::flat_multiset::get_stored_allocator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
boost::container::flat_multiset::get_stored_allocator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::flat_multiset	access:public	signature:()
boost::container::flat_multiset::insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::flat_multiset	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
boost::container::flat_multiset::insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(const_iterator p, insert_const_ref_type x) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const_iterator p, insert_const_ref_type x)
boost::container::flat_multiset::insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(const_iterator position, BOOST_INTERPROCESS_RV_REF(value_type) x) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const_iterator position, BOOST_INTERPROCESS_RV_REF(value_type) x)
boost::container::flat_multiset::insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::flat_multiset	access:public	signature:(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
boost::container::flat_multiset::insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(const_iterator position, T &x)$/;"	f	class:boost::container::flat_multiset	access:public	signature:(const_iterator position, T &x)
boost::container::flat_multiset::insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(insert_const_ref_type x) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(insert_const_ref_type x)
boost::container::flat_multiset::insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(T &x)$/;"	f	class:boost::container::flat_multiset	access:public	signature:(T &x)
boost::container::flat_multiset::insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   void insert(InputIterator first, InputIterator last) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(InputIterator first, InputIterator last)
boost::container::flat_multiset::insert_const_ref_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^      move_const_ref_type<T>::type insert_const_ref_type;$/;"	t	class:boost::container::flat_multiset	access:private
boost::container::flat_multiset::iterator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::iterator               iterator;$/;"	t	class:boost::container::flat_multiset	access:public
boost::container::flat_multiset::key_comp	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   key_compare key_comp() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
boost::container::flat_multiset::key_compare	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::key_compare            key_compare;$/;"	t	class:boost::container::flat_multiset	access:public
boost::container::flat_multiset::key_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::key_type               key_type;$/;"	t	class:boost::container::flat_multiset	access:public
boost::container::flat_multiset::lower_bound	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator lower_bound(const key_type& x) const $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const key_type& x) const
boost::container::flat_multiset::lower_bound	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator lower_bound(const key_type& x) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const key_type& x)
boost::container::flat_multiset::max_size	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
boost::container::flat_multiset::move	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^      : m_flat_tree(boost::interprocess::move(x.m_flat_tree))$/;"	f	class:boost::container::flat_multiset	access:public	signature:(x.m_flat_tree)
boost::container::flat_multiset::m_flat_tree	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   tree_t m_flat_tree;  \/\/ flat tree representing flat_multiset$/;"	m	class:boost::container::flat_multiset	access:private
boost::container::flat_multiset::operator <	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   friend bool operator< (const flat_multiset<K1,C1,A1>&,$/;"	p	class:boost::container::flat_multiset	access:friend	signature:(const flat_multiset<K1,C1,A1>&, const flat_multiset<K1,C1,A1>&)
boost::container::flat_multiset::operator ==	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   friend bool operator== (const flat_multiset<K1,C1,A1>&,$/;"	p	class:boost::container::flat_multiset	access:friend	signature:(const flat_multiset<K1,C1,A1>&, const flat_multiset<K1,C1,A1>&)
boost::container::flat_multiset::pointer	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::pointer                pointer;$/;"	t	class:boost::container::flat_multiset	access:public
boost::container::flat_multiset::priv_insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator priv_insert(const T &x) $/;"	f	class:boost::container::flat_multiset	access:private	signature:(const T &x)
boost::container::flat_multiset::priv_insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator priv_insert(const_iterator p, const T &x) $/;"	f	class:boost::container::flat_multiset	access:private	signature:(const_iterator p, const T &x)
boost::container::flat_multiset::rbegin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
boost::container::flat_multiset::rbegin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   reverse_iterator rbegin() $/;"	f	class:boost::container::flat_multiset	access:public	signature:()
boost::container::flat_multiset::reference	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::reference              reference;$/;"	t	class:boost::container::flat_multiset	access:public
boost::container::flat_multiset::rend	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_reverse_iterator rend() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
boost::container::flat_multiset::rend	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   reverse_iterator rend()$/;"	f	class:boost::container::flat_multiset	access:public	signature:()
boost::container::flat_multiset::reserve	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   void reserve(size_type count)       $/;"	f	class:boost::container::flat_multiset	access:public	signature:(size_type count)
boost::container::flat_multiset::reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::reverse_iterator       reverse_iterator;$/;"	t	class:boost::container::flat_multiset	access:public
boost::container::flat_multiset::shrink_to_fit	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::container::flat_multiset	access:public	signature:()
boost::container::flat_multiset::size	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   size_type size() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
boost::container::flat_multiset::size_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::size_type              size_type;$/;"	t	class:boost::container::flat_multiset	access:public
boost::container::flat_multiset::stored_allocator_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::stored_allocator_type  stored_allocator_type;$/;"	t	class:boost::container::flat_multiset	access:public
boost::container::flat_multiset::swap	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   void swap(flat_multiset& x)$/;"	f	class:boost::container::flat_multiset	access:public	signature:(flat_multiset& x)
boost::container::flat_multiset::tree_t	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef containers_detail::flat_tree<T, T, containers_detail::identity<T>, Pred, Alloc> tree_t;$/;"	t	class:boost::container::flat_multiset	access:private
boost::container::flat_multiset::upper_bound	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator upper_bound(const key_type& x) const $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const key_type& x) const
boost::container::flat_multiset::upper_bound	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator upper_bound(const key_type& x)$/;"	f	class:boost::container::flat_multiset	access:public	signature:(const key_type& x)
boost::container::flat_multiset::value_comp	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   value_compare value_comp() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
boost::container::flat_multiset::value_compare	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::value_compare          value_compare;$/;"	t	class:boost::container::flat_multiset	access:public
boost::container::flat_multiset::value_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::value_type             value_type;$/;"	t	class:boost::container::flat_multiset	access:public
boost::container::flat_set	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^class flat_set $/;"	c	namespace:boost::container
boost::container::flat_set::allocator_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::allocator_type         allocator_type;$/;"	t	class:boost::container::flat_set	access:public
boost::container::flat_set::begin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
boost::container::flat_set::begin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator begin() $/;"	f	class:boost::container::flat_set	access:public	signature:()
boost::container::flat_set::capacity	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   size_type capacity() const           $/;"	f	class:boost::container::flat_set	access:public	signature:() const
boost::container::flat_set::cbegin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator cbegin() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
boost::container::flat_set::cend	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator cend() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
boost::container::flat_set::clear	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   void clear() $/;"	f	class:boost::container::flat_set	access:public	signature:()
boost::container::flat_set::const_iterator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::const_iterator         const_iterator;$/;"	t	class:boost::container::flat_set	access:public
boost::container::flat_set::const_pointer	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::const_pointer          const_pointer;$/;"	t	class:boost::container::flat_set	access:public
boost::container::flat_set::const_reference	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::const_reference        const_reference;$/;"	t	class:boost::container::flat_set	access:public
boost::container::flat_set::const_reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::container::flat_set	access:public
boost::container::flat_set::count	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   size_type count(const key_type& x) const $/;"	f	class:boost::container::flat_set	access:public	signature:(const key_type& x) const
boost::container::flat_set::crbegin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_reverse_iterator crbegin() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
boost::container::flat_set::crend	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_reverse_iterator crend() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
boost::container::flat_set::difference_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::difference_type        difference_type;$/;"	t	class:boost::container::flat_set	access:public
boost::container::flat_set::emplace	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator emplace()$/;"	f	class:boost::container::flat_set	access:public	signature:()
boost::container::flat_set::emplace	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator emplace(Args&&... args)$/;"	f	class:boost::container::flat_set	access:public	signature:(Args&&.... args)
boost::container::flat_set::emplace_hint	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator emplace_hint(const_iterator hint)$/;"	f	class:boost::container::flat_set	access:public	signature:(const_iterator hint)
boost::container::flat_set::emplace_hint	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator emplace_hint(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::flat_set	access:public	signature:(const_iterator hint, Args&&... args)
boost::container::flat_set::empty	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   bool empty() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
boost::container::flat_set::end	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
boost::container::flat_set::end	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator end() $/;"	f	class:boost::container::flat_set	access:public	signature:()
boost::container::flat_set::equal_range	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^      equal_range(const key_type& x) $/;"	f	class:boost::container::flat_set	access:public	signature:(const key_type& x)
boost::container::flat_set::equal_range	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^      equal_range(const key_type& x) const $/;"	f	class:boost::container::flat_set	access:public	signature:(const key_type& x) const
boost::container::flat_set::erase	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator erase(const_iterator first, const_iterator last) $/;"	f	class:boost::container::flat_set	access:public	signature:(const_iterator first, const_iterator last)
boost::container::flat_set::erase	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator erase(const_iterator position) $/;"	f	class:boost::container::flat_set	access:public	signature:(const_iterator position)
boost::container::flat_set::erase	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   size_type erase(const key_type& x) $/;"	f	class:boost::container::flat_set	access:public	signature:(const key_type& x)
boost::container::flat_set::find	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator find(const key_type& x) const $/;"	f	class:boost::container::flat_set	access:public	signature:(const key_type& x) const
boost::container::flat_set::find	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator find(const key_type& x) $/;"	f	class:boost::container::flat_set	access:public	signature:(const key_type& x)
boost::container::flat_set::flat_set	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   explicit flat_set(const Pred& comp = Pred(),$/;"	f	class:boost::container::flat_set	access:public	signature:(const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::flat_set::flat_set	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   flat_set(const flat_set<T,Pred,Alloc>& x) $/;"	f	class:boost::container::flat_set	access:public	signature:(const flat_set<T,Pred,Alloc>& x)
boost::container::flat_set::flat_set	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   flat_set(InputIterator first, InputIterator last, $/;"	f	class:boost::container::flat_set	access:public	signature:(InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::flat_set::flat_set	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   flat_set(ordered_unique_range_t, InputIterator first, InputIterator last, $/;"	f	class:boost::container::flat_set	access:public	signature:(ordered_unique_range_t, InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::flat_set::get_allocator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
boost::container::flat_set::get_stored_allocator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
boost::container::flat_set::get_stored_allocator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::flat_set	access:public	signature:()
boost::container::flat_set::insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(const_iterator p, insert_const_ref_type x) $/;"	f	class:boost::container::flat_set	access:public	signature:(const_iterator p, insert_const_ref_type x)
boost::container::flat_set::insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(const_iterator position, BOOST_INTERPROCESS_RV_REF(value_type) x) $/;"	f	class:boost::container::flat_set	access:public	signature:(const_iterator position, BOOST_INTERPROCESS_RV_REF(value_type) x)
boost::container::flat_set::insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::flat_set	access:public	signature:(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
boost::container::flat_set::insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(const_iterator position, T &x)$/;"	f	class:boost::container::flat_set	access:public	signature:(const_iterator position, T &x)
boost::container::flat_set::insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   std::pair<iterator, bool> insert(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::flat_set	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
boost::container::flat_set::insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   std::pair<iterator, bool> insert(insert_const_ref_type x) $/;"	f	class:boost::container::flat_set	access:public	signature:(insert_const_ref_type x)
boost::container::flat_set::insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   std::pair<iterator, bool> insert(T &x)$/;"	f	class:boost::container::flat_set	access:public	signature:(T &x)
boost::container::flat_set::insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   void insert(InputIterator first, InputIterator last) $/;"	f	class:boost::container::flat_set	access:public	signature:(InputIterator first, InputIterator last)
boost::container::flat_set::insert_const_ref_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^      move_const_ref_type<T>::type insert_const_ref_type;$/;"	t	class:boost::container::flat_set	access:private
boost::container::flat_set::iterator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::iterator               iterator;$/;"	t	class:boost::container::flat_set	access:public
boost::container::flat_set::key_comp	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   key_compare key_comp() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
boost::container::flat_set::key_compare	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::key_compare            key_compare;$/;"	t	class:boost::container::flat_set	access:public
boost::container::flat_set::key_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::key_type               key_type;$/;"	t	class:boost::container::flat_set	access:public
boost::container::flat_set::lower_bound	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator lower_bound(const key_type& x) const $/;"	f	class:boost::container::flat_set	access:public	signature:(const key_type& x) const
boost::container::flat_set::lower_bound	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator lower_bound(const key_type& x) $/;"	f	class:boost::container::flat_set	access:public	signature:(const key_type& x)
boost::container::flat_set::max_size	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
boost::container::flat_set::move	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^      : m_flat_tree(boost::interprocess::move(mx.m_flat_tree))$/;"	f	class:boost::container::flat_set	access:public	signature:(mx.m_flat_tree)
boost::container::flat_set::m_flat_tree	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   tree_t m_flat_tree;  \/\/ flat tree representing flat_set$/;"	m	class:boost::container::flat_set	access:private
boost::container::flat_set::operator <	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   friend bool operator< (const flat_set<K1,C1,A1>&, const flat_set<K1,C1,A1>&);$/;"	p	class:boost::container::flat_set	access:friend	signature:(const flat_set<K1,C1,A1>&, const flat_set<K1,C1,A1>&)
boost::container::flat_set::operator ==	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   friend bool operator== (const flat_set<K1,C1,A1>&, const flat_set<K1,C1,A1>&);$/;"	p	class:boost::container::flat_set	access:friend	signature:(const flat_set<K1,C1,A1>&, const flat_set<K1,C1,A1>&)
boost::container::flat_set::pointer	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::pointer                pointer;$/;"	t	class:boost::container::flat_set	access:public
boost::container::flat_set::priv_insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator priv_insert(const_iterator p, const T &x) $/;"	f	class:boost::container::flat_set	access:private	signature:(const_iterator p, const T &x)
boost::container::flat_set::priv_insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   std::pair<iterator, bool> priv_insert(const T &x) $/;"	f	class:boost::container::flat_set	access:private	signature:(const T &x)
boost::container::flat_set::rbegin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
boost::container::flat_set::rbegin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   reverse_iterator rbegin() $/;"	f	class:boost::container::flat_set	access:public	signature:()
boost::container::flat_set::reference	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::reference              reference;$/;"	t	class:boost::container::flat_set	access:public
boost::container::flat_set::rend	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_reverse_iterator rend() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
boost::container::flat_set::rend	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   reverse_iterator rend()$/;"	f	class:boost::container::flat_set	access:public	signature:()
boost::container::flat_set::reserve	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   void reserve(size_type count)       $/;"	f	class:boost::container::flat_set	access:public	signature:(size_type count)
boost::container::flat_set::reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::reverse_iterator       reverse_iterator;$/;"	t	class:boost::container::flat_set	access:public
boost::container::flat_set::shrink_to_fit	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::container::flat_set	access:public	signature:()
boost::container::flat_set::size	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   size_type size() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
boost::container::flat_set::size_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::size_type              size_type;$/;"	t	class:boost::container::flat_set	access:public
boost::container::flat_set::stored_allocator_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::stored_allocator_type  stored_allocator_type;$/;"	t	class:boost::container::flat_set	access:public
boost::container::flat_set::swap	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   void swap(flat_set& x)$/;"	f	class:boost::container::flat_set	access:public	signature:(flat_set& x)
boost::container::flat_set::tree_t	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef containers_detail::flat_tree<T, T, containers_detail::identity<T>, Pred, Alloc> tree_t;$/;"	t	class:boost::container::flat_set	access:private
boost::container::flat_set::upper_bound	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator upper_bound(const key_type& x) const $/;"	f	class:boost::container::flat_set	access:public	signature:(const key_type& x) const
boost::container::flat_set::upper_bound	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator upper_bound(const key_type& x)$/;"	f	class:boost::container::flat_set	access:public	signature:(const key_type& x)
boost::container::flat_set::value_comp	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   value_compare value_comp() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
boost::container::flat_set::value_compare	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::value_compare          value_compare;$/;"	t	class:boost::container::flat_set	access:public
boost::container::flat_set::value_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::value_type             value_type;$/;"	t	class:boost::container::flat_set	access:public
boost::container::getline	/usr/include/boost/interprocess/containers/container/string.hpp	/^getline(std::basic_istream<CharT, Traits>& is, basic_string<CharT,Traits,A>& s)$/;"	f	namespace:boost::container	signature:(std::basic_istream<CharT, Traits>& is, basic_string<CharT,Traits,A>& s)
boost::container::getline	/usr/include/boost/interprocess/containers/container/string.hpp	/^getline(std::istream& is, basic_string<CharT,Traits,A>& s,CharT delim)$/;"	f	namespace:boost::container	signature:(std::istream& is, basic_string<CharT,Traits,A>& s,CharT delim)
boost::container::hash_value	/usr/include/boost/interprocess/containers/container/string.hpp	/^inline std::size_t hash_value(basic_string<Ch, std::char_traits<Ch>, A> const& v)$/;"	f	namespace:boost::container	signature:(basic_string<Ch, std::char_traits<Ch>, A> const& v)
boost::container::has_own_construct_from_it	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^struct has_own_construct_from_it$/;"	s	namespace:boost::container
boost::container::has_own_construct_from_it	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^struct has_own_construct_from_it$/;"	s	namespace:boost::container
boost::container::has_own_construct_from_it::value	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^   static const bool value = false;$/;"	m	struct:boost::container::has_own_construct_from_it	access:public
boost::container::has_own_construct_from_it::value	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   static const bool value = true;$/;"	m	struct:boost::container::has_own_construct_from_it	access:public
boost::container::list	/usr/include/boost/interprocess/containers/container/list.hpp	/^class list $/;"	c	namespace:boost::container	inherits:containers_detail::node_alloc_holder
boost::container::list::allocator_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef A                                       allocator_type;$/;"	t	class:boost::container::list	access:public
boost::container::list::allocator_v1	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename AllocHolder::allocator_v1         allocator_v1;$/;"	t	class:boost::container::list	access:private
boost::container::list::allocator_v2	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename AllocHolder::allocator_v2         allocator_v2;$/;"	t	class:boost::container::list	access:private
boost::container::list::AllocHolder	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef containers_detail::node_alloc_holder<A, Icont>        AllocHolder;$/;"	t	class:boost::container::list	access:private
boost::container::list::alloc_version	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename AllocHolder::alloc_version        alloc_version;$/;"	t	class:boost::container::list	access:private
boost::container::list::assign	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void assign(InpIt first, InpIt last) $/;"	f	class:boost::container::list	access:public	signature:(InpIt first, InpIt last)
boost::container::list::assign	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void assign(size_type n, const T& val) $/;"	f	class:boost::container::list	access:public	signature:(size_type n, const T& val)
boost::container::list::back	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const_reference back()  const $/;"	f	class:boost::container::list	access:public	signature:() const
boost::container::list::back	/usr/include/boost/interprocess/containers/container/list.hpp	/^   reference back()              $/;"	f	class:boost::container::list	access:public	signature:()
boost::container::list::begin	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const_iterator begin() const$/;"	f	class:boost::container::list	access:public	signature:() const
boost::container::list::begin	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator begin()$/;"	f	class:boost::container::list	access:public	signature:()
boost::container::list::cbegin	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const_iterator cbegin() const$/;"	f	class:boost::container::list	access:public	signature:() const
boost::container::list::cend	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const_iterator cend() const$/;"	f	class:boost::container::list	access:public	signature:() const
boost::container::list::clear	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void clear()$/;"	f	class:boost::container::list	access:public	signature:()
boost::container::list::const_iterator	/usr/include/boost/interprocess/containers/container/list.hpp	/^   class const_iterator$/;"	c	class:boost::container::list	inherits:std::iterator	access:public
boost::container::list::const_iterator::const_iterator	/usr/include/boost/interprocess/containers/container/list.hpp	/^      const_iterator()$/;"	f	class:boost::container::list::const_iterator	access:public	signature:()
boost::container::list::const_iterator::const_iterator	/usr/include/boost/interprocess/containers/container/list.hpp	/^      explicit const_iterator(typename Icont::iterator it)  : m_it(it){}$/;"	f	class:boost::container::list::const_iterator	access:protected	signature:(typename Icont::iterator it)
boost::container::list::const_iterator::difference_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^      typedef list_difference_type        difference_type;$/;"	t	class:boost::container::list::const_iterator	access:public
boost::container::list::const_iterator::get	/usr/include/boost/interprocess/containers/container/list.hpp	/^      typename Icont::iterator get()$/;"	f	class:boost::container::list::const_iterator	access:private	signature:()
boost::container::list::const_iterator::m_it	/usr/include/boost/interprocess/containers/container/list.hpp	/^      typename Icont::iterator m_it;$/;"	m	class:boost::container::list::const_iterator	access:protected
boost::container::list::const_iterator::operator !=	/usr/include/boost/interprocess/containers/container/list.hpp	/^      bool operator!=   (const const_iterator& r)  const$/;"	f	class:boost::container::list::const_iterator	access:public	signature:(const const_iterator& r) const
boost::container::list::const_iterator::operator *	/usr/include/boost/interprocess/containers/container/list.hpp	/^      const_reference operator*()  const $/;"	f	class:boost::container::list::const_iterator	access:public	signature:() const
boost::container::list::const_iterator::operator ++	/usr/include/boost/interprocess/containers/container/list.hpp	/^      const_iterator operator++(int)      $/;"	f	class:boost::container::list::const_iterator	access:public	signature:(int)
boost::container::list::const_iterator::operator ++	/usr/include/boost/interprocess/containers/container/list.hpp	/^      const_iterator& operator++()       $/;"	f	class:boost::container::list::const_iterator	access:public	signature:()
boost::container::list::const_iterator::operator --	/usr/include/boost/interprocess/containers/container/list.hpp	/^      const_iterator operator--(int)$/;"	f	class:boost::container::list::const_iterator	access:public	signature:(int)
boost::container::list::const_iterator::operator --	/usr/include/boost/interprocess/containers/container/list.hpp	/^      const_iterator& operator--()$/;"	f	class:boost::container::list::const_iterator	access:public	signature:()
boost::container::list::const_iterator::operator ->	/usr/include/boost/interprocess/containers/container/list.hpp	/^      const_pointer   operator->() const $/;"	f	class:boost::container::list::const_iterator	access:public	signature:() const
boost::container::list::const_iterator::operator ==	/usr/include/boost/interprocess/containers/container/list.hpp	/^      bool operator==   (const const_iterator& r)  const$/;"	f	class:boost::container::list::const_iterator	access:public	signature:(const const_iterator& r) const
boost::container::list::const_iterator::prot_decr	/usr/include/boost/interprocess/containers/container/list.hpp	/^      void prot_decr() { --m_it; }$/;"	f	class:boost::container::list::const_iterator	access:protected	signature:()
boost::container::list::const_iterator::prot_incr	/usr/include/boost/interprocess/containers/container/list.hpp	/^      void prot_incr() { ++m_it; }$/;"	f	class:boost::container::list::const_iterator	access:protected	signature:()
boost::container::list::const_pointer	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename A::const_pointer               const_pointer;$/;"	t	class:boost::container::list	access:public
boost::container::list::const_reference	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename A::const_reference             const_reference;$/;"	t	class:boost::container::list	access:public
boost::container::list::const_reverse_iterator	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;$/;"	t	class:boost::container::list	access:public
boost::container::list::crbegin	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const_reverse_iterator crbegin() const$/;"	f	class:boost::container::list	access:public	signature:() const
boost::container::list::crend	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const_reverse_iterator crend() const$/;"	f	class:boost::container::list	access:public	signature:() const
boost::container::list::Destroyer	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef containers_detail::allocator_destroyer<NodeAlloc>     Destroyer;$/;"	t	class:boost::container::list	access:private
boost::container::list::difference_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename A::difference_type             difference_type;$/;"	t	class:boost::container::list	access:public
boost::container::list::emplace	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator emplace(const_iterator p)$/;"	f	class:boost::container::list	access:public	signature:(const_iterator p)
boost::container::list::emplace	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator emplace(const_iterator p, Args&&... args)$/;"	f	class:boost::container::list	access:public	signature:(const_iterator p, Args&&... args)
boost::container::list::emplace_back	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void emplace_back()$/;"	f	class:boost::container::list	access:public	signature:()
boost::container::list::emplace_back	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void emplace_back(Args&&... args)$/;"	f	class:boost::container::list	access:public	signature:(Args&&.... args)
boost::container::list::emplace_front	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void emplace_front()$/;"	f	class:boost::container::list	access:public	signature:()
boost::container::list::emplace_front	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void emplace_front(Args&&... args)$/;"	f	class:boost::container::list	access:public	signature:(Args&&.... args)
boost::container::list::empty	/usr/include/boost/interprocess/containers/container/list.hpp	/^   bool empty() const $/;"	f	class:boost::container::list	access:public	signature:() const
boost::container::list::end	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const_iterator end() const$/;"	f	class:boost::container::list	access:public	signature:() const
boost::container::list::end	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator end()$/;"	f	class:boost::container::list	access:public	signature:()
boost::container::list::equal_to_value	/usr/include/boost/interprocess/containers/container/list.hpp	/^   class equal_to_value$/;"	c	class:boost::container::list	access:private
boost::container::list::equal_to_value::equal_to_value	/usr/include/boost/interprocess/containers/container/list.hpp	/^      equal_to_value(const value_type &t)$/;"	f	class:boost::container::list::equal_to_value	access:public	signature:(const value_type &t)
boost::container::list::equal_to_value::operator ()	/usr/include/boost/interprocess/containers/container/list.hpp	/^      bool operator()(const value_type &t)const$/;"	f	class:boost::container::list::equal_to_value	access:public	signature:(const value_type &t) const
boost::container::list::equal_to_value::t_	/usr/include/boost/interprocess/containers/container/list.hpp	/^      const value_type &t_;$/;"	m	class:boost::container::list::equal_to_value	access:private
boost::container::list::equal_to_value::value_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^      typedef typename AllocHolder::value_type value_type;$/;"	t	class:boost::container::list::equal_to_value	access:private
boost::container::list::erase	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::list	access:public	signature:(const_iterator first, const_iterator last)
boost::container::list::erase	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator erase(const_iterator p) $/;"	f	class:boost::container::list	access:public	signature:(const_iterator p)
boost::container::list::front	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const_reference front() const $/;"	f	class:boost::container::list	access:public	signature:() const
boost::container::list::front	/usr/include/boost/interprocess/containers/container/list.hpp	/^   reference front()             $/;"	f	class:boost::container::list	access:public	signature:()
boost::container::list::get_allocator	/usr/include/boost/interprocess/containers/container/list.hpp	/^   allocator_type get_allocator() const$/;"	f	class:boost::container::list	access:public	signature:() const
boost::container::list::get_stored_allocator	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::list	access:public	signature:() const
boost::container::list::get_stored_allocator	/usr/include/boost/interprocess/containers/container/list.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::list	access:public	signature:()
boost::container::list::Icont	/usr/include/boost/interprocess/containers/container/list.hpp	/^      containers_detail::intrusive_list_type<A>::type Icont;$/;"	t	class:boost::container::list	access:private
boost::container::list::insert	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator insert(const_iterator p, BOOST_INTERPROCESS_RV_REF(T) x) $/;"	f	class:boost::container::list	access:public	signature:(const_iterator p, BOOST_INTERPROCESS_RV_REF(T) x)
boost::container::list::insert	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator insert(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::list	access:public	signature:(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
boost::container::list::insert	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator insert(const_iterator position, insert_const_ref_type x) $/;"	f	class:boost::container::list	access:public	signature:(const_iterator position, insert_const_ref_type x)
boost::container::list::insert	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator insert(const_iterator position, T &x) { return this->insert(position, const_cast<const T &>(x)); }$/;"	f	class:boost::container::list	access:public	signature:(const_iterator position, T &x)
boost::container::list::insert	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void insert(const_iterator p, InpIt first, InpIt last) $/;"	f	class:boost::container::list	access:public	signature:(const_iterator p, InpIt first, InpIt last)
boost::container::list::insert	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void insert(const_iterator p, size_type n, const T& x)$/;"	f	class:boost::container::list	access:public	signature:(const_iterator p, size_type n, const T& x)
boost::container::list::insertion_functor	/usr/include/boost/interprocess/containers/container/list.hpp	/^   class insertion_functor$/;"	c	class:boost::container::list	access:private
boost::container::list::insertion_functor::icont_	/usr/include/boost/interprocess/containers/container/list.hpp	/^      Icont &icont_;$/;"	m	class:boost::container::list::insertion_functor	access:private
boost::container::list::insertion_functor::insertion_functor	/usr/include/boost/interprocess/containers/container/list.hpp	/^      insertion_functor(Icont &icont, typename Icont::const_iterator pos)$/;"	f	class:boost::container::list::insertion_functor	access:public	signature:(Icont &icont, typename Icont::const_iterator pos)
boost::container::list::insertion_functor::operator ()	/usr/include/boost/interprocess/containers/container/list.hpp	/^      void operator()(Node &n)$/;"	f	class:boost::container::list::insertion_functor	access:public	signature:(Node &n)
boost::container::list::insertion_functor::pos_	/usr/include/boost/interprocess/containers/container/list.hpp	/^      typename Icont::const_iterator pos_;$/;"	m	class:boost::container::list::insertion_functor	access:private
boost::container::list::insert_const_ref_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^      move_const_ref_type<T>::type                    insert_const_ref_type;$/;"	t	class:boost::container::list	access:private
boost::container::list::iterator	/usr/include/boost/interprocess/containers/container/list.hpp	/^   class iterator$/;"	c	class:boost::container::list	inherits:const_iterator	access:public
boost::container::list::iterator::get	/usr/include/boost/interprocess/containers/container/list.hpp	/^      typename Icont::iterator get()$/;"	f	class:boost::container::list::iterator	access:private	signature:()
boost::container::list::iterator::iterator	/usr/include/boost/interprocess/containers/container/list.hpp	/^      explicit iterator(typename Icont::iterator it)$/;"	f	class:boost::container::list::iterator	access:private	signature:(typename Icont::iterator it)
boost::container::list::iterator::iterator	/usr/include/boost/interprocess/containers/container/list.hpp	/^      iterator(){}$/;"	f	class:boost::container::list::iterator	access:public	signature:()
boost::container::list::iterator::operator *	/usr/include/boost/interprocess/containers/container/list.hpp	/^      reference operator*()  const {  return  this->m_it->m_data;  }$/;"	f	class:boost::container::list::iterator	access:public	signature:() const
boost::container::list::iterator::operator ++	/usr/include/boost/interprocess/containers/container/list.hpp	/^      iterator operator++(int)$/;"	f	class:boost::container::list::iterator	access:public	signature:(int)
boost::container::list::iterator::operator ++	/usr/include/boost/interprocess/containers/container/list.hpp	/^      iterator& operator++()  $/;"	f	class:boost::container::list::iterator	access:public	signature:()
boost::container::list::iterator::operator --	/usr/include/boost/interprocess/containers/container/list.hpp	/^      iterator operator--(int)$/;"	f	class:boost::container::list::iterator	access:public	signature:(int)
boost::container::list::iterator::operator --	/usr/include/boost/interprocess/containers/container/list.hpp	/^      iterator& operator--()$/;"	f	class:boost::container::list::iterator	access:public	signature:()
boost::container::list::iterator::operator ->	/usr/include/boost/interprocess/containers/container/list.hpp	/^      pointer   operator->() const {  return  pointer(&this->m_it->m_data);  }$/;"	f	class:boost::container::list::iterator	access:public	signature:() const
boost::container::list::iterator::pointer	/usr/include/boost/interprocess/containers/container/list.hpp	/^      typedef list_pointer       pointer;$/;"	t	class:boost::container::list::iterator	access:public
boost::container::list::iterator::reference	/usr/include/boost/interprocess/containers/container/list.hpp	/^      typedef list_reference     reference;$/;"	t	class:boost::container::list::iterator	access:public
boost::container::list::list	/usr/include/boost/interprocess/containers/container/list.hpp	/^   explicit list(const allocator_type &a = A()) $/;"	f	class:boost::container::list	access:public	signature:(const allocator_type &a = A())
boost::container::list::list	/usr/include/boost/interprocess/containers/container/list.hpp	/^   list(const list& x) $/;"	f	class:boost::container::list	access:public	signature:(const list& x)
boost::container::list::list	/usr/include/boost/interprocess/containers/container/list.hpp	/^   list(InpIt first, InpIt last, const A &a = A())$/;"	f	class:boost::container::list	access:public	signature:(InpIt first, InpIt last, const A &a = A())
boost::container::list::list	/usr/include/boost/interprocess/containers/container/list.hpp	/^   list(size_type n)$/;"	f	class:boost::container::list	access:public	signature:(size_type n)
boost::container::list::list	/usr/include/boost/interprocess/containers/container/list.hpp	/^   list(size_type n, const T& value, const A& a = A())$/;"	f	class:boost::container::list	access:public	signature:(size_type n, const T& value, const A& a = A())
boost::container::list::list_const_pointer	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef const_pointer                           list_const_pointer;$/;"	t	class:boost::container::list	access:private
boost::container::list::list_const_reference	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef const_reference                         list_const_reference;$/;"	t	class:boost::container::list	access:private
boost::container::list::list_difference_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef difference_type                         list_difference_type;$/;"	t	class:boost::container::list	access:private
boost::container::list::list_pointer	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef pointer                                 list_pointer;$/;"	t	class:boost::container::list	access:private
boost::container::list::list_reference	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef reference                               list_reference;$/;"	t	class:boost::container::list	access:private
boost::container::list::max_size	/usr/include/boost/interprocess/containers/container/list.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::list	access:public	signature:() const
boost::container::list::merge	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void merge(list &x, StrictWeakOrdering comp)$/;"	f	class:boost::container::list	access:public	signature:(list &x, StrictWeakOrdering comp)
boost::container::list::merge	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void merge(list<T, A>& x)$/;"	f	class:boost::container::list	access:public	signature:(list<T, A>& x)
boost::container::list::move	/usr/include/boost/interprocess/containers/container/list.hpp	/^      : AllocHolder(boost::interprocess::move(static_cast<AllocHolder&>(x)))$/;"	f	class:boost::container::list	access:public	signature:(static_cast<AllocHolder&>(
boost::container::list::Node	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename AllocHolder::Node                 Node;$/;"	t	class:boost::container::list	access:private
boost::container::list::NodeAlloc	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename AllocHolder::NodeAlloc            NodeAlloc;$/;"	t	class:boost::container::list	access:private
boost::container::list::NodePtr	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename AllocHolder::NodePtr              NodePtr;$/;"	t	class:boost::container::list	access:private
boost::container::list::pointer	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename A::pointer                     pointer;$/;"	t	class:boost::container::list	access:public
boost::container::list::pop_back	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void pop_back()               $/;"	f	class:boost::container::list	access:public	signature:()
boost::container::list::pop_front	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void pop_front()              $/;"	f	class:boost::container::list	access:public	signature:()
boost::container::list::priv_assign_dispatch	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_assign_dispatch(InputIter first2, InputIter last2, containers_detail::false_)$/;"	f	class:boost::container::list	access:private	signature:(InputIter first2, InputIter last2, containers_detail::false_)
boost::container::list::priv_assign_dispatch	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_assign_dispatch(Integer n, Integer val, containers_detail::true_)$/;"	f	class:boost::container::list	access:private	signature:(Integer n, Integer val, containers_detail::true_)
boost::container::list::priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::list	access:private	signature:(const_iterator pos, FwdIterator beg, FwdIterator end, allocator_v2, std::forward_iterator_tag)
boost::container::list::priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::list	access:private	signature:(const_iterator pos, InpIterator beg, InpIterator end)
boost::container::list::priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::list	access:private	signature:(const_iterator pos, InpIterator beg, InpIterator end, allocator_v1, std::input_iterator_tag)
boost::container::list::priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::list	access:private	signature:(const_iterator pos, InpIterator beg, InpIterator end, allocator_v2, std::input_iterator_tag)
boost::container::list::priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_create_and_insert_nodes(const_iterator pos, size_type n)$/;"	f	class:boost::container::list	access:private	signature:(const_iterator pos, size_type n)
boost::container::list::priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_create_and_insert_nodes(const_iterator pos, size_type n, const T& x)$/;"	f	class:boost::container::list	access:private	signature:(const_iterator pos, size_type n, const T& x)
boost::container::list::priv_fill_assign	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_fill_assign(size_type n, const T& val) $/;"	f	class:boost::container::list	access:private	signature:(size_type n, const T& val)
boost::container::list::priv_insert	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator priv_insert(const_iterator p, const T &x) $/;"	f	class:boost::container::list	access:private	signature:(const_iterator p, const T &x)
boost::container::list::priv_insert_dispatch	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_insert_dispatch(const_iterator p, Integer n, Integer x, containers_detail::true_) $/;"	f	class:boost::container::list	access:private	signature:(const_iterator p, Integer n, Integer x, containers_detail::true_)
boost::container::list::priv_insert_dispatch	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_insert_dispatch(const_iterator p,$/;"	f	class:boost::container::list	access:private	signature:(const_iterator p, InputIter first, InputIter last, containers_detail::false_)
boost::container::list::push_back	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void push_back (insert_const_ref_type x)   $/;"	f	class:boost::container::list	access:public	signature:(insert_const_ref_type x)
boost::container::list::push_back	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void push_back(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::list	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
boost::container::list::push_back	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void push_back(T &x) { push_back(const_cast<const T &>(x)); }$/;"	f	class:boost::container::list	access:public	signature:(T &x)
boost::container::list::push_front	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void push_front(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::list	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
boost::container::list::push_front	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void push_front(insert_const_ref_type x)   $/;"	f	class:boost::container::list	access:public	signature:(insert_const_ref_type x)
boost::container::list::push_front	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void push_front(T &x) { push_front(const_cast<const T &>(x)); }$/;"	f	class:boost::container::list	access:public	signature:(T &x)
boost::container::list::rbegin	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const_reverse_iterator rbegin() const$/;"	f	class:boost::container::list	access:public	signature:() const
boost::container::list::rbegin	/usr/include/boost/interprocess/containers/container/list.hpp	/^   reverse_iterator rbegin()$/;"	f	class:boost::container::list	access:public	signature:()
boost::container::list::reference	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename A::reference                   reference;$/;"	t	class:boost::container::list	access:public
boost::container::list::remove	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void remove(const T& value)$/;"	f	class:boost::container::list	access:public	signature:(const T& value)
boost::container::list::remove_if	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void remove_if(Pred pred)$/;"	f	class:boost::container::list	access:public	signature:(Pred pred)
boost::container::list::rend	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const_reverse_iterator rend() const$/;"	f	class:boost::container::list	access:public	signature:() const
boost::container::list::rend	/usr/include/boost/interprocess/containers/container/list.hpp	/^   reverse_iterator rend()$/;"	f	class:boost::container::list	access:public	signature:()
boost::container::list::resize	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void resize(size_type new_size)$/;"	f	class:boost::container::list	access:public	signature:(size_type new_size)
boost::container::list::resize	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void resize(size_type new_size, const T& x)$/;"	f	class:boost::container::list	access:public	signature:(size_type new_size, const T& x)
boost::container::list::reverse	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void reverse()$/;"	f	class:boost::container::list	access:public	signature:()
boost::container::list::reverse_iterator	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef std::reverse_iterator<iterator>        reverse_iterator;$/;"	t	class:boost::container::list	access:public
boost::container::list::size	/usr/include/boost/interprocess/containers/container/list.hpp	/^   size_type size() const $/;"	f	class:boost::container::list	access:public	signature:() const
boost::container::list::size_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename A::size_type                   size_type;$/;"	t	class:boost::container::list	access:public
boost::container::list::sort	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void sort()$/;"	f	class:boost::container::list	access:public	signature:()
boost::container::list::sort	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void sort(StrictWeakOrdering comp)$/;"	f	class:boost::container::list	access:public	signature:(StrictWeakOrdering comp)
boost::container::list::splice	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void splice(const_iterator p, ThisType &x, const_iterator first, const_iterator last) $/;"	f	class:boost::container::list	access:public	signature:(const_iterator p, ThisType &x, const_iterator first, const_iterator last)
boost::container::list::splice	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void splice(const_iterator p, ThisType &x, const_iterator first, const_iterator last, size_type n) $/;"	f	class:boost::container::list	access:public	signature:(const_iterator p, ThisType &x, const_iterator first, const_iterator last, size_type n)
boost::container::list::splice	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void splice(const_iterator p, ThisType &x, const_iterator i) $/;"	f	class:boost::container::list	access:public	signature:(const_iterator p, ThisType &x, const_iterator i)
boost::container::list::splice	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void splice(iterator p, ThisType& x) $/;"	f	class:boost::container::list	access:public	signature:(iterator p, ThisType& x)
boost::container::list::stored_allocator_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef NodeAlloc                               stored_allocator_type;$/;"	t	class:boost::container::list	access:public
boost::container::list::swap	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void swap(ThisType& x)$/;"	f	class:boost::container::list	access:public	signature:(ThisType& x)
boost::container::list::ThisType	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef list <T, A>                                ThisType;$/;"	t	class:boost::container::list	access:private
boost::container::list::unique	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void unique()$/;"	f	class:boost::container::list	access:public	signature:()
boost::container::list::unique	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void unique(BinaryPredicate binary_pred)$/;"	f	class:boost::container::list	access:public	signature:(BinaryPredicate binary_pred)
boost::container::list::ValAlloc	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename AllocHolder::ValAlloc             ValAlloc;$/;"	t	class:boost::container::list	access:private
boost::container::list::ValueCompareToNodeCompare	/usr/include/boost/interprocess/containers/container/list.hpp	/^   struct ValueCompareToNodeCompare$/;"	s	class:boost::container::list	inherits:Pred	access:private
boost::container::list::ValueCompareToNodeCompare::operator ()	/usr/include/boost/interprocess/containers/container/list.hpp	/^      bool operator()(const Node &a) const$/;"	f	struct:boost::container::list::ValueCompareToNodeCompare	access:public	signature:(const Node &a) const
boost::container::list::ValueCompareToNodeCompare::operator ()	/usr/include/boost/interprocess/containers/container/list.hpp	/^      bool operator()(const Node &a, const Node &b) const$/;"	f	struct:boost::container::list::ValueCompareToNodeCompare	access:public	signature:(const Node &a, const Node &b) const
boost::container::list::ValueCompareToNodeCompare::ValueCompareToNodeCompare	/usr/include/boost/interprocess/containers/container/list.hpp	/^      ValueCompareToNodeCompare(Pred pred)$/;"	f	struct:boost::container::list::ValueCompareToNodeCompare	access:public	signature:(Pred pred)
boost::container::list::value_equal	/usr/include/boost/interprocess/containers/container/list.hpp	/^   struct value_equal$/;"	s	class:boost::container::list	access:private
boost::container::list::value_equal::operator ()	/usr/include/boost/interprocess/containers/container/list.hpp	/^      bool operator()(const value_type &a, const value_type &b) const$/;"	f	struct:boost::container::list::value_equal	access:public	signature:(const value_type &a, const value_type &b) const
boost::container::list::value_less	/usr/include/boost/interprocess/containers/container/list.hpp	/^   struct value_less$/;"	s	class:boost::container::list	access:private
boost::container::list::value_less::operator ()	/usr/include/boost/interprocess/containers/container/list.hpp	/^      bool operator()(const value_type &a, const value_type &b) const$/;"	f	struct:boost::container::list::value_less	access:public	signature:(const value_type &a, const value_type &b) const
boost::container::list::value_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef T                                       value_type;$/;"	t	class:boost::container::list	access:public
boost::container::list::~list	/usr/include/boost/interprocess/containers/container/list.hpp	/^   ~list()$/;"	f	class:boost::container::list	access:public	signature:()
boost::container::make_transform_iterator	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^make_transform_iterator(Iterator it, UnaryFunc fun)$/;"	f	namespace:boost::container	signature:(Iterator it, UnaryFunc fun)
boost::container::map	/usr/include/boost/interprocess/containers/container/map.hpp	/^class map $/;"	c	namespace:boost::container
boost::container::map::allocator_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::allocator_type         allocator_type;$/;"	t	class:boost::container::map	access:public
boost::container::map::at	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const T& at(const key_type& k) const$/;"	f	class:boost::container::map	access:public	signature:(const key_type& k) const
boost::container::map::at	/usr/include/boost/interprocess/containers/container/map.hpp	/^   T& at(const key_type& k)$/;"	f	class:boost::container::map	access:public	signature:(const key_type& k)
boost::container::map::begin	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::map	access:public	signature:() const
boost::container::map::begin	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator begin() $/;"	f	class:boost::container::map	access:public	signature:()
boost::container::map::clear	/usr/include/boost/interprocess/containers/container/map.hpp	/^   void clear() $/;"	f	class:boost::container::map	access:public	signature:()
boost::container::map::const_iterator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::const_iterator         const_iterator;$/;"	t	class:boost::container::map	access:public
boost::container::map::const_pointer	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::const_pointer          const_pointer;$/;"	t	class:boost::container::map	access:public
boost::container::map::const_reference	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::const_reference        const_reference;$/;"	t	class:boost::container::map	access:public
boost::container::map::const_reverse_iterator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::container::map	access:public
boost::container::map::count	/usr/include/boost/interprocess/containers/container/map.hpp	/^   size_type count(const key_type& x) const $/;"	f	class:boost::container::map	access:public	signature:(const key_type& x) const
boost::container::map::difference_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::difference_type        difference_type;$/;"	t	class:boost::container::map	access:public
boost::container::map::emplace	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator emplace()$/;"	f	class:boost::container::map	access:public	signature:()
boost::container::map::emplace	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator emplace(Args&&... args)$/;"	f	class:boost::container::map	access:public	signature:(Args&&.... args)
boost::container::map::emplace_hint	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator emplace_hint(const_iterator hint)$/;"	f	class:boost::container::map	access:public	signature:(const_iterator hint)
boost::container::map::emplace_hint	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator emplace_hint(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::map	access:public	signature:(const_iterator hint, Args&&... args)
boost::container::map::empty	/usr/include/boost/interprocess/containers/container/map.hpp	/^   bool empty() const $/;"	f	class:boost::container::map	access:public	signature:() const
boost::container::map::end	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::map	access:public	signature:() const
boost::container::map::end	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator end() $/;"	f	class:boost::container::map	access:public	signature:()
boost::container::map::equal_range	/usr/include/boost/interprocess/containers/container/map.hpp	/^   std::pair<const_iterator,const_iterator> equal_range(const key_type& x) const $/;"	f	class:boost::container::map	access:public	signature:(const key_type& x) const
boost::container::map::equal_range	/usr/include/boost/interprocess/containers/container/map.hpp	/^   std::pair<iterator,iterator> equal_range(const key_type& x) $/;"	f	class:boost::container::map	access:public	signature:(const key_type& x)
boost::container::map::erase	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::map	access:public	signature:(const_iterator first, const_iterator last)
boost::container::map::erase	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator erase(const_iterator position) $/;"	f	class:boost::container::map	access:public	signature:(const_iterator position)
boost::container::map::erase	/usr/include/boost/interprocess/containers/container/map.hpp	/^   size_type erase(const key_type& x) $/;"	f	class:boost::container::map	access:public	signature:(const key_type& x)
boost::container::map::find	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_iterator find(const key_type& x) const $/;"	f	class:boost::container::map	access:public	signature:(const key_type& x) const
boost::container::map::find	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator find(const key_type& x) $/;"	f	class:boost::container::map	access:public	signature:(const key_type& x)
boost::container::map::get_allocator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::map	access:public	signature:() const
boost::container::map::get_stored_allocator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::map	access:public	signature:() const
boost::container::map::get_stored_allocator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::map	access:public	signature:()
boost::container::map::insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(iterator position, BOOST_INTERPROCESS_RV_REF(nonconst_impl_value_type) x)$/;"	f	class:boost::container::map	access:public	signature:(iterator position, BOOST_INTERPROCESS_RV_REF(nonconst_impl_value_type) x)
boost::container::map::insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(iterator position, BOOST_INTERPROCESS_RV_REF(nonconst_value_type) x)$/;"	f	class:boost::container::map	access:public	signature:(iterator position, BOOST_INTERPROCESS_RV_REF(nonconst_value_type) x)
boost::container::map::insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(iterator position, BOOST_INTERPROCESS_RV_REF(value_type) x)$/;"	f	class:boost::container::map	access:public	signature:(iterator position, BOOST_INTERPROCESS_RV_REF(value_type) x)
boost::container::map::insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(iterator position, const nonconst_value_type& x)$/;"	f	class:boost::container::map	access:public	signature:(iterator position, const nonconst_value_type& x)
boost::container::map::insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(iterator position, const value_type& x)$/;"	f	class:boost::container::map	access:public	signature:(iterator position, const value_type& x)
boost::container::map::insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   std::pair<iterator,bool> insert(const nonconst_value_type& x) $/;"	f	class:boost::container::map	access:public	signature:(const nonconst_value_type& x)
boost::container::map::insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   std::pair<iterator,bool> insert(const value_type& x) $/;"	f	class:boost::container::map	access:public	signature:(const value_type& x)
boost::container::map::insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   void insert(InputIterator first, InputIterator last) $/;"	f	class:boost::container::map	access:public	signature:(InputIterator first, InputIterator last)
boost::container::map::iterator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::iterator               iterator;$/;"	t	class:boost::container::map	access:public
boost::container::map::key_comp	/usr/include/boost/interprocess/containers/container/map.hpp	/^   key_compare key_comp() const $/;"	f	class:boost::container::map	access:public	signature:() const
boost::container::map::key_compare	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef Pred                                    key_compare;$/;"	t	class:boost::container::map	access:public
boost::container::map::key_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::key_type               key_type;$/;"	t	class:boost::container::map	access:public
boost::container::map::lower_bound	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_iterator lower_bound(const key_type& x) const $/;"	f	class:boost::container::map	access:public	signature:(const key_type& x) const
boost::container::map::lower_bound	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator lower_bound(const key_type& x) $/;"	f	class:boost::container::map	access:public	signature:(const key_type& x)
boost::container::map::map	/usr/include/boost/interprocess/containers/container/map.hpp	/^   explicit map(const Pred& comp = Pred(),$/;"	f	class:boost::container::map	access:public	signature:(const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::map::map	/usr/include/boost/interprocess/containers/container/map.hpp	/^   map( ordered_unique_range_t, InputIterator first, InputIterator last$/;"	f	class:boost::container::map	access:public	signature:( ordered_unique_range_t, InputIterator first, InputIterator last , const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::map::map	/usr/include/boost/interprocess/containers/container/map.hpp	/^   map(const map<Key,T,Pred,Alloc>& x) $/;"	f	class:boost::container::map	access:public	signature:(const map<Key,T,Pred,Alloc>& x)
boost::container::map::map	/usr/include/boost/interprocess/containers/container/map.hpp	/^   map(InputIterator first, InputIterator last, const Pred& comp = Pred(),$/;"	f	class:boost::container::map	access:public	signature:(InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::map::mapped_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef T                                       mapped_type;$/;"	t	class:boost::container::map	access:public
boost::container::map::max_size	/usr/include/boost/interprocess/containers/container/map.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::map	access:public	signature:() const
boost::container::map::move	/usr/include/boost/interprocess/containers/container/map.hpp	/^      : m_tree(boost::interprocess::move(x.m_tree))$/;"	f	class:boost::container::map	access:public	signature:(x.m_tree)
boost::container::map::m_tree	/usr/include/boost/interprocess/containers/container/map.hpp	/^   tree_t m_tree;  \/\/ red-black tree representing map$/;"	m	class:boost::container::map	access:private
boost::container::map::nonconst_impl_value_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^      <key_type, mapped_type>                      nonconst_impl_value_type;$/;"	t	class:boost::container::map	access:public
boost::container::map::nonconst_value_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef std::pair<key_type, mapped_type>        nonconst_value_type;$/;"	t	class:boost::container::map	access:public
boost::container::map::operator <	/usr/include/boost/interprocess/containers/container/map.hpp	/^   friend bool operator< (const map<K1, T1, C1, A1>&,$/;"	p	class:boost::container::map	access:friend	signature:(const map<K1, T1, C1, A1>&, const map<K1, T1, C1, A1>&)
boost::container::map::operator ==	/usr/include/boost/interprocess/containers/container/map.hpp	/^   friend bool operator== (const map<K1, T1, C1, A1>&,$/;"	p	class:boost::container::map	access:friend	signature:(const map<K1, T1, C1, A1>&, const map<K1, T1, C1, A1>&)
boost::container::map::operator []	/usr/include/boost/interprocess/containers/container/map.hpp	/^   T& operator[](const key_type& k) $/;"	f	class:boost::container::map	access:public	signature:(const key_type& k)
boost::container::map::pointer	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::pointer                pointer;$/;"	t	class:boost::container::map	access:public
boost::container::map::rbegin	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::map	access:public	signature:() const
boost::container::map::rbegin	/usr/include/boost/interprocess/containers/container/map.hpp	/^   reverse_iterator rbegin() $/;"	f	class:boost::container::map	access:public	signature:()
boost::container::map::reference	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::reference              reference;$/;"	t	class:boost::container::map	access:public
boost::container::map::rend	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_reverse_iterator rend() const $/;"	f	class:boost::container::map	access:public	signature:() const
boost::container::map::rend	/usr/include/boost/interprocess/containers/container/map.hpp	/^   reverse_iterator rend() $/;"	f	class:boost::container::map	access:public	signature:()
boost::container::map::reverse_iterator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::reverse_iterator       reverse_iterator;$/;"	t	class:boost::container::map	access:public
boost::container::map::size	/usr/include/boost/interprocess/containers/container/map.hpp	/^   size_type size() const $/;"	f	class:boost::container::map	access:public	signature:() const
boost::container::map::size_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::size_type              size_type;$/;"	t	class:boost::container::map	access:public
boost::container::map::stored_allocator_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::stored_allocator_type  stored_allocator_type;$/;"	t	class:boost::container::map	access:public
boost::container::map::swap	/usr/include/boost/interprocess/containers/container/map.hpp	/^   void swap(map& x)$/;"	f	class:boost::container::map	access:public	signature:(map& x)
boost::container::map::tree_t	/usr/include/boost/interprocess/containers/container/map.hpp	/^                           Alloc> tree_t;$/;"	t	class:boost::container::map	access:private
boost::container::map::upper_bound	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_iterator upper_bound(const key_type& x) const $/;"	f	class:boost::container::map	access:public	signature:(const key_type& x) const
boost::container::map::upper_bound	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator upper_bound(const key_type& x) $/;"	f	class:boost::container::map	access:public	signature:(const key_type& x)
boost::container::map::value_comp	/usr/include/boost/interprocess/containers/container/map.hpp	/^   value_compare value_comp() const $/;"	f	class:boost::container::map	access:public	signature:() const
boost::container::map::value_compare	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef value_compare_impl             value_compare;$/;"	t	class:boost::container::map	access:public
boost::container::map::value_compare_impl	/usr/include/boost/interprocess/containers/container/map.hpp	/^   class value_compare_impl$/;"	c	class:boost::container::map	inherits:Pred,std::binary_function	access:public
boost::container::map::value_compare_impl::operator ()	/usr/include/boost/interprocess/containers/container/map.hpp	/^      bool operator()(const value_type& x, const value_type& y) const {$/;"	f	class:boost::container::map::value_compare_impl	access:public	signature:(const value_type& x, const value_type& y) const
boost::container::map::value_compare_impl::value_compare_impl	/usr/include/boost/interprocess/containers/container/map.hpp	/^      value_compare_impl(const Pred &c) : Pred(c) {}$/;"	f	class:boost::container::map::value_compare_impl	access:protected	signature:(const Pred &c)
boost::container::map::value_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::value_type             value_type;$/;"	t	class:boost::container::map	access:public
boost::container::multimap	/usr/include/boost/interprocess/containers/container/map.hpp	/^class multimap $/;"	c	namespace:boost::container
boost::container::multimap::allocator_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::allocator_type         allocator_type;$/;"	t	class:boost::container::multimap	access:public
boost::container::multimap::begin	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
boost::container::multimap::begin	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator begin() $/;"	f	class:boost::container::multimap	access:public	signature:()
boost::container::multimap::clear	/usr/include/boost/interprocess/containers/container/map.hpp	/^   void clear() $/;"	f	class:boost::container::multimap	access:public	signature:()
boost::container::multimap::const_iterator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::const_iterator         const_iterator;$/;"	t	class:boost::container::multimap	access:public
boost::container::multimap::const_pointer	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::const_pointer          const_pointer;$/;"	t	class:boost::container::multimap	access:public
boost::container::multimap::const_reference	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::const_reference        const_reference;$/;"	t	class:boost::container::multimap	access:public
boost::container::multimap::const_reverse_iterator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::container::multimap	access:public
boost::container::multimap::count	/usr/include/boost/interprocess/containers/container/map.hpp	/^   size_type count(const key_type& x) const $/;"	f	class:boost::container::multimap	access:public	signature:(const key_type& x) const
boost::container::multimap::difference_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::difference_type        difference_type;$/;"	t	class:boost::container::multimap	access:public
boost::container::multimap::emplace	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator emplace()$/;"	f	class:boost::container::multimap	access:public	signature:()
boost::container::multimap::emplace	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator emplace(Args&&... args)$/;"	f	class:boost::container::multimap	access:public	signature:(Args&&.... args)
boost::container::multimap::emplace_hint	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator emplace_hint(const_iterator hint)$/;"	f	class:boost::container::multimap	access:public	signature:(const_iterator hint)
boost::container::multimap::emplace_hint	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator emplace_hint(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::multimap	access:public	signature:(const_iterator hint, Args&&... args)
boost::container::multimap::empty	/usr/include/boost/interprocess/containers/container/map.hpp	/^   bool empty() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
boost::container::multimap::end	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
boost::container::multimap::end	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator end() $/;"	f	class:boost::container::multimap	access:public	signature:()
boost::container::multimap::equal_range	/usr/include/boost/interprocess/containers/container/map.hpp	/^      equal_range(const key_type& x) const $/;"	f	class:boost::container::multimap	access:public	signature:(const key_type& x) const
boost::container::multimap::equal_range	/usr/include/boost/interprocess/containers/container/map.hpp	/^   std::pair<iterator,iterator> equal_range(const key_type& x) $/;"	f	class:boost::container::multimap	access:public	signature:(const key_type& x)
boost::container::multimap::erase	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::multimap	access:public	signature:(const_iterator first, const_iterator last)
boost::container::multimap::erase	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator erase(const_iterator position) $/;"	f	class:boost::container::multimap	access:public	signature:(const_iterator position)
boost::container::multimap::erase	/usr/include/boost/interprocess/containers/container/map.hpp	/^   size_type erase(const key_type& x) $/;"	f	class:boost::container::multimap	access:public	signature:(const key_type& x)
boost::container::multimap::find	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_iterator find(const key_type& x) const $/;"	f	class:boost::container::multimap	access:public	signature:(const key_type& x) const
boost::container::multimap::find	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator find(const key_type& x) $/;"	f	class:boost::container::multimap	access:public	signature:(const key_type& x)
boost::container::multimap::get_allocator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
boost::container::multimap::get_stored_allocator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
boost::container::multimap::get_stored_allocator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::multimap	access:public	signature:()
boost::container::multimap::insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(const nonconst_value_type& x) $/;"	f	class:boost::container::multimap	access:public	signature:(const nonconst_value_type& x)
boost::container::multimap::insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(const value_type& x) $/;"	f	class:boost::container::multimap	access:public	signature:(const value_type& x)
boost::container::multimap::insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(iterator position, BOOST_INTERPROCESS_RV_REF(nonconst_impl_value_type) x)$/;"	f	class:boost::container::multimap	access:public	signature:(iterator position, BOOST_INTERPROCESS_RV_REF(nonconst_impl_value_type) x)
boost::container::multimap::insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(iterator position, BOOST_INTERPROCESS_RV_REF(nonconst_value_type) x)$/;"	f	class:boost::container::multimap	access:public	signature:(iterator position, BOOST_INTERPROCESS_RV_REF(nonconst_value_type) x)
boost::container::multimap::insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(iterator position, const nonconst_value_type& x)$/;"	f	class:boost::container::multimap	access:public	signature:(iterator position, const nonconst_value_type& x)
boost::container::multimap::insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(iterator position, const value_type& x)$/;"	f	class:boost::container::multimap	access:public	signature:(iterator position, const value_type& x)
boost::container::multimap::insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   void insert(InputIterator first, InputIterator last) $/;"	f	class:boost::container::multimap	access:public	signature:(InputIterator first, InputIterator last)
boost::container::multimap::iterator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::iterator               iterator;$/;"	t	class:boost::container::multimap	access:public
boost::container::multimap::key_comp	/usr/include/boost/interprocess/containers/container/map.hpp	/^   key_compare key_comp() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
boost::container::multimap::key_compare	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef Pred                                    key_compare;$/;"	t	class:boost::container::multimap	access:public
boost::container::multimap::key_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::key_type               key_type;$/;"	t	class:boost::container::multimap	access:public
boost::container::multimap::lower_bound	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_iterator lower_bound(const key_type& x) const $/;"	f	class:boost::container::multimap	access:public	signature:(const key_type& x) const
boost::container::multimap::lower_bound	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator lower_bound(const key_type& x) $/;"	f	class:boost::container::multimap	access:public	signature:(const key_type& x)
boost::container::multimap::mapped_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef T                                       mapped_type;$/;"	t	class:boost::container::multimap	access:public
boost::container::multimap::max_size	/usr/include/boost/interprocess/containers/container/map.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
boost::container::multimap::move	/usr/include/boost/interprocess/containers/container/map.hpp	/^      : m_tree(boost::interprocess::move(x.m_tree))$/;"	f	class:boost::container::multimap	access:public	signature:(x.m_tree)
boost::container::multimap::multimap	/usr/include/boost/interprocess/containers/container/map.hpp	/^   explicit multimap(const Pred& comp = Pred(),$/;"	f	class:boost::container::multimap	access:public	signature:(const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::multimap::multimap	/usr/include/boost/interprocess/containers/container/map.hpp	/^   multimap(const multimap<Key,T,Pred,Alloc>& x) $/;"	f	class:boost::container::multimap	access:public	signature:(const multimap<Key,T,Pred,Alloc>& x)
boost::container::multimap::multimap	/usr/include/boost/interprocess/containers/container/map.hpp	/^   multimap(InputIterator first, InputIterator last,$/;"	f	class:boost::container::multimap	access:public	signature:(InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::multimap::multimap	/usr/include/boost/interprocess/containers/container/map.hpp	/^   multimap(ordered_range_t ordered_range, InputIterator first, InputIterator last, const Pred& comp = Pred(),$/;"	f	class:boost::container::multimap	access:public	signature:(ordered_range_t ordered_range, InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::multimap::m_tree	/usr/include/boost/interprocess/containers/container/map.hpp	/^   tree_t m_tree;  \/\/ red-black tree representing map$/;"	m	class:boost::container::multimap	access:private
boost::container::multimap::nonconst_impl_value_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^      <key_type, mapped_type>                      nonconst_impl_value_type;$/;"	t	class:boost::container::multimap	access:public
boost::container::multimap::nonconst_value_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef std::pair<key_type, mapped_type>        nonconst_value_type;$/;"	t	class:boost::container::multimap	access:public
boost::container::multimap::operator <	/usr/include/boost/interprocess/containers/container/map.hpp	/^   friend bool operator< (const multimap<K1, T1, C1, A1>& x,$/;"	p	class:boost::container::multimap	access:friend	signature:(const multimap<K1, T1, C1, A1>& x, const multimap<K1, T1, C1, A1>& y)
boost::container::multimap::operator ==	/usr/include/boost/interprocess/containers/container/map.hpp	/^   friend bool operator== (const multimap<K1, T1, C1, A1>& x,$/;"	p	class:boost::container::multimap	access:friend	signature:(const multimap<K1, T1, C1, A1>& x, const multimap<K1, T1, C1, A1>& y)
boost::container::multimap::pointer	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::pointer                pointer;$/;"	t	class:boost::container::multimap	access:public
boost::container::multimap::rbegin	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
boost::container::multimap::rbegin	/usr/include/boost/interprocess/containers/container/map.hpp	/^   reverse_iterator rbegin() $/;"	f	class:boost::container::multimap	access:public	signature:()
boost::container::multimap::reference	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::reference              reference;$/;"	t	class:boost::container::multimap	access:public
boost::container::multimap::rend	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_reverse_iterator rend() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
boost::container::multimap::rend	/usr/include/boost/interprocess/containers/container/map.hpp	/^   reverse_iterator rend() $/;"	f	class:boost::container::multimap	access:public	signature:()
boost::container::multimap::reverse_iterator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::reverse_iterator       reverse_iterator;$/;"	t	class:boost::container::multimap	access:public
boost::container::multimap::size	/usr/include/boost/interprocess/containers/container/map.hpp	/^   size_type size() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
boost::container::multimap::size_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::size_type              size_type;$/;"	t	class:boost::container::multimap	access:public
boost::container::multimap::stored_allocator_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::stored_allocator_type  stored_allocator_type;$/;"	t	class:boost::container::multimap	access:public
boost::container::multimap::swap	/usr/include/boost/interprocess/containers/container/map.hpp	/^   void swap(multimap& x)$/;"	f	class:boost::container::multimap	access:public	signature:(multimap& x)
boost::container::multimap::tree_t	/usr/include/boost/interprocess/containers/container/map.hpp	/^                           Alloc> tree_t;$/;"	t	class:boost::container::multimap	access:private
boost::container::multimap::upper_bound	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_iterator upper_bound(const key_type& x) const $/;"	f	class:boost::container::multimap	access:public	signature:(const key_type& x) const
boost::container::multimap::upper_bound	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator upper_bound(const key_type& x) $/;"	f	class:boost::container::multimap	access:public	signature:(const key_type& x)
boost::container::multimap::value_comp	/usr/include/boost/interprocess/containers/container/map.hpp	/^   value_compare value_comp() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
boost::container::multimap::value_compare	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef value_compare_impl                      value_compare;$/;"	t	class:boost::container::multimap	access:public
boost::container::multimap::value_compare_impl	/usr/include/boost/interprocess/containers/container/map.hpp	/^   class value_compare_impl$/;"	c	class:boost::container::multimap	inherits:Pred,std::binary_function	access:public
boost::container::multimap::value_compare_impl::operator ()	/usr/include/boost/interprocess/containers/container/map.hpp	/^      bool operator()(const value_type& x, const value_type& y) const {$/;"	f	class:boost::container::multimap::value_compare_impl	access:public	signature:(const value_type& x, const value_type& y) const
boost::container::multimap::value_compare_impl::value_compare_impl	/usr/include/boost/interprocess/containers/container/map.hpp	/^      value_compare_impl(const Pred &c) : Pred(c) {}$/;"	f	class:boost::container::multimap::value_compare_impl	access:protected	signature:(const Pred &c)
boost::container::multimap::value_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::value_type             value_type;$/;"	t	class:boost::container::multimap	access:public
boost::container::multiset	/usr/include/boost/interprocess/containers/container/set.hpp	/^class multiset $/;"	c	namespace:boost::container
boost::container::multiset::allocator_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::allocator_type         allocator_type;$/;"	t	class:boost::container::multiset	access:public
boost::container::multiset::begin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
boost::container::multiset::begin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator begin() $/;"	f	class:boost::container::multiset	access:public	signature:()
boost::container::multiset::cbegin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator cbegin() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
boost::container::multiset::cend	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator cend() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
boost::container::multiset::clear	/usr/include/boost/interprocess/containers/container/set.hpp	/^   void clear() $/;"	f	class:boost::container::multiset	access:public	signature:()
boost::container::multiset::const_iterator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::const_iterator         const_iterator;$/;"	t	class:boost::container::multiset	access:public
boost::container::multiset::const_pointer	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::const_pointer          const_pointer;$/;"	t	class:boost::container::multiset	access:public
boost::container::multiset::const_reference	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::const_reference        const_reference;$/;"	t	class:boost::container::multiset	access:public
boost::container::multiset::const_reverse_iterator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::container::multiset	access:public
boost::container::multiset::count	/usr/include/boost/interprocess/containers/container/set.hpp	/^   size_type count(const key_type& x) const $/;"	f	class:boost::container::multiset	access:public	signature:(const key_type& x) const
boost::container::multiset::crbegin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_reverse_iterator crbegin() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
boost::container::multiset::crend	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_reverse_iterator crend() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
boost::container::multiset::difference_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::difference_type        difference_type;$/;"	t	class:boost::container::multiset	access:public
boost::container::multiset::emplace	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator emplace()$/;"	f	class:boost::container::multiset	access:public	signature:()
boost::container::multiset::emplace	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator emplace(Args&&... args)$/;"	f	class:boost::container::multiset	access:public	signature:(Args&&.... args)
boost::container::multiset::emplace_hint	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator emplace_hint(const_iterator hint)$/;"	f	class:boost::container::multiset	access:public	signature:(const_iterator hint)
boost::container::multiset::emplace_hint	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator emplace_hint(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::multiset	access:public	signature:(const_iterator hint, Args&&... args)
boost::container::multiset::empty	/usr/include/boost/interprocess/containers/container/set.hpp	/^   bool empty() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
boost::container::multiset::end	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
boost::container::multiset::end	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator end() $/;"	f	class:boost::container::multiset	access:public	signature:()
boost::container::multiset::equal_range	/usr/include/boost/interprocess/containers/container/set.hpp	/^      equal_range(const key_type& x) $/;"	f	class:boost::container::multiset	access:public	signature:(const key_type& x)
boost::container::multiset::equal_range	/usr/include/boost/interprocess/containers/container/set.hpp	/^      equal_range(const key_type& x) const $/;"	f	class:boost::container::multiset	access:public	signature:(const key_type& x) const
boost::container::multiset::erase	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::multiset	access:public	signature:(const_iterator first, const_iterator last)
boost::container::multiset::erase	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator erase(const_iterator p) $/;"	f	class:boost::container::multiset	access:public	signature:(const_iterator p)
boost::container::multiset::erase	/usr/include/boost/interprocess/containers/container/set.hpp	/^   size_type erase(const key_type& x) $/;"	f	class:boost::container::multiset	access:public	signature:(const key_type& x)
boost::container::multiset::find	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator find(const key_type& x) const $/;"	f	class:boost::container::multiset	access:public	signature:(const key_type& x) const
boost::container::multiset::find	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator find(const key_type& x) $/;"	f	class:boost::container::multiset	access:public	signature:(const key_type& x)
boost::container::multiset::get_allocator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
boost::container::multiset::get_stored_allocator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
boost::container::multiset::get_stored_allocator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::multiset	access:public	signature:()
boost::container::multiset::insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::multiset	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
boost::container::multiset::insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(const_iterator p, BOOST_INTERPROCESS_RV_REF(value_type) x) $/;"	f	class:boost::container::multiset	access:public	signature:(const_iterator p, BOOST_INTERPROCESS_RV_REF(value_type) x)
boost::container::multiset::insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(const_iterator p, insert_const_ref_type x) $/;"	f	class:boost::container::multiset	access:public	signature:(const_iterator p, insert_const_ref_type x)
boost::container::multiset::insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::multiset	access:public	signature:(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
boost::container::multiset::insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(const_iterator position, T &x)$/;"	f	class:boost::container::multiset	access:public	signature:(const_iterator position, T &x)
boost::container::multiset::insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(insert_const_ref_type x) $/;"	f	class:boost::container::multiset	access:public	signature:(insert_const_ref_type x)
boost::container::multiset::insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(T &x)$/;"	f	class:boost::container::multiset	access:public	signature:(T &x)
boost::container::multiset::insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   void insert(InputIterator first, InputIterator last) $/;"	f	class:boost::container::multiset	access:public	signature:(InputIterator first, InputIterator last)
boost::container::multiset::insert_const_ref_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^      move_const_ref_type<T>::type insert_const_ref_type;$/;"	t	class:boost::container::multiset	access:private
boost::container::multiset::iterator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::iterator               iterator;$/;"	t	class:boost::container::multiset	access:public
boost::container::multiset::key_comp	/usr/include/boost/interprocess/containers/container/set.hpp	/^   key_compare key_comp() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
boost::container::multiset::key_compare	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef Pred                                    key_compare;$/;"	t	class:boost::container::multiset	access:public
boost::container::multiset::key_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::key_type               key_type;$/;"	t	class:boost::container::multiset	access:public
boost::container::multiset::lower_bound	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator lower_bound(const key_type& x) const $/;"	f	class:boost::container::multiset	access:public	signature:(const key_type& x) const
boost::container::multiset::lower_bound	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator lower_bound(const key_type& x) $/;"	f	class:boost::container::multiset	access:public	signature:(const key_type& x)
boost::container::multiset::max_size	/usr/include/boost/interprocess/containers/container/set.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
boost::container::multiset::move	/usr/include/boost/interprocess/containers/container/set.hpp	/^      : m_tree(boost::interprocess::move(x.m_tree))$/;"	f	class:boost::container::multiset	access:public	signature:(x.m_tree)
boost::container::multiset::multiset	/usr/include/boost/interprocess/containers/container/set.hpp	/^   explicit multiset(const Pred& comp = Pred(),$/;"	f	class:boost::container::multiset	access:public	signature:(const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::multiset::multiset	/usr/include/boost/interprocess/containers/container/set.hpp	/^   multiset( ordered_range_t ordered_range, InputIterator first, InputIterator last$/;"	f	class:boost::container::multiset	access:public	signature:( ordered_range_t ordered_range, InputIterator first, InputIterator last , const Pred& comp = Pred() , const allocator_type& a = allocator_type())
boost::container::multiset::multiset	/usr/include/boost/interprocess/containers/container/set.hpp	/^   multiset(const multiset& x) $/;"	f	class:boost::container::multiset	access:public	signature:(const multiset& x)
boost::container::multiset::multiset	/usr/include/boost/interprocess/containers/container/set.hpp	/^   multiset(InputIterator first, InputIterator last,$/;"	f	class:boost::container::multiset	access:public	signature:(InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::multiset::m_tree	/usr/include/boost/interprocess/containers/container/set.hpp	/^   tree_t m_tree;  \/\/ red-black tree representing multiset$/;"	m	class:boost::container::multiset	access:private
boost::container::multiset::operator <	/usr/include/boost/interprocess/containers/container/set.hpp	/^   friend bool operator< (const multiset<K1,C1,A1>&,$/;"	p	class:boost::container::multiset	access:friend	signature:(const multiset<K1,C1,A1>&, const multiset<K1,C1,A1>&)
boost::container::multiset::operator ==	/usr/include/boost/interprocess/containers/container/set.hpp	/^   friend bool operator== (const multiset<K1,C1,A1>&,$/;"	p	class:boost::container::multiset	access:friend	signature:(const multiset<K1,C1,A1>&, const multiset<K1,C1,A1>&)
boost::container::multiset::pointer	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::pointer                pointer;$/;"	t	class:boost::container::multiset	access:public
boost::container::multiset::priv_insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator priv_insert(const T &x) $/;"	f	class:boost::container::multiset	access:private	signature:(const T &x)
boost::container::multiset::priv_insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator priv_insert(const_iterator p, const T &x) $/;"	f	class:boost::container::multiset	access:private	signature:(const_iterator p, const T &x)
boost::container::multiset::rbegin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
boost::container::multiset::rbegin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   reverse_iterator rbegin() $/;"	f	class:boost::container::multiset	access:public	signature:()
boost::container::multiset::reference	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::reference              reference;$/;"	t	class:boost::container::multiset	access:public
boost::container::multiset::rend	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_reverse_iterator rend() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
boost::container::multiset::rend	/usr/include/boost/interprocess/containers/container/set.hpp	/^   reverse_iterator rend() $/;"	f	class:boost::container::multiset	access:public	signature:()
boost::container::multiset::reverse_iterator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::reverse_iterator       reverse_iterator;$/;"	t	class:boost::container::multiset	access:public
boost::container::multiset::size	/usr/include/boost/interprocess/containers/container/set.hpp	/^   size_type size() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
boost::container::multiset::size_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::size_type              size_type;$/;"	t	class:boost::container::multiset	access:public
boost::container::multiset::stored_allocator_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::stored_allocator_type  stored_allocator_type;$/;"	t	class:boost::container::multiset	access:public
boost::container::multiset::swap	/usr/include/boost/interprocess/containers/container/set.hpp	/^   void swap(multiset& x)$/;"	f	class:boost::container::multiset	access:public	signature:(multiset& x)
boost::container::multiset::tree_t	/usr/include/boost/interprocess/containers/container/set.hpp	/^                     containers_detail::identity<T>, Pred, Alloc> tree_t;$/;"	t	class:boost::container::multiset	access:private
boost::container::multiset::upper_bound	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator upper_bound(const key_type& x) const $/;"	f	class:boost::container::multiset	access:public	signature:(const key_type& x) const
boost::container::multiset::upper_bound	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator upper_bound(const key_type& x)$/;"	f	class:boost::container::multiset	access:public	signature:(const key_type& x)
boost::container::multiset::value_comp	/usr/include/boost/interprocess/containers/container/set.hpp	/^   value_compare value_comp() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
boost::container::multiset::value_compare	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef Pred                                    value_compare;$/;"	t	class:boost::container::multiset	access:public
boost::container::multiset::value_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::value_type             value_type;$/;"	t	class:boost::container::multiset	access:public
boost::container::mx	/usr/include/boost/interprocess/containers/container/string.hpp	/^   BOOST_INTERPROCESS_RV_REF_3_TEMPL_ARGS(basic_string, CharT, Traits, A) mx$/;"	m	namespace:boost::container
boost::container::mx	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator+( BOOST_INTERPROCESS_RV_REF_3_TEMPL_ARGS(basic_string, CharT, Traits, A) mx$/;"	m	namespace:boost::container
boost::container::mx	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator+(BOOST_INTERPROCESS_RV_REF_3_TEMPL_ARGS(basic_string, CharT, Traits, A) mx$/;"	m	namespace:boost::container
boost::container::nothrow_allocation	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^static const allocation_type nothrow_allocation = (allocation_type)nothrow_allocation_v;$/;"	m	namespace:boost::container
boost::container::nothrow_allocation_v	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^   nothrow_allocation_v = 0x10,$/;"	e	enum:boost::container::allocation_type_v
boost::container::operator !=	/usr/include/boost/interprocess/containers/container/deque.hpp	/^inline bool operator!=(const deque<T, Alloc>& x,$/;"	f	namespace:boost::container	signature:(const deque<T, Alloc>& x, const deque<T, Alloc>& y)
boost::container::operator !=	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator!=(const flat_map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_map<Key,T,Pred,Alloc>& x, const flat_map<Key,T,Pred,Alloc>& y)
boost::container::operator !=	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator!=(const flat_multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multimap<Key,T,Pred,Alloc>& x, const flat_multimap<Key,T,Pred,Alloc>& y)
boost::container::operator !=	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator!=(const flat_multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multiset<T,Pred,Alloc>& x, const flat_multiset<T,Pred,Alloc>& y)
boost::container::operator !=	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator!=(const flat_set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_set<T,Pred,Alloc>& x, const flat_set<T,Pred,Alloc>& y)
boost::container::operator !=	/usr/include/boost/interprocess/containers/container/list.hpp	/^inline bool operator!=(const list<T,A>& x, const list<T,A>& y) $/;"	f	namespace:boost::container	signature:(const list<T,A>& x, const list<T,A>& y)
boost::container::operator !=	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator!=(const map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const map<Key,T,Pred,Alloc>& x, const map<Key,T,Pred,Alloc>& y)
boost::container::operator !=	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator!=(const multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multimap<Key,T,Pred,Alloc>& x, const multimap<Key,T,Pred,Alloc>& y)
boost::container::operator !=	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator!=(const multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multiset<T,Pred,Alloc>& x, const multiset<T,Pred,Alloc>& y)
boost::container::operator !=	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator!=(const set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const set<T,Pred,Alloc>& x, const set<T,Pred,Alloc>& y)
boost::container::operator !=	/usr/include/boost/interprocess/containers/container/slist.hpp	/^operator!=(const slist<T,A>& sL1, const slist<T,A>& sL2) $/;"	f	namespace:boost::container	signature:(const slist<T,A>& sL1, const slist<T,A>& sL2)
boost::container::operator !=	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^bool operator!=(const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)$/;"	f	namespace:boost::container	signature:(const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)
boost::container::operator !=	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator!=(const basic_string<CharT,Traits,A>& x, const CharT* s) $/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const CharT* s)
boost::container::operator !=	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator!=(const basic_string<CharT,Traits,A>& x,$/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const basic_string<CharT,Traits,A>& y)
boost::container::operator !=	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator!=(const CharT* s, const basic_string<CharT,Traits,A>& y) $/;"	f	namespace:boost::container	signature:(const CharT* s, const basic_string<CharT,Traits,A>& y)
boost::container::operator !=	/usr/include/boost/interprocess/containers/container/vector.hpp	/^operator!=(const vector<T, A>& x, const vector<T, A>& y)$/;"	f	namespace:boost::container	signature:(const vector<T, A>& x, const vector<T, A>& y)
boost::container::operator +	/usr/include/boost/interprocess/containers/container/string.hpp	/^   operator+(const basic_string<CharT,Traits,A>& x,$/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, BOOST_INTERPROCESS_RV_REF_3_TEMPL_ARGS(basic_string, CharT, Traits, A) my)
boost::container::operator +	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator+(CharT c, const basic_string<CharT,Traits,A>& y) $/;"	f	namespace:boost::container	signature:(CharT c, const basic_string<CharT,Traits,A>& y)
boost::container::operator +	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator+(CharT c,$/;"	f	namespace:boost::container	signature:(CharT c, BOOST_INTERPROCESS_RV_REF_3_TEMPL_ARGS(basic_string, CharT, Traits, A) my)
boost::container::operator +	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator+(const basic_string<CharT,Traits,A>& x, const CharT c) $/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const CharT c)
boost::container::operator +	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator+(const basic_string<CharT,Traits,A>& x, const CharT* s) $/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const CharT* s)
boost::container::operator +	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator+(const basic_string<CharT,Traits,A>& x,$/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const basic_string<CharT,Traits,A>& y)
boost::container::operator +	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator+(const CharT* s, const basic_string<CharT,Traits,A>& y) $/;"	f	namespace:boost::container	signature:(const CharT* s, const basic_string<CharT,Traits,A>& y)
boost::container::operator +	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator+(const CharT* s,$/;"	f	namespace:boost::container	signature:(const CharT* s, BOOST_INTERPROCESS_RV_REF_3_TEMPL_ARGS(basic_string, CharT, Traits, A) my)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/deque.hpp	/^inline bool operator<(const deque<T, Alloc>& x,$/;"	f	namespace:boost::container	signature:(const deque<T, Alloc>& x, const deque<T, Alloc>& y)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator<(const flat_map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_map<Key,T,Pred,Alloc>& x, const flat_map<Key,T,Pred,Alloc>& y)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator<(const flat_map<Key,T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const flat_map<Key,T,Pred,Alloc>& x, const flat_map<Key,T,Pred,Alloc>& y)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator<(const flat_multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multimap<Key,T,Pred,Alloc>& x, const flat_multimap<Key,T,Pred,Alloc>& y)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator<(const flat_multimap<Key,T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const flat_multimap<Key,T,Pred,Alloc>& x, const flat_multimap<Key,T,Pred,Alloc>& y)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator<(const flat_multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multiset<T,Pred,Alloc>& x, const flat_multiset<T,Pred,Alloc>& y)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator<(const flat_multiset<T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const flat_multiset<T,Pred,Alloc>& x, const flat_multiset<T,Pred,Alloc>& y)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator<(const flat_set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_set<T,Pred,Alloc>& x, const flat_set<T,Pred,Alloc>& y)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator<(const flat_set<T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const flat_set<T,Pred,Alloc>& x, const flat_set<T,Pred,Alloc>& y)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/list.hpp	/^inline bool operator<(const list<T,A>& x,$/;"	f	namespace:boost::container	signature:(const list<T,A>& x, const list<T,A>& y)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator<(const map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const map<Key,T,Pred,Alloc>& x, const map<Key,T,Pred,Alloc>& y)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator<(const map<Key,T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const map<Key,T,Pred,Alloc>& x, const map<Key,T,Pred,Alloc>& y)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator<(const multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multimap<Key,T,Pred,Alloc>& x, const multimap<Key,T,Pred,Alloc>& y)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator<(const multimap<Key,T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const multimap<Key,T,Pred,Alloc>& x, const multimap<Key,T,Pred,Alloc>& y)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator<(const multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multiset<T,Pred,Alloc>& x, const multiset<T,Pred,Alloc>& y)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator<(const multiset<T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const multiset<T,Pred,Alloc>& x, const multiset<T,Pred,Alloc>& y)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator<(const set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const set<T,Pred,Alloc>& x, const set<T,Pred,Alloc>& y)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator<(const set<T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const set<T,Pred,Alloc>& x, const set<T,Pred,Alloc>& y)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/slist.hpp	/^operator<(const slist<T,A>& sL1, const slist<T,A>& sL2)$/;"	f	namespace:boost::container	signature:(const slist<T,A>& sL1, const slist<T,A>& sL2)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^bool operator< (const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)$/;"	f	namespace:boost::container	signature:(const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator<(const basic_string<CharT,Traits,A>& x, const basic_string<CharT,Traits,A>& y) $/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const basic_string<CharT,Traits,A>& y)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator<(const basic_string<CharT,Traits,A>& x,$/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const CharT* s)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator<(const CharT* s, const basic_string<CharT,Traits,A>& y) $/;"	f	namespace:boost::container	signature:(const CharT* s, const basic_string<CharT,Traits,A>& y)
boost::container::operator <	/usr/include/boost/interprocess/containers/container/vector.hpp	/^operator<(const vector<T, A>& x, const vector<T, A>& y)$/;"	f	namespace:boost::container	signature:(const vector<T, A>& x, const vector<T, A>& y)
boost::container::operator <<	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator<<(std::basic_ostream<CharT, Traits>& os, const basic_string<CharT,Traits,A>& s)$/;"	f	namespace:boost::container	signature:(std::basic_ostream<CharT, Traits>& os, const basic_string<CharT,Traits,A>& s)
boost::container::operator <=	/usr/include/boost/interprocess/containers/container/deque.hpp	/^inline bool operator<=(const deque<T, Alloc>& x,$/;"	f	namespace:boost::container	signature:(const deque<T, Alloc>& x, const deque<T, Alloc>& y)
boost::container::operator <=	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator<=(const flat_map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_map<Key,T,Pred,Alloc>& x, const flat_map<Key,T,Pred,Alloc>& y)
boost::container::operator <=	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator<=(const flat_multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multimap<Key,T,Pred,Alloc>& x, const flat_multimap<Key,T,Pred,Alloc>& y)
boost::container::operator <=	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator<=(const flat_multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multiset<T,Pred,Alloc>& x, const flat_multiset<T,Pred,Alloc>& y)
boost::container::operator <=	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator<=(const flat_set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_set<T,Pred,Alloc>& x, const flat_set<T,Pred,Alloc>& y)
boost::container::operator <=	/usr/include/boost/interprocess/containers/container/list.hpp	/^inline bool operator<=(const list<T,A>& x, const list<T,A>& y) $/;"	f	namespace:boost::container	signature:(const list<T,A>& x, const list<T,A>& y)
boost::container::operator <=	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator<=(const map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const map<Key,T,Pred,Alloc>& x, const map<Key,T,Pred,Alloc>& y)
boost::container::operator <=	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator<=(const multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multimap<Key,T,Pred,Alloc>& x, const multimap<Key,T,Pred,Alloc>& y)
boost::container::operator <=	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator<=(const multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multiset<T,Pred,Alloc>& x, const multiset<T,Pred,Alloc>& y)
boost::container::operator <=	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator<=(const set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const set<T,Pred,Alloc>& x, const set<T,Pred,Alloc>& y)
boost::container::operator <=	/usr/include/boost/interprocess/containers/container/slist.hpp	/^operator<=(const slist<T,A>& sL1, const slist<T,A>& sL2)$/;"	f	namespace:boost::container	signature:(const slist<T,A>& sL1, const slist<T,A>& sL2)
boost::container::operator <=	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^bool operator<=(const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)$/;"	f	namespace:boost::container	signature:(const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)
boost::container::operator <=	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator<=(const basic_string<CharT,Traits,A>& x, const CharT* s) $/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const CharT* s)
boost::container::operator <=	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator<=(const basic_string<CharT,Traits,A>& x,$/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const basic_string<CharT,Traits,A>& y)
boost::container::operator <=	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator<=(const CharT* s, const basic_string<CharT,Traits,A>& y) $/;"	f	namespace:boost::container	signature:(const CharT* s, const basic_string<CharT,Traits,A>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/deque.hpp	/^inline bool operator==(const deque<T, Alloc>& x,$/;"	f	namespace:boost::container	signature:(const deque<T, Alloc>& x, const deque<T, Alloc>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator==(const flat_map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_map<Key,T,Pred,Alloc>& x, const flat_map<Key,T,Pred,Alloc>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator==(const flat_map<Key,T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const flat_map<Key,T,Pred,Alloc>& x, const flat_map<Key,T,Pred,Alloc>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator==(const flat_multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multimap<Key,T,Pred,Alloc>& x, const flat_multimap<Key,T,Pred,Alloc>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator==(const flat_multimap<Key,T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const flat_multimap<Key,T,Pred,Alloc>& x, const flat_multimap<Key,T,Pred,Alloc>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator==(const flat_multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multiset<T,Pred,Alloc>& x, const flat_multiset<T,Pred,Alloc>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator==(const flat_multiset<T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const flat_multiset<T,Pred,Alloc>& x, const flat_multiset<T,Pred,Alloc>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator==(const flat_set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_set<T,Pred,Alloc>& x, const flat_set<T,Pred,Alloc>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator==(const flat_set<T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const flat_set<T,Pred,Alloc>& x, const flat_set<T,Pred,Alloc>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/list.hpp	/^inline bool operator==(const list<T,A>& x, const list<T,A>& y)$/;"	f	namespace:boost::container	signature:(const list<T,A>& x, const list<T,A>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator==(const map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const map<Key,T,Pred,Alloc>& x, const map<Key,T,Pred,Alloc>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator==(const map<Key,T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const map<Key,T,Pred,Alloc>& x, const map<Key,T,Pred,Alloc>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator==(const multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multimap<Key,T,Pred,Alloc>& x, const multimap<Key,T,Pred,Alloc>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator==(const multimap<Key,T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const multimap<Key,T,Pred,Alloc>& x, const multimap<Key,T,Pred,Alloc>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator==(const multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multiset<T,Pred,Alloc>& x, const multiset<T,Pred,Alloc>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator==(const multiset<T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const multiset<T,Pred,Alloc>& x, const multiset<T,Pred,Alloc>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator==(const set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const set<T,Pred,Alloc>& x, const set<T,Pred,Alloc>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator==(const set<T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const set<T,Pred,Alloc>& x, const set<T,Pred,Alloc>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/slist.hpp	/^operator==(const slist<T,A>& x, const slist<T,A>& y)$/;"	f	namespace:boost::container	signature:(const slist<T,A>& x, const slist<T,A>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^bool operator==(const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)$/;"	f	namespace:boost::container	signature:(const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator==(const basic_string<CharT,Traits,A>& x, const CharT* s) $/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const CharT* s)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator==(const basic_string<CharT,Traits,A>& x,$/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const basic_string<CharT,Traits,A>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator==(const CharT* s, const basic_string<CharT,Traits,A>& y) $/;"	f	namespace:boost::container	signature:(const CharT* s, const basic_string<CharT,Traits,A>& y)
boost::container::operator ==	/usr/include/boost/interprocess/containers/container/vector.hpp	/^operator==(const vector<T, A>& x, const vector<T, A>& y)$/;"	f	namespace:boost::container	signature:(const vector<T, A>& x, const vector<T, A>& y)
boost::container::operator >	/usr/include/boost/interprocess/containers/container/deque.hpp	/^inline bool operator>(const deque<T, Alloc>& x,$/;"	f	namespace:boost::container	signature:(const deque<T, Alloc>& x, const deque<T, Alloc>& y)
boost::container::operator >	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator>(const flat_map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_map<Key,T,Pred,Alloc>& x, const flat_map<Key,T,Pred,Alloc>& y)
boost::container::operator >	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator>(const flat_multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multimap<Key,T,Pred,Alloc>& x, const flat_multimap<Key,T,Pred,Alloc>& y)
boost::container::operator >	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator>(const flat_multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multiset<T,Pred,Alloc>& x, const flat_multiset<T,Pred,Alloc>& y)
boost::container::operator >	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator>(const flat_set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_set<T,Pred,Alloc>& x, const flat_set<T,Pred,Alloc>& y)
boost::container::operator >	/usr/include/boost/interprocess/containers/container/list.hpp	/^inline bool operator>(const list<T,A>& x, const list<T,A>& y) $/;"	f	namespace:boost::container	signature:(const list<T,A>& x, const list<T,A>& y)
boost::container::operator >	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator>(const map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const map<Key,T,Pred,Alloc>& x, const map<Key,T,Pred,Alloc>& y)
boost::container::operator >	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator>(const multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multimap<Key,T,Pred,Alloc>& x, const multimap<Key,T,Pred,Alloc>& y)
boost::container::operator >	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator>(const multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multiset<T,Pred,Alloc>& x, const multiset<T,Pred,Alloc>& y)
boost::container::operator >	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator>(const set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const set<T,Pred,Alloc>& x, const set<T,Pred,Alloc>& y)
boost::container::operator >	/usr/include/boost/interprocess/containers/container/slist.hpp	/^operator>(const slist<T,A>& sL1, const slist<T,A>& sL2) $/;"	f	namespace:boost::container	signature:(const slist<T,A>& sL1, const slist<T,A>& sL2)
boost::container::operator >	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^bool operator> (const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)$/;"	f	namespace:boost::container	signature:(const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)
boost::container::operator >	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator>(const basic_string<CharT,Traits,A>& x, const CharT* s) $/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const CharT* s)
boost::container::operator >	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator>(const basic_string<CharT,Traits,A>& x,$/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const basic_string<CharT,Traits,A>& y)
boost::container::operator >	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator>(const CharT* s, const basic_string<CharT,Traits,A>& y) {$/;"	f	namespace:boost::container	signature:(const CharT* s, const basic_string<CharT,Traits,A>& y)
boost::container::operator >=	/usr/include/boost/interprocess/containers/container/deque.hpp	/^inline bool operator>=(const deque<T, Alloc>& x,$/;"	f	namespace:boost::container	signature:(const deque<T, Alloc>& x, const deque<T, Alloc>& y)
boost::container::operator >=	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator>=(const flat_map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_map<Key,T,Pred,Alloc>& x, const flat_map<Key,T,Pred,Alloc>& y)
boost::container::operator >=	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator>=(const flat_multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multimap<Key,T,Pred,Alloc>& x, const flat_multimap<Key,T,Pred,Alloc>& y)
boost::container::operator >=	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator>=(const flat_multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multiset<T,Pred,Alloc>& x, const flat_multiset<T,Pred,Alloc>& y)
boost::container::operator >=	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator>=(const flat_set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_set<T,Pred,Alloc>& x, const flat_set<T,Pred,Alloc>& y)
boost::container::operator >=	/usr/include/boost/interprocess/containers/container/list.hpp	/^inline bool operator>=(const list<T,A>& x, const list<T,A>& y) $/;"	f	namespace:boost::container	signature:(const list<T,A>& x, const list<T,A>& y)
boost::container::operator >=	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator>=(const map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const map<Key,T,Pred,Alloc>& x, const map<Key,T,Pred,Alloc>& y)
boost::container::operator >=	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator>=(const multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multimap<Key,T,Pred,Alloc>& x, const multimap<Key,T,Pred,Alloc>& y)
boost::container::operator >=	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator>=(const multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multiset<T,Pred,Alloc>& x, const multiset<T,Pred,Alloc>& y)
boost::container::operator >=	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator>=(const set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const set<T,Pred,Alloc>& x, const set<T,Pred,Alloc>& y)
boost::container::operator >=	/usr/include/boost/interprocess/containers/container/slist.hpp	/^operator>=(const slist<T,A>& sL1, const slist<T,A>& sL2)$/;"	f	namespace:boost::container	signature:(const slist<T,A>& sL1, const slist<T,A>& sL2)
boost::container::operator >=	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^bool operator>=(const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)$/;"	f	namespace:boost::container	signature:(const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)
boost::container::operator >=	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator>=(const basic_string<CharT,Traits,A>& x, const CharT* s) $/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const CharT* s)
boost::container::operator >=	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator>=(const basic_string<CharT,Traits,A>& x,$/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const basic_string<CharT,Traits,A>& y)
boost::container::operator >=	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator>=(const CharT* s, const basic_string<CharT,Traits,A>& y) $/;"	f	namespace:boost::container	signature:(const CharT* s, const basic_string<CharT,Traits,A>& y)
boost::container::operator >>	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator>>(std::basic_istream<CharT, Traits>& is, basic_string<CharT,Traits,A>& s)$/;"	f	namespace:boost::container	signature:(std::basic_istream<CharT, Traits>& is, basic_string<CharT,Traits,A>& s)
boost::container::operator_arrow_proxy	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^struct operator_arrow_proxy$/;"	s	namespace:boost::container
boost::container::operator_arrow_proxy	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^struct operator_arrow_proxy<T&>$/;"	s	namespace:boost::container
boost::container::operator_arrow_proxy::m_value	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   mutable PseudoReference m_value;$/;"	m	struct:boost::container::operator_arrow_proxy	access:public
boost::container::operator_arrow_proxy::m_value	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   mutable T &m_value;$/;"	m	struct:boost::container::operator_arrow_proxy	access:public
boost::container::operator_arrow_proxy::operator ->	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   PseudoReference* operator->() const { return &m_value; }$/;"	f	struct:boost::container::operator_arrow_proxy	access:public	signature:() const
boost::container::operator_arrow_proxy::operator ->	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   T* operator->() const { return &m_value; }$/;"	f	struct:boost::container::operator_arrow_proxy	access:public	signature:() const
boost::container::operator_arrow_proxy::operator_arrow_proxy	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   operator_arrow_proxy(const PseudoReference &px)$/;"	f	struct:boost::container::operator_arrow_proxy	access:public	signature:(const PseudoReference &px)
boost::container::operator_arrow_proxy::operator_arrow_proxy	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   operator_arrow_proxy(T &px)$/;"	f	struct:boost::container::operator_arrow_proxy	access:public	signature:(T &px)
boost::container::optimize_assign	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^struct optimize_assign$/;"	s	namespace:boost::container
boost::container::optimize_assign	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^struct optimize_assign<const T*, T*>$/;"	s	namespace:boost::container
boost::container::optimize_assign	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^struct optimize_assign<T*, T*>$/;"	s	namespace:boost::container	inherits:optimize_assign
boost::container::optimize_assign::value	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^   static const bool value = boost::has_trivial_assign<T>::value;$/;"	m	struct:boost::container::optimize_assign	access:public
boost::container::optimize_assign::value	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^   static const bool value = false;$/;"	m	struct:boost::container::optimize_assign	access:public
boost::container::optimize_copy	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^struct optimize_copy$/;"	s	namespace:boost::container
boost::container::optimize_copy	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^struct optimize_copy<const T*, T*>$/;"	s	namespace:boost::container
boost::container::optimize_copy	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^struct optimize_copy<T*, T*>$/;"	s	namespace:boost::container	inherits:optimize_copy
boost::container::optimize_copy::value	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^   static const bool value = boost::has_trivial_copy<T>::value;$/;"	m	struct:boost::container::optimize_copy	access:public
boost::container::optimize_copy::value	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^   static const bool value = false;$/;"	m	struct:boost::container::optimize_copy	access:public
boost::container::ordered_range	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^static const ordered_range_t ordered_range = 0;$/;"	m	namespace:boost::container
boost::container::ordered_range_impl_t	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^struct ordered_range_impl_t {};$/;"	s	namespace:boost::container
boost::container::ordered_range_t	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^typedef ordered_range_impl_t * ordered_range_t;$/;"	t	namespace:boost::container
boost::container::ordered_unique_range	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^static const ordered_unique_range_t ordered_unique_range = 0;$/;"	m	namespace:boost::container
boost::container::ordered_unique_range_impl_t	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^struct ordered_unique_range_impl_t{};$/;"	s	namespace:boost::container
boost::container::ordered_unique_range_t	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^typedef ordered_unique_range_impl_t *ordered_unique_range_t;$/;"	t	namespace:boost::container
boost::container::repeat_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^class repeat_iterator$/;"	c	namespace:boost::container	inherits:std::iterator
boost::container::repeat_iterator::advance	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void advance(Difference n)$/;"	f	class:boost::container::repeat_iterator	access:private	signature:(Difference n)
boost::container::repeat_iterator::decrement	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void decrement()$/;"	f	class:boost::container::repeat_iterator	access:private	signature:()
boost::container::repeat_iterator::dereference	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   T & dereference() const$/;"	f	class:boost::container::repeat_iterator	access:private	signature:() const
boost::container::repeat_iterator::distance_to	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   Difference distance_to(const this_type &other)const$/;"	f	class:boost::container::repeat_iterator	access:private	signature:(const this_type &other) const
boost::container::repeat_iterator::equal	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   bool equal(const this_type &other) const$/;"	f	class:boost::container::repeat_iterator	access:private	signature:(const this_type &other) const
boost::container::repeat_iterator::increment	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void increment()$/;"	f	class:boost::container::repeat_iterator	access:private	signature:()
boost::container::repeat_iterator::less	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   bool less(const this_type &other) const$/;"	f	class:boost::container::repeat_iterator	access:private	signature:(const this_type &other) const
boost::container::repeat_iterator::m_num	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   Difference  m_num;$/;"	m	class:boost::container::repeat_iterator	access:private
boost::container::repeat_iterator::m_ptr	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   T *         m_ptr;$/;"	m	class:boost::container::repeat_iterator	access:private
boost::container::repeat_iterator::operator !=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator!= (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::repeat_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
boost::container::repeat_iterator::operator *	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   T& operator*() const$/;"	f	class:boost::container::repeat_iterator	access:public	signature:() const
boost::container::repeat_iterator::operator +	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend this_type operator+(Difference off, const this_type& right)$/;"	f	class:boost::container::repeat_iterator	access:friend	signature:(Difference off, const this_type& right)
boost::container::repeat_iterator::operator +	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type operator+(Difference off) const$/;"	f	class:boost::container::repeat_iterator	access:public	signature:(Difference off) const
boost::container::repeat_iterator::operator ++	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type operator++(int)$/;"	f	class:boost::container::repeat_iterator	access:public	signature:(int)
boost::container::repeat_iterator::operator ++	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type& operator++() $/;"	f	class:boost::container::repeat_iterator	access:public	signature:()
boost::container::repeat_iterator::operator +=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type& operator+=(Difference off)$/;"	f	class:boost::container::repeat_iterator	access:public	signature:(Difference off)
boost::container::repeat_iterator::operator -	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend Difference operator- (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::repeat_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
boost::container::repeat_iterator::operator -	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type operator-(Difference off) const$/;"	f	class:boost::container::repeat_iterator	access:public	signature:(Difference off) const
boost::container::repeat_iterator::operator -=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type& operator-=(Difference off)$/;"	f	class:boost::container::repeat_iterator	access:public	signature:(Difference off)
boost::container::repeat_iterator::operator ->	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   T *operator->() const$/;"	f	class:boost::container::repeat_iterator	access:public	signature:() const
boost::container::repeat_iterator::operator <	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator< (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::repeat_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
boost::container::repeat_iterator::operator <=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator<= (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::repeat_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
boost::container::repeat_iterator::operator ==	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator== (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::repeat_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
boost::container::repeat_iterator::operator >	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator> (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::repeat_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
boost::container::repeat_iterator::operator >=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator>= (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::repeat_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
boost::container::repeat_iterator::repeat_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   explicit repeat_iterator(T &ref, Difference range_size)$/;"	f	class:boost::container::repeat_iterator	access:public	signature:(T &ref, Difference range_size)
boost::container::repeat_iterator::repeat_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   repeat_iterator()$/;"	f	class:boost::container::repeat_iterator	access:public	signature:()
boost::container::repeat_iterator::this_type	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   typedef repeat_iterator<T, Difference> this_type;$/;"	t	class:boost::container::repeat_iterator	access:private
boost::container::set	/usr/include/boost/interprocess/containers/container/set.hpp	/^class set $/;"	c	namespace:boost::container
boost::container::set::allocator_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::allocator_type         allocator_type;$/;"	t	class:boost::container::set	access:public
boost::container::set::begin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::set	access:public	signature:() const
boost::container::set::begin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator begin() $/;"	f	class:boost::container::set	access:public	signature:()
boost::container::set::cbegin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator cbegin() const $/;"	f	class:boost::container::set	access:public	signature:() const
boost::container::set::cend	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator cend() const $/;"	f	class:boost::container::set	access:public	signature:() const
boost::container::set::clear	/usr/include/boost/interprocess/containers/container/set.hpp	/^   void clear() $/;"	f	class:boost::container::set	access:public	signature:()
boost::container::set::const_iterator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::const_iterator         const_iterator;$/;"	t	class:boost::container::set	access:public
boost::container::set::const_pointer	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::const_pointer          const_pointer;$/;"	t	class:boost::container::set	access:public
boost::container::set::const_reference	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::const_reference        const_reference;$/;"	t	class:boost::container::set	access:public
boost::container::set::const_reverse_iterator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::container::set	access:public
boost::container::set::count	/usr/include/boost/interprocess/containers/container/set.hpp	/^   size_type count(const key_type& x) const $/;"	f	class:boost::container::set	access:public	signature:(const key_type& x) const
boost::container::set::crbegin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_reverse_iterator crbegin() const $/;"	f	class:boost::container::set	access:public	signature:() const
boost::container::set::crend	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_reverse_iterator crend() const $/;"	f	class:boost::container::set	access:public	signature:() const
boost::container::set::difference_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::difference_type        difference_type;$/;"	t	class:boost::container::set	access:public
boost::container::set::emplace	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator emplace()$/;"	f	class:boost::container::set	access:public	signature:()
boost::container::set::emplace	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator emplace(Args&&... args)$/;"	f	class:boost::container::set	access:public	signature:(Args&&.... args)
boost::container::set::emplace_hint	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator emplace_hint(const_iterator hint)$/;"	f	class:boost::container::set	access:public	signature:(const_iterator hint)
boost::container::set::emplace_hint	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator emplace_hint(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::set	access:public	signature:(const_iterator hint, Args&&... args)
boost::container::set::empty	/usr/include/boost/interprocess/containers/container/set.hpp	/^   bool empty() const $/;"	f	class:boost::container::set	access:public	signature:() const
boost::container::set::end	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::set	access:public	signature:() const
boost::container::set::end	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator end() $/;"	f	class:boost::container::set	access:public	signature:()
boost::container::set::equal_range	/usr/include/boost/interprocess/containers/container/set.hpp	/^      equal_range(const key_type& x) $/;"	f	class:boost::container::set	access:public	signature:(const key_type& x)
boost::container::set::equal_range	/usr/include/boost/interprocess/containers/container/set.hpp	/^      equal_range(const key_type& x) const $/;"	f	class:boost::container::set	access:public	signature:(const key_type& x) const
boost::container::set::erase	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator erase(const_iterator first, const_iterator last) $/;"	f	class:boost::container::set	access:public	signature:(const_iterator first, const_iterator last)
boost::container::set::erase	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator erase(const_iterator p) $/;"	f	class:boost::container::set	access:public	signature:(const_iterator p)
boost::container::set::erase	/usr/include/boost/interprocess/containers/container/set.hpp	/^   size_type erase(const key_type& x) $/;"	f	class:boost::container::set	access:public	signature:(const key_type& x)
boost::container::set::find	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator find(const key_type& x) const $/;"	f	class:boost::container::set	access:public	signature:(const key_type& x) const
boost::container::set::find	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator find(const key_type& x) $/;"	f	class:boost::container::set	access:public	signature:(const key_type& x)
boost::container::set::get_allocator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::set	access:public	signature:() const
boost::container::set::get_stored_allocator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::set	access:public	signature:() const
boost::container::set::get_stored_allocator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::set	access:public	signature:()
boost::container::set::insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(const_iterator p, BOOST_INTERPROCESS_RV_REF(value_type) x) $/;"	f	class:boost::container::set	access:public	signature:(const_iterator p, BOOST_INTERPROCESS_RV_REF(value_type) x)
boost::container::set::insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(const_iterator p, insert_const_ref_type x) $/;"	f	class:boost::container::set	access:public	signature:(const_iterator p, insert_const_ref_type x)
boost::container::set::insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::set	access:public	signature:(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
boost::container::set::insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(const_iterator position, T &x)$/;"	f	class:boost::container::set	access:public	signature:(const_iterator position, T &x)
boost::container::set::insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   std::pair<iterator,bool> insert(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::set	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
boost::container::set::insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   std::pair<iterator,bool> insert(insert_const_ref_type x) $/;"	f	class:boost::container::set	access:public	signature:(insert_const_ref_type x)
boost::container::set::insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   std::pair<iterator,bool> insert(T &x)$/;"	f	class:boost::container::set	access:public	signature:(T &x)
boost::container::set::insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   void insert(InputIterator first, InputIterator last) $/;"	f	class:boost::container::set	access:public	signature:(InputIterator first, InputIterator last)
boost::container::set::insert_const_ref_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^      move_const_ref_type<T>::type insert_const_ref_type;$/;"	t	class:boost::container::set	access:private
boost::container::set::iterator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::iterator               iterator;$/;"	t	class:boost::container::set	access:public
boost::container::set::key_comp	/usr/include/boost/interprocess/containers/container/set.hpp	/^   key_compare key_comp() const $/;"	f	class:boost::container::set	access:public	signature:() const
boost::container::set::key_compare	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef Pred                                    key_compare;$/;"	t	class:boost::container::set	access:public
boost::container::set::key_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::key_type               key_type;$/;"	t	class:boost::container::set	access:public
boost::container::set::lower_bound	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator lower_bound(const key_type& x) const $/;"	f	class:boost::container::set	access:public	signature:(const key_type& x) const
boost::container::set::lower_bound	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator lower_bound(const key_type& x) $/;"	f	class:boost::container::set	access:public	signature:(const key_type& x)
boost::container::set::max_size	/usr/include/boost/interprocess/containers/container/set.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::set	access:public	signature:() const
boost::container::set::move	/usr/include/boost/interprocess/containers/container/set.hpp	/^      : m_tree(boost::interprocess::move(x.m_tree))$/;"	f	class:boost::container::set	access:public	signature:(x.m_tree)
boost::container::set::m_tree	/usr/include/boost/interprocess/containers/container/set.hpp	/^   tree_t m_tree;  \/\/ red-black tree representing set$/;"	m	class:boost::container::set	access:private
boost::container::set::operator <	/usr/include/boost/interprocess/containers/container/set.hpp	/^   friend bool operator< (const set<K1,C1,A1>&, const set<K1,C1,A1>&);$/;"	p	class:boost::container::set	access:friend	signature:(const set<K1,C1,A1>&, const set<K1,C1,A1>&)
boost::container::set::operator ==	/usr/include/boost/interprocess/containers/container/set.hpp	/^   friend bool operator== (const set<K1,C1,A1>&, const set<K1,C1,A1>&);$/;"	p	class:boost::container::set	access:friend	signature:(const set<K1,C1,A1>&, const set<K1,C1,A1>&)
boost::container::set::pointer	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::pointer                pointer;$/;"	t	class:boost::container::set	access:public
boost::container::set::priv_insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator priv_insert(const_iterator p, const T &x) $/;"	f	class:boost::container::set	access:private	signature:(const_iterator p, const T &x)
boost::container::set::priv_insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   std::pair<iterator, bool> priv_insert(const T &x) $/;"	f	class:boost::container::set	access:private	signature:(const T &x)
boost::container::set::rbegin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::set	access:public	signature:() const
boost::container::set::rbegin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   reverse_iterator rbegin() $/;"	f	class:boost::container::set	access:public	signature:()
boost::container::set::reference	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::reference              reference;$/;"	t	class:boost::container::set	access:public
boost::container::set::rend	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_reverse_iterator rend() const $/;"	f	class:boost::container::set	access:public	signature:() const
boost::container::set::rend	/usr/include/boost/interprocess/containers/container/set.hpp	/^   reverse_iterator rend() $/;"	f	class:boost::container::set	access:public	signature:()
boost::container::set::reverse_iterator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::reverse_iterator       reverse_iterator;$/;"	t	class:boost::container::set	access:public
boost::container::set::set	/usr/include/boost/interprocess/containers/container/set.hpp	/^   explicit set(const Pred& comp = Pred(),$/;"	f	class:boost::container::set	access:public	signature:(const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::set::set	/usr/include/boost/interprocess/containers/container/set.hpp	/^   set( ordered_unique_range_t, InputIterator first, InputIterator last$/;"	f	class:boost::container::set	access:public	signature:( ordered_unique_range_t, InputIterator first, InputIterator last , const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::set::set	/usr/include/boost/interprocess/containers/container/set.hpp	/^   set(const set& x) $/;"	f	class:boost::container::set	access:public	signature:(const set& x)
boost::container::set::set	/usr/include/boost/interprocess/containers/container/set.hpp	/^   set(InputIterator first, InputIterator last, const Pred& comp = Pred(),$/;"	f	class:boost::container::set	access:public	signature:(InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
boost::container::set::size	/usr/include/boost/interprocess/containers/container/set.hpp	/^   size_type size() const $/;"	f	class:boost::container::set	access:public	signature:() const
boost::container::set::size_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::size_type              size_type;$/;"	t	class:boost::container::set	access:public
boost::container::set::stored_allocator_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::stored_allocator_type  stored_allocator_type;$/;"	t	class:boost::container::set	access:public
boost::container::set::swap	/usr/include/boost/interprocess/containers/container/set.hpp	/^   void swap(set& x)$/;"	f	class:boost::container::set	access:public	signature:(set& x)
boost::container::set::tree_t	/usr/include/boost/interprocess/containers/container/set.hpp	/^                     containers_detail::identity<T>, Pred, Alloc> tree_t;$/;"	t	class:boost::container::set	access:private
boost::container::set::upper_bound	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator upper_bound(const key_type& x) const $/;"	f	class:boost::container::set	access:public	signature:(const key_type& x) const
boost::container::set::upper_bound	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator upper_bound(const key_type& x)$/;"	f	class:boost::container::set	access:public	signature:(const key_type& x)
boost::container::set::value_comp	/usr/include/boost/interprocess/containers/container/set.hpp	/^   value_compare value_comp() const $/;"	f	class:boost::container::set	access:public	signature:() const
boost::container::set::value_compare	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef Pred                                    value_compare;$/;"	t	class:boost::container::set	access:public
boost::container::set::value_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::value_type             value_type;$/;"	t	class:boost::container::set	access:public
boost::container::shrink_in_place	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^static const allocation_type shrink_in_place    = (allocation_type)shrink_in_place_v;$/;"	m	namespace:boost::container
boost::container::shrink_in_place_v	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^   shrink_in_place_v = 0x08,$/;"	e	enum:boost::container::allocation_type_v
boost::container::slist	/usr/include/boost/interprocess/containers/container/slist.hpp	/^class slist $/;"	c	namespace:boost::container	inherits:containers_detail::node_alloc_holder
boost::container::slist::allocator_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef A                                       allocator_type;$/;"	t	class:boost::container::slist	access:public
boost::container::slist::allocator_v1	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename AllocHolder::allocator_v1         allocator_v1;$/;"	t	class:boost::container::slist	access:private
boost::container::slist::allocator_v2	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename AllocHolder::allocator_v2         allocator_v2;$/;"	t	class:boost::container::slist	access:private
boost::container::slist::AllocHolder	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      : AllocHolder(boost::interprocess::move((AllocHolder&)x))$/;"	f	class:boost::container::slist	access:public	signature:(AllocHolder&)x
boost::container::slist::AllocHolder	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef containers_detail::node_alloc_holder<A, Icont>        AllocHolder;$/;"	t	class:boost::container::slist	access:private
boost::container::slist::alloc_version	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename AllocHolder::alloc_version        alloc_version;$/;"	t	class:boost::container::slist	access:private
boost::container::slist::assign	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void assign(InpIt first, InpIt last) $/;"	f	class:boost::container::slist	access:public	signature:(InpIt first, InpIt last)
boost::container::slist::assign	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void assign(size_type n, const T& val)$/;"	f	class:boost::container::slist	access:public	signature:(size_type n, const T& val)
boost::container::slist::before_begin	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   const_iterator before_begin() const$/;"	f	class:boost::container::slist	access:public	signature:() const
boost::container::slist::before_begin	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator before_begin() $/;"	f	class:boost::container::slist	access:public	signature:()
boost::container::slist::begin	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   const_iterator begin() const $/;"	f	class:boost::container::slist	access:public	signature:() const
boost::container::slist::begin	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator begin() $/;"	f	class:boost::container::slist	access:public	signature:()
boost::container::slist::cbefore_begin	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   const_iterator cbefore_begin() const$/;"	f	class:boost::container::slist	access:public	signature:() const
boost::container::slist::cbegin	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   const_iterator cbegin() const $/;"	f	class:boost::container::slist	access:public	signature:() const
boost::container::slist::cend	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   const_iterator cend() const$/;"	f	class:boost::container::slist	access:public	signature:() const
boost::container::slist::clear	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void clear() $/;"	f	class:boost::container::slist	access:public	signature:()
boost::container::slist::const_iterator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   class const_iterator$/;"	c	class:boost::container::slist	inherits:std::iterator	access:public
boost::container::slist::const_iterator::const_iterator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      const_iterator()$/;"	f	class:boost::container::slist::const_iterator	access:public	signature:()
boost::container::slist::const_iterator::const_iterator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      explicit const_iterator(typename Icont::iterator it)  : m_it(it){}$/;"	f	class:boost::container::slist::const_iterator	access:protected	signature:(typename Icont::iterator it)
boost::container::slist::const_iterator::difference_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      typedef list_difference_type        difference_type;$/;"	t	class:boost::container::slist::const_iterator	access:public
boost::container::slist::const_iterator::get	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      typename Icont::iterator get()$/;"	f	class:boost::container::slist::const_iterator	access:private	signature:()
boost::container::slist::const_iterator::m_it	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      typename Icont::iterator m_it;$/;"	m	class:boost::container::slist::const_iterator	access:protected
boost::container::slist::const_iterator::operator !=	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      bool operator!=   (const const_iterator& r)  const$/;"	f	class:boost::container::slist::const_iterator	access:public	signature:(const const_iterator& r) const
boost::container::slist::const_iterator::operator *	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      const_reference operator*() const $/;"	f	class:boost::container::slist::const_iterator	access:public	signature:() const
boost::container::slist::const_iterator::operator ++	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      const_iterator operator++(int)      $/;"	f	class:boost::container::slist::const_iterator	access:public	signature:(int)
boost::container::slist::const_iterator::operator ++	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      const_iterator& operator++()       $/;"	f	class:boost::container::slist::const_iterator	access:public	signature:()
boost::container::slist::const_iterator::operator ->	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      const_pointer   operator->() const $/;"	f	class:boost::container::slist::const_iterator	access:public	signature:() const
boost::container::slist::const_iterator::operator ==	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      bool operator==   (const const_iterator& r)  const$/;"	f	class:boost::container::slist::const_iterator	access:public	signature:(const const_iterator& r) const
boost::container::slist::const_iterator::prot_incr	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      void prot_incr(){ ++m_it; }$/;"	f	class:boost::container::slist::const_iterator	access:protected	signature:()
boost::container::slist::const_pointer	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename A::const_pointer               const_pointer;$/;"	t	class:boost::container::slist	access:public
boost::container::slist::const_reference	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename A::const_reference             const_reference;$/;"	t	class:boost::container::slist	access:public
boost::container::slist::Destroyer	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef containers_detail::allocator_destroyer<NodeAlloc>     Destroyer;$/;"	t	class:boost::container::slist	access:private
boost::container::slist::difference_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename A::difference_type             difference_type;$/;"	t	class:boost::container::slist	access:public
boost::container::slist::emplace	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator emplace(const_iterator p)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator p)
boost::container::slist::emplace	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator emplace(const_iterator p, Args&&... args)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator p, Args&&... args)
boost::container::slist::emplace_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator emplace_after(const_iterator prev)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev)
boost::container::slist::emplace_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator emplace_after(const_iterator prev, Args&&... args)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev, Args&&... args)
boost::container::slist::emplace_front	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void emplace_front()$/;"	f	class:boost::container::slist	access:public	signature:()
boost::container::slist::emplace_front	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void emplace_front(Args&&... args)$/;"	f	class:boost::container::slist	access:public	signature:(Args&&.... args)
boost::container::slist::empty	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   bool empty() const $/;"	f	class:boost::container::slist	access:public	signature:() const
boost::container::slist::end	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   const_iterator end() const$/;"	f	class:boost::container::slist	access:public	signature:() const
boost::container::slist::end	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator end()$/;"	f	class:boost::container::slist	access:public	signature:()
boost::container::slist::equal_to_value	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   class equal_to_value$/;"	c	class:boost::container::slist	access:private
boost::container::slist::equal_to_value::equal_to_value	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      equal_to_value(const value_type &t)$/;"	f	class:boost::container::slist::equal_to_value	access:public	signature:(const value_type &t)
boost::container::slist::equal_to_value::operator ()	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      bool operator()(const value_type &t)const$/;"	f	class:boost::container::slist::equal_to_value	access:public	signature:(const value_type &t) const
boost::container::slist::equal_to_value::t_	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      const value_type &t_;$/;"	m	class:boost::container::slist::equal_to_value	access:private
boost::container::slist::equal_to_value::value_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      typedef typename AllocHolder::value_type value_type;$/;"	t	class:boost::container::slist::equal_to_value	access:private
boost::container::slist::erase	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator first, const_iterator last)
boost::container::slist::erase	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator erase(const_iterator p) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator p)
boost::container::slist::erase_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator erase_after(const_iterator before_first, const_iterator last) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator before_first, const_iterator last)
boost::container::slist::erase_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator erase_after(const_iterator prev_pos)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev_pos)
boost::container::slist::front	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   const_reference front() const $/;"	f	class:boost::container::slist	access:public	signature:() const
boost::container::slist::front	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   reference front() $/;"	f	class:boost::container::slist	access:public	signature:()
boost::container::slist::get_allocator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   allocator_type get_allocator() const$/;"	f	class:boost::container::slist	access:public	signature:() const
boost::container::slist::get_stored_allocator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::slist	access:public	signature:() const
boost::container::slist::get_stored_allocator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::slist	access:public	signature:()
boost::container::slist::Icont	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      containers_detail::intrusive_slist_type<A>::type           Icont;$/;"	t	class:boost::container::slist	access:private
boost::container::slist::insert	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator insert(const_iterator p, BOOST_INTERPROCESS_RV_REF(value_type) x) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator p, BOOST_INTERPROCESS_RV_REF(value_type) x)
boost::container::slist::insert	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator insert(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
boost::container::slist::insert	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator insert(const_iterator position, insert_const_ref_type x) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator position, insert_const_ref_type x)
boost::container::slist::insert	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator insert(const_iterator position, T &x)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator position, T &x)
boost::container::slist::insert	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void insert(const_iterator p, InIter first, InIter last) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator p, InIter first, InIter last)
boost::container::slist::insert	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void insert(const_iterator p, size_type n, const value_type& x) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator p, size_type n, const value_type& x)
boost::container::slist::insertion_functor	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   class insertion_functor$/;"	c	class:boost::container::slist	access:private
boost::container::slist::insertion_functor::icont_	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      Icont &icont_;$/;"	m	class:boost::container::slist::insertion_functor	access:private
boost::container::slist::insertion_functor::insertion_functor	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      insertion_functor(Icont &icont, typename Icont::const_iterator prev)$/;"	f	class:boost::container::slist::insertion_functor	access:public	signature:(Icont &icont, typename Icont::const_iterator prev)
boost::container::slist::insertion_functor::operator ()	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      void operator()(Node &n)$/;"	f	class:boost::container::slist::insertion_functor	access:public	signature:(Node &n)
boost::container::slist::insertion_functor::prev_	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      typename Icont::const_iterator prev_;$/;"	m	class:boost::container::slist::insertion_functor	access:private
boost::container::slist::insert_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator insert_after(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
boost::container::slist::insert_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator insert_after(const_iterator position, T &x)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator position, T &x)
boost::container::slist::insert_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator insert_after(const_iterator prev_pos, BOOST_INTERPROCESS_RV_REF(value_type) x) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev_pos, BOOST_INTERPROCESS_RV_REF(value_type) x)
boost::container::slist::insert_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator insert_after(const_iterator prev_pos, insert_const_ref_type x) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev_pos, insert_const_ref_type x)
boost::container::slist::insert_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void insert_after(const_iterator prev_pos, InIter first, InIter last) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev_pos, InIter first, InIter last)
boost::container::slist::insert_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void insert_after(const_iterator prev_pos, size_type n, const value_type& x)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev_pos, size_type n, const value_type& x)
boost::container::slist::insert_const_ref_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      move_const_ref_type<T>::type                    insert_const_ref_type;$/;"	t	class:boost::container::slist	access:private
boost::container::slist::iterator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   class iterator$/;"	c	class:boost::container::slist	inherits:const_iterator	access:public
boost::container::slist::iterator::get	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      typename Icont::iterator get()$/;"	f	class:boost::container::slist::iterator	access:private	signature:()
boost::container::slist::iterator::iterator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      explicit iterator(typename Icont::iterator it)$/;"	f	class:boost::container::slist::iterator	access:private	signature:(typename Icont::iterator it)
boost::container::slist::iterator::iterator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      iterator(){}$/;"	f	class:boost::container::slist::iterator	access:public	signature:()
boost::container::slist::iterator::operator *	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      reference operator*()  const {  return  this->m_it->m_data;  }$/;"	f	class:boost::container::slist::iterator	access:public	signature:() const
boost::container::slist::iterator::operator ++	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      iterator operator++(int)$/;"	f	class:boost::container::slist::iterator	access:public	signature:(int)
boost::container::slist::iterator::operator ++	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      iterator& operator++()  $/;"	f	class:boost::container::slist::iterator	access:public	signature:()
boost::container::slist::iterator::operator ->	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      pointer   operator->() const {  return  pointer(&this->m_it->m_data);  }$/;"	f	class:boost::container::slist::iterator	access:public	signature:() const
boost::container::slist::iterator::pointer	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      typedef list_pointer       pointer;$/;"	t	class:boost::container::slist::iterator	access:public
boost::container::slist::iterator::reference	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      typedef list_reference     reference;$/;"	t	class:boost::container::slist::iterator	access:public
boost::container::slist::list_const_pointer	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef const_pointer                           list_const_pointer;$/;"	t	class:boost::container::slist	access:private
boost::container::slist::list_const_reference	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef const_reference                         list_const_reference;$/;"	t	class:boost::container::slist	access:private
boost::container::slist::list_difference_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef difference_type                         list_difference_type;$/;"	t	class:boost::container::slist	access:private
boost::container::slist::list_pointer	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef pointer                                 list_pointer;$/;"	t	class:boost::container::slist	access:private
boost::container::slist::list_reference	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef reference                               list_reference;$/;"	t	class:boost::container::slist	access:private
boost::container::slist::max_size	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::slist	access:public	signature:() const
boost::container::slist::merge	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void merge(slist & x)$/;"	f	class:boost::container::slist	access:public	signature:(slist & x)
boost::container::slist::merge	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void merge(slist& x, StrictWeakOrdering comp)$/;"	f	class:boost::container::slist	access:public	signature:(slist& x, StrictWeakOrdering comp)
boost::container::slist::Node	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename AllocHolder::Node                 Node;$/;"	t	class:boost::container::slist	access:private
boost::container::slist::NodeAlloc	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename AllocHolder::NodeAlloc            NodeAlloc;$/;"	t	class:boost::container::slist	access:private
boost::container::slist::NodePtr	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename AllocHolder::NodePtr              NodePtr;$/;"	t	class:boost::container::slist	access:private
boost::container::slist::pointer	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename A::pointer                     pointer;$/;"	t	class:boost::container::slist	access:public
boost::container::slist::pop_front	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void pop_front()$/;"	f	class:boost::container::slist	access:public	signature:()
boost::container::slist::previous	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   const_iterator previous(const_iterator p) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator p)
boost::container::slist::previous	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator previous(iterator p) $/;"	f	class:boost::container::slist	access:public	signature:(iterator p)
boost::container::slist::priv_assign_dispatch	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_assign_dispatch(InpIt first, InpIt last, containers_detail::false_)$/;"	f	class:boost::container::slist	access:private	signature:(InpIt first, InpIt last, containers_detail::false_)
boost::container::slist::priv_assign_dispatch	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_assign_dispatch(Int n, Int val, containers_detail::true_)$/;"	f	class:boost::container::slist	access:private	signature:(Int n, Int val, containers_detail::true_)
boost::container::slist::priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev, FwdIterator beg, FwdIterator end, allocator_v2, std::forward_iterator_tag)
boost::container::slist::priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev, InpIterator beg, InpIterator end)
boost::container::slist::priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev, InpIterator beg, InpIterator end, allocator_v1, std::input_iterator_tag)
boost::container::slist::priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev, InpIterator beg, InpIterator end, allocator_v2, std::input_iterator_tag)
boost::container::slist::priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_create_and_insert_nodes(const_iterator prev, size_type n)$/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev, size_type n)
boost::container::slist::priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_create_and_insert_nodes(const_iterator prev, size_type n, const T& x)$/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev, size_type n, const T& x)
boost::container::slist::priv_fill_assign	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_fill_assign(size_type n, const T& val) $/;"	f	class:boost::container::slist	access:private	signature:(size_type n, const T& val)
boost::container::slist::priv_insert	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator priv_insert(const_iterator p, const value_type& x) $/;"	f	class:boost::container::slist	access:private	signature:(const_iterator p, const value_type& x)
boost::container::slist::priv_insert_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator priv_insert_after(const_iterator prev_pos, const value_type& x) $/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev_pos, const value_type& x)
boost::container::slist::priv_insert_after_range_dispatch	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_insert_after_range_dispatch(const_iterator prev_pos, InIter first, InIter last, containers_detail::false_) $/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev_pos, InIter first, InIter last, containers_detail::false_)
boost::container::slist::priv_insert_after_range_dispatch	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_insert_after_range_dispatch(const_iterator prev_pos, Int n, Int x, containers_detail::true_) $/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev_pos, Int n, Int x, containers_detail::true_)
boost::container::slist::priv_insert_dispatch	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_insert_dispatch(const_iterator prev, Integer n, Integer x, containers_detail::true_) $/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev, Integer n, Integer x, containers_detail::true_)
boost::container::slist::priv_insert_dispatch	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_insert_dispatch(const_iterator prev,$/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev, InputIter first, InputIter last, containers_detail::false_)
boost::container::slist::priv_push_front	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_push_front(const value_type &x)$/;"	f	class:boost::container::slist	access:private	signature:(const value_type &x)
boost::container::slist::push_front	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void push_front(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::slist	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
boost::container::slist::push_front	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void push_front(insert_const_ref_type x)$/;"	f	class:boost::container::slist	access:public	signature:(insert_const_ref_type x)
boost::container::slist::push_front	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void push_front(T &x) { push_front(const_cast<const T &>(x)); }$/;"	f	class:boost::container::slist	access:public	signature:(T &x)
boost::container::slist::reference	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename A::reference                   reference;$/;"	t	class:boost::container::slist	access:public
boost::container::slist::remove	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void remove(const T& value)$/;"	f	class:boost::container::slist	access:public	signature:(const T& value)
boost::container::slist::remove_if	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void remove_if(Pred pred)$/;"	f	class:boost::container::slist	access:public	signature:(Pred pred)
boost::container::slist::resize	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void resize(size_type new_size)$/;"	f	class:boost::container::slist	access:public	signature:(size_type new_size)
boost::container::slist::resize	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void resize(size_type new_size, const T& x)$/;"	f	class:boost::container::slist	access:public	signature:(size_type new_size, const T& x)
boost::container::slist::reverse	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void reverse() $/;"	f	class:boost::container::slist	access:public	signature:()
boost::container::slist::size	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   size_type size() const $/;"	f	class:boost::container::slist	access:public	signature:() const
boost::container::slist::size_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename A::size_type                   size_type;$/;"	t	class:boost::container::slist	access:public
boost::container::slist::slist	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   explicit slist(const allocator_type& a = allocator_type())$/;"	f	class:boost::container::slist	access:public	signature:(const allocator_type& a = allocator_type())
boost::container::slist::slist	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   explicit slist(size_type n)$/;"	f	class:boost::container::slist	access:public	signature:(size_type n)
boost::container::slist::slist	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   explicit slist(size_type n, const value_type& x, const allocator_type& a = allocator_type())$/;"	f	class:boost::container::slist	access:public	signature:(size_type n, const value_type& x, const allocator_type& a = allocator_type())
boost::container::slist::slist	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   slist(const slist& x) $/;"	f	class:boost::container::slist	access:public	signature:(const slist& x)
boost::container::slist::slist	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   slist(InpIt first, InpIt last,$/;"	f	class:boost::container::slist	access:public	signature:(InpIt first, InpIt last, const allocator_type& a = allocator_type())
boost::container::slist::sort	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void sort()$/;"	f	class:boost::container::slist	access:public	signature:()
boost::container::slist::sort	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void sort(StrictWeakOrdering comp)$/;"	f	class:boost::container::slist	access:public	signature:(StrictWeakOrdering comp)
boost::container::slist::splice	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void splice(const_iterator p, slist& x, const_iterator first, const_iterator last)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator p, slist& x, const_iterator first, const_iterator last)
boost::container::slist::splice	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void splice(const_iterator p, slist& x, const_iterator i)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator p, slist& x, const_iterator i)
boost::container::slist::splice	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void splice(const_iterator p, ThisType& x) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator p, ThisType& x)
boost::container::slist::splice_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void splice_after(const_iterator prev_pos,      slist& x, $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev_pos, slist& x, const_iterator before_first, const_iterator before_last)
boost::container::slist::splice_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void splice_after(const_iterator prev_pos,      slist& x, $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev_pos, slist& x, const_iterator before_first, const_iterator before_last, size_type n)
boost::container::slist::splice_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void splice_after(const_iterator prev_pos, slist& x)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev_pos, slist& x)
boost::container::slist::splice_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void splice_after(const_iterator prev_pos, slist& x, const_iterator prev)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev_pos, slist& x, const_iterator prev)
boost::container::slist::stored_allocator_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef NodeAlloc                               stored_allocator_type;$/;"	t	class:boost::container::slist	access:public
boost::container::slist::swap	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void swap(slist& x)$/;"	f	class:boost::container::slist	access:public	signature:(slist& x)
boost::container::slist::ThisType	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef slist <T, A>                               ThisType;$/;"	t	class:boost::container::slist	access:private
boost::container::slist::unique	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void unique()$/;"	f	class:boost::container::slist	access:public	signature:()
boost::container::slist::unique	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void unique(Pred pred)$/;"	f	class:boost::container::slist	access:public	signature:(Pred pred)
boost::container::slist::ValAlloc	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename AllocHolder::ValAlloc             ValAlloc;$/;"	t	class:boost::container::slist	access:private
boost::container::slist::ValueCompareToNodeCompare	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   struct ValueCompareToNodeCompare$/;"	s	class:boost::container::slist	inherits:Pred	access:private
boost::container::slist::ValueCompareToNodeCompare::operator ()	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      bool operator()(const Node &a) const$/;"	f	struct:boost::container::slist::ValueCompareToNodeCompare	access:public	signature:(const Node &a) const
boost::container::slist::ValueCompareToNodeCompare::operator ()	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      bool operator()(const Node &a, const Node &b) const$/;"	f	struct:boost::container::slist::ValueCompareToNodeCompare	access:public	signature:(const Node &a, const Node &b) const
boost::container::slist::ValueCompareToNodeCompare::ValueCompareToNodeCompare	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      ValueCompareToNodeCompare(Pred pred)$/;"	f	struct:boost::container::slist::ValueCompareToNodeCompare	access:public	signature:(Pred pred)
boost::container::slist::value_equal	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   struct value_equal$/;"	s	class:boost::container::slist	access:private
boost::container::slist::value_equal::operator ()	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      bool operator()(const value_type &a, const value_type &b) const$/;"	f	struct:boost::container::slist::value_equal	access:public	signature:(const value_type &a, const value_type &b) const
boost::container::slist::value_equal_to_this	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   struct value_equal_to_this$/;"	s	class:boost::container::slist	access:private
boost::container::slist::value_equal_to_this::m_ref	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      const value_type &m_ref;$/;"	m	struct:boost::container::slist::value_equal_to_this	access:public
boost::container::slist::value_equal_to_this::operator ()	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      bool operator()(const value_type &val) const$/;"	f	struct:boost::container::slist::value_equal_to_this	access:public	signature:(const value_type &val) const
boost::container::slist::value_equal_to_this::value_equal_to_this	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      explicit value_equal_to_this(const value_type &ref)$/;"	f	struct:boost::container::slist::value_equal_to_this	access:public	signature:(const value_type &ref)
boost::container::slist::value_less	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   struct value_less$/;"	s	class:boost::container::slist	access:private
boost::container::slist::value_less::operator ()	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      bool operator()(const value_type &a, const value_type &b) const$/;"	f	struct:boost::container::slist::value_less	access:public	signature:(const value_type &a, const value_type &b) const
boost::container::slist::value_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef T                                       value_type;$/;"	t	class:boost::container::slist	access:public
boost::container::slist::~slist	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   ~slist() $/;"	f	class:boost::container::slist	access:public	signature:()
boost::container::stable_vector	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^class stable_vector$/;"	c	namespace:boost::container
boost::container::stable_vector::add_to_pool	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void add_to_pool(size_type n)$/;"	f	class:boost::container::stable_vector	access:private	signature:(size_type n)
boost::container::stable_vector::add_to_pool	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void add_to_pool(size_type n, allocator_v1)$/;"	f	class:boost::container::stable_vector	access:private	signature:(size_type n, allocator_v1)
boost::container::stable_vector::add_to_pool	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void add_to_pool(size_type n, allocator_v2)$/;"	f	class:boost::container::stable_vector	access:private	signature:(size_type n, allocator_v2)
boost::container::stable_vector::align_nodes	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   static void align_nodes(impl_iterator first,impl_iterator last)$/;"	f	class:boost::container::stable_vector	access:private	signature:(impl_iterator first,impl_iterator last)
boost::container::stable_vector::allocate_one	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   node_type_ptr_t allocate_one()$/;"	f	class:boost::container::stable_vector	access:private	signature:()
boost::container::stable_vector::allocate_one	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   node_type_ptr_t allocate_one(allocator_v1)$/;"	f	class:boost::container::stable_vector	access:private	signature:(allocator_v1)
boost::container::stable_vector::allocate_one	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   node_type_ptr_t allocate_one(allocator_v2)$/;"	f	class:boost::container::stable_vector	access:private	signature:(allocator_v2)
boost::container::stable_vector::allocator_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef Allocator                                  allocator_type;$/;"	t	class:boost::container::stable_vector	access:public
boost::container::stable_vector::allocator_v1	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      integral_constant<unsigned, 1>                  allocator_v1;$/;"	t	class:boost::container::stable_vector	access:private
boost::container::stable_vector::allocator_v2	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      integral_constant<unsigned, 2>                  allocator_v2;$/;"	t	class:boost::container::stable_vector	access:private
boost::container::stable_vector::alloc_version	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      version<Allocator>::value>                      alloc_version;$/;"	t	class:boost::container::stable_vector	access:private
boost::container::stable_vector::assign	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void assign(InputIterator first,InputIterator last)$/;"	f	class:boost::container::stable_vector	access:public	signature:(InputIterator first,InputIterator last)
boost::container::stable_vector::assign	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void assign(size_type n,const T& t)$/;"	f	class:boost::container::stable_vector	access:public	signature:(size_type n,const T& t)
boost::container::stable_vector::assign_dispatch	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void assign_dispatch(InputIterator first, InputIterator last, boost::mpl::false_)$/;"	f	class:boost::container::stable_vector	access:private	signature:(InputIterator first, InputIterator last, boost::mpl::false_)
boost::container::stable_vector::assign_dispatch	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void assign_dispatch(Integer n, Integer t, boost::mpl::true_)$/;"	f	class:boost::container::stable_vector	access:private	signature:(Integer n, Integer t, boost::mpl::true_)
boost::container::stable_vector::at	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_reference at(size_type n)const$/;"	f	class:boost::container::stable_vector	access:public	signature:(size_type n) const
boost::container::stable_vector::at	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   reference at(size_type n)$/;"	f	class:boost::container::stable_vector	access:public	signature:(size_type n)
boost::container::stable_vector::back	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_reference back()const$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
boost::container::stable_vector::back	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   reference back()$/;"	f	class:boost::container::stable_vector	access:public	signature:()
boost::container::stable_vector::begin	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_iterator  begin()const$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
boost::container::stable_vector::begin	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator  begin()$/;"	f	class:boost::container::stable_vector	access:public	signature:()
boost::container::stable_vector::capacity	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   size_type capacity() const$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
boost::container::stable_vector::cbegin	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_iterator         cbegin()const {return this->begin();}$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
boost::container::stable_vector::cend	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_iterator         cend()const   {return this->end();}$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
boost::container::stable_vector::clear	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void clear()$/;"	f	class:boost::container::stable_vector	access:public	signature:()
boost::container::stable_vector::clear_pool	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void clear_pool()$/;"	f	class:boost::container::stable_vector	access:private	signature:()
boost::container::stable_vector::clear_pool	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void clear_pool(allocator_v1)$/;"	f	class:boost::container::stable_vector	access:private	signature:(allocator_v1)
boost::container::stable_vector::clear_pool	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void clear_pool(allocator_v2)$/;"	f	class:boost::container::stable_vector	access:private	signature:(allocator_v2)
boost::container::stable_vector::const_impl_iterator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef typename impl_type::const_iterator         const_impl_iterator;$/;"	t	class:boost::container::stable_vector	access:private
boost::container::stable_vector::const_iterator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      <T,const T&, const_pointer>                     const_iterator;$/;"	t	class:boost::container::stable_vector	access:public
boost::container::stable_vector::const_pointer	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef typename Allocator::const_pointer          const_pointer;$/;"	t	class:boost::container::stable_vector	access:public
boost::container::stable_vector::const_reference	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef typename Allocator::const_reference        const_reference;$/;"	t	class:boost::container::stable_vector	access:public
boost::container::stable_vector::const_reverse_iterator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef std::reverse_iterator<const_iterator>      const_reverse_iterator;$/;"	t	class:boost::container::stable_vector	access:public
boost::container::stable_vector::crbegin	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_reverse_iterator crbegin()const{return this->rbegin();}$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
boost::container::stable_vector::crend	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_reverse_iterator crend()const  {return this->rend();}$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
boost::container::stable_vector::deallocate_one	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void deallocate_one(node_type_ptr_t p)$/;"	f	class:boost::container::stable_vector	access:private	signature:(node_type_ptr_t p)
boost::container::stable_vector::deallocate_one	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void deallocate_one(node_type_ptr_t p, allocator_v1)$/;"	f	class:boost::container::stable_vector	access:private	signature:(node_type_ptr_t p, allocator_v1)
boost::container::stable_vector::deallocate_one	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void deallocate_one(node_type_ptr_t p, allocator_v2)$/;"	f	class:boost::container::stable_vector	access:private	signature:(node_type_ptr_t p, allocator_v2)
boost::container::stable_vector::delete_node	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void delete_node(void_ptr p)$/;"	f	class:boost::container::stable_vector	access:private	signature:(void_ptr p)
boost::container::stable_vector::difference_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef typename iterator::difference_type         difference_type;$/;"	t	class:boost::container::stable_vector	access:public
boost::container::stable_vector::ebo_holder	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   struct ebo_holder$/;"	s	class:boost::container::stable_vector	inherits:node_allocator_type	access:private
boost::container::stable_vector::ebo_holder::ebo_holder	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      ebo_holder(const allocator_type &a)$/;"	f	struct:boost::container::stable_vector::ebo_holder	access:public	signature:(const allocator_type &a)
boost::container::stable_vector::ebo_holder::end_node	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      node_type_base_t end_node;$/;"	m	struct:boost::container::stable_vector::ebo_holder	access:public
boost::container::stable_vector::ebo_holder::pool_size	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      size_type pool_size;$/;"	m	struct:boost::container::stable_vector::ebo_holder	access:public
boost::container::stable_vector::emplace	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator emplace(const_iterator position)$/;"	f	class:boost::container::stable_vector	access:public	signature:(const_iterator position)
boost::container::stable_vector::emplace	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator emplace(const_iterator position, Args && ...args)$/;"	f	class:boost::container::stable_vector	access:public	signature:(const_iterator position, Args && ...args)
boost::container::stable_vector::emplace_back	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void emplace_back()$/;"	f	class:boost::container::stable_vector	access:public	signature:()
boost::container::stable_vector::emplace_back	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void emplace_back(Args &&...args)$/;"	f	class:boost::container::stable_vector	access:public	signature:(Args &&....args)
boost::container::stable_vector::empty	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   bool empty() const$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
boost::container::stable_vector::end	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_iterator  end()const           {return const_iterator(get_end_node());}$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
boost::container::stable_vector::end	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator        end()                {return iterator(get_end_node());}$/;"	f	class:boost::container::stable_vector	access:public	signature:()
boost::container::stable_vector::erase	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::stable_vector	access:public	signature:(const_iterator first, const_iterator last)
boost::container::stable_vector::erase	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator erase(const_iterator position)$/;"	f	class:boost::container::stable_vector	access:public	signature:(const_iterator position)
boost::container::stable_vector::ExtraPointers	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   static const size_type ExtraPointers = 3;$/;"	m	class:boost::container::stable_vector	access:private
boost::container::stable_vector::front	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_reference front()const$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
boost::container::stable_vector::front	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   reference front()$/;"	f	class:boost::container::stable_vector	access:public	signature:()
boost::container::stable_vector::get_al	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const node_allocator_type &get_al() const  { return internal_data;  }$/;"	f	class:boost::container::stable_vector	access:private	signature:() const
boost::container::stable_vector::get_al	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   node_allocator_type &get_al()              { return internal_data;  }$/;"	f	class:boost::container::stable_vector	access:private	signature:()
boost::container::stable_vector::get_allocator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   allocator_type get_allocator()const  {return get_al();}$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
boost::container::stable_vector::get_end_node	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   node_type_ptr_t get_end_node() const$/;"	f	class:boost::container::stable_vector	access:private	signature:() const
boost::container::stable_vector::get_from_pool	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   node_type_ptr_t get_from_pool()$/;"	f	class:boost::container::stable_vector	access:private	signature:()
boost::container::stable_vector::get_last_align	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_impl_iterator get_last_align() const$/;"	f	class:boost::container::stable_vector	access:private	signature:() const
boost::container::stable_vector::get_last_align	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   impl_iterator get_last_align()$/;"	f	class:boost::container::stable_vector	access:private	signature:()
boost::container::stable_vector::impl	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      : internal_data(x.get_al()),impl(x.get_al())$/;"	f	class:boost::container::stable_vector	access:public	signature:(x.get_al())
boost::container::stable_vector::impl	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   impl_type                           impl;$/;"	m	class:boost::container::stable_vector	access:private
boost::container::stable_vector::impl_iterator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef typename impl_type::iterator               impl_iterator;$/;"	t	class:boost::container::stable_vector	access:private
boost::container::stable_vector::impl_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   >                                                  impl_type;$/;"	t	class:boost::container::stable_vector	access:private
boost::container::stable_vector::initialize_end_node	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void initialize_end_node(size_type impl_capacity = 0)$/;"	f	class:boost::container::stable_vector	access:private	signature:(size_type impl_capacity = 0)
boost::container::stable_vector::insert	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator insert(const_iterator position, BOOST_INTERPROCESS_RV_REF(T) x) $/;"	f	class:boost::container::stable_vector	access:public	signature:(const_iterator position, BOOST_INTERPROCESS_RV_REF(T) x)
boost::container::stable_vector::insert	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator insert(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::stable_vector	access:public	signature:(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
boost::container::stable_vector::insert	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator insert(const_iterator position, insert_const_ref_type x) $/;"	f	class:boost::container::stable_vector	access:public	signature:(const_iterator position, insert_const_ref_type x)
boost::container::stable_vector::insert	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator insert(const_iterator position, T &x) { return this->insert(position, const_cast<const T &>(x)); }$/;"	f	class:boost::container::stable_vector	access:public	signature:(const_iterator position, T &x)
boost::container::stable_vector::insert	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void insert(const_iterator position, size_type n, const T& t)$/;"	f	class:boost::container::stable_vector	access:public	signature:(const_iterator position, size_type n, const T& t)
boost::container::stable_vector::insert	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void insert(const_iterator position,InputIterator first, InputIterator last)$/;"	f	class:boost::container::stable_vector	access:public	signature:(const_iterator position,InputIterator first, InputIterator last)
boost::container::stable_vector::insert_const_ref_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      move_const_ref_type<T>::type insert_const_ref_type;$/;"	t	class:boost::container::stable_vector	access:private
boost::container::stable_vector::insert_iter	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator insert_iter(const_iterator position, InputIterator first, InputIterator last, std::forward_iterator_tag)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const_iterator position, InputIterator first, InputIterator last, std::forward_iterator_tag)
boost::container::stable_vector::insert_iter	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void insert_iter(const_iterator position, InputIterator first, InputIterator last, boost::mpl::false_)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const_iterator position, InputIterator first, InputIterator last, boost::mpl::false_)
boost::container::stable_vector::insert_iter	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void insert_iter(const_iterator position,InputIterator first,InputIterator last, boost::mpl::true_)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const_iterator position,InputIterator first,InputIterator last, boost::mpl::true_)
boost::container::stable_vector::insert_iter	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void insert_iter(const_iterator position,InputIterator first,InputIterator last,std::input_iterator_tag)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const_iterator position,InputIterator first,InputIterator last,std::input_iterator_tag)
boost::container::stable_vector::insert_iter_fwd	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void insert_iter_fwd(const impl_iterator it, FwdIterator first, FwdIterator last, difference_type n)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const impl_iterator it, FwdIterator first, FwdIterator last, difference_type n)
boost::container::stable_vector::insert_iter_fwd_alloc	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void insert_iter_fwd_alloc(const impl_iterator it, FwdIterator first, FwdIterator last, difference_type n, allocator_v1)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const impl_iterator it, FwdIterator first, FwdIterator last, difference_type n, allocator_v1)
boost::container::stable_vector::insert_iter_fwd_alloc	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void insert_iter_fwd_alloc(const impl_iterator it, FwdIterator first, FwdIterator last, difference_type n, allocator_v2)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const impl_iterator it, FwdIterator first, FwdIterator last, difference_type n, allocator_v2)
boost::container::stable_vector::insert_iter_prolog	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void insert_iter_prolog(size_type n, difference_type d)$/;"	f	class:boost::container::stable_vector	access:private	signature:(size_type n, difference_type d)
boost::container::stable_vector::insert_not_iter	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void insert_not_iter(const_iterator position, size_type n, const T& t)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const_iterator position, size_type n, const T& t)
boost::container::stable_vector::internal_data	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      : internal_data(x.get_al()),impl(x.get_al())$/;"	p	class:boost::container::stable_vector	access:public	signature:(x.get_al())
boost::container::stable_vector::internal_data	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   } internal_data;$/;"	m	class:boost::container::stable_vector	typeref:struct:boost::container::stable_vector::ebo_holder	access:private
boost::container::stable_vector::invariant	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   bool invariant()const$/;"	f	class:boost::container::stable_vector	access:private	signature:() const
boost::container::stable_vector::invariant_checker	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   class invariant_checker:private boost::noncopyable$/;"	c	class:boost::container::stable_vector	inherits:boost::noncopyable	access:private
boost::container::stable_vector::invariant_checker::invariant_checker	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      invariant_checker(const stable_vector& v):p(&v){}$/;"	f	class:boost::container::stable_vector::invariant_checker	access:public	signature:(const stable_vector& v)
boost::container::stable_vector::invariant_checker::p	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      const stable_vector* p;$/;"	m	class:boost::container::stable_vector::invariant_checker	access:private
boost::container::stable_vector::invariant_checker::touch	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      void touch(){}$/;"	f	class:boost::container::stable_vector::invariant_checker	access:public	signature:()
boost::container::stable_vector::invariant_checker::~invariant_checker	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      ~invariant_checker(){BOOST_ASSERT(p->invariant());}$/;"	f	class:boost::container::stable_vector::invariant_checker	access:public	signature:()
boost::container::stable_vector::iterator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      <T,T&, pointer>                                 iterator;$/;"	t	class:boost::container::stable_vector	access:public
boost::container::stable_vector::max_size	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   size_type max_size() const$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
boost::container::stable_vector::multiallocation_chain	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      >::type                                         multiallocation_chain;$/;"	t	class:boost::container::stable_vector	access:private
boost::container::stable_vector::new_node	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void_ptr new_node(void_ptr up, Iter it)$/;"	f	class:boost::container::stable_vector	access:private	signature:(void_ptr up, Iter it)
boost::container::stable_vector::node_allocator_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      template rebind<node_type_t>::other             node_allocator_type;$/;"	t	class:boost::container::stable_vector	access:private
boost::container::stable_vector::node_base_ptr_cast	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   static node_type_base_ptr_t node_base_ptr_cast(void_ptr p)$/;"	f	class:boost::container::stable_vector	access:private	signature:(void_ptr p)
boost::container::stable_vector::node_ptr_cast	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   static node_type_ptr_t node_ptr_cast(void_ptr p)$/;"	f	class:boost::container::stable_vector	access:private	signature:(void_ptr p)
boost::container::stable_vector::node_type_base_ptr_t	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      rebind<node_type_base_t>::other::pointer        node_type_base_ptr_t;$/;"	t	class:boost::container::stable_vector	access:private
boost::container::stable_vector::node_type_base_t	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      <void_ptr>                                      node_type_base_t;$/;"	t	class:boost::container::stable_vector	access:private
boost::container::stable_vector::node_type_ptr_t	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      rebind<node_type_t>::other::pointer             node_type_ptr_t;$/;"	t	class:boost::container::stable_vector	access:private
boost::container::stable_vector::node_type_t	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      <void_ptr, T>                                   node_type_t;$/;"	t	class:boost::container::stable_vector	access:private
boost::container::stable_vector::operator []	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_reference operator[](size_type n)const{return value(impl[n]);}$/;"	f	class:boost::container::stable_vector	access:public	signature:(size_type n) const
boost::container::stable_vector::operator []	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   reference operator[](size_type n){return value(impl[n]);}$/;"	f	class:boost::container::stable_vector	access:public	signature:(size_type n)
boost::container::stable_vector::pointer	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef typename Allocator::pointer                pointer;$/;"	t	class:boost::container::stable_vector	access:public
boost::container::stable_vector::pop_back	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void pop_back()$/;"	f	class:boost::container::stable_vector	access:public	signature:()
boost::container::stable_vector::priv_erase	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator priv_erase(const_iterator first, const_iterator last, AllocatorVersion,$/;"	f	class:boost::container::stable_vector	access:private	signature:(const_iterator first, const_iterator last, AllocatorVersion, typename boost::container::containers_detail::enable_if_c <boost::container::containers_detail::is_same<AllocatorVersion, allocator_v2> ::value>::type * = 0)
boost::container::stable_vector::priv_erase	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator priv_erase(const_iterator first, const_iterator last, allocator_v1)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const_iterator first, const_iterator last, allocator_v1)
boost::container::stable_vector::priv_insert	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator priv_insert(const_iterator position, const value_type &t)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const_iterator position, const value_type &t)
boost::container::stable_vector::priv_push_back	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void priv_push_back(const value_type &t)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const value_type &t)
boost::container::stable_vector::push_back	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void push_back(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::stable_vector	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
boost::container::stable_vector::push_back	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void push_back(insert_const_ref_type x) $/;"	f	class:boost::container::stable_vector	access:public	signature:(insert_const_ref_type x)
boost::container::stable_vector::push_back	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void push_back(T &x) { push_back(const_cast<const T &>(x)); }$/;"	f	class:boost::container::stable_vector	access:public	signature:(T &x)
boost::container::stable_vector::put_in_pool	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void put_in_pool(node_type_ptr_t p)$/;"	f	class:boost::container::stable_vector	access:private	signature:(node_type_ptr_t p)
boost::container::stable_vector::rbegin	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_reverse_iterator rbegin()const {return const_reverse_iterator(this->end());}$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
boost::container::stable_vector::rbegin	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   reverse_iterator       rbegin()      {return reverse_iterator(this->end());}$/;"	f	class:boost::container::stable_vector	access:public	signature:()
boost::container::stable_vector::readjust_end_node	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void readjust_end_node()$/;"	f	class:boost::container::stable_vector	access:private	signature:()
boost::container::stable_vector::reference	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef typename Allocator::reference              reference;$/;"	t	class:boost::container::stable_vector	access:public
boost::container::stable_vector::rend	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_reverse_iterator rend()const   {return const_reverse_iterator(this->begin());}$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
boost::container::stable_vector::rend	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   reverse_iterator       rend()        {return reverse_iterator(this->begin());}$/;"	f	class:boost::container::stable_vector	access:public	signature:()
boost::container::stable_vector::reserve	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void reserve(size_type n)$/;"	f	class:boost::container::stable_vector	access:public	signature:(size_type n)
boost::container::stable_vector::resize	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void resize(size_type n)$/;"	f	class:boost::container::stable_vector	access:public	signature:(size_type n)
boost::container::stable_vector::resize	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void resize(size_type n, const T& t)$/;"	f	class:boost::container::stable_vector	access:public	signature:(size_type n, const T& t)
boost::container::stable_vector::reverse_iterator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef std::reverse_iterator<iterator>            reverse_iterator;$/;"	t	class:boost::container::stable_vector	access:public
boost::container::stable_vector::size	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   size_type size() const$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
boost::container::stable_vector::size_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef typename impl_type::size_type              size_type;$/;"	t	class:boost::container::stable_vector	access:public
boost::container::stable_vector::stable_vector	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   explicit stable_vector(const Allocator& al=Allocator())$/;"	f	class:boost::container::stable_vector	access:public	signature:(const Allocator& al=Allocator())
boost::container::stable_vector::stable_vector	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   explicit stable_vector(size_type n)$/;"	f	class:boost::container::stable_vector	access:public	signature:(size_type n)
boost::container::stable_vector::stable_vector	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   stable_vector(const stable_vector& x)$/;"	f	class:boost::container::stable_vector	access:public	signature:(const stable_vector& x)
boost::container::stable_vector::stable_vector	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   stable_vector(InputIterator first,InputIterator last,const Allocator& al=Allocator())$/;"	f	class:boost::container::stable_vector	access:public	signature:(InputIterator first,InputIterator last,const Allocator& al=Allocator())
boost::container::stable_vector::stable_vector	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   stable_vector(size_type n, const T& t, const Allocator& al=Allocator())$/;"	f	class:boost::container::stable_vector	access:public	signature:(size_type n, const T& t, const Allocator& al=Allocator())
boost::container::stable_vector::swap	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void swap(stable_vector & x)$/;"	f	class:boost::container::stable_vector	access:public	signature:(stable_vector & x)
boost::container::stable_vector::swap_impl	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   static void swap_impl(stable_vector& x,stable_vector& y)$/;"	f	class:boost::container::stable_vector	access:private	signature:(stable_vector& x,stable_vector& y)
boost::container::stable_vector::value	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   static value_type& value(void_ptr p)$/;"	f	class:boost::container::stable_vector	access:private	signature:(void_ptr p)
boost::container::stable_vector::value_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef T                                          value_type;$/;"	t	class:boost::container::stable_vector	access:public
boost::container::stable_vector::void_ptr	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      rebind<void>::other::pointer                    void_ptr;$/;"	t	class:boost::container::stable_vector	access:private
boost::container::stable_vector::void_ptr_ptr	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      rebind<void_ptr>::other::pointer                void_ptr_ptr;$/;"	t	class:boost::container::stable_vector	access:private
boost::container::stable_vector::~stable_vector	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   ~stable_vector()$/;"	f	class:boost::container::stable_vector	access:public	signature:()
boost::container::stable_vector_detail	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^namespace stable_vector_detail{$/;"	n	namespace:boost::container
boost::container::stable_vector_detail::clear_on_destroy	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^class clear_on_destroy$/;"	c	namespace:boost::container::stable_vector_detail
boost::container::stable_vector_detail::clear_on_destroy::clear_on_destroy	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   clear_on_destroy(C &c)$/;"	f	class:boost::container::stable_vector_detail::clear_on_destroy	access:public	signature:(C &c)
boost::container::stable_vector_detail::clear_on_destroy::clear_on_destroy	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   clear_on_destroy(const clear_on_destroy &);$/;"	p	class:boost::container::stable_vector_detail::clear_on_destroy	access:private	signature:(const clear_on_destroy &)
boost::container::stable_vector_detail::clear_on_destroy::c_	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   C &c_;$/;"	m	class:boost::container::stable_vector_detail::clear_on_destroy	access:private
boost::container::stable_vector_detail::clear_on_destroy::do_clear_	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   bool do_clear_;$/;"	m	class:boost::container::stable_vector_detail::clear_on_destroy	access:private
boost::container::stable_vector_detail::clear_on_destroy::operator =	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   clear_on_destroy &operator=(const clear_on_destroy &);$/;"	p	class:boost::container::stable_vector_detail::clear_on_destroy	access:private	signature:(const clear_on_destroy &)
boost::container::stable_vector_detail::clear_on_destroy::release	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void release()$/;"	f	class:boost::container::stable_vector_detail::clear_on_destroy	access:public	signature:()
boost::container::stable_vector_detail::clear_on_destroy::~clear_on_destroy	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   ~clear_on_destroy()$/;"	f	class:boost::container::stable_vector_detail::clear_on_destroy	access:public	signature:()
boost::container::stable_vector_detail::get_pointer	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^inline typename smart_ptr_type<Ptr>::pointer get_pointer(const Ptr &ptr)$/;"	f	namespace:boost::container::stable_vector_detail	signature:(const Ptr &ptr)
boost::container::stable_vector_detail::iterator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^class iterator$/;"	c	namespace:boost::container::stable_vector_detail	inherits:std::iterator
boost::container::stable_vector_detail::iterator::advance	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void advance(std::ptrdiff_t n)$/;"	f	class:boost::container::stable_vector_detail::iterator	access:private	signature:(std::ptrdiff_t n)
boost::container::stable_vector_detail::iterator::decrement	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void decrement()$/;"	f	class:boost::container::stable_vector_detail::iterator	access:private	signature:()
boost::container::stable_vector_detail::iterator::dereference	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   reference dereference() const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:private	signature:() const
boost::container::stable_vector_detail::iterator::difference_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      <Pointer>::difference_type             difference_type;$/;"	t	class:boost::container::stable_vector_detail::iterator	access:public
boost::container::stable_vector_detail::iterator::distance_to	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   std::ptrdiff_t distance_to(const iterator& x)const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:private	signature:(const iterator& x) const
boost::container::stable_vector_detail::iterator::equal	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   bool equal(const iterator& x) const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:private	signature:(const iterator& x) const
boost::container::stable_vector_detail::iterator::increment	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void increment()$/;"	f	class:boost::container::stable_vector_detail::iterator	access:private	signature:()
boost::container::stable_vector_detail::iterator::iterator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   explicit iterator(node_type_ptr_t pn)$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(node_type_ptr_t pn)
boost::container::stable_vector_detail::iterator::iterator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator()$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:()
boost::container::stable_vector_detail::iterator::iterator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator(const iterator<T, T&, typename boost::pointer_to_other<Pointer, T>::type >& x)$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(const iterator<T, T&, typename boost::pointer_to_other<Pointer, T>::type >& x)
boost::container::stable_vector_detail::iterator::iterator_category	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef std::random_access_iterator_tag   iterator_category;$/;"	t	class:boost::container::stable_vector_detail::iterator	access:public
boost::container::stable_vector_detail::iterator::node_ptr_cast	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   static node_type_ptr_t node_ptr_cast(void_ptr p)$/;"	f	class:boost::container::stable_vector_detail::iterator	access:private	signature:(void_ptr p)
boost::container::stable_vector_detail::iterator::node_type_ptr_t	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      <void_ptr, node_type_t>::type          node_type_ptr_t;$/;"	t	class:boost::container::stable_vector_detail::iterator	access:private
boost::container::stable_vector_detail::iterator::node_type_t	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef node_type<void_ptr, T>            node_type_t;$/;"	t	class:boost::container::stable_vector_detail::iterator	access:private
boost::container::stable_vector_detail::iterator::operator !=	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   bool operator!=   (const iterator& r)  const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(const iterator& r) const
boost::container::stable_vector_detail::iterator::operator *	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   reference operator*()  const {  return  this->dereference();  }$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:() const
boost::container::stable_vector_detail::iterator::operator +	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   friend iterator operator+(difference_type off, const iterator& right)$/;"	f	class:boost::container::stable_vector_detail::iterator	access:friend	signature:(difference_type off, const iterator& right)
boost::container::stable_vector_detail::iterator::operator +	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator operator+(difference_type off) const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(difference_type off) const
boost::container::stable_vector_detail::iterator::operator ++	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator operator++(int)$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(int)
boost::container::stable_vector_detail::iterator::operator ++	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator& operator++()  $/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:()
boost::container::stable_vector_detail::iterator::operator +=	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator& operator+=(difference_type off)$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(difference_type off)
boost::container::stable_vector_detail::iterator::operator -	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   difference_type operator-(const iterator& right) const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(const iterator& right) const
boost::container::stable_vector_detail::iterator::operator -	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator operator-(difference_type off) const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(difference_type off) const
boost::container::stable_vector_detail::iterator::operator --	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator operator--(int)$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(int)
boost::container::stable_vector_detail::iterator::operator --	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator& operator--()$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:()
boost::container::stable_vector_detail::iterator::operator -=	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator& operator-=(difference_type off)$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(difference_type off)
boost::container::stable_vector_detail::iterator::operator ->	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   pointer   operator->() const {  return  pointer(&this->dereference());  }$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:() const
boost::container::stable_vector_detail::iterator::operator <	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   bool operator<    (const iterator& r)  const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(const iterator& r) const
boost::container::stable_vector_detail::iterator::operator <=	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   bool operator<=   (const iterator& r)  const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(const iterator& r) const
boost::container::stable_vector_detail::iterator::operator ==	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   bool operator==   (const iterator& r)  const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(const iterator& r) const
boost::container::stable_vector_detail::iterator::operator >	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   bool operator>    (const iterator& r)  const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(const iterator& r) const
boost::container::stable_vector_detail::iterator::operator >=	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   bool operator>=   (const iterator& r)  const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(const iterator& r) const
boost::container::stable_vector_detail::iterator::operator []	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   reference operator[](difference_type off) const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(difference_type off) const
boost::container::stable_vector_detail::iterator::pn	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   node_type_ptr_t pn;$/;"	m	class:boost::container::stable_vector_detail::iterator	access:public
boost::container::stable_vector_detail::iterator::pointer	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef Pointer                           pointer;$/;"	t	class:boost::container::stable_vector_detail::iterator	access:public
boost::container::stable_vector_detail::iterator::reference	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef Reference                         reference;$/;"	t	class:boost::container::stable_vector_detail::iterator	access:public
boost::container::stable_vector_detail::iterator::value_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef T                                 value_type;$/;"	t	class:boost::container::stable_vector_detail::iterator	access:public
boost::container::stable_vector_detail::iterator::void_ptr	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      <Pointer, void>::type                  void_ptr;$/;"	t	class:boost::container::stable_vector_detail::iterator	access:private
boost::container::stable_vector_detail::iterator::void_ptr_ptr	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      <void_ptr, void_ptr>::type             void_ptr_ptr;$/;"	t	class:boost::container::stable_vector_detail::iterator	access:private
boost::container::stable_vector_detail::iterator::void_ptr_ptr_cast	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   static void_ptr_ptr void_ptr_ptr_cast(void_ptr p)$/;"	f	class:boost::container::stable_vector_detail::iterator	access:private	signature:(void_ptr p)
boost::container::stable_vector_detail::node_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^struct node_type$/;"	s	namespace:boost::container::stable_vector_detail	inherits:node_type_base
boost::container::stable_vector_detail::node_type::node_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   node_type()$/;"	f	struct:boost::container::stable_vector_detail::node_type	access:public	signature:()
boost::container::stable_vector_detail::node_type::node_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   node_type(Args &&...args)$/;"	f	struct:boost::container::stable_vector_detail::node_type	access:public	signature:(Args &&....args)
boost::container::stable_vector_detail::node_type::set_pointer	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void set_pointer(VoidPointer p)$/;"	f	struct:boost::container::stable_vector_detail::node_type	access:public	signature:(VoidPointer p)
boost::container::stable_vector_detail::node_type::value	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   T value;$/;"	m	struct:boost::container::stable_vector_detail::node_type	access:public
boost::container::stable_vector_detail::node_type_base	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^struct node_type_base$/;"	s	namespace:boost::container::stable_vector_detail
boost::container::stable_vector_detail::node_type_base::node_type_base	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   node_type_base()$/;"	f	struct:boost::container::stable_vector_detail::node_type_base	access:public	signature:()
boost::container::stable_vector_detail::node_type_base::set_pointer	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void set_pointer(VoidPtr p)$/;"	f	struct:boost::container::stable_vector_detail::node_type_base	access:public	signature:(VoidPtr p)
boost::container::stable_vector_detail::node_type_base::up	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   VoidPtr up;$/;"	m	struct:boost::container::stable_vector_detail::node_type_base	access:public
boost::container::stable_vector_detail::select_multiallocation_chain	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^struct select_multiallocation_chain$/;"	s	namespace:boost::container::stable_vector_detail
boost::container::stable_vector_detail::select_multiallocation_chain	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^struct select_multiallocation_chain<Allocator, 1>$/;"	s	namespace:boost::container::stable_vector_detail
boost::container::stable_vector_detail::select_multiallocation_chain::multialloc_cached_counted	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      <void_ptr>                                            multialloc_cached_counted;$/;"	t	struct:boost::container::stable_vector_detail::select_multiallocation_chain	access:public
boost::container::stable_vector_detail::select_multiallocation_chain::type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      <multialloc_cached_counted, typename Allocator::value_type>   type;$/;"	t	struct:boost::container::stable_vector_detail::select_multiallocation_chain	access:public
boost::container::stable_vector_detail::select_multiallocation_chain::type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef typename Allocator::multiallocation_chain type;$/;"	t	struct:boost::container::stable_vector_detail::select_multiallocation_chain	access:public
boost::container::stable_vector_detail::select_multiallocation_chain::void_ptr	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      rebind<void>::other::pointer                          void_ptr;$/;"	t	struct:boost::container::stable_vector_detail::select_multiallocation_chain	access:public
boost::container::stable_vector_detail::smart_ptr_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^struct smart_ptr_type$/;"	s	namespace:boost::container::stable_vector_detail
boost::container::stable_vector_detail::smart_ptr_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^struct smart_ptr_type<T*>$/;"	s	namespace:boost::container::stable_vector_detail
boost::container::stable_vector_detail::smart_ptr_type::get	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   static pointer get (const SmartPtr &smartptr)$/;"	f	struct:boost::container::stable_vector_detail::smart_ptr_type	access:public	signature:(const SmartPtr &smartptr)
boost::container::stable_vector_detail::smart_ptr_type::get	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   static pointer get (pointer ptr)$/;"	f	struct:boost::container::stable_vector_detail::smart_ptr_type	access:public	signature:(pointer ptr)
boost::container::stable_vector_detail::smart_ptr_type::pointer	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef value_type *pointer;$/;"	t	struct:boost::container::stable_vector_detail::smart_ptr_type	access:public
boost::container::stable_vector_detail::smart_ptr_type::value_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef T value_type;$/;"	t	struct:boost::container::stable_vector_detail::smart_ptr_type	access:public
boost::container::stable_vector_detail::smart_ptr_type::value_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef typename SmartPtr::value_type value_type;$/;"	t	struct:boost::container::stable_vector_detail::smart_ptr_type	access:public
boost::container::string	/usr/include/boost/interprocess/containers/container/string.hpp	/^string;$/;"	t	namespace:boost::container
boost::container::swap	/usr/include/boost/interprocess/containers/container/deque.hpp	/^inline void swap(deque<T, A>& x, deque<T, A>& y)$/;"	f	namespace:boost::container	signature:(deque<T, A>& x, deque<T, A>& y)
boost::container::swap	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline void swap(flat_map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(flat_map<Key,T,Pred,Alloc>& x, flat_map<Key,T,Pred,Alloc>& y)
boost::container::swap	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline void swap(flat_multimap<Key,T,Pred,Alloc>& x, flat_multimap<Key,T,Pred,Alloc>& y) $/;"	f	namespace:boost::container	signature:(flat_multimap<Key,T,Pred,Alloc>& x, flat_multimap<Key,T,Pred,Alloc>& y)
boost::container::swap	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline void swap(flat_multiset<T,Pred,Alloc>& x, flat_multiset<T,Pred,Alloc>& y) $/;"	f	namespace:boost::container	signature:(flat_multiset<T,Pred,Alloc>& x, flat_multiset<T,Pred,Alloc>& y)
boost::container::swap	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline void swap(flat_set<T,Pred,Alloc>& x, flat_set<T,Pred,Alloc>& y) $/;"	f	namespace:boost::container	signature:(flat_set<T,Pred,Alloc>& x, flat_set<T,Pred,Alloc>& y)
boost::container::swap	/usr/include/boost/interprocess/containers/container/list.hpp	/^inline void swap(list<T, A>& x, list<T, A>& y)$/;"	f	namespace:boost::container	signature:(list<T, A>& x, list<T, A>& y)
boost::container::swap	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline void swap(map<Key,T,Pred,Alloc>& x, map<Key,T,Pred,Alloc>& y) $/;"	f	namespace:boost::container	signature:(map<Key,T,Pred,Alloc>& x, map<Key,T,Pred,Alloc>& y)
boost::container::swap	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline void swap(multimap<Key,T,Pred,Alloc>& x, multimap<Key,T,Pred,Alloc>& y) $/;"	f	namespace:boost::container	signature:(multimap<Key,T,Pred,Alloc>& x, multimap<Key,T,Pred,Alloc>& y)
boost::container::swap	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline void swap(multiset<T,Pred,Alloc>& x, multiset<T,Pred,Alloc>& y) $/;"	f	namespace:boost::container	signature:(multiset<T,Pred,Alloc>& x, multiset<T,Pred,Alloc>& y)
boost::container::swap	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline void swap(set<T,Pred,Alloc>& x, set<T,Pred,Alloc>& y) $/;"	f	namespace:boost::container	signature:(set<T,Pred,Alloc>& x, set<T,Pred,Alloc>& y)
boost::container::swap	/usr/include/boost/interprocess/containers/container/slist.hpp	/^inline void swap(slist<T,A>& x, slist<T,A>& y) $/;"	f	namespace:boost::container	signature:(slist<T,A>& x, slist<T,A>& y)
boost::container::swap	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^void swap(stable_vector<T,Allocator>& x,stable_vector<T,Allocator>& y)$/;"	f	namespace:boost::container	signature:(stable_vector<T,Allocator>& x,stable_vector<T,Allocator>& y)
boost::container::swap	/usr/include/boost/interprocess/containers/container/string.hpp	/^inline void swap(basic_string<CharT,Traits,A>& x, basic_string<CharT,Traits,A>& y) $/;"	f	namespace:boost::container	signature:(basic_string<CharT,Traits,A>& x, basic_string<CharT,Traits,A>& y)
boost::container::swap	/usr/include/boost/interprocess/containers/container/vector.hpp	/^inline void swap(vector<T, A>& x, vector<T, A>& y)$/;"	f	namespace:boost::container	signature:(vector<T, A>& x, vector<T, A>& y)
boost::container::transform_iterator	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^class transform_iterator$/;"	c	namespace:boost::container	inherits:UnaryFunction,std::iterator
boost::container::transform_iterator::advance	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   void advance(typename Iterator::difference_type n)$/;"	f	class:boost::container::transform_iterator	access:private	signature:(typename Iterator::difference_type n)
boost::container::transform_iterator::base	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   const Iterator & base() const$/;"	f	class:boost::container::transform_iterator	access:public	signature:() const
boost::container::transform_iterator::base	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   Iterator & base()$/;"	f	class:boost::container::transform_iterator	access:public	signature:()
boost::container::transform_iterator::decrement	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   void decrement()$/;"	f	class:boost::container::transform_iterator	access:private	signature:()
boost::container::transform_iterator::dereference	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   typename UnaryFunction::result_type dereference() const$/;"	f	class:boost::container::transform_iterator	access:private	signature:() const
boost::container::transform_iterator::distance_to	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   typename Iterator::difference_type distance_to(const transform_iterator &other)const$/;"	f	class:boost::container::transform_iterator	access:private	signature:(const transform_iterator &other) const
boost::container::transform_iterator::equal	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   bool equal(const transform_iterator &other) const$/;"	f	class:boost::container::transform_iterator	access:private	signature:(const transform_iterator &other) const
boost::container::transform_iterator::increment	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   void increment()$/;"	f	class:boost::container::transform_iterator	access:private	signature:()
boost::container::transform_iterator::less	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   bool less(const transform_iterator &other) const$/;"	f	class:boost::container::transform_iterator	access:private	signature:(const transform_iterator &other) const
boost::container::transform_iterator::m_it	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   Iterator m_it;$/;"	m	class:boost::container::transform_iterator	access:private
boost::container::transform_iterator::operator !=	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   friend bool operator!= (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::container::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
boost::container::transform_iterator::operator *	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   typename UnaryFunction::result_type operator*() const$/;"	f	class:boost::container::transform_iterator	access:public	signature:() const
boost::container::transform_iterator::operator +	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   friend transform_iterator operator+(typename Iterator::difference_type off, const transform_iterator& right)$/;"	f	class:boost::container::transform_iterator	access:friend	signature:(typename Iterator::difference_type off, const transform_iterator& right)
boost::container::transform_iterator::operator +	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   transform_iterator operator+(typename Iterator::difference_type off) const$/;"	f	class:boost::container::transform_iterator	access:public	signature:(typename Iterator::difference_type off) const
boost::container::transform_iterator::operator ++	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   transform_iterator operator++(int)$/;"	f	class:boost::container::transform_iterator	access:public	signature:(int)
boost::container::transform_iterator::operator ++	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   transform_iterator& operator++() $/;"	f	class:boost::container::transform_iterator	access:public	signature:()
boost::container::transform_iterator::operator +=	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   transform_iterator& operator+=(typename Iterator::difference_type off)$/;"	f	class:boost::container::transform_iterator	access:public	signature:(typename Iterator::difference_type off)
boost::container::transform_iterator::operator -	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   friend typename Iterator::difference_type operator- (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::container::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
boost::container::transform_iterator::operator -	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   transform_iterator operator-(typename Iterator::difference_type off) const$/;"	f	class:boost::container::transform_iterator	access:public	signature:(typename Iterator::difference_type off) const
boost::container::transform_iterator::operator -=	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   transform_iterator& operator-=(typename Iterator::difference_type off)$/;"	f	class:boost::container::transform_iterator	access:public	signature:(typename Iterator::difference_type off)
boost::container::transform_iterator::operator ->	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^      operator->() const$/;"	f	class:boost::container::transform_iterator	access:public	signature:() const
boost::container::transform_iterator::operator ==	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   friend bool operator== (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::container::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
boost::container::transform_iterator::transform_iterator	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   explicit transform_iterator()$/;"	f	class:boost::container::transform_iterator	access:public	signature:()
boost::container::transform_iterator::transform_iterator	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   explicit transform_iterator(const Iterator &it, const UnaryFunction &f = UnaryFunction())$/;"	f	class:boost::container::transform_iterator	access:public	signature:(const Iterator &it, const UnaryFunction &f = UnaryFunction())
boost::container::try_shrink_in_place	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^static const allocation_type try_shrink_in_place= (allocation_type)try_shrink_in_place_v;$/;"	m	namespace:boost::container
boost::container::try_shrink_in_place_v	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^   try_shrink_in_place_v = 0x40$/;"	e	enum:boost::container::allocation_type_v
boost::container::uninitialized_copy_copy	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^FwdIt uninitialized_copy_copy$/;"	f	namespace:boost::container	signature:(InpIt1 first1, InpIt1 last1, InpIt2 first2, InpIt2 last2, FwdIt result)
boost::container::uninitialized_copy_n	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^FwdIt uninitialized_copy_n$/;"	f	namespace:boost::container	signature:(InIt first, typename std::iterator_traits<InIt>::difference_type count, FwdIt dest)
boost::container::uninitialized_copy_n_dispatch	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^FwdIt uninitialized_copy_n_dispatch$/;"	f	namespace:boost::container	signature:(InIt first, typename std::iterator_traits<InIt>::difference_type count, FwdIt dest, containers_detail::bool_<false>)
boost::container::uninitialized_copy_n_dispatch	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^T *uninitialized_copy_n_dispatch(const T *first, typename std::iterator_traits<const T*>::difference_type length, T *dest, containers_detail::bool_<true>)$/;"	f	namespace:boost::container	signature:(const T *first, typename std::iterator_traits<const T*>::difference_type length, T *dest, containers_detail::bool_<true>)
boost::container::vector	/usr/include/boost/interprocess/containers/container/vector.hpp	/^class vector : private containers_detail::vector_alloc_holder<A>$/;"	c	namespace:boost::container	inherits:containers_detail::vector_alloc_holder
boost::container::vector::advanced_insert_aux_int_t	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef containers_detail::advanced_insert_aux_int<T, T*>    advanced_insert_aux_int_t;$/;"	t	class:boost::container::vector	access:private
boost::container::vector::alloc	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      :  base_t(static_cast<base_t&>(mx).alloc())$/;"	f	class:boost::container::vector	access:public	signature:()
boost::container::vector::allocator_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef A                                       allocator_type;$/;"	t	class:boost::container::vector	access:public
boost::container::vector::allocator_v1	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename base_t::allocator_v1           allocator_v1;$/;"	t	class:boost::container::vector	access:private
boost::container::vector::allocator_v2	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename base_t::allocator_v2           allocator_v2;$/;"	t	class:boost::container::vector	access:private
boost::container::vector::alloc_version	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename base_t::alloc_version          alloc_version;$/;"	t	class:boost::container::vector	access:private
boost::container::vector::assign	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void assign(InIt first, InIt last) $/;"	f	class:boost::container::vector	access:public	signature:(InIt first, InIt last)
boost::container::vector::assign	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void assign(size_type n, const value_type& val)$/;"	f	class:boost::container::vector	access:public	signature:(size_type n, const value_type& val)
boost::container::vector::at	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_reference at(size_type n) const$/;"	f	class:boost::container::vector	access:public	signature:(size_type n) const
boost::container::vector::at	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   reference at(size_type n)$/;"	f	class:boost::container::vector	access:public	signature:(size_type n)
boost::container::vector::back	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_reference   back()  const $/;"	f	class:boost::container::vector	access:public	signature:() const
boost::container::vector::back	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   reference         back()        $/;"	f	class:boost::container::vector	access:public	signature:()
boost::container::vector::base_t	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef containers_detail::vector_alloc_holder<A> base_t;$/;"	t	class:boost::container::vector	access:private
boost::container::vector::begin	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_iterator begin() const$/;"	f	class:boost::container::vector	access:public	signature:() const
boost::container::vector::begin	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator begin()      $/;"	f	class:boost::container::vector	access:public	signature:()
boost::container::vector::capacity	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   size_type capacity() const $/;"	f	class:boost::container::vector	access:public	signature:() const
boost::container::vector::cbegin	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_iterator cbegin() const$/;"	f	class:boost::container::vector	access:public	signature:() const
boost::container::vector::cend	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_iterator cend()   const$/;"	f	class:boost::container::vector	access:public	signature:() const
boost::container::vector::clear	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void clear() $/;"	f	class:boost::container::vector	access:public	signature:()
boost::container::vector::const_iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef containers_detail::vector_const_iterator<pointer>  const_iterator;$/;"	t	class:boost::container::vector	access:public
boost::container::vector::const_pointer	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename A::const_pointer               const_pointer;$/;"	t	class:boost::container::vector	access:public
boost::container::vector::const_reference	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename A::const_reference             const_reference;$/;"	t	class:boost::container::vector	access:public
boost::container::vector::const_reverse_iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      const_reverse_iterator;$/;"	t	class:boost::container::vector	access:public
boost::container::vector::crbegin	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_reverse_iterator crbegin()const$/;"	f	class:boost::container::vector	access:public	signature:() const
boost::container::vector::crend	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_reverse_iterator crend()  const$/;"	f	class:boost::container::vector	access:public	signature:() const
boost::container::vector::cvalue_iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef constant_iterator<T, difference_type>   cvalue_iterator;$/;"	t	class:boost::container::vector	access:private
boost::container::vector::data	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_pointer data()  const $/;"	f	class:boost::container::vector	access:public	signature:() const
boost::container::vector::data	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   pointer data()        $/;"	f	class:boost::container::vector	access:public	signature:()
boost::container::vector::difference_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename A::difference_type             difference_type;$/;"	t	class:boost::container::vector	access:public
boost::container::vector::emplace	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator emplace(const_iterator position)$/;"	f	class:boost::container::vector	access:public	signature:(const_iterator position)
boost::container::vector::emplace	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator emplace(const_iterator position, Args && ...args)$/;"	f	class:boost::container::vector	access:public	signature:(const_iterator position, Args && ...args)
boost::container::vector::emplace_back	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void emplace_back()$/;"	f	class:boost::container::vector	access:public	signature:()
boost::container::vector::emplace_back	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void emplace_back(Args &&...args)$/;"	f	class:boost::container::vector	access:public	signature:(Args &&....args)
boost::container::vector::empty	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   bool empty() const $/;"	f	class:boost::container::vector	access:public	signature:() const
boost::container::vector::end	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_iterator end()   const$/;"	f	class:boost::container::vector	access:public	signature:() const
boost::container::vector::end	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator end()        $/;"	f	class:boost::container::vector	access:public	signature:()
boost::container::vector::erase	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator erase(const_iterator first, const_iterator last) $/;"	f	class:boost::container::vector	access:public	signature:(const_iterator first, const_iterator last)
boost::container::vector::erase	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator erase(const_iterator position) $/;"	f	class:boost::container::vector	access:public	signature:(const_iterator position)
boost::container::vector::front	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_reference   front() const $/;"	f	class:boost::container::vector	access:public	signature:() const
boost::container::vector::front	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   reference         front()       $/;"	f	class:boost::container::vector	access:public	signature:()
boost::container::vector::get_allocator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::vector	access:public	signature:() const
boost::container::vector::get_stored_allocator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::vector	access:public	signature:() const
boost::container::vector::get_stored_allocator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::vector	access:public	signature:()
boost::container::vector::insert	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator insert(const_iterator position, BOOST_INTERPROCESS_RV_REF(T) x) $/;"	f	class:boost::container::vector	access:public	signature:(const_iterator position, BOOST_INTERPROCESS_RV_REF(T) x)
boost::container::vector::insert	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator insert(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::vector	access:public	signature:(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
boost::container::vector::insert	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator insert(const_iterator position, insert_const_ref_type x) $/;"	f	class:boost::container::vector	access:public	signature:(const_iterator position, insert_const_ref_type x)
boost::container::vector::insert	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator insert(const_iterator position, T &x) { return this->insert(position, const_cast<const T &>(x)); }$/;"	f	class:boost::container::vector	access:public	signature:(const_iterator position, T &x)
boost::container::vector::insert	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void insert(const_iterator p, size_type n, const T& x)$/;"	f	class:boost::container::vector	access:public	signature:(const_iterator p, size_type n, const T& x)
boost::container::vector::insert	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void insert(const_iterator pos, InIt first, InIt last)$/;"	f	class:boost::container::vector	access:public	signature:(const_iterator pos, InIt first, InIt last)
boost::container::vector::insert_const_ref_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      move_const_ref_type<T>::type insert_const_ref_type;$/;"	t	class:boost::container::vector	access:private
boost::container::vector::iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef containers_detail::vector_iterator<pointer>        iterator;$/;"	t	class:boost::container::vector	access:public
boost::container::vector::max_size	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::vector	access:public	signature:() const
boost::container::vector::num_alloc	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   unsigned int num_alloc;$/;"	m	class:boost::container::vector	access:public
boost::container::vector::num_expand_bwd	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   unsigned int num_expand_bwd;$/;"	m	class:boost::container::vector	access:public
boost::container::vector::num_expand_fwd	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   unsigned int num_expand_fwd;$/;"	m	class:boost::container::vector	access:public
boost::container::vector::num_shrink	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   unsigned int num_shrink;$/;"	m	class:boost::container::vector	access:public
boost::container::vector::operator []	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_reference operator[](size_type n) const   $/;"	f	class:boost::container::vector	access:public	signature:(size_type n) const
boost::container::vector::operator []	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   reference operator[](size_type n)         $/;"	f	class:boost::container::vector	access:public	signature:(size_type n)
boost::container::vector::pointer	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename A::pointer                     pointer;$/;"	t	class:boost::container::vector	access:public
boost::container::vector::pop_back	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void pop_back() $/;"	f	class:boost::container::vector	access:public	signature:()
boost::container::vector::priv_assign_aux	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_assign_aux(FwdIt first, FwdIt last, std::forward_iterator_tag)$/;"	f	class:boost::container::vector	access:private	signature:(FwdIt first, FwdIt last, std::forward_iterator_tag)
boost::container::vector::priv_assign_aux	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_assign_aux(InIt first, InIt last, std::input_iterator_tag)$/;"	f	class:boost::container::vector	access:private	signature:(InIt first, InIt last, std::input_iterator_tag)
boost::container::vector::priv_assign_dispatch	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_assign_dispatch(InIt first, InIt last, containers_detail::false_)$/;"	f	class:boost::container::vector	access:private	signature:(InIt first, InIt last, containers_detail::false_)
boost::container::vector::priv_assign_dispatch	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_assign_dispatch(Integer n, Integer val, containers_detail::true_)$/;"	f	class:boost::container::vector	access:private	signature:(Integer n, Integer val, containers_detail::true_)
boost::container::vector::priv_check_range	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_check_range(size_type n) const $/;"	f	class:boost::container::vector	access:private	signature:(size_type n) const
boost::container::vector::priv_insert	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator priv_insert(const_iterator position, const T &x) $/;"	f	class:boost::container::vector	access:private	signature:(const_iterator position, const T &x)
boost::container::vector::priv_insert_dispatch	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_insert_dispatch(const_iterator pos, InIt first, $/;"	f	class:boost::container::vector	access:private	signature:(const_iterator pos, InIt first, InIt last, containers_detail::false_)
boost::container::vector::priv_insert_dispatch	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_insert_dispatch(const_iterator pos, Integer n, Integer val, containers_detail::true_) $/;"	f	class:boost::container::vector	access:private	signature:(const_iterator pos, Integer n, Integer val, containers_detail::true_)
boost::container::vector::priv_push_back	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_push_back(const T &x) $/;"	f	class:boost::container::vector	access:private	signature:(const T &x)
boost::container::vector::priv_range_insert	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_range_insert(const_iterator pos, InIt first, InIt last, std::input_iterator_tag)$/;"	f	class:boost::container::vector	access:private	signature:(const_iterator pos, InIt first, InIt last, std::input_iterator_tag)
boost::container::vector::priv_range_insert	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_range_insert(pointer pos, const size_type n, advanced_insert_aux_int_t &interf)$/;"	f	class:boost::container::vector	access:private	signature:(pointer pos, const size_type n, advanced_insert_aux_int_t &interf)
boost::container::vector::priv_range_insert	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_range_insert(pointer pos, FwdIt first, FwdIt last, std::forward_iterator_tag)$/;"	f	class:boost::container::vector	access:private	signature:(pointer pos, FwdIt first, FwdIt last, std::forward_iterator_tag)
boost::container::vector::priv_range_insert_expand_backwards	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_range_insert_expand_backwards$/;"	f	class:boost::container::vector	access:private	signature:(T* new_start, size_type new_capacity, T* pos, const size_type n, advanced_insert_aux_int_t &interf)
boost::container::vector::priv_range_insert_expand_forward	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_range_insert_expand_forward(T* pos, size_type n, advanced_insert_aux_int_t &interf)$/;"	f	class:boost::container::vector	access:private	signature:(T* pos, size_type n, advanced_insert_aux_int_t &interf)
boost::container::vector::priv_range_insert_new_allocation	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_range_insert_new_allocation$/;"	f	class:boost::container::vector	access:private	signature:(T* new_start, size_type new_cap, T* pos, size_type n, advanced_insert_aux_int_t &interf)
boost::container::vector::priv_shrink_to_fit	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_shrink_to_fit(allocator_v1)$/;"	f	class:boost::container::vector	access:private	signature:(allocator_v1)
boost::container::vector::priv_shrink_to_fit	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_shrink_to_fit(allocator_v2)$/;"	f	class:boost::container::vector	access:private	signature:(allocator_v2)
boost::container::vector::push_back	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void push_back(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::vector	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
boost::container::vector::push_back	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void push_back(insert_const_ref_type x) $/;"	f	class:boost::container::vector	access:public	signature:(insert_const_ref_type x)
boost::container::vector::push_back	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void push_back(T &x) { push_back(const_cast<const T &>(x)); }$/;"	f	class:boost::container::vector	access:public	signature:(T &x)
boost::container::vector::rbegin	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_reverse_iterator rbegin()const$/;"	f	class:boost::container::vector	access:public	signature:() const
boost::container::vector::rbegin	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   reverse_iterator rbegin()     $/;"	f	class:boost::container::vector	access:public	signature:()
boost::container::vector::reference	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename A::reference                   reference;$/;"	t	class:boost::container::vector	access:public
boost::container::vector::rend	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_reverse_iterator rend()  const$/;"	f	class:boost::container::vector	access:public	signature:() const
boost::container::vector::rend	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   reverse_iterator rend()       $/;"	f	class:boost::container::vector	access:public	signature:()
boost::container::vector::repeat_it	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef repeat_iterator<T, difference_type>     repeat_it;$/;"	t	class:boost::container::vector	access:private
boost::container::vector::repeat_move_it	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef boost::interprocess::move_iterator<repeat_it>         repeat_move_it;$/;"	t	class:boost::container::vector	access:private
boost::container::vector::reserve	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void reserve(size_type new_cap)$/;"	f	class:boost::container::vector	access:public	signature:(size_type new_cap)
boost::container::vector::reset_alloc_stats	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void reset_alloc_stats()$/;"	f	class:boost::container::vector	access:public	signature:()
boost::container::vector::resize	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void resize(size_type new_size) $/;"	f	class:boost::container::vector	access:public	signature:(size_type new_size)
boost::container::vector::resize	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void resize(size_type new_size, const T& x) $/;"	f	class:boost::container::vector	access:public	signature:(size_type new_size, const T& x)
boost::container::vector::reverse_iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      reverse_iterator;$/;"	t	class:boost::container::vector	access:public
boost::container::vector::self_t	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef vector<T, A>                   self_t;$/;"	t	class:boost::container::vector	access:private
boost::container::vector::shrink_to_fit	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::container::vector	access:public	signature:()
boost::container::vector::size	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   size_type size() const $/;"	f	class:boost::container::vector	access:public	signature:() const
boost::container::vector::size_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename A::size_type                   size_type;$/;"	t	class:boost::container::vector	access:public
boost::container::vector::stored_allocator_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef allocator_type                          stored_allocator_type;$/;"	t	class:boost::container::vector	access:public
boost::container::vector::swap	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void swap(vector& x)$/;"	f	class:boost::container::vector	access:public	signature:(vector& x)
boost::container::vector::value_traits	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef containers_detail::vector_value_traits<value_type, A> value_traits;$/;"	t	class:boost::container::vector	access:private
boost::container::vector::value_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef T                                       value_type;$/;"	t	class:boost::container::vector	access:public
boost::container::vector::vector	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   explicit vector(const A& a = A())$/;"	f	class:boost::container::vector	access:public	signature:(const A& a = A())
boost::container::vector::vector	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   explicit vector(size_type n) $/;"	f	class:boost::container::vector	access:public	signature:(size_type n)
boost::container::vector::vector	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector(const vector<T, A>& x) $/;"	f	class:boost::container::vector	access:public	signature:(const vector<T, A>& x)
boost::container::vector::vector	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector(InIt first, InIt last, const allocator_type& a = allocator_type())$/;"	f	class:boost::container::vector	access:public	signature:(InIt first, InIt last, const allocator_type& a = allocator_type())
boost::container::vector::vector	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector(size_type n, const T& value, const allocator_type& a = allocator_type()) $/;"	f	class:boost::container::vector	access:public	signature:(size_type n, const T& value, const allocator_type& a = allocator_type())
boost::container::vector::~vector	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   ~vector() $/;"	f	class:boost::container::vector	access:public	signature:()
boost::container::wstring	/usr/include/boost/interprocess/containers/container/string.hpp	/^wstring;$/;"	t	namespace:boost::container
boost::container::zero_memory	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^static const allocation_type zero_memory        = (allocation_type)zero_memory_v;$/;"	m	namespace:boost::container
boost::container::zero_memory_v	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^   zero_memory_v = 0x20,$/;"	e	enum:boost::container::allocation_type_v
boost::get_pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^T * get_pointer(boost::interprocess::intersegment_ptr<T> const & p)$/;"	f	namespace:boost	signature:(boost::interprocess::intersegment_ptr<T> const & p)
boost::get_pointer	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^inline T *get_pointer(boost::interprocess::intrusive_ptr<T, VP> p)$/;"	f	namespace:boost	signature:(boost::interprocess::intrusive_ptr<T, VP> p)
boost::get_pointer	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^T *get_pointer(boost::interprocess::scoped_ptr<T, D> const & p)$/;"	f	namespace:boost	signature:(boost::interprocess::scoped_ptr<T, D> const & p)
boost::get_pointer	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^T * get_pointer(boost::interprocess::shared_ptr<T, VoidAllocator, Deleter> const & p)$/;"	f	namespace:boost	signature:(boost::interprocess::shared_ptr<T, VoidAllocator, Deleter> const & p)
boost::has_trivial_constructor	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^struct has_trivial_constructor$/;"	s	namespace:boost	inherits:true_type
boost::has_trivial_constructor	/usr/include/boost/interprocess/offset_ptr.hpp	/^struct has_trivial_constructor< boost::interprocess::offset_ptr<T> > $/;"	s	namespace:boost
boost::has_trivial_constructor::value	/usr/include/boost/interprocess/offset_ptr.hpp	/^   enum { value = true };$/;"	e	enum:boost::has_trivial_constructor::__anon31
boost::has_trivial_destructor	/usr/include/boost/interprocess/allocators/allocator.hpp	/^struct has_trivial_destructor$/;"	s	namespace:boost
boost::has_trivial_destructor	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^struct has_trivial_destructor$/;"	s	namespace:boost	inherits:true_type
boost::has_trivial_destructor	/usr/include/boost/interprocess/offset_ptr.hpp	/^struct has_trivial_destructor< boost::interprocess::offset_ptr<T> > $/;"	s	namespace:boost
boost::has_trivial_destructor::value	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   enum { value = true };$/;"	e	enum:boost::has_trivial_destructor::__anon1
boost::has_trivial_destructor::value	/usr/include/boost/interprocess/offset_ptr.hpp	/^   enum { value = true };$/;"	e	enum:boost::has_trivial_destructor::__anon32
boost::interprocess	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/allocators/allocator.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/containers_fwd.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/deque.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/flat_map.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/flat_set.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/list.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/map.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/pair.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/set.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/slist.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/stable_vector.hpp	/^   namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/string.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/vector.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/containers/version_type.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/creation_tags.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/atomic.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^namespace boost { namespace interprocess { namespace detail {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/intermodule_singleton.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/interprocess_tester.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^namespace interprocess { $/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/math_functions.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/min_max.hpp	/^namespace interprocess { $/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/move.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/mpl.hpp	/^namespace interprocess { $/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^namespace interprocess { $/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/posix_time_types_wrk.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^namespace interprocess { $/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/type_traits.hpp	/^namespace interprocess { $/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/utilities.hpp	/^namespace interprocess { $/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^namespace interprocess { $/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/win32_api.hpp	/^namespace interprocess  {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/win32_api.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/errors.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/exceptions.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/file_mapping.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^namespace boost { namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^namespace boost { namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/indexes/map_index.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/indexes/null_index.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^namespace boost { namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^namespace boost{  namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/mapped_region.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/offset_ptr.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/segment_manager.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/shared_memory_object.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^namespace interprocess { $/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/detail/bad_weak_ptr.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^namespace interprocess{$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^namespace boost {  namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^namespace boost {  namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/emulation/interprocess_barrier.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/emulation/interprocess_condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/emulation/interprocess_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/emulation/interprocess_recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/emulation/interprocess_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/file_lock.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/lock_options.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/named_condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/posix/interprocess_barrier.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/posix/interprocess_condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/posix/interprocess_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/posix/interprocess_recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/posix/interprocess_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/posix/ptime_to_timespec.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
boost::interprocess::accept_ownership	/usr/include/boost/interprocess/sync/lock_options.hpp	/^static const accept_ownership_type  accept_ownership = accept_ownership_type();$/;"	m	namespace:boost::interprocess
boost::interprocess::accept_ownership_type	/usr/include/boost/interprocess/sync/lock_options.hpp	/^struct accept_ownership_type{};$/;"	s	namespace:boost::interprocess
boost::interprocess::adaptive_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^class adaptive_pool$/;"	c	namespace:boost::interprocess	inherits:detail::adaptive_pool_base
boost::interprocess::adaptive_pool::adaptive_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool$/;"	f	class:boost::interprocess::adaptive_pool	access:public	signature:(const adaptive_pool<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
boost::interprocess::adaptive_pool::adaptive_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool(SegmentManager *segment_mngr) $/;"	f	class:boost::interprocess::adaptive_pool	access:public	signature:(SegmentManager *segment_mngr)
boost::interprocess::adaptive_pool::base_t	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^         < 2, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> base_t;$/;"	t	class:boost::interprocess::adaptive_pool	access:private
boost::interprocess::adaptive_pool::rebind	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::adaptive_pool	access:public
boost::interprocess::adaptive_pool::rebind::other	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      typedef adaptive_pool<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::adaptive_pool::rebind	access:public
boost::interprocess::adaptive_pool::version	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef boost::interprocess::version_type<adaptive_pool, 2>   version;$/;"	t	class:boost::interprocess::adaptive_pool	access:public
boost::interprocess::allocate_new	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type allocate_new       = boost::container::allocate_new;$/;"	m	namespace:boost::interprocess
boost::interprocess::allocation_type	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^typedef int allocation_type;$/;"	t	namespace:boost::interprocess
boost::interprocess::allocator	/usr/include/boost/interprocess/allocators/allocator.hpp	/^class allocator $/;"	c	namespace:boost::interprocess
boost::interprocess::allocator::address	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   const_pointer address(const_reference value) const$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const_reference value) const
boost::interprocess::allocator::address	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   pointer address(reference value) const$/;"	f	class:boost::interprocess::allocator	access:public	signature:(reference value) const
boost::interprocess::allocator::allocate	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   pointer allocate(size_type count, cvoid_ptr hint = 0)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(size_type count, cvoid_ptr hint = 0)
boost::interprocess::allocator::allocate_individual	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   multiallocation_chain allocate_individual$/;"	f	class:boost::interprocess::allocator	access:public	signature:(std::size_t num_elements)
boost::interprocess::allocator::allocate_many	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   multiallocation_chain allocate_many$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const size_type *elem_sizes, size_type n_elements)
boost::interprocess::allocator::allocate_many	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   multiallocation_chain allocate_many$/;"	f	class:boost::interprocess::allocator	access:public	signature:(size_type elem_size, std::size_t num_elements)
boost::interprocess::allocator::allocate_one	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   pointer allocate_one()$/;"	f	class:boost::interprocess::allocator	access:public	signature:()
boost::interprocess::allocator::allocation_command	/usr/include/boost/interprocess/allocators/allocator.hpp	/^      allocation_command(boost::interprocess::allocation_type command,$/;"	f	class:boost::interprocess::allocator	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, const pointer &reuse = 0)
boost::interprocess::allocator::allocator	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   allocator(const allocator &other) $/;"	f	class:boost::interprocess::allocator	access:public	signature:(const allocator &other)
boost::interprocess::allocator::allocator	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   allocator(const allocator<T2, SegmentManager> &other) $/;"	f	class:boost::interprocess::allocator	access:public	signature:(const allocator<T2, SegmentManager> &other)
boost::interprocess::allocator::allocator	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   allocator(segment_manager *segment_mngr) $/;"	f	class:boost::interprocess::allocator	access:public	signature:(segment_manager *segment_mngr)
boost::interprocess::allocator::alloc_ptr_t	/usr/include/boost/interprocess/allocators/allocator.hpp	/^      <cvoid_ptr, segment_manager>::type     alloc_ptr_t;$/;"	t	class:boost::interprocess::allocator	access:private
boost::interprocess::allocator::aux_pointer_t	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef typename segment_manager::void_pointer  aux_pointer_t;$/;"	t	class:boost::interprocess::allocator	access:private
boost::interprocess::allocator::construct	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void construct(const pointer &ptr)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &ptr)
boost::interprocess::allocator::construct	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void construct(const pointer &ptr, const_reference v)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &ptr, const_reference v)
boost::interprocess::allocator::const_pointer	/usr/include/boost/interprocess/allocators/allocator.hpp	/^      pointer_to_other<pointer, const T>::type  const_pointer;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::const_reference	/usr/include/boost/interprocess/allocators/allocator.hpp	/^                     <const value_type>::type   const_reference;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::cvoid_ptr	/usr/include/boost/interprocess/allocators/allocator.hpp	/^         <aux_pointer_t, const void>::type   cvoid_ptr;$/;"	t	class:boost::interprocess::allocator	access:private
boost::interprocess::allocator::deallocate	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void deallocate(const pointer &ptr, size_type)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &ptr, size_type)
boost::interprocess::allocator::deallocate_individual	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void deallocate_individual(multiallocation_chain chain)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(multiallocation_chain chain)
boost::interprocess::allocator::deallocate_many	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void deallocate_many(multiallocation_chain chain)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(multiallocation_chain chain)
boost::interprocess::allocator::deallocate_one	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void deallocate_one(const pointer &p)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &p)
boost::interprocess::allocator::destroy	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void destroy(const pointer &ptr)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &ptr)
boost::interprocess::allocator::difference_type	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef std::ptrdiff_t                       difference_type;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::get_segment_manager	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::allocator	access:public	signature:() const
boost::interprocess::allocator::max_size	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   size_type max_size() const$/;"	f	class:boost::interprocess::allocator	access:public	signature:() const
boost::interprocess::allocator::mp_mngr	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   alloc_ptr_t mp_mngr;$/;"	m	class:boost::interprocess::allocator	access:private
boost::interprocess::allocator::multiallocation_chain	/usr/include/boost/interprocess/allocators/allocator.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::operator =	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   allocator& operator=(const allocator&);$/;"	p	class:boost::interprocess::allocator	access:private	signature:(const allocator&)
boost::interprocess::allocator::operator =	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   allocator& operator=(const allocator<T2, SegmentManager2>&);$/;"	p	class:boost::interprocess::allocator	access:private	signature:(const allocator<T2, SegmentManager2>&)
boost::interprocess::allocator::pointer	/usr/include/boost/interprocess/allocators/allocator.hpp	/^      <cvoid_ptr, T>::type                      pointer;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::rebind	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::rebind::other	/usr/include/boost/interprocess/allocators/allocator.hpp	/^      typedef allocator<T2, SegmentManager>     other;$/;"	t	struct:boost::interprocess::allocator::rebind	access:public
boost::interprocess::allocator::reference	/usr/include/boost/interprocess/allocators/allocator.hpp	/^                     <value_type>::type         reference;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::segment_manager	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef SegmentManager                                segment_manager;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::self_t	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef allocator<T, SegmentManager>   self_t;$/;"	t	class:boost::interprocess::allocator	access:private
boost::interprocess::allocator::size	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   size_type size(const pointer &p) const$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &p) const
boost::interprocess::allocator::size_type	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef std::size_t                          size_type;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::swap	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   friend void swap(self_t &alloc1, self_t &alloc2)$/;"	f	class:boost::interprocess::allocator	access:friend	signature:(self_t &alloc1, self_t &alloc2)
boost::interprocess::allocator::value_type	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef T                                    value_type;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::version	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef boost::interprocess::version_type<allocator, 2>   version;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::allocator::void_pointer	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::allocator	access:public
boost::interprocess::already_exists_error	/usr/include/boost/interprocess/errors.hpp	/^   already_exists_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::anonymous_instance	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^static const detail::anonymous_instance_t   * anonymous_instance = 0;$/;"	m	namespace:boost::interprocess
boost::interprocess::anonymous_shared_memory	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^anonymous_shared_memory(std::size_t size, void *address = 0)$/;"	f	namespace:boost::interprocess	signature:(std::size_t size, void *address = 0)
boost::interprocess::anonymous_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^enum instance_type {   anonymous_type, named_type, unique_type, max_allocation_type };$/;"	e	enum:boost::interprocess::instance_type
boost::interprocess::back_move_inserter	/usr/include/boost/interprocess/detail/move.hpp	/^inline back_move_insert_iterator<C> back_move_inserter(C& x)$/;"	f	namespace:boost::interprocess	signature:(C& x)
boost::interprocess::back_move_insert_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^class back_move_insert_iterator$/;"	c	namespace:boost::interprocess	inherits:std::iterator
boost::interprocess::back_move_insert_iterator::back_move_insert_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^   explicit back_move_insert_iterator(C& x) : container_m(&x) { }$/;"	f	class:boost::interprocess::back_move_insert_iterator	access:public	signature:(C& x)
boost::interprocess::back_move_insert_iterator::container_m	/usr/include/boost/interprocess/detail/move.hpp	/^   C* container_m;$/;"	m	class:boost::interprocess::back_move_insert_iterator	access:private
boost::interprocess::back_move_insert_iterator::container_type	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef C container_type;$/;"	t	class:boost::interprocess::back_move_insert_iterator	access:public
boost::interprocess::back_move_insert_iterator::operator *	/usr/include/boost/interprocess/detail/move.hpp	/^   back_move_insert_iterator& operator*()     { return *this; }$/;"	f	class:boost::interprocess::back_move_insert_iterator	access:public	signature:()
boost::interprocess::back_move_insert_iterator::operator ++	/usr/include/boost/interprocess/detail/move.hpp	/^   back_move_insert_iterator& operator++()    { return *this; }$/;"	f	class:boost::interprocess::back_move_insert_iterator	access:public	signature:()
boost::interprocess::back_move_insert_iterator::operator ++	/usr/include/boost/interprocess/detail/move.hpp	/^   back_move_insert_iterator& operator++(int) { return *this; }$/;"	f	class:boost::interprocess::back_move_insert_iterator	access:public	signature:(int)
boost::interprocess::back_move_insert_iterator::operator =	/usr/include/boost/interprocess/detail/move.hpp	/^   back_move_insert_iterator& operator=(typename C::reference x)$/;"	f	class:boost::interprocess::back_move_insert_iterator	access:public	signature:(typename C::reference x)
boost::interprocess::bad_alloc	/usr/include/boost/interprocess/exceptions.hpp	/^class bad_alloc : public interprocess_exception$/;"	c	namespace:boost::interprocess	inherits:interprocess_exception
boost::interprocess::bad_alloc::what	/usr/include/boost/interprocess/exceptions.hpp	/^    virtual const char* what() const throw()$/;"	f	class:boost::interprocess::bad_alloc	access:public	signature:() const
boost::interprocess::bad_weak_ptr	/usr/include/boost/interprocess/smart_ptr/detail/bad_weak_ptr.hpp	/^class bad_weak_ptr$/;"	c	namespace:boost::interprocess	inherits:std::exception
boost::interprocess::bad_weak_ptr::what	/usr/include/boost/interprocess/smart_ptr/detail/bad_weak_ptr.hpp	/^   virtual char const * what() const throw()$/;"	f	class:boost::interprocess::bad_weak_ptr	access:public	signature:() const
boost::interprocess::barrier	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^class barrier$/;"	c	namespace:boost::interprocess
boost::interprocess::barrier::barrier	/usr/include/boost/interprocess/sync/emulation/interprocess_barrier.hpp	/^inline barrier::barrier(unsigned int count)$/;"	f	class:boost::interprocess::barrier	signature:(unsigned int count)
boost::interprocess::barrier::barrier	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^   barrier(unsigned int count);$/;"	p	class:boost::interprocess::barrier	access:public	signature:(unsigned int count)
boost::interprocess::barrier::barrier	/usr/include/boost/interprocess/sync/posix/interprocess_barrier.hpp	/^inline barrier::barrier(unsigned int count)$/;"	f	class:boost::interprocess::barrier	signature:(unsigned int count)
boost::interprocess::barrier::m_barrier	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^      pthread_barrier_t    m_barrier;$/;"	m	class:boost::interprocess::barrier	access:private
boost::interprocess::barrier::m_cond	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^      interprocess_condition m_cond;$/;"	m	class:boost::interprocess::barrier	access:private
boost::interprocess::barrier::m_count	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^      unsigned int m_count;$/;"	m	class:boost::interprocess::barrier	access:private
boost::interprocess::barrier::m_generation	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^      unsigned int m_generation;$/;"	m	class:boost::interprocess::barrier	access:private
boost::interprocess::barrier::m_mutex	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^      interprocess_mutex m_mutex;$/;"	m	class:boost::interprocess::barrier	access:private
boost::interprocess::barrier::m_threshold	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^      unsigned int m_threshold;$/;"	m	class:boost::interprocess::barrier	access:private
boost::interprocess::barrier::wait	/usr/include/boost/interprocess/sync/emulation/interprocess_barrier.hpp	/^inline bool barrier::wait()$/;"	f	class:boost::interprocess::barrier	signature:()
boost::interprocess::barrier::wait	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^   bool wait();$/;"	p	class:boost::interprocess::barrier	access:public	signature:()
boost::interprocess::barrier::wait	/usr/include/boost/interprocess/sync/posix/interprocess_barrier.hpp	/^inline bool barrier::wait()$/;"	f	class:boost::interprocess::barrier	signature:()
boost::interprocess::barrier::~barrier	/usr/include/boost/interprocess/sync/emulation/interprocess_barrier.hpp	/^inline barrier::~barrier(){}$/;"	f	class:boost::interprocess::barrier	signature:()
boost::interprocess::barrier::~barrier	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^   ~barrier();$/;"	p	class:boost::interprocess::barrier	access:public	signature:()
boost::interprocess::barrier::~barrier	/usr/include/boost/interprocess/sync/posix/interprocess_barrier.hpp	/^inline barrier::~barrier()$/;"	f	class:boost::interprocess::barrier	signature:()
boost::interprocess::basic_bufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^class basic_bufferbuf $/;"	c	namespace:boost::interprocess	inherits:std::basic_streambuf
boost::interprocess::basic_bufferbuf::base_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_streambuf<char_type, traits_type>  base_t;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
boost::interprocess::basic_bufferbuf::basic_bufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   explicit basic_bufferbuf(CharT *buffer, std::size_t length, $/;"	f	class:boost::interprocess::basic_bufferbuf	access:public	signature:(CharT *buffer, std::size_t length, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_bufferbuf::basic_bufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   explicit basic_bufferbuf(std::ios_base::openmode mode$/;"	f	class:boost::interprocess::basic_bufferbuf	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_bufferbuf::buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::pair<CharT *, std::size_t> buffer() const$/;"	f	class:boost::interprocess::basic_bufferbuf	access:public	signature:() const
boost::interprocess::basic_bufferbuf::buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   void buffer(CharT *buffer, std::size_t length)$/;"	f	class:boost::interprocess::basic_bufferbuf	access:public	signature:(CharT *buffer, std::size_t length)
boost::interprocess::basic_bufferbuf::char_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef CharT                                         char_type;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
boost::interprocess::basic_bufferbuf::int_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename CharTraits::int_type                 int_type;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
boost::interprocess::basic_bufferbuf::m_buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   CharT *                 m_buffer;$/;"	m	class:boost::interprocess::basic_bufferbuf	access:private
boost::interprocess::basic_bufferbuf::m_length	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::size_t             m_length;$/;"	m	class:boost::interprocess::basic_bufferbuf	access:private
boost::interprocess::basic_bufferbuf::m_mode	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::ios_base::openmode m_mode;$/;"	m	class:boost::interprocess::basic_bufferbuf	access:private
boost::interprocess::basic_bufferbuf::off_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename CharTraits::off_type                 off_type;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
boost::interprocess::basic_bufferbuf::overflow	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual int_type overflow(int_type c = CharTraits::eof())$/;"	f	class:boost::interprocess::basic_bufferbuf	access:protected	signature:(int_type c = CharTraits::eof())
boost::interprocess::basic_bufferbuf::pbackfail	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual int_type pbackfail(int_type c = CharTraits::eof())$/;"	f	class:boost::interprocess::basic_bufferbuf	access:protected	signature:(int_type c = CharTraits::eof())
boost::interprocess::basic_bufferbuf::pos_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename CharTraits::pos_type                 pos_type;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
boost::interprocess::basic_bufferbuf::seekoff	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual pos_type seekoff(off_type off, std::ios_base::seekdir dir,$/;"	f	class:boost::interprocess::basic_bufferbuf	access:protected	signature:(off_type off, std::ios_base::seekdir dir, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_bufferbuf::seekpos	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual pos_type seekpos(pos_type pos, std::ios_base::openmode mode $/;"	f	class:boost::interprocess::basic_bufferbuf	access:protected	signature:(pos_type pos, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_bufferbuf::set_pointers	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   void set_pointers()$/;"	f	class:boost::interprocess::basic_bufferbuf	access:private	signature:()
boost::interprocess::basic_bufferbuf::traits_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef CharTraits                                    traits_type;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
boost::interprocess::basic_bufferbuf::underflow	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual int_type underflow()$/;"	f	class:boost::interprocess::basic_bufferbuf	access:protected	signature:()
boost::interprocess::basic_bufferbuf::~basic_bufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual ~basic_bufferbuf(){}$/;"	f	class:boost::interprocess::basic_bufferbuf	access:public	signature:()
boost::interprocess::basic_bufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^class basic_bufferstream $/;"	c	namespace:boost::interprocess	inherits:std::basic_iostream
boost::interprocess::basic_bufferstream::base_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_iostream<char_type, CharTraits>            base_t;$/;"	t	class:boost::interprocess::basic_bufferstream	access:private
boost::interprocess::basic_bufferstream::basic_bufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferstream(CharT *buffer, std::size_t length,$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:(CharT *buffer, std::size_t length, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_bufferstream::basic_bufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferstream(std::ios_base::openmode mode $/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_bufferstream::basic_ios_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_ios<char_type, CharTraits>                 basic_ios_t;$/;"	t	class:boost::interprocess::basic_bufferstream	access:private
boost::interprocess::basic_bufferstream::buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::pair<CharT *, std::size_t> buffer() const$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:() const
boost::interprocess::basic_bufferstream::buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   void buffer(CharT *buffer, std::size_t length)$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:(CharT *buffer, std::size_t length)
boost::interprocess::basic_bufferstream::char_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^      <CharT, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_bufferstream	access:public
boost::interprocess::basic_bufferstream::int_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_bufferstream	access:public
boost::interprocess::basic_bufferstream::m_buf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits> m_buf;$/;"	m	class:boost::interprocess::basic_bufferstream	access:private
boost::interprocess::basic_bufferstream::off_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_bufferstream	access:public
boost::interprocess::basic_bufferstream::pos_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_bufferstream	access:public
boost::interprocess::basic_bufferstream::rdbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:() const
boost::interprocess::basic_bufferstream::traits_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_bufferstream	access:public
boost::interprocess::basic_bufferstream::~basic_bufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   ~basic_bufferstream(){}$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:()
boost::interprocess::basic_ibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^class basic_ibufferstream$/;"	c	namespace:boost::interprocess	inherits:std::basic_istream
boost::interprocess::basic_ibufferstream::base_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_istream<char_type, CharTraits>            base_t;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:private
boost::interprocess::basic_ibufferstream::basic_ibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_ibufferstream(const CharT *buffer, std::size_t length,$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:(const CharT *buffer, std::size_t length, std::ios_base::openmode mode = std::ios_base::in)
boost::interprocess::basic_ibufferstream::basic_ibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_ibufferstream(std::ios_base::openmode mode = std::ios_base::in)$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in)
boost::interprocess::basic_ibufferstream::basic_ios_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_ios<char_type, CharTraits>                basic_ios_t;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:private
boost::interprocess::basic_ibufferstream::buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::pair<const CharT *, std::size_t> buffer() const$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:() const
boost::interprocess::basic_ibufferstream::buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   void buffer(const CharT *buffer, std::size_t length)$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:(const CharT *buffer, std::size_t length)
boost::interprocess::basic_ibufferstream::char_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^      <CharT, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:public
boost::interprocess::basic_ibufferstream::int_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:public
boost::interprocess::basic_ibufferstream::m_buf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits> m_buf;$/;"	m	class:boost::interprocess::basic_ibufferstream	access:private
boost::interprocess::basic_ibufferstream::off_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:public
boost::interprocess::basic_ibufferstream::pos_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:public
boost::interprocess::basic_ibufferstream::rdbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:() const
boost::interprocess::basic_ibufferstream::traits_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:public
boost::interprocess::basic_ibufferstream::~basic_ibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   ~basic_ibufferstream(){};$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:()
boost::interprocess::basic_ivectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^class basic_ivectorstream$/;"	c	namespace:boost::interprocess	inherits:std::basic_istream
boost::interprocess::basic_ivectorstream::base_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_istream<char_type, CharTraits>            base_t;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:private
boost::interprocess::basic_ivectorstream::basic_ios_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_ios<char_type, CharTraits>                basic_ios_t;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:private
boost::interprocess::basic_ivectorstream::basic_ivectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_ivectorstream(const VectorParameter &param,$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:(const VectorParameter &param, std::ios_base::openmode mode = std::ios_base::in)
boost::interprocess::basic_ivectorstream::basic_ivectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_ivectorstream(std::ios_base::openmode mode = std::ios_base::in)$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in)
boost::interprocess::basic_ivectorstream::char_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^      <typename CharVector::value_type, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
boost::interprocess::basic_ivectorstream::clear	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void clear() $/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:()
boost::interprocess::basic_ivectorstream::int_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
boost::interprocess::basic_ivectorstream::m_buf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf<CharVector, CharTraits> m_buf;$/;"	m	class:boost::interprocess::basic_ivectorstream	access:private
boost::interprocess::basic_ivectorstream::off_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
boost::interprocess::basic_ivectorstream::pos_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
boost::interprocess::basic_ivectorstream::rdbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf<CharVector, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:() const
boost::interprocess::basic_ivectorstream::reserve	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void reserve(typename vector_type::size_type size) $/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:(typename vector_type::size_type size)
boost::interprocess::basic_ivectorstream::swap_vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void swap_vector(vector_type &vect)$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:(vector_type &vect)
boost::interprocess::basic_ivectorstream::traits_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
boost::interprocess::basic_ivectorstream::vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   const vector_type &vector() const $/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:() const
boost::interprocess::basic_ivectorstream::vector_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef CharVector                                                   vector_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
boost::interprocess::basic_ivectorstream::~basic_ivectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   ~basic_ivectorstream(){};$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:()
boost::interprocess::basic_managed_external_buffer	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^class basic_managed_external_buffer $/;"	c	namespace:boost::interprocess	inherits:detail::basic_managed_memory_impl
boost::interprocess::basic_managed_external_buffer::base_t	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^      <CharType, AllocationAlgorithm, IndexType>    base_t;$/;"	t	class:boost::interprocess::basic_managed_external_buffer	access:private
boost::interprocess::basic_managed_external_buffer::basic_managed_external_buffer	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   basic_managed_external_buffer$/;"	f	class:boost::interprocess::basic_managed_external_buffer	access:public	signature:(create_only_t, void *addr, std::size_t size)
boost::interprocess::basic_managed_external_buffer::basic_managed_external_buffer	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   basic_managed_external_buffer$/;"	f	class:boost::interprocess::basic_managed_external_buffer	access:public	signature:(open_only_t, void *addr, std::size_t size)
boost::interprocess::basic_managed_external_buffer::basic_managed_external_buffer	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   basic_managed_external_buffer()$/;"	f	class:boost::interprocess::basic_managed_external_buffer	access:public	signature:()
boost::interprocess::basic_managed_external_buffer::grow	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   void grow(std::size_t extra_bytes)$/;"	f	class:boost::interprocess::basic_managed_external_buffer	access:public	signature:(std::size_t extra_bytes)
boost::interprocess::basic_managed_external_buffer::swap	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   void swap(basic_managed_external_buffer &other)$/;"	f	class:boost::interprocess::basic_managed_external_buffer	access:public	signature:(basic_managed_external_buffer &other)
boost::interprocess::basic_managed_heap_memory	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^class basic_managed_heap_memory $/;"	c	namespace:boost::interprocess	inherits:detail::basic_managed_memory_impl
boost::interprocess::basic_managed_heap_memory::base_t	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^      <CharType, AllocationAlgorithm, IndexType>             base_t;$/;"	t	class:boost::interprocess::basic_managed_heap_memory	access:private
boost::interprocess::basic_managed_heap_memory::basic_managed_heap_memory	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   basic_managed_heap_memory(){}$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:public	signature:()
boost::interprocess::basic_managed_heap_memory::basic_managed_heap_memory	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   basic_managed_heap_memory(std::size_t size)$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:public	signature:(std::size_t size)
boost::interprocess::basic_managed_heap_memory::grow	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   bool grow(std::size_t extra_bytes)$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:public	signature:(std::size_t extra_bytes)
boost::interprocess::basic_managed_heap_memory::m_heapmem	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   std::vector<char>  m_heapmem;$/;"	m	class:boost::interprocess::basic_managed_heap_memory	access:private
boost::interprocess::basic_managed_heap_memory::priv_close	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   void priv_close()$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:private	signature:()
boost::interprocess::basic_managed_heap_memory::swap	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   void swap(basic_managed_heap_memory &other)$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:public	signature:(basic_managed_heap_memory &other)
boost::interprocess::basic_managed_heap_memory::~basic_managed_heap_memory	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   ~basic_managed_heap_memory()$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:public	signature:()
boost::interprocess::basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^class basic_managed_mapped_file $/;"	c	namespace:boost::interprocess	inherits:detail::basic_managed_memory_impl
boost::interprocess::basic_managed_mapped_file::base_t	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^      detail::managed_open_or_create_impl<detail::file_wrapper>::ManagedOpenOrCreateUserOffset>   base_t;$/;"	t	class:boost::interprocess::basic_managed_mapped_file	access:public
boost::interprocess::basic_managed_mapped_file::basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file (open_copy_on_write_t, const char* name, $/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(open_copy_on_write_t, const char* name, const void *addr = 0)
boost::interprocess::basic_managed_mapped_file::basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file (open_only_t open_only, const char* name, $/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(open_only_t open_only, const char* name, const void *addr = 0)
boost::interprocess::basic_managed_mapped_file::basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file (open_or_create_t open_or_create,$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(open_or_create_t open_or_create, const char *name, std::size_t size, const void *addr = 0)
boost::interprocess::basic_managed_mapped_file::basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file (open_read_only_t, const char* name, $/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(open_read_only_t, const char* name, const void *addr = 0)
boost::interprocess::basic_managed_mapped_file::basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file()$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:()
boost::interprocess::basic_managed_mapped_file::basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file(create_only_t create_only, const char *name,$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(create_only_t create_only, const char *name, std::size_t size, const void *addr = 0)
boost::interprocess::basic_managed_mapped_file::char_ptr_holder_t	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   typedef typename base_t::char_ptr_holder_t   char_ptr_holder_t;$/;"	t	class:boost::interprocess::basic_managed_mapped_file	access:private
boost::interprocess::basic_managed_mapped_file::create_open_func_t	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   typedef detail::create_open_func<base_t>        create_open_func_t;   $/;"	t	class:boost::interprocess::basic_managed_mapped_file	access:private
boost::interprocess::basic_managed_mapped_file::device_type	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   typedef detail::file_wrapper device_type;$/;"	t	class:boost::interprocess::basic_managed_mapped_file	access:public
boost::interprocess::basic_managed_mapped_file::find	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   std::pair<T*, std::size_t> find  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::basic_managed_mapped_file::flush	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   bool flush()$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:()
boost::interprocess::basic_managed_mapped_file::get_this_pointer	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file *get_this_pointer()$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:private	signature:()
boost::interprocess::basic_managed_mapped_file::grow	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   static bool grow(const char *filename, std::size_t extra_bytes)$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(const char *filename, std::size_t extra_bytes)
boost::interprocess::basic_managed_mapped_file::managed_open_or_create_type	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   typedef detail::managed_open_or_create_impl<detail::file_wrapper> managed_open_or_create_type;$/;"	t	class:boost::interprocess::basic_managed_mapped_file	access:private
boost::interprocess::basic_managed_mapped_file::m_mfile	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   managed_open_or_create_type m_mfile;$/;"	m	class:boost::interprocess::basic_managed_mapped_file	access:private
boost::interprocess::basic_managed_mapped_file::shrink_to_fit	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   static bool shrink_to_fit(const char *filename)$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(const char *filename)
boost::interprocess::basic_managed_mapped_file::swap	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   void swap(basic_managed_mapped_file &other)$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(basic_managed_mapped_file &other)
boost::interprocess::basic_managed_mapped_file::~basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   ~basic_managed_mapped_file()$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:()
boost::interprocess::basic_managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^class basic_managed_multi_shared_memory $/;"	c	namespace:boost::interprocess	inherits:detail::basic_managed_memory_impl
boost::interprocess::basic_managed_multi_shared_memory::base_t	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      <CharType, MemoryAlgorithm, IndexType>                   base_t;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::basic_managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   basic_managed_multi_shared_memory(create_only_t,$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:public	signature:(create_only_t, const char *name, std::size_t size)
boost::interprocess::basic_managed_multi_shared_memory::basic_managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   basic_managed_multi_shared_memory(open_only_t, const char *name)$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:public	signature:(open_only_t, const char *name)
boost::interprocess::basic_managed_multi_shared_memory::basic_managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   basic_managed_multi_shared_memory(open_or_create_t,$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:public	signature:(open_or_create_t, const char *name, std::size_t size)
boost::interprocess::basic_managed_multi_shared_memory::close_func	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   struct close_func$/;"	s	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::close_func::close_func	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      close_func(self_t * const frontend)$/;"	f	struct:boost::interprocess::basic_managed_multi_shared_memory::close_func	access:public	signature:(self_t * const frontend)
boost::interprocess::basic_managed_multi_shared_memory::close_func::mp_frontend	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      self_t * const    mp_frontend;$/;"	m	struct:boost::interprocess::basic_managed_multi_shared_memory::close_func	access:public
boost::interprocess::basic_managed_multi_shared_memory::close_func::operator ()	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      void operator()(const mapped_region &region, bool last) const$/;"	f	struct:boost::interprocess::basic_managed_multi_shared_memory::close_func	access:public	signature:(const mapped_region &region, bool last) const
boost::interprocess::basic_managed_multi_shared_memory::close_func::void_pointer	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^         basic_managed_multi_shared_memory::void_pointer   void_pointer;$/;"	t	struct:boost::interprocess::basic_managed_multi_shared_memory::close_func	access:public
boost::interprocess::basic_managed_multi_shared_memory::create_open_func	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   struct create_open_func$/;"	s	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::create_open_func::create_open_func	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      create_open_func(self_t * const    frontend,$/;"	f	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public	signature:(self_t * const frontend, type_t type, std::size_t segment_number)
boost::interprocess::basic_managed_multi_shared_memory::create_open_func::DoCreate	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      enum type_t {  DoCreate, DoOpen, DoOpenOrCreate  };$/;"	e	enum:boost::interprocess::basic_managed_multi_shared_memory::create_open_func::type_t
boost::interprocess::basic_managed_multi_shared_memory::create_open_func::DoOpen	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      enum type_t {  DoCreate, DoOpen, DoOpenOrCreate  };$/;"	e	enum:boost::interprocess::basic_managed_multi_shared_memory::create_open_func::type_t
boost::interprocess::basic_managed_multi_shared_memory::create_open_func::DoOpenOrCreate	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      enum type_t {  DoCreate, DoOpen, DoOpenOrCreate  };$/;"	e	enum:boost::interprocess::basic_managed_multi_shared_memory::create_open_func::type_t
boost::interprocess::basic_managed_multi_shared_memory::create_open_func::mp_frontend	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      self_t * const    mp_frontend;$/;"	m	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public
boost::interprocess::basic_managed_multi_shared_memory::create_open_func::m_segment_number	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      std::size_t       m_segment_number;$/;"	m	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public
boost::interprocess::basic_managed_multi_shared_memory::create_open_func::m_type	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      type_t            m_type;$/;"	m	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public
boost::interprocess::basic_managed_multi_shared_memory::create_open_func::operator ()	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      bool operator()(void *addr, std::size_t size, bool created) const$/;"	f	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public	signature:(void *addr, std::size_t size, bool created) const
boost::interprocess::basic_managed_multi_shared_memory::create_open_func::type_t	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      enum type_t {  DoCreate, DoOpen, DoOpenOrCreate  };$/;"	g	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public
boost::interprocess::basic_managed_multi_shared_memory::create_open_func::void_pointer	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^         basic_managed_multi_shared_memory::void_pointer   void_pointer;$/;"	t	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public
boost::interprocess::basic_managed_multi_shared_memory::get_this_pointer	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   basic_managed_multi_shared_memory *get_this_pointer()$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:private	signature:()
boost::interprocess::basic_managed_multi_shared_memory::group_services	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   class group_services$/;"	c	class:boost::interprocess::basic_managed_multi_shared_memory	inherits:multi_segment_services	access:private
boost::interprocess::basic_managed_multi_shared_memory::group_services::create_new_segment	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      virtual std::pair<void *, std::size_t> create_new_segment(std::size_t alloc_size)$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:(std::size_t alloc_size)
boost::interprocess::basic_managed_multi_shared_memory::group_services::frontend_t	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      typedef basic_managed_multi_shared_memory             frontend_t;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public
boost::interprocess::basic_managed_multi_shared_memory::group_services::get_group	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      segment_group_id get_group() const$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:() const
boost::interprocess::basic_managed_multi_shared_memory::group_services::get_min_segment_size	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      std::size_t get_min_segment_size() const$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:() const
boost::interprocess::basic_managed_multi_shared_memory::group_services::group_services	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      group_services(frontend_t *const frontend)$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:(frontend_t *const frontend)
boost::interprocess::basic_managed_multi_shared_memory::group_services::mp_frontend	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      frontend_t * const   mp_frontend;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:private
boost::interprocess::basic_managed_multi_shared_memory::group_services::m_group	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      segment_group_id     m_group;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:private
boost::interprocess::basic_managed_multi_shared_memory::group_services::m_min_segment_size	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      std::size_t          m_min_segment_size;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:private
boost::interprocess::basic_managed_multi_shared_memory::group_services::result_type	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      typedef std::pair<void *, std::size_t>                result_type;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public
boost::interprocess::basic_managed_multi_shared_memory::group_services::segment_group_id	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      typedef typename void_pointer::segment_group_id       segment_group_id;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public
boost::interprocess::basic_managed_multi_shared_memory::group_services::set_group	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      void set_group(segment_group_id group)$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:(segment_group_id group)
boost::interprocess::basic_managed_multi_shared_memory::group_services::set_min_segment_size	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      void set_min_segment_size(std::size_t min_segment_size)$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:(std::size_t min_segment_size)
boost::interprocess::basic_managed_multi_shared_memory::group_services::update_segments	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      virtual bool update_segments ()$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:()
boost::interprocess::basic_managed_multi_shared_memory::group_services::void_pointer	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^         basic_managed_multi_shared_memory::void_pointer    void_pointer;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public
boost::interprocess::basic_managed_multi_shared_memory::group_services::~group_services	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      virtual ~group_services(){}$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:()
boost::interprocess::basic_managed_multi_shared_memory::managed_impl	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      managed_open_or_create_impl<shared_memory_object>  managed_impl;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::m_group_services	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   group_services m_group_services;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::m_root_name	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   std::string    m_root_name;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::m_shmem_list	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   shmem_list_t   m_shmem_list;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::priv_close	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   void priv_close()$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:private	signature:()
boost::interprocess::basic_managed_multi_shared_memory::priv_new_segment	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   bool  priv_new_segment(typename create_open_func::type_t type,$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:private	signature:(typename create_open_func::type_t type, std::size_t size, const void *addr)
boost::interprocess::basic_managed_multi_shared_memory::priv_open_or_create	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   bool  priv_open_or_create(typename create_open_func::type_t type, $/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:private	signature:(typename create_open_func::type_t type, const char *name, std::size_t size)
boost::interprocess::basic_managed_multi_shared_memory::segment_group_id	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   typedef typename void_pointer::segment_group_id       segment_group_id;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::self_t	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^               <CharType, MemoryAlgorithm, IndexType>    self_t;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::shmem_list_t	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   typedef list<managed_impl> shmem_list_t;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::void_pointer	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   typedef typename MemoryAlgorithm::void_pointer        void_pointer;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
boost::interprocess::basic_managed_multi_shared_memory::~basic_managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   ~basic_managed_multi_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:public	signature:()
boost::interprocess::basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^class basic_managed_shared_memory $/;"	c	namespace:boost::interprocess	inherits:detail::basic_managed_memory_impl,detail::managed_open_or_create_impl
boost::interprocess::basic_managed_shared_memory::base2_t	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^      <shared_memory_object>                       base2_t;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:private
boost::interprocess::basic_managed_shared_memory::base_t	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^      detail::managed_open_or_create_impl<shared_memory_object>::ManagedOpenOrCreateUserOffset>   base_t;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:private
boost::interprocess::basic_managed_shared_memory::basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory (open_copy_on_write_t, const char* name, $/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(open_copy_on_write_t, const char* name, const void *addr = 0)
boost::interprocess::basic_managed_shared_memory::basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory (open_only_t open_only, const char* name, $/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(open_only_t open_only, const char* name, const void *addr = 0)
boost::interprocess::basic_managed_shared_memory::basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory (open_or_create_t open_or_create,$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(open_or_create_t open_or_create, const char *name, std::size_t size, const void *addr = 0)
boost::interprocess::basic_managed_shared_memory::basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory (open_read_only_t, const char* name, $/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(open_read_only_t, const char* name, const void *addr = 0)
boost::interprocess::basic_managed_shared_memory::basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:()
boost::interprocess::basic_managed_shared_memory::basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory(create_only_t create_only, const char *name,$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(create_only_t create_only, const char *name, std::size_t size, const void *addr = 0)
boost::interprocess::basic_managed_shared_memory::char_ptr_holder_t	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   typedef typename base_t::char_ptr_holder_t   char_ptr_holder_t;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:private
boost::interprocess::basic_managed_shared_memory::create_open_func_t	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   typedef detail::create_open_func<base_t>        create_open_func_t;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:private
boost::interprocess::basic_managed_shared_memory::device_type	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   typedef shared_memory_object                       device_type;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:public
boost::interprocess::basic_managed_shared_memory::find	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   std::pair<T*, std::size_t> find  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::basic_managed_shared_memory::get_this_pointer	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory *get_this_pointer()$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:private	signature:()
boost::interprocess::basic_managed_shared_memory::grow	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   static bool grow(const char *shmname, std::size_t extra_bytes)$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(const char *shmname, std::size_t extra_bytes)
boost::interprocess::basic_managed_shared_memory::shrink_to_fit	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   static bool shrink_to_fit(const char *shmname)$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(const char *shmname)
boost::interprocess::basic_managed_shared_memory::swap	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   void swap(basic_managed_shared_memory &other)$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(basic_managed_shared_memory &other)
boost::interprocess::basic_managed_shared_memory::~basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   ~basic_managed_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:()
boost::interprocess::basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^class basic_managed_windows_shared_memory $/;"	c	namespace:boost::interprocess	inherits:detail::basic_managed_memory_impl
boost::interprocess::basic_managed_windows_shared_memory::base_t	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^      detail::managed_open_or_create_impl<windows_shared_memory>::ManagedOpenOrCreateUserOffset>   base_t;$/;"	t	class:boost::interprocess::basic_managed_windows_shared_memory	access:private
boost::interprocess::basic_managed_windows_shared_memory::basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(create_only_t create_only, const char *name, std::size_t size, const void *addr = 0)
boost::interprocess::basic_managed_windows_shared_memory::basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(open_copy_on_write_t, const char* name, const void *addr = 0)
boost::interprocess::basic_managed_windows_shared_memory::basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(open_only_t open_only, const char* name, const void *addr = 0)
boost::interprocess::basic_managed_windows_shared_memory::basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(open_or_create_t open_or_create, const char *name, std::size_t size, const void *addr = 0)
boost::interprocess::basic_managed_windows_shared_memory::basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(open_read_only_t, const char* name, const void *addr = 0)
boost::interprocess::basic_managed_windows_shared_memory::basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:()
boost::interprocess::basic_managed_windows_shared_memory::char_ptr_holder_t	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   typedef typename base_t::char_ptr_holder_t   char_ptr_holder_t;$/;"	t	class:boost::interprocess::basic_managed_windows_shared_memory	access:private
boost::interprocess::basic_managed_windows_shared_memory::create_open_func_t	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   typedef detail::create_open_func<base_t>        create_open_func_t;$/;"	t	class:boost::interprocess::basic_managed_windows_shared_memory	access:private
boost::interprocess::basic_managed_windows_shared_memory::find	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   std::pair<T*, std::size_t> find  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::basic_managed_windows_shared_memory::get_this_pointer	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory *get_this_pointer()$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:private	signature:()
boost::interprocess::basic_managed_windows_shared_memory::m_wshm	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   detail::managed_open_or_create_impl<windows_shared_memory, false> m_wshm;$/;"	m	class:boost::interprocess::basic_managed_windows_shared_memory	access:private
boost::interprocess::basic_managed_windows_shared_memory::swap	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   void swap(basic_managed_windows_shared_memory &other)$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(basic_managed_windows_shared_memory &other)
boost::interprocess::basic_managed_windows_shared_memory::~basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   ~basic_managed_windows_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:()
boost::interprocess::basic_obufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^class basic_obufferstream$/;"	c	namespace:boost::interprocess	inherits:std::basic_ostream
boost::interprocess::basic_obufferstream::base_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_ostream<char_type, CharTraits>  base_t;$/;"	t	class:boost::interprocess::basic_obufferstream	access:private
boost::interprocess::basic_obufferstream::basic_ios_t	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef std::basic_ios<char_type, CharTraits>      basic_ios_t;$/;"	t	class:boost::interprocess::basic_obufferstream	access:private
boost::interprocess::basic_obufferstream::basic_obufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_obufferstream(CharT *buffer, std::size_t length,$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:(CharT *buffer, std::size_t length, std::ios_base::openmode mode = std::ios_base::out)
boost::interprocess::basic_obufferstream::basic_obufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_obufferstream(std::ios_base::openmode mode = std::ios_base::out)$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::out)
boost::interprocess::basic_obufferstream::buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::pair<CharT *, std::size_t> buffer() const$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:() const
boost::interprocess::basic_obufferstream::buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   void buffer(CharT *buffer, std::size_t length)$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:(CharT *buffer, std::size_t length)
boost::interprocess::basic_obufferstream::char_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^      <CharT, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_obufferstream	access:public
boost::interprocess::basic_obufferstream::int_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_obufferstream	access:public
boost::interprocess::basic_obufferstream::m_buf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits> m_buf;$/;"	m	class:boost::interprocess::basic_obufferstream	access:private
boost::interprocess::basic_obufferstream::off_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_obufferstream	access:public
boost::interprocess::basic_obufferstream::pos_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_obufferstream	access:public
boost::interprocess::basic_obufferstream::rdbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:() const
boost::interprocess::basic_obufferstream::traits_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_obufferstream	access:public
boost::interprocess::basic_obufferstream::~basic_obufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   ~basic_obufferstream(){}$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:()
boost::interprocess::basic_ovectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^class basic_ovectorstream$/;"	c	namespace:boost::interprocess	inherits:std::basic_ostream
boost::interprocess::basic_ovectorstream::base_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_ostream<char_type, CharTraits>  base_t;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:private
boost::interprocess::basic_ovectorstream::basic_ios_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_ios<char_type, CharTraits>      basic_ios_t;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:private
boost::interprocess::basic_ovectorstream::basic_ovectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_ovectorstream(const VectorParameter &param,$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:(const VectorParameter &param, std::ios_base::openmode mode = std::ios_base::out)
boost::interprocess::basic_ovectorstream::basic_ovectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_ovectorstream(std::ios_base::openmode mode = std::ios_base::out)$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::out)
boost::interprocess::basic_ovectorstream::char_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^      <typename CharVector::value_type, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
boost::interprocess::basic_ovectorstream::int_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
boost::interprocess::basic_ovectorstream::m_buf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf<CharVector, CharTraits> m_buf;$/;"	m	class:boost::interprocess::basic_ovectorstream	access:private
boost::interprocess::basic_ovectorstream::off_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
boost::interprocess::basic_ovectorstream::pos_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
boost::interprocess::basic_ovectorstream::rdbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf<CharVector, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:() const
boost::interprocess::basic_ovectorstream::reserve	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void reserve(typename vector_type::size_type size) $/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:(typename vector_type::size_type size)
boost::interprocess::basic_ovectorstream::swap_vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void swap_vector(vector_type &vect)$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:(vector_type &vect)
boost::interprocess::basic_ovectorstream::traits_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
boost::interprocess::basic_ovectorstream::vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   const vector_type &vector() const $/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:() const
boost::interprocess::basic_ovectorstream::vector_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef CharVector                                                   vector_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
boost::interprocess::basic_ovectorstream::~basic_ovectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   ~basic_ovectorstream(){}$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:()
boost::interprocess::basic_vectorbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^class basic_vectorbuf$/;"	c	namespace:boost::interprocess	inherits:std::basic_streambuf
boost::interprocess::basic_vectorbuf::base_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_streambuf<char_type, traits_type> base_t;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:private
boost::interprocess::basic_vectorbuf::basic_vectorbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf(const basic_vectorbuf&);$/;"	p	class:boost::interprocess::basic_vectorbuf	access:private	signature:(const basic_vectorbuf&)
boost::interprocess::basic_vectorbuf::basic_vectorbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   explicit basic_vectorbuf(const VectorParameter &param,$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:(const VectorParameter &param, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_vectorbuf::basic_vectorbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   explicit basic_vectorbuf(std::ios_base::openmode mode$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_vectorbuf::char_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename CharVector::value_type   char_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
boost::interprocess::basic_vectorbuf::clear	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void clear()$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:()
boost::interprocess::basic_vectorbuf::initialize_pointers	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void initialize_pointers()$/;"	f	class:boost::interprocess::basic_vectorbuf	access:private	signature:()
boost::interprocess::basic_vectorbuf::int_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename CharTraits::int_type     int_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
boost::interprocess::basic_vectorbuf::mp_high_water	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   mutable char_type*      mp_high_water;$/;"	m	class:boost::interprocess::basic_vectorbuf	access:private
boost::interprocess::basic_vectorbuf::m_mode	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   std::ios_base::openmode m_mode;$/;"	m	class:boost::interprocess::basic_vectorbuf	access:private
boost::interprocess::basic_vectorbuf::m_vect	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   mutable vector_type     m_vect;$/;"	m	class:boost::interprocess::basic_vectorbuf	access:private
boost::interprocess::basic_vectorbuf::off_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename CharTraits::off_type     off_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
boost::interprocess::basic_vectorbuf::operator =	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf & operator =(const basic_vectorbuf&);$/;"	p	class:boost::interprocess::basic_vectorbuf	access:private	signature:(const basic_vectorbuf&)
boost::interprocess::basic_vectorbuf::overflow	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual int_type overflow(int_type c = CharTraits::eof())$/;"	f	class:boost::interprocess::basic_vectorbuf	access:protected	signature:(int_type c = CharTraits::eof())
boost::interprocess::basic_vectorbuf::pbackfail	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual int_type pbackfail(int_type c = CharTraits::eof())$/;"	f	class:boost::interprocess::basic_vectorbuf	access:protected	signature:(int_type c = CharTraits::eof())
boost::interprocess::basic_vectorbuf::pos_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename CharTraits::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
boost::interprocess::basic_vectorbuf::reserve	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void reserve(typename vector_type::size_type size) $/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:(typename vector_type::size_type size)
boost::interprocess::basic_vectorbuf::seekoff	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual pos_type seekoff(off_type off, std::ios_base::seekdir dir,$/;"	f	class:boost::interprocess::basic_vectorbuf	access:protected	signature:(off_type off, std::ios_base::seekdir dir, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_vectorbuf::seekpos	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual pos_type seekpos(pos_type pos, std::ios_base::openmode mode $/;"	f	class:boost::interprocess::basic_vectorbuf	access:protected	signature:(pos_type pos, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_vectorbuf::swap_vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void swap_vector(vector_type &vect)$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:(vector_type &vect)
boost::interprocess::basic_vectorbuf::traits_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef CharTraits                        traits_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
boost::interprocess::basic_vectorbuf::underflow	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual int_type underflow()$/;"	f	class:boost::interprocess::basic_vectorbuf	access:protected	signature:()
boost::interprocess::basic_vectorbuf::vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   const vector_type &vector() const $/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:() const
boost::interprocess::basic_vectorbuf::vector_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef CharVector                        vector_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
boost::interprocess::basic_vectorbuf::~basic_vectorbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual ~basic_vectorbuf(){}$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:()
boost::interprocess::basic_vectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^class basic_vectorstream$/;"	c	namespace:boost::interprocess	inherits:std::basic_iostream
boost::interprocess::basic_vectorstream::base_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_iostream<char_type, CharTraits>            base_t;$/;"	t	class:boost::interprocess::basic_vectorstream	access:private
boost::interprocess::basic_vectorstream::basic_ios_t	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef std::basic_ios<char_type, CharTraits>                 basic_ios_t;$/;"	t	class:boost::interprocess::basic_vectorstream	access:private
boost::interprocess::basic_vectorstream::basic_vectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorstream(const VectorParameter &param, std::ios_base::openmode mode$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:(const VectorParameter &param, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_vectorstream::basic_vectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorstream(std::ios_base::openmode mode $/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:(std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
boost::interprocess::basic_vectorstream::char_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^      <typename CharVector::value_type, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
boost::interprocess::basic_vectorstream::clear	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void clear() $/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:()
boost::interprocess::basic_vectorstream::int_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
boost::interprocess::basic_vectorstream::m_buf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf<CharVector, CharTraits> m_buf;$/;"	m	class:boost::interprocess::basic_vectorstream	access:private
boost::interprocess::basic_vectorstream::off_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
boost::interprocess::basic_vectorstream::pos_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
boost::interprocess::basic_vectorstream::rdbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf<CharVector, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:() const
boost::interprocess::basic_vectorstream::reserve	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void reserve(typename vector_type::size_type size) $/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:(typename vector_type::size_type size)
boost::interprocess::basic_vectorstream::swap_vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void swap_vector(vector_type &vect)$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:(vector_type &vect)
boost::interprocess::basic_vectorstream::traits_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
boost::interprocess::basic_vectorstream::vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   const vector_type &vector() const $/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:() const
boost::interprocess::basic_vectorstream::vector_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef CharVector                                                   vector_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
boost::interprocess::basic_vectorstream::~basic_vectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   ~basic_vectorstream(){}$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:()
boost::interprocess::bufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_bufferbuf<char>        bufferbuf;$/;"	t	namespace:boost::interprocess
boost::interprocess::bufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_bufferstream<char>     bufferstream;$/;"	t	namespace:boost::interprocess
boost::interprocess::busy_error	/usr/include/boost/interprocess/errors.hpp	/^   busy_error,       \/\/ implies trying again might succeed$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::cached_adaptive_pool	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^class cached_adaptive_pool$/;"	c	namespace:boost::interprocess	inherits:detail::cached_allocator_impl
boost::interprocess::cached_adaptive_pool::base_t	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^         , 2> base_t;$/;"	t	class:boost::interprocess::cached_adaptive_pool	access:public
boost::interprocess::cached_adaptive_pool::cached_adaptive_pool	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   cached_adaptive_pool$/;"	f	class:boost::interprocess::cached_adaptive_pool	access:public	signature:(const cached_adaptive_pool<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
boost::interprocess::cached_adaptive_pool::cached_adaptive_pool	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   cached_adaptive_pool(SegmentManager *segment_mngr,$/;"	f	class:boost::interprocess::cached_adaptive_pool	access:public	signature:(SegmentManager *segment_mngr, std::size_t max_cached_nodes = base_t::DEFAULT_MAX_CACHED_NODES)
boost::interprocess::cached_adaptive_pool::rebind	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::cached_adaptive_pool	access:public
boost::interprocess::cached_adaptive_pool::rebind::other	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^         <T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::cached_adaptive_pool::rebind	access:public
boost::interprocess::cached_adaptive_pool::version	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   typedef boost::interprocess::version_type<cached_adaptive_pool, 2>   version;$/;"	t	class:boost::interprocess::cached_adaptive_pool	access:public
boost::interprocess::cached_node_allocator	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^class cached_node_allocator$/;"	c	namespace:boost::interprocess	inherits:detail::cached_allocator_impl
boost::interprocess::cached_node_allocator::base_t	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^         , 2> base_t;$/;"	t	class:boost::interprocess::cached_node_allocator	access:public
boost::interprocess::cached_node_allocator::cached_node_allocator	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   cached_node_allocator$/;"	f	class:boost::interprocess::cached_node_allocator	access:public	signature:(const cached_node_allocator<T2, SegmentManager, NodesPerBlock> &other)
boost::interprocess::cached_node_allocator::cached_node_allocator	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   cached_node_allocator(SegmentManager *segment_mngr,$/;"	f	class:boost::interprocess::cached_node_allocator	access:public	signature:(SegmentManager *segment_mngr, std::size_t max_cached_nodes = base_t::DEFAULT_MAX_CACHED_NODES)
boost::interprocess::cached_node_allocator::rebind	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::cached_node_allocator	access:public
boost::interprocess::cached_node_allocator::rebind::other	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^      typedef cached_node_allocator<T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::cached_node_allocator::rebind	access:public
boost::interprocess::cached_node_allocator::version	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   typedef boost::interprocess::version_type<cached_node_allocator, 2>   version;$/;"	t	class:boost::interprocess::cached_node_allocator	access:public
boost::interprocess::const_pointer_cast	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^boost::interprocess::intersegment_ptr<T> const_pointer_cast(const boost::interprocess::intersegment_ptr<U> &r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::intersegment_ptr<U> &r)
boost::interprocess::const_pointer_cast	/usr/include/boost/interprocess/offset_ptr.hpp	/^   const_pointer_cast(boost::interprocess::offset_ptr<U> const & r)$/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::offset_ptr<U> const & r)
boost::interprocess::const_pointer_cast	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^shared_ptr<T, VoidAllocator, Deleter> const_pointer_cast(shared_ptr<U, VoidAllocator, Deleter> const & r)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<U, VoidAllocator, Deleter> const & r)
boost::interprocess::copy_on_write	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , copy_on_write$/;"	e	enum:boost::interprocess::__anon10
boost::interprocess::corrupted_error	/usr/include/boost/interprocess/errors.hpp	/^   corrupted_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::create_only	/usr/include/boost/interprocess/creation_tags.hpp	/^static const create_only_t    create_only    = create_only_t();$/;"	m	namespace:boost::interprocess
boost::interprocess::create_only_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct create_only_t {};$/;"	s	namespace:boost::interprocess
boost::interprocess::defer_lock	/usr/include/boost/interprocess/sync/lock_options.hpp	/^static const defer_lock_type      defer_lock      = defer_lock_type();$/;"	m	namespace:boost::interprocess
boost::interprocess::defer_lock_type	/usr/include/boost/interprocess/sync/lock_options.hpp	/^struct defer_lock_type{};$/;"	s	namespace:boost::interprocess
boost::interprocess::deleter	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^class deleter$/;"	c	namespace:boost::interprocess
boost::interprocess::deleter::deleter	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^   deleter(segment_manager_pointer pmngr)$/;"	f	class:boost::interprocess::deleter	access:public	signature:(segment_manager_pointer pmngr)
boost::interprocess::deleter::mp_mngr	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^   segment_manager_pointer mp_mngr;$/;"	m	class:boost::interprocess::deleter	access:private
boost::interprocess::deleter::operator ()	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^   void operator()(const pointer &p)$/;"	f	class:boost::interprocess::deleter	access:public	signature:(const pointer &p)
boost::interprocess::deleter::pointer	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^      <typename SegmentManager::void_pointer, T>::type   pointer;$/;"	t	class:boost::interprocess::deleter	access:public
boost::interprocess::deleter::segment_manager_pointer	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^      <pointer, SegmentManager>::type   segment_manager_pointer;$/;"	t	class:boost::interprocess::deleter	access:private
boost::interprocess::detail	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/creation_tags.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/detail/atomic.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^namespace boost { namespace interprocess { namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/detail/intermodule_singleton.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/detail/interprocess_tester.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^namespace detail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/detail/math_functions.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/detail/mpl.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/detail/type_traits.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/detail/utilities.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/indexes/map_index.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/mapped_region.hpp	/^namespace detail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/mapped_region.hpp	/^namespace detail{ class raw_mapped_region_creator; }$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/sync/named_condition.hpp	/^namespace detail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^namespace detail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^namespace detail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/sync/posix/ptime_to_timespec.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^namespace detail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
boost::interprocess::detail::acquire_file_lock	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool acquire_file_lock(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd)
boost::interprocess::detail::acquire_file_lock_sharable	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool acquire_file_lock_sharable(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd)
boost::interprocess::detail::adaptive_pool_base	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^class adaptive_pool_base$/;"	c	namespace:boost::interprocess::detail	inherits:node_pool_allocation_impl
boost::interprocess::detail::adaptive_pool_base::adaptive_pool_base	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_base$/;"	f	class:boost::interprocess::detail::adaptive_pool_base	access:public	signature:(const adaptive_pool_base<Version, T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
boost::interprocess::detail::adaptive_pool_base::adaptive_pool_base	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_base(const adaptive_pool_base &other) $/;"	f	class:boost::interprocess::detail::adaptive_pool_base	access:public	signature:(const adaptive_pool_base &other)
boost::interprocess::detail::adaptive_pool_base::adaptive_pool_base	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_base(segment_manager *segment_mngr) $/;"	f	class:boost::interprocess::detail::adaptive_pool_base	access:public	signature:(segment_manager *segment_mngr)
boost::interprocess::detail::adaptive_pool_base::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   BOOST_STATIC_ASSERT((Version <=2));$/;"	p	class:boost::interprocess::detail::adaptive_pool_base	access:public	signature:(Version <=2)
boost::interprocess::detail::adaptive_pool_base::const_pointer	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      pointer_to_other<void_pointer, const T>::type      const_pointer;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
boost::interprocess::detail::adaptive_pool_base::const_reference	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
boost::interprocess::detail::adaptive_pool_base::difference_type	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef std::ptrdiff_t                                difference_type;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
boost::interprocess::detail::adaptive_pool_base::get_node_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   void* get_node_pool() const$/;"	f	class:boost::interprocess::detail::adaptive_pool_base	access:public	signature:() const
boost::interprocess::detail::adaptive_pool_base::get_segment_manager	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::detail::adaptive_pool_base	access:public	signature:() const
boost::interprocess::detail::adaptive_pool_base::mp_node_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   void_pointer   mp_node_pool;$/;"	m	class:boost::interprocess::detail::adaptive_pool_base	access:private
boost::interprocess::detail::adaptive_pool_base::multiallocation_chain	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
boost::interprocess::detail::adaptive_pool_base::node_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   struct node_pool$/;"	s	class:boost::interprocess::detail::adaptive_pool_base	access:public
boost::interprocess::detail::adaptive_pool_base::node_pool::get	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      static type *get(void *p)$/;"	f	struct:boost::interprocess::detail::adaptive_pool_base::node_pool	access:public	signature:(void *p)
boost::interprocess::detail::adaptive_pool_base::node_pool::type	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      < SegmentManager, sizeof_value<T>::value, NodesPerBlock, MaxFreeBlocks, OverheadPercent> type;$/;"	t	struct:boost::interprocess::detail::adaptive_pool_base::node_pool	access:public
boost::interprocess::detail::adaptive_pool_base::operator =	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_base& operator=$/;"	p	class:boost::interprocess::detail::adaptive_pool_base	access:private	signature:(const adaptive_pool_base<Version2, T2, SegmentManager2, N2, F2, O2>&)
boost::interprocess::detail::adaptive_pool_base::operator =	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_base& operator=(const adaptive_pool_base &other)$/;"	f	class:boost::interprocess::detail::adaptive_pool_base	access:public	signature:(const adaptive_pool_base &other)
boost::interprocess::detail::adaptive_pool_base::pointer	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      pointer_to_other<void_pointer, T>::type            pointer;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
boost::interprocess::detail::adaptive_pool_base::rebind	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::detail::adaptive_pool_base	access:public
boost::interprocess::detail::adaptive_pool_base::rebind::other	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      typedef adaptive_pool_base<Version, T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>       other;$/;"	t	struct:boost::interprocess::detail::adaptive_pool_base::rebind	access:public
boost::interprocess::detail::adaptive_pool_base::reference	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
boost::interprocess::detail::adaptive_pool_base::segment_manager	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef SegmentManager                                segment_manager;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
boost::interprocess::detail::adaptive_pool_base::self_t	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      <Version, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>   self_t;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
boost::interprocess::detail::adaptive_pool_base::size_type	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef std::size_t                                   size_type;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
boost::interprocess::detail::adaptive_pool_base::swap	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   friend void swap(self_t &alloc1, self_t &alloc2)$/;"	f	class:boost::interprocess::detail::adaptive_pool_base	access:friend	signature:(self_t &alloc1, self_t &alloc2)
boost::interprocess::detail::adaptive_pool_base::value_type	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
boost::interprocess::detail::adaptive_pool_base::version	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef boost::interprocess::version_type<adaptive_pool_base, Version>   version;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
boost::interprocess::detail::adaptive_pool_base::void_pointer	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
boost::interprocess::detail::adaptive_pool_base::~adaptive_pool_base	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   ~adaptive_pool_base() $/;"	f	class:boost::interprocess::detail::adaptive_pool_base	access:public	signature:()
boost::interprocess::detail::adaptive_pool_v1	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^class adaptive_pool_v1$/;"	c	namespace:boost::interprocess::detail	inherits:adaptive_pool_base
boost::interprocess::detail::adaptive_pool_v1::adaptive_pool_v1	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_v1$/;"	f	class:boost::interprocess::detail::adaptive_pool_v1	access:public	signature:(const adaptive_pool_v1<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
boost::interprocess::detail::adaptive_pool_v1::adaptive_pool_v1	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_v1(SegmentManager *segment_mngr) $/;"	f	class:boost::interprocess::detail::adaptive_pool_v1	access:public	signature:(SegmentManager *segment_mngr)
boost::interprocess::detail::adaptive_pool_v1::base_t	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^         < 1, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> base_t;$/;"	t	class:boost::interprocess::detail::adaptive_pool_v1	access:public
boost::interprocess::detail::adaptive_pool_v1::rebind	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::detail::adaptive_pool_v1	access:public
boost::interprocess::detail::adaptive_pool_v1::rebind::other	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      typedef adaptive_pool_v1<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::detail::adaptive_pool_v1::rebind	access:public
boost::interprocess::detail::add_leading_slash	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void add_leading_slash(const char *name, std::string &new_name)$/;"	f	namespace:boost::interprocess::detail	signature:(const char *name, std::string &new_name)
boost::interprocess::detail::alignment_logic	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct alignment_logic$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::alignment_logic::value	/usr/include/boost/interprocess/detail/type_traits.hpp	/^    enum{   value = A < S ? A : S  };$/;"	e	enum:boost::interprocess::detail::alignment_logic::__anon13
boost::interprocess::detail::alignment_of_hack	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct alignment_of_hack$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::alignment_of_hack::alignment_of_hack	/usr/include/boost/interprocess/detail/type_traits.hpp	/^    alignment_of_hack();$/;"	p	struct:boost::interprocess::detail::alignment_of_hack	access:public	signature:()
boost::interprocess::detail::alignment_of_hack::c	/usr/include/boost/interprocess/detail/type_traits.hpp	/^    char c;$/;"	m	struct:boost::interprocess::detail::alignment_of_hack	access:public
boost::interprocess::detail::alignment_of_hack::t	/usr/include/boost/interprocess/detail/type_traits.hpp	/^    T t;$/;"	m	struct:boost::interprocess::detail::alignment_of_hack	access:public
boost::interprocess::detail::anonymous_instance_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^typedef instance_t<anonymous_type>  anonymous_instance_t;$/;"	t	namespace:boost::interprocess::detail
boost::interprocess::detail::array_allocation_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^class array_allocation_impl$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::array_allocation_impl::address	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   const_pointer address(const_reference value) const$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:(const_reference value) const
boost::interprocess::detail::array_allocation_impl::address	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   pointer address(reference value) const$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:(reference value) const
boost::interprocess::detail::array_allocation_impl::allocate_many	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   multiallocation_chain allocate_many(const size_type *elem_sizes, size_type n_elements)$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:(const size_type *elem_sizes, size_type n_elements)
boost::interprocess::detail::array_allocation_impl::allocate_many	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   multiallocation_chain allocate_many(size_type elem_size, std::size_t num_elements)$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:(size_type elem_size, std::size_t num_elements)
boost::interprocess::detail::array_allocation_impl::allocation_command	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      allocation_command(boost::interprocess::allocation_type command,$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:(boost::interprocess::allocation_type command, size_type limit_size, size_type preferred_size, size_type &received_size, const pointer &reuse = 0)
boost::interprocess::detail::array_allocation_impl::construct	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void construct(const pointer &ptr)$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:(const pointer &ptr)
boost::interprocess::detail::array_allocation_impl::construct	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void construct(const pointer &ptr, const_reference v)$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:(const pointer &ptr, const_reference v)
boost::interprocess::detail::array_allocation_impl::const_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      pointer_to_other<void_pointer, const T>::type      const_pointer;$/;"	t	class:boost::interprocess::detail::array_allocation_impl	access:public
boost::interprocess::detail::array_allocation_impl::const_reference	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::detail::array_allocation_impl	access:public
boost::interprocess::detail::array_allocation_impl::deallocate_many	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_many(multiallocation_chain chain)$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:(multiallocation_chain chain)
boost::interprocess::detail::array_allocation_impl::derived	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   const Derived *derived() const$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:private	signature:() const
boost::interprocess::detail::array_allocation_impl::derived	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   Derived *derived()$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:private	signature:()
boost::interprocess::detail::array_allocation_impl::destroy	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void destroy(const pointer &ptr)$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:(const pointer &ptr)
boost::interprocess::detail::array_allocation_impl::difference_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef std::ptrdiff_t                                difference_type;$/;"	t	class:boost::interprocess::detail::array_allocation_impl	access:public
boost::interprocess::detail::array_allocation_impl::max_size	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   size_type max_size() const$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:() const
boost::interprocess::detail::array_allocation_impl::multiallocation_chain	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::detail::array_allocation_impl	access:public
boost::interprocess::detail::array_allocation_impl::pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      pointer_to_other<void_pointer, T>::type            pointer;$/;"	t	class:boost::interprocess::detail::array_allocation_impl	access:public
boost::interprocess::detail::array_allocation_impl::reference	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::detail::array_allocation_impl	access:public
boost::interprocess::detail::array_allocation_impl::size	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   size_type size(const pointer &p) const$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:(const pointer &p) const
boost::interprocess::detail::array_allocation_impl::size_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef std::size_t                                   size_type;$/;"	t	class:boost::interprocess::detail::array_allocation_impl	access:public
boost::interprocess::detail::array_allocation_impl::value_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::detail::array_allocation_impl	access:public
boost::interprocess::detail::array_allocation_impl::void_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::detail::array_allocation_impl	access:private
boost::interprocess::detail::array_construct	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^inline void array_construct(void *mem, std::size_t num, detail::in_place_interface &table)$/;"	f	namespace:boost::interprocess::detail	signature:(void *mem, std::size_t num, detail::in_place_interface &table)
boost::interprocess::detail::atomic_add_unless32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline bool atomic_add_unless32$/;"	f	namespace:boost::interprocess::detail	signature:(volatile boost::uint32_t *mem, boost::uint32_t value, volatile boost::uint32_t unless_this)
boost::interprocess::detail::atomic_cas32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_cas32$/;"	f	namespace:boost::interprocess::detail	signature:(volatile boost::uint32_t *mem, boost::uint32_t with, boost::uint32_t cmp)
boost::interprocess::detail::atomic_cas32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_cas32$/;"	p	namespace:boost::interprocess::detail	signature:(volatile boost::uint32_t *mem, boost::uint32_t with, boost::uint32_t cmp)
boost::interprocess::detail::atomic_dec32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_dec32(volatile boost::uint32_t *mem)$/;"	f	namespace:boost::interprocess::detail	signature:(volatile boost::uint32_t *mem)
boost::interprocess::detail::atomic_functor::operator ()	/usr/include/boost/interprocess/detail/intermodule_singleton.hpp	/^inline void atomic_functor<C>::operator()()$/;"	f	class:boost::interprocess::detail::atomic_functor	signature:()
boost::interprocess::detail::atomic_inc32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_inc32(volatile boost::uint32_t *mem)$/;"	f	namespace:boost::interprocess::detail	signature:(volatile boost::uint32_t *mem)
boost::interprocess::detail::atomic_inc32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_inc32(volatile boost::uint32_t *mem);$/;"	p	namespace:boost::interprocess::detail	signature:(volatile boost::uint32_t *mem)
boost::interprocess::detail::atomic_read32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_read32(volatile boost::uint32_t *mem)$/;"	f	namespace:boost::interprocess::detail	signature:(volatile boost::uint32_t *mem)
boost::interprocess::detail::atomic_read32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline boost::uint32_t atomic_read32(volatile boost::uint32_t *mem);$/;"	p	namespace:boost::interprocess::detail	signature:(volatile boost::uint32_t *mem)
boost::interprocess::detail::atomic_write32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline void atomic_write32(volatile boost::uint32_t *mem, boost::uint32_t val)$/;"	f	namespace:boost::interprocess::detail	signature:(volatile boost::uint32_t *mem, boost::uint32_t val)
boost::interprocess::detail::atomic_write32	/usr/include/boost/interprocess/detail/atomic.hpp	/^inline void atomic_write32(volatile boost::uint32_t *mem, boost::uint32_t val);$/;"	p	namespace:boost::interprocess::detail	signature:(volatile boost::uint32_t *mem, boost::uint32_t val)
boost::interprocess::detail::barrierattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   struct barrierattr_wrapper $/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::barrierattr_wrapper::barrierattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      barrierattr_wrapper()$/;"	f	struct:boost::interprocess::detail::barrierattr_wrapper	access:public	signature:()
boost::interprocess::detail::barrierattr_wrapper::m_attr	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_barrierattr_t m_attr;$/;"	m	struct:boost::interprocess::detail::barrierattr_wrapper	access:public
boost::interprocess::detail::barrierattr_wrapper::operator pthread_barrierattr_t&	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      operator pthread_barrierattr_t&()  {  return m_attr;  }$/;"	f	struct:boost::interprocess::detail::barrierattr_wrapper	access:public	signature:()
boost::interprocess::detail::barrierattr_wrapper::~barrierattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~barrierattr_wrapper()  {  pthread_barrierattr_destroy(&m_attr);  }$/;"	f	struct:boost::interprocess::detail::barrierattr_wrapper	access:public	signature:()
boost::interprocess::detail::barrier_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   class barrier_initializer$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::barrier_initializer::barrier_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      barrier_initializer(pthread_barrier_t &mut, $/;"	f	class:boost::interprocess::detail::barrier_initializer	access:public	signature:(pthread_barrier_t &mut, pthread_barrierattr_t &mut_attr, int count)
boost::interprocess::detail::barrier_initializer::mp_barrier	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_barrier_t *mp_barrier;$/;"	m	class:boost::interprocess::detail::barrier_initializer	access:private
boost::interprocess::detail::barrier_initializer::release	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      void release() {mp_barrier = 0; }$/;"	f	class:boost::interprocess::detail::barrier_initializer	access:public	signature:()
boost::interprocess::detail::barrier_initializer::~barrier_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~barrier_initializer() {  if(mp_barrier) pthread_barrier_destroy(mp_barrier);  }$/;"	f	class:boost::interprocess::detail::barrier_initializer	access:public	signature:()
boost::interprocess::detail::basic_managed_memory_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^class basic_managed_memory_impl$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::basic_managed_memory_impl::allocate	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void* allocate             (std::size_t nbytes)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(std::size_t nbytes)
boost::interprocess::detail::basic_managed_memory_impl::allocate	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void* allocate             (std::size_t nbytes, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(std::size_t nbytes, std::nothrow_t nothrow)
boost::interprocess::detail::basic_managed_memory_impl::allocate_aligned	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void * allocate_aligned (std::size_t nbytes, std::size_t alignment, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(std::size_t nbytes, std::size_t alignment, std::nothrow_t nothrow)
boost::interprocess::detail::basic_managed_memory_impl::allocate_aligned	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void * allocate_aligned(std::size_t nbytes, std::size_t alignment)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(std::size_t nbytes, std::size_t alignment)
boost::interprocess::detail::basic_managed_memory_impl::allocate_many	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   multiallocation_chain allocate_many(const std::size_t *elem_sizes, std::size_t n_elements)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(const std::size_t *elem_sizes, std::size_t n_elements)
boost::interprocess::detail::basic_managed_memory_impl::allocate_many	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   multiallocation_chain allocate_many(const std::size_t *elem_sizes, std::size_t n_elements, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(const std::size_t *elem_sizes, std::size_t n_elements, std::nothrow_t nothrow)
boost::interprocess::detail::basic_managed_memory_impl::allocate_many	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   multiallocation_chain allocate_many(std::size_t elem_bytes, std::size_t num_elements)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(std::size_t elem_bytes, std::size_t num_elements)
boost::interprocess::detail::basic_managed_memory_impl::allocate_many	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   multiallocation_chain allocate_many(std::size_t elem_bytes, std::size_t num_elements, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(std::size_t elem_bytes, std::size_t num_elements, std::nothrow_t nothrow)
boost::interprocess::detail::basic_managed_memory_impl::allocation_command	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size,std::size_t &received_size, T *reuse_ptr = 0)
boost::interprocess::detail::basic_managed_memory_impl::allocator	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   struct allocator$/;"	s	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
boost::interprocess::detail::basic_managed_memory_impl::allocator::type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      typedef typename segment_manager::template allocator<T>::type type;$/;"	t	struct:boost::interprocess::detail::basic_managed_memory_impl::allocator	access:public
boost::interprocess::detail::basic_managed_memory_impl::all_memory_deallocated	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool all_memory_deallocated()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:()
boost::interprocess::detail::basic_managed_memory_impl::atomic_func	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void atomic_func(Func &f)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(Func &f)
boost::interprocess::detail::basic_managed_memory_impl::basic_managed_memory_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   basic_managed_memory_impl() $/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:()
boost::interprocess::detail::basic_managed_memory_impl::basic_managed_memory_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   basic_managed_memory_impl(const basic_managed_memory_impl &);$/;"	p	class:boost::interprocess::detail::basic_managed_memory_impl	access:private	signature:(const basic_managed_memory_impl &)
boost::interprocess::detail::basic_managed_memory_impl::belongs_to_segment	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool belongs_to_segment (const void *ptr) const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(const void *ptr) const
boost::interprocess::detail::basic_managed_memory_impl::char_ptr_holder_t	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^           segment_manager::char_ptr_holder_t         char_ptr_holder_t;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
boost::interprocess::detail::basic_managed_memory_impl::char_t	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef CharType                                   char_t;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
boost::interprocess::detail::basic_managed_memory_impl::char_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef CharType                                   char_type;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
boost::interprocess::detail::basic_managed_memory_impl::check_sanity	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool check_sanity()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:()
boost::interprocess::detail::basic_managed_memory_impl::close_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool close_impl()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:()
boost::interprocess::detail::basic_managed_memory_impl::construct	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      construct(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::detail::basic_managed_memory_impl::construct	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      construct(char_ptr_holder_t name, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name, std::nothrow_t nothrow)
boost::interprocess::detail::basic_managed_memory_impl::construct_it	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      construct_it(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::detail::basic_managed_memory_impl::construct_it	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      construct_it(char_ptr_holder_t name, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name, std::nothrow_t nothrow)
boost::interprocess::detail::basic_managed_memory_impl::const_named_iterator	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      const_named_iterator                            const_named_iterator;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
boost::interprocess::detail::basic_managed_memory_impl::const_unique_iterator	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      const_unique_iterator                           const_unique_iterator;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
boost::interprocess::detail::basic_managed_memory_impl::create_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool  create_impl   (void *addr, std::size_t size)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:(void *addr, std::size_t size)
boost::interprocess::detail::basic_managed_memory_impl::deallocate	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void  deallocate           (void *addr)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(void *addr)
boost::interprocess::detail::basic_managed_memory_impl::deallocate_many	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void deallocate_many(multiallocation_chain chain)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(multiallocation_chain chain)
boost::interprocess::detail::basic_managed_memory_impl::deleter	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   struct deleter$/;"	s	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
boost::interprocess::detail::basic_managed_memory_impl::deleter::type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      typedef typename segment_manager::template deleter<T>::type type;$/;"	t	struct:boost::interprocess::detail::basic_managed_memory_impl::deleter	access:public
boost::interprocess::detail::basic_managed_memory_impl::destroy	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool destroy(const CharType *name)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(const CharType *name)
boost::interprocess::detail::basic_managed_memory_impl::destroy	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool destroy(const detail::unique_instance_t *const )$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(const detail::unique_instance_t *const )
boost::interprocess::detail::basic_managed_memory_impl::destroy_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool destroy_impl()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:()
boost::interprocess::detail::basic_managed_memory_impl::destroy_ptr	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void destroy_ptr(const T *ptr)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(const T *ptr)
boost::interprocess::detail::basic_managed_memory_impl::find	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   std::pair<T*, std::size_t> find  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::detail::basic_managed_memory_impl::find_no_lock	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   std::pair<T*, std::size_t> find_no_lock  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::detail::basic_managed_memory_impl::find_or_construct	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      find_or_construct(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::detail::basic_managed_memory_impl::find_or_construct	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      find_or_construct(char_ptr_holder_t name, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name, std::nothrow_t nothrow)
boost::interprocess::detail::basic_managed_memory_impl::find_or_construct_it	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      find_or_construct_it(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::detail::basic_managed_memory_impl::find_or_construct_it	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      find_or_construct_it(char_ptr_holder_t name, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name, std::nothrow_t nothrow)
boost::interprocess::detail::basic_managed_memory_impl::get_address	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void *   get_address   () const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:() const
boost::interprocess::detail::basic_managed_memory_impl::get_address_from_handle	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void *    get_address_from_handle (handle_t offset) const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(handle_t offset) const
boost::interprocess::detail::basic_managed_memory_impl::get_allocator	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      get_allocator()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:()
boost::interprocess::detail::basic_managed_memory_impl::get_deleter	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      get_deleter()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:()
boost::interprocess::detail::basic_managed_memory_impl::get_free_memory	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   std::size_t get_free_memory() const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:() const
boost::interprocess::detail::basic_managed_memory_impl::get_handle_from_address	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   handle_t get_handle_from_address   (const void *ptr) const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(const void *ptr) const
boost::interprocess::detail::basic_managed_memory_impl::get_instance_length	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static std::size_t get_instance_length(const T *ptr)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(const T *ptr)
boost::interprocess::detail::basic_managed_memory_impl::get_instance_name	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static const char_type *get_instance_name(const T *ptr)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(const T *ptr)
boost::interprocess::detail::basic_managed_memory_impl::get_instance_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static instance_type get_instance_type(const T *ptr)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(const T *ptr)
boost::interprocess::detail::basic_managed_memory_impl::get_num_named_objects	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   std::size_t get_num_named_objects()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:()
boost::interprocess::detail::basic_managed_memory_impl::get_num_unique_objects	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   std::size_t get_num_unique_objects()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:()
boost::interprocess::detail::basic_managed_memory_impl::get_segment_manager	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   segment_manager *get_segment_manager() const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:() const
boost::interprocess::detail::basic_managed_memory_impl::get_size	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   std::size_t   get_size   () const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:() const
boost::interprocess::detail::basic_managed_memory_impl::grow	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static bool grow(const char *filename, std::size_t extra_bytes)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:(const char *filename, std::size_t extra_bytes)
boost::interprocess::detail::basic_managed_memory_impl::grow	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void grow(std::size_t extra_bytes)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:(std::size_t extra_bytes)
boost::interprocess::detail::basic_managed_memory_impl::handle_t	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef std::ptrdiff_t                             handle_t;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
boost::interprocess::detail::basic_managed_memory_impl::memory_algorithm	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef MemoryAlgorithm                            memory_algorithm;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
boost::interprocess::detail::basic_managed_memory_impl::mp_header	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   segment_manager *mp_header;$/;"	m	class:boost::interprocess::detail::basic_managed_memory_impl	access:private
boost::interprocess::detail::basic_managed_memory_impl::multiallocation_chain	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef typename segment_manager::multiallocation_chain  multiallocation_chain;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
boost::interprocess::detail::basic_managed_memory_impl::mutex_family	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef typename MemoryAlgorithm::mutex_family     mutex_family;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
boost::interprocess::detail::basic_managed_memory_impl::named_begin	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   const_named_iterator named_begin() const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:() const
boost::interprocess::detail::basic_managed_memory_impl::named_end	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   const_named_iterator named_end() const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:() const
boost::interprocess::detail::basic_managed_memory_impl::open_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool  open_impl     (void *addr, std::size_t)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:(void *addr, std::size_t)
boost::interprocess::detail::basic_managed_memory_impl::operator =	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   basic_managed_memory_impl &operator=(const basic_managed_memory_impl &);$/;"	p	class:boost::interprocess::detail::basic_managed_memory_impl	access:private	signature:(const basic_managed_memory_impl &)
boost::interprocess::detail::basic_managed_memory_impl::PayloadPerAllocation	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static const std::size_t PayloadPerAllocation = segment_manager::PayloadPerAllocation;$/;"	m	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
boost::interprocess::detail::basic_managed_memory_impl::reserve_named_objects	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void reserve_named_objects(std::size_t num)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(std::size_t num)
boost::interprocess::detail::basic_managed_memory_impl::reserve_unique_objects	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void reserve_unique_objects(std::size_t num)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(std::size_t num)
boost::interprocess::detail::basic_managed_memory_impl::segment_manager	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      <CharType, MemoryAlgorithm, IndexType>::type    segment_manager;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
boost::interprocess::detail::basic_managed_memory_impl::self_t	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^               <CharType, MemoryAlgorithm, IndexType, Offset> self_t;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:private
boost::interprocess::detail::basic_managed_memory_impl::shrink_to_fit	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static bool shrink_to_fit(const char *filename)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:(const char *filename)
boost::interprocess::detail::basic_managed_memory_impl::shrink_to_fit	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:()
boost::interprocess::detail::basic_managed_memory_impl::shrink_to_fit_indexes	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void shrink_to_fit_indexes()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:()
boost::interprocess::detail::basic_managed_memory_impl::swap	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void swap(basic_managed_memory_impl &other)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:(basic_managed_memory_impl &other)
boost::interprocess::detail::basic_managed_memory_impl::unique_begin	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   const_unique_iterator unique_begin() const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:() const
boost::interprocess::detail::basic_managed_memory_impl::unique_end	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   const_unique_iterator unique_end() const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:() const
boost::interprocess::detail::basic_managed_memory_impl::zero_free_memory	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void zero_free_memory()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:()
boost::interprocess::detail::basic_managed_memory_impl::~basic_managed_memory_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   ~basic_managed_memory_impl()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:()
boost::interprocess::detail::block_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct block_header$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::block_header::alloc_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t alloc_type() const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:() const
boost::interprocess::detail::block_header::block_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   block_header(std::size_t value_bytes$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:(std::size_t value_bytes ,std::size_t value_alignment ,std::size_t alloc_type ,std::size_t sizeof_char ,std::size_t num_char )
boost::interprocess::detail::block_header::block_header_from_value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   static block_header *block_header_from_value(const void *value, std::size_t sz, std::size_t algn)$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:(const void *value, std::size_t sz, std::size_t algn)
boost::interprocess::detail::block_header::block_header_from_value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   static block_header *block_header_from_value(T *value)$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:(T *value)
boost::interprocess::detail::block_header::equal_comp	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool equal_comp(const block_header &b) const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:(const block_header &b) const
boost::interprocess::detail::block_header::from_first_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   static block_header *from_first_header(Header *header)$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:(Header *header)
boost::interprocess::detail::block_header::less_comp	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool less_comp(const block_header &b) const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:(const block_header &b) const
boost::interprocess::detail::block_header::m_alloc_type_sizeof_char	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned char  m_alloc_type_sizeof_char;$/;"	m	struct:boost::interprocess::detail::block_header	access:public
boost::interprocess::detail::block_header::m_num_char	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned short m_num_char;$/;"	m	struct:boost::interprocess::detail::block_header	access:public
boost::interprocess::detail::block_header::m_value_alignment	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned char  m_value_alignment;$/;"	m	struct:boost::interprocess::detail::block_header	access:public
boost::interprocess::detail::block_header::m_value_bytes	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t    m_value_bytes;$/;"	m	struct:boost::interprocess::detail::block_header	access:public
boost::interprocess::detail::block_header::name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   CharType *name() const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:() const
boost::interprocess::detail::block_header::name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t name_length() const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:() const
boost::interprocess::detail::block_header::name_offset	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t name_offset() const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:() const
boost::interprocess::detail::block_header::operator =	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   block_header &operator= (const T& )$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:(const T& )
boost::interprocess::detail::block_header::sizeof_char	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t sizeof_char() const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:() const
boost::interprocess::detail::block_header::total_size	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t total_size() const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:() const
boost::interprocess::detail::block_header::total_size_with_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t total_size_with_header() const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:() const
boost::interprocess::detail::block_header::to_first_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   static Header *to_first_header(block_header *bheader)$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:(block_header *bheader)
boost::interprocess::detail::block_header::value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void *value() const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:() const
boost::interprocess::detail::block_header::value_bytes	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t value_bytes() const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:() const
boost::interprocess::detail::block_header::value_offset	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t value_offset() const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:() const
boost::interprocess::detail::bool_	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct bool_ : integral_constant<bool, C_>$/;"	s	namespace:boost::interprocess::detail	inherits:integral_constant
boost::interprocess::detail::bool_::value	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static const bool value = C_;$/;"	m	struct:boost::interprocess::detail::bool_	access:public
boost::interprocess::detail::build_number_seq	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^struct build_number_seq<0, index_tuple<Indexes...> >$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::build_number_seq	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^struct build_number_seq<Num, index_tuple<Indexes...> >$/;"	s	namespace:boost::interprocess::detail	inherits:build_number_seq
boost::interprocess::detail::build_number_seq::type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^{  typedef index_tuple<Indexes...> type;  };$/;"	t	struct:boost::interprocess::detail::build_number_seq	access:public
boost::interprocess::detail::cached_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^class cached_adaptive_pool_v1$/;"	c	namespace:boost::interprocess::detail	inherits:detail::cached_allocator_impl
boost::interprocess::detail::cached_adaptive_pool_v1::base_t	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^         , 1> base_t;$/;"	t	class:boost::interprocess::detail::cached_adaptive_pool_v1	access:public
boost::interprocess::detail::cached_adaptive_pool_v1::cached_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   cached_adaptive_pool_v1$/;"	f	class:boost::interprocess::detail::cached_adaptive_pool_v1	access:public	signature:(const cached_adaptive_pool_v1 <T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
boost::interprocess::detail::cached_adaptive_pool_v1::cached_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   cached_adaptive_pool_v1(SegmentManager *segment_mngr,$/;"	f	class:boost::interprocess::detail::cached_adaptive_pool_v1	access:public	signature:(SegmentManager *segment_mngr, std::size_t max_cached_nodes = base_t::DEFAULT_MAX_CACHED_NODES)
boost::interprocess::detail::cached_adaptive_pool_v1::rebind	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::detail::cached_adaptive_pool_v1	access:public
boost::interprocess::detail::cached_adaptive_pool_v1::rebind::other	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^         <T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::detail::cached_adaptive_pool_v1::rebind	access:public
boost::interprocess::detail::cached_allocator_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^class cached_allocator_impl$/;"	c	namespace:boost::interprocess::detail	inherits:array_allocation_impl
boost::interprocess::detail::cached_allocator_impl::allocate	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   pointer allocate(size_type count, cvoid_pointer hint = 0)$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:(size_type count, cvoid_pointer hint = 0)
boost::interprocess::detail::cached_allocator_impl::allocate_individual	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   multiallocation_chain allocate_individual(std::size_t num_elements)$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:(std::size_t num_elements)
boost::interprocess::detail::cached_allocator_impl::allocate_one	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   pointer allocate_one()$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:()
boost::interprocess::detail::cached_allocator_impl::base_t	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^         , typename NodePool::segment_manager> base_t;$/;"	t	class:boost::interprocess::detail::cached_allocator_impl	access:private
boost::interprocess::detail::cached_allocator_impl::cached_allocator_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cached_allocator_impl$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:(const cached_allocator_impl <T2, NodePool2, Version> &other)
boost::interprocess::detail::cached_allocator_impl::cached_allocator_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cached_allocator_impl(const cached_allocator_impl &other)$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:(const cached_allocator_impl &other)
boost::interprocess::detail::cached_allocator_impl::cached_allocator_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cached_allocator_impl(segment_manager *segment_mngr, std::size_t max_cached_nodes)$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:(segment_manager *segment_mngr, std::size_t max_cached_nodes)
boost::interprocess::detail::cached_allocator_impl::cvoid_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      pointer_to_other<void_pointer, const void>::type   cvoid_pointer;$/;"	t	class:boost::interprocess::detail::cached_allocator_impl	access:public
boost::interprocess::detail::cached_allocator_impl::deallocate	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate(const pointer &ptr, size_type count)$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:(const pointer &ptr, size_type count)
boost::interprocess::detail::cached_allocator_impl::deallocate_cache	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_cache()$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:()
boost::interprocess::detail::cached_allocator_impl::deallocate_free_blocks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_blocks()$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:()
boost::interprocess::detail::cached_allocator_impl::deallocate_free_chunks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_chunks()$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:()
boost::interprocess::detail::cached_allocator_impl::deallocate_individual	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_individual(multiallocation_chain chain)$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:(multiallocation_chain chain)
boost::interprocess::detail::cached_allocator_impl::deallocate_one	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_one(const pointer &p)$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:(const pointer &p)
boost::interprocess::detail::cached_allocator_impl::DEFAULT_MAX_CACHED_NODES	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   enum { DEFAULT_MAX_CACHED_NODES = 64 };$/;"	e	enum:boost::interprocess::detail::cached_allocator_impl::__anon2
boost::interprocess::detail::cached_allocator_impl::get_max_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   std::size_t get_max_cached_nodes() const$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:() const
boost::interprocess::detail::cached_allocator_impl::get_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   node_pool_t* get_node_pool() const$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:() const
boost::interprocess::detail::cached_allocator_impl::get_segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:() const
boost::interprocess::detail::cached_allocator_impl::multiallocation_chain	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename base_t::multiallocation_chain        multiallocation_chain;$/;"	t	class:boost::interprocess::detail::cached_allocator_impl	access:public
boost::interprocess::detail::cached_allocator_impl::m_cache	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cache_impl<node_pool_t> m_cache;$/;"	m	class:boost::interprocess::detail::cached_allocator_impl	access:private
boost::interprocess::detail::cached_allocator_impl::node_pool_t	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef NodePool                                      node_pool_t;$/;"	t	class:boost::interprocess::detail::cached_allocator_impl	access:public
boost::interprocess::detail::cached_allocator_impl::operator =	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cached_allocator_impl & operator=(const cached_allocator_impl& other);$/;"	p	class:boost::interprocess::detail::cached_allocator_impl	access:private	signature:(const cached_allocator_impl& other)
boost::interprocess::detail::cached_allocator_impl::pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename base_t::pointer                      pointer;$/;"	t	class:boost::interprocess::detail::cached_allocator_impl	access:public
boost::interprocess::detail::cached_allocator_impl::segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename NodePool::segment_manager            segment_manager;$/;"	t	class:boost::interprocess::detail::cached_allocator_impl	access:public
boost::interprocess::detail::cached_allocator_impl::set_max_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void set_max_cached_nodes(std::size_t newmax)$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:(std::size_t newmax)
boost::interprocess::detail::cached_allocator_impl::size_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename base_t::size_type                    size_type;$/;"	t	class:boost::interprocess::detail::cached_allocator_impl	access:public
boost::interprocess::detail::cached_allocator_impl::swap	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   friend void swap(cached_allocator_impl &alloc1, cached_allocator_impl &alloc2)$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:friend	signature:(cached_allocator_impl &alloc1, cached_allocator_impl &alloc2)
boost::interprocess::detail::cached_allocator_impl::value_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename base_t::value_type                   value_type;$/;"	t	class:boost::interprocess::detail::cached_allocator_impl	access:public
boost::interprocess::detail::cached_allocator_impl::void_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename segment_manager::void_pointer        void_pointer;$/;"	t	class:boost::interprocess::detail::cached_allocator_impl	access:public
boost::interprocess::detail::cached_node_allocator_v1	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^class cached_node_allocator_v1$/;"	c	namespace:boost::interprocess::detail	inherits:detail::cached_allocator_impl
boost::interprocess::detail::cached_node_allocator_v1::base_t	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^         , 1> base_t;$/;"	t	class:boost::interprocess::detail::cached_node_allocator_v1	access:public
boost::interprocess::detail::cached_node_allocator_v1::cached_node_allocator_v1	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   cached_node_allocator_v1$/;"	f	class:boost::interprocess::detail::cached_node_allocator_v1	access:public	signature:(const cached_node_allocator_v1 <T2, SegmentManager, NodesPerBlock> &other)
boost::interprocess::detail::cached_node_allocator_v1::cached_node_allocator_v1	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   cached_node_allocator_v1(SegmentManager *segment_mngr,$/;"	f	class:boost::interprocess::detail::cached_node_allocator_v1	access:public	signature:(SegmentManager *segment_mngr, std::size_t max_cached_nodes = base_t::DEFAULT_MAX_CACHED_NODES)
boost::interprocess::detail::cached_node_allocator_v1::rebind	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::detail::cached_node_allocator_v1	access:public
boost::interprocess::detail::cached_node_allocator_v1::rebind::other	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^         <T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::detail::cached_node_allocator_v1::rebind	access:public
boost::interprocess::detail::cache_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^class cache_impl$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::cache_impl::cached_allocation	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   multiallocation_chain cached_allocation(std::size_t n)$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:(std::size_t n)
boost::interprocess::detail::cache_impl::cached_allocation	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void *cached_allocation()$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:()
boost::interprocess::detail::cache_impl::cached_deallocation	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void cached_deallocation(multiallocation_chain chain)$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:(multiallocation_chain chain)
boost::interprocess::detail::cache_impl::cached_deallocation	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void cached_deallocation(void *ptr)$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:(void *ptr)
boost::interprocess::detail::cache_impl::cache_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cache_impl(const cache_impl &other)$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:(const cache_impl &other)
boost::interprocess::detail::cache_impl::cache_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cache_impl(segment_manager *segment_mngr, std::size_t max_cached_nodes)$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:(segment_manager *segment_mngr, std::size_t max_cached_nodes)
boost::interprocess::detail::cache_impl::deallocate_all_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_all_cached_nodes()$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:()
boost::interprocess::detail::cache_impl::get_max_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   std::size_t get_max_cached_nodes() const$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:() const
boost::interprocess::detail::cache_impl::get_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   NodePool *get_node_pool() const$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:() const
boost::interprocess::detail::cache_impl::get_segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   segment_manager *get_segment_manager() const$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:() const
boost::interprocess::detail::cache_impl::mp_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   node_pool_ptr                 mp_node_pool;$/;"	m	class:boost::interprocess::detail::cache_impl	access:private
boost::interprocess::detail::cache_impl::multiallocation_chain	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename NodePool::multiallocation_chain  multiallocation_chain;$/;"	t	class:boost::interprocess::detail::cache_impl	access:private
boost::interprocess::detail::cache_impl::m_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   multiallocation_chain         m_cached_nodes;$/;"	m	class:boost::interprocess::detail::cache_impl	access:private
boost::interprocess::detail::cache_impl::m_max_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   std::size_t                   m_max_cached_nodes;$/;"	m	class:boost::interprocess::detail::cache_impl	access:private
boost::interprocess::detail::cache_impl::node_pool_ptr	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      <void_pointer, NodePool>::type                        node_pool_ptr;$/;"	t	class:boost::interprocess::detail::cache_impl	access:private
boost::interprocess::detail::cache_impl::priv_deallocate_n_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void priv_deallocate_n_nodes(std::size_t n)$/;"	f	class:boost::interprocess::detail::cache_impl	access:private	signature:(std::size_t n)
boost::interprocess::detail::cache_impl::priv_deallocate_remaining_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void priv_deallocate_remaining_nodes()$/;"	f	class:boost::interprocess::detail::cache_impl	access:private	signature:()
boost::interprocess::detail::cache_impl::segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename NodePool::segment_manager            segment_manager;$/;"	t	class:boost::interprocess::detail::cache_impl	access:public
boost::interprocess::detail::cache_impl::set_max_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void set_max_cached_nodes(std::size_t newmax)$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:(std::size_t newmax)
boost::interprocess::detail::cache_impl::void_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      void_pointer                                          void_pointer;$/;"	t	class:boost::interprocess::detail::cache_impl	access:private
boost::interprocess::detail::cache_impl::~cache_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   ~cache_impl()$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:()
boost::interprocess::detail::char_if_void	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct char_if_void$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::char_if_void	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct char_if_void<void>$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::char_if_void::type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef char type;$/;"	t	struct:boost::interprocess::detail::char_if_void	access:public
boost::interprocess::detail::char_if_void::type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef T type;$/;"	t	struct:boost::interprocess::detail::char_if_void	access:public
boost::interprocess::detail::char_ptr_holder	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^class char_ptr_holder$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::char_ptr_holder::char_ptr_holder	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   char_ptr_holder(const CharType *name) $/;"	f	class:boost::interprocess::detail::char_ptr_holder	access:public	signature:(const CharType *name)
boost::interprocess::detail::char_ptr_holder::char_ptr_holder	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   char_ptr_holder(const detail::anonymous_instance_t *) $/;"	f	class:boost::interprocess::detail::char_ptr_holder	access:public	signature:(const detail::anonymous_instance_t *)
boost::interprocess::detail::char_ptr_holder::char_ptr_holder	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   char_ptr_holder(const detail::unique_instance_t *) $/;"	f	class:boost::interprocess::detail::char_ptr_holder	access:public	signature:(const detail::unique_instance_t *)
boost::interprocess::detail::char_ptr_holder::m_name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const CharType *m_name;$/;"	m	class:boost::interprocess::detail::char_ptr_holder	access:private
boost::interprocess::detail::char_ptr_holder::operator const CharType *	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   operator const CharType *()$/;"	f	class:boost::interprocess::detail::char_ptr_holder	access:public	signature:()
boost::interprocess::detail::close_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool close_file(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd)
boost::interprocess::detail::condattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   struct condattr_wrapper $/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::condattr_wrapper::condattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      condattr_wrapper()$/;"	f	struct:boost::interprocess::detail::condattr_wrapper	access:public	signature:()
boost::interprocess::detail::condattr_wrapper::m_attr	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_condattr_t m_attr;$/;"	m	struct:boost::interprocess::detail::condattr_wrapper	access:public
boost::interprocess::detail::condattr_wrapper::operator pthread_condattr_t&	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      operator pthread_condattr_t&(){  return m_attr;  }$/;"	f	struct:boost::interprocess::detail::condattr_wrapper	access:public	signature:()
boost::interprocess::detail::condattr_wrapper::~condattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~condattr_wrapper() { pthread_condattr_destroy(&m_attr); }$/;"	f	struct:boost::interprocess::detail::condattr_wrapper	access:public	signature:()
boost::interprocess::detail::condition_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   class condition_initializer$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::condition_initializer::condition_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      condition_initializer(pthread_cond_t &cond, pthread_condattr_t &cond_attr) $/;"	f	class:boost::interprocess::detail::condition_initializer	access:public	signature:(pthread_cond_t &cond, pthread_condattr_t &cond_attr)
boost::interprocess::detail::condition_initializer::mp_cond	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_cond_t *mp_cond;$/;"	m	class:boost::interprocess::detail::condition_initializer	access:private
boost::interprocess::detail::condition_initializer::release	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      void release()       { mp_cond = 0; }$/;"	f	class:boost::interprocess::detail::condition_initializer	access:public	signature:()
boost::interprocess::detail::condition_initializer::~condition_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~condition_initializer()   {  if(mp_cond) pthread_cond_destroy(mp_cond);  }$/;"	f	class:boost::interprocess::detail::condition_initializer	access:public	signature:()
boost::interprocess::detail::const_cast_tag	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^struct const_cast_tag {};$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::create_directory	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool create_directory(const char *path)$/;"	f	namespace:boost::interprocess::detail	signature:(const char *path)
boost::interprocess::detail::create_enum_t	/usr/include/boost/interprocess/creation_tags.hpp	/^enum create_enum_t$/;"	g	namespace:boost::interprocess::detail
boost::interprocess::detail::create_new_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline file_handle_t create_new_file$/;"	f	namespace:boost::interprocess::detail	signature:(const char *name, mode_t mode = read_write, bool temporary = false)
boost::interprocess::detail::create_open_func	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^class create_open_func$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::create_open_func::create_open_func	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   create_open_func(BasicManagedMemoryImpl * const frontend, detail::create_enum_t type)$/;"	f	class:boost::interprocess::detail::create_open_func	access:public	signature:(BasicManagedMemoryImpl * const frontend, detail::create_enum_t type)
boost::interprocess::detail::create_open_func::m_frontend	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   BasicManagedMemoryImpl *m_frontend;$/;"	m	class:boost::interprocess::detail::create_open_func	access:private
boost::interprocess::detail::create_open_func::m_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   detail::create_enum_t           m_type;$/;"	m	class:boost::interprocess::detail::create_open_func	access:private
boost::interprocess::detail::create_open_func::operator ()	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool operator()(void *addr, std::size_t size, bool created) const$/;"	f	class:boost::interprocess::detail::create_open_func	access:public	signature:(void *addr, std::size_t size, bool created) const
boost::interprocess::detail::create_or_open_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline file_handle_t create_or_open_file$/;"	f	namespace:boost::interprocess::detail	signature:(const char *name, mode_t mode = read_write, bool temporary = false)
boost::interprocess::detail::create_tmp_dir_and_get_filename	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void create_tmp_dir_and_get_filename(const char *filename, std::string &tmp_name)$/;"	f	namespace:boost::interprocess::detail	signature:(const char *filename, std::string &tmp_name)
boost::interprocess::detail::CtorNArg	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^struct CtorNArg : public placement_destroy<T>$/;"	s	namespace:boost::interprocess::detail	inherits:placement_destroy
boost::interprocess::detail::CtorNArg::args_	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   tuple<Args&&...> args_;$/;"	m	struct:boost::interprocess::detail::CtorNArg	access:private
boost::interprocess::detail::CtorNArg::construct	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   void construct(void *mem, detail::false_, const index_tuple<IdxPack...>&)$/;"	f	struct:boost::interprocess::detail::CtorNArg	access:private	signature:(void *mem, detail::false_, const index_tuple<IdxPack...>&)
boost::interprocess::detail::CtorNArg::construct	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   void construct(void *mem, detail::true_, const index_tuple<IdxPack...>&)$/;"	f	struct:boost::interprocess::detail::CtorNArg	access:private	signature:(void *mem, detail::true_, const index_tuple<IdxPack...>&)
boost::interprocess::detail::CtorNArg::construct_n	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   virtual void construct_n(void *mem$/;"	f	struct:boost::interprocess::detail::CtorNArg	access:public	signature:(void *mem , std::size_t num , std::size_t &constructed)
boost::interprocess::detail::CtorNArg::CtorNArg	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   CtorNArg(Args && ...args)$/;"	f	struct:boost::interprocess::detail::CtorNArg	access:public	signature:(Args && ....args)
boost::interprocess::detail::CtorNArg::do_increment	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   void do_increment(detail::false_, const index_tuple<IdxPack...>&)$/;"	f	struct:boost::interprocess::detail::CtorNArg	access:private	signature:(detail::false_, const index_tuple<IdxPack...>&)
boost::interprocess::detail::CtorNArg::do_increment	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   void do_increment(detail::true_, const index_tuple<IdxPack...>&)$/;"	f	struct:boost::interprocess::detail::CtorNArg	access:private	signature:(detail::true_, const index_tuple<IdxPack...>&)
boost::interprocess::detail::CtorNArg::expansion_helper	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   void expansion_helper(ExpansionArgs &&...)$/;"	f	struct:boost::interprocess::detail::CtorNArg	access:private	signature:(ExpansionArgs &&....)
boost::interprocess::detail::CtorNArg::index_tuple_t	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   typedef typename build_number_seq<sizeof...(Args)>::type index_tuple_t;$/;"	t	struct:boost::interprocess::detail::CtorNArg	access:public
boost::interprocess::detail::CtorNArg::IsIterator	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   typedef detail::bool_<is_iterator> IsIterator;$/;"	t	struct:boost::interprocess::detail::CtorNArg	access:public
boost::interprocess::detail::CtorNArg::operator ++	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   self_t  operator++(int) {  return ++*this;   *this;  }$/;"	f	struct:boost::interprocess::detail::CtorNArg	access:public	signature:(int)
boost::interprocess::detail::CtorNArg::operator ++	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   self_t& operator++()$/;"	f	struct:boost::interprocess::detail::CtorNArg	access:public	signature:()
boost::interprocess::detail::CtorNArg::self_t	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   typedef CtorNArg<T, is_iterator, Args...> self_t;$/;"	t	struct:boost::interprocess::detail::CtorNArg	access:public
boost::interprocess::detail::ct_max_pow2_less	/usr/include/boost/interprocess/detail/utilities.hpp	/^struct ct_max_pow2_less$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::ct_max_pow2_less::c	/usr/include/boost/interprocess/detail/utilities.hpp	/^   enum { c = 2*n < p };$/;"	e	enum:boost::interprocess::detail::ct_max_pow2_less::__anon15
boost::interprocess::detail::ct_rounded_size	/usr/include/boost/interprocess/detail/utilities.hpp	/^struct ct_rounded_size$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::ct_rounded_size::value	/usr/include/boost/interprocess/detail/utilities.hpp	/^   enum { value = ((OrigSize-1)\/RoundTo+1)*RoundTo };$/;"	e	enum:boost::interprocess::detail::ct_rounded_size::__anon14
boost::interprocess::detail::delete_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool delete_file(const char *name)$/;"	f	namespace:boost::interprocess::detail	signature:(const char *name)
boost::interprocess::detail::delete_subdirectories	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool delete_subdirectories(const std::string &refcstrRootDirectory, const char *dont_delete_this)$/;"	f	namespace:boost::interprocess::detail	signature:(const std::string &refcstrRootDirectory, const char *dont_delete_this)
boost::interprocess::detail::delete_subdirectories_recursive	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool delete_subdirectories_recursive$/;"	f	namespace:boost::interprocess::detail	signature:(const std::string &refcstrRootDirectory, const char *dont_delete_this, unsigned int count)
boost::interprocess::detail::destroy_if_last_link_func	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct destroy_if_last_link_func$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::destroy_if_last_link_func::destroy_if_last_link_func	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   destroy_if_last_link_func(NodePool *pool) $/;"	f	struct:boost::interprocess::detail::destroy_if_last_link_func	access:public	signature:(NodePool *pool)
boost::interprocess::detail::destroy_if_last_link_func::mp_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   NodePool                           *mp_node_pool;$/;"	m	struct:boost::interprocess::detail::destroy_if_last_link_func	access:public
boost::interprocess::detail::destroy_if_last_link_func::operator ()	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void operator()()$/;"	f	struct:boost::interprocess::detail::destroy_if_last_link_func	access:public	signature:()
boost::interprocess::detail::destroy_node_pool_if_last_link	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^inline void destroy_node_pool_if_last_link(NodePool *pool)$/;"	f	namespace:boost::interprocess::detail	signature:(NodePool *pool)
boost::interprocess::detail::disable_if	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct disable_if : public enable_if_c<!Cond::value, T> {};$/;"	s	namespace:boost::interprocess::detail	inherits:enable_if_c
boost::interprocess::detail::DoCreate	/usr/include/boost/interprocess/creation_tags.hpp	/^{  DoCreate, DoOpen, DoOpenOrCreate   };$/;"	e	enum:boost::interprocess::detail::create_enum_t
boost::interprocess::detail::DoOpen	/usr/include/boost/interprocess/creation_tags.hpp	/^{  DoCreate, DoOpen, DoOpenOrCreate   };$/;"	e	enum:boost::interprocess::detail::create_enum_t
boost::interprocess::detail::DoOpenOrCreate	/usr/include/boost/interprocess/creation_tags.hpp	/^{  DoCreate, DoOpen, DoOpenOrCreate   };$/;"	e	enum:boost::interprocess::detail::create_enum_t
boost::interprocess::detail::do_swap	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline void do_swap(T& x, T& y)$/;"	f	namespace:boost::interprocess::detail	signature:(T& x, T& y)
boost::interprocess::detail::dynamic_cast_tag	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^struct dynamic_cast_tag {};$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::enable_if	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct enable_if : public enable_if_c<Cond::value, T> {};$/;"	s	namespace:boost::interprocess::detail	inherits:enable_if_c
boost::interprocess::detail::enable_if_c	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct enable_if_c {$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::enable_if_c	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct enable_if_c<false, T> {};$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::enable_if_c::type	/usr/include/boost/interprocess/detail/mpl.hpp	/^  typedef T type;$/;"	t	struct:boost::interprocess::detail::enable_if_c	access:public
boost::interprocess::detail::equal_systemwide_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline bool equal_systemwide_thread_id(const OS_systemwide_thread_id_t &id1, const OS_systemwide_thread_id_t &id2)$/;"	f	namespace:boost::interprocess::detail	signature:(const OS_systemwide_thread_id_t &id1, const OS_systemwide_thread_id_t &id2)
boost::interprocess::detail::equal_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline bool equal_thread_id(OS_thread_id_t id1, OS_thread_id_t id2)$/;"	f	namespace:boost::interprocess::detail	signature:(OS_thread_id_t id1, OS_thread_id_t id2)
boost::interprocess::detail::false_	/usr/include/boost/interprocess/detail/mpl.hpp	/^typedef bool_<false>       false_;$/;"	t	namespace:boost::interprocess::detail
boost::interprocess::detail::false_type	/usr/include/boost/interprocess/detail/mpl.hpp	/^typedef false_ false_type;$/;"	t	namespace:boost::interprocess::detail
boost::interprocess::detail::file_handle_from_mapping_handle	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline file_handle_t file_handle_from_mapping_handle(mapping_handle_t hnd)$/;"	f	namespace:boost::interprocess::detail	signature:(mapping_handle_t hnd)
boost::interprocess::detail::file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^class file_wrapper$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::file_wrapper::file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   file_wrapper();$/;"	p	class:boost::interprocess::detail::file_wrapper	access:public	signature:()
boost::interprocess::detail::file_wrapper::file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   file_wrapper(create_only_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::detail::file_wrapper	access:public	signature:(create_only_t, const char *name, mode_t mode)
boost::interprocess::detail::file_wrapper::file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   file_wrapper(open_only_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::detail::file_wrapper	access:public	signature:(open_only_t, const char *name, mode_t mode)
boost::interprocess::detail::file_wrapper::file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   file_wrapper(open_or_create_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::detail::file_wrapper	access:public	signature:(open_or_create_t, const char *name, mode_t mode)
boost::interprocess::detail::file_wrapper::file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline file_wrapper::file_wrapper() $/;"	f	class:boost::interprocess::detail::file_wrapper	signature:()
boost::interprocess::detail::file_wrapper::get_mapping_handle	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::detail::file_wrapper	access:public	signature:() const
boost::interprocess::detail::file_wrapper::get_mapping_handle	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline mapping_handle_t file_wrapper::get_mapping_handle() const$/;"	f	class:boost::interprocess::detail::file_wrapper	signature:() const
boost::interprocess::detail::file_wrapper::get_mode	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::detail::file_wrapper	access:public	signature:() const
boost::interprocess::detail::file_wrapper::get_mode	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline mode_t file_wrapper::get_mode() const$/;"	f	class:boost::interprocess::detail::file_wrapper	signature:() const
boost::interprocess::detail::file_wrapper::get_name	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   const char *get_name() const;$/;"	p	class:boost::interprocess::detail::file_wrapper	access:public	signature:() const
boost::interprocess::detail::file_wrapper::get_name	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline const char *file_wrapper::get_name() const$/;"	f	class:boost::interprocess::detail::file_wrapper	signature:() const
boost::interprocess::detail::file_wrapper::get_size	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   bool get_size(offset_t &size) const;$/;"	p	class:boost::interprocess::detail::file_wrapper	access:public	signature:(offset_t &size) const
boost::interprocess::detail::file_wrapper::get_size	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline bool file_wrapper::get_size(offset_t &size) const$/;"	f	class:boost::interprocess::detail::file_wrapper	signature:(offset_t &size) const
boost::interprocess::detail::file_wrapper::m_filename	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   std::string       m_filename;$/;"	m	class:boost::interprocess::detail::file_wrapper	access:private
boost::interprocess::detail::file_wrapper::m_handle	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   file_handle_t  m_handle;$/;"	m	class:boost::interprocess::detail::file_wrapper	access:private
boost::interprocess::detail::file_wrapper::m_mode	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   mode_t      m_mode;$/;"	m	class:boost::interprocess::detail::file_wrapper	access:private
boost::interprocess::detail::file_wrapper::priv_close	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::detail::file_wrapper	access:private	signature:()
boost::interprocess::detail::file_wrapper::priv_close	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline void file_wrapper::priv_close()$/;"	f	class:boost::interprocess::detail::file_wrapper	signature:()
boost::interprocess::detail::file_wrapper::priv_open_or_create	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   bool priv_open_or_create(detail::create_enum_t type, const char *filename, mode_t mode);$/;"	p	class:boost::interprocess::detail::file_wrapper	access:private	signature:(detail::create_enum_t type, const char *filename, mode_t mode)
boost::interprocess::detail::file_wrapper::priv_open_or_create	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline bool file_wrapper::priv_open_or_create$/;"	f	class:boost::interprocess::detail::file_wrapper	signature:(detail::create_enum_t type, const char *filename, mode_t mode)
boost::interprocess::detail::file_wrapper::remove	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::detail::file_wrapper	access:public	signature:(const char *name)
boost::interprocess::detail::file_wrapper::remove	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline bool file_wrapper::remove(const char *filename)$/;"	f	class:boost::interprocess::detail::file_wrapper	signature:(const char *filename)
boost::interprocess::detail::file_wrapper::swap	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   void swap(file_wrapper &other);$/;"	p	class:boost::interprocess::detail::file_wrapper	access:public	signature:(file_wrapper &other)
boost::interprocess::detail::file_wrapper::swap	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline void file_wrapper::swap(file_wrapper &other)$/;"	f	class:boost::interprocess::detail::file_wrapper	signature:(file_wrapper &other)
boost::interprocess::detail::file_wrapper::truncate	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   void truncate(offset_t length);$/;"	p	class:boost::interprocess::detail::file_wrapper	access:public	signature:(offset_t length)
boost::interprocess::detail::file_wrapper::truncate	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline void file_wrapper::truncate(offset_t length)$/;"	f	class:boost::interprocess::detail::file_wrapper	signature:(offset_t length)
boost::interprocess::detail::file_wrapper::~file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   ~file_wrapper();$/;"	p	class:boost::interprocess::detail::file_wrapper	access:public	signature:()
boost::interprocess::detail::file_wrapper::~file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline file_wrapper::~file_wrapper() $/;"	f	class:boost::interprocess::detail::file_wrapper	signature:()
boost::interprocess::detail::floor_log2	/usr/include/boost/interprocess/detail/math_functions.hpp	/^inline std::size_t floor_log2 (std::size_t x)$/;"	f	namespace:boost::interprocess::detail	signature:(std::size_t x)
boost::interprocess::detail::gcd	/usr/include/boost/interprocess/detail/math_functions.hpp	/^inline Integer gcd(Integer A, Integer B)$/;"	f	namespace:boost::interprocess::detail	signature:(Integer A, Integer B)
boost::interprocess::detail::get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^typename get_impl<I, tuple<Values...> >::const_type get(const tuple<Values...>& t)$/;"	f	namespace:boost::interprocess::detail	signature:(const tuple<Values...>& t)
boost::interprocess::detail::get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^typename get_impl<I, tuple<Values...> >::type get(tuple<Values...>& t)$/;"	f	namespace:boost::interprocess::detail	signature:(tuple<Values...>& t)
boost::interprocess::detail::get_bootstamp	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void get_bootstamp(std::string &s, bool add = false)$/;"	f	namespace:boost::interprocess::detail	signature:(std::string &s, bool add = false)
boost::interprocess::detail::get_current_process_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_process_id_t get_current_process_id()$/;"	f	namespace:boost::interprocess::detail	signature:()
boost::interprocess::detail::get_current_systemwide_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_systemwide_thread_id_t get_current_systemwide_thread_id()$/;"	f	namespace:boost::interprocess::detail	signature:()
boost::interprocess::detail::get_current_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_thread_id_t get_current_thread_id()$/;"	f	namespace:boost::interprocess::detail	signature:()
boost::interprocess::detail::get_file_pointer	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool get_file_pointer(file_handle_t hnd, offset_t &off)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd, offset_t &off)
boost::interprocess::detail::get_file_size	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool get_file_size(file_handle_t hnd, offset_t &size)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd, offset_t &size)
boost::interprocess::detail::get_impl	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^class get_impl<0, tuple<Head, Values...> >$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::get_impl	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^class get_impl<I, tuple<Head, Values...> >$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::get_impl::const_type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename add_const_reference<Element>::type            const_type;$/;"	t	class:boost::interprocess::detail::get_impl	access:public
boost::interprocess::detail::get_impl::const_type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename add_const_reference<Head>::type   const_type;$/;"	t	class:boost::interprocess::detail::get_impl	access:public
boost::interprocess::detail::get_impl::Element	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename tuple_element<I-1, tuple<Values...> >::type   Element;$/;"	t	class:boost::interprocess::detail::get_impl	access:private
boost::interprocess::detail::get_impl::get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   static const_type get(const tuple<Head, Values...>& t)  { return Next::get(t.tail()); }$/;"	f	class:boost::interprocess::detail::get_impl	access:public	signature:(const tuple<Head, Values...>& t)
boost::interprocess::detail::get_impl::get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   static const_type get(const tuple<Head, Values...>& t){ return t.head(); }$/;"	f	class:boost::interprocess::detail::get_impl	access:public	signature:(const tuple<Head, Values...>& t)
boost::interprocess::detail::get_impl::get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   static type       get(tuple<Head, Values...>& t)      { return t.head(); }$/;"	f	class:boost::interprocess::detail::get_impl	access:public	signature:(tuple<Head, Values...>& t)
boost::interprocess::detail::get_impl::get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   static type get(tuple<Head, Values...>& t)              { return Next::get(t.tail()); }$/;"	f	class:boost::interprocess::detail::get_impl	access:public	signature:(tuple<Head, Values...>& t)
boost::interprocess::detail::get_impl::Next	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef get_impl<I-1, tuple<Values...> >                       Next;$/;"	t	class:boost::interprocess::detail::get_impl	access:private
boost::interprocess::detail::get_impl::type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename add_reference<Element>::type                  type;$/;"	t	class:boost::interprocess::detail::get_impl	access:public
boost::interprocess::detail::get_impl::type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename add_reference<Head>::type         type;$/;"	t	class:boost::interprocess::detail::get_impl	access:public
boost::interprocess::detail::get_invalid_process_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_process_id_t get_invalid_process_id()$/;"	f	namespace:boost::interprocess::detail	signature:()
boost::interprocess::detail::get_invalid_systemwide_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_systemwide_thread_id_t get_invalid_systemwide_thread_id()$/;"	f	namespace:boost::interprocess::detail	signature:()
boost::interprocess::detail::get_invalid_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_thread_id_t get_invalid_thread_id()$/;"	f	namespace:boost::interprocess::detail	signature:()
boost::interprocess::detail::get_or_create_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^inline NodePool *get_or_create_node_pool(typename NodePool::segment_manager *mgnr)$/;"	f	namespace:boost::interprocess::detail	signature:(typename NodePool::segment_manager *mgnr)
boost::interprocess::detail::get_or_create_node_pool_func	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct get_or_create_node_pool_func$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::get_or_create_node_pool_func::get_or_create_node_pool_func	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   get_or_create_node_pool_func(typename NodePool::segment_manager *mngr)$/;"	f	struct:boost::interprocess::detail::get_or_create_node_pool_func	access:public	signature:(typename NodePool::segment_manager *mngr)
boost::interprocess::detail::get_or_create_node_pool_func::mp_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   NodePool                            *mp_node_pool;$/;"	m	struct:boost::interprocess::detail::get_or_create_node_pool_func	access:public
boost::interprocess::detail::get_or_create_node_pool_func::mp_segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typename NodePool::segment_manager  *mp_segment_manager;$/;"	m	struct:boost::interprocess::detail::get_or_create_node_pool_func	access:public
boost::interprocess::detail::get_or_create_node_pool_func::operator ()	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void operator()()$/;"	f	struct:boost::interprocess::detail::get_or_create_node_pool_func	access:public	signature:()
boost::interprocess::detail::get_pointer	/usr/include/boost/interprocess/detail/utilities.hpp	/^get_pointer(const Ptr &ptr)$/;"	f	namespace:boost::interprocess::detail	signature:(const Ptr &ptr)
boost::interprocess::detail::get_rounded_size	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline std::size_t get_rounded_size(std::size_t orig_size, std::size_t round_to)$/;"	f	namespace:boost::interprocess::detail	signature:(std::size_t orig_size, std::size_t round_to)
boost::interprocess::detail::get_rounded_size_po2	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline std::size_t get_rounded_size_po2(std::size_t orig_size, std::size_t round_to)$/;"	f	namespace:boost::interprocess::detail	signature:(std::size_t orig_size, std::size_t round_to)
boost::interprocess::detail::get_singleton_unique_name	/usr/include/boost/interprocess/detail/intermodule_singleton.hpp	/^const char *get_singleton_unique_name()$/;"	f	namespace:boost::interprocess::detail	signature:()
boost::interprocess::detail::get_temporary_path	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline const char *get_temporary_path()$/;"	f	namespace:boost::interprocess::detail	signature:()
boost::interprocess::detail::get_tmp_base_dir	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void get_tmp_base_dir(std::string &tmp_name)$/;"	f	namespace:boost::interprocess::detail	signature:(std::string &tmp_name)
boost::interprocess::detail::get_truncated_size	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline std::size_t get_truncated_size(std::size_t orig_size, std::size_t multiple)$/;"	f	namespace:boost::interprocess::detail	signature:(std::size_t orig_size, std::size_t multiple)
boost::interprocess::detail::get_truncated_size_po2	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline std::size_t get_truncated_size_po2(std::size_t orig_size, std::size_t multiple)$/;"	f	namespace:boost::interprocess::detail	signature:(std::size_t orig_size, std::size_t multiple)
boost::interprocess::detail::has_pointer_type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct has_pointer_type$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::has_pointer_type::value	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^    static const bool value = sizeof(pointer_type_imp::test<T>(0)) == 1;$/;"	m	struct:boost::interprocess::detail::has_pointer_type	access:public
boost::interprocess::detail::identity	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct identity $/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::identity::operator ()	/usr/include/boost/interprocess/detail/mpl.hpp	/^   const T& operator()(const T& x) const $/;"	f	struct:boost::interprocess::detail::identity	access:public	signature:(const T& x) const
boost::interprocess::detail::identity::type	/usr/include/boost/interprocess/detail/mpl.hpp	/^   typedef T type;$/;"	t	struct:boost::interprocess::detail::identity	access:public
boost::interprocess::detail::if_	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct if_$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::if_::type	/usr/include/boost/interprocess/detail/mpl.hpp	/^   typedef typename if_c<0 != T1::value, T2, T3>::type type;$/;"	t	struct:boost::interprocess::detail::if_	access:public
boost::interprocess::detail::if_c	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct if_c$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::if_c	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct if_c<false,T1,T2>$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::if_c::type	/usr/include/boost/interprocess/detail/mpl.hpp	/^    typedef T1 type;$/;"	t	struct:boost::interprocess::detail::if_c	access:public
boost::interprocess::detail::if_c::type	/usr/include/boost/interprocess/detail/mpl.hpp	/^    typedef T2 type;$/;"	t	struct:boost::interprocess::detail::if_c	access:public
boost::interprocess::detail::index_config	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct index_config$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::index_config::char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef CharT                                         char_type;$/;"	t	struct:boost::interprocess::detail::index_config	access:public
boost::interprocess::detail::index_config::intrusive_compare_key_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef intrusive_compare_key<CharT>            intrusive_compare_key_type;$/;"	t	struct:boost::interprocess::detail::index_config	access:public
boost::interprocess::detail::index_config::intrusive_value_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   struct intrusive_value_type$/;"	s	struct:boost::interprocess::detail::index_config	access:public
boost::interprocess::detail::index_config::intrusive_value_type::type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   {  typedef detail::intrusive_value_type_impl<HeaderBase, CharT>  type; };$/;"	t	struct:boost::interprocess::detail::index_config::intrusive_value_type	access:public
boost::interprocess::detail::index_config::key_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef detail::index_key<CharT, void_pointer>        key_type;$/;"	t	struct:boost::interprocess::detail::index_config	access:public
boost::interprocess::detail::index_config::mapped_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef detail::index_data<void_pointer>              mapped_type;$/;"	t	struct:boost::interprocess::detail::index_config	access:public
boost::interprocess::detail::index_config::segment_manager_base	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^      <MemoryAlgorithm>::type                            segment_manager_base;$/;"	t	struct:boost::interprocess::detail::index_config	access:public
boost::interprocess::detail::index_config::void_pointer	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename MemoryAlgorithm::void_pointer        void_pointer;$/;"	t	struct:boost::interprocess::detail::index_config	access:public
boost::interprocess::detail::index_data	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct index_data$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::index_data::index_data	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   index_data(void *ptr) : m_ptr(ptr){}$/;"	f	struct:boost::interprocess::detail::index_data	access:public	signature:(void *ptr)
boost::interprocess::detail::index_data::m_ptr	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void_pointer    m_ptr;$/;"	m	struct:boost::interprocess::detail::index_data	access:public
boost::interprocess::detail::index_data::value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void *value() const$/;"	f	struct:boost::interprocess::detail::index_data	access:public	signature:() const
boost::interprocess::detail::index_data::void_pointer	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef VoidPointer void_pointer;$/;"	t	struct:boost::interprocess::detail::index_data	access:public
boost::interprocess::detail::index_key	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct index_key$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::index_key::char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef CharT                                         char_type;$/;"	t	struct:boost::interprocess::detail::index_key	access:public
boost::interprocess::detail::index_key::const_char_ptr_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^      pointer_to_other<VoidPointer, const CharT>::type   const_char_ptr_t;$/;"	t	struct:boost::interprocess::detail::index_key	access:public
boost::interprocess::detail::index_key::index_key	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   index_key (const char_type *name, std::size_t length)$/;"	f	struct:boost::interprocess::detail::index_key	access:public	signature:(const char_type *name, std::size_t length)
boost::interprocess::detail::index_key::mp_str	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const_char_ptr_t  mp_str;$/;"	m	struct:boost::interprocess::detail::index_key	access:private
boost::interprocess::detail::index_key::m_len	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t       m_len;$/;"	m	struct:boost::interprocess::detail::index_key	access:private
boost::interprocess::detail::index_key::name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const CharT *name() const$/;"	f	struct:boost::interprocess::detail::index_key	access:public	signature:() const
boost::interprocess::detail::index_key::name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void name(const CharT *name)$/;"	f	struct:boost::interprocess::detail::index_key	access:public	signature:(const CharT *name)
boost::interprocess::detail::index_key::name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t name_length() const$/;"	f	struct:boost::interprocess::detail::index_key	access:public	signature:() const
boost::interprocess::detail::index_key::name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void name_length(std::size_t len)$/;"	f	struct:boost::interprocess::detail::index_key	access:public	signature:(std::size_t len)
boost::interprocess::detail::index_key::operator <	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool operator < (const index_key & right) const$/;"	f	struct:boost::interprocess::detail::index_key	access:public	signature:(const index_key & right) const
boost::interprocess::detail::index_key::operator ==	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool operator == (const index_key & right) const$/;"	f	struct:boost::interprocess::detail::index_key	access:public	signature:(const index_key & right) const
boost::interprocess::detail::index_tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^struct index_tuple{};$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::initialization_func_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^class initialization_func_t$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::initialization_func_t::initialization_func_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   initialization_func_t(std::size_t maxmsg = 0, $/;"	f	class:boost::interprocess::detail::initialization_func_t	access:public	signature:(std::size_t maxmsg = 0, std::size_t maxmsgsize = 0)
boost::interprocess::detail::initialization_func_t::m_maxmsg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   const std::size_t m_maxmsg;$/;"	m	class:boost::interprocess::detail::initialization_func_t	access:public
boost::interprocess::detail::initialization_func_t::m_maxmsgsize	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   const std::size_t m_maxmsgsize;$/;"	m	class:boost::interprocess::detail::initialization_func_t	access:public
boost::interprocess::detail::initialization_func_t::operator ()	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool operator()(void *address, std::size_t, bool created)$/;"	f	class:boost::interprocess::detail::initialization_func_t	access:public	signature:(void *address, std::size_t, bool created)
boost::interprocess::detail::instance_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^class instance_t$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::instance_t::instance_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   instance_t(){}$/;"	f	class:boost::interprocess::detail::instance_t	access:private	signature:()
boost::interprocess::detail::integral_constant	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct integral_constant$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::integral_constant::type	/usr/include/boost/interprocess/detail/mpl.hpp	/^   typedef integral_constant<T,val> type;$/;"	t	struct:boost::interprocess::detail::integral_constant	access:public
boost::interprocess::detail::integral_constant::value	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static const T value = val;$/;"	m	struct:boost::interprocess::detail::integral_constant	access:public
boost::interprocess::detail::interprocess_tester	/usr/include/boost/interprocess/detail/interprocess_tester.hpp	/^class interprocess_tester$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::interprocess_tester::dont_close_on_destruction	/usr/include/boost/interprocess/detail/interprocess_tester.hpp	/^   static void dont_close_on_destruction(T &t)$/;"	f	class:boost::interprocess::detail::interprocess_tester	access:public	signature:(T &t)
boost::interprocess::detail::intrusive_compare_key	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct intrusive_compare_key$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::intrusive_compare_key::char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef CharT char_type;$/;"	t	struct:boost::interprocess::detail::intrusive_compare_key	access:public
boost::interprocess::detail::intrusive_compare_key::intrusive_compare_key	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   intrusive_compare_key(const CharT *str, std::size_t len)$/;"	f	struct:boost::interprocess::detail::intrusive_compare_key	access:public	signature:(const CharT *str, std::size_t len)
boost::interprocess::detail::intrusive_compare_key::mp_str	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const CharT *  mp_str;$/;"	m	struct:boost::interprocess::detail::intrusive_compare_key	access:public
boost::interprocess::detail::intrusive_compare_key::m_len	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t    m_len;$/;"	m	struct:boost::interprocess::detail::intrusive_compare_key	access:public
boost::interprocess::detail::intrusive_value_type_impl	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct intrusive_value_type_impl$/;"	s	namespace:boost::interprocess::detail	inherits:Hook
boost::interprocess::detail::intrusive_value_type_impl::BlockHdrAlignment	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   enum  {  BlockHdrAlignment = detail::alignment_of<block_header>::value  };$/;"	e	enum:boost::interprocess::detail::intrusive_value_type_impl::__anon12
boost::interprocess::detail::intrusive_value_type_impl::char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef CharType char_type;$/;"	t	struct:boost::interprocess::detail::intrusive_value_type_impl	access:public
boost::interprocess::detail::intrusive_value_type_impl::get_block_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   block_header *get_block_header() const$/;"	f	struct:boost::interprocess::detail::intrusive_value_type_impl	access:public	signature:() const
boost::interprocess::detail::intrusive_value_type_impl::get_intrusive_value_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   static intrusive_value_type_impl *get_intrusive_value_type(block_header *hdr)$/;"	f	struct:boost::interprocess::detail::intrusive_value_type_impl	access:public	signature:(block_header *hdr)
boost::interprocess::detail::intrusive_value_type_impl::intrusive_value_type_impl	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   intrusive_value_type_impl(){}$/;"	f	struct:boost::interprocess::detail::intrusive_value_type_impl	access:public	signature:()
boost::interprocess::detail::intrusive_value_type_impl::intrusive_value_type_impl	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   intrusive_value_type_impl(const intrusive_value_type_impl &);$/;"	p	struct:boost::interprocess::detail::intrusive_value_type_impl	access:private	signature:(const intrusive_value_type_impl &)
boost::interprocess::detail::intrusive_value_type_impl::name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   CharType *name() const$/;"	f	struct:boost::interprocess::detail::intrusive_value_type_impl	access:public	signature:() const
boost::interprocess::detail::intrusive_value_type_impl::name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t name_length() const$/;"	f	struct:boost::interprocess::detail::intrusive_value_type_impl	access:public	signature:() const
boost::interprocess::detail::intrusive_value_type_impl::operator <	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool operator <(const intrusive_value_type_impl<Hook, CharType> & other) const$/;"	f	struct:boost::interprocess::detail::intrusive_value_type_impl	access:public	signature:(const intrusive_value_type_impl<Hook, CharType> & other) const
boost::interprocess::detail::intrusive_value_type_impl::operator =	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   intrusive_value_type_impl& operator=(const intrusive_value_type_impl &);$/;"	p	struct:boost::interprocess::detail::intrusive_value_type_impl	access:private	signature:(const intrusive_value_type_impl &)
boost::interprocess::detail::intrusive_value_type_impl::operator ==	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool operator ==(const intrusive_value_type_impl<Hook, CharType> & other) const$/;"	f	struct:boost::interprocess::detail::intrusive_value_type_impl	access:public	signature:(const intrusive_value_type_impl<Hook, CharType> & other) const
boost::interprocess::detail::intrusive_value_type_impl::value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void *value() const$/;"	f	struct:boost::interprocess::detail::intrusive_value_type_impl	access:public	signature:() const
boost::interprocess::detail::invalid_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline file_handle_t invalid_file()$/;"	f	namespace:boost::interprocess::detail	signature:()
boost::interprocess::detail::in_place_interface	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^struct in_place_interface$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::in_place_interface::alignment	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   std::size_t alignment;$/;"	m	struct:boost::interprocess::detail::in_place_interface	access:public
boost::interprocess::detail::in_place_interface::construct_n	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   virtual void construct_n(void *mem, std::size_t num, std::size_t &constructed) = 0;$/;"	p	struct:boost::interprocess::detail::in_place_interface	access:public	signature:(void *mem, std::size_t num, std::size_t &constructed)
boost::interprocess::detail::in_place_interface::destroy_n	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   virtual void destroy_n(void *mem, std::size_t num, std::size_t &destroyed) = 0;$/;"	p	struct:boost::interprocess::detail::in_place_interface	access:public	signature:(void *mem, std::size_t num, std::size_t &destroyed)
boost::interprocess::detail::in_place_interface::in_place_interface	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   in_place_interface(std::size_t alignm, std::size_t sz, const char *tname)$/;"	f	struct:boost::interprocess::detail::in_place_interface	access:public	signature:(std::size_t alignm, std::size_t sz, const char *tname)
boost::interprocess::detail::in_place_interface::size	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   std::size_t size;$/;"	m	struct:boost::interprocess::detail::in_place_interface	access:public
boost::interprocess::detail::in_place_interface::type_name	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   const char *type_name;$/;"	m	struct:boost::interprocess::detail::in_place_interface	access:public
boost::interprocess::detail::in_place_interface::~in_place_interface	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   virtual ~in_place_interface(){}$/;"	f	struct:boost::interprocess::detail::in_place_interface	access:public	signature:()
boost::interprocess::detail::is_convertible	/usr/include/boost/interprocess/detail/mpl.hpp	/^class is_convertible$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::is_convertible::dispatch	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static false_t dispatch(...);$/;"	p	class:boost::interprocess::detail::is_convertible	access:private	signature:(....)
boost::interprocess::detail::is_convertible::dispatch	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static true_t dispatch(U);$/;"	p	class:boost::interprocess::detail::is_convertible	access:private	signature:(U)
boost::interprocess::detail::is_convertible::false_t	/usr/include/boost/interprocess/detail/mpl.hpp	/^   class false_t { char dummy[2]; };$/;"	c	class:boost::interprocess::detail::is_convertible	access:private
boost::interprocess::detail::is_convertible::false_t::dummy	/usr/include/boost/interprocess/detail/mpl.hpp	/^   class false_t { char dummy[2]; };$/;"	m	class:boost::interprocess::detail::is_convertible::false_t	access:private
boost::interprocess::detail::is_convertible::trigger	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static T trigger();$/;"	p	class:boost::interprocess::detail::is_convertible	access:private	signature:()
boost::interprocess::detail::is_convertible::true_t	/usr/include/boost/interprocess/detail/mpl.hpp	/^   typedef char true_t;$/;"	t	class:boost::interprocess::detail::is_convertible	access:private
boost::interprocess::detail::is_convertible::value	/usr/include/boost/interprocess/detail/mpl.hpp	/^   enum { value = sizeof(dispatch(trigger())) == sizeof(true_t) };$/;"	e	enum:boost::interprocess::detail::is_convertible::__anon9
boost::interprocess::detail::lcm	/usr/include/boost/interprocess/detail/math_functions.hpp	/^inline Integer lcm(const Integer & A, const Integer & B)$/;"	f	namespace:boost::interprocess::detail	signature:(const Integer & A, const Integer & B)
boost::interprocess::detail::log2_ceil	/usr/include/boost/interprocess/detail/math_functions.hpp	/^inline Integer log2_ceil(const Integer & A)$/;"	f	namespace:boost::interprocess::detail	signature:(const Integer & A)
boost::interprocess::detail::ls_zeros	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct ls_zeros$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::ls_zeros	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct ls_zeros<0>$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::ls_zeros	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct ls_zeros<1>$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::ls_zeros::value	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static const std::size_t value = (S & std::size_t(1)) ? 0 : (1u + ls_zeros<(S >> 1u)>::value);$/;"	m	struct:boost::interprocess::detail::ls_zeros	access:public
boost::interprocess::detail::ls_zeros::value	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static const std::size_t value = 0;$/;"	m	struct:boost::interprocess::detail::ls_zeros	access:public
boost::interprocess::detail::managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^class managed_open_or_create_impl$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::managed_open_or_create_impl::CorruptedSegment	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^      CorruptedSegment$/;"	e	enum:boost::interprocess::detail::managed_open_or_create_impl::__anon7
boost::interprocess::detail::managed_open_or_create_impl::create_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   static void create_device(DeviceAbstraction &dev, const char *name, std::size_t size, detail::false_)$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:private	signature:(DeviceAbstraction &dev, const char *name, std::size_t size, detail::false_)
boost::interprocess::detail::managed_open_or_create_impl::create_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   static void create_device(DeviceAbstraction &dev, const char *name, std::size_t, detail::true_)$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:private	signature:(DeviceAbstraction &dev, const char *name, std::size_t, detail::true_)
boost::interprocess::detail::managed_open_or_create_impl::dont_close_on_destruction	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   void dont_close_on_destruction()$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:private	signature:()
boost::interprocess::detail::managed_open_or_create_impl::flush	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   bool flush()$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:()
boost::interprocess::detail::managed_open_or_create_impl::get_mapped_region	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   const mapped_region &get_mapped_region() const$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:() const
boost::interprocess::detail::managed_open_or_create_impl::get_name	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   const char *get_name() const$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:() const
boost::interprocess::detail::managed_open_or_create_impl::get_real_address	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   void *get_real_address()  const$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:() const
boost::interprocess::detail::managed_open_or_create_impl::get_real_size	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   std::size_t get_real_size()  const$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:() const
boost::interprocess::detail::managed_open_or_create_impl::get_user_address	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   void *get_user_address()  const$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:() const
boost::interprocess::detail::managed_open_or_create_impl::get_user_size	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   std::size_t get_user_size()  const$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:() const
boost::interprocess::detail::managed_open_or_create_impl::InitializedSegment	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^      InitializedSegment,$/;"	e	enum:boost::interprocess::detail::managed_open_or_create_impl::__anon7
boost::interprocess::detail::managed_open_or_create_impl::InitializingSegment	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^      InitializingSegment,  $/;"	e	enum:boost::interprocess::detail::managed_open_or_create_impl::__anon7
boost::interprocess::detail::managed_open_or_create_impl::ManagedOpenOrCreateUserOffset	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^      ManagedOpenOrCreateUserOffset = $/;"	m	class:boost::interprocess::detail::managed_open_or_create_impl	access:public
boost::interprocess::detail::managed_open_or_create_impl::managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl()$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:()
boost::interprocess::detail::managed_open_or_create_impl::managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(create_only_t, $/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:(create_only_t, const char *name, std::size_t size, mode_t mode = read_write, const void *addr = 0)
boost::interprocess::detail::managed_open_or_create_impl::managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(create_only_t, $/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:(create_only_t, const char *name, std::size_t size, mode_t mode, const void *addr, const ConstructFunc &construct_func)
boost::interprocess::detail::managed_open_or_create_impl::managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(open_only_t, $/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:(open_only_t, const char *name, mode_t mode = read_write, const void *addr = 0)
boost::interprocess::detail::managed_open_or_create_impl::managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(open_only_t, $/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:(open_only_t, const char *name, mode_t mode, const void *addr, const ConstructFunc &construct_func)
boost::interprocess::detail::managed_open_or_create_impl::managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(open_or_create_t, $/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:(open_or_create_t, const char *name, std::size_t size, mode_t mode = read_write, const void *addr = 0)
boost::interprocess::detail::managed_open_or_create_impl::managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(open_or_create_t, $/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:(open_or_create_t, const char *name, std::size_t size, mode_t mode, const void *addr, const ConstructFunc &construct_func)
boost::interprocess::detail::managed_open_or_create_impl::m_mapped_region	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   mapped_region     m_mapped_region;$/;"	m	class:boost::interprocess::detail::managed_open_or_create_impl	access:private
boost::interprocess::detail::managed_open_or_create_impl::m_name	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   std::string       m_name;$/;"	m	class:boost::interprocess::detail::managed_open_or_create_impl	access:private
boost::interprocess::detail::managed_open_or_create_impl::priv_open_or_create	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   void priv_open_or_create$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:private	signature:(detail::create_enum_t type, std::size_t size, mode_t mode, const void *addr, ConstructFunc construct_func)
boost::interprocess::detail::managed_open_or_create_impl::swap	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   void swap(managed_open_or_create_impl &other)$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:(managed_open_or_create_impl &other)
boost::interprocess::detail::managed_open_or_create_impl::truncate_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   static void truncate_device(DeviceAbstraction &, std::size_t, detail::false_)$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:private	signature:(DeviceAbstraction &, std::size_t, detail::false_)
boost::interprocess::detail::managed_open_or_create_impl::truncate_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   static void truncate_device(DeviceAbstraction &dev, std::size_t size, detail::true_)$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:private	signature:(DeviceAbstraction &dev, std::size_t size, detail::true_)
boost::interprocess::detail::managed_open_or_create_impl::UninitializedSegment	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^      UninitializedSegment,  $/;"	e	enum:boost::interprocess::detail::managed_open_or_create_impl::__anon7
boost::interprocess::detail::managed_open_or_create_impl::~managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   ~managed_open_or_create_impl()$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:()
boost::interprocess::detail::mapping_handle_from_file_handle	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline mapping_handle_t mapping_handle_from_file_handle(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd)
boost::interprocess::detail::mapping_handle_from_shm_handle	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline mapping_handle_t mapping_handle_from_shm_handle(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd)
boost::interprocess::detail::map_index_aux	/usr/include/boost/interprocess/indexes/map_index.hpp	/^struct map_index_aux$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::map_index_aux::allocator_type	/usr/include/boost/interprocess/indexes/map_index.hpp	/^         segment_manager_base>                     allocator_type;$/;"	t	struct:boost::interprocess::detail::map_index_aux	access:public
boost::interprocess::detail::map_index_aux::index_t	/usr/include/boost/interprocess/indexes/map_index.hpp	/^       key_less, allocator_type>                   index_t;$/;"	t	struct:boost::interprocess::detail::map_index_aux	access:public
boost::interprocess::detail::map_index_aux::key_less	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef std::less<key_type>                     key_less;$/;"	t	struct:boost::interprocess::detail::map_index_aux	access:public
boost::interprocess::detail::map_index_aux::key_type	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef typename MapConfig::key_type            key_type;$/;"	t	struct:boost::interprocess::detail::map_index_aux	access:public
boost::interprocess::detail::map_index_aux::mapped_type	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef typename MapConfig::mapped_type         mapped_type;$/;"	t	struct:boost::interprocess::detail::map_index_aux	access:public
boost::interprocess::detail::map_index_aux::value_type	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef std::pair<const key_type, mapped_type>  value_type;$/;"	t	struct:boost::interprocess::detail::map_index_aux	access:public
boost::interprocess::detail::memory_algorithm_common	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^class memory_algorithm_common$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::memory_algorithm_common::Alignment	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const std::size_t Alignment              = MemoryAlgorithm::Alignment;$/;"	m	class:boost::interprocess::detail::memory_algorithm_common	access:public
boost::interprocess::detail::memory_algorithm_common::AllocatedCtrlBytes	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const std::size_t AllocatedCtrlBytes     = MemoryAlgorithm::AllocatedCtrlBytes;$/;"	m	class:boost::interprocess::detail::memory_algorithm_common	access:public
boost::interprocess::detail::memory_algorithm_common::AllocatedCtrlUnits	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const std::size_t AllocatedCtrlUnits     = MemoryAlgorithm::AllocatedCtrlUnits;$/;"	m	class:boost::interprocess::detail::memory_algorithm_common	access:public
boost::interprocess::detail::memory_algorithm_common::allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void* allocate_aligned$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(MemoryAlgorithm *memory_algo, std::size_t nbytes, std::size_t alignment)
boost::interprocess::detail::memory_algorithm_common::allocate_many	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static multiallocation_chain allocate_many$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:( MemoryAlgorithm *memory_algo , const std::size_t *elem_sizes , std::size_t n_elements , std::size_t sizeof_element)
boost::interprocess::detail::memory_algorithm_common::allocate_many	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static multiallocation_chain allocate_many$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(MemoryAlgorithm *memory_algo, std::size_t elem_bytes, std::size_t n_elements)
boost::interprocess::detail::memory_algorithm_common::assert_alignment	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void assert_alignment(const void *ptr)$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(const void *ptr)
boost::interprocess::detail::memory_algorithm_common::assert_alignment	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void assert_alignment(std::size_t uint_ptr)$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(std::size_t uint_ptr)
boost::interprocess::detail::memory_algorithm_common::BlockCtrlBytes	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const std::size_t BlockCtrlBytes         = MemoryAlgorithm::BlockCtrlBytes;$/;"	m	class:boost::interprocess::detail::memory_algorithm_common	access:public
boost::interprocess::detail::memory_algorithm_common::BlockCtrlUnits	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const std::size_t BlockCtrlUnits         = MemoryAlgorithm::BlockCtrlUnits;$/;"	m	class:boost::interprocess::detail::memory_algorithm_common	access:public
boost::interprocess::detail::memory_algorithm_common::block_ctrl	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   typedef typename MemoryAlgorithm::block_ctrl                block_ctrl;$/;"	t	class:boost::interprocess::detail::memory_algorithm_common	access:public
boost::interprocess::detail::memory_algorithm_common::calculate_lcm_and_needs_backwards_lcmed	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static bool calculate_lcm_and_needs_backwards_lcmed$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(std::size_t backwards_multiple, std::size_t received_size, std::size_t size_to_achieve, std::size_t &lcm_out, std::size_t &needs_backwards_lcmed_out)
boost::interprocess::detail::memory_algorithm_common::ceil_units	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static std::size_t ceil_units(std::size_t size)$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(std::size_t size)
boost::interprocess::detail::memory_algorithm_common::check_alignment	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static bool check_alignment(const void *ptr)$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(const void *ptr)
boost::interprocess::detail::memory_algorithm_common::deallocate_many	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void deallocate_many(MemoryAlgorithm *memory_algo, multiallocation_chain chain)$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(MemoryAlgorithm *memory_algo, multiallocation_chain chain)
boost::interprocess::detail::memory_algorithm_common::floor_units	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static std::size_t floor_units(std::size_t size)$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(std::size_t size)
boost::interprocess::detail::memory_algorithm_common::MinBlockUnits	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const std::size_t MinBlockUnits          = MemoryAlgorithm::MinBlockUnits;$/;"	m	class:boost::interprocess::detail::memory_algorithm_common	access:public
boost::interprocess::detail::memory_algorithm_common::multiallocation_chain	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   typedef typename MemoryAlgorithm::multiallocation_chain     multiallocation_chain;$/;"	t	class:boost::interprocess::detail::memory_algorithm_common	access:public
boost::interprocess::detail::memory_algorithm_common::multiple_of_units	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static std::size_t multiple_of_units(std::size_t size)$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(std::size_t size)
boost::interprocess::detail::memory_algorithm_common::priv_allocate_many	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static multiallocation_chain priv_allocate_many$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:private	signature:( MemoryAlgorithm *memory_algo , const std::size_t *elem_sizes , std::size_t n_elements , std::size_t sizeof_element)
boost::interprocess::detail::memory_algorithm_common::priv_deallocate_many	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void priv_deallocate_many(MemoryAlgorithm *memory_algo, multiallocation_chain chain)$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:private	signature:(MemoryAlgorithm *memory_algo, multiallocation_chain chain)
boost::interprocess::detail::memory_algorithm_common::shrink	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static bool shrink $/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(MemoryAlgorithm *memory_algo, void *ptr ,const std::size_t max_size, const std::size_t preferred_size ,std::size_t &received_size)
boost::interprocess::detail::memory_algorithm_common::this_type	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   typedef memory_algorithm_common<MemoryAlgorithm>            this_type;$/;"	t	class:boost::interprocess::detail::memory_algorithm_common	access:public
boost::interprocess::detail::memory_algorithm_common::try_shrink	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static bool try_shrink $/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(MemoryAlgorithm *memory_algo, void *ptr ,const std::size_t max_size, const std::size_t preferred_size ,std::size_t &received_size)
boost::interprocess::detail::memory_algorithm_common::UsableByPreviousChunk	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const std::size_t UsableByPreviousChunk  = MemoryAlgorithm::UsableByPreviousChunk;$/;"	m	class:boost::interprocess::detail::memory_algorithm_common	access:public
boost::interprocess::detail::memory_algorithm_common::void_pointer	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   typedef typename MemoryAlgorithm::void_pointer              void_pointer;$/;"	t	class:boost::interprocess::detail::memory_algorithm_common	access:public
boost::interprocess::detail::mem_algo_deallocator	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^class mem_algo_deallocator$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::mem_algo_deallocator::mem_algo_deallocator	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   mem_algo_deallocator(void *ptr, MemoryAlgorithm &algo)$/;"	f	class:boost::interprocess::detail::mem_algo_deallocator	access:public	signature:(void *ptr, MemoryAlgorithm &algo)
boost::interprocess::detail::mem_algo_deallocator::m_algo	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   MemoryAlgorithm & m_algo;$/;"	m	class:boost::interprocess::detail::mem_algo_deallocator	access:private
boost::interprocess::detail::mem_algo_deallocator::m_ptr	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void *            m_ptr;$/;"	m	class:boost::interprocess::detail::mem_algo_deallocator	access:private
boost::interprocess::detail::mem_algo_deallocator::release	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void release()$/;"	f	class:boost::interprocess::detail::mem_algo_deallocator	access:public	signature:()
boost::interprocess::detail::mem_algo_deallocator::~mem_algo_deallocator	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   ~mem_algo_deallocator()$/;"	f	class:boost::interprocess::detail::mem_algo_deallocator	access:public	signature:()
boost::interprocess::detail::mq_hdr_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^class mq_hdr_t$/;"	c	namespace:boost::interprocess::detail	inherits:detail::priority_functor
boost::interprocess::detail::mq_hdr_t::free_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   msg_hdr_t * free_msg()$/;"	f	class:boost::interprocess::detail::mq_hdr_t	access:public	signature:()
boost::interprocess::detail::mq_hdr_t::free_top_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void free_top_msg()$/;"	f	class:boost::interprocess::detail::mq_hdr_t	access:public	signature:()
boost::interprocess::detail::mq_hdr_t::get_mem_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   static std::size_t get_mem_size$/;"	f	class:boost::interprocess::detail::mq_hdr_t	access:public	signature:(std::size_t max_msg_size, std::size_t max_num_msg)
boost::interprocess::detail::mq_hdr_t::initialize_memory	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void initialize_memory()$/;"	f	class:boost::interprocess::detail::mq_hdr_t	access:public	signature:()
boost::interprocess::detail::mq_hdr_t::is_empty	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool is_empty() const$/;"	f	class:boost::interprocess::detail::mq_hdr_t	access:public	signature:() const
boost::interprocess::detail::mq_hdr_t::is_full	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool is_full() const$/;"	f	class:boost::interprocess::detail::mq_hdr_t	access:public	signature:() const
boost::interprocess::detail::mq_hdr_t::mp_index	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   offset_ptr<msg_hdr_ptr_t>  mp_index;$/;"	m	class:boost::interprocess::detail::mq_hdr_t	access:public
boost::interprocess::detail::mq_hdr_t::mq_hdr_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   mq_hdr_t(std::size_t max_num_msg, std::size_t max_msg_size)$/;"	f	class:boost::interprocess::detail::mq_hdr_t	access:public	signature:(std::size_t max_num_msg, std::size_t max_msg_size)
boost::interprocess::detail::mq_hdr_t::msg_hdr_ptr_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef offset_ptr<msg_hdr_t> msg_hdr_ptr_t;$/;"	t	class:boost::interprocess::detail::mq_hdr_t	access:private
boost::interprocess::detail::mq_hdr_t::m_cond_recv	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   interprocess_condition     m_cond_recv;$/;"	m	class:boost::interprocess::detail::mq_hdr_t	access:public
boost::interprocess::detail::mq_hdr_t::m_cond_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   interprocess_condition     m_cond_send;$/;"	m	class:boost::interprocess::detail::mq_hdr_t	access:public
boost::interprocess::detail::mq_hdr_t::m_cur_num_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   std::size_t                m_cur_num_msg;$/;"	m	class:boost::interprocess::detail::mq_hdr_t	access:public
boost::interprocess::detail::mq_hdr_t::m_max_msg_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   const std::size_t          m_max_msg_size;$/;"	m	class:boost::interprocess::detail::mq_hdr_t	access:public
boost::interprocess::detail::mq_hdr_t::m_max_num_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   const std::size_t          m_max_num_msg;$/;"	m	class:boost::interprocess::detail::mq_hdr_t	access:public
boost::interprocess::detail::mq_hdr_t::m_mutex	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   interprocess_mutex         m_mutex;$/;"	m	class:boost::interprocess::detail::mq_hdr_t	access:public
boost::interprocess::detail::mq_hdr_t::queue_free_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void queue_free_msg()$/;"	f	class:boost::interprocess::detail::mq_hdr_t	access:public	signature:()
boost::interprocess::detail::mq_hdr_t::top_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   msg_hdr_t * top_msg()$/;"	f	class:boost::interprocess::detail::mq_hdr_t	access:public	signature:()
boost::interprocess::detail::msg_hdr_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^class msg_hdr_t $/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::msg_hdr_t::data	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void * data(){ return this+1; }  \/\/$/;"	f	class:boost::interprocess::detail::msg_hdr_t	access:public	signature:()
boost::interprocess::detail::msg_hdr_t::len	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   std::size_t             len;     \/\/ Message length$/;"	m	class:boost::interprocess::detail::msg_hdr_t	access:public
boost::interprocess::detail::msg_hdr_t::priority	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   unsigned int            priority;\/\/ Message priority$/;"	m	class:boost::interprocess::detail::msg_hdr_t	access:public
boost::interprocess::detail::mutexattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   struct mutexattr_wrapper $/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::mutexattr_wrapper::mutexattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      mutexattr_wrapper(bool recursive = false)$/;"	f	struct:boost::interprocess::detail::mutexattr_wrapper	access:public	signature:(bool recursive = false)
boost::interprocess::detail::mutexattr_wrapper::m_attr	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_mutexattr_t m_attr;$/;"	m	struct:boost::interprocess::detail::mutexattr_wrapper	access:public
boost::interprocess::detail::mutexattr_wrapper::operator pthread_mutexattr_t&	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      operator pthread_mutexattr_t&()  {  return m_attr;  }$/;"	f	struct:boost::interprocess::detail::mutexattr_wrapper	access:public	signature:()
boost::interprocess::detail::mutexattr_wrapper::~mutexattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~mutexattr_wrapper()  {  pthread_mutexattr_destroy(&m_attr);  }$/;"	f	struct:boost::interprocess::detail::mutexattr_wrapper	access:public	signature:()
boost::interprocess::detail::mutex_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   class mutex_initializer$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::mutex_initializer::mp_mut	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_mutex_t *mp_mut;$/;"	m	class:boost::interprocess::detail::mutex_initializer	access:private
boost::interprocess::detail::mutex_initializer::mutex_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      mutex_initializer(pthread_mutex_t &mut, pthread_mutexattr_t &mut_attr)$/;"	f	class:boost::interprocess::detail::mutex_initializer	access:public	signature:(pthread_mutex_t &mut, pthread_mutexattr_t &mut_attr)
boost::interprocess::detail::mutex_initializer::release	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      void release() {mp_mut = 0; }$/;"	f	class:boost::interprocess::detail::mutex_initializer	access:public	signature:()
boost::interprocess::detail::mutex_initializer::~mutex_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~mutex_initializer() {  if(mp_mut) pthread_mutex_destroy(mp_mut);  }$/;"	f	class:boost::interprocess::detail::mutex_initializer	access:public	signature:()
boost::interprocess::detail::named_creation_functor	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^class named_creation_functor$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::named_creation_functor::construct	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^   void construct(void *address, typename enable_if_c<!is_same<ArgType, no_arg_t>::value>::type * = 0) const$/;"	f	class:boost::interprocess::detail::named_creation_functor	access:public	signature:(void *address, typename enable_if_c<!is_same<ArgType, no_arg_t>::value>::type * = 0) const
boost::interprocess::detail::named_creation_functor::construct	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^   void construct(void *address, typename enable_if_c<is_same<ArgType, no_arg_t>::value>::type * = 0) const$/;"	f	class:boost::interprocess::detail::named_creation_functor	access:public	signature:(void *address, typename enable_if_c<is_same<ArgType, no_arg_t>::value>::type * = 0) const
boost::interprocess::detail::named_creation_functor::m_arg	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^   Arg m_arg;$/;"	m	class:boost::interprocess::detail::named_creation_functor	access:private
boost::interprocess::detail::named_creation_functor::m_creation_type	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^   detail::create_enum_t m_creation_type;$/;"	m	class:boost::interprocess::detail::named_creation_functor	access:private
boost::interprocess::detail::named_creation_functor::named_creation_functor	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^   named_creation_functor(detail::create_enum_t type, Arg arg = Arg())$/;"	f	class:boost::interprocess::detail::named_creation_functor	access:public	signature:(detail::create_enum_t type, Arg arg = Arg())
boost::interprocess::detail::named_creation_functor::no_arg_t	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^   typedef named_creation_functor_no_arg no_arg_t;$/;"	t	class:boost::interprocess::detail::named_creation_functor	access:private
boost::interprocess::detail::named_creation_functor::operator ()	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^   bool operator()(void *address, std::size_t, bool created) const$/;"	f	class:boost::interprocess::detail::named_creation_functor	access:public	signature:(void *address, std::size_t, bool created) const
boost::interprocess::detail::named_creation_functor_no_arg	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^struct named_creation_functor_no_arg{};$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::named_proxy	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^class named_proxy$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::named_proxy::char_type	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   typedef typename SegmentManager::char_type char_type;$/;"	t	class:boost::interprocess::detail::named_proxy	access:private
boost::interprocess::detail::named_proxy::mp_mngr	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   SegmentManager *     mp_mngr;$/;"	m	class:boost::interprocess::detail::named_proxy	access:private
boost::interprocess::detail::named_proxy::mp_name	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   const char_type *    mp_name;$/;"	m	class:boost::interprocess::detail::named_proxy	access:private
boost::interprocess::detail::named_proxy::m_dothrow	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   const bool           m_dothrow;$/;"	m	class:boost::interprocess::detail::named_proxy	access:private
boost::interprocess::detail::named_proxy::m_find	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   const bool           m_find;$/;"	m	class:boost::interprocess::detail::named_proxy	access:private
boost::interprocess::detail::named_proxy::m_num	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   mutable std::size_t  m_num;$/;"	m	class:boost::interprocess::detail::named_proxy	access:private
boost::interprocess::detail::named_proxy::named_proxy	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   named_proxy(SegmentManager *mngr, const char_type *name, bool find, bool dothrow)$/;"	f	class:boost::interprocess::detail::named_proxy	access:public	signature:(SegmentManager *mngr, const char_type *name, bool find, bool dothrow)
boost::interprocess::detail::named_proxy::operator ()	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   T *operator()(Args &&...args) const$/;"	f	class:boost::interprocess::detail::named_proxy	access:public	signature:(Args &&....args) const
boost::interprocess::detail::named_proxy::operator []	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   const named_proxy &operator[](std::size_t num) const$/;"	f	class:boost::interprocess::detail::named_proxy	access:public	signature:(std::size_t num) const
boost::interprocess::detail::named_semaphore_wrapper	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^class named_semaphore_wrapper$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::named_semaphore_wrapper::dont_close_on_destruction	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   void dont_close_on_destruction()$/;"	f	class:boost::interprocess::detail::named_semaphore_wrapper	access:private	signature:()
boost::interprocess::detail::named_semaphore_wrapper::mp_sem	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   sem_t      *mp_sem;$/;"	m	class:boost::interprocess::detail::named_semaphore_wrapper	access:private
boost::interprocess::detail::named_semaphore_wrapper::named_semaphore_wrapper	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   named_semaphore_wrapper$/;"	f	class:boost::interprocess::detail::named_semaphore_wrapper	access:public	signature:(detail::create_enum_t type, const char *name, mode_t mode, unsigned int count)
boost::interprocess::detail::named_semaphore_wrapper::named_semaphore_wrapper	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   named_semaphore_wrapper();$/;"	p	class:boost::interprocess::detail::named_semaphore_wrapper	access:private	signature:()
boost::interprocess::detail::named_semaphore_wrapper::named_semaphore_wrapper	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   named_semaphore_wrapper(const named_semaphore_wrapper&);$/;"	p	class:boost::interprocess::detail::named_semaphore_wrapper	access:private	signature:(const named_semaphore_wrapper&)
boost::interprocess::detail::named_semaphore_wrapper::operator =	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   named_semaphore_wrapper &operator= (const named_semaphore_wrapper &);$/;"	p	class:boost::interprocess::detail::named_semaphore_wrapper	access:private	signature:(const named_semaphore_wrapper &)
boost::interprocess::detail::named_semaphore_wrapper::post	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   void post()$/;"	f	class:boost::interprocess::detail::named_semaphore_wrapper	access:public	signature:()
boost::interprocess::detail::named_semaphore_wrapper::remove	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   static bool remove(const char *name)$/;"	f	class:boost::interprocess::detail::named_semaphore_wrapper	access:public	signature:(const char *name)
boost::interprocess::detail::named_semaphore_wrapper::timed_wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::detail::named_semaphore_wrapper	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::detail::named_semaphore_wrapper::try_wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   bool try_wait()$/;"	f	class:boost::interprocess::detail::named_semaphore_wrapper	access:public	signature:()
boost::interprocess::detail::named_semaphore_wrapper::wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   void wait()$/;"	f	class:boost::interprocess::detail::named_semaphore_wrapper	access:public	signature:()
boost::interprocess::detail::named_semaphore_wrapper::~named_semaphore_wrapper	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   ~named_semaphore_wrapper()$/;"	f	class:boost::interprocess::detail::named_semaphore_wrapper	access:public	signature:()
boost::interprocess::detail::nat	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct nat{};$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::node_allocator_base	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^class node_allocator_base$/;"	c	namespace:boost::interprocess::detail	inherits:node_pool_allocation_impl
boost::interprocess::detail::node_allocator_base::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   BOOST_STATIC_ASSERT((Version <=2));$/;"	p	class:boost::interprocess::detail::node_allocator_base	access:public	signature:(Version <=2)
boost::interprocess::detail::node_allocator_base::const_pointer	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      pointer_to_other<void_pointer, const T>::type      const_pointer;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
boost::interprocess::detail::node_allocator_base::const_reference	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
boost::interprocess::detail::node_allocator_base::difference_type	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef std::ptrdiff_t                                difference_type;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
boost::interprocess::detail::node_allocator_base::get_node_pool	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   void* get_node_pool() const$/;"	f	class:boost::interprocess::detail::node_allocator_base	access:public	signature:() const
boost::interprocess::detail::node_allocator_base::get_segment_manager	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::detail::node_allocator_base	access:public	signature:() const
boost::interprocess::detail::node_allocator_base::mp_node_pool	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   void_pointer   mp_node_pool;$/;"	m	class:boost::interprocess::detail::node_allocator_base	access:private
boost::interprocess::detail::node_allocator_base::multiallocation_chain	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
boost::interprocess::detail::node_allocator_base::node_allocator_base	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_base$/;"	f	class:boost::interprocess::detail::node_allocator_base	access:public	signature:(const node_allocator_base<Version, T2, SegmentManager, NodesPerBlock> &other)
boost::interprocess::detail::node_allocator_base::node_allocator_base	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_base(const node_allocator_base &other) $/;"	f	class:boost::interprocess::detail::node_allocator_base	access:public	signature:(const node_allocator_base &other)
boost::interprocess::detail::node_allocator_base::node_allocator_base	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_base(segment_manager *segment_mngr) $/;"	f	class:boost::interprocess::detail::node_allocator_base	access:public	signature:(segment_manager *segment_mngr)
boost::interprocess::detail::node_allocator_base::node_pool	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   struct node_pool$/;"	s	class:boost::interprocess::detail::node_allocator_base	access:public
boost::interprocess::detail::node_allocator_base::node_pool::get	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      static type *get(void *p)$/;"	f	struct:boost::interprocess::detail::node_allocator_base::node_pool	access:public	signature:(void *p)
boost::interprocess::detail::node_allocator_base::node_pool::type	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      < SegmentManager, sizeof_value<T>::value, NodesPerBlock> type;$/;"	t	struct:boost::interprocess::detail::node_allocator_base::node_pool	access:public
boost::interprocess::detail::node_allocator_base::operator =	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_base& operator=$/;"	p	class:boost::interprocess::detail::node_allocator_base	access:private	signature:(const node_allocator_base<Version2, T2, SegmentManager2, N2>&)
boost::interprocess::detail::node_allocator_base::operator =	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_base& operator=(const node_allocator_base &other)$/;"	f	class:boost::interprocess::detail::node_allocator_base	access:public	signature:(const node_allocator_base &other)
boost::interprocess::detail::node_allocator_base::pointer	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      pointer_to_other<void_pointer, T>::type            pointer;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
boost::interprocess::detail::node_allocator_base::rebind	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::detail::node_allocator_base	access:public
boost::interprocess::detail::node_allocator_base::rebind::other	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      typedef node_allocator_base<Version, T2, SegmentManager, NodesPerBlock>       other;$/;"	t	struct:boost::interprocess::detail::node_allocator_base::rebind	access:public
boost::interprocess::detail::node_allocator_base::reference	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
boost::interprocess::detail::node_allocator_base::segment_manager	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef SegmentManager                                segment_manager;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
boost::interprocess::detail::node_allocator_base::self_t	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      <Version, T, SegmentManager, NodesPerBlock>   self_t;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
boost::interprocess::detail::node_allocator_base::size_type	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef std::size_t                                   size_type;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
boost::interprocess::detail::node_allocator_base::swap	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   friend void swap(self_t &alloc1, self_t &alloc2)$/;"	f	class:boost::interprocess::detail::node_allocator_base	access:friend	signature:(self_t &alloc1, self_t &alloc2)
boost::interprocess::detail::node_allocator_base::value_type	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
boost::interprocess::detail::node_allocator_base::version	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef boost::interprocess::version_type<node_allocator_base, Version>   version;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
boost::interprocess::detail::node_allocator_base::void_pointer	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
boost::interprocess::detail::node_allocator_base::~node_allocator_base	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   ~node_allocator_base() $/;"	f	class:boost::interprocess::detail::node_allocator_base	access:public	signature:()
boost::interprocess::detail::node_allocator_v1	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^class node_allocator_v1$/;"	c	namespace:boost::interprocess::detail	inherits:node_allocator_base
boost::interprocess::detail::node_allocator_v1::base_t	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^         < 1, T, SegmentManager, NodesPerBlock> base_t;$/;"	t	class:boost::interprocess::detail::node_allocator_v1	access:public
boost::interprocess::detail::node_allocator_v1::node_allocator_v1	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_v1$/;"	f	class:boost::interprocess::detail::node_allocator_v1	access:public	signature:(const node_allocator_v1<T2, SegmentManager, NodesPerBlock> &other)
boost::interprocess::detail::node_allocator_v1::node_allocator_v1	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_v1(SegmentManager *segment_mngr) $/;"	f	class:boost::interprocess::detail::node_allocator_v1	access:public	signature:(SegmentManager *segment_mngr)
boost::interprocess::detail::node_allocator_v1::rebind	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::detail::node_allocator_v1	access:public
boost::interprocess::detail::node_allocator_v1::rebind::other	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      typedef node_allocator_v1<T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::detail::node_allocator_v1::rebind	access:public
boost::interprocess::detail::node_pool_allocation_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^class node_pool_allocation_impl$/;"	c	namespace:boost::interprocess::detail	inherits:array_allocation_impl
boost::interprocess::detail::node_pool_allocation_impl::allocate	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   pointer allocate(size_type count, cvoid_pointer hint = 0)$/;"	f	class:boost::interprocess::detail::node_pool_allocation_impl	access:public	signature:(size_type count, cvoid_pointer hint = 0)
boost::interprocess::detail::node_pool_allocation_impl::allocate_individual	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   multiallocation_chain allocate_individual(std::size_t num_elements)$/;"	f	class:boost::interprocess::detail::node_pool_allocation_impl	access:public	signature:(std::size_t num_elements)
boost::interprocess::detail::node_pool_allocation_impl::allocate_one	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   pointer allocate_one()$/;"	f	class:boost::interprocess::detail::node_pool_allocation_impl	access:public	signature:()
boost::interprocess::detail::node_pool_allocation_impl::const_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      pointer_to_other<void_pointer, const T>::type      const_pointer;$/;"	t	class:boost::interprocess::detail::node_pool_allocation_impl	access:public
boost::interprocess::detail::node_pool_allocation_impl::const_reference	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::detail::node_pool_allocation_impl	access:public
boost::interprocess::detail::node_pool_allocation_impl::cvoid_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      pointer_to_other<void_pointer, const void>::type   cvoid_pointer;$/;"	t	class:boost::interprocess::detail::node_pool_allocation_impl	access:private
boost::interprocess::detail::node_pool_allocation_impl::deallocate	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate(const pointer &ptr, size_type count)$/;"	f	class:boost::interprocess::detail::node_pool_allocation_impl	access:public	signature:(const pointer &ptr, size_type count)
boost::interprocess::detail::node_pool_allocation_impl::deallocate_free_blocks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_blocks()$/;"	f	class:boost::interprocess::detail::node_pool_allocation_impl	access:public	signature:()
boost::interprocess::detail::node_pool_allocation_impl::deallocate_free_chunks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_chunks()$/;"	f	class:boost::interprocess::detail::node_pool_allocation_impl	access:public	signature:()
boost::interprocess::detail::node_pool_allocation_impl::deallocate_individual	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_individual(multiallocation_chain chain)$/;"	f	class:boost::interprocess::detail::node_pool_allocation_impl	access:public	signature:(multiallocation_chain chain)
boost::interprocess::detail::node_pool_allocation_impl::deallocate_one	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_one(const pointer &p)$/;"	f	class:boost::interprocess::detail::node_pool_allocation_impl	access:public	signature:(const pointer &p)
boost::interprocess::detail::node_pool_allocation_impl::derived	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   const Derived *derived() const$/;"	f	class:boost::interprocess::detail::node_pool_allocation_impl	access:private	signature:() const
boost::interprocess::detail::node_pool_allocation_impl::derived	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   Derived *derived()$/;"	f	class:boost::interprocess::detail::node_pool_allocation_impl	access:private	signature:()
boost::interprocess::detail::node_pool_allocation_impl::difference_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef std::ptrdiff_t                                difference_type;$/;"	t	class:boost::interprocess::detail::node_pool_allocation_impl	access:public
boost::interprocess::detail::node_pool_allocation_impl::multiallocation_chain	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::detail::node_pool_allocation_impl	access:public
boost::interprocess::detail::node_pool_allocation_impl::node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   struct node_pool$/;"	s	class:boost::interprocess::detail::node_pool_allocation_impl	access:public
boost::interprocess::detail::node_pool_allocation_impl::node_pool::get	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      static type *get(void *p)$/;"	f	struct:boost::interprocess::detail::node_pool_allocation_impl::node_pool	access:public	signature:(void *p)
boost::interprocess::detail::node_pool_allocation_impl::node_pool::type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      typedef typename Derived::template node_pool<0>::type type;$/;"	t	struct:boost::interprocess::detail::node_pool_allocation_impl::node_pool	access:public
boost::interprocess::detail::node_pool_allocation_impl::pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      pointer_to_other<void_pointer, T>::type            pointer;$/;"	t	class:boost::interprocess::detail::node_pool_allocation_impl	access:public
boost::interprocess::detail::node_pool_allocation_impl::reference	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::detail::node_pool_allocation_impl	access:public
boost::interprocess::detail::node_pool_allocation_impl::size_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef std::size_t                                   size_type;$/;"	t	class:boost::interprocess::detail::node_pool_allocation_impl	access:public
boost::interprocess::detail::node_pool_allocation_impl::value_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::detail::node_pool_allocation_impl	access:public
boost::interprocess::detail::node_pool_allocation_impl::void_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::detail::node_pool_allocation_impl	access:private
boost::interprocess::detail::node_slist	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^struct node_slist$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::node_slist::node_slist_t	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^      <node_t, bi::linear<true>, bi::base_hook<slist_hook_t> >::type node_slist_t;$/;"	t	struct:boost::interprocess::detail::node_slist	access:public
boost::interprocess::detail::node_slist::node_t	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^   struct node_t$/;"	s	struct:boost::interprocess::detail::node_slist	inherits:slist_hook_t	access:public
boost::interprocess::detail::node_slist::slist_hook_t	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^      <bi::void_pointer<VoidPointer>, bi::link_mode<bi::normal_link> >::type slist_hook_t;$/;"	t	struct:boost::interprocess::detail::node_slist	access:public
boost::interprocess::detail::no_type	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct no_type$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::no_type::padding	/usr/include/boost/interprocess/detail/mpl.hpp	/^   char padding[8];$/;"	m	struct:boost::interprocess::detail::no_type	access:public
boost::interprocess::detail::open_existing_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline file_handle_t open_existing_file$/;"	f	namespace:boost::interprocess::detail	signature:(const char *name, mode_t mode = read_write, bool temporary = false)
boost::interprocess::detail::operator !=	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^bool operator!=(const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc1, $/;"	f	namespace:boost::interprocess::detail	signature:(const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc1, const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc2)
boost::interprocess::detail::operator !=	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^bool operator!=(const cached_allocator_impl<T, N, V> &alloc1, $/;"	f	namespace:boost::interprocess::detail	signature:(const cached_allocator_impl<T, N, V> &alloc1, const cached_allocator_impl<T, N, V> &alloc2)
boost::interprocess::detail::operator !=	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^bool operator!=(const node_allocator_base<V, T, S, NPC> &alloc1, $/;"	f	namespace:boost::interprocess::detail	signature:(const node_allocator_base<V, T, S, NPC> &alloc1, const node_allocator_base<V, T, S, NPC> &alloc2)
boost::interprocess::detail::operator !=	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^bool operator!=(const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc1, $/;"	f	namespace:boost::interprocess::detail	signature:(const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc1, const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc2)
boost::interprocess::detail::operator !=	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^bool operator!=(const private_node_allocator_base<V, T, S, NPC> &alloc1, $/;"	f	namespace:boost::interprocess::detail	signature:(const private_node_allocator_base<V, T, S, NPC> &alloc1, const private_node_allocator_base<V, T, S, NPC> &alloc2)
boost::interprocess::detail::operator <	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^bool operator<(shared_count<T, VoidAllocator, Deleter> const & a, shared_count<T2, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess::detail	signature:(shared_count<T, VoidAllocator, Deleter> const & a, shared_count<T2, VoidAllocator2, Deleter2> const & b)
boost::interprocess::detail::operator <	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^bool operator<(weak_count<T, VoidAllocator, Deleter> const & a, weak_count<T2, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess::detail	signature:(weak_count<T, VoidAllocator, Deleter> const & a, weak_count<T2, VoidAllocator2, Deleter2> const & b)
boost::interprocess::detail::operator ==	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^bool operator==(const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc1, $/;"	f	namespace:boost::interprocess::detail	signature:(const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc1, const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc2)
boost::interprocess::detail::operator ==	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^bool operator==(const cached_allocator_impl<T, N, V> &alloc1, $/;"	f	namespace:boost::interprocess::detail	signature:(const cached_allocator_impl<T, N, V> &alloc1, const cached_allocator_impl<T, N, V> &alloc2)
boost::interprocess::detail::operator ==	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^bool operator==(const node_allocator_base<V, T, S, NPC> &alloc1, $/;"	f	namespace:boost::interprocess::detail	signature:(const node_allocator_base<V, T, S, NPC> &alloc1, const node_allocator_base<V, T, S, NPC> &alloc2)
boost::interprocess::detail::operator ==	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^bool operator==(const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc1, $/;"	f	namespace:boost::interprocess::detail	signature:(const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc1, const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc2)
boost::interprocess::detail::operator ==	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^bool operator==(const private_node_allocator_base<V, T, S, NPC> &alloc1, $/;"	f	namespace:boost::interprocess::detail	signature:(const private_node_allocator_base<V, T, S, NPC> &alloc1, const private_node_allocator_base<V, T, S, NPC> &alloc2)
boost::interprocess::detail::operator ==	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^bool operator==(shared_count<T, VoidAllocator, Deleter> const & a, shared_count<T2, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess::detail	signature:(shared_count<T, VoidAllocator, Deleter> const & a, shared_count<T2, VoidAllocator2, Deleter2> const & b)
boost::interprocess::detail::operator ==	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^bool operator==(weak_count<T, VoidAllocator, Deleter> const & a, weak_count<T2, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess::detail	signature:(weak_count<T, VoidAllocator, Deleter> const & a, weak_count<T2, VoidAllocator2, Deleter2> const & b)
boost::interprocess::detail::OS_process_id_t	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^typedef unsigned long OS_process_id_t;$/;"	t	namespace:boost::interprocess::detail
boost::interprocess::detail::OS_systemwide_thread_id_t	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^typedef OS_thread_id_t OS_systemwide_thread_id_t;$/;"	t	namespace:boost::interprocess::detail
boost::interprocess::detail::OS_thread_id_t	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^typedef unsigned long OS_thread_id_t;$/;"	t	namespace:boost::interprocess::detail
boost::interprocess::detail::placement_destroy	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^struct placement_destroy :  public in_place_interface$/;"	s	namespace:boost::interprocess::detail	inherits:in_place_interface
boost::interprocess::detail::placement_destroy::construct_n	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   virtual void construct_n(void *, std::size_t, std::size_t &) {}$/;"	f	struct:boost::interprocess::detail::placement_destroy	access:public	signature:(void *, std::size_t, std::size_t &)
boost::interprocess::detail::placement_destroy::destroy	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   void destroy(void *mem)$/;"	f	struct:boost::interprocess::detail::placement_destroy	access:private	signature:(void *mem)
boost::interprocess::detail::placement_destroy::destroy_n	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   virtual void destroy_n(void *mem, std::size_t num, std::size_t &destroyed)$/;"	f	struct:boost::interprocess::detail::placement_destroy	access:public	signature:(void *mem, std::size_t num, std::size_t &destroyed)
boost::interprocess::detail::placement_destroy::placement_destroy	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   placement_destroy()$/;"	f	struct:boost::interprocess::detail::placement_destroy	access:public	signature:()
boost::interprocess::detail::pointer_type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct pointer_type$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::pointer_type::type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^        typename detail::remove_reference<D>::type>::type type;$/;"	t	struct:boost::interprocess::detail::pointer_type	access:public
boost::interprocess::detail::pointer_type_imp	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^namespace pointer_type_imp {$/;"	n	namespace:boost::interprocess::detail
boost::interprocess::detail::pointer_type_imp::pointer_type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct pointer_type$/;"	s	namespace:boost::interprocess::detail::pointer_type_imp
boost::interprocess::detail::pointer_type_imp::pointer_type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct pointer_type<T, D, false>$/;"	s	namespace:boost::interprocess::detail::pointer_type_imp
boost::interprocess::detail::pointer_type_imp::pointer_type::type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^    typedef T* type;$/;"	t	struct:boost::interprocess::detail::pointer_type_imp::pointer_type	access:public
boost::interprocess::detail::pointer_type_imp::pointer_type::type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^    typedef typename D::pointer type;$/;"	t	struct:boost::interprocess::detail::pointer_type_imp::pointer_type	access:public
boost::interprocess::detail::pointer_type_imp::test	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^template <class U> static char test(typename U::pointer* = 0);$/;"	p	namespace:boost::interprocess::detail::pointer_type_imp	signature:(typename U::pointer* = 0)
boost::interprocess::detail::pointer_type_imp::test	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^template <class U> static two  test(...);$/;"	p	namespace:boost::interprocess::detail::pointer_type_imp	signature:(....)
boost::interprocess::detail::priority_functor	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^class priority_functor$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::priority_functor::operator ()	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool operator()(const offset_ptr<msg_hdr_t> &msg1, $/;"	f	class:boost::interprocess::detail::priority_functor	access:public	signature:(const offset_ptr<msg_hdr_t> &msg1, const offset_ptr<msg_hdr_t> &msg2) const
boost::interprocess::detail::private_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^class private_adaptive_node_pool$/;"	c	namespace:boost::interprocess::detail	inherits:boost::container::containers_detail::private_adaptive_node_pool_impl
boost::interprocess::detail::private_adaptive_node_pool::base_t	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^      <typename SegmentManager::segment_manager_base_type> base_t;$/;"	t	class:boost::interprocess::detail::private_adaptive_node_pool	access:private
boost::interprocess::detail::private_adaptive_node_pool::get_segment_manager	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   segment_manager* get_segment_manager() const$/;"	f	class:boost::interprocess::detail::private_adaptive_node_pool	access:public	signature:() const
boost::interprocess::detail::private_adaptive_node_pool::nodes_per_block	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   static const std::size_t nodes_per_block = NodesPerBlock;$/;"	m	class:boost::interprocess::detail::private_adaptive_node_pool	access:public
boost::interprocess::detail::private_adaptive_node_pool::nodes_per_chunk	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   static const std::size_t nodes_per_chunk = NodesPerBlock;$/;"	m	class:boost::interprocess::detail::private_adaptive_node_pool	access:public
boost::interprocess::detail::private_adaptive_node_pool::operator =	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   private_adaptive_node_pool &operator=(const private_adaptive_node_pool &);$/;"	p	class:boost::interprocess::detail::private_adaptive_node_pool	access:private	signature:(const private_adaptive_node_pool &)
boost::interprocess::detail::private_adaptive_node_pool::private_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   private_adaptive_node_pool();$/;"	p	class:boost::interprocess::detail::private_adaptive_node_pool	access:private	signature:()
boost::interprocess::detail::private_adaptive_node_pool::private_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   private_adaptive_node_pool(const private_adaptive_node_pool &);$/;"	p	class:boost::interprocess::detail::private_adaptive_node_pool	access:private	signature:(const private_adaptive_node_pool &)
boost::interprocess::detail::private_adaptive_node_pool::private_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   private_adaptive_node_pool(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::detail::private_adaptive_node_pool	access:public	signature:(segment_manager *segment_mngr)
boost::interprocess::detail::private_adaptive_node_pool::segment_manager	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   typedef SegmentManager segment_manager;$/;"	t	class:boost::interprocess::detail::private_adaptive_node_pool	access:public
boost::interprocess::detail::private_adaptive_pool_base	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^class private_adaptive_pool_base$/;"	c	namespace:boost::interprocess::detail	inherits:node_pool_allocation_impl
boost::interprocess::detail::private_adaptive_pool_base::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   BOOST_STATIC_ASSERT((Version <=2));$/;"	p	class:boost::interprocess::detail::private_adaptive_pool_base	access:private	signature:(Version <=2)
boost::interprocess::detail::private_adaptive_pool_base::const_pointer	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      pointer_to_other<void_pointer, const T>::type      const_pointer;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
boost::interprocess::detail::private_adaptive_pool_base::const_reference	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
boost::interprocess::detail::private_adaptive_pool_base::difference_type	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef std::ptrdiff_t                                difference_type;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
boost::interprocess::detail::private_adaptive_pool_base::get_node_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   node_pool_t* get_node_pool() const$/;"	f	class:boost::interprocess::detail::private_adaptive_pool_base	access:public	signature:() const
boost::interprocess::detail::private_adaptive_pool_base::get_segment_manager	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::detail::private_adaptive_pool_base	access:public	signature:() const
boost::interprocess::detail::private_adaptive_pool_base::multiallocation_chain	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
boost::interprocess::detail::private_adaptive_pool_base::m_node_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   node_pool_t m_node_pool;$/;"	m	class:boost::interprocess::detail::private_adaptive_pool_base	access:private
boost::interprocess::detail::private_adaptive_pool_base::node_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   struct node_pool$/;"	s	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
boost::interprocess::detail::private_adaptive_pool_base::node_pool::get	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      static type *get(void *p)$/;"	f	struct:boost::interprocess::detail::private_adaptive_pool_base::node_pool	access:public	signature:(void *p)
boost::interprocess::detail::private_adaptive_pool_base::node_pool::type	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      > type;$/;"	t	struct:boost::interprocess::detail::private_adaptive_pool_base::node_pool	access:public
boost::interprocess::detail::private_adaptive_pool_base::node_pool_t	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      > node_pool_t;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:private
boost::interprocess::detail::private_adaptive_pool_base::operator =	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_base& operator=$/;"	p	class:boost::interprocess::detail::private_adaptive_pool_base	access:private	signature:(const private_adaptive_pool_base<Version2, T2, MemoryAlgorithm2, N2, F2, OP2>&)
boost::interprocess::detail::private_adaptive_pool_base::operator =	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_base& operator=(const private_adaptive_pool_base&);$/;"	p	class:boost::interprocess::detail::private_adaptive_pool_base	access:private	signature:(const private_adaptive_pool_base&)
boost::interprocess::detail::private_adaptive_pool_base::pointer	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      pointer_to_other<void_pointer, T>::type            pointer;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
boost::interprocess::detail::private_adaptive_pool_base::private_adaptive_pool_base	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_base$/;"	f	class:boost::interprocess::detail::private_adaptive_pool_base	access:public	signature:(const private_adaptive_pool_base <Version, T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
boost::interprocess::detail::private_adaptive_pool_base::private_adaptive_pool_base	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_base(const private_adaptive_pool_base &other)$/;"	f	class:boost::interprocess::detail::private_adaptive_pool_base	access:public	signature:(const private_adaptive_pool_base &other)
boost::interprocess::detail::private_adaptive_pool_base::private_adaptive_pool_base	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_base(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::detail::private_adaptive_pool_base	access:public	signature:(segment_manager *segment_mngr)
boost::interprocess::detail::private_adaptive_pool_base::rebind	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
boost::interprocess::detail::private_adaptive_pool_base::rebind::other	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^         <Version, T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>   other;$/;"	t	struct:boost::interprocess::detail::private_adaptive_pool_base::rebind	access:public
boost::interprocess::detail::private_adaptive_pool_base::reference	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
boost::interprocess::detail::private_adaptive_pool_base::segment_manager	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef SegmentManager                                segment_manager;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
boost::interprocess::detail::private_adaptive_pool_base::self_t	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      , MaxFreeBlocks, OverheadPercent>                  self_t;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:private
boost::interprocess::detail::private_adaptive_pool_base::size_type	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef std::size_t                                   size_type;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
boost::interprocess::detail::private_adaptive_pool_base::swap	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   friend void swap(self_t &alloc1,self_t &alloc2)$/;"	f	class:boost::interprocess::detail::private_adaptive_pool_base	access:friend	signature:(self_t &alloc1,self_t &alloc2)
boost::interprocess::detail::private_adaptive_pool_base::value_type	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
boost::interprocess::detail::private_adaptive_pool_base::version	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      <private_adaptive_pool_base, Version>              version;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
boost::interprocess::detail::private_adaptive_pool_base::void_pointer	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
boost::interprocess::detail::private_adaptive_pool_base::~private_adaptive_pool_base	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   ~private_adaptive_pool_base() $/;"	f	class:boost::interprocess::detail::private_adaptive_pool_base	access:public	signature:()
boost::interprocess::detail::private_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^class private_adaptive_pool_v1$/;"	c	namespace:boost::interprocess::detail	inherits:private_adaptive_pool_base
boost::interprocess::detail::private_adaptive_pool_v1::base_t	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^         < 1, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> base_t;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_v1	access:public
boost::interprocess::detail::private_adaptive_pool_v1::private_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_v1$/;"	f	class:boost::interprocess::detail::private_adaptive_pool_v1	access:public	signature:(const private_adaptive_pool_v1<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
boost::interprocess::detail::private_adaptive_pool_v1::private_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_v1(SegmentManager *segment_mngr) $/;"	f	class:boost::interprocess::detail::private_adaptive_pool_v1	access:public	signature:(SegmentManager *segment_mngr)
boost::interprocess::detail::private_adaptive_pool_v1::rebind	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::detail::private_adaptive_pool_v1	access:public
boost::interprocess::detail::private_adaptive_pool_v1::rebind::other	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      typedef private_adaptive_pool_v1<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::detail::private_adaptive_pool_v1::rebind	access:public
boost::interprocess::detail::private_node_allocator_base	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^class private_node_allocator_base$/;"	c	namespace:boost::interprocess::detail	inherits:node_pool_allocation_impl
boost::interprocess::detail::private_node_allocator_base::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   BOOST_STATIC_ASSERT((Version <=2));$/;"	p	class:boost::interprocess::detail::private_node_allocator_base	access:private	signature:(Version <=2)
boost::interprocess::detail::private_node_allocator_base::const_pointer	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      pointer_to_other<void_pointer, const T>::type      const_pointer;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
boost::interprocess::detail::private_node_allocator_base::const_reference	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
boost::interprocess::detail::private_node_allocator_base::difference_type	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef std::ptrdiff_t                                difference_type;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
boost::interprocess::detail::private_node_allocator_base::get_node_pool	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   node_pool_t* get_node_pool() const$/;"	f	class:boost::interprocess::detail::private_node_allocator_base	access:public	signature:() const
boost::interprocess::detail::private_node_allocator_base::get_segment_manager	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::detail::private_node_allocator_base	access:public	signature:() const
boost::interprocess::detail::private_node_allocator_base::multiallocation_chain	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
boost::interprocess::detail::private_node_allocator_base::m_node_pool	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   node_pool_t m_node_pool;$/;"	m	class:boost::interprocess::detail::private_node_allocator_base	access:private
boost::interprocess::detail::private_node_allocator_base::node_pool	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   struct node_pool$/;"	s	class:boost::interprocess::detail::private_node_allocator_base	access:public
boost::interprocess::detail::private_node_allocator_base::node_pool::get	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      static type *get(void *p)$/;"	f	struct:boost::interprocess::detail::private_node_allocator_base::node_pool	access:public	signature:(void *p)
boost::interprocess::detail::private_node_allocator_base::node_pool::type	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      > type;$/;"	t	struct:boost::interprocess::detail::private_node_allocator_base::node_pool	access:public
boost::interprocess::detail::private_node_allocator_base::node_pool_t	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      > node_pool_t;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:private
boost::interprocess::detail::private_node_allocator_base::operator =	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_base& operator=$/;"	p	class:boost::interprocess::detail::private_node_allocator_base	access:private	signature:(const private_node_allocator_base<Version2, T2, MemoryAlgorithm2, N2>&)
boost::interprocess::detail::private_node_allocator_base::operator =	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_base& operator=(const private_node_allocator_base&);$/;"	p	class:boost::interprocess::detail::private_node_allocator_base	access:private	signature:(const private_node_allocator_base&)
boost::interprocess::detail::private_node_allocator_base::pointer	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      pointer_to_other<void_pointer, T>::type            pointer;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
boost::interprocess::detail::private_node_allocator_base::private_node_allocator_base	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_base$/;"	f	class:boost::interprocess::detail::private_node_allocator_base	access:public	signature:(const private_node_allocator_base <Version, T2, SegmentManager, NodesPerBlock> &other)
boost::interprocess::detail::private_node_allocator_base::private_node_allocator_base	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_base(const private_node_allocator_base &other)$/;"	f	class:boost::interprocess::detail::private_node_allocator_base	access:public	signature:(const private_node_allocator_base &other)
boost::interprocess::detail::private_node_allocator_base::private_node_allocator_base	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_base(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::detail::private_node_allocator_base	access:public	signature:(segment_manager *segment_mngr)
boost::interprocess::detail::private_node_allocator_base::rebind	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::detail::private_node_allocator_base	access:public
boost::interprocess::detail::private_node_allocator_base::rebind::other	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^         <Version, T2, SegmentManager, NodesPerBlock>   other;$/;"	t	struct:boost::interprocess::detail::private_node_allocator_base::rebind	access:public
boost::interprocess::detail::private_node_allocator_base::reference	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
boost::interprocess::detail::private_node_allocator_base::segment_manager	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef SegmentManager                                segment_manager;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
boost::interprocess::detail::private_node_allocator_base::self_t	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      < Version, T, SegmentManager, NodesPerBlock>       self_t;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:private
boost::interprocess::detail::private_node_allocator_base::size_type	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef std::size_t                                   size_type;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
boost::interprocess::detail::private_node_allocator_base::swap	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   friend void swap(self_t &alloc1,self_t &alloc2)$/;"	f	class:boost::interprocess::detail::private_node_allocator_base	access:friend	signature:(self_t &alloc1,self_t &alloc2)
boost::interprocess::detail::private_node_allocator_base::value_type	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
boost::interprocess::detail::private_node_allocator_base::version	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      <private_node_allocator_base, Version>              version;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
boost::interprocess::detail::private_node_allocator_base::void_pointer	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
boost::interprocess::detail::private_node_allocator_base::~private_node_allocator_base	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   ~private_node_allocator_base() $/;"	f	class:boost::interprocess::detail::private_node_allocator_base	access:public	signature:()
boost::interprocess::detail::private_node_allocator_v1	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^class private_node_allocator_v1$/;"	c	namespace:boost::interprocess::detail	inherits:private_node_allocator_base
boost::interprocess::detail::private_node_allocator_v1::base_t	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^         < 1, T, SegmentManager, NodesPerBlock> base_t;$/;"	t	class:boost::interprocess::detail::private_node_allocator_v1	access:public
boost::interprocess::detail::private_node_allocator_v1::private_node_allocator_v1	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_v1$/;"	f	class:boost::interprocess::detail::private_node_allocator_v1	access:public	signature:(const private_node_allocator_v1<T2, SegmentManager, NodesPerBlock> &other)
boost::interprocess::detail::private_node_allocator_v1::private_node_allocator_v1	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_v1(SegmentManager *segment_mngr) $/;"	f	class:boost::interprocess::detail::private_node_allocator_v1	access:public	signature:(SegmentManager *segment_mngr)
boost::interprocess::detail::private_node_allocator_v1::rebind	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::detail::private_node_allocator_v1	access:public
boost::interprocess::detail::private_node_allocator_v1::rebind::other	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      typedef private_node_allocator_v1<T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::detail::private_node_allocator_v1::rebind	access:public
boost::interprocess::detail::private_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^class private_node_pool$/;"	c	namespace:boost::interprocess::detail	inherits:boost::container::containers_detail::private_node_pool_impl
boost::interprocess::detail::private_node_pool::base_t	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^      <typename SegmentManager::segment_manager_base_type> base_t;$/;"	t	class:boost::interprocess::detail::private_node_pool	access:private
boost::interprocess::detail::private_node_pool::get_segment_manager	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   segment_manager* get_segment_manager() const$/;"	f	class:boost::interprocess::detail::private_node_pool	access:public	signature:() const
boost::interprocess::detail::private_node_pool::nodes_per_block	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   static const std::size_t nodes_per_block = NodesPerBlock;$/;"	m	class:boost::interprocess::detail::private_node_pool	access:public
boost::interprocess::detail::private_node_pool::nodes_per_chunk	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   static const std::size_t nodes_per_chunk = NodesPerBlock;$/;"	m	class:boost::interprocess::detail::private_node_pool	access:public
boost::interprocess::detail::private_node_pool::operator =	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   private_node_pool &operator=(const private_node_pool &);$/;"	p	class:boost::interprocess::detail::private_node_pool	access:private	signature:(const private_node_pool &)
boost::interprocess::detail::private_node_pool::private_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   private_node_pool();$/;"	p	class:boost::interprocess::detail::private_node_pool	access:private	signature:()
boost::interprocess::detail::private_node_pool::private_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   private_node_pool(const private_node_pool &);$/;"	p	class:boost::interprocess::detail::private_node_pool	access:private	signature:(const private_node_pool &)
boost::interprocess::detail::private_node_pool::private_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   private_node_pool(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::detail::private_node_pool	access:public	signature:(segment_manager *segment_mngr)
boost::interprocess::detail::private_node_pool::segment_manager	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   typedef SegmentManager segment_manager;$/;"	t	class:boost::interprocess::detail::private_node_pool	access:public
boost::interprocess::detail::ptime_to_timespec	/usr/include/boost/interprocess/sync/posix/ptime_to_timespec.hpp	/^inline timespec ptime_to_timespec (const boost::posix_time::ptime &tm)$/;"	f	namespace:boost::interprocess::detail	signature:(const boost::posix_time::ptime &tm)
boost::interprocess::detail::raw_mapped_region_creator	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^   class raw_mapped_region_creator$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::raw_mapped_region_creator::create_posix_mapped_region	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^         create_posix_mapped_region(void *address, offset_t offset, std::size_t size)$/;"	f	class:boost::interprocess::detail::raw_mapped_region_creator	access:public	signature:(void *address, offset_t offset, std::size_t size)
boost::interprocess::detail::reinterpret_cast_tag	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^struct reinterpret_cast_tag {};$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::release_file_lock	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool release_file_lock(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd)
boost::interprocess::detail::release_file_lock_sharable	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool release_file_lock_sharable(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd)
boost::interprocess::detail::scoped_ptr_dealloc_functor	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^struct scoped_ptr_dealloc_functor$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::scoped_ptr_dealloc_functor::allocator_v1	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef detail::integral_constant<unsigned, 1>     allocator_v1;$/;"	t	struct:boost::interprocess::detail::scoped_ptr_dealloc_functor	access:public
boost::interprocess::detail::scoped_ptr_dealloc_functor::allocator_v2	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef detail::integral_constant<unsigned, 2>     allocator_v2;$/;"	t	struct:boost::interprocess::detail::scoped_ptr_dealloc_functor	access:public
boost::interprocess::detail::scoped_ptr_dealloc_functor::alloc_version	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^      boost::interprocess::version<Allocator>::value>                   alloc_version;$/;"	t	struct:boost::interprocess::detail::scoped_ptr_dealloc_functor	access:public
boost::interprocess::detail::scoped_ptr_dealloc_functor::m_alloc	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   Allocator& m_alloc;$/;"	m	struct:boost::interprocess::detail::scoped_ptr_dealloc_functor	access:public
boost::interprocess::detail::scoped_ptr_dealloc_functor::operator ()	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void operator()(pointer ptr)$/;"	f	struct:boost::interprocess::detail::scoped_ptr_dealloc_functor	access:public	signature:(pointer ptr)
boost::interprocess::detail::scoped_ptr_dealloc_functor::pointer	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef typename Allocator::pointer pointer;$/;"	t	struct:boost::interprocess::detail::scoped_ptr_dealloc_functor	access:public
boost::interprocess::detail::scoped_ptr_dealloc_functor::priv_deallocate	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void priv_deallocate(const typename Allocator::pointer &p, allocator_v1)$/;"	f	struct:boost::interprocess::detail::scoped_ptr_dealloc_functor	access:private	signature:(const typename Allocator::pointer &p, allocator_v1)
boost::interprocess::detail::scoped_ptr_dealloc_functor::priv_deallocate	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void priv_deallocate(const typename Allocator::pointer &p, allocator_v2)$/;"	f	struct:boost::interprocess::detail::scoped_ptr_dealloc_functor	access:private	signature:(const typename Allocator::pointer &p, allocator_v2)
boost::interprocess::detail::scoped_ptr_dealloc_functor::scoped_ptr_dealloc_functor	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   scoped_ptr_dealloc_functor(Allocator& a)$/;"	f	struct:boost::interprocess::detail::scoped_ptr_dealloc_functor	access:public	signature:(Allocator& a)
boost::interprocess::detail::segment_manager_base_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct segment_manager_base_type$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::segment_manager_base_type::type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^{  typedef segment_manager_base<MemoryAlgorithm> type;   };$/;"	t	struct:boost::interprocess::detail::segment_manager_base_type	access:public
boost::interprocess::detail::segment_manager_iterator_transform	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct segment_manager_iterator_transform$/;"	s	namespace:boost::interprocess::detail	inherits:std::unary_function
boost::interprocess::detail::segment_manager_iterator_transform::operator ()	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   result_type operator()(const typename Iterator::value_type &arg) const$/;"	f	struct:boost::interprocess::detail::segment_manager_iterator_transform	access:public	signature:(const typename Iterator::value_type &arg) const
boost::interprocess::detail::segment_manager_iterator_transform::result_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef segment_manager_iterator_value_adaptor<Iterator, intrusive> result_type;$/;"	t	struct:boost::interprocess::detail::segment_manager_iterator_transform	access:public
boost::interprocess::detail::segment_manager_iterator_value_adaptor	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^class segment_manager_iterator_value_adaptor$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::segment_manager_iterator_value_adaptor	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^class segment_manager_iterator_value_adaptor<Iterator, false>$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::segment_manager_iterator_value_adaptor::char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename first_type::char_type       char_type;$/;"	t	class:boost::interprocess::detail::segment_manager_iterator_value_adaptor	access:private
boost::interprocess::detail::segment_manager_iterator_value_adaptor::char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename iterator_val_t::char_type   char_type;$/;"	t	class:boost::interprocess::detail::segment_manager_iterator_value_adaptor	access:private
boost::interprocess::detail::segment_manager_iterator_value_adaptor::first_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename iterator_val_t::first_type  first_type;$/;"	t	class:boost::interprocess::detail::segment_manager_iterator_value_adaptor	access:private
boost::interprocess::detail::segment_manager_iterator_value_adaptor::iterator_val_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename Iterator::value_type        iterator_val_t;$/;"	t	class:boost::interprocess::detail::segment_manager_iterator_value_adaptor	access:private
boost::interprocess::detail::segment_manager_iterator_value_adaptor::m_val	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const typename Iterator::value_type *m_val;$/;"	m	class:boost::interprocess::detail::segment_manager_iterator_value_adaptor	access:public
boost::interprocess::detail::segment_manager_iterator_value_adaptor::name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const char_type *name() const$/;"	f	class:boost::interprocess::detail::segment_manager_iterator_value_adaptor	access:public	signature:() const
boost::interprocess::detail::segment_manager_iterator_value_adaptor::name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t name_length() const$/;"	f	class:boost::interprocess::detail::segment_manager_iterator_value_adaptor	access:public	signature:() const
boost::interprocess::detail::segment_manager_iterator_value_adaptor::second_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename iterator_val_t::second_type second_type;$/;"	t	class:boost::interprocess::detail::segment_manager_iterator_value_adaptor	access:private
boost::interprocess::detail::segment_manager_iterator_value_adaptor::segment_manager_iterator_value_adaptor	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   segment_manager_iterator_value_adaptor(const typename Iterator::value_type &val)$/;"	f	class:boost::interprocess::detail::segment_manager_iterator_value_adaptor	access:public	signature:(const typename Iterator::value_type &val)
boost::interprocess::detail::segment_manager_iterator_value_adaptor::value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const void *value() const$/;"	f	class:boost::interprocess::detail::segment_manager_iterator_value_adaptor	access:public	signature:() const
boost::interprocess::detail::segment_manager_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^struct segment_manager_type$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::segment_manager_type::type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef segment_manager<CharType, MemoryAlgorithm, IndexType> type;$/;"	t	struct:boost::interprocess::detail::segment_manager_type	access:public
boost::interprocess::detail::select1st	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct select1st $/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::select1st::operator ()	/usr/include/boost/interprocess/detail/mpl.hpp	/^   const typename Pair::first_type& operator()(const OtherPair& x) const $/;"	f	struct:boost::interprocess::detail::select1st	access:public	signature:(const OtherPair& x) const
boost::interprocess::detail::select1st::operator ()	/usr/include/boost/interprocess/detail/mpl.hpp	/^   const typename Pair::first_type& operator()(const typename Pair::first_type& x) const $/;"	f	struct:boost::interprocess::detail::select1st	access:public	signature:(const typename Pair::first_type& x) const
boost::interprocess::detail::semaphore_close	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline void semaphore_close(sem_t *handle)$/;"	f	namespace:boost::interprocess::detail	signature:(sem_t *handle)
boost::interprocess::detail::semaphore_destroy	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline void semaphore_destroy(sem_t *handle)$/;"	f	namespace:boost::interprocess::detail	signature:(sem_t *handle)
boost::interprocess::detail::semaphore_init	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline void semaphore_init(sem_t *handle, unsigned int initialCount)$/;"	f	namespace:boost::interprocess::detail	signature:(sem_t *handle, unsigned int initialCount)
boost::interprocess::detail::semaphore_open	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline bool semaphore_open$/;"	f	namespace:boost::interprocess::detail	signature:(sem_t *&handle, detail::create_enum_t type, const char *origname, mode_t mode, unsigned int count)
boost::interprocess::detail::semaphore_post	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline void semaphore_post(sem_t *handle)$/;"	f	namespace:boost::interprocess::detail	signature:(sem_t *handle)
boost::interprocess::detail::semaphore_timed_wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline bool semaphore_timed_wait(sem_t *handle, const boost::posix_time::ptime &abs_time)$/;"	f	namespace:boost::interprocess::detail	signature:(sem_t *handle, const boost::posix_time::ptime &abs_time)
boost::interprocess::detail::semaphore_try_wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline bool semaphore_try_wait(sem_t *handle)$/;"	f	namespace:boost::interprocess::detail	signature:(sem_t *handle)
boost::interprocess::detail::semaphore_unlink	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline bool semaphore_unlink(const char *semname)$/;"	f	namespace:boost::interprocess::detail	signature:(const char *semname)
boost::interprocess::detail::semaphore_wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline void semaphore_wait(sem_t *handle)$/;"	f	namespace:boost::interprocess::detail	signature:(sem_t *handle)
boost::interprocess::detail::semaphore_wrapper	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^class semaphore_wrapper$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::semaphore_wrapper::m_sem	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   sem_t       m_sem;$/;"	m	class:boost::interprocess::detail::semaphore_wrapper	access:private
boost::interprocess::detail::semaphore_wrapper::operator =	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   semaphore_wrapper &operator= (const semaphore_wrapper &);$/;"	p	class:boost::interprocess::detail::semaphore_wrapper	access:private	signature:(const semaphore_wrapper &)
boost::interprocess::detail::semaphore_wrapper::post	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   void post()$/;"	f	class:boost::interprocess::detail::semaphore_wrapper	access:public	signature:()
boost::interprocess::detail::semaphore_wrapper::semaphore_wrapper	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   semaphore_wrapper();$/;"	p	class:boost::interprocess::detail::semaphore_wrapper	access:private	signature:()
boost::interprocess::detail::semaphore_wrapper::semaphore_wrapper	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   semaphore_wrapper(const semaphore_wrapper&);$/;"	p	class:boost::interprocess::detail::semaphore_wrapper	access:private	signature:(const semaphore_wrapper&)
boost::interprocess::detail::semaphore_wrapper::semaphore_wrapper	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   semaphore_wrapper(unsigned int initialCount)$/;"	f	class:boost::interprocess::detail::semaphore_wrapper	access:public	signature:(unsigned int initialCount)
boost::interprocess::detail::semaphore_wrapper::timed_wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::detail::semaphore_wrapper	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::detail::semaphore_wrapper::try_wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   bool try_wait()$/;"	f	class:boost::interprocess::detail::semaphore_wrapper	access:public	signature:()
boost::interprocess::detail::semaphore_wrapper::wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   void wait()$/;"	f	class:boost::interprocess::detail::semaphore_wrapper	access:public	signature:()
boost::interprocess::detail::semaphore_wrapper::~semaphore_wrapper	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   ~semaphore_wrapper()$/;"	f	class:boost::interprocess::detail::semaphore_wrapper	access:public	signature:()
boost::interprocess::detail::set_file_pointer	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool set_file_pointer(file_handle_t hnd, offset_t off, file_pos_t pos)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd, offset_t off, file_pos_t pos)
boost::interprocess::detail::shared_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^class shared_adaptive_node_pool $/;"	c	namespace:boost::interprocess::detail	inherits:detail::shared_pool_impl
boost::interprocess::detail::shared_adaptive_node_pool::base_t	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^      > base_t;$/;"	t	class:boost::interprocess::detail::shared_adaptive_node_pool	access:private
boost::interprocess::detail::shared_adaptive_node_pool::shared_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   shared_adaptive_node_pool(SegmentManager *segment_mgnr)$/;"	f	class:boost::interprocess::detail::shared_adaptive_node_pool	access:public	signature:(SegmentManager *segment_mgnr)
boost::interprocess::detail::shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^class shared_count$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::shared_count::const_allocator_pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^            <typename VoidAllocator::pointer, const VoidAllocator>::type   const_allocator_pointer;$/;"	t	class:boost::interprocess::detail::shared_count	access:private
boost::interprocess::detail::shared_count::const_deleter_pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^            <typename VoidAllocator::pointer, const Deleter>::type   const_deleter_pointer;$/;"	t	class:boost::interprocess::detail::shared_count	access:private
boost::interprocess::detail::shared_count::counted_base_ptr	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^      <typename VoidAllocator::pointer, sp_counted_base>::type counted_base_ptr;$/;"	t	class:boost::interprocess::detail::shared_count	access:private
boost::interprocess::detail::shared_count::counted_impl	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   typedef sp_counted_impl_pd<VoidAllocator, Deleter>       counted_impl;$/;"	t	class:boost::interprocess::detail::shared_count	access:private
boost::interprocess::detail::shared_count::counted_impl_allocator	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^      <counted_impl>::other                        counted_impl_allocator;$/;"	t	class:boost::interprocess::detail::shared_count	access:private
boost::interprocess::detail::shared_count::counted_impl_ptr	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^      <typename VoidAllocator::pointer, counted_impl>::type    counted_impl_ptr;$/;"	t	class:boost::interprocess::detail::shared_count	access:private
boost::interprocess::detail::shared_count::get_deleter	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   const_deleter_pointer get_deleter() const$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:() const
boost::interprocess::detail::shared_count::get_pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   const pointer &get_pointer() const$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:() const
boost::interprocess::detail::shared_count::get_pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   pointer &get_pointer()$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:()
boost::interprocess::detail::shared_count::internal_equal	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   bool internal_equal (shared_count<T2, VoidAllocator2, Deleter2> const & other) const$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(shared_count<T2, VoidAllocator2, Deleter2> const & other) const
boost::interprocess::detail::shared_count::internal_less	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   bool internal_less  (shared_count<T2, VoidAllocator2, Deleter2> const & other) const$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(shared_count<T2, VoidAllocator2, Deleter2> const & other) const
boost::interprocess::detail::shared_count::m_pi	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   counted_impl_ptr  m_pi;$/;"	m	class:boost::interprocess::detail::shared_count	access:private
boost::interprocess::detail::shared_count::m_px	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   pointer           m_px;$/;"	m	class:boost::interprocess::detail::shared_count	access:private
boost::interprocess::detail::shared_count::operator =	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count & operator= (shared_count const & r) \/\/ nothrow$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(shared_count const & r)
boost::interprocess::detail::shared_count::operator =	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count & operator= (shared_count<Y, VoidAllocator, Deleter> const & r) \/\/ nothrow$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(shared_count<Y, VoidAllocator, Deleter> const & r)
boost::interprocess::detail::shared_count::pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^      <typename VoidAllocator::pointer, T>::type               pointer;$/;"	t	class:boost::interprocess::detail::shared_count	access:public
boost::interprocess::detail::shared_count::shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   explicit shared_count(const pointer & ptr, shared_count<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(const pointer & ptr, shared_count<Y, VoidAllocator, Deleter> const & r)
boost::interprocess::detail::shared_count::shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   explicit shared_count(shared_count<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(shared_count<Y, VoidAllocator, Deleter> const & r)
boost::interprocess::detail::shared_count::shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   explicit shared_count(weak_count<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(weak_count<Y, VoidAllocator, Deleter> const & r)
boost::interprocess::detail::shared_count::shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count()$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:()
boost::interprocess::detail::shared_count::shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count(const Ptr &p, const VoidAllocator &a, Deleter d)$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(const Ptr &p, const VoidAllocator &a, Deleter d)
boost::interprocess::detail::shared_count::shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count(const shared_count &other_shared_count, const Ptr &p)$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(const shared_count &other_shared_count, const Ptr &p)
boost::interprocess::detail::shared_count::shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count(shared_count const & r)$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(shared_count const & r)
boost::interprocess::detail::shared_count::swap	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   void swap(shared_count & r) \/\/ nothrow$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(shared_count & r)
boost::interprocess::detail::shared_count::unique	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   bool unique() const \/\/ nothrow$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:() const
boost::interprocess::detail::shared_count::use_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   long use_count() const \/\/ nothrow$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:() const
boost::interprocess::detail::shared_count::~shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   ~shared_count() \/\/ nothrow$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:()
boost::interprocess::detail::shared_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^class shared_node_pool $/;"	c	namespace:boost::interprocess::detail	inherits:detail::shared_pool_impl
boost::interprocess::detail::shared_node_pool::base_t	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^      > base_t;$/;"	t	class:boost::interprocess::detail::shared_node_pool	access:private
boost::interprocess::detail::shared_node_pool::shared_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   shared_node_pool(SegmentManager *segment_mgnr)$/;"	f	class:boost::interprocess::detail::shared_node_pool	access:public	signature:(SegmentManager *segment_mgnr)
boost::interprocess::detail::shared_pool_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^class shared_pool_impl$/;"	c	namespace:boost::interprocess::detail	inherits:private_node_allocator_t
boost::interprocess::detail::shared_pool_impl::allocate_node	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void *allocate_node()$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:()
boost::interprocess::detail::shared_pool_impl::allocate_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   multiallocation_chain allocate_nodes(const std::size_t n)$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:(const std::size_t n)
boost::interprocess::detail::shared_pool_impl::deallocate_free_blocks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_blocks()$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:()
boost::interprocess::detail::shared_pool_impl::deallocate_free_chunks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_chunks()$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:()
boost::interprocess::detail::shared_pool_impl::deallocate_node	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_node(void *ptr)$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:(void *ptr)
boost::interprocess::detail::shared_pool_impl::deallocate_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_nodes(multiallocation_chain &nodes, std::size_t num)$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:(multiallocation_chain &nodes, std::size_t num)
boost::interprocess::detail::shared_pool_impl::deallocate_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_nodes(multiallocation_chain chain)$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:(multiallocation_chain chain)
boost::interprocess::detail::shared_pool_impl::dec_ref_count	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   std::size_t dec_ref_count()$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:()
boost::interprocess::detail::shared_pool_impl::header_t	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   struct header_t : mutex_type$/;"	s	class:boost::interprocess::detail::shared_pool_impl	inherits:mutex_type	access:private
boost::interprocess::detail::shared_pool_impl::header_t::header_t	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      header_t()$/;"	f	struct:boost::interprocess::detail::shared_pool_impl::header_t	access:public	signature:()
boost::interprocess::detail::shared_pool_impl::header_t::m_usecount	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      std::size_t m_usecount;    \/\/Number of attached allocators$/;"	m	struct:boost::interprocess::detail::shared_pool_impl::header_t	access:public
boost::interprocess::detail::shared_pool_impl::inc_ref_count	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   std::size_t inc_ref_count()$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:()
boost::interprocess::detail::shared_pool_impl::multiallocation_chain	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      multiallocation_chain                     multiallocation_chain;$/;"	t	class:boost::interprocess::detail::shared_pool_impl	access:public
boost::interprocess::detail::shared_pool_impl::mutex_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename segment_manager::mutex_family::mutex_type mutex_type;$/;"	t	class:boost::interprocess::detail::shared_pool_impl	access:private
boost::interprocess::detail::shared_pool_impl::m_header	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   } m_header;$/;"	m	class:boost::interprocess::detail::shared_pool_impl	typeref:struct:boost::interprocess::detail::shared_pool_impl::header_t	access:private
boost::interprocess::detail::shared_pool_impl::purge_blocks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void purge_blocks()$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:()
boost::interprocess::detail::shared_pool_impl::purge_chunks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void purge_chunks()$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:()
boost::interprocess::detail::shared_pool_impl::segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      segment_manager                           segment_manager;$/;"	t	class:boost::interprocess::detail::shared_pool_impl	access:public
boost::interprocess::detail::shared_pool_impl::shared_pool_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   shared_pool_impl(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:(segment_manager *segment_mngr)
boost::interprocess::detail::shared_pool_impl::~shared_pool_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   ~shared_pool_impl()$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:()
boost::interprocess::detail::simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^class simple_seq_fit_impl$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^class simple_seq_fit_impl$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::simple_seq_fit_impl::algo_impl_t	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   typedef detail::memory_algorithm_common<simple_seq_fit_impl> algo_impl_t;$/;"	t	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
boost::interprocess::detail::simple_seq_fit_impl::Alignment	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   enum { Alignment      = boost::alignment_of<boost::detail::max_align>::value  };$/;"	e	enum:boost::interprocess::detail::simple_seq_fit_impl::__anon26
boost::interprocess::detail::simple_seq_fit_impl::Alignment	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const std::size_t Alignment      = detail::alignment_of<detail::max_align>::value;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	access:public
boost::interprocess::detail::simple_seq_fit_impl::allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   allocate(std::size_t nbytes)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t nbytes)
boost::interprocess::detail::simple_seq_fit_impl::allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* allocate             (std::size_t nbytes);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t nbytes)
boost::interprocess::detail::simple_seq_fit_impl::allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   allocate(std::size_t nbytes)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t nbytes)
boost::interprocess::detail::simple_seq_fit_impl::allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void* allocate             (std::size_t nbytes);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t nbytes)
boost::interprocess::detail::simple_seq_fit_impl::AllocatedCtrlBytes	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const std::size_t AllocatedCtrlBytes = BlockCtrlBytes;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
boost::interprocess::detail::simple_seq_fit_impl::AllocatedCtrlUnits	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const std::size_t AllocatedCtrlUnits = BlockCtrlUnits;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
boost::interprocess::detail::simple_seq_fit_impl::allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   allocate_aligned(std::size_t nbytes, std::size_t alignment)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t nbytes, std::size_t alignment)
boost::interprocess::detail::simple_seq_fit_impl::allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* allocate_aligned     (std::size_t nbytes, std::size_t alignment);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t nbytes, std::size_t alignment)
boost::interprocess::detail::simple_seq_fit_impl::allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   allocate_aligned(std::size_t nbytes, std::size_t alignment)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t nbytes, std::size_t alignment)
boost::interprocess::detail::simple_seq_fit_impl::allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void* allocate_aligned     (std::size_t nbytes, std::size_t alignment);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t nbytes, std::size_t alignment)
boost::interprocess::detail::simple_seq_fit_impl::allocate_many	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      allocate_many(const std::size_t *elem_sizes, std::size_t n_elements, std::size_t sizeof_element)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(const std::size_t *elem_sizes, std::size_t n_elements, std::size_t sizeof_element)
boost::interprocess::detail::simple_seq_fit_impl::allocate_many	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      allocate_many(std::size_t elem_bytes, std::size_t num_elements)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t elem_bytes, std::size_t num_elements)
boost::interprocess::detail::simple_seq_fit_impl::allocation_command	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size,std::size_t &received_size, void *reuse_ptr = 0, std::size_t backwards_multiple = 1)
boost::interprocess::detail::simple_seq_fit_impl::allocation_command	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   allocation_command  (boost::interprocess::allocation_type command,   std::size_t min_size,$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command, std::size_t min_size, std::size_t preferred_size,std::size_t &received_size, void *reuse_ptr, std::size_t backwards_multiple)
boost::interprocess::detail::simple_seq_fit_impl::allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size,std::size_t &received_size, T *reuse_ptr = 0)
boost::interprocess::detail::simple_seq_fit_impl::allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size,std::size_t &received_size, T *reuse_ptr)
boost::interprocess::detail::simple_seq_fit_impl::all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^    all_memory_deallocated()$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:()
boost::interprocess::detail::simple_seq_fit_impl::all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   bool all_memory_deallocated();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:()
boost::interprocess::detail::simple_seq_fit_impl::all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^    all_memory_deallocated()$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:()
boost::interprocess::detail::simple_seq_fit_impl::all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   bool all_memory_deallocated();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:()
boost::interprocess::detail::simple_seq_fit_impl::BlockCtrlBytes	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   enum { BlockCtrlBytes = detail::ct_rounded_size<sizeof(block_ctrl), Alignment>::value  };$/;"	e	enum:boost::interprocess::detail::simple_seq_fit_impl::__anon27
boost::interprocess::detail::simple_seq_fit_impl::BlockCtrlBytes	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const std::size_t BlockCtrlBytes = detail::ct_rounded_size<sizeof(block_ctrl), Alignment>::value;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
boost::interprocess::detail::simple_seq_fit_impl::BlockCtrlSize	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   enum { BlockCtrlSize  = BlockCtrlBytes\/Alignment   };$/;"	e	enum:boost::interprocess::detail::simple_seq_fit_impl::__anon28
boost::interprocess::detail::simple_seq_fit_impl::BlockCtrlUnits	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const std::size_t BlockCtrlUnits = BlockCtrlBytes\/Alignment;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   struct block_ctrl$/;"	s	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   class block_ctrl$/;"	c	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
boost::interprocess::detail::simple_seq_fit_impl::block_ctrl::get_addr	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      void *get_addr() const$/;"	f	struct:boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	access:public	signature:() const
boost::interprocess::detail::simple_seq_fit_impl::block_ctrl::get_block_from_addr	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      static block_ctrl *get_block_from_addr(void *addr)$/;"	f	struct:boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	access:public	signature:(void *addr)
boost::interprocess::detail::simple_seq_fit_impl::block_ctrl::get_total_bytes	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      std::size_t get_total_bytes() const$/;"	f	struct:boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	access:public	signature:() const
boost::interprocess::detail::simple_seq_fit_impl::block_ctrl::get_total_bytes	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      std::size_t get_total_bytes() const$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	access:public	signature:() const
boost::interprocess::detail::simple_seq_fit_impl::block_ctrl::get_user_bytes	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      std::size_t get_user_bytes() const$/;"	f	struct:boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	access:public	signature:() const
boost::interprocess::detail::simple_seq_fit_impl::block_ctrl::get_user_bytes	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      std::size_t get_user_bytes() const$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	access:public	signature:() const
boost::interprocess::detail::simple_seq_fit_impl::block_ctrl::m_next	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      block_ctrl_ptr m_next;$/;"	m	struct:boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	access:public
boost::interprocess::detail::simple_seq_fit_impl::block_ctrl::m_next	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      block_ctrl_ptr m_next;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	access:public
boost::interprocess::detail::simple_seq_fit_impl::block_ctrl::m_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      std::size_t    m_size;$/;"	m	struct:boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	access:public
boost::interprocess::detail::simple_seq_fit_impl::block_ctrl::m_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      std::size_t    m_size;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	access:public
boost::interprocess::detail::simple_seq_fit_impl::block_ctrl_ptr	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      pointer_to_other<void_pointer, block_ctrl>::type block_ctrl_ptr;$/;"	t	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
boost::interprocess::detail::simple_seq_fit_impl::block_ctrl_ptr	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      pointer_to_other<void_pointer, block_ctrl>::type block_ctrl_ptr;$/;"	t	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
boost::interprocess::detail::simple_seq_fit_impl::check_sanity	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^    check_sanity()$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:()
boost::interprocess::detail::simple_seq_fit_impl::check_sanity	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   bool check_sanity();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:()
boost::interprocess::detail::simple_seq_fit_impl::check_sanity	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^    check_sanity()$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:()
boost::interprocess::detail::simple_seq_fit_impl::check_sanity	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   bool check_sanity();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:()
boost::interprocess::detail::simple_seq_fit_impl::clear_free_memory	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void clear_free_memory();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:()
boost::interprocess::detail::simple_seq_fit_impl::clear_free_memory	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::clear_free_memory()$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:()
boost::interprocess::detail::simple_seq_fit_impl::deallocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void   deallocate          (void *addr);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(void *addr)
boost::interprocess::detail::simple_seq_fit_impl::deallocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^void simple_seq_fit_impl<MutexFamily, VoidPointer>::deallocate(void* addr)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(void* addr)
boost::interprocess::detail::simple_seq_fit_impl::deallocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void   deallocate          (void *addr);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(void *addr)
boost::interprocess::detail::simple_seq_fit_impl::deallocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^void simple_seq_fit_impl<MutexFamily, VoidPointer>::deallocate(void* addr)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(void* addr)
boost::interprocess::detail::simple_seq_fit_impl::deallocate_many	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   deallocate_many(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::multiallocation_chain chain)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::multiallocation_chain chain)
boost::interprocess::detail::simple_seq_fit_impl::deallocate_many	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void deallocate_many(multiallocation_chain chain);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(multiallocation_chain chain)
boost::interprocess::detail::simple_seq_fit_impl::get_free_memory	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   std::size_t get_free_memory()  const;$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:() const
boost::interprocess::detail::simple_seq_fit_impl::get_free_memory	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^inline std::size_t simple_seq_fit_impl<MutexFamily, VoidPointer>::get_free_memory()  const$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:() const
boost::interprocess::detail::simple_seq_fit_impl::get_min_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   get_min_size (std::size_t extra_hdr_bytes)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t extra_hdr_bytes)
boost::interprocess::detail::simple_seq_fit_impl::get_min_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   static std::size_t get_min_size (std::size_t extra_hdr_bytes);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t extra_hdr_bytes)
boost::interprocess::detail::simple_seq_fit_impl::get_min_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   get_min_size (std::size_t extra_hdr_bytes)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t extra_hdr_bytes)
boost::interprocess::detail::simple_seq_fit_impl::get_min_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static std::size_t get_min_size (std::size_t extra_hdr_bytes);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t extra_hdr_bytes)
boost::interprocess::detail::simple_seq_fit_impl::get_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   std::size_t get_size()  const;$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:() const
boost::interprocess::detail::simple_seq_fit_impl::get_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^inline std::size_t simple_seq_fit_impl<MutexFamily, VoidPointer>::get_size()  const$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:() const
boost::interprocess::detail::simple_seq_fit_impl::get_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   std::size_t get_size()  const;$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:() const
boost::interprocess::detail::simple_seq_fit_impl::get_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^inline std::size_t simple_seq_fit_impl<MutexFamily, VoidPointer>::get_size()  const$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:() const
boost::interprocess::detail::simple_seq_fit_impl::grow	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void grow(std::size_t extra_size);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t extra_size)
boost::interprocess::detail::simple_seq_fit_impl::grow	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::grow(std::size_t extra_size)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t extra_size)
boost::interprocess::detail::simple_seq_fit_impl::grow	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void grow(std::size_t extra_size);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t extra_size)
boost::interprocess::detail::simple_seq_fit_impl::grow	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::grow(std::size_t extra_size)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t extra_size)
boost::interprocess::detail::simple_seq_fit_impl::header_t	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   struct header_t : public interprocess_mutex$/;"	s	class:boost::interprocess::detail::simple_seq_fit_impl	inherits:interprocess_mutex	access:private
boost::interprocess::detail::simple_seq_fit_impl::header_t	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   struct header_t : public interprocess_mutex$/;"	s	class:boost::interprocess::detail::simple_seq_fit_impl	inherits:interprocess_mutex	access:private
boost::interprocess::detail::simple_seq_fit_impl::header_t::m_allocated	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      std::size_t       m_allocated;$/;"	m	struct:boost::interprocess::detail::simple_seq_fit_impl::header_t	access:public
boost::interprocess::detail::simple_seq_fit_impl::header_t::m_allocated	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      std::size_t       m_allocated;$/;"	m	struct:boost::interprocess::detail::simple_seq_fit_impl::header_t	access:public
boost::interprocess::detail::simple_seq_fit_impl::header_t::m_extra_hdr_bytes	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      std::size_t       m_extra_hdr_bytes;$/;"	m	struct:boost::interprocess::detail::simple_seq_fit_impl::header_t	access:public
boost::interprocess::detail::simple_seq_fit_impl::header_t::m_root	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      block_ctrl        m_root;$/;"	m	struct:boost::interprocess::detail::simple_seq_fit_impl::header_t	access:public
boost::interprocess::detail::simple_seq_fit_impl::header_t::m_root	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      block_ctrl        m_root;$/;"	m	struct:boost::interprocess::detail::simple_seq_fit_impl::header_t	access:public
boost::interprocess::detail::simple_seq_fit_impl::header_t::m_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      std::size_t       m_size;$/;"	m	struct:boost::interprocess::detail::simple_seq_fit_impl::header_t	access:public
boost::interprocess::detail::simple_seq_fit_impl::header_t::m_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      std::size_t       m_size;$/;"	m	struct:boost::interprocess::detail::simple_seq_fit_impl::header_t	access:public
boost::interprocess::detail::simple_seq_fit_impl::interprocess_mutex	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   typedef typename MutexFamily::mutex_type        interprocess_mutex;$/;"	t	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
boost::interprocess::detail::simple_seq_fit_impl::interprocess_mutex	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   typedef typename MutexFamily::mutex_type        interprocess_mutex;$/;"	t	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
boost::interprocess::detail::simple_seq_fit_impl::MinBlockSize	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   enum { MinBlockSize   = BlockCtrlSize + Alignment  };$/;"	e	enum:boost::interprocess::detail::simple_seq_fit_impl::__anon29
boost::interprocess::detail::simple_seq_fit_impl::MinBlockSize	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const std::size_t MinBlockSize   = MinBlockUnits*Alignment;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
boost::interprocess::detail::simple_seq_fit_impl::MinBlockUnits	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const std::size_t MinBlockUnits  = BlockCtrlUnits;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
boost::interprocess::detail::simple_seq_fit_impl::multiallocation_chain	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      basic_multiallocation_chain<VoidPointer>     multiallocation_chain;$/;"	t	class:boost::interprocess::detail::simple_seq_fit_impl	access:public
boost::interprocess::detail::simple_seq_fit_impl::multi_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   multi_allocate(std::size_t nbytes)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t nbytes)
boost::interprocess::detail::simple_seq_fit_impl::multi_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* multi_allocate(std::size_t nbytes);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t nbytes)
boost::interprocess::detail::simple_seq_fit_impl::mutex_family	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   typedef MutexFamily        mutex_family;$/;"	t	class:boost::interprocess::detail::simple_seq_fit_impl	access:public
boost::interprocess::detail::simple_seq_fit_impl::mutex_family	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   typedef MutexFamily        mutex_family;$/;"	t	class:boost::interprocess::detail::simple_seq_fit_impl	access:public
boost::interprocess::detail::simple_seq_fit_impl::m_header	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   }  m_header;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	typeref:struct:boost::interprocess::detail::simple_seq_fit_impl::header_t	access:private
boost::interprocess::detail::simple_seq_fit_impl::m_header	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   }  m_header;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	typeref:struct:boost::interprocess::detail::simple_seq_fit_impl::header_t	access:private
boost::interprocess::detail::simple_seq_fit_impl::operator =	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl &operator=(const simple_seq_fit_impl &);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(const simple_seq_fit_impl &)
boost::interprocess::detail::simple_seq_fit_impl::operator =	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl &operator=(const simple_seq_fit_impl &);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(const simple_seq_fit_impl &)
boost::interprocess::detail::simple_seq_fit_impl::PayloadPerAllocation	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   enum {   PayloadPerAllocation = BlockCtrlBytes  };$/;"	e	enum:boost::interprocess::detail::simple_seq_fit_impl::__anon30
boost::interprocess::detail::simple_seq_fit_impl::PayloadPerAllocation	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const std::size_t PayloadPerAllocation = BlockCtrlBytes;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	access:public
boost::interprocess::detail::simple_seq_fit_impl::priv_add_segment	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void priv_add_segment(void *addr, std::size_t size);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(void *addr, std::size_t size)
boost::interprocess::detail::simple_seq_fit_impl::priv_add_segment	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_add_segment(void *addr, std::size_t size)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(void *addr, std::size_t size)
boost::interprocess::detail::simple_seq_fit_impl::priv_add_segment	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void priv_add_segment(void *addr, std::size_t size);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(void *addr, std::size_t size)
boost::interprocess::detail::simple_seq_fit_impl::priv_add_segment	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_add_segment(void *addr, std::size_t size)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(void *addr, std::size_t size)
boost::interprocess::detail::simple_seq_fit_impl::priv_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   priv_allocate(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command ,std::size_t limit_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr)
boost::interprocess::detail::simple_seq_fit_impl::priv_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   std::pair<void *, bool> priv_allocate(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(boost::interprocess::allocation_type command ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr = 0)
boost::interprocess::detail::simple_seq_fit_impl::priv_allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_allocate(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command ,std::size_t limit_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr)
boost::interprocess::detail::simple_seq_fit_impl::priv_allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   std::pair<void *, bool> priv_allocate(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(boost::interprocess::allocation_type command ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr = 0)
boost::interprocess::detail::simple_seq_fit_impl::priv_allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   priv_allocate_aligned(std::size_t nbytes, std::size_t alignment)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t nbytes, std::size_t alignment)
boost::interprocess::detail::simple_seq_fit_impl::priv_allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* priv_allocate_aligned     (std::size_t nbytes, std::size_t alignment);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(std::size_t nbytes, std::size_t alignment)
boost::interprocess::detail::simple_seq_fit_impl::priv_allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_allocation_command (boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size, std::size_t &received_size, void *reuse_ptr, std::size_t sizeof_object)
boost::interprocess::detail::simple_seq_fit_impl::priv_allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   std::pair<void *, bool> priv_allocation_command(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(boost::interprocess::allocation_type command ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr ,std::size_t sizeof_object)
boost::interprocess::detail::simple_seq_fit_impl::priv_block_end_offset	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   ::priv_block_end_offset() const$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:() const
boost::interprocess::detail::simple_seq_fit_impl::priv_block_end_offset	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   std::size_t priv_block_end_offset() const;$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:() const
boost::interprocess::detail::simple_seq_fit_impl::priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* priv_check_and_allocate(std::size_t units$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(std::size_t units ,block_ctrl* prev ,block_ctrl* block ,std::size_t &received_size)
boost::interprocess::detail::simple_seq_fit_impl::priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^void* simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_check_and_allocate$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t nunits ,typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl* prev ,typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl* block ,std::size_t &received_size)
boost::interprocess::detail::simple_seq_fit_impl::priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void* priv_check_and_allocate(std::size_t units$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(std::size_t units ,block_ctrl* prev ,block_ctrl* block ,std::size_t &received_size)
boost::interprocess::detail::simple_seq_fit_impl::priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^void* simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_check_and_allocate$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t nunits ,typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl* prev ,typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl* block ,std::size_t &received_size)
boost::interprocess::detail::simple_seq_fit_impl::priv_deallocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void priv_deallocate(void *addr);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(void *addr)
boost::interprocess::detail::simple_seq_fit_impl::priv_deallocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^void simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_deallocate(void* addr)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(void* addr)
boost::interprocess::detail::simple_seq_fit_impl::priv_deallocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void priv_deallocate(void *addr);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(void *addr)
boost::interprocess::detail::simple_seq_fit_impl::priv_deallocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^void simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_deallocate(void* addr)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(void* addr)
boost::interprocess::detail::simple_seq_fit_impl::priv_expand	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   bool priv_expand(void *ptr$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(void *ptr ,std::size_t min_size, std::size_t preferred_size ,std::size_t &received_size)
boost::interprocess::detail::simple_seq_fit_impl::priv_expand	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   priv_expand (void *ptr$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(void *ptr ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size)
boost::interprocess::detail::simple_seq_fit_impl::priv_expand	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   bool priv_expand(void *ptr$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(void *ptr ,std::size_t min_size, std::size_t preferred_size ,std::size_t &received_size)
boost::interprocess::detail::simple_seq_fit_impl::priv_expand	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_expand (void *ptr$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(void *ptr ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size)
boost::interprocess::detail::simple_seq_fit_impl::priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr ,bool only_preferred_backwards)
boost::interprocess::detail::simple_seq_fit_impl::priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(boost::interprocess::allocation_type command ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr ,bool only_preferred_backwards)
boost::interprocess::detail::simple_seq_fit_impl::priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr ,bool only_preferred_backwards)
boost::interprocess::detail::simple_seq_fit_impl::priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void* priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(boost::interprocess::allocation_type command ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr ,bool only_preferred_backwards)
boost::interprocess::detail::simple_seq_fit_impl::priv_first_block_offset	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   ::priv_first_block_offset(const void *this_ptr, std::size_t extra_hdr_bytes)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(const void *this_ptr, std::size_t extra_hdr_bytes)
boost::interprocess::detail::simple_seq_fit_impl::priv_first_block_offset	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static std::size_t priv_first_block_offset(const void *this_ptr, std::size_t extra_hdr_bytes);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(const void *this_ptr, std::size_t extra_hdr_bytes)
boost::interprocess::detail::simple_seq_fit_impl::priv_get_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_get_block(const void *ptr)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(const void *ptr)
boost::interprocess::detail::simple_seq_fit_impl::priv_get_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static block_ctrl *priv_get_block(const void *ptr);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(const void *ptr)
boost::interprocess::detail::simple_seq_fit_impl::priv_get_total_units	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_get_total_units(std::size_t userbytes)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t userbytes)
boost::interprocess::detail::simple_seq_fit_impl::priv_get_total_units	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static std::size_t priv_get_total_units(std::size_t userbytes);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(std::size_t userbytes)
boost::interprocess::detail::simple_seq_fit_impl::priv_get_user_buffer	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      priv_get_user_buffer(const typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *block)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(const typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *block)
boost::interprocess::detail::simple_seq_fit_impl::priv_get_user_buffer	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static void *priv_get_user_buffer(const block_ctrl *block);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(const block_ctrl *block)
boost::interprocess::detail::simple_seq_fit_impl::priv_is_allocated_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   bool priv_is_allocated_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(block_ctrl *ptr)
boost::interprocess::detail::simple_seq_fit_impl::priv_is_allocated_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^bool simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_is_allocated_block$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *block)
boost::interprocess::detail::simple_seq_fit_impl::priv_mark_new_allocated_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_mark_new_allocated_block(block_ctrl *new_block)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(block_ctrl *new_block)
boost::interprocess::detail::simple_seq_fit_impl::priv_mark_new_allocated_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void priv_mark_new_allocated_block(block_ctrl *block);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(block_ctrl *block)
boost::interprocess::detail::simple_seq_fit_impl::priv_next_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      priv_next_block_if_free$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *ptr)
boost::interprocess::detail::simple_seq_fit_impl::priv_next_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   block_ctrl *priv_next_block_if_free(block_ctrl *ptr);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(block_ctrl *ptr)
boost::interprocess::detail::simple_seq_fit_impl::priv_next_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      priv_next_block_if_free$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *ptr)
boost::interprocess::detail::simple_seq_fit_impl::priv_next_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   block_ctrl *priv_next_block_if_free(block_ctrl *ptr);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(block_ctrl *ptr)
boost::interprocess::detail::simple_seq_fit_impl::priv_prev_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      priv_prev_block_if_free$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *ptr)
boost::interprocess::detail::simple_seq_fit_impl::priv_prev_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   std::pair<block_ctrl*, block_ctrl*>priv_prev_block_if_free(block_ctrl *ptr);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(block_ctrl *ptr)
boost::interprocess::detail::simple_seq_fit_impl::priv_prev_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      priv_prev_block_if_free$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *ptr)
boost::interprocess::detail::simple_seq_fit_impl::priv_prev_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   std::pair<block_ctrl*, block_ctrl*>priv_prev_block_if_free(block_ctrl *ptr);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(block_ctrl *ptr)
boost::interprocess::detail::simple_seq_fit_impl::priv_shrink	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   bool priv_shrink(void *ptr$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(void *ptr ,std::size_t max_size, std::size_t preferred_size ,std::size_t &received_size)
boost::interprocess::detail::simple_seq_fit_impl::priv_shrink	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   priv_shrink (void *ptr$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(void *ptr ,std::size_t max_size ,std::size_t preferred_size ,std::size_t &received_size)
boost::interprocess::detail::simple_seq_fit_impl::raw_allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      raw_allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size,std::size_t &received_size, void *reuse_ptr = 0, std::size_t sizeof_object = 1)
boost::interprocess::detail::simple_seq_fit_impl::raw_allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   raw_allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_objects,$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command, std::size_t limit_objects, std::size_t preferred_objects,std::size_t &received_objects, void *reuse_ptr, std::size_t sizeof_object)
boost::interprocess::detail::simple_seq_fit_impl::shrink_to_fit	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void shrink_to_fit();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:()
boost::interprocess::detail::simple_seq_fit_impl::shrink_to_fit	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^void simple_seq_fit_impl<MutexFamily, VoidPointer>::shrink_to_fit()$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:()
boost::interprocess::detail::simple_seq_fit_impl::simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl           (std::size_t size, std::size_t extra_hdr_bytes);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t size, std::size_t extra_hdr_bytes)
boost::interprocess::detail::simple_seq_fit_impl::simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:()
boost::interprocess::detail::simple_seq_fit_impl::simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl(const simple_seq_fit_impl &);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(const simple_seq_fit_impl &)
boost::interprocess::detail::simple_seq_fit_impl::simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl(std::size_t size, std::size_t extra_hdr_bytes)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t size, std::size_t extra_hdr_bytes)
boost::interprocess::detail::simple_seq_fit_impl::simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl           (std::size_t size, std::size_t extra_hdr_bytes);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t size, std::size_t extra_hdr_bytes)
boost::interprocess::detail::simple_seq_fit_impl::simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:()
boost::interprocess::detail::simple_seq_fit_impl::simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl(const simple_seq_fit_impl &);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(const simple_seq_fit_impl &)
boost::interprocess::detail::simple_seq_fit_impl::simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl(std::size_t size, std::size_t extra_hdr_bytes)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t size, std::size_t extra_hdr_bytes)
boost::interprocess::detail::simple_seq_fit_impl::size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   size(void *ptr) const$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(void *ptr) const
boost::interprocess::detail::simple_seq_fit_impl::size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   std::size_t size(void *ptr) const;$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(void *ptr) const
boost::interprocess::detail::simple_seq_fit_impl::size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   size(const void *ptr) const$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(const void *ptr) const
boost::interprocess::detail::simple_seq_fit_impl::size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   std::size_t size(const void *ptr) const;$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(const void *ptr) const
boost::interprocess::detail::simple_seq_fit_impl::UsableByPreviousChunk	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const std::size_t UsableByPreviousChunk = 0;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
boost::interprocess::detail::simple_seq_fit_impl::void_pointer	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   typedef VoidPointer        void_pointer;$/;"	t	class:boost::interprocess::detail::simple_seq_fit_impl	access:public
boost::interprocess::detail::simple_seq_fit_impl::void_pointer	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   typedef VoidPointer        void_pointer;$/;"	t	class:boost::interprocess::detail::simple_seq_fit_impl	access:public
boost::interprocess::detail::simple_seq_fit_impl::zero_free_memory	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void zero_free_memory();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:()
boost::interprocess::detail::simple_seq_fit_impl::zero_free_memory	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::zero_free_memory()$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:()
boost::interprocess::detail::simple_seq_fit_impl::~simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   ~simple_seq_fit_impl();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:()
boost::interprocess::detail::simple_seq_fit_impl::~simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^inline simple_seq_fit_impl<MutexFamily, VoidPointer>::~simple_seq_fit_impl()$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:()
boost::interprocess::detail::simple_seq_fit_impl::~simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   ~simple_seq_fit_impl();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:()
boost::interprocess::detail::simple_seq_fit_impl::~simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^inline simple_seq_fit_impl<MutexFamily, VoidPointer>::~simple_seq_fit_impl()$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:()
boost::interprocess::detail::smart_ptr_type	/usr/include/boost/interprocess/detail/utilities.hpp	/^struct smart_ptr_type$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::smart_ptr_type	/usr/include/boost/interprocess/detail/utilities.hpp	/^struct smart_ptr_type<T*>$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::smart_ptr_type::get	/usr/include/boost/interprocess/detail/utilities.hpp	/^   static pointer get (const SmartPtr &smartptr)$/;"	f	struct:boost::interprocess::detail::smart_ptr_type	access:public	signature:(const SmartPtr &smartptr)
boost::interprocess::detail::smart_ptr_type::get	/usr/include/boost/interprocess/detail/utilities.hpp	/^   static pointer get (pointer ptr)$/;"	f	struct:boost::interprocess::detail::smart_ptr_type	access:public	signature:(pointer ptr)
boost::interprocess::detail::smart_ptr_type::pointer	/usr/include/boost/interprocess/detail/utilities.hpp	/^   typedef value_type *pointer;$/;"	t	struct:boost::interprocess::detail::smart_ptr_type	access:public
boost::interprocess::detail::smart_ptr_type::value_type	/usr/include/boost/interprocess/detail/utilities.hpp	/^   typedef T value_type;$/;"	t	struct:boost::interprocess::detail::smart_ptr_type	access:public
boost::interprocess::detail::smart_ptr_type::value_type	/usr/include/boost/interprocess/detail/utilities.hpp	/^   typedef typename SmartPtr::value_type value_type;$/;"	t	struct:boost::interprocess::detail::smart_ptr_type	access:public
boost::interprocess::detail::sp_counted_base	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^class sp_counted_base$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::sp_counted_base::add_ref_copy	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    void add_ref_copy()$/;"	f	class:boost::interprocess::detail::sp_counted_base	access:public	signature:()
boost::interprocess::detail::sp_counted_base::add_ref_lock	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    bool add_ref_lock() \/\/ true on success$/;"	f	class:boost::interprocess::detail::sp_counted_base	access:public	signature:()
boost::interprocess::detail::sp_counted_base::operator =	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    sp_counted_base & operator= ( sp_counted_base const & );$/;"	p	class:boost::interprocess::detail::sp_counted_base	access:private	signature:( sp_counted_base const & )
boost::interprocess::detail::sp_counted_base::ref_release	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^   bool ref_release() \/\/ nothrow$/;"	f	class:boost::interprocess::detail::sp_counted_base	access:public	signature:()
boost::interprocess::detail::sp_counted_base::sp_counted_base	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    sp_counted_base( sp_counted_base const & );$/;"	p	class:boost::interprocess::detail::sp_counted_base	access:private	signature:( sp_counted_base const & )
boost::interprocess::detail::sp_counted_base::sp_counted_base	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    sp_counted_base(): use_count_( 1 ), weak_count_( 1 )$/;"	f	class:boost::interprocess::detail::sp_counted_base	access:public	signature:()
boost::interprocess::detail::sp_counted_base::use_count	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^   long use_count() const \/\/ nothrow$/;"	f	class:boost::interprocess::detail::sp_counted_base	access:public	signature:() const
boost::interprocess::detail::sp_counted_base::use_count_	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    boost::uint32_t use_count_;        \/\/ #shared$/;"	m	class:boost::interprocess::detail::sp_counted_base	access:private
boost::interprocess::detail::sp_counted_base::weak_add_ref	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^   void weak_add_ref() \/\/ nothrow$/;"	f	class:boost::interprocess::detail::sp_counted_base	access:public	signature:()
boost::interprocess::detail::sp_counted_base::weak_count_	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    boost::uint32_t weak_count_;       \/\/ #weak + (#shared != 0)$/;"	m	class:boost::interprocess::detail::sp_counted_base	access:private
boost::interprocess::detail::sp_counted_base::weak_release	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^   bool weak_release() \/\/ nothrow$/;"	f	class:boost::interprocess::detail::sp_counted_base	access:public	signature:()
boost::interprocess::detail::sp_counted_base::~sp_counted_base	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    ~sp_counted_base() \/\/ nothrow$/;"	f	class:boost::interprocess::detail::sp_counted_base	access:public	signature:()
boost::interprocess::detail::sp_counted_impl_pd	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^class sp_counted_impl_pd $/;"	c	namespace:boost::interprocess::detail	inherits:sp_counted_base,A::,rebind::other,D
boost::interprocess::detail::sp_counted_impl_pd::const_allocator_pointer	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^            <typename A::pointer, const A>::type   const_allocator_pointer;$/;"	t	class:boost::interprocess::detail::sp_counted_impl_pd	access:private
boost::interprocess::detail::sp_counted_impl_pd::const_deleter_pointer	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^            <typename A::pointer, const D>::type   const_deleter_pointer;$/;"	t	class:boost::interprocess::detail::sp_counted_impl_pd	access:private
boost::interprocess::detail::sp_counted_impl_pd::const_this_allocator	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^      <const this_type>::other               const_this_allocator;$/;"	t	class:boost::interprocess::detail::sp_counted_impl_pd	access:private
boost::interprocess::detail::sp_counted_impl_pd::destroy	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void destroy() \/\/ nothrow$/;"	f	class:boost::interprocess::detail::sp_counted_impl_pd	access:public	signature:()
boost::interprocess::detail::sp_counted_impl_pd::dispose	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void dispose() \/\/ nothrow$/;"	f	class:boost::interprocess::detail::sp_counted_impl_pd	access:public	signature:()
boost::interprocess::detail::sp_counted_impl_pd::get_allocator	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   const_allocator_pointer get_allocator() const$/;"	f	class:boost::interprocess::detail::sp_counted_impl_pd	access:public	signature:() const
boost::interprocess::detail::sp_counted_impl_pd::get_deleter	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   const_deleter_pointer get_deleter() const$/;"	f	class:boost::interprocess::detail::sp_counted_impl_pd	access:public	signature:() const
boost::interprocess::detail::sp_counted_impl_pd::m_ptr	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   pointer m_ptr;$/;"	m	class:boost::interprocess::detail::sp_counted_impl_pd	access:private
boost::interprocess::detail::sp_counted_impl_pd::operator =	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   sp_counted_impl_pd & operator= ( sp_counted_impl_pd const & );$/;"	p	class:boost::interprocess::detail::sp_counted_impl_pd	access:private	signature:( sp_counted_impl_pd const & )
boost::interprocess::detail::sp_counted_impl_pd::pointer	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef typename D::pointer   pointer;$/;"	t	class:boost::interprocess::detail::sp_counted_impl_pd	access:private
boost::interprocess::detail::sp_counted_impl_pd::release	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void release() \/\/ nothrow$/;"	f	class:boost::interprocess::detail::sp_counted_impl_pd	access:public	signature:()
boost::interprocess::detail::sp_counted_impl_pd::sp_counted_impl_pd	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   sp_counted_impl_pd( sp_counted_impl_pd const & );$/;"	p	class:boost::interprocess::detail::sp_counted_impl_pd	access:private	signature:( sp_counted_impl_pd const & )
boost::interprocess::detail::sp_counted_impl_pd::sp_counted_impl_pd	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   sp_counted_impl_pd(const Ptr & p, const A &a, const D &d )$/;"	f	class:boost::interprocess::detail::sp_counted_impl_pd	access:public	signature:(const Ptr & p, const A &a, const D &d )
boost::interprocess::detail::sp_counted_impl_pd::this_allocator	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^      <this_type>::other                     this_allocator;$/;"	t	class:boost::interprocess::detail::sp_counted_impl_pd	access:private
boost::interprocess::detail::sp_counted_impl_pd::this_pointer	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef typename this_allocator::pointer  this_pointer;$/;"	t	class:boost::interprocess::detail::sp_counted_impl_pd	access:private
boost::interprocess::detail::sp_counted_impl_pd::this_type	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef sp_counted_impl_pd<A, D>          this_type;$/;"	t	class:boost::interprocess::detail::sp_counted_impl_pd	access:private
boost::interprocess::detail::sp_counted_impl_pd::weak_release	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void weak_release() \/\/ nothrow$/;"	f	class:boost::interprocess::detail::sp_counted_impl_pd	access:public	signature:()
boost::interprocess::detail::sp_enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^inline void sp_enable_shared_from_this$/;"	f	namespace:boost::interprocess::detail	signature:(shared_count<T, VoidAllocator, Deleter> const & pn ,enable_shared_from_this<T, VoidAllocator, Deleter> *pe ,T *ptr)
boost::interprocess::detail::sp_enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^inline void sp_enable_shared_from_this(shared_count<T, VoidAllocator, Deleter> const &, ...)$/;"	f	namespace:boost::interprocess::detail	signature:(shared_count<T, VoidAllocator, Deleter> const &, ...)
boost::interprocess::detail::static_cast_tag	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^struct static_cast_tag {};$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::swap	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^inline void swap(managed_open_or_create_impl<DeviceAbstraction> &x$/;"	f	namespace:boost::interprocess::detail	signature:(managed_open_or_create_impl<DeviceAbstraction> &x ,managed_open_or_create_impl<DeviceAbstraction> &y)
boost::interprocess::detail::systemwide_thread_id_copy	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline void systemwide_thread_id_copy$/;"	f	namespace:boost::interprocess::detail	signature:(const volatile OS_systemwide_thread_id_t &from, volatile OS_systemwide_thread_id_t &to)
boost::interprocess::detail::thread_yield	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline void thread_yield()$/;"	f	namespace:boost::interprocess::detail	signature:()
boost::interprocess::detail::tie_forward	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^tuple<Values&&...> tie_forward(Values&&... values)$/;"	f	namespace:boost::interprocess::detail	signature:(Values&&.... values)
boost::interprocess::detail::tmp_filename	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void tmp_filename(const char *filename, std::string &tmp_name)$/;"	f	namespace:boost::interprocess::detail	signature:(const char *filename, std::string &tmp_name)
boost::interprocess::detail::true_	/usr/include/boost/interprocess/detail/mpl.hpp	/^typedef bool_<true>        true_;$/;"	t	namespace:boost::interprocess::detail
boost::interprocess::detail::true_type	/usr/include/boost/interprocess/detail/mpl.hpp	/^typedef true_  true_type;$/;"	t	namespace:boost::interprocess::detail
boost::interprocess::detail::truncate_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool truncate_file (file_handle_t hnd, std::size_t size)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd, std::size_t size)
boost::interprocess::detail::try_acquire_file_lock	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool try_acquire_file_lock(file_handle_t hnd, bool &acquired)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd, bool &acquired)
boost::interprocess::detail::try_acquire_file_lock_sharable	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool try_acquire_file_lock_sharable(file_handle_t hnd, bool &acquired)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd, bool &acquired)
boost::interprocess::detail::tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^class tuple<Head, Tail...>$/;"	c	namespace:boost::interprocess::detail	inherits:tuple
boost::interprocess::detail::tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^template<> class tuple<>$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::tuple::head	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typename add_reference<const Head>::type head() const {  return m_head; }$/;"	f	class:boost::interprocess::detail::tuple	access:public	signature:() const
boost::interprocess::detail::tuple::head	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typename add_reference<Head>::type head()             {  return m_head; }$/;"	f	class:boost::interprocess::detail::tuple	access:public	signature:()
boost::interprocess::detail::tuple::inherited	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef tuple<Tail...> inherited;$/;"	t	class:boost::interprocess::detail::tuple	access:private
boost::interprocess::detail::tuple::m_head	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   Head m_head;$/;"	m	class:boost::interprocess::detail::tuple	access:protected
boost::interprocess::detail::tuple::operator =	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   tuple& operator=(const tuple<VValues...>& other)$/;"	f	class:boost::interprocess::detail::tuple	access:public	signature:(const tuple<VValues...>& other)
boost::interprocess::detail::tuple::tail	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   const inherited& tail() const { return *this; }$/;"	f	class:boost::interprocess::detail::tuple	access:public	signature:() const
boost::interprocess::detail::tuple::tail	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   inherited& tail()             { return *this; }$/;"	f	class:boost::interprocess::detail::tuple	access:public	signature:()
boost::interprocess::detail::tuple::tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   tuple() { }$/;"	f	class:boost::interprocess::detail::tuple	access:public	signature:()
boost::interprocess::detail::tuple::tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   tuple(const tuple<VValues...>& other)$/;"	f	class:boost::interprocess::detail::tuple	access:public	signature:(const tuple<VValues...>& other)
boost::interprocess::detail::tuple::tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   tuple(typename add_const_reference<Head>::type v,$/;"	f	class:boost::interprocess::detail::tuple	access:public	signature:(typename add_const_reference<Head>::type v, typename add_const_reference<Tail>::type... vtail)
boost::interprocess::detail::tuple_element	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^struct tuple_element<0, tuple<Head, Tail...> >$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::tuple_element	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^struct tuple_element<I, tuple<Head, Tail...> >$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::tuple_element::type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef Head type;$/;"	t	struct:boost::interprocess::detail::tuple_element	access:public
boost::interprocess::detail::tuple_element::type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename tuple_element<I-1, tuple<Tail...> >::type type;$/;"	t	struct:boost::interprocess::detail::tuple_element	access:public
boost::interprocess::detail::two	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct two {char _[2];};$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::two::_	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct two {char _[2];};$/;"	m	struct:boost::interprocess::detail::two	access:public
boost::interprocess::detail::unique_instance_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^typedef instance_t<unique_type>     unique_instance_t;$/;"	t	namespace:boost::interprocess::detail
boost::interprocess::detail::unique_ptr_error	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^struct unique_ptr_error<const unique_ptr<T, D> >$/;"	s	namespace:boost::interprocess::detail
boost::interprocess::detail::unique_ptr_error::type	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^    typedef unique_ptr<T, D> type;$/;"	t	struct:boost::interprocess::detail::unique_ptr_error	access:public
boost::interprocess::detail::upper_power_of_2	/usr/include/boost/interprocess/detail/math_functions.hpp	/^inline Integer upper_power_of_2(const Integer & A)$/;"	f	namespace:boost::interprocess::detail	signature:(const Integer & A)
boost::interprocess::detail::weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^class weak_count$/;"	c	namespace:boost::interprocess::detail
boost::interprocess::detail::weak_count::counted_base_ptr	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^      <typename VoidAllocator::pointer, sp_counted_base>::type counted_base_ptr;$/;"	t	class:boost::interprocess::detail::weak_count	access:private
boost::interprocess::detail::weak_count::counted_impl	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   typedef sp_counted_impl_pd<VoidAllocator, Deleter>    counted_impl;$/;"	t	class:boost::interprocess::detail::weak_count	access:private
boost::interprocess::detail::weak_count::counted_impl_ptr	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^      <typename VoidAllocator::pointer, counted_impl>::type    counted_impl_ptr;$/;"	t	class:boost::interprocess::detail::weak_count	access:private
boost::interprocess::detail::weak_count::internal_equal	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   bool internal_equal (weak_count<T2, VoidAllocator2, Deleter2> const & other) const$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:(weak_count<T2, VoidAllocator2, Deleter2> const & other) const
boost::interprocess::detail::weak_count::internal_less	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   bool internal_less (weak_count<T2, VoidAllocator2, Deleter2> const & other) const$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:(weak_count<T2, VoidAllocator2, Deleter2> const & other) const
boost::interprocess::detail::weak_count::m_pi	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   counted_impl_ptr  m_pi;$/;"	m	class:boost::interprocess::detail::weak_count	access:private
boost::interprocess::detail::weak_count::m_px	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   pointer           m_px;$/;"	m	class:boost::interprocess::detail::weak_count	access:private
boost::interprocess::detail::weak_count::operator =	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count & operator= (shared_count<Y, VoidAllocator, Deleter> const & r) \/\/ nothrow$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:(shared_count<Y, VoidAllocator, Deleter> const & r)
boost::interprocess::detail::weak_count::operator =	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count & operator= (weak_count const & r) \/\/ nothrow$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:(weak_count const & r)
boost::interprocess::detail::weak_count::operator =	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count & operator= (weak_count<Y, VoidAllocator, Deleter> const& r) \/\/ nothrow$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:(weak_count<Y, VoidAllocator, Deleter> const& r)
boost::interprocess::detail::weak_count::pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^      <typename VoidAllocator::pointer, T>::type            pointer;$/;"	t	class:boost::interprocess::detail::weak_count	access:public
boost::interprocess::detail::weak_count::set_pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   void set_pointer(const pointer &ptr)$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:(const pointer &ptr)
boost::interprocess::detail::weak_count::swap	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   void swap(weak_count & r) \/\/ nothrow$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:(weak_count & r)
boost::interprocess::detail::weak_count::use_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   long use_count() const \/\/ nothrow$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:() const
boost::interprocess::detail::weak_count::weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   explicit weak_count(shared_count<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:(shared_count<Y, VoidAllocator, Deleter> const & r)
boost::interprocess::detail::weak_count::weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count(): m_px(0), m_pi(0) \/\/ nothrow$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:()
boost::interprocess::detail::weak_count::weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count(weak_count const & r)$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:(weak_count const & r)
boost::interprocess::detail::weak_count::weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count(weak_count<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:(weak_count<Y, VoidAllocator, Deleter> const & r)
boost::interprocess::detail::weak_count::~weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   ~weak_count() \/\/ nothrow$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:()
boost::interprocess::detail::write_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool write_file(file_handle_t hnd, const void *data, std::size_t numdata)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd, const void *data, std::size_t numdata)
boost::interprocess::detail::yes_type	/usr/include/boost/interprocess/detail/mpl.hpp	/^typedef char yes_type;$/;"	t	namespace:boost::interprocess::detail
boost::interprocess::detail_really_deep_namespace	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^namespace detail_really_deep_namespace {$/;"	n	namespace:boost::interprocess
boost::interprocess::detail_really_deep_namespace::dummy	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct dummy$/;"	s	namespace:boost::interprocess::detail_really_deep_namespace
boost::interprocess::detail_really_deep_namespace::dummy::dummy	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   dummy()$/;"	f	struct:boost::interprocess::detail_really_deep_namespace::dummy	access:public	signature:()
boost::interprocess::dynamic_pointer_cast	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^boost::interprocess::intersegment_ptr<T> dynamic_pointer_cast(const boost::interprocess::intersegment_ptr<U> &r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::intersegment_ptr<U> &r)
boost::interprocess::dynamic_pointer_cast	/usr/include/boost/interprocess/offset_ptr.hpp	/^   dynamic_pointer_cast(boost::interprocess::offset_ptr<U> const & r)$/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::offset_ptr<U> const & r)
boost::interprocess::dynamic_pointer_cast	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^shared_ptr<T, VoidAllocator, Deleter> dynamic_pointer_cast(shared_ptr<U, VoidAllocator, Deleter> const & r)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<U, VoidAllocator, Deleter> const & r)
boost::interprocess::ec_table	/usr/include/boost/interprocess/errors.hpp	/^static const ec_xlate ec_table[] =$/;"	m	namespace:boost::interprocess
boost::interprocess::ec_xlate	/usr/include/boost/interprocess/errors.hpp	/^struct ec_xlate$/;"	s	namespace:boost::interprocess
boost::interprocess::ec_xlate::ec	/usr/include/boost/interprocess/errors.hpp	/^   error_code_t   ec; $/;"	m	struct:boost::interprocess::ec_xlate	access:public
boost::interprocess::ec_xlate::sys_ec	/usr/include/boost/interprocess/errors.hpp	/^   native_error_t sys_ec;$/;"	m	struct:boost::interprocess::ec_xlate	access:public
boost::interprocess::enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^class enable_shared_from_this$/;"	c	namespace:boost::interprocess
boost::interprocess::enable_shared_from_this::element_type	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   typedef T element_type;$/;"	t	class:boost::interprocess::enable_shared_from_this	access:public
boost::interprocess::enable_shared_from_this::enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   enable_shared_from_this()$/;"	f	class:boost::interprocess::enable_shared_from_this	access:protected	signature:()
boost::interprocess::enable_shared_from_this::enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   enable_shared_from_this(enable_shared_from_this const &)$/;"	f	class:boost::interprocess::enable_shared_from_this	access:protected	signature:(enable_shared_from_this const &)
boost::interprocess::enable_shared_from_this::operator =	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   enable_shared_from_this & operator=(enable_shared_from_this const &)$/;"	f	class:boost::interprocess::enable_shared_from_this	access:protected	signature:(enable_shared_from_this const &)
boost::interprocess::enable_shared_from_this::shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   shared_ptr<T const, A, D> shared_from_this() const$/;"	f	class:boost::interprocess::enable_shared_from_this	access:public	signature:() const
boost::interprocess::enable_shared_from_this::shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   shared_ptr<T, A, D> shared_from_this()$/;"	f	class:boost::interprocess::enable_shared_from_this	access:public	signature:()
boost::interprocess::enable_shared_from_this::_internal_weak_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   mutable weak_ptr<element_type, A, D> _internal_weak_this;$/;"	m	class:boost::interprocess::enable_shared_from_this	access:public
boost::interprocess::enable_shared_from_this::~enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   ~enable_shared_from_this()$/;"	f	class:boost::interprocess::enable_shared_from_this	access:protected	signature:()
boost::interprocess::error_code_t	/usr/include/boost/interprocess/errors.hpp	/^enum error_code_t$/;"	g	namespace:boost::interprocess
boost::interprocess::error_info	/usr/include/boost/interprocess/errors.hpp	/^struct error_info$/;"	s	namespace:boost::interprocess
boost::interprocess::error_info::error_info	/usr/include/boost/interprocess/errors.hpp	/^   error_info(error_code_t ec = other_error )$/;"	f	struct:boost::interprocess::error_info	access:public	signature:(error_code_t ec = other_error )
boost::interprocess::error_info::error_info	/usr/include/boost/interprocess/errors.hpp	/^   error_info(native_error_t sys_err_code)$/;"	f	struct:boost::interprocess::error_info	access:public	signature:(native_error_t sys_err_code)
boost::interprocess::error_info::get_error_code	/usr/include/boost/interprocess/errors.hpp	/^   error_code_t   get_error_code()const$/;"	f	struct:boost::interprocess::error_info	access:public	signature:() const
boost::interprocess::error_info::get_native_error	/usr/include/boost/interprocess/errors.hpp	/^   native_error_t get_native_error()const$/;"	f	struct:boost::interprocess::error_info	access:public	signature:() const
boost::interprocess::error_info::m_ec	/usr/include/boost/interprocess/errors.hpp	/^   error_code_t   m_ec;$/;"	m	struct:boost::interprocess::error_info	access:private
boost::interprocess::error_info::m_nat	/usr/include/boost/interprocess/errors.hpp	/^   native_error_t m_nat;$/;"	m	struct:boost::interprocess::error_info	access:private
boost::interprocess::error_info::operator =	/usr/include/boost/interprocess/errors.hpp	/^   error_info & operator =(error_code_t ec)$/;"	f	struct:boost::interprocess::error_info	access:public	signature:(error_code_t ec)
boost::interprocess::error_info::operator =	/usr/include/boost/interprocess/errors.hpp	/^   error_info & operator =(native_error_t sys_err_code)$/;"	f	struct:boost::interprocess::error_info	access:public	signature:(native_error_t sys_err_code)
boost::interprocess::expand_bwd	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type expand_bwd         = boost::container::expand_bwd;$/;"	m	namespace:boost::interprocess
boost::interprocess::expand_fwd	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type expand_fwd         = boost::container::expand_fwd;$/;"	m	namespace:boost::interprocess
boost::interprocess::file_begin	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^typedef enum { file_begin     = winapi::file_begin$/;"	e	enum:boost::interprocess::__anon11
boost::interprocess::file_current	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , file_current   = winapi::file_current$/;"	e	enum:boost::interprocess::__anon11
boost::interprocess::file_end	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , file_end       = winapi::file_end$/;"	e	enum:boost::interprocess::__anon11
boost::interprocess::file_handle_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^typedef void *             file_handle_t;$/;"	t	namespace:boost::interprocess
boost::interprocess::file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^class file_lock$/;"	c	namespace:boost::interprocess
boost::interprocess::file_lock::file_handle_t	/usr/include/boost/interprocess/sync/file_lock.hpp	/^      :  m_file_hnd(file_handle_t(detail::invalid_file()))$/;"	f	class:boost::interprocess::file_lock	access:public	signature:(detail::invalid_file(
boost::interprocess::file_lock::file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   file_lock()$/;"	f	class:boost::interprocess::file_lock	access:public	signature:()
boost::interprocess::file_lock::file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   file_lock(const char *name);$/;"	p	class:boost::interprocess::file_lock	access:public	signature:(const char *name)
boost::interprocess::file_lock::file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline file_lock::file_lock(const char *name)$/;"	f	class:boost::interprocess::file_lock	signature:(const char *name)
boost::interprocess::file_lock::lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   void lock();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
boost::interprocess::file_lock::lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline void file_lock::lock()$/;"	f	class:boost::interprocess::file_lock	signature:()
boost::interprocess::file_lock::lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   void lock_sharable();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
boost::interprocess::file_lock::lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline void file_lock::lock_sharable()$/;"	f	class:boost::interprocess::file_lock	signature:()
boost::interprocess::file_lock::m_file_hnd	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   file_handle_t m_file_hnd;$/;"	m	class:boost::interprocess::file_lock	access:private
boost::interprocess::file_lock::swap	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   void swap(file_lock &other)$/;"	f	class:boost::interprocess::file_lock	access:public	signature:(file_lock &other)
boost::interprocess::file_lock::timed_acquire_file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool timed_acquire_file_lock$/;"	f	class:boost::interprocess::file_lock	access:private	signature:(file_handle_t hnd, bool &acquired, const boost::posix_time::ptime &abs_time)
boost::interprocess::file_lock::timed_acquire_file_lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool timed_acquire_file_lock_sharable$/;"	f	class:boost::interprocess::file_lock	access:private	signature:(file_handle_t hnd, bool &acquired, const boost::posix_time::ptime &abs_time)
boost::interprocess::file_lock::timed_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::file_lock	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::file_lock::timed_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline bool file_lock::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::file_lock	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::file_lock::timed_lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::file_lock	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::file_lock::timed_lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline bool file_lock::timed_lock_sharable(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::file_lock	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::file_lock::try_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
boost::interprocess::file_lock::try_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline bool file_lock::try_lock()$/;"	f	class:boost::interprocess::file_lock	signature:()
boost::interprocess::file_lock::try_lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool try_lock_sharable();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
boost::interprocess::file_lock::try_lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline bool file_lock::try_lock_sharable()$/;"	f	class:boost::interprocess::file_lock	signature:()
boost::interprocess::file_lock::unlock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
boost::interprocess::file_lock::unlock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline void file_lock::unlock()$/;"	f	class:boost::interprocess::file_lock	signature:()
boost::interprocess::file_lock::unlock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   void unlock_sharable();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
boost::interprocess::file_lock::unlock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline void file_lock::unlock_sharable()$/;"	f	class:boost::interprocess::file_lock	signature:()
boost::interprocess::file_lock::~file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   ~file_lock();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
boost::interprocess::file_lock::~file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline file_lock::~file_lock()$/;"	f	class:boost::interprocess::file_lock	signature:()
boost::interprocess::file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^class file_mapping$/;"	c	namespace:boost::interprocess
boost::interprocess::file_mapping::file_handle_t	/usr/include/boost/interprocess/file_mapping.hpp	/^      :  m_handle(file_handle_t(detail::invalid_file()))$/;"	f	class:boost::interprocess::file_mapping	access:public	signature:(detail::invalid_file(
boost::interprocess::file_mapping::file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^   file_mapping();$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:()
boost::interprocess::file_mapping::file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^   file_mapping(const char *filename, mode_t mode);$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:(const char *filename, mode_t mode)
boost::interprocess::file_mapping::file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^inline file_mapping::file_mapping$/;"	f	class:boost::interprocess::file_mapping	signature:(const char *filename, mode_t mode)
boost::interprocess::file_mapping::file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^inline file_mapping::file_mapping() $/;"	f	class:boost::interprocess::file_mapping	signature:()
boost::interprocess::file_mapping::get_mapping_handle	/usr/include/boost/interprocess/file_mapping.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:() const
boost::interprocess::file_mapping::get_mapping_handle	/usr/include/boost/interprocess/file_mapping.hpp	/^inline mapping_handle_t file_mapping::get_mapping_handle() const$/;"	f	class:boost::interprocess::file_mapping	signature:() const
boost::interprocess::file_mapping::get_mode	/usr/include/boost/interprocess/file_mapping.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:() const
boost::interprocess::file_mapping::get_mode	/usr/include/boost/interprocess/file_mapping.hpp	/^inline mode_t file_mapping::get_mode() const$/;"	f	class:boost::interprocess::file_mapping	signature:() const
boost::interprocess::file_mapping::get_name	/usr/include/boost/interprocess/file_mapping.hpp	/^   const char *get_name() const;$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:() const
boost::interprocess::file_mapping::get_name	/usr/include/boost/interprocess/file_mapping.hpp	/^inline const char *file_mapping::get_name() const$/;"	f	class:boost::interprocess::file_mapping	signature:() const
boost::interprocess::file_mapping::m_filename	/usr/include/boost/interprocess/file_mapping.hpp	/^   std::string       m_filename;$/;"	m	class:boost::interprocess::file_mapping	access:private
boost::interprocess::file_mapping::m_handle	/usr/include/boost/interprocess/file_mapping.hpp	/^   file_handle_t  m_handle;$/;"	m	class:boost::interprocess::file_mapping	access:private
boost::interprocess::file_mapping::m_mode	/usr/include/boost/interprocess/file_mapping.hpp	/^   mode_t    m_mode;$/;"	m	class:boost::interprocess::file_mapping	access:private
boost::interprocess::file_mapping::priv_close	/usr/include/boost/interprocess/file_mapping.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::file_mapping	access:private	signature:()
boost::interprocess::file_mapping::priv_close	/usr/include/boost/interprocess/file_mapping.hpp	/^inline void file_mapping::priv_close()$/;"	f	class:boost::interprocess::file_mapping	signature:()
boost::interprocess::file_mapping::remove	/usr/include/boost/interprocess/file_mapping.hpp	/^   static bool remove(const char *filename);$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:(const char *filename)
boost::interprocess::file_mapping::remove	/usr/include/boost/interprocess/file_mapping.hpp	/^inline bool file_mapping::remove(const char *filename)$/;"	f	class:boost::interprocess::file_mapping	signature:(const char *filename)
boost::interprocess::file_mapping::swap	/usr/include/boost/interprocess/file_mapping.hpp	/^   void swap(file_mapping &other);$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:(file_mapping &other)
boost::interprocess::file_mapping::swap	/usr/include/boost/interprocess/file_mapping.hpp	/^inline void file_mapping::swap(file_mapping &other)$/;"	f	class:boost::interprocess::file_mapping	signature:(file_mapping &other)
boost::interprocess::file_mapping::~file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^   ~file_mapping();$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:()
boost::interprocess::file_mapping::~file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^inline file_mapping::~file_mapping() $/;"	f	class:boost::interprocess::file_mapping	signature:()
boost::interprocess::file_pos_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             } file_pos_t;$/;"	t	namespace:boost::interprocess	typeref:enum:boost::interprocess::__anon11
boost::interprocess::fill_system_message	/usr/include/boost/interprocess/errors.hpp	/^inline void fill_system_message( int system_error, std::string &str)$/;"	f	namespace:boost::interprocess	signature:( int system_error, std::string &str)
boost::interprocess::fill_system_message	/usr/include/boost/interprocess/errors.hpp	/^inline void fill_system_message(int sys_err_code, std::string &str)$/;"	f	namespace:boost::interprocess	signature:(int sys_err_code, std::string &str)
boost::interprocess::fixed_managed_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^fixed_managed_shared_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::flat_map_index	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^class flat_map_index$/;"	c	namespace:boost::interprocess	inherits:flat_map_index_aux::index_t
boost::interprocess::flat_map_index::base_type	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef typename index_aux::index_t    base_type;$/;"	t	class:boost::interprocess::flat_map_index	access:private
boost::interprocess::flat_map_index::flat_map_index	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   flat_map_index(segment_manager_base *segment_mngr)$/;"	f	class:boost::interprocess::flat_map_index	access:public	signature:(segment_manager_base *segment_mngr)
boost::interprocess::flat_map_index::index_aux	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef flat_map_index_aux<MapConfig>  index_aux;$/;"	t	class:boost::interprocess::flat_map_index	access:private
boost::interprocess::flat_map_index::reserve	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   void reserve(std::size_t n)$/;"	f	class:boost::interprocess::flat_map_index	access:public	signature:(std::size_t n)
boost::interprocess::flat_map_index::segment_manager_base	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^      segment_manager_base          segment_manager_base;$/;"	t	class:boost::interprocess::flat_map_index	access:private
boost::interprocess::flat_map_index::shrink_to_fit	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::flat_map_index	access:public	signature:()
boost::interprocess::flat_map_index_aux	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^struct flat_map_index_aux$/;"	s	namespace:boost::interprocess
boost::interprocess::flat_map_index_aux::allocator_type	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^                    ,segment_manager_base>   allocator_type;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
boost::interprocess::flat_map_index_aux::index_t	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^                    key_less, allocator_type>      index_t;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
boost::interprocess::flat_map_index_aux::key_less	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef std::less<key_type>                     key_less;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
boost::interprocess::flat_map_index_aux::key_type	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef typename MapConfig::key_type            key_type;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
boost::interprocess::flat_map_index_aux::mapped_type	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef typename MapConfig::mapped_type         mapped_type;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
boost::interprocess::flat_map_index_aux::segment_manager_base	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^      segment_manager_base                   segment_manager_base;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
boost::interprocess::flat_map_index_aux::value_type	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef std::pair<key_type, mapped_type>        value_type;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
boost::interprocess::flat_map_intersegment	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^struct flat_map_intersegment$/;"	s	namespace:boost::interprocess	inherits:intersegment_base
boost::interprocess::flat_map_intersegment::dec_offset	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void dec_offset(std::ptrdiff_t bytes)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(std::ptrdiff_t bytes)
boost::interprocess::flat_map_intersegment::delete_group	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static bool delete_group(segment_group_id id)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(segment_group_id id)
boost::interprocess::flat_map_intersegment::diff	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   std::ptrdiff_t diff(const self_t &other) const$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const self_t &other) const
boost::interprocess::flat_map_intersegment::equal	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool equal(const self_t &y) const$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const self_t &y) const
boost::interprocess::flat_map_intersegment::erase_last_mapping	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static bool erase_last_mapping(segment_group_id group_id)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(segment_group_id group_id)
boost::interprocess::flat_map_intersegment::flat_map_intersegment	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   flat_map_intersegment()$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:()
boost::interprocess::flat_map_intersegment::get_pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void *get_pointer() const$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:() const
boost::interprocess::flat_map_intersegment::get_segment_info_and_offset	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static void get_segment_info_and_offset(const void *ptr, segment_info_t &segment, std::size_t &offset, void *&base)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const void *ptr, segment_info_t &segment, std::size_t &offset, void *&base)
boost::interprocess::flat_map_intersegment::inc_offset	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void inc_offset(std::ptrdiff_t bytes)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(std::ptrdiff_t bytes)
boost::interprocess::flat_map_intersegment::insert_mapping	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static void insert_mapping(segment_group_id group_id, void *ptr, std::size_t size)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(segment_group_id group_id, void *ptr, std::size_t size)
boost::interprocess::flat_map_intersegment::less	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool less(const self_t &y) const$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const self_t &y) const
boost::interprocess::flat_map_intersegment::mappings_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   struct mappings_t : Mutex$/;"	s	struct:boost::interprocess::flat_map_intersegment	inherits:Mutex	access:private
boost::interprocess::flat_map_intersegment::mappings_t::mutex_type	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      typedef Mutex        mutex_type;$/;"	t	struct:boost::interprocess::flat_map_intersegment::mappings_t	access:public
boost::interprocess::flat_map_intersegment::mappings_t::m_ptr_to_segment_info	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      ptr_to_segment_info_t      m_ptr_to_segment_info;$/;"	m	struct:boost::interprocess::flat_map_intersegment::mappings_t	access:public
boost::interprocess::flat_map_intersegment::mappings_t::~mappings_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      ~mappings_t()$/;"	f	struct:boost::interprocess::flat_map_intersegment::mappings_t	access:public	signature:()
boost::interprocess::flat_map_intersegment::new_segment_group	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static segment_group_id new_segment_group(multi_segment_services *services)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(multi_segment_services *services)
boost::interprocess::flat_map_intersegment::ptr_to_segment_info_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      ,std::less<const void *> >          ptr_to_segment_info_t;$/;"	t	struct:boost::interprocess::flat_map_intersegment	access:private
boost::interprocess::flat_map_intersegment::segment_groups_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef set<segment_group_t>  segment_groups_t;$/;"	t	struct:boost::interprocess::flat_map_intersegment	access:private
boost::interprocess::flat_map_intersegment::segment_group_id	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef segment_group_t*      segment_group_id;$/;"	t	struct:boost::interprocess::flat_map_intersegment	access:public
boost::interprocess::flat_map_intersegment::segment_group_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   class segment_group_t$/;"	c	struct:boost::interprocess::flat_map_intersegment	access:private
boost::interprocess::flat_map_intersegment::segment_group_t::address_of	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      void *address_of(std::size_t segment_id)$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:(std::size_t segment_id)
boost::interprocess::flat_map_intersegment::segment_group_t::clear_segments	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      void clear_segments()$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:()
boost::interprocess::flat_map_intersegment::segment_group_t::get_multi_segment_services	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      multi_segment_services &get_multi_segment_services() const$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:() const
boost::interprocess::flat_map_intersegment::segment_group_t::get_size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t get_size() const$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:() const
boost::interprocess::flat_map_intersegment::segment_group_t::m_ms_services	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      multi_segment_services &m_ms_services;$/;"	m	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:private
boost::interprocess::flat_map_intersegment::segment_group_t::m_segments	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      vector<segment_data> m_segments;$/;"	m	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:private
boost::interprocess::flat_map_intersegment::segment_group_t::operator <	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      friend bool operator< (const segment_group_t&l, const segment_group_t &r)$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:friend	signature:(const segment_group_t&l, const segment_group_t &r)
boost::interprocess::flat_map_intersegment::segment_group_t::pop_back	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      void pop_back()$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:()
boost::interprocess::flat_map_intersegment::segment_group_t::push_back	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      void push_back(void *addr, std::size_t size)$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:(void *addr, std::size_t size)
boost::interprocess::flat_map_intersegment::segment_group_t::segment_data	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      struct segment_data$/;"	s	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:private
boost::interprocess::flat_map_intersegment::segment_group_t::segment_data::addr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^         void *addr;$/;"	m	struct:boost::interprocess::flat_map_intersegment::segment_group_t::segment_data	access:public
boost::interprocess::flat_map_intersegment::segment_group_t::segment_data::size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^         std::size_t size;$/;"	m	struct:boost::interprocess::flat_map_intersegment::segment_group_t::segment_data	access:public
boost::interprocess::flat_map_intersegment::segment_group_t::segment_group_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      segment_group_t(multi_segment_services &ms_services)$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:(multi_segment_services &ms_services)
boost::interprocess::flat_map_intersegment::segment_info_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   struct segment_info_t$/;"	s	struct:boost::interprocess::flat_map_intersegment	access:private
boost::interprocess::flat_map_intersegment::segment_info_t::group	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      segment_group_t *group;$/;"	m	struct:boost::interprocess::flat_map_intersegment::segment_info_t	access:public
boost::interprocess::flat_map_intersegment::segment_info_t::id	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t id;$/;"	m	struct:boost::interprocess::flat_map_intersegment::segment_info_t	access:public
boost::interprocess::flat_map_intersegment::segment_info_t::segment_info_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      segment_info_t()$/;"	f	struct:boost::interprocess::flat_map_intersegment::segment_info_t	access:public	signature:()
boost::interprocess::flat_map_intersegment::segment_info_t::size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t size;$/;"	m	struct:boost::interprocess::flat_map_intersegment::segment_info_t	access:public
boost::interprocess::flat_map_intersegment::self_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef flat_map_intersegment<Mutex>   self_t;$/;"	t	struct:boost::interprocess::flat_map_intersegment	access:public
boost::interprocess::flat_map_intersegment::set_from_other	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void set_from_other(const self_t &other)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const self_t &other)
boost::interprocess::flat_map_intersegment::set_from_pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void set_from_pointer(const void *ptr)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const void *ptr)
boost::interprocess::flat_map_intersegment::set_from_pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void set_from_pointer(const volatile void *ptr)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const volatile void *ptr)
boost::interprocess::flat_map_intersegment::swap	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void swap(self_t &other)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(self_t &other)
boost::interprocess::flat_map_intersegment::s_groups	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   flat_map_intersegment<Mutex>::s_groups;$/;"	m	class:boost::interprocess::flat_map_intersegment
boost::interprocess::flat_map_intersegment::s_groups	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static segment_groups_t s_groups;$/;"	m	struct:boost::interprocess::flat_map_intersegment	access:private
boost::interprocess::flat_map_intersegment::s_map	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   flat_map_intersegment<Mutex>::s_map;$/;"	m	class:boost::interprocess::flat_map_intersegment
boost::interprocess::flat_map_intersegment::s_map	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static mappings_t       s_map;$/;"	m	struct:boost::interprocess::flat_map_intersegment	access:private
boost::interprocess::flat_map_intersegment::~flat_map_intersegment	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   ~flat_map_intersegment()$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:()
boost::interprocess::forward	/usr/include/boost/interprocess/detail/move.hpp	/^   forward(const typename move_detail::identity<T>::type &x)$/;"	f	namespace:boost::interprocess	signature:(const typename move_detail::identity<T>::type &x)
boost::interprocess::front_move_inserter	/usr/include/boost/interprocess/detail/move.hpp	/^inline front_move_insert_iterator<C> front_move_inserter(C& x)$/;"	f	namespace:boost::interprocess	signature:(C& x)
boost::interprocess::front_move_insert_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^class front_move_insert_iterator$/;"	c	namespace:boost::interprocess	inherits:std::iterator
boost::interprocess::front_move_insert_iterator::container_m	/usr/include/boost/interprocess/detail/move.hpp	/^   C* container_m;$/;"	m	class:boost::interprocess::front_move_insert_iterator	access:private
boost::interprocess::front_move_insert_iterator::container_type	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef C container_type;$/;"	t	class:boost::interprocess::front_move_insert_iterator	access:public
boost::interprocess::front_move_insert_iterator::front_move_insert_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^   explicit front_move_insert_iterator(C& x) : container_m(&x) { }$/;"	f	class:boost::interprocess::front_move_insert_iterator	access:public	signature:(C& x)
boost::interprocess::front_move_insert_iterator::operator *	/usr/include/boost/interprocess/detail/move.hpp	/^   front_move_insert_iterator& operator*()     { return *this; }$/;"	f	class:boost::interprocess::front_move_insert_iterator	access:public	signature:()
boost::interprocess::front_move_insert_iterator::operator ++	/usr/include/boost/interprocess/detail/move.hpp	/^   front_move_insert_iterator& operator++()    { return *this; }$/;"	f	class:boost::interprocess::front_move_insert_iterator	access:public	signature:()
boost::interprocess::front_move_insert_iterator::operator ++	/usr/include/boost/interprocess/detail/move.hpp	/^   front_move_insert_iterator& operator++(int) { return *this; }$/;"	f	class:boost::interprocess::front_move_insert_iterator	access:public	signature:(int)
boost::interprocess::front_move_insert_iterator::operator =	/usr/include/boost/interprocess/detail/move.hpp	/^   front_move_insert_iterator& operator=(typename C::reference x)$/;"	f	class:boost::interprocess::front_move_insert_iterator	access:public	signature:(typename C::reference x)
boost::interprocess::get_pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^T * get_pointer(boost::interprocess::intersegment_ptr<T> const & p)$/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::intersegment_ptr<T> const & p)
boost::interprocess::get_pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline T * get_pointer(boost::interprocess::offset_ptr<T> const & p)$/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::offset_ptr<T> const & p)
boost::interprocess::get_pointer	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   get_pointer(intrusive_ptr<T, VP> p)$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> p)
boost::interprocess::get_pointer	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^typename scoped_ptr<T, D>::pointer get_pointer(scoped_ptr<T, D> const & p)$/;"	f	namespace:boost::interprocess	signature:(scoped_ptr<T, D> const & p)
boost::interprocess::get_pointer	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^T * get_pointer(shared_ptr<T, VoidAllocator, Deleter> const & p)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<T, VoidAllocator, Deleter> const & p)
boost::interprocess::has_nothrow_move	/usr/include/boost/interprocess/detail/move.hpp	/^struct has_nothrow_move : is_movable<T>$/;"	s	namespace:boost::interprocess	inherits:is_movable
boost::interprocess::has_trivial_destructor_after_move	/usr/include/boost/interprocess/detail/move.hpp	/^struct has_trivial_destructor_after_move$/;"	s	namespace:boost::interprocess	inherits:::boost::has_trivial_destructor
boost::interprocess::has_trivial_destructor_after_move_ctor	/usr/include/boost/interprocess/detail/move.hpp	/^struct has_trivial_destructor_after_move_ctor$/;"	s	namespace:boost::interprocess	inherits:::boost::has_trivial_destructor
boost::interprocess::has_trivial_destructor_after_move_to_moved	/usr/include/boost/interprocess/detail/move.hpp	/^struct has_trivial_destructor_after_move_to_moved$/;"	s	namespace:boost::interprocess	inherits:has_trivial_destructor_after_move
boost::interprocess::ibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_ibufferstream<char>    ibufferstream;$/;"	t	namespace:boost::interprocess
boost::interprocess::instance_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^enum instance_type {   anonymous_type, named_type, unique_type, max_allocation_type };$/;"	g	namespace:boost::interprocess
boost::interprocess::interprocess_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^class interprocess_condition$/;"	c	namespace:boost::interprocess
boost::interprocess::interprocess_condition::do_timed_wait	/usr/include/boost/interprocess/sync/emulation/interprocess_condition.hpp	/^inline bool interprocess_condition::do_timed_wait$/;"	f	class:boost::interprocess::interprocess_condition	signature:(const boost::posix_time::ptime &abs_time, interprocess_mutex &mut)
boost::interprocess::interprocess_condition::do_timed_wait	/usr/include/boost/interprocess/sync/emulation/interprocess_condition.hpp	/^inline bool interprocess_condition::do_timed_wait(bool tout_enabled,$/;"	f	class:boost::interprocess::interprocess_condition	signature:(bool tout_enabled, const boost::posix_time::ptime &abs_time, interprocess_mutex &mut)
boost::interprocess::interprocess_condition::do_timed_wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      bool do_timed_wait(bool tout_enabled, const boost::posix_time::ptime &abs_time, interprocess_mutex &mut);$/;"	p	class:boost::interprocess::interprocess_condition	access:private	signature:(bool tout_enabled, const boost::posix_time::ptime &abs_time, interprocess_mutex &mut)
boost::interprocess::interprocess_condition::do_timed_wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   bool do_timed_wait(const boost::posix_time::ptime &abs_time, interprocess_mutex &mut);$/;"	p	class:boost::interprocess::interprocess_condition	access:private	signature:(const boost::posix_time::ptime &abs_time, interprocess_mutex &mut)
boost::interprocess::interprocess_condition::do_timed_wait	/usr/include/boost/interprocess/sync/posix/interprocess_condition.hpp	/^inline bool interprocess_condition::do_timed_wait$/;"	f	class:boost::interprocess::interprocess_condition	signature:(const boost::posix_time::ptime &abs_time, interprocess_mutex &mut)
boost::interprocess::interprocess_condition::do_wait	/usr/include/boost/interprocess/sync/emulation/interprocess_condition.hpp	/^inline void interprocess_condition::do_wait(interprocess_mutex &mut)$/;"	f	class:boost::interprocess::interprocess_condition	signature:(interprocess_mutex &mut)
boost::interprocess::interprocess_condition::do_wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   void do_wait(interprocess_mutex  &mut);$/;"	p	class:boost::interprocess::interprocess_condition	access:private	signature:(interprocess_mutex &mut)
boost::interprocess::interprocess_condition::do_wait	/usr/include/boost/interprocess/sync/posix/interprocess_condition.hpp	/^inline void interprocess_condition::do_wait(interprocess_mutex &mut)$/;"	f	class:boost::interprocess::interprocess_condition	signature:(interprocess_mutex &mut)
boost::interprocess::interprocess_condition::interprocess_condition	/usr/include/boost/interprocess/sync/emulation/interprocess_condition.hpp	/^inline interprocess_condition::interprocess_condition()$/;"	f	class:boost::interprocess::interprocess_condition	signature:()
boost::interprocess::interprocess_condition::interprocess_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   interprocess_condition();$/;"	p	class:boost::interprocess::interprocess_condition	access:public	signature:()
boost::interprocess::interprocess_condition::interprocess_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   interprocess_condition(const interprocess_condition &);$/;"	p	class:boost::interprocess::interprocess_condition	access:private	signature:(const interprocess_condition &)
boost::interprocess::interprocess_condition::interprocess_condition	/usr/include/boost/interprocess/sync/posix/interprocess_condition.hpp	/^inline interprocess_condition::interprocess_condition()$/;"	f	class:boost::interprocess::interprocess_condition	signature:()
boost::interprocess::interprocess_condition::m_command	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      volatile boost::uint32_t    m_command;$/;"	m	class:boost::interprocess::interprocess_condition	access:private
boost::interprocess::interprocess_condition::m_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      pthread_cond_t   m_condition;$/;"	m	class:boost::interprocess::interprocess_condition	access:private
boost::interprocess::interprocess_condition::m_enter_mut	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      interprocess_mutex m_enter_mut;$/;"	m	class:boost::interprocess::interprocess_condition	access:private
boost::interprocess::interprocess_condition::m_num_waiters	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      volatile boost::uint32_t    m_num_waiters;$/;"	m	class:boost::interprocess::interprocess_condition	access:private
boost::interprocess::interprocess_condition::notify	/usr/include/boost/interprocess/sync/emulation/interprocess_condition.hpp	/^inline void interprocess_condition::notify(boost::uint32_t command)$/;"	f	class:boost::interprocess::interprocess_condition	signature:(boost::uint32_t command)
boost::interprocess::interprocess_condition::notify	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      void notify(boost::uint32_t command);$/;"	p	class:boost::interprocess::interprocess_condition	access:private	signature:(boost::uint32_t command)
boost::interprocess::interprocess_condition::notify_all	/usr/include/boost/interprocess/sync/emulation/interprocess_condition.hpp	/^inline void interprocess_condition::notify_all()$/;"	f	class:boost::interprocess::interprocess_condition	signature:()
boost::interprocess::interprocess_condition::NOTIFY_ALL	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      enum { SLEEP = 0, NOTIFY_ONE, NOTIFY_ALL };$/;"	e	enum:boost::interprocess::interprocess_condition::__anon33
boost::interprocess::interprocess_condition::notify_all	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   void notify_all();$/;"	p	class:boost::interprocess::interprocess_condition	access:public	signature:()
boost::interprocess::interprocess_condition::notify_all	/usr/include/boost/interprocess/sync/posix/interprocess_condition.hpp	/^inline void interprocess_condition::notify_all()$/;"	f	class:boost::interprocess::interprocess_condition	signature:()
boost::interprocess::interprocess_condition::notify_one	/usr/include/boost/interprocess/sync/emulation/interprocess_condition.hpp	/^inline void interprocess_condition::notify_one()$/;"	f	class:boost::interprocess::interprocess_condition	signature:()
boost::interprocess::interprocess_condition::NOTIFY_ONE	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      enum { SLEEP = 0, NOTIFY_ONE, NOTIFY_ALL };$/;"	e	enum:boost::interprocess::interprocess_condition::__anon33
boost::interprocess::interprocess_condition::notify_one	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   void notify_one();$/;"	p	class:boost::interprocess::interprocess_condition	access:public	signature:()
boost::interprocess::interprocess_condition::notify_one	/usr/include/boost/interprocess/sync/posix/interprocess_condition.hpp	/^inline void interprocess_condition::notify_one()$/;"	f	class:boost::interprocess::interprocess_condition	signature:()
boost::interprocess::interprocess_condition::operator =	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   interprocess_condition &operator=(const interprocess_condition &);$/;"	p	class:boost::interprocess::interprocess_condition	access:private	signature:(const interprocess_condition &)
boost::interprocess::interprocess_condition::SLEEP	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      enum { SLEEP = 0, NOTIFY_ONE, NOTIFY_ALL };$/;"	e	enum:boost::interprocess::interprocess_condition::__anon33
boost::interprocess::interprocess_condition::timed_wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_condition::timed_wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
boost::interprocess::interprocess_condition::wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:(L& lock)
boost::interprocess::interprocess_condition::wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:(L& lock, Pr pred)
boost::interprocess::interprocess_condition::~interprocess_condition	/usr/include/boost/interprocess/sync/emulation/interprocess_condition.hpp	/^inline interprocess_condition::~interprocess_condition()$/;"	f	class:boost::interprocess::interprocess_condition	signature:()
boost::interprocess::interprocess_condition::~interprocess_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   ~interprocess_condition();$/;"	p	class:boost::interprocess::interprocess_condition	access:public	signature:()
boost::interprocess::interprocess_condition::~interprocess_condition	/usr/include/boost/interprocess/sync/posix/interprocess_condition.hpp	/^inline interprocess_condition::~interprocess_condition()$/;"	f	class:boost::interprocess::interprocess_condition	signature:()
boost::interprocess::interprocess_exception	/usr/include/boost/interprocess/exceptions.hpp	/^class interprocess_exception : public std::exception$/;"	c	namespace:boost::interprocess	inherits:std::exception
boost::interprocess::interprocess_exception::get_error_code	/usr/include/boost/interprocess/exceptions.hpp	/^   error_code_t   get_error_code()  const { return m_err.get_error_code(); }$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:() const
boost::interprocess::interprocess_exception::get_native_error	/usr/include/boost/interprocess/exceptions.hpp	/^   native_error_t get_native_error()const { return m_err.get_native_error(); }$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:() const
boost::interprocess::interprocess_exception::interprocess_exception	/usr/include/boost/interprocess/exceptions.hpp	/^   interprocess_exception(const error_info &err_info)$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:(const error_info &err_info)
boost::interprocess::interprocess_exception::interprocess_exception	/usr/include/boost/interprocess/exceptions.hpp	/^   interprocess_exception(error_code_t ec = other_error )$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:(error_code_t ec = other_error )
boost::interprocess::interprocess_exception::interprocess_exception	/usr/include/boost/interprocess/exceptions.hpp	/^   interprocess_exception(native_error_t sys_err_code)$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:(native_error_t sys_err_code)
boost::interprocess::interprocess_exception::m_err	/usr/include/boost/interprocess/exceptions.hpp	/^   error_info        m_err;$/;"	m	class:boost::interprocess::interprocess_exception	access:private
boost::interprocess::interprocess_exception::m_str	/usr/include/boost/interprocess/exceptions.hpp	/^   std::string       m_str;$/;"	m	class:boost::interprocess::interprocess_exception	access:private
boost::interprocess::interprocess_exception::what	/usr/include/boost/interprocess/exceptions.hpp	/^   virtual const char * what() const throw()$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:() const
boost::interprocess::interprocess_exception::~interprocess_exception	/usr/include/boost/interprocess/exceptions.hpp	/^   virtual ~interprocess_exception() throw(){}$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:()
boost::interprocess::interprocess_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^class interprocess_mutex$/;"	c	namespace:boost::interprocess
boost::interprocess::interprocess_mutex::interprocess_mutex	/usr/include/boost/interprocess/sync/emulation/interprocess_mutex.hpp	/^inline interprocess_mutex::interprocess_mutex() $/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
boost::interprocess::interprocess_mutex::interprocess_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   interprocess_mutex();$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:()
boost::interprocess::interprocess_mutex::interprocess_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   interprocess_mutex(const interprocess_mutex &);$/;"	p	class:boost::interprocess::interprocess_mutex	access:private	signature:(const interprocess_mutex &)
boost::interprocess::interprocess_mutex::interprocess_mutex	/usr/include/boost/interprocess/sync/posix/interprocess_mutex.hpp	/^inline interprocess_mutex::interprocess_mutex()$/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
boost::interprocess::interprocess_mutex::lock	/usr/include/boost/interprocess/sync/emulation/interprocess_mutex.hpp	/^inline void interprocess_mutex::lock(void)$/;"	f	class:boost::interprocess::interprocess_mutex	signature:(void)
boost::interprocess::interprocess_mutex::lock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:()
boost::interprocess::interprocess_mutex::lock	/usr/include/boost/interprocess/sync/posix/interprocess_mutex.hpp	/^inline void interprocess_mutex::lock()$/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
boost::interprocess::interprocess_mutex::m_mut	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^      pthread_mutex_t   m_mut;$/;"	m	class:boost::interprocess::interprocess_mutex	access:private
boost::interprocess::interprocess_mutex::m_s	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^      volatile boost::uint32_t m_s;$/;"	m	class:boost::interprocess::interprocess_mutex	access:private
boost::interprocess::interprocess_mutex::operator =	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   interprocess_mutex &operator=(const interprocess_mutex &);$/;"	p	class:boost::interprocess::interprocess_mutex	access:private	signature:(const interprocess_mutex &)
boost::interprocess::interprocess_mutex::timed_lock	/usr/include/boost/interprocess/sync/emulation/interprocess_mutex.hpp	/^inline bool interprocess_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_mutex::timed_lock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_mutex::timed_lock	/usr/include/boost/interprocess/sync/posix/interprocess_mutex.hpp	/^inline bool interprocess_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_mutex::try_lock	/usr/include/boost/interprocess/sync/emulation/interprocess_mutex.hpp	/^inline bool interprocess_mutex::try_lock(void)$/;"	f	class:boost::interprocess::interprocess_mutex	signature:(void)
boost::interprocess::interprocess_mutex::try_lock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:()
boost::interprocess::interprocess_mutex::try_lock	/usr/include/boost/interprocess/sync/posix/interprocess_mutex.hpp	/^inline bool interprocess_mutex::try_lock()$/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
boost::interprocess::interprocess_mutex::unlock	/usr/include/boost/interprocess/sync/emulation/interprocess_mutex.hpp	/^inline void interprocess_mutex::unlock(void)$/;"	f	class:boost::interprocess::interprocess_mutex	signature:(void)
boost::interprocess::interprocess_mutex::unlock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:()
boost::interprocess::interprocess_mutex::unlock	/usr/include/boost/interprocess/sync/posix/interprocess_mutex.hpp	/^inline void interprocess_mutex::unlock()$/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
boost::interprocess::interprocess_mutex::~interprocess_mutex	/usr/include/boost/interprocess/sync/emulation/interprocess_mutex.hpp	/^inline interprocess_mutex::~interprocess_mutex() $/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
boost::interprocess::interprocess_mutex::~interprocess_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   ~interprocess_mutex();$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:()
boost::interprocess::interprocess_mutex::~interprocess_mutex	/usr/include/boost/interprocess/sync/posix/interprocess_mutex.hpp	/^inline interprocess_mutex::~interprocess_mutex() $/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
boost::interprocess::interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^class interprocess_recursive_mutex$/;"	c	namespace:boost::interprocess
boost::interprocess::interprocess_recursive_mutex::interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/emulation/interprocess_recursive_mutex.hpp	/^inline interprocess_recursive_mutex::interprocess_recursive_mutex() $/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
boost::interprocess::interprocess_recursive_mutex::interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   interprocess_recursive_mutex();$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:()
boost::interprocess::interprocess_recursive_mutex::interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   interprocess_recursive_mutex(const interprocess_recursive_mutex &);$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:private	signature:(const interprocess_recursive_mutex &)
boost::interprocess::interprocess_recursive_mutex::interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/posix/interprocess_recursive_mutex.hpp	/^inline interprocess_recursive_mutex::interprocess_recursive_mutex()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
boost::interprocess::interprocess_recursive_mutex::lock	/usr/include/boost/interprocess/sync/emulation/interprocess_recursive_mutex.hpp	/^inline void interprocess_recursive_mutex::lock()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
boost::interprocess::interprocess_recursive_mutex::lock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   void lock(void);$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:(void)
boost::interprocess::interprocess_recursive_mutex::lock	/usr/include/boost/interprocess/sync/posix/interprocess_recursive_mutex.hpp	/^inline void interprocess_recursive_mutex::lock()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
boost::interprocess::interprocess_recursive_mutex::m_mut	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   pthread_mutex_t m_mut;$/;"	m	class:boost::interprocess::interprocess_recursive_mutex	access:private
boost::interprocess::interprocess_recursive_mutex::m_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   interprocess_mutex                  m_mutex;$/;"	m	class:boost::interprocess::interprocess_recursive_mutex	access:private
boost::interprocess::interprocess_recursive_mutex::m_nLockCount	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   unsigned int                        m_nLockCount;$/;"	m	class:boost::interprocess::interprocess_recursive_mutex	access:private
boost::interprocess::interprocess_recursive_mutex::m_nOwner	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   volatile detail::OS_systemwide_thread_id_t   m_nOwner;$/;"	m	class:boost::interprocess::interprocess_recursive_mutex	access:private
boost::interprocess::interprocess_recursive_mutex::operator =	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   interprocess_recursive_mutex &operator=(const interprocess_recursive_mutex &);$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:private	signature:(const interprocess_recursive_mutex &)
boost::interprocess::interprocess_recursive_mutex::timed_lock	/usr/include/boost/interprocess/sync/emulation/interprocess_recursive_mutex.hpp	/^inline bool interprocess_recursive_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_recursive_mutex::timed_lock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_recursive_mutex::timed_lock	/usr/include/boost/interprocess/sync/posix/interprocess_recursive_mutex.hpp	/^inline bool interprocess_recursive_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_recursive_mutex::try_lock	/usr/include/boost/interprocess/sync/emulation/interprocess_recursive_mutex.hpp	/^inline bool interprocess_recursive_mutex::try_lock()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
boost::interprocess::interprocess_recursive_mutex::try_lock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   bool try_lock(void);$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:(void)
boost::interprocess::interprocess_recursive_mutex::try_lock	/usr/include/boost/interprocess/sync/posix/interprocess_recursive_mutex.hpp	/^inline bool interprocess_recursive_mutex::try_lock()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
boost::interprocess::interprocess_recursive_mutex::unlock	/usr/include/boost/interprocess/sync/emulation/interprocess_recursive_mutex.hpp	/^inline void interprocess_recursive_mutex::unlock()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
boost::interprocess::interprocess_recursive_mutex::unlock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   void unlock(void);$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:(void)
boost::interprocess::interprocess_recursive_mutex::unlock	/usr/include/boost/interprocess/sync/posix/interprocess_recursive_mutex.hpp	/^inline void interprocess_recursive_mutex::unlock()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
boost::interprocess::interprocess_recursive_mutex::~interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/emulation/interprocess_recursive_mutex.hpp	/^inline interprocess_recursive_mutex::~interprocess_recursive_mutex(){}$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
boost::interprocess::interprocess_recursive_mutex::~interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^  ~interprocess_recursive_mutex();$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:()
boost::interprocess::interprocess_recursive_mutex::~interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/posix/interprocess_recursive_mutex.hpp	/^inline interprocess_recursive_mutex::~interprocess_recursive_mutex()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
boost::interprocess::interprocess_semaphore	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^class interprocess_semaphore$/;"	c	namespace:boost::interprocess
boost::interprocess::interprocess_semaphore::interprocess_semaphore	/usr/include/boost/interprocess/sync/emulation/interprocess_semaphore.hpp	/^inline interprocess_semaphore::interprocess_semaphore(unsigned int initialCount)$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:(unsigned int initialCount)
boost::interprocess::interprocess_semaphore::interprocess_semaphore	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   interprocess_semaphore(const interprocess_semaphore &);$/;"	p	class:boost::interprocess::interprocess_semaphore	access:private	signature:(const interprocess_semaphore &)
boost::interprocess::interprocess_semaphore::interprocess_semaphore	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   interprocess_semaphore(unsigned int initialCount);$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:(unsigned int initialCount)
boost::interprocess::interprocess_semaphore::interprocess_semaphore	/usr/include/boost/interprocess/sync/posix/interprocess_semaphore.hpp	/^inline interprocess_semaphore::interprocess_semaphore(unsigned int initialCount)$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:(unsigned int initialCount)
boost::interprocess::interprocess_semaphore::m_count	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   volatile boost::uint32_t m_count;$/;"	m	class:boost::interprocess::interprocess_semaphore	access:private
boost::interprocess::interprocess_semaphore::m_sem	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   detail::semaphore_wrapper m_sem;$/;"	m	class:boost::interprocess::interprocess_semaphore	access:private
boost::interprocess::interprocess_semaphore::operator =	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   interprocess_semaphore &operator=(const interprocess_semaphore &);$/;"	p	class:boost::interprocess::interprocess_semaphore	access:private	signature:(const interprocess_semaphore &)
boost::interprocess::interprocess_semaphore::post	/usr/include/boost/interprocess/sync/emulation/interprocess_semaphore.hpp	/^inline void interprocess_semaphore::post()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
boost::interprocess::interprocess_semaphore::post	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   void post();$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:()
boost::interprocess::interprocess_semaphore::post	/usr/include/boost/interprocess/sync/posix/interprocess_semaphore.hpp	/^inline void interprocess_semaphore::post()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
boost::interprocess::interprocess_semaphore::timed_wait	/usr/include/boost/interprocess/sync/emulation/interprocess_semaphore.hpp	/^inline bool interprocess_semaphore::timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_semaphore::timed_wait	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_semaphore::timed_wait	/usr/include/boost/interprocess/sync/posix/interprocess_semaphore.hpp	/^inline bool interprocess_semaphore::timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_semaphore::try_wait	/usr/include/boost/interprocess/sync/emulation/interprocess_semaphore.hpp	/^inline bool interprocess_semaphore::try_wait()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
boost::interprocess::interprocess_semaphore::try_wait	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   bool try_wait();$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:()
boost::interprocess::interprocess_semaphore::try_wait	/usr/include/boost/interprocess/sync/posix/interprocess_semaphore.hpp	/^inline bool interprocess_semaphore::try_wait()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
boost::interprocess::interprocess_semaphore::wait	/usr/include/boost/interprocess/sync/emulation/interprocess_semaphore.hpp	/^inline void interprocess_semaphore::wait()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
boost::interprocess::interprocess_semaphore::wait	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   void wait();$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:()
boost::interprocess::interprocess_semaphore::wait	/usr/include/boost/interprocess/sync/posix/interprocess_semaphore.hpp	/^inline void interprocess_semaphore::wait()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
boost::interprocess::interprocess_semaphore::~interprocess_semaphore	/usr/include/boost/interprocess/sync/emulation/interprocess_semaphore.hpp	/^inline interprocess_semaphore::~interprocess_semaphore()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
boost::interprocess::interprocess_semaphore::~interprocess_semaphore	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   ~interprocess_semaphore();$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:()
boost::interprocess::interprocess_semaphore::~interprocess_semaphore	/usr/include/boost/interprocess/sync/posix/interprocess_semaphore.hpp	/^inline interprocess_semaphore::~interprocess_semaphore()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
boost::interprocess::interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^class interprocess_upgradable_mutex$/;"	c	namespace:boost::interprocess
boost::interprocess::interprocess_upgradable_mutex::base_constants_t	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   struct base_constants_t$/;"	s	class:boost::interprocess::interprocess_upgradable_mutex	access:private
boost::interprocess::interprocess_upgradable_mutex::base_constants_t::max_readers	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      static const unsigned max_readers $/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::base_constants_t	access:public
boost::interprocess::interprocess_upgradable_mutex::base_constants_t::max_readers	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^const unsigned interprocess_upgradable_mutex::base_constants_t<Dummy>::max_readers;$/;"	m	class:boost::interprocess::interprocess_upgradable_mutex::base_constants_t
boost::interprocess::interprocess_upgradable_mutex::constants	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   typedef base_constants_t<0> constants;$/;"	t	class:boost::interprocess::interprocess_upgradable_mutex	access:private
boost::interprocess::interprocess_upgradable_mutex::control_word_t	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   struct control_word_t$/;"	s	class:boost::interprocess::interprocess_upgradable_mutex	access:private
boost::interprocess::interprocess_upgradable_mutex::control_word_t::exclusive_in	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      unsigned exclusive_in         : 1;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::control_word_t	access:public
boost::interprocess::interprocess_upgradable_mutex::control_word_t::num_upr_shar	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      unsigned num_upr_shar         : sizeof(unsigned)*CHAR_BIT-2;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::control_word_t	access:public
boost::interprocess::interprocess_upgradable_mutex::control_word_t::upgradable_in	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      unsigned upgradable_in        : 1;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::control_word_t	access:public
boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   struct exclusive_rollback$/;"	s	class:boost::interprocess::interprocess_upgradable_mutex	access:private
boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback::exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      exclusive_rollback(control_word_t         &ctrl$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	access:public	signature:(control_word_t &ctrl ,interprocess_condition &first_gate)
boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback::mp_ctrl	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      control_word_t          *mp_ctrl;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	access:public
boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback::m_first_gate	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      interprocess_condition  &m_first_gate;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	access:public
boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback::release	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      void release()$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback::~exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      ~exclusive_rollback()$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_upgradable_mutex();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_upgradable_mutex(const interprocess_upgradable_mutex &);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:private	signature:(const interprocess_upgradable_mutex &)
boost::interprocess::interprocess_upgradable_mutex::interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline interprocess_upgradable_mutex::interprocess_upgradable_mutex()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::lock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void lock_sharable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::lock_sharable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void lock_upgradable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::lock_upgradable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::m_ctrl	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   }                       m_ctrl;$/;"	m	class:boost::interprocess::interprocess_upgradable_mutex	typeref:struct:boost::interprocess::interprocess_upgradable_mutex::control_word_t	access:private
boost::interprocess::interprocess_upgradable_mutex::m_first_gate	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_condition  m_first_gate;$/;"	m	class:boost::interprocess::interprocess_upgradable_mutex	access:private
boost::interprocess::interprocess_upgradable_mutex::m_mut	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_mutex      m_mut;$/;"	m	class:boost::interprocess::interprocess_upgradable_mutex	access:private
boost::interprocess::interprocess_upgradable_mutex::m_second_gate	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_condition  m_second_gate;$/;"	m	class:boost::interprocess::interprocess_upgradable_mutex	access:private
boost::interprocess::interprocess_upgradable_mutex::operator =	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_upgradable_mutex &operator=(const interprocess_upgradable_mutex &);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:private	signature:(const interprocess_upgradable_mutex &)
boost::interprocess::interprocess_upgradable_mutex::scoped_lock_t	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   typedef scoped_lock<interprocess_mutex> scoped_lock_t;$/;"	t	class:boost::interprocess::interprocess_upgradable_mutex	access:private
boost::interprocess::interprocess_upgradable_mutex::timed_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_upgradable_mutex::timed_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::timed_lock$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_upgradable_mutex::timed_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_upgradable_mutex::timed_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::timed_lock_sharable$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_upgradable_mutex::timed_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool timed_lock_upgradable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_upgradable_mutex::timed_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::timed_lock_upgradable$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_upgradable_mutex::timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool timed_unlock_upgradable_and_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_upgradable_mutex::timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::timed_unlock_upgradable_and_lock$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::interprocess_upgradable_mutex::try_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_lock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_lock_sharable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_lock_sharable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_lock_upgradable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_lock_upgradable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_unlock_sharable_and_lock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_unlock_sharable_and_lock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_unlock_sharable_and_lock_upgradable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_unlock_sharable_and_lock_upgradable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_unlock_upgradable_and_lock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_and_lock_sharable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_and_lock_sharable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_and_lock_upgradable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_and_lock_upgradable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_sharable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_sharable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_upgradable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_upgradable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_upgradable_and_lock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_upgradable_and_lock_sharable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_upgradable_and_lock_sharable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   struct upgradable_to_exclusive_rollback$/;"	s	class:boost::interprocess::interprocess_upgradable_mutex	access:private
boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback::mp_ctrl	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      control_word_t          *mp_ctrl;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback	access:public
boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback::release	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      void release()$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback::upgradable_to_exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      upgradable_to_exclusive_rollback(control_word_t         &ctrl)$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback	access:public	signature:(control_word_t &ctrl)
boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback::~upgradable_to_exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      ~upgradable_to_exclusive_rollback()$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::~interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   ~interprocess_upgradable_mutex();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
boost::interprocess::interprocess_upgradable_mutex::~interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline interprocess_upgradable_mutex::~interprocess_upgradable_mutex()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
boost::interprocess::intersegment_base	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^struct intersegment_base$/;"	s	namespace:boost::interprocess
boost::interprocess::intersegment_base::align	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t align      = std::size_t(1) << align_bits;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::align_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t align_bits = 12;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::begin_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t begin_bits             = max_segment_size_bits - align_bits;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   BOOST_STATIC_ASSERT(((size_t_bits - pow_size_bits - frc_size_bits) >= ctrl_bits ));$/;"	p	struct:boost::interprocess::intersegment_base	access:public	signature:((size_t_bits - pow_size_bits - frc_size_bits) >= ctrl_bits )
boost::interprocess::intersegment_base::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   BOOST_STATIC_ASSERT((sizeof(std::size_t) == sizeof(void*)));$/;"	p	struct:boost::interprocess::intersegment_base	access:public	signature:(sizeof(std::size_t) == sizeof(void*))
boost::interprocess::intersegment_base::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   BOOST_STATIC_ASSERT((sizeof(void*)*CHAR_BIT == 32 || sizeof(void*)*CHAR_BIT == 64));$/;"	p	struct:boost::interprocess::intersegment_base	access:public	signature:(sizeof(void*)*CHAR_BIT == 32 || sizeof(void*)*CHAR_BIT == 64)
boost::interprocess::intersegment_base::calculate_size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static std::size_t calculate_size(std::size_t orig_size, std::size_t &pow, std::size_t &frc)$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:(std::size_t orig_size, std::size_t &pow, std::size_t &frc)
boost::interprocess::intersegment_base::ctrl_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t ctrl_bits = 2;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::direct_addressing	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   struct direct_addressing$/;"	s	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::direct_addressing::addr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      void * addr;$/;"	m	struct:boost::interprocess::intersegment_base::direct_addressing	access:public
boost::interprocess::intersegment_base::direct_addressing::ctrl	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t ctrl     :  2;$/;"	m	struct:boost::interprocess::intersegment_base::direct_addressing	access:public
boost::interprocess::intersegment_base::direct_addressing::dummy	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t dummy    :  sizeof(std::size_t)*CHAR_BIT - 2;$/;"	m	struct:boost::interprocess::intersegment_base::direct_addressing	access:public
boost::interprocess::intersegment_base::frc_size_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t frc_size_bits =$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::get_mode	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   std::size_t get_mode()const$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:() const
boost::interprocess::intersegment_base::intersegment_base	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_base()$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:()
boost::interprocess::intersegment_base::is_in_stack	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t is_in_stack         = 1;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::is_max_mode	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t is_max_mode         = 4;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::is_null	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool is_null() const$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:() const
boost::interprocess::intersegment_base::is_pointee_outside	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t is_pointee_outside  = 0;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::is_relative	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t is_relative         = 2;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::is_segmented	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t is_segmented        = 3;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::max_segment_size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t max_segment_size = std::size_t(1) << max_segment_size_bits;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::max_segment_size_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t max_segment_size_bits = size_t_bits - 2;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::members	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   } members;$/;"	m	struct:boost::interprocess::intersegment_base	typeref:union:boost::interprocess::intersegment_base::members_t	access:public
boost::interprocess::intersegment_base::members_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   union members_t{$/;"	u	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::members_t::direct	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      direct_addressing    direct;$/;"	m	union:boost::interprocess::intersegment_base::members_t	access:public
boost::interprocess::intersegment_base::members_t::relative	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      relative_addressing  relative;$/;"	m	union:boost::interprocess::intersegment_base::members_t	access:public
boost::interprocess::intersegment_base::members_t::segmented	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      segmented_addressing segmented;$/;"	m	union:boost::interprocess::intersegment_base::members_t	access:public
boost::interprocess::intersegment_base::pow_size_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t pow_size_bits = $/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::pow_size_bits_helper	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t pow_size_bits_helper = static_log2<max_segment_size_bits>::value;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::relative_addressing	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   struct relative_addressing$/;"	s	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::relative_addressing::beg	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t beg      :  begin_bits;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
boost::interprocess::intersegment_base::relative_addressing::bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::ptrdiff_t bits  :  2;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
boost::interprocess::intersegment_base::relative_addressing::ctrl	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t ctrl     :  2;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
boost::interprocess::intersegment_base::relative_addressing::frc	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t frc      :  frc_size_bits;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
boost::interprocess::intersegment_base::relative_addressing::off	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::ptrdiff_t off   :  sizeof(ptrdiff_t)*CHAR_BIT - 2;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
boost::interprocess::intersegment_base::relative_addressing::pow	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t pow      :  pow_size_bits;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
boost::interprocess::intersegment_base::relative_calculate_begin_addr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void *relative_calculate_begin_addr() const$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:() const
boost::interprocess::intersegment_base::relative_set_begin_from_base	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void relative_set_begin_from_base(void *addr)$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:(void *addr)
boost::interprocess::intersegment_base::relative_size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   std::size_t relative_size() const$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:() const
boost::interprocess::intersegment_base::relative_size_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t relative_size_bits =$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::round_size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static std::size_t round_size(std::size_t orig_size)$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:(std::size_t orig_size)
boost::interprocess::intersegment_base::segmented_addressing	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   struct segmented_addressing$/;"	s	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::segmented_addressing::bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t bits     :  2;$/;"	m	struct:boost::interprocess::intersegment_base::segmented_addressing	access:public
boost::interprocess::intersegment_base::segmented_addressing::ctrl	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t ctrl     :  2;$/;"	m	struct:boost::interprocess::intersegment_base::segmented_addressing	access:public
boost::interprocess::intersegment_base::segmented_addressing::off	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t off      :  sizeof(std::size_t)*CHAR_BIT - 2;$/;"	m	struct:boost::interprocess::intersegment_base::segmented_addressing	access:public
boost::interprocess::intersegment_base::segmented_addressing::segment	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t segment  :  sizeof(std::size_t)*CHAR_BIT - 2;$/;"	m	struct:boost::interprocess::intersegment_base::segmented_addressing	access:public
boost::interprocess::intersegment_base::self_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef intersegment_base  self_t;$/;"	t	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::set_mode	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void set_mode(std::size_t mode)$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:(std::size_t mode)
boost::interprocess::intersegment_base::set_null	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void set_null()$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:()
boost::interprocess::intersegment_base::sizeof	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   BOOST_STATIC_ASSERT(sizeof(members_t) == 2*sizeof(std::size_t));$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_base::size_t_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t size_t_bits = (sizeof(void*)*CHAR_BIT == 32) ? 32 : 64;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
boost::interprocess::intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^class intersegment_ptr : public flat_map_intersegment<interprocess_mutex>$/;"	c	namespace:boost::interprocess	inherits:flat_map_intersegment
boost::interprocess::intersegment_ptr::base_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef PT                                      base_t;$/;"	t	class:boost::interprocess::intersegment_ptr	access:private
boost::interprocess::intersegment_ptr::difference_type	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef std::ptrdiff_t                          difference_type;$/;"	t	class:boost::interprocess::intersegment_ptr	access:public
boost::interprocess::intersegment_ptr::get	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   pointer get()const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:() const
boost::interprocess::intersegment_ptr::intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr& ptr) $/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr& ptr)
boost::interprocess::intersegment_ptr::intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr<T2> &ptr) $/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<T2> &ptr)
boost::interprocess::intersegment_ptr::intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr<U> &r, detail::const_cast_tag)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<U> &r, detail::const_cast_tag)
boost::interprocess::intersegment_ptr::intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr<U> &r, detail::dynamic_cast_tag)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<U> &r, detail::dynamic_cast_tag)
boost::interprocess::intersegment_ptr::intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr<U> &r, detail::reinterpret_cast_tag)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<U> &r, detail::reinterpret_cast_tag)
boost::interprocess::intersegment_ptr::intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr<U> &r, detail::static_cast_tag)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<U> &r, detail::static_cast_tag)
boost::interprocess::intersegment_ptr::intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(pointer ptr = 0)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(pointer ptr = 0)
boost::interprocess::intersegment_ptr::intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(U *ptr){  base_t::set_from_pointer(pointer(ptr)); }$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(U *ptr)
boost::interprocess::intersegment_ptr::iterator_category	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef std::random_access_iterator_tag         iterator_category;$/;"	t	class:boost::interprocess::intersegment_ptr	access:public
boost::interprocess::intersegment_ptr::operator !	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool operator! () const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:() const
boost::interprocess::intersegment_ptr::operator *	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   reference operator* () const           $/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:() const
boost::interprocess::intersegment_ptr::operator +	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr operator+ (std::ptrdiff_t idx) const   $/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(std::ptrdiff_t idx) const
boost::interprocess::intersegment_ptr::operator ++	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr operator++ (int)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(int)
boost::interprocess::intersegment_ptr::operator ++	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr& operator++ (void)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(void)
boost::interprocess::intersegment_ptr::operator +=	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr &operator+= (std::ptrdiff_t offset)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(std::ptrdiff_t offset)
boost::interprocess::intersegment_ptr::operator -	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr operator- (std::ptrdiff_t idx) const   $/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(std::ptrdiff_t idx) const
boost::interprocess::intersegment_ptr::operator --	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr operator-- (int)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(int)
boost::interprocess::intersegment_ptr::operator --	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr& operator-- (void)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(void)
boost::interprocess::intersegment_ptr::operator -=	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr &operator-= (std::ptrdiff_t offset)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(std::ptrdiff_t offset)
boost::interprocess::intersegment_ptr::operator ->	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   pointer operator->() const           $/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:() const
boost::interprocess::intersegment_ptr::operator =	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr& operator= (const intersegment_ptr &ptr)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr &ptr)
boost::interprocess::intersegment_ptr::operator =	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr& operator= (const intersegment_ptr<T2> & ptr)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<T2> & ptr)
boost::interprocess::intersegment_ptr::operator =	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr& operator= (pointer from)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(pointer from)
boost::interprocess::intersegment_ptr::operator unspecified_bool_type	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   operator unspecified_bool_type() const  $/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:() const
boost::interprocess::intersegment_ptr::operator []	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   reference operator[](std::ptrdiff_t idx) const   $/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(std::ptrdiff_t idx) const
boost::interprocess::intersegment_ptr::pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef T *                                     pointer;$/;"	t	class:boost::interprocess::intersegment_ptr	access:public
boost::interprocess::intersegment_ptr::PT	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef flat_map_intersegment<interprocess_mutex> PT;$/;"	t	class:boost::interprocess::intersegment_ptr	access:private
boost::interprocess::intersegment_ptr::reference	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef typename detail::add_reference<T>::type reference;$/;"	t	class:boost::interprocess::intersegment_ptr	access:public
boost::interprocess::intersegment_ptr::self_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef intersegment_ptr<T>                  self_t;$/;"	t	class:boost::interprocess::intersegment_ptr	access:private
boost::interprocess::intersegment_ptr::swap	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void swap(intersegment_ptr &other)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(intersegment_ptr &other)
boost::interprocess::intersegment_ptr::unspecified_bool_type_func	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void unspecified_bool_type_func() const {}$/;"	f	class:boost::interprocess::intersegment_ptr	access:private	signature:() const
boost::interprocess::intersegment_ptr::value_type	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef T                                       value_type;$/;"	t	class:boost::interprocess::intersegment_ptr	access:public
boost::interprocess::intersegment_ptr::_diff	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   ptrdiff_t _diff(const intersegment_ptr<T2> &other) const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<T2> &other) const
boost::interprocess::intersegment_ptr::_equal	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool _equal(const intersegment_ptr<T2>&other) const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<T2>&other) const
boost::interprocess::intersegment_ptr::_less	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool _less(const intersegment_ptr<T2> &other) const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<T2> &other) const
boost::interprocess::intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^class intrusive_ptr$/;"	c	namespace:boost::interprocess
boost::interprocess::intrusive_ptr::element_type	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   typedef T element_type;$/;"	t	class:boost::interprocess::intrusive_ptr	access:public
boost::interprocess::intrusive_ptr::get	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   const pointer &get() const$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:() const
boost::interprocess::intrusive_ptr::get	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   pointer &get()$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:()
boost::interprocess::intrusive_ptr::intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   intrusive_ptr(): m_ptr(0)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:()
boost::interprocess::intrusive_ptr::intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   intrusive_ptr(const pointer &p, bool add_ref = true): m_ptr(p)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(const pointer &p, bool add_ref = true)
boost::interprocess::intrusive_ptr::intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   intrusive_ptr(intrusive_ptr const & rhs)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(intrusive_ptr const & rhs)
boost::interprocess::intrusive_ptr::intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   template<class U> intrusive_ptr$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(intrusive_ptr<U, VP> const & rhs)
boost::interprocess::intrusive_ptr::m_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   pointer m_ptr;$/;"	m	class:boost::interprocess::intrusive_ptr	access:private
boost::interprocess::intrusive_ptr::operator !	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   bool operator! () const$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:() const
boost::interprocess::intrusive_ptr::operator *	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   T & operator*() const$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:() const
boost::interprocess::intrusive_ptr::operator ->	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   const pointer &operator->() const$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:() const
boost::interprocess::intrusive_ptr::operator ->	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   pointer &operator->()$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:()
boost::interprocess::intrusive_ptr::operator =	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   intrusive_ptr & operator=(intrusive_ptr const & rhs)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(intrusive_ptr const & rhs)
boost::interprocess::intrusive_ptr::operator =	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   intrusive_ptr & operator=(pointer rhs)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(pointer rhs)
boost::interprocess::intrusive_ptr::operator =	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   template<class U> intrusive_ptr & operator=$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(intrusive_ptr<U, VP> const & rhs)
boost::interprocess::intrusive_ptr::operator unspecified_bool_type	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   operator unspecified_bool_type () const$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:() const
boost::interprocess::intrusive_ptr::pointer	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   typedef typename boost::pointer_to_other<VoidPointer, T>::type pointer;$/;"	t	class:boost::interprocess::intrusive_ptr	access:public
boost::interprocess::intrusive_ptr::swap	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   void swap(intrusive_ptr & rhs)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(intrusive_ptr & rhs)
boost::interprocess::intrusive_ptr::this_type	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   typedef intrusive_ptr this_type;$/;"	t	class:boost::interprocess::intrusive_ptr	access:private
boost::interprocess::intrusive_ptr::this_type::unspecified_bool_type	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   typedef pointer this_type::*unspecified_bool_type;$/;"	t	class:boost::interprocess::intrusive_ptr::this_type	access:private
boost::interprocess::intrusive_ptr::VP	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   typedef VoidPointer VP;$/;"	t	class:boost::interprocess::intrusive_ptr	access:private
boost::interprocess::intrusive_ptr::~intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   ~intrusive_ptr()$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:()
boost::interprocess::invalid_argument	/usr/include/boost/interprocess/errors.hpp	/^   invalid_argument$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::invalid_file	/usr/include/boost/interprocess/mapped_region.hpp	/^   ,  m_file_mapping_hnd(detail::invalid_file())$/;"	f	namespace:boost::interprocess	signature:()
boost::interprocess::invalid_mode	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , invalid_mode   = 0xffff $/;"	e	enum:boost::interprocess::__anon10
boost::interprocess::io_error	/usr/include/boost/interprocess/errors.hpp	/^   io_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::iset_index	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^class iset_index$/;"	c	namespace:boost::interprocess	inherits:iset_index_aux::index_t
boost::interprocess::iset_index::char_type	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename MapConfig::char_type                 char_type;$/;"	t	class:boost::interprocess::iset_index	access:private
boost::interprocess::iset_index::const_iterator	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename index_type::const_iterator           const_iterator;$/;"	t	class:boost::interprocess::iset_index	access:public
boost::interprocess::iset_index::find	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   const_iterator find(const intrusive_compare_key_type &key) const$/;"	f	class:boost::interprocess::iset_index	access:public	signature:(const intrusive_compare_key_type &key) const
boost::interprocess::iset_index::find	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   iterator find(const intrusive_compare_key_type &key)$/;"	f	class:boost::interprocess::iset_index	access:public	signature:(const intrusive_compare_key_type &key)
boost::interprocess::iset_index::index_aux	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef iset_index_aux<MapConfig>                     index_aux;$/;"	t	class:boost::interprocess::iset_index	access:private
boost::interprocess::iset_index::index_type	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename index_aux::index_t                   index_type;$/;"	t	class:boost::interprocess::iset_index	access:private
boost::interprocess::iset_index::insert_check	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   std::pair<iterator, bool>insert_check$/;"	f	class:boost::interprocess::iset_index	access:public	signature:(const intrusive_compare_key_type &key, insert_commit_data &commit_data)
boost::interprocess::iset_index::insert_commit_data	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename index_type::insert_commit_data       insert_commit_data;$/;"	t	class:boost::interprocess::iset_index	access:public
boost::interprocess::iset_index::intrusive_compare_key_type	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      intrusive_compare_key_type                         intrusive_compare_key_type;$/;"	t	class:boost::interprocess::iset_index	access:private
boost::interprocess::iset_index::intrusive_key_value_less	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   struct intrusive_key_value_less$/;"	s	class:boost::interprocess::iset_index	access:private
boost::interprocess::iset_index::intrusive_key_value_less::operator ()	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      bool operator()(const intrusive_compare_key_type &i, const value_type &b) const$/;"	f	struct:boost::interprocess::iset_index::intrusive_key_value_less	access:public	signature:(const intrusive_compare_key_type &i, const value_type &b) const
boost::interprocess::iset_index::intrusive_key_value_less::operator ()	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      bool operator()(const value_type &b, const intrusive_compare_key_type &i) const$/;"	f	struct:boost::interprocess::iset_index::intrusive_key_value_less	access:public	signature:(const value_type &b, const intrusive_compare_key_type &i) const
boost::interprocess::iset_index::iset_index	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   iset_index(typename MapConfig::segment_manager_base *)$/;"	f	class:boost::interprocess::iset_index	access:public	signature:(typename MapConfig::segment_manager_base *)
boost::interprocess::iset_index::iterator	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename index_type::iterator                 iterator;$/;"	t	class:boost::interprocess::iset_index	access:public
boost::interprocess::iset_index::reserve	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   void reserve(std::size_t)$/;"	f	class:boost::interprocess::iset_index	access:public	signature:(std::size_t)
boost::interprocess::iset_index::shrink_to_fit	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::iset_index	access:public	signature:()
boost::interprocess::iset_index::value_type	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename index_type::value_type               value_type;$/;"	t	class:boost::interprocess::iset_index	access:public
boost::interprocess::iset_index_aux	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^struct iset_index_aux$/;"	s	namespace:boost::interprocess
boost::interprocess::iset_index_aux::derivation_hook	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      >::type                                                  derivation_hook;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
boost::interprocess::iset_index_aux::index_t	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      >::type                                                  index_t;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
boost::interprocess::iset_index_aux::segment_manager_base	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      MapConfig::segment_manager_base                          segment_manager_base;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
boost::interprocess::iset_index_aux::value_compare	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef std::less<value_type>                               value_compare;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
boost::interprocess::iset_index_aux::value_type	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      intrusive_value_type<derivation_hook>::type              value_type;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
boost::interprocess::iset_index_aux::void_pointer	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      segment_manager_base::void_pointer                       void_pointer;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
boost::interprocess::is_directory_error	/usr/include/boost/interprocess/errors.hpp	/^   is_directory_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::is_intrusive_index	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^struct is_intrusive_index$/;"	s	namespace:boost::interprocess
boost::interprocess::is_intrusive_index	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^struct is_intrusive_index$/;"	s	namespace:boost::interprocess
boost::interprocess::is_intrusive_index::value	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   enum{ value = true };$/;"	e	enum:boost::interprocess::is_intrusive_index::__anon21
boost::interprocess::is_intrusive_index::value	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   enum{ value = true };$/;"	e	enum:boost::interprocess::is_intrusive_index::__anon23
boost::interprocess::is_movable	/usr/include/boost/interprocess/detail/move.hpp	/^class is_movable$/;"	c	namespace:boost::interprocess	inherits:::boost::mpl::bool_
boost::interprocess::is_movable	/usr/include/boost/interprocess/detail/move.hpp	/^class is_movable< rv<T> >$/;"	c	namespace:boost::interprocess	inherits:::boost::mpl::bool_
boost::interprocess::is_multisegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^struct is_multisegment_ptr$/;"	s	namespace:boost::interprocess
boost::interprocess::is_multisegment_ptr::value	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const bool value = true;$/;"	m	struct:boost::interprocess::is_multisegment_ptr	access:public
boost::interprocess::is_node_index	/usr/include/boost/interprocess/indexes/map_index.hpp	/^struct is_node_index$/;"	s	namespace:boost::interprocess
boost::interprocess::is_node_index	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^struct is_node_index$/;"	s	namespace:boost::interprocess
boost::interprocess::is_node_index::value	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   enum {   value = true };$/;"	e	enum:boost::interprocess::is_node_index::__anon24
boost::interprocess::is_node_index::value	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   enum {   value = true };$/;"	e	enum:boost::interprocess::is_node_index::__anon25
boost::interprocess::iunordered_set_index	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^class iunordered_set_index$/;"	c	namespace:boost::interprocess	inherits:iunordered_set_index_aux::allocator_holder,iunordered_set_index_aux::index_t
boost::interprocess::iunordered_set_index::allocator_holder	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      iunordered_set_index_aux<MapConfig>::allocator_holder    allocator_holder;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
boost::interprocess::iunordered_set_index::allocator_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      iunordered_set_index_aux<MapConfig>::allocator_type      allocator_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
boost::interprocess::iunordered_set_index::bucket_ptr	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::bucket_ptr               bucket_ptr;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
boost::interprocess::iunordered_set_index::bucket_traits	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::bucket_traits            bucket_traits;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
boost::interprocess::iunordered_set_index::bucket_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::bucket_type              bucket_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
boost::interprocess::iunordered_set_index::char_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename MapConfig::char_type                 char_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
boost::interprocess::iunordered_set_index::const_iterator	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::const_iterator           const_iterator;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
boost::interprocess::iunordered_set_index::create_buckets	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   static bucket_ptr create_buckets(allocator_type &alloc, std::size_t num)$/;"	f	class:boost::interprocess::iunordered_set_index	access:private	signature:(allocator_type &alloc, std::size_t num)
boost::interprocess::iunordered_set_index::destroy_buckets	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   static void destroy_buckets$/;"	f	class:boost::interprocess::iunordered_set_index	access:private	signature:(allocator_type &alloc, bucket_ptr buckets, std::size_t num)
boost::interprocess::iunordered_set_index::equal_function	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_aux::equal_function            equal_function;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
boost::interprocess::iunordered_set_index::expand_or_create_buckets	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   static bucket_ptr expand_or_create_buckets$/;"	f	class:boost::interprocess::iunordered_set_index	access:private	signature:( bucket_ptr old_buckets, const std::size_t old_num , allocator_type &alloc, const std::size_t new_num)
boost::interprocess::iunordered_set_index::find	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   const_iterator find(const intrusive_compare_key_type &key) const$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(const intrusive_compare_key_type &key) const
boost::interprocess::iunordered_set_index::find	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   iterator find(const intrusive_compare_key_type &key)$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(const intrusive_compare_key_type &key)
boost::interprocess::iunordered_set_index::get_this_pointer	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   iunordered_set_index<MapConfig>* get_this_pointer()$/;"	f	class:boost::interprocess::iunordered_set_index	access:private	signature:()
boost::interprocess::iunordered_set_index::hash_function	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_aux::hash_function             hash_function;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
boost::interprocess::iunordered_set_index::index_aux	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef iunordered_set_index_aux<MapConfig>           index_aux;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
boost::interprocess::iunordered_set_index::index_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_aux::index_t                   index_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
boost::interprocess::iunordered_set_index::InitBufferSize	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   enum {   InitBufferSize = 64};$/;"	e	enum:boost::interprocess::iunordered_set_index::__anon22
boost::interprocess::iunordered_set_index::insert_check	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   std::pair<iterator, bool>insert_check$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(const intrusive_compare_key_type &key, insert_commit_data &commit_data)
boost::interprocess::iunordered_set_index::insert_commit	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   iterator insert_commit(value_type &val, insert_commit_data &commit_data)$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(value_type &val, insert_commit_data &commit_data)
boost::interprocess::iunordered_set_index::insert_commit_data	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::insert_commit_data       insert_commit_data;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
boost::interprocess::iunordered_set_index::intrusive_compare_key_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      intrusive_compare_key_type                         intrusive_compare_key_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
boost::interprocess::iunordered_set_index::iterator	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::iterator                 iterator;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
boost::interprocess::iunordered_set_index::iunordered_set_index	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   iunordered_set_index(segment_manager_base *mngr)$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(segment_manager_base *mngr)
boost::interprocess::iunordered_set_index::reserve	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   void reserve(std::size_t new_n)$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(std::size_t new_n)
boost::interprocess::iunordered_set_index::segment_manager_base	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      segment_manager_base             segment_manager_base;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
boost::interprocess::iunordered_set_index::shrink_buckets	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   static std::size_t shrink_buckets$/;"	f	class:boost::interprocess::iunordered_set_index	access:private	signature:( bucket_ptr buckets, std::size_t old_size , allocator_type &alloc, std::size_t new_size)
boost::interprocess::iunordered_set_index::shrink_to_fit	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:()
boost::interprocess::iunordered_set_index::size_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::size_type                size_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
boost::interprocess::iunordered_set_index::value_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::value_type               value_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
boost::interprocess::iunordered_set_index::~iunordered_set_index	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   ~iunordered_set_index()$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:()
boost::interprocess::iunordered_set_index_aux	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^struct iunordered_set_index_aux$/;"	s	namespace:boost::interprocess
boost::interprocess::iunordered_set_index_aux::allocator_holder	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   struct allocator_holder$/;"	s	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::allocator_holder::alloc	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      allocator_type alloc;$/;"	m	struct:boost::interprocess::iunordered_set_index_aux::allocator_holder	access:public
boost::interprocess::iunordered_set_index_aux::allocator_holder::allocator_holder	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      allocator_holder(segment_manager_base *mngr)$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::allocator_holder	access:public	signature:(segment_manager_base *mngr)
boost::interprocess::iunordered_set_index_aux::allocator_holder::init_bucket	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      bucket_type init_bucket;$/;"	m	struct:boost::interprocess::iunordered_set_index_aux::allocator_holder	access:public
boost::interprocess::iunordered_set_index_aux::allocator_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      <bucket_type, segment_manager_base>             allocator_type;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::bucket_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_t::bucket_type              bucket_type;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::char_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename MapConfig::char_type              char_type;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::derivation_hook	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      >::type        derivation_hook;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::equal_function	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   struct equal_function$/;"	s	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::equal_function::operator ()	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      bool operator()(const intrusive_compare_key_type &i, const value_type &b) const$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::equal_function	access:public	signature:(const intrusive_compare_key_type &i, const value_type &b) const
boost::interprocess::iunordered_set_index_aux::equal_function::operator ()	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      bool operator()(const value_type &b, const intrusive_compare_key_type &i) const$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::equal_function	access:public	signature:(const value_type &b, const intrusive_compare_key_type &i) const
boost::interprocess::iunordered_set_index_aux::equal_function::operator ()	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      bool operator()(const value_type &b1, const value_type &b2) const$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::equal_function	access:public	signature:(const value_type &b1, const value_type &b2) const
boost::interprocess::iunordered_set_index_aux::hash_function	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^    struct hash_function$/;"	s	struct:boost::interprocess::iunordered_set_index_aux	inherits:std::unary_function	access:public
boost::interprocess::iunordered_set_index_aux::hash_function::operator ()	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^        std::size_t operator()(const intrusive_compare_key_type &i) const$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::hash_function	access:public	signature:(const intrusive_compare_key_type &i) const
boost::interprocess::iunordered_set_index_aux::hash_function::operator ()	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^        std::size_t operator()(const value_type &val) const$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::hash_function	access:public	signature:(const value_type &val) const
boost::interprocess::iunordered_set_index_aux::index_t	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      >::type                                         index_t;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::intrusive_compare_key_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      intrusive_compare_key_type                      intrusive_compare_key_type;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::segment_manager_base	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      MapConfig::segment_manager_base                 segment_manager_base;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::value_equal	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef std::equal_to<value_type>                  value_equal;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::value_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      intrusive_value_type<derivation_hook>::type     value_type;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::iunordered_set_index_aux::void_pointer	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      segment_manager_base::void_pointer              void_pointer;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
boost::interprocess::lock_error	/usr/include/boost/interprocess/errors.hpp	/^   lock_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::lock_exception	/usr/include/boost/interprocess/exceptions.hpp	/^class lock_exception : public interprocess_exception$/;"	c	namespace:boost::interprocess	inherits:interprocess_exception
boost::interprocess::lock_exception::lock_exception	/usr/include/boost/interprocess/exceptions.hpp	/^   lock_exception()$/;"	f	class:boost::interprocess::lock_exception	access:public	signature:()
boost::interprocess::lock_exception::what	/usr/include/boost/interprocess/exceptions.hpp	/^   virtual const char* what() const throw()$/;"	f	class:boost::interprocess::lock_exception	access:public	signature:() const
boost::interprocess::lookup_error	/usr/include/boost/interprocess/errors.hpp	/^inline error_code_t lookup_error(native_error_t err)$/;"	f	namespace:boost::interprocess	signature:(native_error_t err)
boost::interprocess::make_managed_shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   make_managed_shared_ptr(T *constructed_object, ManagedMemory &managed_memory)$/;"	f	namespace:boost::interprocess	signature:(T *constructed_object, ManagedMemory &managed_memory)
boost::interprocess::make_managed_unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   make_managed_unique_ptr(T *constructed_object, ManagedMemory &managed_memory)$/;"	f	namespace:boost::interprocess	signature:(T *constructed_object, ManagedMemory &managed_memory)
boost::interprocess::make_managed_weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   make_managed_weak_ptr(T *constructed_object, ManagedMemory &managed_memory)$/;"	f	namespace:boost::interprocess	signature:(T *constructed_object, ManagedMemory &managed_memory)
boost::interprocess::make_move_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^move_iterator<It> make_move_iterator(const It &it)$/;"	f	namespace:boost::interprocess	signature:(const It &it)
boost::interprocess::make_transform_iterator	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^make_transform_iterator(Iterator it, UnaryFunc fun)$/;"	f	namespace:boost::interprocess	signature:(Iterator it, UnaryFunc fun)
boost::interprocess::managed_external_buffer	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_external_buffer;$/;"	t	namespace:boost::interprocess
boost::interprocess::managed_heap_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_heap_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::managed_mapped_file	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_mapped_file;$/;"	t	namespace:boost::interprocess
boost::interprocess::managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   managed_multi_shared_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::managed_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_shared_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::managed_shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^struct managed_shared_ptr$/;"	s	namespace:boost::interprocess
boost::interprocess::managed_shared_ptr::deleter	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef typename ManagedMemory::template deleter<T>::type      deleter;$/;"	t	struct:boost::interprocess::managed_shared_ptr	access:public
boost::interprocess::managed_shared_ptr::type	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef shared_ptr< T, void_allocator, deleter>                type;$/;"	t	struct:boost::interprocess::managed_shared_ptr	access:public
boost::interprocess::managed_shared_ptr::void_allocator	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef typename ManagedMemory::template allocator<void>::type void_allocator;$/;"	t	struct:boost::interprocess::managed_shared_ptr	access:public
boost::interprocess::managed_unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^struct managed_unique_ptr$/;"	s	namespace:boost::interprocess
boost::interprocess::managed_unique_ptr::type	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   > type;$/;"	t	struct:boost::interprocess::managed_unique_ptr	access:public
boost::interprocess::managed_weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^struct managed_weak_ptr$/;"	s	namespace:boost::interprocess
boost::interprocess::managed_weak_ptr::type	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   > type;$/;"	t	struct:boost::interprocess::managed_weak_ptr	access:public
boost::interprocess::managed_windows_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_windows_shared_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::managed_xsi_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_xsi_shared_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^class mapped_region$/;"	c	namespace:boost::interprocess
boost::interprocess::mapped_region::dont_close_on_destruction	/usr/include/boost/interprocess/mapped_region.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:()
boost::interprocess::mapped_region::dont_close_on_destruction	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void mapped_region::dont_close_on_destruction()$/;"	f	class:boost::interprocess::mapped_region	signature:()
boost::interprocess::mapped_region::flush	/usr/include/boost/interprocess/mapped_region.hpp	/^   bool flush(std::size_t mapping_offset = 0, std::size_t numbytes = 0);$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:(std::size_t mapping_offset = 0, std::size_t numbytes = 0)
boost::interprocess::mapped_region::flush	/usr/include/boost/interprocess/mapped_region.hpp	/^inline bool mapped_region::flush(std::size_t mapping_offset, std::size_t numbytes)$/;"	f	class:boost::interprocess::mapped_region	signature:(std::size_t mapping_offset, std::size_t numbytes)
boost::interprocess::mapped_region::get_address	/usr/include/boost/interprocess/mapped_region.hpp	/^   void*       get_address() const;$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:() const
boost::interprocess::mapped_region::get_address	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void*    mapped_region::get_address()  const  $/;"	f	class:boost::interprocess::mapped_region	signature:() const
boost::interprocess::mapped_region::get_mode	/usr/include/boost/interprocess/mapped_region.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:() const
boost::interprocess::mapped_region::get_mode	/usr/include/boost/interprocess/mapped_region.hpp	/^inline mode_t mapped_region::get_mode()  const  $/;"	f	class:boost::interprocess::mapped_region	signature:() const
boost::interprocess::mapped_region::get_offset	/usr/include/boost/interprocess/mapped_region.hpp	/^   offset_t    get_offset() const;$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:() const
boost::interprocess::mapped_region::get_offset	/usr/include/boost/interprocess/mapped_region.hpp	/^inline offset_t mapped_region::get_offset()  const  $/;"	f	class:boost::interprocess::mapped_region	signature:() const
boost::interprocess::mapped_region::get_page_size	/usr/include/boost/interprocess/mapped_region.hpp	/^   static std::size_t get_page_size();$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:()
boost::interprocess::mapped_region::get_page_size	/usr/include/boost/interprocess/mapped_region.hpp	/^inline std::size_t mapped_region::get_page_size()$/;"	f	class:boost::interprocess::mapped_region	signature:()
boost::interprocess::mapped_region::get_size	/usr/include/boost/interprocess/mapped_region.hpp	/^   std::size_t get_size() const;$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:() const
boost::interprocess::mapped_region::get_size	/usr/include/boost/interprocess/mapped_region.hpp	/^inline std::size_t mapped_region::get_size()  const  $/;"	f	class:boost::interprocess::mapped_region	signature:() const
boost::interprocess::mapped_region::mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^   mapped_region();$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:()
boost::interprocess::mapped_region::mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^   mapped_region(const MemoryMappable& mapping$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:(const MemoryMappable& mapping ,mode_t mode ,offset_t offset = 0 ,std::size_t size = 0 ,const void *address = 0)
boost::interprocess::mapped_region::mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^inline mapped_region::mapped_region$/;"	f	class:boost::interprocess::mapped_region	signature:(const MemoryMappable &mapping ,mode_t mode ,offset_t offset ,std::size_t size ,const void *address)
boost::interprocess::mapped_region::mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^inline mapped_region::mapped_region$/;"	f	class:boost::interprocess::mapped_region	signature:(const MemoryMappable &mapping, mode_t mode, offset_t offset, std::size_t size, const void *address)
boost::interprocess::mapped_region::mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^inline mapped_region::mapped_region()$/;"	f	class:boost::interprocess::mapped_region	signature:()
boost::interprocess::mapped_region::m_base	/usr/include/boost/interprocess/mapped_region.hpp	/^   void*             m_base;$/;"	m	class:boost::interprocess::mapped_region	access:private
boost::interprocess::mapped_region::m_extra_offset	/usr/include/boost/interprocess/mapped_region.hpp	/^   offset_t          m_extra_offset;$/;"	m	class:boost::interprocess::mapped_region	access:private
boost::interprocess::mapped_region::m_file_mapping_hnd	/usr/include/boost/interprocess/mapped_region.hpp	/^   file_handle_t     m_file_mapping_hnd;$/;"	m	class:boost::interprocess::mapped_region	access:private
boost::interprocess::mapped_region::m_is_xsi	/usr/include/boost/interprocess/mapped_region.hpp	/^   bool              m_is_xsi;$/;"	m	class:boost::interprocess::mapped_region	access:private
boost::interprocess::mapped_region::m_mode	/usr/include/boost/interprocess/mapped_region.hpp	/^   mode_t            m_mode;$/;"	m	class:boost::interprocess::mapped_region	access:private
boost::interprocess::mapped_region::m_offset	/usr/include/boost/interprocess/mapped_region.hpp	/^   offset_t          m_offset;$/;"	m	class:boost::interprocess::mapped_region	access:private
boost::interprocess::mapped_region::m_size	/usr/include/boost/interprocess/mapped_region.hpp	/^   std::size_t       m_size;$/;"	m	class:boost::interprocess::mapped_region	access:private
boost::interprocess::mapped_region::other	/usr/include/boost/interprocess/mapped_region.hpp	/^   mapped_region &operator=(BOOST_INTERPROCESS_RV_REF(mapped_region) other);$/;"	m	class:boost::interprocess::mapped_region	access:public
boost::interprocess::mapped_region::other	/usr/include/boost/interprocess/mapped_region.hpp	/^   mapped_region(BOOST_INTERPROCESS_RV_REF(mapped_region) other);$/;"	m	class:boost::interprocess::mapped_region	access:public
boost::interprocess::mapped_region::page_size_holder	/usr/include/boost/interprocess/mapped_region.hpp	/^   struct page_size_holder$/;"	s	class:boost::interprocess::mapped_region	access:private
boost::interprocess::mapped_region::page_size_holder::get_page_size	/usr/include/boost/interprocess/mapped_region.hpp	/^      static std::size_t get_page_size();$/;"	p	struct:boost::interprocess::mapped_region::page_size_holder	access:public	signature:()
boost::interprocess::mapped_region::page_size_holder::get_page_size	/usr/include/boost/interprocess/mapped_region.hpp	/^inline std::size_t mapped_region::page_size_holder<dummy>::get_page_size()$/;"	f	class:boost::interprocess::mapped_region::page_size_holder	signature:()
boost::interprocess::mapped_region::page_size_holder::PageSize	/usr/include/boost/interprocess/mapped_region.hpp	/^      static const std::size_t PageSize;$/;"	m	struct:boost::interprocess::mapped_region::page_size_holder	access:public
boost::interprocess::mapped_region::page_size_holder::PageSize	/usr/include/boost/interprocess/mapped_region.hpp	/^const std::size_t mapped_region::page_size_holder<dummy>::PageSize$/;"	m	class:boost::interprocess::mapped_region::page_size_holder
boost::interprocess::mapped_region::priv_close	/usr/include/boost/interprocess/mapped_region.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:()
boost::interprocess::mapped_region::priv_close	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void mapped_region::priv_close()$/;"	f	class:boost::interprocess::mapped_region	signature:()
boost::interprocess::mapped_region::swap	/usr/include/boost/interprocess/mapped_region.hpp	/^   void swap(mapped_region &other);$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:(mapped_region &other)
boost::interprocess::mapped_region::swap	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void mapped_region::swap(mapped_region &other)$/;"	f	class:boost::interprocess::mapped_region	signature:(mapped_region &other)
boost::interprocess::mapped_region::~mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^   ~mapped_region();$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:()
boost::interprocess::mapped_region::~mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^inline mapped_region::~mapped_region() $/;"	f	class:boost::interprocess::mapped_region	signature:()
boost::interprocess::mapping_handle_impl_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^typedef struct mapping_handle_impl_t{$/;"	s	namespace:boost::interprocess
boost::interprocess::mapping_handle_impl_t::handle	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^   void *   handle;$/;"	m	struct:boost::interprocess::mapping_handle_impl_t	access:public
boost::interprocess::mapping_handle_impl_t::is_shm	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^   bool     is_shm;$/;"	m	struct:boost::interprocess::mapping_handle_impl_t	access:public
boost::interprocess::mapping_handle_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^}  mapping_handle_t;$/;"	t	namespace:boost::interprocess	typeref:struct:boost::interprocess::mapping_handle_impl_t
boost::interprocess::map_index	/usr/include/boost/interprocess/indexes/map_index.hpp	/^class map_index$/;"	c	namespace:boost::interprocess	inherits:detail::map_index_aux::index_t
boost::interprocess::map_index::base_type	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef typename index_aux::index_t       base_type;$/;"	t	class:boost::interprocess::map_index	access:private
boost::interprocess::map_index::index_aux	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef detail::map_index_aux<MapConfig>  index_aux;$/;"	t	class:boost::interprocess::map_index	access:private
boost::interprocess::map_index::map_index	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   map_index(segment_manager_base *segment_mngr)$/;"	f	class:boost::interprocess::map_index	access:public	signature:(segment_manager_base *segment_mngr)
boost::interprocess::map_index::reserve	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   void reserve(std::size_t)$/;"	f	class:boost::interprocess::map_index	access:public	signature:(std::size_t)
boost::interprocess::map_index::segment_manager_base	/usr/include/boost/interprocess/indexes/map_index.hpp	/^      segment_manager_base          segment_manager_base;$/;"	t	class:boost::interprocess::map_index	access:private
boost::interprocess::map_index::shrink_to_fit	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::map_index	access:public	signature:()
boost::interprocess::max_allocation_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^enum instance_type {   anonymous_type, named_type, unique_type, max_allocation_type };$/;"	e	enum:boost::interprocess::instance_type
boost::interprocess::max_value	/usr/include/boost/interprocess/detail/min_max.hpp	/^const T &max_value(const T &a, const T &b)$/;"	f	namespace:boost::interprocess	signature:(const T &a, const T &b)
boost::interprocess::message_queue	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^class message_queue$/;"	c	namespace:boost::interprocess
boost::interprocess::message_queue::blocking	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   enum block_t   {  blocking,   timed,   non_blocking   };$/;"	e	enum:boost::interprocess::message_queue::block_t
boost::interprocess::message_queue::block_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   enum block_t   {  blocking,   timed,   non_blocking   };$/;"	g	class:boost::interprocess::message_queue	access:private
boost::interprocess::message_queue::do_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool do_receive(block_t block,$/;"	p	class:boost::interprocess::message_queue	access:private	signature:(block_t block, void *buffer, std::size_t buffer_size, std::size_t &recvd_size, unsigned int &priority, const ptime &abs_time)
boost::interprocess::message_queue::do_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue::do_receive(block_t block,$/;"	f	class:boost::interprocess::message_queue	signature:(block_t block, void *buffer, std::size_t buffer_size, std::size_t &recvd_size, unsigned int &priority, const boost::posix_time::ptime &abs_time)
boost::interprocess::message_queue::do_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool do_send(block_t block,$/;"	p	class:boost::interprocess::message_queue	access:private	signature:(block_t block, const void *buffer, std::size_t buffer_size, unsigned int priority, const ptime &abs_time)
boost::interprocess::message_queue::do_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline bool message_queue::do_send(block_t block,$/;"	f	class:boost::interprocess::message_queue	signature:(block_t block, const void *buffer, std::size_t buffer_size, unsigned int priority, const boost::posix_time::ptime &abs_time)
boost::interprocess::message_queue::get_max_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   std::size_t get_max_msg() const;$/;"	p	class:boost::interprocess::message_queue	access:public	signature:() const
boost::interprocess::message_queue::get_max_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline std::size_t message_queue::get_max_msg() const$/;"	f	class:boost::interprocess::message_queue	signature:() const
boost::interprocess::message_queue::get_max_msg_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   std::size_t get_max_msg_size() const;$/;"	p	class:boost::interprocess::message_queue	access:public	signature:() const
boost::interprocess::message_queue::get_max_msg_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline std::size_t message_queue::get_max_msg_size() const$/;"	f	class:boost::interprocess::message_queue	signature:() const
boost::interprocess::message_queue::get_mem_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   static std::size_t get_mem_size(std::size_t max_msg_size, std::size_t max_num_msg);$/;"	p	class:boost::interprocess::message_queue	access:private	signature:(std::size_t max_msg_size, std::size_t max_num_msg)
boost::interprocess::message_queue::get_mem_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline std::size_t message_queue::get_mem_size$/;"	f	class:boost::interprocess::message_queue	signature:(std::size_t max_msg_size, std::size_t max_num_msg)
boost::interprocess::message_queue::get_num_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   std::size_t get_num_msg();$/;"	p	class:boost::interprocess::message_queue	access:public	signature:()
boost::interprocess::message_queue::get_num_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline std::size_t message_queue::get_num_msg()$/;"	f	class:boost::interprocess::message_queue	signature:()
boost::interprocess::message_queue::message_queue	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue();$/;"	p	class:boost::interprocess::message_queue	access:private	signature:()
boost::interprocess::message_queue::message_queue	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue(create_only_t create_only,$/;"	p	class:boost::interprocess::message_queue	access:public	signature:(create_only_t create_only, const char *name, std::size_t max_num_msg, std::size_t max_msg_size)
boost::interprocess::message_queue::message_queue	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue(open_only_t open_only,$/;"	p	class:boost::interprocess::message_queue	access:public	signature:(open_only_t open_only, const char *name)
boost::interprocess::message_queue::message_queue	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue(open_or_create_t open_or_create,$/;"	p	class:boost::interprocess::message_queue	access:public	signature:(open_or_create_t open_or_create, const char *name, std::size_t max_num_msg, std::size_t max_msg_size)
boost::interprocess::message_queue::message_queue	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline message_queue::message_queue(create_only_t create_only,$/;"	f	class:boost::interprocess::message_queue	signature:(create_only_t create_only, const char *name, std::size_t max_num_msg, std::size_t max_msg_size)
boost::interprocess::message_queue::message_queue	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline message_queue::message_queue(open_only_t open_only,$/;"	f	class:boost::interprocess::message_queue	signature:(open_only_t open_only, const char *name)
boost::interprocess::message_queue::message_queue	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline message_queue::message_queue(open_or_create_t open_or_create,$/;"	f	class:boost::interprocess::message_queue	signature:(open_or_create_t open_or_create, const char *name, std::size_t max_num_msg, std::size_t max_msg_size)
boost::interprocess::message_queue::m_shmem	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   detail::managed_open_or_create_impl<shared_memory_object> m_shmem;$/;"	m	class:boost::interprocess::message_queue	access:private
boost::interprocess::message_queue::non_blocking	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   enum block_t   {  blocking,   timed,   non_blocking   };$/;"	e	enum:boost::interprocess::message_queue::block_t
boost::interprocess::message_queue::ptime	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef boost::posix_time::ptime ptime;$/;"	t	class:boost::interprocess::message_queue	access:private
boost::interprocess::message_queue::receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void receive (void *buffer,           std::size_t buffer_size, $/;"	p	class:boost::interprocess::message_queue	access:public	signature:(void *buffer, std::size_t buffer_size, std::size_t &recvd_size,unsigned int &priority)
boost::interprocess::message_queue::receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline void message_queue::receive(void *buffer,              std::size_t buffer_size, $/;"	f	class:boost::interprocess::message_queue	signature:(void *buffer, std::size_t buffer_size, std::size_t &recvd_size, unsigned int &priority)
boost::interprocess::message_queue::remove	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::message_queue	access:public	signature:(const char *name)
boost::interprocess::message_queue::remove	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline bool message_queue::remove(const char *name)$/;"	f	class:boost::interprocess::message_queue	signature:(const char *name)
boost::interprocess::message_queue::send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void send (const void *buffer,     std::size_t buffer_size, $/;"	p	class:boost::interprocess::message_queue	access:public	signature:(const void *buffer, std::size_t buffer_size, unsigned int priority)
boost::interprocess::message_queue::send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline void message_queue::send$/;"	f	class:boost::interprocess::message_queue	signature:(const void *buffer, std::size_t buffer_size, unsigned int priority)
boost::interprocess::message_queue::timed	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   enum block_t   {  blocking,   timed,   non_blocking   };$/;"	e	enum:boost::interprocess::message_queue::block_t
boost::interprocess::message_queue::timed_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool timed_receive (void *buffer,           std::size_t buffer_size, $/;"	p	class:boost::interprocess::message_queue	access:public	signature:(void *buffer, std::size_t buffer_size, std::size_t &recvd_size,unsigned int &priority, const boost::posix_time::ptime &abs_time)
boost::interprocess::message_queue::timed_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue::timed_receive(void *buffer,              std::size_t buffer_size, $/;"	f	class:boost::interprocess::message_queue	signature:(void *buffer, std::size_t buffer_size, std::size_t &recvd_size, unsigned int &priority, const boost::posix_time::ptime &abs_time)
boost::interprocess::message_queue::timed_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool timed_send    (const void *buffer,     std::size_t buffer_size, $/;"	p	class:boost::interprocess::message_queue	access:public	signature:(const void *buffer, std::size_t buffer_size, unsigned int priority, const boost::posix_time::ptime& abs_time)
boost::interprocess::message_queue::timed_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline bool message_queue::timed_send$/;"	f	class:boost::interprocess::message_queue	signature:(const void *buffer, std::size_t buffer_size ,unsigned int priority, const boost::posix_time::ptime &abs_time)
boost::interprocess::message_queue::try_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool try_receive (void *buffer,           std::size_t buffer_size, $/;"	p	class:boost::interprocess::message_queue	access:public	signature:(void *buffer, std::size_t buffer_size, std::size_t &recvd_size,unsigned int &priority)
boost::interprocess::message_queue::try_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue::try_receive(void *buffer,              std::size_t buffer_size, $/;"	f	class:boost::interprocess::message_queue	signature:(void *buffer, std::size_t buffer_size, std::size_t &recvd_size, unsigned int &priority)
boost::interprocess::message_queue::try_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool try_send    (const void *buffer,     std::size_t buffer_size, $/;"	p	class:boost::interprocess::message_queue	access:public	signature:(const void *buffer, std::size_t buffer_size, unsigned int priority)
boost::interprocess::message_queue::try_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline bool message_queue::try_send$/;"	f	class:boost::interprocess::message_queue	signature:(const void *buffer, std::size_t buffer_size, unsigned int priority)
boost::interprocess::message_queue::~message_queue	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   ~message_queue(); $/;"	p	class:boost::interprocess::message_queue	access:public	signature:()
boost::interprocess::message_queue::~message_queue	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline message_queue::~message_queue()$/;"	f	class:boost::interprocess::message_queue	signature:()
boost::interprocess::microsec_clock	/usr/include/boost/interprocess/detail/posix_time_types_wrk.hpp	/^typedef boost::date_time::microsec_clock<boost::posix_time::ptime> microsec_clock;$/;"	t	namespace:boost::interprocess
boost::interprocess::min_value	/usr/include/boost/interprocess/detail/min_max.hpp	/^const T &min_value(const T &a, const T &b)$/;"	f	namespace:boost::interprocess	signature:(const T &a, const T &b)
boost::interprocess::mode_error	/usr/include/boost/interprocess/errors.hpp	/^   mode_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::mode_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             } mode_t;$/;"	t	namespace:boost::interprocess	typeref:enum:boost::interprocess::__anon10
boost::interprocess::move	/usr/include/boost/interprocess/detail/move.hpp	/^O move(I f, I l, O result)$/;"	f	namespace:boost::interprocess	signature:(I f, I l, O result)
boost::interprocess::move	/usr/include/boost/interprocess/detail/move.hpp	/^typename ::boost::disable_if<is_movable<T>, T&>::type move(T& x)$/;"	f	namespace:boost::interprocess	signature:(T& x)
boost::interprocess::move	/usr/include/boost/interprocess/detail/move.hpp	/^typename enable_if<is_movable<T>, rv<T>&>::type move(rv<T>& x)$/;"	f	namespace:boost::interprocess	signature:(rv<T>& x)
boost::interprocess::move	/usr/include/boost/interprocess/detail/move.hpp	/^typename enable_if<is_movable<T>, rv<T>&>::type move(T& x)$/;"	f	namespace:boost::interprocess	signature:(T& x)
boost::interprocess::move_backward	/usr/include/boost/interprocess/detail/move.hpp	/^O move_backward(I f, I l, O result)$/;"	f	namespace:boost::interprocess	signature:(I f, I l, O result)
boost::interprocess::move_detail	/usr/include/boost/interprocess/detail/move.hpp	/^namespace move_detail {$/;"	n	namespace:boost::interprocess
boost::interprocess::move_detail::identity	/usr/include/boost/interprocess/detail/move.hpp	/^struct identity$/;"	s	namespace:boost::interprocess::move_detail
boost::interprocess::move_detail::identity::type	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef T type;$/;"	t	struct:boost::interprocess::move_detail::identity	access:public
boost::interprocess::move_detail::is_convertible	/usr/include/boost/interprocess/detail/move.hpp	/^class is_convertible$/;"	c	namespace:boost::interprocess::move_detail
boost::interprocess::move_detail::is_convertible::dispatch	/usr/include/boost/interprocess/detail/move.hpp	/^   static false_t dispatch(...);$/;"	p	class:boost::interprocess::move_detail::is_convertible	access:private	signature:(....)
boost::interprocess::move_detail::is_convertible::dispatch	/usr/include/boost/interprocess/detail/move.hpp	/^   static true_t dispatch(U);$/;"	p	class:boost::interprocess::move_detail::is_convertible	access:private	signature:(U)
boost::interprocess::move_detail::is_convertible::false_t	/usr/include/boost/interprocess/detail/move.hpp	/^   class false_t { char dummy[2]; };$/;"	c	class:boost::interprocess::move_detail::is_convertible	access:private
boost::interprocess::move_detail::is_convertible::false_t::dummy	/usr/include/boost/interprocess/detail/move.hpp	/^   class false_t { char dummy[2]; };$/;"	m	class:boost::interprocess::move_detail::is_convertible::false_t	access:private
boost::interprocess::move_detail::is_convertible::trigger	/usr/include/boost/interprocess/detail/move.hpp	/^   static T trigger();$/;"	p	class:boost::interprocess::move_detail::is_convertible	access:private	signature:()
boost::interprocess::move_detail::is_convertible::true_t	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef char true_t;$/;"	t	class:boost::interprocess::move_detail::is_convertible	access:private
boost::interprocess::move_detail::is_convertible::value	/usr/include/boost/interprocess/detail/move.hpp	/^   enum { value = sizeof(dispatch(trigger())) == sizeof(true_t) };$/;"	e	enum:boost::interprocess::move_detail::is_convertible::__anon8
boost::interprocess::move_detail::is_move_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^struct is_move_iterator$/;"	s	namespace:boost::interprocess::move_detail	inherits:::boost::mpl::bool_
boost::interprocess::move_detail::is_move_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^struct is_move_iterator< ::boost::interprocess::move_iterator<I> >$/;"	s	namespace:boost::interprocess::move_detail	inherits:::boost::mpl::bool_
boost::interprocess::move_detail::is_rv	/usr/include/boost/interprocess/detail/move.hpp	/^struct is_rv$/;"	s	namespace:boost::interprocess::move_detail
boost::interprocess::move_detail::is_rv	/usr/include/boost/interprocess/detail/move.hpp	/^struct is_rv< rv<T> >$/;"	s	namespace:boost::interprocess::move_detail
boost::interprocess::move_detail::is_rv::value	/usr/include/boost/interprocess/detail/move.hpp	/^   static const bool value = false;$/;"	m	struct:boost::interprocess::move_detail::is_rv	access:public
boost::interprocess::move_detail::is_rv::value	/usr/include/boost/interprocess/detail/move.hpp	/^   static const bool value = true;$/;"	m	struct:boost::interprocess::move_detail::is_rv	access:public
boost::interprocess::move_detail::uninitialized_move_move_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^F uninitialized_move_move_iterator(I f, I l, F r,$/;"	f	namespace:boost::interprocess::move_detail	signature:(I f, I l, F r, typename disable_if< is_movable<typename I::value_type> >::type* = 0)
boost::interprocess::move_detail::uninitialized_move_move_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^F uninitialized_move_move_iterator(I f, I l, F r,$/;"	f	namespace:boost::interprocess::move_detail	signature:(I f, I l, F r, typename enable_if< is_movable<typename I::value_type> >::type* = 0)
boost::interprocess::move_inserter	/usr/include/boost/interprocess/detail/move.hpp	/^inline move_insert_iterator<C> move_inserter(C& x, typename C::iterator it)$/;"	f	namespace:boost::interprocess	signature:(C& x, typename C::iterator it)
boost::interprocess::move_insert_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^class move_insert_iterator$/;"	c	namespace:boost::interprocess	inherits:std::iterator
boost::interprocess::move_insert_iterator::container_m	/usr/include/boost/interprocess/detail/move.hpp	/^   C* container_m;$/;"	m	class:boost::interprocess::move_insert_iterator	access:private
boost::interprocess::move_insert_iterator::container_type	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef C container_type;$/;"	t	class:boost::interprocess::move_insert_iterator	access:public
boost::interprocess::move_insert_iterator::move_insert_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^   explicit move_insert_iterator(C& x, typename C::iterator pos)$/;"	f	class:boost::interprocess::move_insert_iterator	access:public	signature:(C& x, typename C::iterator pos)
boost::interprocess::move_insert_iterator::operator *	/usr/include/boost/interprocess/detail/move.hpp	/^   move_insert_iterator& operator*()     { return *this; }$/;"	f	class:boost::interprocess::move_insert_iterator	access:public	signature:()
boost::interprocess::move_insert_iterator::operator ++	/usr/include/boost/interprocess/detail/move.hpp	/^   move_insert_iterator& operator++()    { return *this; }$/;"	f	class:boost::interprocess::move_insert_iterator	access:public	signature:()
boost::interprocess::move_insert_iterator::operator ++	/usr/include/boost/interprocess/detail/move.hpp	/^   move_insert_iterator& operator++(int) { return *this; }$/;"	f	class:boost::interprocess::move_insert_iterator	access:public	signature:(int)
boost::interprocess::move_insert_iterator::operator =	/usr/include/boost/interprocess/detail/move.hpp	/^   move_insert_iterator& operator=(typename C::reference x)$/;"	f	class:boost::interprocess::move_insert_iterator	access:public	signature:(typename C::reference x)
boost::interprocess::move_insert_iterator::pos_	/usr/include/boost/interprocess/detail/move.hpp	/^   typename C::iterator pos_;$/;"	m	class:boost::interprocess::move_insert_iterator	access:private
boost::interprocess::move_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^class move_iterator$/;"	c	namespace:boost::interprocess
boost::interprocess::move_iterator::base	/usr/include/boost/interprocess/detail/move.hpp	/^   iterator_type base() const$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:() const
boost::interprocess::move_iterator::difference_type	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef typename std::iterator_traits<iterator_type>::difference_type   difference_type;$/;"	t	class:boost::interprocess::move_iterator	access:public
boost::interprocess::move_iterator::iterator_category	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef typename std::iterator_traits<iterator_type>::iterator_category iterator_category;$/;"	t	class:boost::interprocess::move_iterator	access:public
boost::interprocess::move_iterator::iterator_type	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef It                                                              iterator_type;$/;"	t	class:boost::interprocess::move_iterator	access:public
boost::interprocess::move_iterator::move_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^   explicit move_iterator(It i)$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:(It i)
boost::interprocess::move_iterator::move_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^   move_iterator()$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:()
boost::interprocess::move_iterator::move_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^   move_iterator(const move_iterator<U>& u)$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:(const move_iterator<U>& u)
boost::interprocess::move_iterator::m_it	/usr/include/boost/interprocess/detail/move.hpp	/^   It m_it;$/;"	m	class:boost::interprocess::move_iterator	access:private
boost::interprocess::move_iterator::operator !=	/usr/include/boost/interprocess/detail/move.hpp	/^   friend bool operator!=(const move_iterator& x, const move_iterator& y)$/;"	f	class:boost::interprocess::move_iterator	access:friend	signature:(const move_iterator& x, const move_iterator& y)
boost::interprocess::move_iterator::operator *	/usr/include/boost/interprocess/detail/move.hpp	/^   reference operator*() const$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:() const
boost::interprocess::move_iterator::operator +	/usr/include/boost/interprocess/detail/move.hpp	/^   friend move_iterator operator+(difference_type n, const move_iterator& x)$/;"	f	class:boost::interprocess::move_iterator	access:friend	signature:(difference_type n, const move_iterator& x)
boost::interprocess::move_iterator::operator +	/usr/include/boost/interprocess/detail/move.hpp	/^   move_iterator<iterator_type>  operator+ (difference_type n) const$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:(difference_type n) const
boost::interprocess::move_iterator::operator ++	/usr/include/boost/interprocess/detail/move.hpp	/^   move_iterator& operator++()$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:()
boost::interprocess::move_iterator::operator ++	/usr/include/boost/interprocess/detail/move.hpp	/^   move_iterator<iterator_type>  operator++(int)$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:(int)
boost::interprocess::move_iterator::operator +=	/usr/include/boost/interprocess/detail/move.hpp	/^   move_iterator& operator+=(difference_type n)$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:(difference_type n)
boost::interprocess::move_iterator::operator -	/usr/include/boost/interprocess/detail/move.hpp	/^   friend difference_type operator-(const move_iterator& x, const move_iterator& y)$/;"	f	class:boost::interprocess::move_iterator	access:friend	signature:(const move_iterator& x, const move_iterator& y)
boost::interprocess::move_iterator::operator -	/usr/include/boost/interprocess/detail/move.hpp	/^   move_iterator<iterator_type>  operator- (difference_type n) const$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:(difference_type n) const
boost::interprocess::move_iterator::operator --	/usr/include/boost/interprocess/detail/move.hpp	/^   move_iterator& operator--()$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:()
boost::interprocess::move_iterator::operator --	/usr/include/boost/interprocess/detail/move.hpp	/^   move_iterator<iterator_type>  operator--(int)$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:(int)
boost::interprocess::move_iterator::operator -=	/usr/include/boost/interprocess/detail/move.hpp	/^   move_iterator& operator-=(difference_type n)$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:(difference_type n)
boost::interprocess::move_iterator::operator ->	/usr/include/boost/interprocess/detail/move.hpp	/^   pointer   operator->() const$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:() const
boost::interprocess::move_iterator::operator <	/usr/include/boost/interprocess/detail/move.hpp	/^   friend bool operator< (const move_iterator& x, const move_iterator& y)$/;"	f	class:boost::interprocess::move_iterator	access:friend	signature:(const move_iterator& x, const move_iterator& y)
boost::interprocess::move_iterator::operator <=	/usr/include/boost/interprocess/detail/move.hpp	/^   friend bool operator<=(const move_iterator& x, const move_iterator& y)$/;"	f	class:boost::interprocess::move_iterator	access:friend	signature:(const move_iterator& x, const move_iterator& y)
boost::interprocess::move_iterator::operator ==	/usr/include/boost/interprocess/detail/move.hpp	/^   friend bool operator==(const move_iterator& x, const move_iterator& y)$/;"	f	class:boost::interprocess::move_iterator	access:friend	signature:(const move_iterator& x, const move_iterator& y)
boost::interprocess::move_iterator::operator >	/usr/include/boost/interprocess/detail/move.hpp	/^   friend bool operator> (const move_iterator& x, const move_iterator& y)$/;"	f	class:boost::interprocess::move_iterator	access:friend	signature:(const move_iterator& x, const move_iterator& y)
boost::interprocess::move_iterator::operator >=	/usr/include/boost/interprocess/detail/move.hpp	/^   friend bool operator>=(const move_iterator& x, const move_iterator& y)$/;"	f	class:boost::interprocess::move_iterator	access:friend	signature:(const move_iterator& x, const move_iterator& y)
boost::interprocess::move_iterator::operator []	/usr/include/boost/interprocess/detail/move.hpp	/^   reference operator[](difference_type n) const$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:(difference_type n) const
boost::interprocess::move_iterator::pointer	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef It                                                              pointer;$/;"	t	class:boost::interprocess::move_iterator	access:public
boost::interprocess::move_iterator::reference	/usr/include/boost/interprocess/detail/move.hpp	/^      , value_type & >::type                                               reference;$/;"	t	class:boost::interprocess::move_iterator	access:public
boost::interprocess::move_iterator::reference	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef value_type &&                                                   reference;$/;"	t	class:boost::interprocess::move_iterator	access:public
boost::interprocess::move_iterator::value_type	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef typename std::iterator_traits<iterator_type>::value_type        value_type;$/;"	t	class:boost::interprocess::move_iterator	access:public
boost::interprocess::multi_segment_services	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^class multi_segment_services$/;"	c	namespace:boost::interprocess
boost::interprocess::multi_segment_services::create_new_segment	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^   virtual std::pair<void *, std::size_t> create_new_segment(std::size_t mem) = 0;$/;"	p	class:boost::interprocess::multi_segment_services	access:public	signature:(std::size_t mem)
boost::interprocess::multi_segment_services::update_segments	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^   virtual bool                           update_segments   () = 0;$/;"	p	class:boost::interprocess::multi_segment_services	access:public	signature:()
boost::interprocess::multi_segment_services::~multi_segment_services	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^   virtual ~multi_segment_services() = 0;$/;"	p	class:boost::interprocess::multi_segment_services	access:public	signature:()
boost::interprocess::multi_segment_services::~multi_segment_services	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^inline multi_segment_services::~multi_segment_services()$/;"	f	class:boost::interprocess::multi_segment_services	signature:()
boost::interprocess::multi_simple_seq_fit	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^class multi_simple_seq_fit $/;"	c	namespace:boost::interprocess	inherits:detail::simple_seq_fit_impl
boost::interprocess::multi_simple_seq_fit::allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^   void* allocate             (std::size_t nbytes)$/;"	f	class:boost::interprocess::multi_simple_seq_fit	access:public	signature:(std::size_t nbytes)
boost::interprocess::multi_simple_seq_fit::base_t	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^   typedef detail::simple_seq_fit_impl<MutexFamily, VoidPtr> base_t;$/;"	t	class:boost::interprocess::multi_simple_seq_fit	access:private
boost::interprocess::multi_simple_seq_fit::multi_simple_seq_fit	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^   multi_simple_seq_fit           (std::size_t size, std::size_t extra_hdr_bytes)$/;"	f	class:boost::interprocess::multi_simple_seq_fit	access:public	signature:(std::size_t size, std::size_t extra_hdr_bytes)
boost::interprocess::mutex_family	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^struct mutex_family$/;"	s	namespace:boost::interprocess
boost::interprocess::mutex_family::mutex_type	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^   typedef boost::interprocess::interprocess_mutex                 mutex_type;$/;"	t	struct:boost::interprocess::mutex_family	access:public
boost::interprocess::mutex_family::recursive_mutex_type	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^   typedef boost::interprocess::interprocess_recursive_mutex       recursive_mutex_type;$/;"	t	struct:boost::interprocess::mutex_family	access:public
boost::interprocess::m_base	/usr/include/boost/interprocess/mapped_region.hpp	/^   :  m_base(MAP_FAILED), m_size(0), m_offset(0),  m_extra_offset(0), m_mode(read_only), m_is_xsi(false)$/;"	p	namespace:boost::interprocess	signature:(MAP_FAILED)
boost::interprocess::m_is_xsi	/usr/include/boost/interprocess/mapped_region.hpp	/^   :  m_base(MAP_FAILED), m_size(0), m_offset(0),  m_extra_offset(0), m_mode(read_only), m_is_xsi(false)$/;"	f	namespace:boost::interprocess	signature:(false)
boost::interprocess::m_mode	/usr/include/boost/interprocess/mapped_region.hpp	/^   ,  m_mode(read_only)$/;"	p	namespace:boost::interprocess	signature:(read_only)
boost::interprocess::m_mode	/usr/include/boost/interprocess/mapped_region.hpp	/^   :  m_base(MAP_FAILED), m_size(0), m_offset(0),  m_extra_offset(0), m_mode(read_only), m_is_xsi(false)$/;"	p	namespace:boost::interprocess	signature:(read_only)
boost::interprocess::named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^class named_condition$/;"	c	namespace:boost::interprocess
boost::interprocess::named_condition::condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   interprocess_condition *condition() const$/;"	f	class:boost::interprocess::named_condition	access:private	signature:() const
boost::interprocess::named_condition::condition_holder	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   struct condition_holder$/;"	s	class:boost::interprocess::named_condition	access:private
boost::interprocess::named_condition::condition_holder::cond_	/usr/include/boost/interprocess/sync/named_condition.hpp	/^      interprocess_condition cond_;$/;"	m	struct:boost::interprocess::named_condition::condition_holder	access:public
boost::interprocess::named_condition::condition_holder::mutex_	/usr/include/boost/interprocess/sync/named_condition.hpp	/^      interprocess_mutex mutex_;$/;"	m	struct:boost::interprocess::named_condition::condition_holder	access:public
boost::interprocess::named_condition::construct_func_t	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   typedef detail::named_creation_functor<condition_holder> construct_func_t;$/;"	t	class:boost::interprocess::named_condition	access:private
boost::interprocess::named_condition::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_condition	access:private	signature:()
boost::interprocess::named_condition::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline void named_condition::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_condition	signature:()
boost::interprocess::named_condition::do_timed_wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   bool do_timed_wait(Lock& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::named_condition	access:private	signature:(Lock& lock, const boost::posix_time::ptime &abs_time)
boost::interprocess::named_condition::do_wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void do_wait(Lock& lock)$/;"	f	class:boost::interprocess::named_condition	access:private	signature:(Lock& lock)
boost::interprocess::named_condition::lock_inverter	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   class lock_inverter$/;"	c	class:boost::interprocess::named_condition	access:private
boost::interprocess::named_condition::lock_inverter::lock	/usr/include/boost/interprocess/sync/named_condition.hpp	/^      void lock()    {   l_.unlock();   }$/;"	f	class:boost::interprocess::named_condition::lock_inverter	access:public	signature:()
boost::interprocess::named_condition::lock_inverter::lock_inverter	/usr/include/boost/interprocess/sync/named_condition.hpp	/^      lock_inverter(Lock &l)$/;"	f	class:boost::interprocess::named_condition::lock_inverter	access:public	signature:(Lock &l)
boost::interprocess::named_condition::lock_inverter::l_	/usr/include/boost/interprocess/sync/named_condition.hpp	/^      Lock &l_;$/;"	m	class:boost::interprocess::named_condition::lock_inverter	access:private
boost::interprocess::named_condition::lock_inverter::unlock	/usr/include/boost/interprocess/sync/named_condition.hpp	/^      void unlock()  {   l_.lock();     }$/;"	f	class:boost::interprocess::named_condition::lock_inverter	access:public	signature:()
boost::interprocess::named_condition::mutex	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   interprocess_mutex *mutex() const$/;"	f	class:boost::interprocess::named_condition	access:private	signature:() const
boost::interprocess::named_condition::m_shmem	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   detail::managed_open_or_create_impl<shared_memory_object> m_shmem;$/;"	m	class:boost::interprocess::named_condition	access:private
boost::interprocess::named_condition::named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition();$/;"	p	class:boost::interprocess::named_condition	access:private	signature:()
boost::interprocess::named_condition::named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition(const named_condition &);$/;"	p	class:boost::interprocess::named_condition	access:private	signature:(const named_condition &)
boost::interprocess::named_condition::named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition(create_only_t create_only, const char *name);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(create_only_t create_only, const char *name)
boost::interprocess::named_condition::named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(open_only_t open_only, const char *name)
boost::interprocess::named_condition::named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition(open_or_create_t open_or_create, const char *name);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(open_or_create_t open_or_create, const char *name)
boost::interprocess::named_condition::named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline named_condition::named_condition(create_only_t, const char *name)$/;"	f	class:boost::interprocess::named_condition	signature:(create_only_t, const char *name)
boost::interprocess::named_condition::named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline named_condition::named_condition(open_only_t, const char *name)$/;"	f	class:boost::interprocess::named_condition	signature:(open_only_t, const char *name)
boost::interprocess::named_condition::named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline named_condition::named_condition(open_or_create_t, const char *name)$/;"	f	class:boost::interprocess::named_condition	signature:(open_or_create_t, const char *name)
boost::interprocess::named_condition::notify_all	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void notify_all();$/;"	p	class:boost::interprocess::named_condition	access:public	signature:()
boost::interprocess::named_condition::notify_all	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline void named_condition::notify_all()$/;"	f	class:boost::interprocess::named_condition	signature:()
boost::interprocess::named_condition::notify_one	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void notify_one();$/;"	p	class:boost::interprocess::named_condition	access:public	signature:()
boost::interprocess::named_condition::notify_one	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline void named_condition::notify_one()$/;"	f	class:boost::interprocess::named_condition	signature:()
boost::interprocess::named_condition::operator =	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition &operator=(const named_condition &);$/;"	p	class:boost::interprocess::named_condition	access:private	signature:(const named_condition &)
boost::interprocess::named_condition::remove	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(const char *name)
boost::interprocess::named_condition::remove	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline bool named_condition::remove(const char *name)$/;"	f	class:boost::interprocess::named_condition	signature:(const char *name)
boost::interprocess::named_condition::timed_wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
boost::interprocess::named_condition::timed_wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
boost::interprocess::named_condition::timed_wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline bool named_condition::timed_wait$/;"	f	class:boost::interprocess::named_condition	signature:(L& lock, const boost::posix_time::ptime &abs_time)
boost::interprocess::named_condition::timed_wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline bool named_condition::timed_wait$/;"	f	class:boost::interprocess::named_condition	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
boost::interprocess::named_condition::wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void wait(L& lock);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(L& lock)
boost::interprocess::named_condition::wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void wait(L& lock, Pr pred);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(L& lock, Pr pred)
boost::interprocess::named_condition::wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline void named_condition::wait(L& lock)$/;"	f	class:boost::interprocess::named_condition	signature:(L& lock)
boost::interprocess::named_condition::wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline void named_condition::wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::named_condition	signature:(L& lock, Pr pred)
boost::interprocess::named_condition::~named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   ~named_condition();$/;"	p	class:boost::interprocess::named_condition	access:public	signature:()
boost::interprocess::named_condition::~named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline named_condition::~named_condition()$/;"	f	class:boost::interprocess::named_condition	signature:()
boost::interprocess::named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^class named_mutex$/;"	c	namespace:boost::interprocess
boost::interprocess::named_mutex::construct_func_t	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   typedef detail::named_creation_functor<interprocess_mutex> construct_func_t;$/;"	t	class:boost::interprocess::named_mutex	access:private
boost::interprocess::named_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_mutex	access:private	signature:()
boost::interprocess::named_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline void named_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_mutex	signature:()
boost::interprocess::named_mutex::lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:()
boost::interprocess::named_mutex::lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline void named_mutex::lock()$/;"	f	class:boost::interprocess::named_mutex	signature:()
boost::interprocess::named_mutex::mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   interprocess_mutex *mutex() const$/;"	f	class:boost::interprocess::named_mutex	access:private	signature:() const
boost::interprocess::named_mutex::m_sem	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   detail::named_semaphore_wrapper m_sem;$/;"	m	class:boost::interprocess::named_mutex	access:private
boost::interprocess::named_mutex::m_shmem	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   detail::managed_open_or_create_impl<shared_memory_object> m_shmem;$/;"	m	class:boost::interprocess::named_mutex	access:private
boost::interprocess::named_mutex::named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex();$/;"	p	class:boost::interprocess::named_mutex	access:private	signature:()
boost::interprocess::named_mutex::named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex(const named_mutex &);$/;"	p	class:boost::interprocess::named_mutex	access:private	signature:(const named_mutex &)
boost::interprocess::named_mutex::named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex(create_only_t create_only, const char *name);$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:(create_only_t create_only, const char *name)
boost::interprocess::named_mutex::named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:(open_only_t open_only, const char *name)
boost::interprocess::named_mutex::named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex(open_or_create_t open_or_create, const char *name);$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name)
boost::interprocess::named_mutex::named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline named_mutex::named_mutex(create_only_t, const char *name)$/;"	f	class:boost::interprocess::named_mutex	signature:(create_only_t, const char *name)
boost::interprocess::named_mutex::named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline named_mutex::named_mutex(open_only_t, const char *name)$/;"	f	class:boost::interprocess::named_mutex	signature:(open_only_t, const char *name)
boost::interprocess::named_mutex::named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline named_mutex::named_mutex(open_or_create_t, const char *name)$/;"	f	class:boost::interprocess::named_mutex	signature:(open_or_create_t, const char *name)
boost::interprocess::named_mutex::operator =	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex &operator=(const named_mutex &);$/;"	p	class:boost::interprocess::named_mutex	access:private	signature:(const named_mutex &)
boost::interprocess::named_mutex::remove	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:(const char *name)
boost::interprocess::named_mutex::remove	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline bool named_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::named_mutex	signature:(const char *name)
boost::interprocess::named_mutex::timed_lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_mutex::timed_lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline bool named_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::named_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_mutex::try_lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:()
boost::interprocess::named_mutex::try_lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline bool named_mutex::try_lock()$/;"	f	class:boost::interprocess::named_mutex	signature:()
boost::interprocess::named_mutex::unlock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:()
boost::interprocess::named_mutex::unlock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline void named_mutex::unlock()$/;"	f	class:boost::interprocess::named_mutex	signature:()
boost::interprocess::named_mutex::~named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   ~named_mutex();$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:()
boost::interprocess::named_mutex::~named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline named_mutex::~named_mutex()$/;"	f	class:boost::interprocess::named_mutex	signature:()
boost::interprocess::named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^class named_recursive_mutex$/;"	c	namespace:boost::interprocess
boost::interprocess::named_recursive_mutex::construct_func_t	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   typedef detail::named_creation_functor<interprocess_recursive_mutex> construct_func_t;$/;"	t	class:boost::interprocess::named_recursive_mutex	access:private
boost::interprocess::named_recursive_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:private	signature:()
boost::interprocess::named_recursive_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline void named_recursive_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:()
boost::interprocess::named_recursive_mutex::lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:()
boost::interprocess::named_recursive_mutex::lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline void named_recursive_mutex::lock()$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:()
boost::interprocess::named_recursive_mutex::mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   interprocess_recursive_mutex *mutex() const$/;"	f	class:boost::interprocess::named_recursive_mutex	access:private	signature:() const
boost::interprocess::named_recursive_mutex::m_shmem	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   detail::managed_open_or_create_impl<shared_memory_object> m_shmem;$/;"	m	class:boost::interprocess::named_recursive_mutex	access:private
boost::interprocess::named_recursive_mutex::named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:private	signature:()
boost::interprocess::named_recursive_mutex::named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex(const named_recursive_mutex &);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:private	signature:(const named_recursive_mutex &)
boost::interprocess::named_recursive_mutex::named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex(create_only_t create_only, const char *name);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:(create_only_t create_only, const char *name)
boost::interprocess::named_recursive_mutex::named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:(open_only_t open_only, const char *name)
boost::interprocess::named_recursive_mutex::named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex(open_or_create_t open_or_create, const char *name);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name)
boost::interprocess::named_recursive_mutex::named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline named_recursive_mutex::named_recursive_mutex(create_only_t, const char *name)$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:(create_only_t, const char *name)
boost::interprocess::named_recursive_mutex::named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline named_recursive_mutex::named_recursive_mutex(open_only_t, const char *name)$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:(open_only_t, const char *name)
boost::interprocess::named_recursive_mutex::named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline named_recursive_mutex::named_recursive_mutex(open_or_create_t, const char *name)$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:(open_or_create_t, const char *name)
boost::interprocess::named_recursive_mutex::operator =	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex &operator=(const named_recursive_mutex &);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:private	signature:(const named_recursive_mutex &)
boost::interprocess::named_recursive_mutex::remove	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:(const char *name)
boost::interprocess::named_recursive_mutex::remove	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline bool named_recursive_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:(const char *name)
boost::interprocess::named_recursive_mutex::timed_lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_recursive_mutex::timed_lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline bool named_recursive_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_recursive_mutex::try_lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:()
boost::interprocess::named_recursive_mutex::try_lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline bool named_recursive_mutex::try_lock()$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:()
boost::interprocess::named_recursive_mutex::unlock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:()
boost::interprocess::named_recursive_mutex::unlock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline void named_recursive_mutex::unlock()$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:()
boost::interprocess::named_recursive_mutex::~named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   ~named_recursive_mutex();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:()
boost::interprocess::named_recursive_mutex::~named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline named_recursive_mutex::~named_recursive_mutex()$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:()
boost::interprocess::named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^class named_semaphore$/;"	c	namespace:boost::interprocess
boost::interprocess::named_semaphore::construct_func_t	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   typedef detail::named_creation_functor<interprocess_semaphore, int> construct_func_t;$/;"	t	class:boost::interprocess::named_semaphore	access:private
boost::interprocess::named_semaphore::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_semaphore	access:private	signature:()
boost::interprocess::named_semaphore::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline void named_semaphore::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_semaphore	signature:()
boost::interprocess::named_semaphore::m_sem	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   detail::named_semaphore_wrapper m_sem;$/;"	m	class:boost::interprocess::named_semaphore	access:private
boost::interprocess::named_semaphore::m_shmem	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   detail::managed_open_or_create_impl<shared_memory_object> m_shmem;$/;"	m	class:boost::interprocess::named_semaphore	access:private
boost::interprocess::named_semaphore::named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore();$/;"	p	class:boost::interprocess::named_semaphore	access:private	signature:()
boost::interprocess::named_semaphore::named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore(const named_semaphore &);$/;"	p	class:boost::interprocess::named_semaphore	access:private	signature:(const named_semaphore &)
boost::interprocess::named_semaphore::named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore(create_only_t, const char *name, unsigned int initialCount);$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:(create_only_t, const char *name, unsigned int initialCount)
boost::interprocess::named_semaphore::named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore(open_only_t, const char *name);$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:(open_only_t, const char *name)
boost::interprocess::named_semaphore::named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore(open_or_create_t, const char *name, unsigned int initialCount);$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:(open_or_create_t, const char *name, unsigned int initialCount)
boost::interprocess::named_semaphore::named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline named_semaphore::named_semaphore$/;"	f	class:boost::interprocess::named_semaphore	signature:(create_only_t, const char *name, unsigned int initialCount)
boost::interprocess::named_semaphore::named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline named_semaphore::named_semaphore$/;"	f	class:boost::interprocess::named_semaphore	signature:(open_only_t, const char *name)
boost::interprocess::named_semaphore::named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline named_semaphore::named_semaphore$/;"	f	class:boost::interprocess::named_semaphore	signature:(open_or_create_t, const char *name, unsigned int initialCount)
boost::interprocess::named_semaphore::operator =	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore &operator=(const named_semaphore &);$/;"	p	class:boost::interprocess::named_semaphore	access:private	signature:(const named_semaphore &)
boost::interprocess::named_semaphore::post	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   void post();$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:()
boost::interprocess::named_semaphore::post	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline void named_semaphore::post()$/;"	f	class:boost::interprocess::named_semaphore	signature:()
boost::interprocess::named_semaphore::remove	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:(const char *name)
boost::interprocess::named_semaphore::remove	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline bool named_semaphore::remove(const char *name)$/;"	f	class:boost::interprocess::named_semaphore	signature:(const char *name)
boost::interprocess::named_semaphore::semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   interprocess_semaphore *semaphore() const$/;"	f	class:boost::interprocess::named_semaphore	access:private	signature:() const
boost::interprocess::named_semaphore::timed_wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_semaphore::timed_wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline bool named_semaphore::timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::named_semaphore	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_semaphore::try_wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   bool try_wait();$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:()
boost::interprocess::named_semaphore::try_wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline bool named_semaphore::try_wait()$/;"	f	class:boost::interprocess::named_semaphore	signature:()
boost::interprocess::named_semaphore::wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   void wait();$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:()
boost::interprocess::named_semaphore::wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline void named_semaphore::wait()$/;"	f	class:boost::interprocess::named_semaphore	signature:()
boost::interprocess::named_semaphore::~named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   ~named_semaphore();$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:()
boost::interprocess::named_semaphore::~named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline named_semaphore::~named_semaphore()$/;"	f	class:boost::interprocess::named_semaphore	signature:()
boost::interprocess::named_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^enum instance_type {   anonymous_type, named_type, unique_type, max_allocation_type };$/;"	e	enum:boost::interprocess::instance_type
boost::interprocess::named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^class named_upgradable_mutex$/;"	c	namespace:boost::interprocess
boost::interprocess::named_upgradable_mutex::construct_func_t	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   typedef detail::named_creation_functor<interprocess_upgradable_mutex> construct_func_t;$/;"	t	class:boost::interprocess::named_upgradable_mutex	access:private
boost::interprocess::named_upgradable_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:()
boost::interprocess::named_upgradable_mutex::dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   interprocess_upgradable_mutex *mutex() const$/;"	f	class:boost::interprocess::named_upgradable_mutex	access:private	signature:() const
boost::interprocess::named_upgradable_mutex::m_shmem	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   detail::managed_open_or_create_impl<shared_memory_object> m_shmem;$/;"	m	class:boost::interprocess::named_upgradable_mutex	access:private
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:()
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(const named_upgradable_mutex &);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:(const named_upgradable_mutex &)
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(create_only_t create_only, const char *name);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(create_only_t create_only, const char *name)
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(open_only_t open_only, const char *name)
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(open_or_create_t open_or_create, const char *name);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name)
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::named_upgradable_mutex$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(create_only_t, const char *name)
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::named_upgradable_mutex$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(open_only_t, const char *name)
boost::interprocess::named_upgradable_mutex::named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::named_upgradable_mutex$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(open_or_create_t, const char *name)
boost::interprocess::named_upgradable_mutex::operator =	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex &operator=(const named_upgradable_mutex &);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:(const named_upgradable_mutex &)
boost::interprocess::named_upgradable_mutex::remove	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const char *name)
boost::interprocess::named_upgradable_mutex::remove	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const char *name)
boost::interprocess::named_upgradable_mutex::timed_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_lock$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_lock_sharable$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool timed_lock_upgradable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_lock_upgradable$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool timed_unlock_upgradable_and_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_unlock_upgradable_and_lock$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
boost::interprocess::named_upgradable_mutex::try_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::try_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::try_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::try_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::try_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::try_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_unlock_sharable_and_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_unlock_sharable_and_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_unlock_sharable_and_lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_unlock_sharable_and_lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_unlock_upgradable_and_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::unlock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::unlock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_and_lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_and_lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_and_lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_and_lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::unlock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::unlock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::unlock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::unlock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_upgradable_and_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_upgradable_and_lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_upgradable_and_lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::named_upgradable_mutex::~named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   ~named_upgradable_mutex();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
boost::interprocess::named_upgradable_mutex::~named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::~named_upgradable_mutex()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
boost::interprocess::native_error_t	/usr/include/boost/interprocess/errors.hpp	/^typedef int    native_error_t;$/;"	t	namespace:boost::interprocess
boost::interprocess::node_allocator	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^class node_allocator$/;"	c	namespace:boost::interprocess	inherits:detail::node_allocator_base
boost::interprocess::node_allocator::base_t	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^         < 2, T, SegmentManager, NodesPerBlock> base_t;$/;"	t	class:boost::interprocess::node_allocator	access:private
boost::interprocess::node_allocator::node_allocator	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator$/;"	f	class:boost::interprocess::node_allocator	access:public	signature:(const node_allocator<T2, SegmentManager, NodesPerBlock> &other)
boost::interprocess::node_allocator::node_allocator	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator(SegmentManager *segment_mngr) $/;"	f	class:boost::interprocess::node_allocator	access:public	signature:(SegmentManager *segment_mngr)
boost::interprocess::node_allocator::rebind	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::node_allocator	access:public
boost::interprocess::node_allocator::rebind::other	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      typedef node_allocator<T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::node_allocator::rebind	access:public
boost::interprocess::node_allocator::version	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef boost::interprocess::version_type<node_allocator, 2>   version;$/;"	t	class:boost::interprocess::node_allocator	access:public
boost::interprocess::nothrow_allocation	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type nothrow_allocation = boost::container::nothrow_allocation;$/;"	m	namespace:boost::interprocess
boost::interprocess::not_empty_error	/usr/include/boost/interprocess/errors.hpp	/^   not_empty_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::not_found_error	/usr/include/boost/interprocess/errors.hpp	/^   not_found_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::not_such_file_or_directory	/usr/include/boost/interprocess/errors.hpp	/^   not_such_file_or_directory,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::no_error	/usr/include/boost/interprocess/errors.hpp	/^   no_error = 0,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::null_index	/usr/include/boost/interprocess/indexes/null_index.hpp	/^class null_index$/;"	c	namespace:boost::interprocess
boost::interprocess::null_index::begin	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   const_iterator begin() const$/;"	f	class:boost::interprocess::null_index	access:public	signature:() const
boost::interprocess::null_index::begin	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   iterator begin()$/;"	f	class:boost::interprocess::null_index	access:public	signature:()
boost::interprocess::null_index::const_iterator	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   typedef const void * const_iterator;$/;"	t	class:boost::interprocess::null_index	access:public
boost::interprocess::null_index::end	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   const_iterator end() const$/;"	f	class:boost::interprocess::null_index	access:public	signature:() const
boost::interprocess::null_index::end	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   iterator end()$/;"	f	class:boost::interprocess::null_index	access:public	signature:()
boost::interprocess::null_index::iterator	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   typedef void * iterator;$/;"	t	class:boost::interprocess::null_index	access:public
boost::interprocess::null_index::null_index	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   null_index(segment_manager_base *){}$/;"	f	class:boost::interprocess::null_index	access:public	signature:(segment_manager_base *)
boost::interprocess::null_index::segment_manager_base	/usr/include/boost/interprocess/indexes/null_index.hpp	/^      segment_manager_base    segment_manager_base;$/;"	t	class:boost::interprocess::null_index	access:private
boost::interprocess::null_mapped_region_function	/usr/include/boost/interprocess/mapped_region.hpp	/^struct null_mapped_region_function$/;"	s	namespace:boost::interprocess
boost::interprocess::null_mapped_region_function::operator ()	/usr/include/boost/interprocess/mapped_region.hpp	/^   bool operator()(void *, std::size_t , bool) const$/;"	f	struct:boost::interprocess::null_mapped_region_function	access:public	signature:(void *, std::size_t , bool) const
boost::interprocess::null_mutex	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^class null_mutex$/;"	c	namespace:boost::interprocess
boost::interprocess::null_mutex::lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void lock(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::lock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void lock_sharable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::lock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void lock_upgradable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::null_mutex	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   null_mutex(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::null_mutex	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   null_mutex(const null_mutex&);$/;"	p	class:boost::interprocess::null_mutex	access:private	signature:(const null_mutex&)
boost::interprocess::null_mutex::operator =	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   null_mutex &operator= (const null_mutex&);$/;"	p	class:boost::interprocess::null_mutex	access:private	signature:(const null_mutex&)
boost::interprocess::null_mutex::timed_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &)$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:(const boost::posix_time::ptime &)
boost::interprocess::null_mutex::timed_lock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &)$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:(const boost::posix_time::ptime &)
boost::interprocess::null_mutex::timed_lock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool timed_lock_upgradable(const boost::posix_time::ptime &)$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:(const boost::posix_time::ptime &)
boost::interprocess::null_mutex::timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool timed_unlock_upgradable_and_lock(const boost::posix_time::ptime &)$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:(const boost::posix_time::ptime &)
boost::interprocess::null_mutex::try_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_lock()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::try_lock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_lock_sharable()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::try_lock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_lock_upgradable()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_unlock_sharable_and_lock()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_unlock_sharable_and_lock_upgradable()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::unlock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_and_lock_sharable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_and_lock_upgradable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::unlock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_sharable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::unlock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_upgradable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_upgradable_and_lock(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_upgradable_and_lock_sharable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex::~null_mutex	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   ~null_mutex(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
boost::interprocess::null_mutex_family	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^struct null_mutex_family$/;"	s	namespace:boost::interprocess
boost::interprocess::null_mutex_family::mutex_type	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^   typedef boost::interprocess::null_mutex                   mutex_type;$/;"	t	struct:boost::interprocess::null_mutex_family	access:public
boost::interprocess::null_mutex_family::recursive_mutex_type	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^   typedef boost::interprocess::null_mutex                   recursive_mutex_type;$/;"	t	struct:boost::interprocess::null_mutex_family	access:public
boost::interprocess::obufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_obufferstream<char>    obufferstream;$/;"	t	namespace:boost::interprocess
boost::interprocess::offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^class offset_ptr$/;"	c	namespace:boost::interprocess
boost::interprocess::offset_ptr::dec_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^   void dec_offset(std::ptrdiff_t bytes)$/;"	f	class:boost::interprocess::offset_ptr	access:private	signature:(std::ptrdiff_t bytes)
boost::interprocess::offset_ptr::difference_type	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef std::ptrdiff_t                    difference_type;$/;"	t	class:boost::interprocess::offset_ptr	access:public
boost::interprocess::offset_ptr::get	/usr/include/boost/interprocess/offset_ptr.hpp	/^   pointer get()const$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
boost::interprocess::offset_ptr::get_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^   std::ptrdiff_t get_offset()$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:()
boost::interprocess::offset_ptr::get_pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^   void* get_pointer() const$/;"	f	class:boost::interprocess::offset_ptr	access:private	signature:() const
boost::interprocess::offset_ptr::inc_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^   void inc_offset(std::ptrdiff_t bytes)$/;"	f	class:boost::interprocess::offset_ptr	access:private	signature:(std::ptrdiff_t bytes)
boost::interprocess::offset_ptr::iterator_category	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef std::random_access_iterator_tag   iterator_category;$/;"	t	class:boost::interprocess::offset_ptr	access:public
boost::interprocess::offset_ptr::m_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^   std::ptrdiff_t m_offset; \/\/Distance between this object and pointed address$/;"	m	class:boost::interprocess::offset_ptr	access:private
boost::interprocess::offset_ptr::offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr& ptr) $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr& ptr)
boost::interprocess::offset_ptr::offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr<T2> &ptr) $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<T2> &ptr)
boost::interprocess::offset_ptr::offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr<Y> & r, detail::const_cast_tag)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<Y> & r, detail::const_cast_tag)
boost::interprocess::offset_ptr::offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr<Y> & r, detail::dynamic_cast_tag)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<Y> & r, detail::dynamic_cast_tag)
boost::interprocess::offset_ptr::offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr<Y> & r, detail::reinterpret_cast_tag)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<Y> & r, detail::reinterpret_cast_tag)
boost::interprocess::offset_ptr::offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr<Y> & r, detail::static_cast_tag)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<Y> & r, detail::static_cast_tag)
boost::interprocess::offset_ptr::offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(pointer ptr = 0) {  this->set_offset(ptr); }$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(pointer ptr = 0)
boost::interprocess::offset_ptr::offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(T *ptr) $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(T *ptr)
boost::interprocess::offset_ptr::operator !	/usr/include/boost/interprocess/offset_ptr.hpp	/^   bool operator! () const$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
boost::interprocess::offset_ptr::operator *	/usr/include/boost/interprocess/offset_ptr.hpp	/^   reference operator* () const           $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
boost::interprocess::offset_ptr::operator +	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr operator+ (std::ptrdiff_t offset) const   $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(std::ptrdiff_t offset) const
boost::interprocess::offset_ptr::operator ++	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr operator++ (int)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(int)
boost::interprocess::offset_ptr::operator ++	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr& operator++ (void) $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(void)
boost::interprocess::offset_ptr::operator +=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr &operator+= (std::ptrdiff_t offset)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(std::ptrdiff_t offset)
boost::interprocess::offset_ptr::operator -	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr operator- (std::ptrdiff_t offset) const   $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(std::ptrdiff_t offset) const
boost::interprocess::offset_ptr::operator --	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr operator-- (int)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(int)
boost::interprocess::offset_ptr::operator --	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr& operator-- (void) $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(void)
boost::interprocess::offset_ptr::operator -=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr &operator-= (std::ptrdiff_t offset)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(std::ptrdiff_t offset)
boost::interprocess::offset_ptr::operator ->	/usr/include/boost/interprocess/offset_ptr.hpp	/^   pointer operator->() const           $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
boost::interprocess::offset_ptr::operator =	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr& operator= (const offset_ptr & pt)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr & pt)
boost::interprocess::offset_ptr::operator =	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr& operator= (const offset_ptr<T2> & pt)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<T2> & pt)
boost::interprocess::offset_ptr::operator =	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr& operator= (pointer from)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(pointer from)
boost::interprocess::offset_ptr::operator unspecified_bool_type	/usr/include/boost/interprocess/offset_ptr.hpp	/^   operator unspecified_bool_type() const  $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
boost::interprocess::offset_ptr::operator []	/usr/include/boost/interprocess/offset_ptr.hpp	/^   reference operator[](std::ptrdiff_t idx) const   $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(std::ptrdiff_t idx) const
boost::interprocess::offset_ptr::pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef PointedType *                     pointer;$/;"	t	class:boost::interprocess::offset_ptr	access:public
boost::interprocess::offset_ptr::reference	/usr/include/boost/interprocess/offset_ptr.hpp	/^      add_reference<PointedType>::type       reference;$/;"	t	class:boost::interprocess::offset_ptr	access:public
boost::interprocess::offset_ptr::self_t	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef offset_ptr<PointedType>           self_t;$/;"	t	class:boost::interprocess::offset_ptr	access:private
boost::interprocess::offset_ptr::set_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^   void set_offset(const void *ptr)$/;"	f	class:boost::interprocess::offset_ptr	access:private	signature:(const void *ptr)
boost::interprocess::offset_ptr::set_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^   void set_offset(const volatile void *ptr)$/;"	f	class:boost::interprocess::offset_ptr	access:private	signature:(const volatile void *ptr)
boost::interprocess::offset_ptr::unspecified_bool_type_func	/usr/include/boost/interprocess/offset_ptr.hpp	/^   void unspecified_bool_type_func() const {}$/;"	f	class:boost::interprocess::offset_ptr	access:private	signature:() const
boost::interprocess::offset_ptr::value_type	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef PointedType                       value_type;$/;"	t	class:boost::interprocess::offset_ptr	access:public
boost::interprocess::offset_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^typedef long long          offset_t;$/;"	t	namespace:boost::interprocess
boost::interprocess::open_copy_on_write	/usr/include/boost/interprocess/creation_tags.hpp	/^static const open_copy_on_write_t open_copy_on_write = open_copy_on_write_t();$/;"	m	namespace:boost::interprocess
boost::interprocess::open_copy_on_write_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct open_copy_on_write_t {};$/;"	s	namespace:boost::interprocess
boost::interprocess::open_only	/usr/include/boost/interprocess/creation_tags.hpp	/^static const open_only_t      open_only      = open_only_t();$/;"	m	namespace:boost::interprocess
boost::interprocess::open_only_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct open_only_t {};$/;"	s	namespace:boost::interprocess
boost::interprocess::open_or_create	/usr/include/boost/interprocess/creation_tags.hpp	/^static const open_or_create_t open_or_create = open_or_create_t();$/;"	m	namespace:boost::interprocess
boost::interprocess::open_or_create_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct open_or_create_t {};$/;"	s	namespace:boost::interprocess
boost::interprocess::open_read_only	/usr/include/boost/interprocess/creation_tags.hpp	/^static const open_read_only_t open_read_only = open_read_only_t();$/;"	m	namespace:boost::interprocess
boost::interprocess::open_read_only_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct open_read_only_t {};$/;"	s	namespace:boost::interprocess
boost::interprocess::operator !=	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^bool operator!=(const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
boost::interprocess::operator !=	/usr/include/boost/interprocess/allocators/allocator.hpp	/^bool operator!=(const allocator<T, SegmentManager>  &alloc1, $/;"	f	namespace:boost::interprocess	signature:(const allocator<T, SegmentManager> &alloc1, const allocator<T, SegmentManager> &alloc2)
boost::interprocess::operator !=	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^bool operator!=(const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
boost::interprocess::operator !=	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^bool operator!=(const cached_node_allocator<T, S, NPC> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const cached_node_allocator<T, S, NPC> &alloc1, const cached_node_allocator<T, S, NPC> &alloc2)
boost::interprocess::operator !=	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^bool operator!=(const node_allocator<T, S, NPC> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const node_allocator<T, S, NPC> &alloc1, const node_allocator<T, S, NPC> &alloc2)
boost::interprocess::operator !=	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^bool operator!=(const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
boost::interprocess::operator !=	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^bool operator!=(const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc1, const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc2)
boost::interprocess::operator !=	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator!= (const intersegment_ptr<T1> &pt1, $/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &pt1, const intersegment_ptr<T2> &pt2)
boost::interprocess::operator !=	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline bool operator!= (const offset_ptr<T1> &pt1, $/;"	f	namespace:boost::interprocess	signature:(const offset_ptr<T1> &pt1, const offset_ptr<T2> &pt2)
boost::interprocess::operator !=	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator!=(const typename intrusive_ptr<T, VP>::pointer &a,$/;"	f	namespace:boost::interprocess	signature:(const typename intrusive_ptr<T, VP>::pointer &a, intrusive_ptr<T, VP> const & b)
boost::interprocess::operator !=	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator!=(intrusive_ptr<T, VP> const & a,$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> const & a, const typename intrusive_ptr<T, VP>::pointer &b)
boost::interprocess::operator !=	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator!=(intrusive_ptr<T, VP> const & a,$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> const & a, intrusive_ptr<U, VP> const & b)
boost::interprocess::operator !=	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^bool operator!=(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)
boost::interprocess::operator !=	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator!=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
boost::interprocess::operator +	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^intersegment_ptr<T> operator+$/;"	f	namespace:boost::interprocess	signature:(std::ptrdiff_t diff, const intersegment_ptr<T>& right)
boost::interprocess::operator +	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline offset_ptr<T> operator+(std::ptrdiff_t diff, const offset_ptr<T>& right)$/;"	f	namespace:boost::interprocess	signature:(std::ptrdiff_t diff, const offset_ptr<T>& right)
boost::interprocess::operator -	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^std::ptrdiff_t operator- (const intersegment_ptr<T> &pt, $/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T> &pt, const intersegment_ptr<T2> &pt2)
boost::interprocess::operator -	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline std::ptrdiff_t operator- (const offset_ptr<T> &pt, const offset_ptr<T2> &pt2)$/;"	f	namespace:boost::interprocess	signature:(const offset_ptr<T> &pt, const offset_ptr<T2> &pt2)
boost::interprocess::operator <	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator <(const intersegment_ptr<T1> &left,$/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &left, const intersegment_ptr<T2> &right)
boost::interprocess::operator <	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline bool operator< (const offset_ptr<T1> &pt1, $/;"	f	namespace:boost::interprocess	signature:(const offset_ptr<T1> &pt1, const offset_ptr<T2> &pt2)
boost::interprocess::operator <	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator<(intrusive_ptr<T, VP> const & a, $/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> const & a, intrusive_ptr<T, VP> const & b)
boost::interprocess::operator <	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^bool operator<(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)
boost::interprocess::operator <	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator <(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
boost::interprocess::operator <	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^bool operator<(weak_ptr<T, A, D> const & a, weak_ptr<U, A2, D2> const & b)$/;"	f	namespace:boost::interprocess	signature:(weak_ptr<T, A, D> const & a, weak_ptr<U, A2, D2> const & b)
boost::interprocess::operator <<	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^std::basic_ostream<E, T> & operator<< $/;"	f	namespace:boost::interprocess	signature:(std::basic_ostream<E, T> & os, const intersegment_ptr<U> & p)
boost::interprocess::operator <<	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline std::basic_ostream<E, T> & operator<< $/;"	f	namespace:boost::interprocess	signature:(std::basic_ostream<E, T> & os, offset_ptr<Y> const & p)
boost::interprocess::operator <<	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^inline std::basic_ostream<E, T> & operator<< $/;"	f	namespace:boost::interprocess	signature:(std::basic_ostream<E, T> & os, intrusive_ptr<Y, VP> const & p)
boost::interprocess::operator <<	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^std::basic_ostream<E, T> & operator<< $/;"	f	namespace:boost::interprocess	signature:(std::basic_ostream<E, T> & os, shared_ptr<Y, VoidAllocator, Deleter> const & p)
boost::interprocess::operator <=	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator<= (const intersegment_ptr<T1> &pt1, $/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &pt1, const intersegment_ptr<T2> &pt2)
boost::interprocess::operator <=	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline bool operator<= (const offset_ptr<T1> &pt1, $/;"	f	namespace:boost::interprocess	signature:(const offset_ptr<T1> &pt1, const offset_ptr<T2> &pt2)
boost::interprocess::operator <=	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator<=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
boost::interprocess::operator ==	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^bool operator==(const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
boost::interprocess::operator ==	/usr/include/boost/interprocess/allocators/allocator.hpp	/^bool operator==(const allocator<T , SegmentManager>  &alloc1, $/;"	f	namespace:boost::interprocess	signature:(const allocator<T , SegmentManager> &alloc1, const allocator<T, SegmentManager> &alloc2)
boost::interprocess::operator ==	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^bool operator==(const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
boost::interprocess::operator ==	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^bool operator==(const cached_node_allocator<T, S, NPC> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const cached_node_allocator<T, S, NPC> &alloc1, const cached_node_allocator<T, S, NPC> &alloc2)
boost::interprocess::operator ==	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^bool operator==(const node_allocator<T, S, NPC> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const node_allocator<T, S, NPC> &alloc1, const node_allocator<T, S, NPC> &alloc2)
boost::interprocess::operator ==	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^bool operator==(const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
boost::interprocess::operator ==	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^bool operator==(const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc1, const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc2)
boost::interprocess::operator ==	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator ==(const intersegment_ptr<T1> &left,$/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &left, const intersegment_ptr<T2> &right)
boost::interprocess::operator ==	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline bool operator== (const offset_ptr<T1> &pt1, $/;"	f	namespace:boost::interprocess	signature:(const offset_ptr<T1> &pt1, const offset_ptr<T2> &pt2)
boost::interprocess::operator ==	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator==(const typename intrusive_ptr<T, VP>::pointer &a,$/;"	f	namespace:boost::interprocess	signature:(const typename intrusive_ptr<T, VP>::pointer &a, intrusive_ptr<T, VP> const & b)
boost::interprocess::operator ==	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator==(intrusive_ptr<T, VP> const & a, $/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> const & a, intrusive_ptr<U, VP> const & b)
boost::interprocess::operator ==	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator==(intrusive_ptr<T, VP> const & a,$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> const & a, const typename intrusive_ptr<T, VP>::pointer &b)
boost::interprocess::operator ==	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^bool operator==(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)
boost::interprocess::operator ==	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator==(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
boost::interprocess::operator >	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator> (const intersegment_ptr<T1> &pt1, $/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &pt1, const intersegment_ptr<T2> &pt2)
boost::interprocess::operator >	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline bool operator> (const offset_ptr<T1> &pt1, $/;"	f	namespace:boost::interprocess	signature:(const offset_ptr<T1> &pt1, const offset_ptr<T2> &pt2)
boost::interprocess::operator >	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator >(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
boost::interprocess::operator >=	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator>= (const intersegment_ptr<T1> &pt1, $/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &pt1, const intersegment_ptr<T2> &pt2)
boost::interprocess::operator >=	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline bool operator>= (const offset_ptr<T1> &pt1, $/;"	f	namespace:boost::interprocess	signature:(const offset_ptr<T1> &pt1, const offset_ptr<T2> &pt2)
boost::interprocess::operator >=	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator>=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
boost::interprocess::operator >>	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^std::basic_istream<E, T> & operator>> $/;"	f	namespace:boost::interprocess	signature:(std::basic_istream<E, T> & os, intersegment_ptr<U> & p)
boost::interprocess::operator >>	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline std::basic_istream<E, T> & operator>> $/;"	f	namespace:boost::interprocess	signature:(std::basic_istream<E, T> & is, offset_ptr<Y> & p)
boost::interprocess::operator_arrow_proxy	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^struct operator_arrow_proxy$/;"	s	namespace:boost::interprocess
boost::interprocess::operator_arrow_proxy	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^struct operator_arrow_proxy<T&>$/;"	s	namespace:boost::interprocess
boost::interprocess::operator_arrow_proxy::m_value	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   mutable PseudoReference m_value;$/;"	m	struct:boost::interprocess::operator_arrow_proxy	access:public
boost::interprocess::operator_arrow_proxy::m_value	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   mutable T &m_value;$/;"	m	struct:boost::interprocess::operator_arrow_proxy	access:public
boost::interprocess::operator_arrow_proxy::operator ->	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   PseudoReference* operator->() const { return &m_value; }$/;"	f	struct:boost::interprocess::operator_arrow_proxy	access:public	signature:() const
boost::interprocess::operator_arrow_proxy::operator ->	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   T* operator->() const { return &m_value; }$/;"	f	struct:boost::interprocess::operator_arrow_proxy	access:public	signature:() const
boost::interprocess::operator_arrow_proxy::operator_arrow_proxy	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   operator_arrow_proxy(const PseudoReference &px)$/;"	f	struct:boost::interprocess::operator_arrow_proxy	access:public	signature:(const PseudoReference &px)
boost::interprocess::operator_arrow_proxy::operator_arrow_proxy	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   operator_arrow_proxy(T &px)$/;"	f	struct:boost::interprocess::operator_arrow_proxy	access:public	signature:(T &px)
boost::interprocess::other_error	/usr/include/boost/interprocess/errors.hpp	/^   other_error,      \/\/ library generated error$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::out_of_memory_error	/usr/include/boost/interprocess/errors.hpp	/^   out_of_memory_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::out_of_resource_error	/usr/include/boost/interprocess/errors.hpp	/^   out_of_resource_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::out_of_space_error	/usr/include/boost/interprocess/errors.hpp	/^   out_of_space_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::path_error	/usr/include/boost/interprocess/errors.hpp	/^   path_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::private_adaptive_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^class private_adaptive_pool$/;"	c	namespace:boost::interprocess	inherits:detail::private_adaptive_pool_base
boost::interprocess::private_adaptive_pool::base_t	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^         < 2, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> base_t;$/;"	t	class:boost::interprocess::private_adaptive_pool	access:private
boost::interprocess::private_adaptive_pool::private_adaptive_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool$/;"	f	class:boost::interprocess::private_adaptive_pool	access:public	signature:(const private_adaptive_pool<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
boost::interprocess::private_adaptive_pool::private_adaptive_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool(SegmentManager *segment_mngr) $/;"	f	class:boost::interprocess::private_adaptive_pool	access:public	signature:(SegmentManager *segment_mngr)
boost::interprocess::private_adaptive_pool::rebind	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::private_adaptive_pool	access:public
boost::interprocess::private_adaptive_pool::rebind::other	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^         <T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::private_adaptive_pool::rebind	access:public
boost::interprocess::private_adaptive_pool::version	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef boost::interprocess::version_type<private_adaptive_pool, 2>   version;$/;"	t	class:boost::interprocess::private_adaptive_pool	access:public
boost::interprocess::private_node_allocator	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^class private_node_allocator$/;"	c	namespace:boost::interprocess	inherits:detail::private_node_allocator_base
boost::interprocess::private_node_allocator::base_t	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^         < 2, T, SegmentManager, NodesPerBlock> base_t;$/;"	t	class:boost::interprocess::private_node_allocator	access:private
boost::interprocess::private_node_allocator::private_node_allocator	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator$/;"	f	class:boost::interprocess::private_node_allocator	access:public	signature:(const private_node_allocator<T2, SegmentManager, NodesPerBlock> &other)
boost::interprocess::private_node_allocator::private_node_allocator	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator(SegmentManager *segment_mngr) $/;"	f	class:boost::interprocess::private_node_allocator	access:public	signature:(SegmentManager *segment_mngr)
boost::interprocess::private_node_allocator::rebind	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::private_node_allocator	access:public
boost::interprocess::private_node_allocator::rebind::other	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^         <T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::private_node_allocator::rebind	access:public
boost::interprocess::private_node_allocator::version	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef boost::interprocess::version_type<private_node_allocator, 2>   version;$/;"	t	class:boost::interprocess::private_node_allocator	access:public
boost::interprocess::rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^class rbtree_best_fit$/;"	c	namespace:boost::interprocess
boost::interprocess::rbtree_best_fit::algo_impl_t	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef detail::memory_algorithm_common<rbtree_best_fit> algo_impl_t;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::Alignment	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t Alignment = !MemAlignment$/;"	m	class:boost::interprocess::rbtree_best_fit	access:public
boost::interprocess::rbtree_best_fit::AlignmentMask	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t AlignmentMask = (Alignment - 1);$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   allocate(std::size_t nbytes)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(std::size_t nbytes)
boost::interprocess::rbtree_best_fit::allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void* allocate             (std::size_t nbytes);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(std::size_t nbytes)
boost::interprocess::rbtree_best_fit::AllocatedCtrlBytes	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t AllocatedCtrlBytes  = detail::ct_rounded_size<sizeof(SizeHolder), Alignment>::value;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::AllocatedCtrlUnits	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t AllocatedCtrlUnits  = AllocatedCtrlBytes\/Alignment;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::allocate_aligned	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   allocate_aligned(std::size_t nbytes, std::size_t alignment)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(std::size_t nbytes, std::size_t alignment)
boost::interprocess::rbtree_best_fit::allocate_aligned	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void* allocate_aligned     (std::size_t nbytes, std::size_t alignment);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(std::size_t nbytes, std::size_t alignment)
boost::interprocess::rbtree_best_fit::allocate_many	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   multiallocation_chain allocate_many(const std::size_t *elem_sizes, std::size_t n_elements, std::size_t sizeof_element)$/;"	f	class:boost::interprocess::rbtree_best_fit	access:public	signature:(const std::size_t *elem_sizes, std::size_t n_elements, std::size_t sizeof_element)
boost::interprocess::rbtree_best_fit::allocate_many	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   multiallocation_chain allocate_many(std::size_t elem_bytes, std::size_t num_elements)$/;"	f	class:boost::interprocess::rbtree_best_fit	access:public	signature:(std::size_t elem_bytes, std::size_t num_elements)
boost::interprocess::rbtree_best_fit::allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size,std::size_t &received_size, T *reuse_ptr = 0)
boost::interprocess::rbtree_best_fit::allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size,std::size_t &received_size, T *reuse_ptr)
boost::interprocess::rbtree_best_fit::all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^    all_memory_deallocated()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
boost::interprocess::rbtree_best_fit::all_memory_deallocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   bool all_memory_deallocated();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:()
boost::interprocess::rbtree_best_fit::BlockCtrlBytes	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t BlockCtrlBytes = detail::ct_rounded_size<sizeof(block_ctrl), Alignment>::value;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::BlockCtrlUnits	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t BlockCtrlUnits = BlockCtrlBytes\/Alignment;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::block_ctrl	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   struct block_ctrl$/;"	s	class:boost::interprocess::rbtree_best_fit	inherits:SizeHolder,TreeHook	access:private
boost::interprocess::rbtree_best_fit::block_ctrl::block_ctrl	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      block_ctrl()$/;"	f	struct:boost::interprocess::rbtree_best_fit::block_ctrl	access:public	signature:()
boost::interprocess::rbtree_best_fit::block_ctrl::operator <	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      friend bool operator<(const block_ctrl &a, const block_ctrl &b)$/;"	f	struct:boost::interprocess::rbtree_best_fit::block_ctrl	access:friend	signature:(const block_ctrl &a, const block_ctrl &b)
boost::interprocess::rbtree_best_fit::block_ctrl::operator ==	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      friend bool operator==(const block_ctrl &a, const block_ctrl &b)$/;"	f	struct:boost::interprocess::rbtree_best_fit::block_ctrl	access:friend	signature:(const block_ctrl &a, const block_ctrl &b)
boost::interprocess::rbtree_best_fit::block_ctrl_ptr	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      pointer_to_other<void_pointer, block_ctrl>::type   block_ctrl_ptr;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   BOOST_STATIC_ASSERT((0 == (Alignment & (Alignment - std::size_t(1u)))));$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(0 == (Alignment & (Alignment - std::size_t(1u))))
boost::interprocess::rbtree_best_fit::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   BOOST_STATIC_ASSERT((Alignment >= 4));$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(Alignment >= 4)
boost::interprocess::rbtree_best_fit::BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   BOOST_STATIC_ASSERT((Alignment >= detail::alignment_of<void_pointer>::value));$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(Alignment >= detail::alignment_of<void_pointer>::value)
boost::interprocess::rbtree_best_fit::char_ptr	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      pointer_to_other<void_pointer, char>::type         char_ptr;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::check_sanity	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^    check_sanity()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
boost::interprocess::rbtree_best_fit::check_sanity	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   bool check_sanity();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:()
boost::interprocess::rbtree_best_fit::deallocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void   deallocate          (void *addr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(void *addr)
boost::interprocess::rbtree_best_fit::deallocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::deallocate(void* addr)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(void* addr)
boost::interprocess::rbtree_best_fit::deallocate_many	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   deallocate_many(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::multiallocation_chain chain)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::multiallocation_chain chain)
boost::interprocess::rbtree_best_fit::deallocate_many	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void deallocate_many(multiallocation_chain chain);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(multiallocation_chain chain)
boost::interprocess::rbtree_best_fit::EndCtrlBlockBytes	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t EndCtrlBlockBytes   = detail::ct_rounded_size<sizeof(SizeHolder), Alignment>::value;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::EndCtrlBlockUnits	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t EndCtrlBlockUnits   = EndCtrlBlockBytes\/Alignment;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::get_free_memory	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   std::size_t get_free_memory()  const;$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:() const
boost::interprocess::rbtree_best_fit::get_free_memory	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^inline std::size_t rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::get_free_memory()  const$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:() const
boost::interprocess::rbtree_best_fit::get_min_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   get_min_size (std::size_t extra_hdr_bytes)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(std::size_t extra_hdr_bytes)
boost::interprocess::rbtree_best_fit::get_min_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static std::size_t get_min_size (std::size_t extra_hdr_bytes);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(std::size_t extra_hdr_bytes)
boost::interprocess::rbtree_best_fit::get_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   std::size_t get_size()  const;$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:() const
boost::interprocess::rbtree_best_fit::get_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^inline std::size_t rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::get_size()  const$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:() const
boost::interprocess::rbtree_best_fit::grow	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void grow(std::size_t extra_size);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(std::size_t extra_size)
boost::interprocess::rbtree_best_fit::grow	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::grow(std::size_t extra_size)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(std::size_t extra_size)
boost::interprocess::rbtree_best_fit::header_t	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   struct header_t : public interprocess_mutex$/;"	s	class:boost::interprocess::rbtree_best_fit	inherits:interprocess_mutex	access:private
boost::interprocess::rbtree_best_fit::header_t::m_allocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      std::size_t       m_allocated;$/;"	m	struct:boost::interprocess::rbtree_best_fit::header_t	access:public
boost::interprocess::rbtree_best_fit::header_t::m_extra_hdr_bytes	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      std::size_t       m_extra_hdr_bytes;$/;"	m	struct:boost::interprocess::rbtree_best_fit::header_t	access:public
boost::interprocess::rbtree_best_fit::header_t::m_imultiset	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      Imultiset            m_imultiset;$/;"	m	struct:boost::interprocess::rbtree_best_fit::header_t	access:public
boost::interprocess::rbtree_best_fit::header_t::m_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      std::size_t       m_size;$/;"	m	struct:boost::interprocess::rbtree_best_fit::header_t	access:public
boost::interprocess::rbtree_best_fit::Imultiset	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      <block_ctrl, bi::base_hook<TreeHook> >::type                Imultiset;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::imultiset_iterator	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef typename Imultiset::iterator                           imultiset_iterator;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::interprocess_mutex	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef typename MutexFamily::mutex_type                       interprocess_mutex;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::MinBlockUnits	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t MinBlockUnits       = BlockCtrlUnits;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::multiallocation_chain	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      basic_multiallocation_chain<VoidPointer>  multiallocation_chain;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:public
boost::interprocess::rbtree_best_fit::mutex_family	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef MutexFamily        mutex_family;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:public
boost::interprocess::rbtree_best_fit::m_header	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   }  m_header;$/;"	m	class:boost::interprocess::rbtree_best_fit	typeref:struct:boost::interprocess::rbtree_best_fit::header_t	access:private
boost::interprocess::rbtree_best_fit::operator =	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit &operator=(const rbtree_best_fit &);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(const rbtree_best_fit &)
boost::interprocess::rbtree_best_fit::PayloadPerAllocation	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t PayloadPerAllocation = AllocatedCtrlBytes - UsableByPreviousChunk;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:public
boost::interprocess::rbtree_best_fit::priv_add_segment	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_add_segment(void *addr, std::size_t size)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(void *addr, std::size_t size)
boost::interprocess::rbtree_best_fit::priv_add_segment	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void priv_add_segment(void *addr, std::size_t size);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(void *addr, std::size_t size)
boost::interprocess::rbtree_best_fit::priv_allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_allocate(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(boost::interprocess::allocation_type command ,std::size_t limit_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr ,std::size_t backwards_multiple)
boost::interprocess::rbtree_best_fit::priv_allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   std::pair<void *, bool> priv_allocate(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(boost::interprocess::allocation_type command ,std::size_t limit_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr = 0 ,std::size_t backwards_multiple = 1)
boost::interprocess::rbtree_best_fit::priv_allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      priv_allocation_command(boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size,std::size_t &received_size, void *reuse_ptr, std::size_t sizeof_object)
boost::interprocess::rbtree_best_fit::priv_allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_allocation_command (boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size,std::size_t &received_size, void *reuse_ptr, std::size_t sizeof_object)
boost::interprocess::rbtree_best_fit::priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void* priv_check_and_allocate(std::size_t units$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(std::size_t units ,block_ctrl* block ,std::size_t &received_size)
boost::interprocess::rbtree_best_fit::priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void* rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_check_and_allocate$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(std::size_t nunits ,typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl* block ,std::size_t &received_size)
boost::interprocess::rbtree_best_fit::priv_deallocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void priv_deallocate(void *addr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(void *addr)
boost::interprocess::rbtree_best_fit::priv_deallocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_deallocate(void* addr)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(void* addr)
boost::interprocess::rbtree_best_fit::priv_end_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   block_ctrl * priv_end_block(block_ctrl *first_segment_block);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *first_segment_block)
boost::interprocess::rbtree_best_fit::priv_end_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_end_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *first_segment_block)
boost::interprocess::rbtree_best_fit::priv_expand	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   bool priv_expand(void *ptr$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(void *ptr ,const std::size_t min_size, const std::size_t preferred_size ,std::size_t &received_size)
boost::interprocess::rbtree_best_fit::priv_expand	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_expand (void *ptr$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(void *ptr ,const std::size_t min_size ,const std::size_t preferred_size ,std::size_t &received_size)
boost::interprocess::rbtree_best_fit::priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(boost::interprocess::allocation_type command ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr ,bool only_preferred_backwards ,std::size_t backwards_multiple)
boost::interprocess::rbtree_best_fit::priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void* priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(boost::interprocess::allocation_type command ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr ,bool only_preferred_backwards ,std::size_t backwards_multiple)
boost::interprocess::rbtree_best_fit::priv_first_block_offset	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   ::priv_first_block_offset(const void *this_ptr, std::size_t extra_hdr_bytes)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(const void *this_ptr, std::size_t extra_hdr_bytes)
boost::interprocess::rbtree_best_fit::priv_first_block_offset	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static std::size_t priv_first_block_offset(const void *this_ptr, std::size_t extra_hdr_bytes);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(const void *this_ptr, std::size_t extra_hdr_bytes)
boost::interprocess::rbtree_best_fit::priv_get_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_get_block(const void *ptr)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(const void *ptr)
boost::interprocess::rbtree_best_fit::priv_get_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static block_ctrl *priv_get_block(const void *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(const void *ptr)
boost::interprocess::rbtree_best_fit::priv_get_total_units	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_get_total_units(std::size_t userbytes)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(std::size_t userbytes)
boost::interprocess::rbtree_best_fit::priv_get_total_units	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static std::size_t priv_get_total_units(std::size_t userbytes);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(std::size_t userbytes)
boost::interprocess::rbtree_best_fit::priv_get_user_buffer	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      priv_get_user_buffer(const typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(const typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)
boost::interprocess::rbtree_best_fit::priv_get_user_buffer	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static void *priv_get_user_buffer(const block_ctrl *block);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(const block_ctrl *block)
boost::interprocess::rbtree_best_fit::priv_is_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   bool priv_is_allocated_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
boost::interprocess::rbtree_best_fit::priv_is_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^bool rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_is_allocated_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)
boost::interprocess::rbtree_best_fit::priv_is_prev_allocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   bool priv_is_prev_allocated(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
boost::interprocess::rbtree_best_fit::priv_is_prev_allocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^bool rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_is_prev_allocated$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *ptr)
boost::interprocess::rbtree_best_fit::priv_mark_as_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void priv_mark_as_allocated_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
boost::interprocess::rbtree_best_fit::priv_mark_as_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_mark_as_allocated_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)
boost::interprocess::rbtree_best_fit::priv_mark_as_free_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void priv_mark_as_free_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
boost::interprocess::rbtree_best_fit::priv_mark_as_free_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_mark_as_free_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)
boost::interprocess::rbtree_best_fit::priv_mark_new_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_mark_new_allocated_block(block_ctrl *new_block)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(block_ctrl *new_block)
boost::interprocess::rbtree_best_fit::priv_mark_new_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void priv_mark_new_allocated_block(block_ctrl *block);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *block)
boost::interprocess::rbtree_best_fit::priv_next_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   block_ctrl * priv_next_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
boost::interprocess::rbtree_best_fit::priv_next_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_next_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *ptr)
boost::interprocess::rbtree_best_fit::priv_prev_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   block_ctrl * priv_prev_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
boost::interprocess::rbtree_best_fit::priv_prev_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_prev_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *ptr)
boost::interprocess::rbtree_best_fit::raw_allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^     raw_allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_object,$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(boost::interprocess::allocation_type command, std::size_t limit_object, std::size_t preferred_object,std::size_t &received_object, void *reuse_ptr = 0, std::size_t sizeof_object = 1)
boost::interprocess::rbtree_best_fit::raw_allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   raw_allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_objects,$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(boost::interprocess::allocation_type command, std::size_t limit_objects, std::size_t preferred_objects,std::size_t &received_objects, void *reuse_ptr, std::size_t sizeof_object)
boost::interprocess::rbtree_best_fit::rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit           (std::size_t size, std::size_t extra_hdr_bytes);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(std::size_t size, std::size_t extra_hdr_bytes)
boost::interprocess::rbtree_best_fit::rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:()
boost::interprocess::rbtree_best_fit::rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit(const rbtree_best_fit &);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(const rbtree_best_fit &)
boost::interprocess::rbtree_best_fit::rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit(std::size_t size, std::size_t extra_hdr_bytes)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(std::size_t size, std::size_t extra_hdr_bytes)
boost::interprocess::rbtree_best_fit::shrink_to_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void shrink_to_fit();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:()
boost::interprocess::rbtree_best_fit::shrink_to_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::shrink_to_fit()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
boost::interprocess::rbtree_best_fit::size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   size(const void *ptr) const$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(const void *ptr) const
boost::interprocess::rbtree_best_fit::size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   std::size_t size(const void *ptr) const;$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(const void *ptr) const
boost::interprocess::rbtree_best_fit::SizeHolder	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   struct SizeHolder$/;"	s	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::SizeHolder::m_allocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      std::size_t m_allocated :  1;$/;"	m	struct:boost::interprocess::rbtree_best_fit::SizeHolder	access:public
boost::interprocess::rbtree_best_fit::SizeHolder::m_prev_allocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      std::size_t m_prev_allocated :  1;$/;"	m	struct:boost::interprocess::rbtree_best_fit::SizeHolder	access:public
boost::interprocess::rbtree_best_fit::SizeHolder::m_prev_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      std::size_t m_prev_size :  sizeof(std::size_t)*CHAR_BIT;$/;"	m	struct:boost::interprocess::rbtree_best_fit::SizeHolder	access:public
boost::interprocess::rbtree_best_fit::SizeHolder::m_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      std::size_t m_size      :  sizeof(std::size_t)*CHAR_BIT - 2;$/;"	m	struct:boost::interprocess::rbtree_best_fit::SizeHolder	access:public
boost::interprocess::rbtree_best_fit::size_block_ctrl_compare	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   struct size_block_ctrl_compare$/;"	s	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::size_block_ctrl_compare::operator ()	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      bool operator()(const block_ctrl &block, std::size_t size) const$/;"	f	struct:boost::interprocess::rbtree_best_fit::size_block_ctrl_compare	access:public	signature:(const block_ctrl &block, std::size_t size) const
boost::interprocess::rbtree_best_fit::size_block_ctrl_compare::operator ()	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      bool operator()(std::size_t size, const block_ctrl &block) const$/;"	f	struct:boost::interprocess::rbtree_best_fit::size_block_ctrl_compare	access:public	signature:(std::size_t size, const block_ctrl &block) const
boost::interprocess::rbtree_best_fit::TreeHook	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      , bi::link_mode<bi::normal_link> >::type           TreeHook;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::UsableByPreviousChunk	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t UsableByPreviousChunk   = sizeof(std::size_t);$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
boost::interprocess::rbtree_best_fit::void_pointer	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef VoidPointer        void_pointer;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:public
boost::interprocess::rbtree_best_fit::zero_free_memory	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void zero_free_memory();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:()
boost::interprocess::rbtree_best_fit::zero_free_memory	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^inline void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::zero_free_memory()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
boost::interprocess::rbtree_best_fit::~rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   ~rbtree_best_fit();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:()
boost::interprocess::rbtree_best_fit::~rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^inline rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::~rbtree_best_fit()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
boost::interprocess::read_only	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^typedef enum { read_only      = winapi::generic_read$/;"	e	enum:boost::interprocess::__anon10
boost::interprocess::read_only_error	/usr/include/boost/interprocess/errors.hpp	/^   read_only_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::read_write	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , read_write     = winapi::generic_read | winapi::generic_write$/;"	e	enum:boost::interprocess::__anon10
boost::interprocess::reinterpret_pointer_cast	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^boost::interprocess::intersegment_ptr<T> reinterpret_pointer_cast(const boost::interprocess::intersegment_ptr<U> &r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::intersegment_ptr<U> &r)
boost::interprocess::reinterpret_pointer_cast	/usr/include/boost/interprocess/offset_ptr.hpp	/^   reinterpret_pointer_cast(boost::interprocess::offset_ptr<U> const & r)$/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::offset_ptr<U> const & r)
boost::interprocess::remove_file_on_destroy	/usr/include/boost/interprocess/file_mapping.hpp	/^class remove_file_on_destroy$/;"	c	namespace:boost::interprocess
boost::interprocess::remove_file_on_destroy::m_name	/usr/include/boost/interprocess/file_mapping.hpp	/^   const char * m_name;$/;"	m	class:boost::interprocess::remove_file_on_destroy	access:private
boost::interprocess::remove_file_on_destroy::remove_file_on_destroy	/usr/include/boost/interprocess/file_mapping.hpp	/^   remove_file_on_destroy(const char *name)$/;"	f	class:boost::interprocess::remove_file_on_destroy	access:public	signature:(const char *name)
boost::interprocess::remove_file_on_destroy::~remove_file_on_destroy	/usr/include/boost/interprocess/file_mapping.hpp	/^   ~remove_file_on_destroy()$/;"	f	class:boost::interprocess::remove_file_on_destroy	access:public	signature:()
boost::interprocess::remove_shared_memory_on_destroy	/usr/include/boost/interprocess/shared_memory_object.hpp	/^class remove_shared_memory_on_destroy$/;"	c	namespace:boost::interprocess
boost::interprocess::remove_shared_memory_on_destroy::m_name	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   const char * m_name;$/;"	m	class:boost::interprocess::remove_shared_memory_on_destroy	access:private
boost::interprocess::remove_shared_memory_on_destroy::remove_shared_memory_on_destroy	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   remove_shared_memory_on_destroy(const char *name)$/;"	f	class:boost::interprocess::remove_shared_memory_on_destroy	access:public	signature:(const char *name)
boost::interprocess::remove_shared_memory_on_destroy::~remove_shared_memory_on_destroy	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   ~remove_shared_memory_on_destroy()$/;"	f	class:boost::interprocess::remove_shared_memory_on_destroy	access:public	signature:()
boost::interprocess::rv	/usr/include/boost/interprocess/detail/move.hpp	/^class rv : public T$/;"	c	namespace:boost::interprocess	inherits:T
boost::interprocess::rv::operator =	/usr/include/boost/interprocess/detail/move.hpp	/^   void operator=(rv const&);$/;"	p	class:boost::interprocess::rv	access:private	signature:(rv const&)
boost::interprocess::rv::rv	/usr/include/boost/interprocess/detail/move.hpp	/^   rv();$/;"	p	class:boost::interprocess::rv	access:private	signature:()
boost::interprocess::rv::rv	/usr/include/boost/interprocess/detail/move.hpp	/^   rv(rv const&);$/;"	p	class:boost::interprocess::rv	access:private	signature:(rv const&)
boost::interprocess::rv::~rv	/usr/include/boost/interprocess/detail/move.hpp	/^   ~rv();$/;"	p	class:boost::interprocess::rv	access:private	signature:()
boost::interprocess::scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^class scoped_lock$/;"	c	namespace:boost::interprocess
boost::interprocess::scoped_lock::abs_time	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_INTERPROCESS_RV_REF(upgradable_lock<T>) upgr, boost::posix_time::ptime &abs_time$/;"	m	class:boost::interprocess::scoped_lock	access:public
boost::interprocess::scoped_lock::detail::enable_if::type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^               , typename detail::enable_if< detail::is_same<T, Mutex> >::type * = 0)$/;"	m	class:boost::interprocess::scoped_lock::detail::enable_if	access:public
boost::interprocess::scoped_lock::detail::enable_if::type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^         , typename detail::enable_if< detail::is_same<T, Mutex> >::type * = 0)$/;"	m	class:boost::interprocess::scoped_lock::detail::enable_if	access:public
boost::interprocess::scoped_lock::detail::enable_if::type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^      , typename detail::enable_if< detail::is_same<T, Mutex> >::type * = 0)$/;"	m	class:boost::interprocess::scoped_lock::detail::enable_if	access:public
boost::interprocess::scoped_lock::lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   void lock()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
boost::interprocess::scoped_lock::mp_mutex	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   mutex_type *mp_mutex; $/;"	m	class:boost::interprocess::scoped_lock	access:private
boost::interprocess::scoped_lock::mutex	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   mutex_type* mutex() const$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:() const
boost::interprocess::scoped_lock::mutex_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   typedef Mutex mutex_type;$/;"	t	class:boost::interprocess::scoped_lock	access:public
boost::interprocess::scoped_lock::m_locked	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^      : mp_mutex(0), m_locked(false)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(false)
boost::interprocess::scoped_lock::m_locked	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^      : mp_mutex(0), m_locked(scop.owns())$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(scop.owns())
boost::interprocess::scoped_lock::m_locked	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   bool        m_locked;$/;"	m	class:boost::interprocess::scoped_lock	access:private
boost::interprocess::scoped_lock::operator unspecified_bool_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:() const
boost::interprocess::scoped_lock::owns	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   bool owns() const$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:() const
boost::interprocess::scoped_lock::release	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   mutex_type* release()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
boost::interprocess::scoped_lock::scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   explicit scoped_lock(mutex_type& m)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(mutex_type& m)
boost::interprocess::scoped_lock::scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
boost::interprocess::scoped_lock::scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(mutex_type& m, accept_ownership_type)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(mutex_type& m, accept_ownership_type)
boost::interprocess::scoped_lock::scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(mutex_type& m, const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(mutex_type& m, const boost::posix_time::ptime& abs_time)
boost::interprocess::scoped_lock::scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(mutex_type& m, defer_lock_type)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(mutex_type& m, defer_lock_type)
boost::interprocess::scoped_lock::scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(mutex_type& m, try_to_lock_type)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(mutex_type& m, try_to_lock_type)
boost::interprocess::scoped_lock::shar	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_INTERPROCESS_RV_REF(sharable_lock<T>) shar, try_to_lock_type$/;"	m	class:boost::interprocess::scoped_lock	access:public
boost::interprocess::scoped_lock::swap	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   void swap( scoped_lock<mutex_type> &other)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:( scoped_lock<mutex_type> &other)
boost::interprocess::scoped_lock::this_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   typedef scoped_lock<Mutex> this_type;$/;"	t	class:boost::interprocess::scoped_lock	access:private
boost::interprocess::scoped_lock::this_type::unspecified_bool_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   typedef bool this_type::*unspecified_bool_type;$/;"	t	class:boost::interprocess::scoped_lock::this_type	access:private
boost::interprocess::scoped_lock::timed_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   bool timed_lock(const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(const boost::posix_time::ptime& abs_time)
boost::interprocess::scoped_lock::try_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   bool try_lock()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
boost::interprocess::scoped_lock::try_to_lock_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_INTERPROCESS_RV_REF(sharable_lock<T>) shar, try_to_lock_type$/;"	m	class:boost::interprocess::scoped_lock	access:public
boost::interprocess::scoped_lock::try_to_lock_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_INTERPROCESS_RV_REF(upgradable_lock<T>) upgr, try_to_lock_type$/;"	m	class:boost::interprocess::scoped_lock	access:public
boost::interprocess::scoped_lock::unlock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   void unlock()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
boost::interprocess::scoped_lock::upgr	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   explicit scoped_lock(BOOST_INTERPROCESS_RV_REF(upgradable_lock<T>) upgr$/;"	m	class:boost::interprocess::scoped_lock	access:public
boost::interprocess::scoped_lock::upgr	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_INTERPROCESS_RV_REF(upgradable_lock<T>) upgr, boost::posix_time::ptime &abs_time$/;"	m	class:boost::interprocess::scoped_lock	access:public
boost::interprocess::scoped_lock::upgr	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_INTERPROCESS_RV_REF(upgradable_lock<T>) upgr, try_to_lock_type$/;"	m	class:boost::interprocess::scoped_lock	access:public
boost::interprocess::scoped_lock::~scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   ~scoped_lock()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
boost::interprocess::scoped_ptr	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^class scoped_ptr$/;"	c	namespace:boost::interprocess	inherits:Deleter
boost::interprocess::scoped_ptr::deleter_type	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef Deleter deleter_type;$/;"	t	class:boost::interprocess::scoped_ptr	access:public
boost::interprocess::scoped_ptr::element_type	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef T element_type;$/;"	t	class:boost::interprocess::scoped_ptr	access:public
boost::interprocess::scoped_ptr::get	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   const pointer & get() const$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:() const
boost::interprocess::scoped_ptr::get	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   pointer & get()$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:()
boost::interprocess::scoped_ptr::m_ptr	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   pointer m_ptr;$/;"	m	class:boost::interprocess::scoped_ptr	access:private
boost::interprocess::scoped_ptr::operator !	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   bool operator! () const \/\/ never throws$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:() const
boost::interprocess::scoped_ptr::operator *	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   reference operator*() const$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:() const
boost::interprocess::scoped_ptr::operator ->	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   const pointer &operator->() const$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:() const
boost::interprocess::scoped_ptr::operator ->	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   pointer &operator->()$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:()
boost::interprocess::scoped_ptr::operator =	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   scoped_ptr & operator=(scoped_ptr const &);$/;"	p	class:boost::interprocess::scoped_ptr	access:private	signature:(scoped_ptr const &)
boost::interprocess::scoped_ptr::operator unspecified_bool_type	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:() const
boost::interprocess::scoped_ptr::pointer	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef typename detail::pointer_type<T, Deleter>::type pointer;$/;"	t	class:boost::interprocess::scoped_ptr	access:public
boost::interprocess::scoped_ptr::reference	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef typename detail::add_reference<T>::type reference;$/;"	t	class:boost::interprocess::scoped_ptr	access:private
boost::interprocess::scoped_ptr::release	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   pointer release()$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:()
boost::interprocess::scoped_ptr::reset	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   void reset(const pointer &p = 0) \/\/ never throws$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:(const pointer &p = 0)
boost::interprocess::scoped_ptr::reset	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   void reset(const pointer &p, const Deleter &d) \/\/ never throws$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:(const pointer &p, const Deleter &d)
boost::interprocess::scoped_ptr::scoped_ptr	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   explicit scoped_ptr(const pointer &p = 0, const Deleter &d = Deleter())$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:(const pointer &p = 0, const Deleter &d = Deleter())
boost::interprocess::scoped_ptr::scoped_ptr	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   scoped_ptr(scoped_ptr const &);$/;"	p	class:boost::interprocess::scoped_ptr	access:private	signature:(scoped_ptr const &)
boost::interprocess::scoped_ptr::swap	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   void swap(scoped_ptr & b) \/\/ never throws$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:(scoped_ptr & b)
boost::interprocess::scoped_ptr::this_type	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef scoped_ptr<T, Deleter> this_type;$/;"	t	class:boost::interprocess::scoped_ptr	access:private
boost::interprocess::scoped_ptr::this_type::unspecified_bool_type	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef pointer this_type::*unspecified_bool_type;$/;"	t	class:boost::interprocess::scoped_ptr::this_type	access:public
boost::interprocess::scoped_ptr::~scoped_ptr	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   ~scoped_ptr()$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:()
boost::interprocess::security_error	/usr/include/boost/interprocess/errors.hpp	/^   security_error,   \/\/ includes access rights, permissions failures$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::segment_manager	/usr/include/boost/interprocess/segment_manager.hpp	/^class segment_manager$/;"	c	namespace:boost::interprocess	inherits:segment_manager_base
boost::interprocess::segment_manager::allocator	/usr/include/boost/interprocess/segment_manager.hpp	/^   struct allocator$/;"	s	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::allocator::type	/usr/include/boost/interprocess/segment_manager.hpp	/^      typedef boost::interprocess::allocator<T, segment_manager> type;$/;"	t	struct:boost::interprocess::segment_manager::allocator	access:public
boost::interprocess::segment_manager::atomic_func	/usr/include/boost/interprocess/segment_manager.hpp	/^   void atomic_func(Func &f)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(Func &f)
boost::interprocess::segment_manager::Base	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef segment_manager_base<MemoryAlgorithm> Base;$/;"	t	class:boost::interprocess::segment_manager	access:private
boost::interprocess::segment_manager::block_header_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef detail::block_header block_header_t;$/;"	t	class:boost::interprocess::segment_manager	access:private
boost::interprocess::segment_manager::char_ptr_holder_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef detail::char_ptr_holder<CharType>                char_ptr_holder_t;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::char_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef CharType                       char_type;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::construct	/usr/include/boost/interprocess/segment_manager.hpp	/^      construct(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::segment_manager::construct	/usr/include/boost/interprocess/segment_manager.hpp	/^      construct(char_ptr_holder_t name, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name, std::nothrow_t)
boost::interprocess::segment_manager::construct_it	/usr/include/boost/interprocess/segment_manager.hpp	/^      construct_it(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::segment_manager::construct_it	/usr/include/boost/interprocess/segment_manager.hpp	/^      construct_it(char_ptr_holder_t name, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name, std::nothrow_t)
boost::interprocess::segment_manager::construct_iter_proxy	/usr/include/boost/interprocess/segment_manager.hpp	/^   struct construct_iter_proxy$/;"	s	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::construct_iter_proxy::type	/usr/include/boost/interprocess/segment_manager.hpp	/^      typedef detail::named_proxy<segment_manager, T, true>   type;$/;"	t	struct:boost::interprocess::segment_manager::construct_iter_proxy	access:public
boost::interprocess::segment_manager::construct_proxy	/usr/include/boost/interprocess/segment_manager.hpp	/^   struct construct_proxy$/;"	s	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::construct_proxy::type	/usr/include/boost/interprocess/segment_manager.hpp	/^      typedef detail::named_proxy<segment_manager, T, false>   type;$/;"	t	struct:boost::interprocess::segment_manager::construct_proxy	access:public
boost::interprocess::segment_manager::const_named_iterator	/usr/include/boost/interprocess/segment_manager.hpp	/^      <typename named_index_t::const_iterator, named_transform> const_named_iterator;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::const_unique_iterator	/usr/include/boost/interprocess/segment_manager.hpp	/^      <typename unique_index_t::const_iterator, unique_transform> const_unique_iterator;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::deleter	/usr/include/boost/interprocess/segment_manager.hpp	/^   struct deleter$/;"	s	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::deleter::type	/usr/include/boost/interprocess/segment_manager.hpp	/^      typedef boost::interprocess::deleter<T, segment_manager> type;$/;"	t	struct:boost::interprocess::segment_manager::deleter	access:public
boost::interprocess::segment_manager::destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool destroy(const CharType *name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const CharType *name)
boost::interprocess::segment_manager::destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool destroy(const detail::unique_instance_t *)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const detail::unique_instance_t *)
boost::interprocess::segment_manager::destroy_ptr	/usr/include/boost/interprocess/segment_manager.hpp	/^   void destroy_ptr(const T *p)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const T *p)
boost::interprocess::segment_manager::find	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, std::size_t> find  (const CharType* name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const CharType* name)
boost::interprocess::segment_manager::find	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, std::size_t> find (const detail::unique_instance_t* name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const detail::unique_instance_t* name)
boost::interprocess::segment_manager::find_no_lock	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, std::size_t> find_no_lock  (const CharType* name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const CharType* name)
boost::interprocess::segment_manager::find_no_lock	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, std::size_t> find_no_lock (const detail::unique_instance_t* name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const detail::unique_instance_t* name)
boost::interprocess::segment_manager::find_or_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^      find_or_construct(char_ptr_holder_t name, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name, std::nothrow_t)
boost::interprocess::segment_manager::find_or_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   typename construct_proxy<T>::type find_or_construct(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::segment_manager::find_or_construct_it	/usr/include/boost/interprocess/segment_manager.hpp	/^      find_or_construct_it(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name)
boost::interprocess::segment_manager::find_or_construct_it	/usr/include/boost/interprocess/segment_manager.hpp	/^      find_or_construct_it(char_ptr_holder_t name, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name, std::nothrow_t)
boost::interprocess::segment_manager::generic_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   T *generic_construct(const CharType *name, $/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const CharType *name, std::size_t num, bool try2find, bool dothrow, detail::in_place_interface &table)
boost::interprocess::segment_manager::get_allocator	/usr/include/boost/interprocess/segment_manager.hpp	/^      get_allocator()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
boost::interprocess::segment_manager::get_deleter	/usr/include/boost/interprocess/segment_manager.hpp	/^      get_deleter()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
boost::interprocess::segment_manager::get_instance_length	/usr/include/boost/interprocess/segment_manager.hpp	/^   static std::size_t get_instance_length(const T *ptr)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const T *ptr)
boost::interprocess::segment_manager::get_instance_name	/usr/include/boost/interprocess/segment_manager.hpp	/^   static const CharType *get_instance_name(const T *ptr)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const T *ptr)
boost::interprocess::segment_manager::get_instance_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   static instance_type get_instance_type(const T *ptr)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const T *ptr)
boost::interprocess::segment_manager::get_min_size	/usr/include/boost/interprocess/segment_manager.hpp	/^   static std::size_t get_min_size()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
boost::interprocess::segment_manager::get_num_named_objects	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::size_t get_num_named_objects()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
boost::interprocess::segment_manager::get_num_unique_objects	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::size_t get_num_unique_objects()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
boost::interprocess::segment_manager::get_this_pointer	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager *get_this_pointer()$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:()
boost::interprocess::segment_manager::header_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   struct header_t$/;"	s	class:boost::interprocess::segment_manager	inherits:rmutex	access:private
boost::interprocess::segment_manager::header_t::header_t	/usr/include/boost/interprocess/segment_manager.hpp	/^      header_t(Base *restricted_segment_mngr)$/;"	f	struct:boost::interprocess::segment_manager::header_t	access:public	signature:(Base *restricted_segment_mngr)
boost::interprocess::segment_manager::header_t::m_named_index	/usr/include/boost/interprocess/segment_manager.hpp	/^      named_index_t           m_named_index;$/;"	m	struct:boost::interprocess::segment_manager::header_t	access:public
boost::interprocess::segment_manager::header_t::m_unique_index	/usr/include/boost/interprocess/segment_manager.hpp	/^      unique_index_t          m_unique_index;$/;"	m	struct:boost::interprocess::segment_manager::header_t	access:public
boost::interprocess::segment_manager::index_config_named	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef detail::index_config<CharType, MemoryAlgorithm>  index_config_named;$/;"	t	class:boost::interprocess::segment_manager	access:private
boost::interprocess::segment_manager::index_config_unique	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef detail::index_config<char, MemoryAlgorithm>      index_config_unique;$/;"	t	class:boost::interprocess::segment_manager	access:private
boost::interprocess::segment_manager::index_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef IndexType<index_config_named>                    index_type;$/;"	t	class:boost::interprocess::segment_manager	access:private
boost::interprocess::segment_manager::is_intrusive_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef detail::bool_<is_intrusive_index<index_type>::value >    is_intrusive_t;$/;"	t	class:boost::interprocess::segment_manager	access:private
boost::interprocess::segment_manager::is_node_index_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef detail::bool_<is_node_index<index_type>::value>          is_node_index_t;$/;"	t	class:boost::interprocess::segment_manager	access:private
boost::interprocess::segment_manager::memory_algorithm	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef MemoryAlgorithm                memory_algorithm;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::mutex_family	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename Base::mutex_family       mutex_family;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::m_header	/usr/include/boost/interprocess/segment_manager.hpp	/^   }  m_header;$/;"	m	class:boost::interprocess::segment_manager	typeref:struct:boost::interprocess::segment_manager::header_t	access:private
boost::interprocess::segment_manager::named_begin	/usr/include/boost/interprocess/segment_manager.hpp	/^   const_named_iterator named_begin() const$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:() const
boost::interprocess::segment_manager::named_end	/usr/include/boost/interprocess/segment_manager.hpp	/^   const_named_iterator named_end() const$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:() const
boost::interprocess::segment_manager::named_index_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef IndexType<index_config_named>                    named_index_t;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::named_transform	/usr/include/boost/interprocess/segment_manager.hpp	/^      ,is_intrusive_index<index_type>::value>   named_transform;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::operator =	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager &operator=(const segment_manager &);$/;"	p	class:boost::interprocess::segment_manager	access:private	signature:(const segment_manager &)
boost::interprocess::segment_manager::PayloadPerAllocation	/usr/include/boost/interprocess/segment_manager.hpp	/^   static const std::size_t PayloadPerAllocation = Base::PayloadPerAllocation;$/;"	m	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::priv_destroy_ptr	/usr/include/boost/interprocess/segment_manager.hpp	/^   void priv_destroy_ptr(const void *ptr, detail::in_place_interface &dtor)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const void *ptr, detail::in_place_interface &dtor)
boost::interprocess::segment_manager::priv_find_impl	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, std::size_t> priv_find_impl (const CharType* name, bool lock)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharType* name, bool lock)
boost::interprocess::segment_manager::priv_find__impl	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, std::size_t> priv_find__impl (const detail::unique_instance_t* name, bool lock)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const detail::unique_instance_t* name, bool lock)
boost::interprocess::segment_manager::priv_generic_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   void *priv_generic_construct(const CharType *name, $/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharType *name, std::size_t num, bool try2find, bool dothrow, detail::in_place_interface &table)
boost::interprocess::segment_manager::priv_generic_find	/usr/include/boost/interprocess/segment_manager.hpp	/^   void *priv_generic_find$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharT* name, IndexType<detail::index_config<CharT, MemoryAlgorithm> > &index, detail::in_place_interface &table, std::size_t &length, detail::false_ is_intrusive, bool use_lock)
boost::interprocess::segment_manager::priv_generic_find	/usr/include/boost/interprocess/segment_manager.hpp	/^   void *priv_generic_find$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharT* name, IndexType<detail::index_config<CharT, MemoryAlgorithm> > &index, detail::in_place_interface &table, std::size_t &length, detail::true_ is_intrusive, bool use_lock)
boost::interprocess::segment_manager::priv_generic_named_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * priv_generic_named_construct(std::size_t type,  $/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(std::size_t type, const CharT *name, std::size_t num, bool try2find, bool dothrow, detail::in_place_interface &table, IndexType<detail::index_config<CharT, MemoryAlgorithm> > &index, detail::false_ is_intrusive)
boost::interprocess::segment_manager::priv_generic_named_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * priv_generic_named_construct(std::size_t type,$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(std::size_t type, const CharT *name, std::size_t num, bool try2find, bool dothrow, detail::in_place_interface &table, IndexType<detail::index_config<CharT, MemoryAlgorithm> > &index, detail::true_ is_intrusive)
boost::interprocess::segment_manager::priv_generic_named_destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool priv_generic_named_destroy$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(block_header_t *block_header, IndexType<detail::index_config<CharT, MemoryAlgorithm> > &index, detail::in_place_interface &table, detail::false_ is_node_index)
boost::interprocess::segment_manager::priv_generic_named_destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool priv_generic_named_destroy$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(block_header_t *block_header, IndexType<detail::index_config<CharT, MemoryAlgorithm> > &index, detail::in_place_interface &table, detail::true_ is_node_index)
boost::interprocess::segment_manager::priv_generic_named_destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool priv_generic_named_destroy(const CharT *name, $/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharT *name, IndexType<detail::index_config<CharT, MemoryAlgorithm> > &index, detail::in_place_interface &table, detail::false_ is_intrusive_index)
boost::interprocess::segment_manager::priv_generic_named_destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool priv_generic_named_destroy(const CharT *name, $/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharT *name, IndexType<detail::index_config<CharT, MemoryAlgorithm> > &index, detail::in_place_interface &table, detail::true_ is_intrusive_index)
boost::interprocess::segment_manager::priv_generic_named_destroy_impl	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool priv_generic_named_destroy_impl$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const typename IndexType<detail::index_config<CharT, MemoryAlgorithm> >::iterator &it, IndexType<detail::index_config<CharT, MemoryAlgorithm> > &index, detail::in_place_interface &table)
boost::interprocess::segment_manager::priv_get_instance_length	/usr/include/boost/interprocess/segment_manager.hpp	/^   static std::size_t priv_get_instance_length(block_header_t *ctrl_data, std::size_t sizeofvalue)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(block_header_t *ctrl_data, std::size_t sizeofvalue)
boost::interprocess::segment_manager::priv_get_instance_name	/usr/include/boost/interprocess/segment_manager.hpp	/^   static const CharType *priv_get_instance_name(block_header_t *ctrl_data)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(block_header_t *ctrl_data)
boost::interprocess::segment_manager::priv_get_instance_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   static instance_type priv_get_instance_type(block_header_t *ctrl_data)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(block_header_t *ctrl_data)
boost::interprocess::segment_manager::priv_get_lock	/usr/include/boost/interprocess/segment_manager.hpp	/^   scoped_lock<rmutex> priv_get_lock(bool use_lock)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(bool use_lock)
boost::interprocess::segment_manager::priv_get_reserved_bytes	/usr/include/boost/interprocess/segment_manager.hpp	/^   static std::size_t priv_get_reserved_bytes()$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:()
boost::interprocess::segment_manager::reserve_named_objects	/usr/include/boost/interprocess/segment_manager.hpp	/^   void reserve_named_objects(std::size_t num)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(std::size_t num)
boost::interprocess::segment_manager::reserve_unique_objects	/usr/include/boost/interprocess/segment_manager.hpp	/^   void reserve_unique_objects(std::size_t num)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(std::size_t num)
boost::interprocess::segment_manager::rmutex	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename MemoryAlgorithm::mutex_family::recursive_mutex_type   rmutex;$/;"	t	class:boost::interprocess::segment_manager	access:private
boost::interprocess::segment_manager::segment_manager	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager();$/;"	p	class:boost::interprocess::segment_manager	access:private	signature:()
boost::interprocess::segment_manager::segment_manager	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager(const segment_manager &);$/;"	p	class:boost::interprocess::segment_manager	access:private	signature:(const segment_manager &)
boost::interprocess::segment_manager::segment_manager	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager(std::size_t size)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(std::size_t size)
boost::interprocess::segment_manager::segment_manager_base_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef segment_manager_base<MemoryAlgorithm>   segment_manager_base_type;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::shrink_to_fit_indexes	/usr/include/boost/interprocess/segment_manager.hpp	/^   void shrink_to_fit_indexes()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
boost::interprocess::segment_manager::unique_begin	/usr/include/boost/interprocess/segment_manager.hpp	/^   const_unique_iterator unique_begin() const$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:() const
boost::interprocess::segment_manager::unique_end	/usr/include/boost/interprocess/segment_manager.hpp	/^   const_unique_iterator unique_end() const$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:() const
boost::interprocess::segment_manager::unique_index_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef IndexType<index_config_unique>                   unique_index_t;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::unique_transform	/usr/include/boost/interprocess/segment_manager.hpp	/^      ,is_intrusive_index<index_type>::value>   unique_transform;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager::void_pointer	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename Base::void_pointer    void_pointer;$/;"	t	class:boost::interprocess::segment_manager	access:public
boost::interprocess::segment_manager_base	/usr/include/boost/interprocess/segment_manager.hpp	/^class segment_manager_base$/;"	c	namespace:boost::interprocess	inherits:MemoryAlgorithm
boost::interprocess::segment_manager_base::allocate	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * allocate (std::size_t nbytes, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::size_t nbytes, std::nothrow_t)
boost::interprocess::segment_manager_base::allocate	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * allocate(std::size_t nbytes)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::size_t nbytes)
boost::interprocess::segment_manager_base::allocate_aligned	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * allocate_aligned (std::size_t nbytes, std::size_t alignment, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::size_t nbytes, std::size_t alignment, std::nothrow_t)
boost::interprocess::segment_manager_base::allocate_aligned	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * allocate_aligned(std::size_t nbytes, std::size_t alignment)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::size_t nbytes, std::size_t alignment)
boost::interprocess::segment_manager_base::allocate_many	/usr/include/boost/interprocess/segment_manager.hpp	/^   multiallocation_chain allocate_many$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(const std::size_t *element_lenghts, std::size_t n_elements, std::size_t sizeof_element = 1)
boost::interprocess::segment_manager_base::allocate_many	/usr/include/boost/interprocess/segment_manager.hpp	/^   multiallocation_chain allocate_many$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(const std::size_t *elem_sizes, std::size_t n_elements, std::size_t sizeof_element, std::nothrow_t)
boost::interprocess::segment_manager_base::allocate_many	/usr/include/boost/interprocess/segment_manager.hpp	/^   multiallocation_chain allocate_many$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::size_t elem_bytes, std::size_t num_elements, std::nothrow_t)
boost::interprocess::segment_manager_base::allocate_many	/usr/include/boost/interprocess/segment_manager.hpp	/^   multiallocation_chain allocate_many(std::size_t elem_bytes, std::size_t num_elements)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::size_t elem_bytes, std::size_t num_elements)
boost::interprocess::segment_manager_base::allocation_command	/usr/include/boost/interprocess/segment_manager.hpp	/^      allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size,std::size_t &received_size, T *reuse_ptr = 0)
boost::interprocess::segment_manager_base::all_memory_deallocated	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool all_memory_deallocated()$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:()
boost::interprocess::segment_manager_base::check_sanity	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool check_sanity()$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:()
boost::interprocess::segment_manager_base::deallocate	/usr/include/boost/interprocess/segment_manager.hpp	/^   void   deallocate          (void *addr)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(void *addr)
boost::interprocess::segment_manager_base::deallocate_many	/usr/include/boost/interprocess/segment_manager.hpp	/^   void deallocate_many(multiallocation_chain chain)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(multiallocation_chain chain)
boost::interprocess::segment_manager_base::get_free_memory	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::size_t get_free_memory() const$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:() const
boost::interprocess::segment_manager_base::get_min_size	/usr/include/boost/interprocess/segment_manager.hpp	/^   static std::size_t get_min_size (std::size_t size)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::size_t size)
boost::interprocess::segment_manager_base::get_size	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::size_t get_size() const$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:() const
boost::interprocess::segment_manager_base::grow	/usr/include/boost/interprocess/segment_manager.hpp	/^   void grow(std::size_t extra_size)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::size_t extra_size)
boost::interprocess::segment_manager_base::memory_algorithm	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef MemoryAlgorithm memory_algorithm;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
boost::interprocess::segment_manager_base::multiallocation_chain	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename MemoryAlgorithm::multiallocation_chain    multiallocation_chain;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
boost::interprocess::segment_manager_base::mutex_family	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename MemoryAlgorithm::mutex_family  mutex_family;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
boost::interprocess::segment_manager_base::PayloadPerAllocation	/usr/include/boost/interprocess/segment_manager.hpp	/^   static const std::size_t PayloadPerAllocation = MemoryAlgorithm::PayloadPerAllocation;$/;"	m	class:boost::interprocess::segment_manager_base	access:public
boost::interprocess::segment_manager_base::prot_anonymous_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * prot_anonymous_construct$/;"	f	class:boost::interprocess::segment_manager_base	access:protected	signature:(std::size_t num, bool dothrow, detail::in_place_interface &table)
boost::interprocess::segment_manager_base::prot_anonymous_destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   void prot_anonymous_destroy(const void *object, detail::in_place_interface &table)$/;"	f	class:boost::interprocess::segment_manager_base	access:protected	signature:(const void *object, detail::in_place_interface &table)
boost::interprocess::segment_manager_base::raw_allocation_command	/usr/include/boost/interprocess/segment_manager.hpp	/^      raw_allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_objects,$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(boost::interprocess::allocation_type command, std::size_t limit_objects, std::size_t preferred_objects,std::size_t &received_objects, void *reuse_ptr = 0, std::size_t sizeof_object = 1)
boost::interprocess::segment_manager_base::segment_manager_base	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager_base(std::size_t size, std::size_t reserved_bytes)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::size_t size, std::size_t reserved_bytes)
boost::interprocess::segment_manager_base::segment_manager_base_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef segment_manager_base<MemoryAlgorithm> segment_manager_base_type;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
boost::interprocess::segment_manager_base::shrink_to_fit	/usr/include/boost/interprocess/segment_manager.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:()
boost::interprocess::segment_manager_base::size	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::size_t size(const void *ptr) const$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(const void *ptr) const
boost::interprocess::segment_manager_base::void_pointer	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename MemoryAlgorithm::void_pointer  void_pointer;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
boost::interprocess::segment_manager_base::zero_free_memory	/usr/include/boost/interprocess/segment_manager.hpp	/^   void zero_free_memory()$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:()
boost::interprocess::sem_error	/usr/include/boost/interprocess/errors.hpp	/^   sem_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^class sharable_lock$/;"	c	namespace:boost::interprocess
boost::interprocess::sharable_lock::detail::enable_if::type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^               , typename detail::enable_if< detail::is_same<T, SharableMutex> >::type * = 0)$/;"	m	class:boost::interprocess::sharable_lock::detail::enable_if	access:public
boost::interprocess::sharable_lock::detail::enable_if::type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^      , typename detail::enable_if< detail::is_same<T, SharableMutex> >::type * = 0)$/;"	m	class:boost::interprocess::sharable_lock::detail::enable_if	access:public
boost::interprocess::sharable_lock::lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   void lock()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
boost::interprocess::sharable_lock::mp_mutex	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   mutex_type *mp_mutex;$/;"	m	class:boost::interprocess::sharable_lock	access:private
boost::interprocess::sharable_lock::mutex	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   mutex_type* mutex() const$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:() const
boost::interprocess::sharable_lock::mutex_type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   typedef SharableMutex mutex_type;$/;"	t	class:boost::interprocess::sharable_lock	access:public
boost::interprocess::sharable_lock::m_locked	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^      : mp_mutex(0), m_locked(false)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(false)
boost::interprocess::sharable_lock::m_locked	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^      : mp_mutex(0), m_locked(upgr.owns())$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(upgr.owns())
boost::interprocess::sharable_lock::m_locked	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   bool        m_locked;$/;"	m	class:boost::interprocess::sharable_lock	access:private
boost::interprocess::sharable_lock::operator unspecified_bool_type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:() const
boost::interprocess::sharable_lock::owns	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   bool owns() const$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:() const
boost::interprocess::sharable_lock::release	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   mutex_type* release()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
boost::interprocess::sharable_lock::scop	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(BOOST_INTERPROCESS_RV_REF(scoped_lock<T>) scop$/;"	m	class:boost::interprocess::sharable_lock	access:public
boost::interprocess::sharable_lock::sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   explicit sharable_lock(mutex_type& m)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(mutex_type& m)
boost::interprocess::sharable_lock::sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   explicit sharable_lock(scoped_lock<mutex_type>&);$/;"	p	class:boost::interprocess::sharable_lock	access:private	signature:(scoped_lock<mutex_type>&)
boost::interprocess::sharable_lock::sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
boost::interprocess::sharable_lock::sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(mutex_type& m, accept_ownership_type)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(mutex_type& m, accept_ownership_type)
boost::interprocess::sharable_lock::sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(mutex_type& m, const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(mutex_type& m, const boost::posix_time::ptime& abs_time)
boost::interprocess::sharable_lock::sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(mutex_type& m, defer_lock_type)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(mutex_type& m, defer_lock_type)
boost::interprocess::sharable_lock::sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(mutex_type& m, try_to_lock_type)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(mutex_type& m, try_to_lock_type)
boost::interprocess::sharable_lock::swap	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   void swap(sharable_lock<mutex_type> &other)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(sharable_lock<mutex_type> &other)
boost::interprocess::sharable_lock::this_type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   typedef sharable_lock<SharableMutex> this_type;$/;"	t	class:boost::interprocess::sharable_lock	access:private
boost::interprocess::sharable_lock::this_type::unspecified_bool_type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   typedef bool this_type::*unspecified_bool_type;$/;"	t	class:boost::interprocess::sharable_lock::this_type	access:private
boost::interprocess::sharable_lock::timed_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   bool timed_lock(const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(const boost::posix_time::ptime& abs_time)
boost::interprocess::sharable_lock::try_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   bool try_lock()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
boost::interprocess::sharable_lock::unlock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   void unlock()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
boost::interprocess::sharable_lock::upgr	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(BOOST_INTERPROCESS_RV_REF(upgradable_lock<T>) upgr$/;"	m	class:boost::interprocess::sharable_lock	access:public
boost::interprocess::sharable_lock::~sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   ~sharable_lock()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
boost::interprocess::shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^class shared_memory_object$/;"	c	namespace:boost::interprocess
boost::interprocess::shared_memory_object::file_handle_t	/usr/include/boost/interprocess/shared_memory_object.hpp	/^      :  m_handle(file_handle_t(detail::invalid_file()))$/;"	f	class:boost::interprocess::shared_memory_object	access:public	signature:(detail::invalid_file(
boost::interprocess::shared_memory_object::get_mapping_handle	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:() const
boost::interprocess::shared_memory_object::get_mapping_handle	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline mapping_handle_t shared_memory_object::get_mapping_handle() const$/;"	f	class:boost::interprocess::shared_memory_object	signature:() const
boost::interprocess::shared_memory_object::get_mode	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:() const
boost::interprocess::shared_memory_object::get_mode	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline mode_t shared_memory_object::get_mode() const$/;"	f	class:boost::interprocess::shared_memory_object	signature:() const
boost::interprocess::shared_memory_object::get_name	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   const char *get_name() const;$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:() const
boost::interprocess::shared_memory_object::get_name	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline const char *shared_memory_object::get_name() const$/;"	f	class:boost::interprocess::shared_memory_object	signature:() const
boost::interprocess::shared_memory_object::get_size	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   bool get_size(offset_t &size) const;$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:(offset_t &size) const
boost::interprocess::shared_memory_object::get_size	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline bool shared_memory_object::get_size(offset_t &size) const$/;"	f	class:boost::interprocess::shared_memory_object	signature:(offset_t &size) const
boost::interprocess::shared_memory_object::m_filename	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   std::string    m_filename;$/;"	m	class:boost::interprocess::shared_memory_object	access:private
boost::interprocess::shared_memory_object::m_handle	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   file_handle_t  m_handle;$/;"	m	class:boost::interprocess::shared_memory_object	access:private
boost::interprocess::shared_memory_object::m_mode	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   mode_t         m_mode;$/;"	m	class:boost::interprocess::shared_memory_object	access:private
boost::interprocess::shared_memory_object::priv_close	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::shared_memory_object	access:private	signature:()
boost::interprocess::shared_memory_object::priv_close	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline void shared_memory_object::priv_close()$/;"	f	class:boost::interprocess::shared_memory_object	signature:()
boost::interprocess::shared_memory_object::priv_open_or_create	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   bool priv_open_or_create(detail::create_enum_t type, const char *filename, mode_t mode);$/;"	p	class:boost::interprocess::shared_memory_object	access:private	signature:(detail::create_enum_t type, const char *filename, mode_t mode)
boost::interprocess::shared_memory_object::priv_open_or_create	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline bool shared_memory_object::priv_open_or_create$/;"	f	class:boost::interprocess::shared_memory_object	signature:(detail::create_enum_t type, const char *filename, mode_t mode)
boost::interprocess::shared_memory_object::remove	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:(const char *name)
boost::interprocess::shared_memory_object::remove	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline bool shared_memory_object::remove(const char *filename)$/;"	f	class:boost::interprocess::shared_memory_object	signature:(const char *filename)
boost::interprocess::shared_memory_object::shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   shared_memory_object();$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:()
boost::interprocess::shared_memory_object::shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   shared_memory_object(create_only_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::shared_memory_object	access:public	signature:(create_only_t, const char *name, mode_t mode)
boost::interprocess::shared_memory_object::shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   shared_memory_object(open_only_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::shared_memory_object	access:public	signature:(open_only_t, const char *name, mode_t mode)
boost::interprocess::shared_memory_object::shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   shared_memory_object(open_or_create_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::shared_memory_object	access:public	signature:(open_or_create_t, const char *name, mode_t mode)
boost::interprocess::shared_memory_object::shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline shared_memory_object::shared_memory_object() $/;"	f	class:boost::interprocess::shared_memory_object	signature:()
boost::interprocess::shared_memory_object::swap	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   void swap(shared_memory_object &moved);$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:(shared_memory_object &moved)
boost::interprocess::shared_memory_object::swap	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline void shared_memory_object::swap(shared_memory_object &other)$/;"	f	class:boost::interprocess::shared_memory_object	signature:(shared_memory_object &other)
boost::interprocess::shared_memory_object::truncate	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   void truncate(offset_t length);$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:(offset_t length)
boost::interprocess::shared_memory_object::truncate	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline void shared_memory_object::truncate(offset_t length)$/;"	f	class:boost::interprocess::shared_memory_object	signature:(offset_t length)
boost::interprocess::shared_memory_object::~shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   ~shared_memory_object();$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:()
boost::interprocess::shared_memory_object::~shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline shared_memory_object::~shared_memory_object() $/;"	f	class:boost::interprocess::shared_memory_object	signature:()
boost::interprocess::shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^class shared_ptr$/;"	c	namespace:boost::interprocess
boost::interprocess::shared_ptr::const_allocator_pointer	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^            <typename VoidAllocator::pointer, const VoidAllocator>::type   const_allocator_pointer;$/;"	t	class:boost::interprocess::shared_ptr	access:public
boost::interprocess::shared_ptr::const_deleter_pointer	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^            <typename VoidAllocator::pointer, const Deleter>::type         const_deleter_pointer;$/;"	t	class:boost::interprocess::shared_ptr	access:public
boost::interprocess::shared_ptr::const_reference	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^                     <const value_type>::type                  const_reference;$/;"	t	class:boost::interprocess::shared_ptr	access:public
boost::interprocess::shared_ptr::element_type	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef T                                                   element_type;$/;"	t	class:boost::interprocess::shared_ptr	access:public
boost::interprocess::shared_ptr::get	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   pointer get() const  \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
boost::interprocess::shared_ptr::get_deleter	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   const_deleter_pointer get_deleter() const$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
boost::interprocess::shared_ptr::m_pn	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^      :  m_pn()$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:()
boost::interprocess::shared_ptr::m_pn	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   detail::shared_count<T, VoidAllocator, Deleter>   m_pn;    \/\/ reference counter$/;"	m	class:boost::interprocess::shared_ptr	access:private
boost::interprocess::shared_ptr::operator !	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   bool operator! () const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
boost::interprocess::shared_ptr::operator *	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   reference operator* () const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
boost::interprocess::shared_ptr::operator ->	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   pointer operator-> () const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
boost::interprocess::shared_ptr::operator =	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr & operator=(shared_ptr<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r)
boost::interprocess::shared_ptr::operator unspecified_bool_type	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   operator unspecified_bool_type() const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
boost::interprocess::shared_ptr::pointer	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^      <typename VoidAllocator::pointer, T>::type               pointer;$/;"	t	class:boost::interprocess::shared_ptr	access:public
boost::interprocess::shared_ptr::reference	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^                     <value_type>::type                        reference;$/;"	t	class:boost::interprocess::shared_ptr	access:public
boost::interprocess::shared_ptr::reset	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   void reset()$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:()
boost::interprocess::shared_ptr::reset	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   void reset(const Pointer &p, const VoidAllocator &a = VoidAllocator(), const Deleter &d = Deleter())$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(const Pointer &p, const VoidAllocator &a = VoidAllocator(), const Deleter &d = Deleter())
boost::interprocess::shared_ptr::reset	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   void reset(shared_ptr<Y, VoidAllocator, Deleter> const & r, const pointer &p)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r, const pointer &p)
boost::interprocess::shared_ptr::shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   explicit shared_ptr(const pointer&p, const VoidAllocator &a = VoidAllocator(), const Deleter &d = Deleter())$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(const pointer&p, const VoidAllocator &a = VoidAllocator(), const Deleter &d = Deleter())
boost::interprocess::shared_ptr::shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   explicit shared_ptr(weak_ptr<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(weak_ptr<Y, VoidAllocator, Deleter> const & r)
boost::interprocess::shared_ptr::shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr()$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:()
boost::interprocess::shared_ptr::shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(const shared_ptr &other, const pointer &p)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(const shared_ptr &other, const pointer &p)
boost::interprocess::shared_ptr::shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(shared_ptr<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r)
boost::interprocess::shared_ptr::shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(shared_ptr<Y, VoidAllocator, Deleter> const & r, detail::const_cast_tag)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r, detail::const_cast_tag)
boost::interprocess::shared_ptr::shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(shared_ptr<Y, VoidAllocator, Deleter> const & r, detail::dynamic_cast_tag)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r, detail::dynamic_cast_tag)
boost::interprocess::shared_ptr::shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(shared_ptr<Y, VoidAllocator, Deleter> const & r, detail::static_cast_tag)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r, detail::static_cast_tag)
boost::interprocess::shared_ptr::swap	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   void swap(shared_ptr<T, VoidAllocator, Deleter> & other) \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<T, VoidAllocator, Deleter> & other)
boost::interprocess::shared_ptr::this_type	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef shared_ptr<T, VoidAllocator, Deleter> this_type;$/;"	t	class:boost::interprocess::shared_ptr	access:private
boost::interprocess::shared_ptr::unique	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   bool unique() const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
boost::interprocess::shared_ptr::unspecified_bool_type_func	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   void unspecified_bool_type_func() const {}$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
boost::interprocess::shared_ptr::use_count	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   long use_count() const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
boost::interprocess::shared_ptr::value_type	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef T                                                   value_type;$/;"	t	class:boost::interprocess::shared_ptr	access:public
boost::interprocess::shared_ptr::_internal_less	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   bool _internal_less(shared_ptr<T2, A2, Deleter2> const & rhs) const$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<T2, A2, Deleter2> const & rhs) const
boost::interprocess::shrink_in_place	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type shrink_in_place    = boost::container::shrink_in_place;$/;"	m	namespace:boost::interprocess
boost::interprocess::simple_seq_fit	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	/^class simple_seq_fit $/;"	c	namespace:boost::interprocess	inherits:detail::simple_seq_fit_impl
boost::interprocess::simple_seq_fit::base_t	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	/^   typedef detail::simple_seq_fit_impl<MutexFamily, VoidPointer> base_t;$/;"	t	class:boost::interprocess::simple_seq_fit	access:private
boost::interprocess::simple_seq_fit::simple_seq_fit	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	/^   simple_seq_fit           (std::size_t size, std::size_t extra_hdr_bytes)$/;"	f	class:boost::interprocess::simple_seq_fit	access:public	signature:(std::size_t size, std::size_t extra_hdr_bytes)
boost::interprocess::sizeof_value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct sizeof_value$/;"	s	namespace:boost::interprocess
boost::interprocess::sizeof_value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct sizeof_value<const void>$/;"	s	namespace:boost::interprocess
boost::interprocess::sizeof_value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct sizeof_value<const volatile void>$/;"	s	namespace:boost::interprocess
boost::interprocess::sizeof_value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct sizeof_value<void>$/;"	s	namespace:boost::interprocess
boost::interprocess::sizeof_value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct sizeof_value<volatile void>$/;"	s	namespace:boost::interprocess
boost::interprocess::sizeof_value::value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   static const std::size_t value = sizeof(T);$/;"	m	struct:boost::interprocess::sizeof_value	access:public
boost::interprocess::sizeof_value::value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   static const std::size_t value = sizeof(void*);$/;"	m	struct:boost::interprocess::sizeof_value	access:public
boost::interprocess::size_error	/usr/include/boost/interprocess/errors.hpp	/^   size_error,$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::static_pointer_cast	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^boost::interprocess::intersegment_ptr<T> static_pointer_cast(const boost::interprocess::intersegment_ptr<U> &r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::intersegment_ptr<U> &r)
boost::interprocess::static_pointer_cast	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static_pointer_cast(boost::interprocess::offset_ptr<U> const & r)$/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::offset_ptr<U> const & r)
boost::interprocess::static_pointer_cast	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^shared_ptr<T, VoidAllocator, Deleter> static_pointer_cast(shared_ptr<U, VoidAllocator, Deleter> const & r)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<U, VoidAllocator, Deleter> const & r)
boost::interprocess::swap	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^void swap (boost::interprocess::intersegment_ptr<T> &pt, $/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::intersegment_ptr<T> &pt, boost::interprocess::intersegment_ptr<T> &pt2)
boost::interprocess::swap	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void swap(mapped_region &x, mapped_region &y)$/;"	f	namespace:boost::interprocess	signature:(mapped_region &x, mapped_region &y)
boost::interprocess::swap	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline void swap (boost::interprocess::offset_ptr<T> &pt, $/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::offset_ptr<T> &pt, boost::interprocess::offset_ptr<T> &pt2)
boost::interprocess::swap	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^void swap(intrusive_ptr<T, VP> & lhs,$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> & lhs, intrusive_ptr<T, VP> & rhs)
boost::interprocess::swap	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^void swap(scoped_ptr<T, D> & a, scoped_ptr<T, D> & b)$/;"	f	namespace:boost::interprocess	signature:(scoped_ptr<T, D> & a, scoped_ptr<T, D> & b)
boost::interprocess::swap	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^void swap(shared_ptr<T, VoidAllocator, Deleter> & a, shared_ptr<T, VoidAllocator, Deleter> & b)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<T, VoidAllocator, Deleter> & a, shared_ptr<T, VoidAllocator, Deleter> & b)
boost::interprocess::swap	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^void swap(unique_ptr<T, D>& x, unique_ptr<T, D>& y)$/;"	f	namespace:boost::interprocess	signature:(unique_ptr<T, D>& x, unique_ptr<T, D>& y)
boost::interprocess::swap	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^void swap(weak_ptr<T, A, D> & a, weak_ptr<T, A, D> & b)$/;"	f	namespace:boost::interprocess	signature:(weak_ptr<T, A, D> & a, weak_ptr<T, A, D> & b)
boost::interprocess::system_error	/usr/include/boost/interprocess/errors.hpp	/^   system_error,     \/\/ system generated error; if possible, is translated$/;"	e	enum:boost::interprocess::error_code_t
boost::interprocess::system_error_code	/usr/include/boost/interprocess/errors.hpp	/^inline int system_error_code() \/\/ artifact of POSIX and WINDOWS error reporting$/;"	f	namespace:boost::interprocess	signature:()
boost::interprocess::transform_iterator	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^class transform_iterator$/;"	c	namespace:boost::interprocess	inherits:UnaryFunction,std::iterator
boost::interprocess::transform_iterator::advance	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   void advance(typename Iterator::difference_type n)$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:(typename Iterator::difference_type n)
boost::interprocess::transform_iterator::base	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   const Iterator & base() const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:() const
boost::interprocess::transform_iterator::base	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   Iterator & base()$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:()
boost::interprocess::transform_iterator::decrement	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   void decrement()$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:()
boost::interprocess::transform_iterator::dereference	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   typename UnaryFunction::result_type dereference() const$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:() const
boost::interprocess::transform_iterator::distance_to	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   typename Iterator::difference_type distance_to(const transform_iterator &other)const$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:(const transform_iterator &other) const
boost::interprocess::transform_iterator::equal	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   bool equal(const transform_iterator &other) const$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:(const transform_iterator &other) const
boost::interprocess::transform_iterator::increment	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   void increment()$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:()
boost::interprocess::transform_iterator::less	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   bool less(const transform_iterator &other) const$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:(const transform_iterator &other) const
boost::interprocess::transform_iterator::m_it	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   Iterator m_it;$/;"	m	class:boost::interprocess::transform_iterator	access:private
boost::interprocess::transform_iterator::operator !=	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend bool operator!= (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
boost::interprocess::transform_iterator::operator *	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   typename UnaryFunction::result_type operator*() const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:() const
boost::interprocess::transform_iterator::operator +	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend transform_iterator operator+(typename Iterator::difference_type off, const transform_iterator& right)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(typename Iterator::difference_type off, const transform_iterator& right)
boost::interprocess::transform_iterator::operator +	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator operator+(typename Iterator::difference_type off) const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(typename Iterator::difference_type off) const
boost::interprocess::transform_iterator::operator ++	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator operator++(int)$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(int)
boost::interprocess::transform_iterator::operator ++	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator& operator++() $/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:()
boost::interprocess::transform_iterator::operator +=	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator& operator+=(typename Iterator::difference_type off)$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(typename Iterator::difference_type off)
boost::interprocess::transform_iterator::operator -	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend typename Iterator::difference_type operator- (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
boost::interprocess::transform_iterator::operator -	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator operator-(typename Iterator::difference_type off) const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(typename Iterator::difference_type off) const
boost::interprocess::transform_iterator::operator -=	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator& operator-=(typename Iterator::difference_type off)$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(typename Iterator::difference_type off)
boost::interprocess::transform_iterator::operator ->	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^      operator->() const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:() const
boost::interprocess::transform_iterator::operator ==	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend bool operator== (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
boost::interprocess::transform_iterator::transform_iterator	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   explicit transform_iterator()$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:()
boost::interprocess::transform_iterator::transform_iterator	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   explicit transform_iterator(const Iterator &it, const UnaryFunction &f = UnaryFunction())$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(const Iterator &it, const UnaryFunction &f = UnaryFunction())
boost::interprocess::try_shrink_in_place	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type try_shrink_in_place= boost::container::try_shrink_in_place;$/;"	m	namespace:boost::interprocess
boost::interprocess::try_to_lock	/usr/include/boost/interprocess/sync/lock_options.hpp	/^static const try_to_lock_type     try_to_lock    = try_to_lock_type();$/;"	m	namespace:boost::interprocess
boost::interprocess::try_to_lock_type	/usr/include/boost/interprocess/sync/lock_options.hpp	/^struct try_to_lock_type {};$/;"	s	namespace:boost::interprocess
boost::interprocess::uninitialized_copy_or_move	/usr/include/boost/interprocess/detail/move.hpp	/^F uninitialized_copy_or_move(I f, I l, F r$/;"	f	namespace:boost::interprocess	signature:(I f, I l, F r ,typename disable_if< move_detail::is_move_iterator<I> >::type* = 0 )
boost::interprocess::uninitialized_copy_or_move	/usr/include/boost/interprocess/detail/move.hpp	/^F uninitialized_copy_or_move(I f, I l, F r,$/;"	f	namespace:boost::interprocess	signature:(I f, I l, F r, typename enable_if< move_detail::is_move_iterator<I> >::type* = 0)
boost::interprocess::uninitialized_move	/usr/include/boost/interprocess/detail/move.hpp	/^F uninitialized_move(I f, I l, F r$/;"	f	namespace:boost::interprocess	signature:(I f, I l, F r ,typename enable_if<is_movable<typename std::iterator_traits<I>::value_type> >::type* = 0 )
boost::interprocess::uninitialized_move	/usr/include/boost/interprocess/detail/move.hpp	/^F uninitialized_move(I f, I l, F r,$/;"	f	namespace:boost::interprocess	signature:(I f, I l, F r, typename disable_if<is_movable<typename std::iterator_traits<I>::value_type> >::type* = 0)
boost::interprocess::unique_instance	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^static const detail::unique_instance_t      * unique_instance = 0;$/;"	m	namespace:boost::interprocess
boost::interprocess::unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^class unique_ptr$/;"	c	namespace:boost::interprocess
boost::interprocess::unique_ptr::deleter_const_reference	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   typedef typename detail::add_reference<const D>::type deleter_const_reference;$/;"	t	class:boost::interprocess::unique_ptr	access:private
boost::interprocess::unique_ptr::deleter_reference	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   typedef typename detail::add_reference<D>::type deleter_reference;$/;"	t	class:boost::interprocess::unique_ptr	access:private
boost::interprocess::unique_ptr::deleter_type	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   typedef D deleter_type;$/;"	t	class:boost::interprocess::unique_ptr	access:public
boost::interprocess::unique_ptr::detail::enable_if_c::type	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^            >::type = nat())$/;"	m	class:boost::interprocess::unique_ptr::detail::enable_if_c	access:public
boost::interprocess::unique_ptr::element_type	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   typedef T element_type;$/;"	t	class:boost::interprocess::unique_ptr	access:public
boost::interprocess::unique_ptr::nat	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   struct nat {int for_bool_;};$/;"	s	class:boost::interprocess::unique_ptr	access:private
boost::interprocess::unique_ptr::nat::for_bool_	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   struct nat {int for_bool_;};$/;"	m	struct:boost::interprocess::unique_ptr::nat	access:public
boost::interprocess::unique_ptr::operator =	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   template <class U, class E> unique_ptr& operator=(unique_ptr<U, E>&);$/;"	p	class:boost::interprocess::unique_ptr	access:public	signature:(unique_ptr<U, E>&)
boost::interprocess::unique_ptr::operator =	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   template <class U> typename detail::unique_ptr_error<U>::type operator=(U&);$/;"	p	class:boost::interprocess::unique_ptr	access:public	signature:(U&)
boost::interprocess::unique_ptr::pointer	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   typedef typename detail::pointer_type<T, D>::type pointer;$/;"	t	class:boost::interprocess::unique_ptr	access:public
boost::interprocess::unique_ptr::ptr_	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^      : ptr_(u.release(), boost::interprocess::forward<D>(u.get_deleter()))$/;"	f	class:boost::interprocess::unique_ptr	access:public	signature:(u.release(), boost::interprocess::forward<D>(u.get_deleter()))
boost::interprocess::unique_ptr::u	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   unique_ptr(BOOST_INTERPROCESS_RV_REF_2_TEMPL_ARGS(unique_ptr, U, E) u,$/;"	m	class:boost::interprocess::unique_ptr	access:public
boost::interprocess::unique_ptr::unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   explicit unique_ptr(pointer p)$/;"	f	class:boost::interprocess::unique_ptr	access:public	signature:(pointer p)
boost::interprocess::unique_ptr::unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   template <class U, class E> unique_ptr(unique_ptr<U, E>&);$/;"	p	class:boost::interprocess::unique_ptr	access:public	signature:(unique_ptr<U, E>&)
boost::interprocess::unique_ptr::unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   template <class U> unique_ptr(U&, typename detail::unique_ptr_error<U>::type = 0);$/;"	p	class:boost::interprocess::unique_ptr	access:public	signature:(U&, typename detail::unique_ptr_error<U>::type = 0)
boost::interprocess::unique_ptr::unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   unique_ptr()$/;"	f	class:boost::interprocess::unique_ptr	access:public	signature:()
boost::interprocess::unique_ptr::unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   unique_ptr(pointer p$/;"	f	class:boost::interprocess::unique_ptr	access:public	signature:(pointer p ,typename detail::if_<detail::is_reference<D> ,D ,typename detail::add_reference<const D>::type>::type d)
boost::interprocess::unique_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^enum instance_type {   anonymous_type, named_type, unique_type, max_allocation_type };$/;"	e	enum:boost::interprocess::instance_type
boost::interprocess::unordered_map_index	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^class unordered_map_index$/;"	c	namespace:boost::interprocess	inherits:unordered_map_index_aux::index_t
boost::interprocess::unordered_map_index::base_type	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef typename index_aux::index_t          base_type;$/;"	t	class:boost::interprocess::unordered_map_index	access:private
boost::interprocess::unordered_map_index::index_aux	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef unordered_map_index_aux<MapConfig>   index_aux;$/;"	t	class:boost::interprocess::unordered_map_index	access:private
boost::interprocess::unordered_map_index::reserve	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   void reserve(std::size_t n)$/;"	f	class:boost::interprocess::unordered_map_index	access:public	signature:(std::size_t n)
boost::interprocess::unordered_map_index::segment_manager_base	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^      MapConfig::segment_manager_base     segment_manager_base;$/;"	t	class:boost::interprocess::unordered_map_index	access:private
boost::interprocess::unordered_map_index::shrink_to_fit	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::unordered_map_index	access:public	signature:()
boost::interprocess::unordered_map_index::unordered_map_index	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   unordered_map_index(segment_manager_base *segment_mngr)$/;"	f	class:boost::interprocess::unordered_map_index	access:public	signature:(segment_manager_base *segment_mngr)
boost::interprocess::unordered_map_index_aux	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^struct unordered_map_index_aux$/;"	s	namespace:boost::interprocess
boost::interprocess::unordered_map_index_aux::allocator_type	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^                  segment_manager_base>      allocator_type;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
boost::interprocess::unordered_map_index_aux::hasher	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^    struct hasher$/;"	s	struct:boost::interprocess::unordered_map_index_aux	inherits:std::unary_function	access:public
boost::interprocess::unordered_map_index_aux::hasher::operator ()	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^        std::size_t operator()(const key_type &val) const$/;"	f	struct:boost::interprocess::unordered_map_index_aux::hasher	access:public	signature:(const key_type &val) const
boost::interprocess::unordered_map_index_aux::index_t	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^                         key_equal, allocator_type>      index_t;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
boost::interprocess::unordered_map_index_aux::key_equal	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef std::equal_to<key_type>                 key_equal;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
boost::interprocess::unordered_map_index_aux::key_type	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef typename MapConfig::key_type            key_type;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
boost::interprocess::unordered_map_index_aux::mapped_type	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef typename MapConfig::mapped_type         mapped_type;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
boost::interprocess::unordered_map_index_aux::value_type	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef std::pair<const key_type, mapped_type>  value_type;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
boost::interprocess::upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^class upgradable_lock$/;"	c	namespace:boost::interprocess
boost::interprocess::upgradable_lock::detail::enable_if::type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^                  , typename detail::enable_if< detail::is_same<T, UpgradableMutex> >::type * = 0)$/;"	m	class:boost::interprocess::upgradable_lock::detail::enable_if	access:public
boost::interprocess::upgradable_lock::lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   void lock()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
boost::interprocess::upgradable_lock::mp_mutex	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   mutex_type *mp_mutex;$/;"	m	class:boost::interprocess::upgradable_lock	access:private
boost::interprocess::upgradable_lock::mutex	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   mutex_type* mutex() const$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:() const
boost::interprocess::upgradable_lock::mutex_type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   typedef UpgradableMutex mutex_type;$/;"	t	class:boost::interprocess::upgradable_lock	access:public
boost::interprocess::upgradable_lock::m_locked	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^      : mp_mutex(0), m_locked(false)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(false)
boost::interprocess::upgradable_lock::m_locked	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^      : mp_mutex(0), m_locked(upgr.owns())$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(upgr.owns())
boost::interprocess::upgradable_lock::m_locked	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   bool        m_locked;$/;"	m	class:boost::interprocess::upgradable_lock	access:private
boost::interprocess::upgradable_lock::operator unspecified_bool_type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:() const
boost::interprocess::upgradable_lock::owns	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   bool owns() const$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:() const
boost::interprocess::upgradable_lock::release	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   mutex_type* release()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
boost::interprocess::upgradable_lock::scop	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock(BOOST_INTERPROCESS_RV_REF(scoped_lock<T>) scop$/;"	m	class:boost::interprocess::upgradable_lock	access:public
boost::interprocess::upgradable_lock::shar	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock( BOOST_INTERPROCESS_RV_REF(sharable_lock<T>) shar, try_to_lock_type$/;"	m	class:boost::interprocess::upgradable_lock	access:public
boost::interprocess::upgradable_lock::swap	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   void swap(upgradable_lock<mutex_type> &other)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(upgradable_lock<mutex_type> &other)
boost::interprocess::upgradable_lock::this_type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   typedef upgradable_lock<UpgradableMutex> this_type;$/;"	t	class:boost::interprocess::upgradable_lock	access:private
boost::interprocess::upgradable_lock::this_type::unspecified_bool_type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   typedef bool this_type::*unspecified_bool_type;$/;"	t	class:boost::interprocess::upgradable_lock::this_type	access:private
boost::interprocess::upgradable_lock::timed_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   bool timed_lock(const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(const boost::posix_time::ptime& abs_time)
boost::interprocess::upgradable_lock::try_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   bool try_lock()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
boost::interprocess::upgradable_lock::try_to_lock_type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock( BOOST_INTERPROCESS_RV_REF(sharable_lock<T>) shar, try_to_lock_type$/;"	m	class:boost::interprocess::upgradable_lock	access:public
boost::interprocess::upgradable_lock::unlock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   void unlock()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
boost::interprocess::upgradable_lock::upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   explicit upgradable_lock(mutex_type& m)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(mutex_type& m)
boost::interprocess::upgradable_lock::upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   explicit upgradable_lock(scoped_lock<mutex_type>&);$/;"	p	class:boost::interprocess::upgradable_lock	access:private	signature:(scoped_lock<mutex_type>&)
boost::interprocess::upgradable_lock::upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
boost::interprocess::upgradable_lock::upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock(mutex_type& m, accept_ownership_type)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(mutex_type& m, accept_ownership_type)
boost::interprocess::upgradable_lock::upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock(mutex_type& m, const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(mutex_type& m, const boost::posix_time::ptime& abs_time)
boost::interprocess::upgradable_lock::upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock(mutex_type& m, defer_lock_type)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(mutex_type& m, defer_lock_type)
boost::interprocess::upgradable_lock::upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock(mutex_type& m, try_to_lock_type)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(mutex_type& m, try_to_lock_type)
boost::interprocess::upgradable_lock::~upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   ~upgradable_lock()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
boost::interprocess::wbufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_bufferbuf<wchar_t>     wbufferbuf;$/;"	t	namespace:boost::interprocess
boost::interprocess::wbufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_bufferstream<wchar_t>  wbufferstream;$/;"	t	namespace:boost::interprocess
boost::interprocess::weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^class weak_ptr$/;"	c	namespace:boost::interprocess
boost::interprocess::weak_ptr::const_reference	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^                     <T>::type            const_reference;$/;"	t	class:boost::interprocess::weak_ptr	access:private
boost::interprocess::weak_ptr::element_type	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   typedef T element_type;$/;"	t	class:boost::interprocess::weak_ptr	access:public
boost::interprocess::weak_ptr::expired	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   bool expired() const \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:() const
boost::interprocess::weak_ptr::lock	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   shared_ptr<T, A, D> lock() const \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:() const
boost::interprocess::weak_ptr::m_pn	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   detail::weak_count<T, A, D> m_pn;      \/\/ reference counter$/;"	m	class:boost::interprocess::weak_ptr	access:private
boost::interprocess::weak_ptr::operator =	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   weak_ptr & operator=(shared_ptr<Y, A, D> const & r) \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(shared_ptr<Y, A, D> const & r)
boost::interprocess::weak_ptr::operator =	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   weak_ptr & operator=(weak_ptr<Y, A, D> const & r) \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(weak_ptr<Y, A, D> const & r)
boost::interprocess::weak_ptr::pointer	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^      <typename A::pointer, T>::type      pointer;$/;"	t	class:boost::interprocess::weak_ptr	access:private
boost::interprocess::weak_ptr::reference	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^                     <T>::type            reference;$/;"	t	class:boost::interprocess::weak_ptr	access:private
boost::interprocess::weak_ptr::reset	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   void reset() \/\/ never throws in 1.30+$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:()
boost::interprocess::weak_ptr::swap	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   void swap(this_type & other) \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(this_type & other)
boost::interprocess::weak_ptr::this_type	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   typedef weak_ptr<T, A, D> this_type;$/;"	t	class:boost::interprocess::weak_ptr	access:private
boost::interprocess::weak_ptr::use_count	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   long use_count() const \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:() const
boost::interprocess::weak_ptr::value_type	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   typedef T value_type;$/;"	t	class:boost::interprocess::weak_ptr	access:public
boost::interprocess::weak_ptr::weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   weak_ptr()$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:()
boost::interprocess::weak_ptr::weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   weak_ptr(shared_ptr<Y, A, D> const & r)$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(shared_ptr<Y, A, D> const & r)
boost::interprocess::weak_ptr::weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   weak_ptr(weak_ptr<Y, A, D> const & r)$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(weak_ptr<Y, A, D> const & r)
boost::interprocess::weak_ptr::_internal_assign	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   void _internal_assign(const detail::shared_count<Y, A, D> & pn2)$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(const detail::shared_count<Y, A, D> & pn2)
boost::interprocess::weak_ptr::_internal_less	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   bool _internal_less(weak_ptr<T2, A2, D2> const & rhs) const$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(weak_ptr<T2, A2, D2> const & rhs) const
boost::interprocess::wfixed_managed_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wfixed_managed_shared_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::wibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_ibufferstream<wchar_t> wibufferstream;$/;"	t	namespace:boost::interprocess
boost::interprocess::winapi	/usr/include/boost/interprocess/detail/win32_api.hpp	/^namespace winapi {$/;"	n	namespace:boost::interprocess
boost::interprocess::winapi::BootAndSystemstampLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long BootAndSystemstampLength   = 16;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::BootstampLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long BootstampLength            = 8;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::CloseHandle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall CloseHandle(void*);$/;"	p	namespace:boost::interprocess::winapi	signature:(void*)
boost::interprocess::winapi::close_handle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned int close_handle(void* handle)$/;"	f	namespace:boost::interprocess::winapi	signature:(void* handle)
boost::interprocess::winapi::CreateDirectory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall CreateDirectory(const char *, interprocess_security_attributes*);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *, interprocess_security_attributes*)
boost::interprocess::winapi::CreateDirectoryA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall CreateDirectoryA(const char *, interprocess_security_attributes*);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *, interprocess_security_attributes*)
boost::interprocess::winapi::CreateFileA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall CreateFileA (const char *, unsigned long, unsigned long, struct interprocess_security_attributes*, unsigned long, unsigned long, void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *, unsigned long, unsigned long, struct interprocess_security_attributes*, unsigned long, unsigned long, void *)
boost::interprocess::winapi::CreateFileMappingA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall CreateFileMappingA (void *, interprocess_security_attributes*, unsigned long, unsigned long, unsigned long, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, interprocess_security_attributes*, unsigned long, unsigned long, unsigned long, const char *)
boost::interprocess::winapi::CreateMutexA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall CreateMutexA(interprocess_security_attributes*, int, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(interprocess_security_attributes*, int, const char *)
boost::interprocess::winapi::CreateSemaphoreA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall CreateSemaphoreA(interprocess_security_attributes*, long, long, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(interprocess_security_attributes*, long, long, const char *)
boost::interprocess::winapi::create_always	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long create_always     = 2;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::create_directory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool create_directory(const char *name, interprocess_security_attributes* security)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name, interprocess_security_attributes* security)
boost::interprocess::winapi::create_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *create_file(const char *name, unsigned long access, unsigned long creation_flags, unsigned long attributes = 0)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name, unsigned long access, unsigned long creation_flags, unsigned long attributes = 0)
boost::interprocess::winapi::create_file_mapping	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void * create_file_mapping (void * handle, unsigned long access, unsigned long high_size, unsigned long low_size, const char * name)$/;"	f	namespace:boost::interprocess::winapi	signature:(void * handle, unsigned long access, unsigned long high_size, unsigned long low_size, const char * name)
boost::interprocess::winapi::create_mutex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *create_mutex(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
boost::interprocess::winapi::create_new	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long create_new        = 1;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::create_semaphore	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *create_semaphore(long initialCount, const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(long initialCount, const char *name)
boost::interprocess::winapi::DeleteFileA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall    DeleteFileA (const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *)
boost::interprocess::winapi::delete_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long delete_access = 0x00010000L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::delete_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool delete_file(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
boost::interprocess::winapi::DuplicateHandle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall DuplicateHandle$/;"	p	namespace:boost::interprocess::winapi	signature:( void *hSourceProcessHandle, void *hSourceHandle , void *hTargetProcessHandle, void **lpTargetHandle , unsigned long dwDesiredAccess, int bInheritHandle , unsigned long dwOptions)
boost::interprocess::winapi::duplicate_close_source	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long duplicate_close_source  = (unsigned long)0x00000001;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::duplicate_current_process_handle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool duplicate_current_process_handle$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hSourceHandle, void **lpTargetHandle)
boost::interprocess::winapi::duplicate_same_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long duplicate_same_access   = (unsigned long)0x00000002;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::error_already_exists	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_already_exists = 183L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::error_file_not_found	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_file_not_found = 2u;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::error_lock_violation	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_lock_violation       = 33;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::error_no_more_files	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_no_more_files  = 18u;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::error_sharing_violation	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_sharing_violation = 32L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::error_sharing_violation_sleep_ms	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned int  error_sharing_violation_sleep_ms = 250u;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::error_sharing_violation_tries	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned int  error_sharing_violation_tries = 3u;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::FileTimeToLocalFileTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int  __stdcall FileTimeToLocalFileTime(const interprocess_filetime *in, const interprocess_filetime *out);$/;"	p	namespace:boost::interprocess::winapi	signature:(const interprocess_filetime *in, const interprocess_filetime *out)
boost::interprocess::winapi::file_access_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_access_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_alignment_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_alignment_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_allocation_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_allocation_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_all_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_all_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_alternate_name_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_alternate_name_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_attribute_archive	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_archive     = 0x00000020;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_attribute_device	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_device      = 0x00000040;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_attribute_directory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_directory   = 0x00000010;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_attribute_hidden	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_hidden      = 0x00000002;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_attribute_normal	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_normal      = 0x00000080;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_attribute_readonly	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_readonly    = 0x00000001;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_attribute_system	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_system      = 0x00000004;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_attribute_temporary	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_temporary   = 0x00000100;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_basic_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_begin	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_begin     = 0;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_both_directory_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_both_directory_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_completion_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_completion_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_compression_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_compression_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_content_index_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_content_index_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_copy_on_write_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_copy_on_write_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_current	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_current   = 1;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_delete_on_close	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long file_delete_on_close = 0x00001000L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_directory_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_directory_information = 1,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_disposition_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_disposition_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_ea_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_ea_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_end	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_end       = 2;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_end_of_file_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_end_of_file_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_flag_backup_semantics	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_flag_backup_semantics = 0x02000000;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_flag_delete_on_close	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long file_flag_delete_on_close = 0x04000000;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_full_directory_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_full_directory_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_full_ea_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_full_ea_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_information_class_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^enum file_information_class_t {$/;"	g	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_inherit_content_index_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_inherit_content_index_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_internal_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_internal_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_link_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_link_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_mailslot_query_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_mailslot_query_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_mailslot_set_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_mailslot_set_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_map_all_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_map_all_access  = section_all_access;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_map_copy	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_map_copy        = section_query;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_map_read	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_map_read        = section_map_read;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_map_write	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_map_write       = section_map_write;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_maximum_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_maximum_information$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_mode_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_mode_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_move_cluster_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_move_cluster_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_names_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_names_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_name_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_name_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_name_information_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct file_name_information_t {$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_name_information_t::FileName	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   wchar_t FileName[1];$/;"	m	struct:boost::interprocess::winapi::file_name_information_t	access:public
boost::interprocess::winapi::file_name_information_t::FileNameLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long FileNameLength;$/;"	m	struct:boost::interprocess::winapi::file_name_information_t	access:public
boost::interprocess::winapi::file_network_open_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_network_open_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_object_id_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_object_id_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_ole_directory_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_ole_directory_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_ole_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_ole_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_open_for_backup_intent	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_open_for_backup_intent = 0x00004000;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_pipe_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_pipe_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_pipe_local_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_pipe_local_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_pipe_remote_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_pipe_remote_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_position_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_position_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_quota_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_quota_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_rename_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_rename_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_rename_information_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct file_rename_information_t {$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_rename_information_t::FileName	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   wchar_t FileName[1];$/;"	m	struct:boost::interprocess::winapi::file_rename_information_t	access:public
boost::interprocess::winapi::file_rename_information_t::FileNameLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long FileNameLength;$/;"	m	struct:boost::interprocess::winapi::file_rename_information_t	access:public
boost::interprocess::winapi::file_rename_information_t::Replace	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   int Replace;$/;"	m	struct:boost::interprocess::winapi::file_rename_information_t	access:public
boost::interprocess::winapi::file_rename_information_t::RootDir	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *RootDir;$/;"	m	struct:boost::interprocess::winapi::file_rename_information_t	access:public
boost::interprocess::winapi::file_reparse_point_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_reparse_point_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_share_delete	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_share_delete    = 0x00000004;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_share_read	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_share_read      = 0x00000001;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_share_valid_flags	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const int file_share_valid_flags = 0x00000007;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_share_write	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_share_write     = 0x00000002;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::file_standard_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_standard_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_stream_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_stream_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::file_time_to_local_file_time	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool file_time_to_local_file_time$/;"	f	namespace:boost::interprocess::winapi	signature:(const interprocess_filetime *in, const interprocess_filetime *out)
boost::interprocess::winapi::file_tracking_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_tracking_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
boost::interprocess::winapi::FindClose	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int   __stdcall FindClose(void *hFindFile);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hFindFile)
boost::interprocess::winapi::FindFirstFileA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall FindFirstFileA(const char *lpFileName, win32_find_data_t *lpFindFileData);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *lpFileName, win32_find_data_t *lpFindFileData)
boost::interprocess::winapi::FindNextFileA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int   __stdcall FindNextFileA(void *hFindFile, win32_find_data_t *lpFindFileData);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hFindFile, win32_find_data_t *lpFindFileData)
boost::interprocess::winapi::find_close	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool find_close(void *handle)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle)
boost::interprocess::winapi::find_first_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void * find_first_file(const char *lpFileName, win32_find_data_t *lpFindFileData)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *lpFileName, win32_find_data_t *lpFindFileData)
boost::interprocess::winapi::find_next_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool find_next_file(void *hFindFile, win32_find_data_t *lpFindFileData)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hFindFile, win32_find_data_t *lpFindFileData)
boost::interprocess::winapi::FlushViewOfFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall FlushViewOfFile (void *, std::size_t);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, std::size_t)
boost::interprocess::winapi::flush_view_of_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline int flush_view_of_file(void *base_addr, std::size_t numbytes)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *base_addr, std::size_t numbytes)
boost::interprocess::winapi::FormatMessageA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall FormatMessageA$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long dwFlags, const void *lpSource, unsigned long dwMessageId, unsigned long dwLanguageId, char *lpBuffer, unsigned long nSize, std::va_list *Arguments)
boost::interprocess::winapi::format_message	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long format_message$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned long dwFlags, const void *lpSource, unsigned long dwMessageId, unsigned long dwLanguageId, char *lpBuffer, unsigned long nSize, std::va_list *Arguments)
boost::interprocess::winapi::format_message_allocate_buffer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_allocate_buffer$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::format_message_argument_array	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_argument_array$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::format_message_from_hmodule	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_from_hmodule$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::format_message_from_string	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_from_string$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::format_message_from_system	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_from_system$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::format_message_ignore_inserts	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_ignore_inserts$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::format_message_max_width_mask	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_max_width_mask$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::FreeLibrary	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int   __stdcall FreeLibrary(void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
boost::interprocess::winapi::free_library	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool free_library(void *module)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *module)
boost::interprocess::winapi::generic_read	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long generic_read         = 0x80000000L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::generic_write	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long generic_write        = 0x40000000L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::GetCurrentProcess	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall GetCurrentProcess();$/;"	p	namespace:boost::interprocess::winapi	signature:()
boost::interprocess::winapi::GetCurrentProcessId	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall GetCurrentProcessId();$/;"	p	namespace:boost::interprocess::winapi	signature:()
boost::interprocess::winapi::GetCurrentThreadId	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall GetCurrentThreadId();$/;"	p	namespace:boost::interprocess::winapi	signature:()
boost::interprocess::winapi::GetFileSizeEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall GetFileSizeEx (void *, __int64 *size);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, __int64 *size)
boost::interprocess::winapi::GetLastError	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall GetLastError();$/;"	p	namespace:boost::interprocess::winapi	signature:()
boost::interprocess::winapi::GetMappedFileName_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef unsigned long (__stdcall * GetMappedFileName_t)(void *, void *, wchar_t *, unsigned long);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::GetModuleHandleA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall GetModuleHandleA(const char*);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char*)
boost::interprocess::winapi::GetProcAddress	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall GetProcAddress(void *, const char*);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, const char*)
boost::interprocess::winapi::GetSystemInfo	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void __stdcall GetSystemInfo (struct system_info *);$/;"	p	namespace:boost::interprocess::winapi	signature:(struct system_info *)
boost::interprocess::winapi::GetSystemTimeAsFileTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void __stdcall GetSystemTimeAsFileTime(interprocess_filetime*);$/;"	p	namespace:boost::interprocess::winapi	signature:(interprocess_filetime*)
boost::interprocess::winapi::GetTempPathA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall GetTempPathA(unsigned long length, char *buffer);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long length, char *buffer)
boost::interprocess::winapi::get_boot_and_system_time	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_boot_and_system_time(unsigned char (&bootsystemstamp) [BootAndSystemstampLength])$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned char (&bootsystemstamp) [BootAndSystemstampLength])
boost::interprocess::winapi::get_boot_and_system_time_wstr	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_boot_and_system_time_wstr(wchar_t *bootsystemstamp, std::size_t &s)  \/\/will write BootAndSystemstampLength chars$/;"	f	namespace:boost::interprocess::winapi	signature:(wchar_t *bootsystemstamp, std::size_t &s)
boost::interprocess::winapi::get_boot_time	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_boot_time(unsigned char (&bootstamp) [BootstampLength])$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned char (&bootstamp) [BootstampLength])
boost::interprocess::winapi::get_boot_time_str	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_boot_time_str(char *bootstamp_str, std::size_t &s) \/\/will write BootstampLength chars$/;"	f	namespace:boost::interprocess::winapi	signature:(char *bootstamp_str, std::size_t &s)
boost::interprocess::winapi::get_current_process	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *get_current_process()$/;"	f	namespace:boost::interprocess::winapi	signature:()
boost::interprocess::winapi::get_current_process_id	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long get_current_process_id()$/;"	f	namespace:boost::interprocess::winapi	signature:()
boost::interprocess::winapi::get_current_thread_id	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long get_current_thread_id()$/;"	f	namespace:boost::interprocess::winapi	signature:()
boost::interprocess::winapi::get_file_name_from_handle_function	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_file_name_from_handle_function$/;"	f	namespace:boost::interprocess::winapi	signature:(void * hFile, wchar_t *pszFilename, std::size_t length, std::size_t &out_length)
boost::interprocess::winapi::get_file_size	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_file_size(void *handle, __int64 &size)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, __int64 &size)
boost::interprocess::winapi::get_last_error	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long get_last_error()$/;"	f	namespace:boost::interprocess::winapi	signature:()
boost::interprocess::winapi::get_module_handle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *get_module_handle(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
boost::interprocess::winapi::get_proc_address	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *get_proc_address(void *module, const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *module, const char *name)
boost::interprocess::winapi::get_shared_documents_folder	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void get_shared_documents_folder(std::string &s)$/;"	f	namespace:boost::interprocess::winapi	signature:(std::string &s)
boost::interprocess::winapi::get_system_info	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void get_system_info(system_info *info)$/;"	f	namespace:boost::interprocess::winapi	signature:(system_info *info)
boost::interprocess::winapi::get_system_time_as_file_time	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void get_system_time_as_file_time(interprocess_filetime *filetime)$/;"	f	namespace:boost::interprocess::winapi	signature:(interprocess_filetime *filetime)
boost::interprocess::winapi::get_system_time_of_day_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_system_time_of_day_information(system_timeofday_information &info)$/;"	f	namespace:boost::interprocess::winapi	signature:(system_timeofday_information &info)
boost::interprocess::winapi::get_temp_path	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long get_temp_path(unsigned long length, char *buffer)$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned long length, char *buffer)
boost::interprocess::winapi::handle_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^class handle_closer$/;"	c	namespace:boost::interprocess::winapi
boost::interprocess::winapi::handle_closer::handle_	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *handle_;$/;"	m	class:boost::interprocess::winapi::handle_closer	access:private
boost::interprocess::winapi::handle_closer::handle_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   handle_closer(void *handle) : handle_(handle){}$/;"	f	class:boost::interprocess::winapi::handle_closer	access:public	signature:(void *handle)
boost::interprocess::winapi::handle_closer::~handle_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   ~handle_closer(){ close_handle(handle_);  }$/;"	f	class:boost::interprocess::winapi::handle_closer	access:public	signature:()
boost::interprocess::winapi::hkey_local_machine	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static void * const  hkey_local_machine = (void*)(unsigned long*)(long)(0x80000002);$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::infinite_time	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long infinite_time        = 0xFFFFFFFF;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::InitializeSecurityDescriptor	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall InitializeSecurityDescriptor(interprocess_security_descriptor *pSecurityDescriptor, unsigned long dwRevision);$/;"	p	namespace:boost::interprocess::winapi	signature:(interprocess_security_descriptor *pSecurityDescriptor, unsigned long dwRevision)
boost::interprocess::winapi::initialize_object_attributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void initialize_object_attributes$/;"	f	namespace:boost::interprocess::winapi	signature:( object_attributes_t *pobject_attr, unicode_string_t *name , unsigned long attr, void *rootdir, void *security_descr)
boost::interprocess::winapi::interlocked_compare_exchange	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long interlocked_compare_exchange(long volatile *addr, long val1, long val2)$/;"	f	namespace:boost::interprocess::winapi	signature:(long volatile *addr, long val1, long val2)
boost::interprocess::winapi::interlocked_decrement	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long interlocked_decrement(long volatile *addr)$/;"	f	namespace:boost::interprocess::winapi	signature:(long volatile *addr)
boost::interprocess::winapi::interlocked_exchange	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long interlocked_exchange(long volatile* addend, long value)$/;"	f	namespace:boost::interprocess::winapi	signature:(long volatile* addend, long value)
boost::interprocess::winapi::interlocked_exchange_add	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long interlocked_exchange_add(long volatile* addend, long value)$/;"	f	namespace:boost::interprocess::winapi	signature:(long volatile* addend, long value)
boost::interprocess::winapi::interlocked_increment	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long interlocked_increment(long volatile *addr)$/;"	f	namespace:boost::interprocess::winapi	signature:(long volatile *addr)
boost::interprocess::winapi::interprocess_acl	/usr/include/boost/interprocess/detail/win32_api.hpp	/^} interprocess_acl;$/;"	t	namespace:boost::interprocess::winapi	typeref:struct:boost::interprocess::winapi::_interprocess_acl
boost::interprocess::winapi::interprocess_filetime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_filetime$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::interprocess_filetime::dwHighDateTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  dwHighDateTime;$/;"	m	struct:boost::interprocess::winapi::interprocess_filetime	access:public
boost::interprocess::winapi::interprocess_filetime::dwLowDateTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  dwLowDateTime;  $/;"	m	struct:boost::interprocess::winapi::interprocess_filetime	access:public
boost::interprocess::winapi::interprocess_memory_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_memory_basic_information$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::interprocess_memory_basic_information::AllocationBase	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *         AllocationBase;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
boost::interprocess::winapi::interprocess_memory_basic_information::AllocationProtect	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  AllocationProtect;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
boost::interprocess::winapi::interprocess_memory_basic_information::BaseAddress	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *         BaseAddress;  $/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
boost::interprocess::winapi::interprocess_memory_basic_information::Protect	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  Protect;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
boost::interprocess::winapi::interprocess_memory_basic_information::RegionSize	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  RegionSize;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
boost::interprocess::winapi::interprocess_memory_basic_information::State	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  State;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
boost::interprocess::winapi::interprocess_memory_basic_information::Type	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  Type;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
boost::interprocess::winapi::interprocess_overlapped	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_overlapped $/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::interprocess_overlapped::h_event	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *h_event;$/;"	m	struct:boost::interprocess::winapi::interprocess_overlapped	access:public
boost::interprocess::winapi::interprocess_overlapped::internal	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long *internal;$/;"	m	struct:boost::interprocess::winapi::interprocess_overlapped	access:public
boost::interprocess::winapi::interprocess_overlapped::internal_high	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long *internal_high;$/;"	m	struct:boost::interprocess::winapi::interprocess_overlapped	access:public
boost::interprocess::winapi::interprocess_overlapped::__anon16::dummy	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      }dummy;$/;"	m	union:boost::interprocess::winapi::interprocess_overlapped::__anon16	typeref:struct:boost::interprocess::winapi::interprocess_overlapped::__anon16::__anon17	access:public
boost::interprocess::winapi::interprocess_overlapped::__anon16::pointer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      void *pointer;$/;"	m	union:boost::interprocess::winapi::interprocess_overlapped::__anon16	access:public
boost::interprocess::winapi::interprocess_overlapped::__anon16::__anon17::offset	/usr/include/boost/interprocess/detail/win32_api.hpp	/^         unsigned long offset;$/;"	m	struct:boost::interprocess::winapi::interprocess_overlapped::__anon16::__anon17	access:public
boost::interprocess::winapi::interprocess_overlapped::__anon16::__anon17::offset_high	/usr/include/boost/interprocess/detail/win32_api.hpp	/^         unsigned long offset_high;$/;"	m	struct:boost::interprocess::winapi::interprocess_overlapped::__anon16::__anon17	access:public
boost::interprocess::winapi::interprocess_security_attributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_security_attributes$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::interprocess_security_attributes::bInheritHandle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   int bInheritHandle;$/;"	m	struct:boost::interprocess::winapi::interprocess_security_attributes	access:public
boost::interprocess::winapi::interprocess_security_attributes::lpSecurityDescriptor	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *lpSecurityDescriptor;$/;"	m	struct:boost::interprocess::winapi::interprocess_security_attributes	access:public
boost::interprocess::winapi::interprocess_security_attributes::nLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long nLength;$/;"	m	struct:boost::interprocess::winapi::interprocess_security_attributes	access:public
boost::interprocess::winapi::interprocess_security_descriptor	/usr/include/boost/interprocess/detail/win32_api.hpp	/^} interprocess_security_descriptor;$/;"	t	namespace:boost::interprocess::winapi	typeref:struct:boost::interprocess::winapi::_interprocess_security_descriptor
boost::interprocess::winapi::invalid_file_size	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long invalid_file_size    = (unsigned long)0xFFFFFFFF;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::invalid_handle_value	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static       void * const  invalid_handle_value = (void*)(long)(-1);$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::io_status_block_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct io_status_block_t {$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::io_status_block_t::Information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long *Information;$/;"	m	struct:boost::interprocess::winapi::io_status_block_t	access:public
boost::interprocess::winapi::io_status_block_t::__anon20::Pointer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      void *Pointer;$/;"	m	union:boost::interprocess::winapi::io_status_block_t::__anon20	access:public
boost::interprocess::winapi::io_status_block_t::__anon20::Status	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      long Status;$/;"	m	union:boost::interprocess::winapi::io_status_block_t::__anon20	access:public
boost::interprocess::winapi::key_query_value	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static unsigned long key_query_value    = 0x0001;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::lang_neutral	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long lang_neutral         = (unsigned long)0x00;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::library_unloader	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct library_unloader$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::library_unloader::library_unloader	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   library_unloader(void *module) : lib_(module){}$/;"	f	struct:boost::interprocess::winapi::library_unloader	access:public	signature:(void *module)
boost::interprocess::winapi::library_unloader::lib_	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *lib_;$/;"	m	struct:boost::interprocess::winapi::library_unloader	access:public
boost::interprocess::winapi::library_unloader::~library_unloader	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   ~library_unloader(){ free_library(lib_);  }$/;"	f	struct:boost::interprocess::winapi::library_unloader	access:public	signature:()
boost::interprocess::winapi::LoadLibraryA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall LoadLibraryA(const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *)
boost::interprocess::winapi::load_library	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *load_library(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
boost::interprocess::winapi::LocalFree	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall LocalFree (void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
boost::interprocess::winapi::local_free	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void * local_free(void *hmem)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hmem)
boost::interprocess::winapi::LockFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall LockFile  (void *hnd, unsigned long offset_low, unsigned long offset_high, unsigned long size_low, unsigned long size_high);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long offset_low, unsigned long offset_high, unsigned long size_low, unsigned long size_high)
boost::interprocess::winapi::LockFileEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall LockFileEx(void *hnd, unsigned long flags, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped* overlapped);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long flags, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped* overlapped)
boost::interprocess::winapi::lockfile_exclusive_lock	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long lockfile_exclusive_lock    = 2;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::lockfile_fail_immediately	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long lockfile_fail_immediately  = 1;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::lock_file_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool lock_file_ex(void *hnd, unsigned long flags, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped *overlapped)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long flags, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped *overlapped)
boost::interprocess::winapi::make_lang_id	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long make_lang_id(unsigned long p, unsigned long s)$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned long p, unsigned long s)
boost::interprocess::winapi::MapViewOfFileEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall MapViewOfFileEx (void *, unsigned long, unsigned long, unsigned long, std::size_t, void*);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, unsigned long, unsigned long, unsigned long, std::size_t, void*)
boost::interprocess::winapi::map_view_of_file_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *map_view_of_file_ex(void *handle, unsigned long file_access, unsigned long highoffset, unsigned long lowoffset, std::size_t numbytes, void *base_addr)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, unsigned long file_access, unsigned long highoffset, unsigned long lowoffset, std::size_t numbytes, void *base_addr)
boost::interprocess::winapi::MaxPath	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long MaxPath           = 260;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::MoveFileExA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall    MoveFileExA (const char *, const char *, unsigned long);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *, const char *, unsigned long)
boost::interprocess::winapi::movefile_copy_allowed	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_copy_allowed            = 0x02;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::movefile_create_hardlink	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_create_hardlink         = 0x10;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::movefile_delay_until_reboot	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_delay_until_reboot      = 0x04;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::movefile_fail_if_not_trackable	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_fail_if_not_trackable   = 0x20;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::movefile_replace_existing	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_replace_existing        = 0x01;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::movefile_write_through	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_write_through           = 0x08;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::move_file_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool move_file_ex(const char *source_filename, const char *destination_filename, unsigned long flags)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *source_filename, const char *destination_filename, unsigned long flags)
boost::interprocess::winapi::mutex_all_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long mutex_all_access     = (0x000F0000L)|(0x00100000L)|0x0001;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::NtClose_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtClose_t) (void*);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::NtDeleteFile_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtDeleteFile_t)(object_attributes_t *ObjectAttributes); $/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::NtOpenFile_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtOpenFile_t)(void*,unsigned long ,object_attributes_t*,io_status_block_t*,unsigned long,unsigned long);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::NtQueryInformationFile_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtQueryInformationFile_t)(void *,io_status_block_t *,void *, long, int);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::NtQueryObject_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall * NtQueryObject_t)(void*, object_information_class, void *, unsigned long, unsigned long *); $/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::NtQuerySystemInformation_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall * NtQuerySystemInformation_t)(int, void*, unsigned long, unsigned long *); $/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::ntquery_mem_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^union ntquery_mem_t$/;"	u	namespace:boost::interprocess::winapi
boost::interprocess::winapi::ntquery_mem_t::name	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_name_information_t name;$/;"	m	union:boost::interprocess::winapi::ntquery_mem_t	access:public
boost::interprocess::winapi::ntquery_mem_t::ren	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   } ren;$/;"	m	union:boost::interprocess::winapi::ntquery_mem_t	typeref:struct:boost::interprocess::winapi::ntquery_mem_t::ren_t	access:public
boost::interprocess::winapi::ntquery_mem_t::ren_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   struct ren_t$/;"	s	union:boost::interprocess::winapi::ntquery_mem_t	access:public
boost::interprocess::winapi::ntquery_mem_t::ren_t::buf	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      wchar_t buf[32767];$/;"	m	struct:boost::interprocess::winapi::ntquery_mem_t::ren_t	access:public
boost::interprocess::winapi::ntquery_mem_t::ren_t::info	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      file_rename_information_t info;$/;"	m	struct:boost::interprocess::winapi::ntquery_mem_t::ren_t	access:public
boost::interprocess::winapi::NtSetInformationFile_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtSetInformationFile_t)(void *FileHandle, io_status_block_t *IoStatusBlock, void *FileInformation, unsigned long Length, int FileInformationClass ); $/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::object_all_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_all_information,$/;"	e	enum:boost::interprocess::winapi::object_information_class
boost::interprocess::winapi::object_attributes_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct object_attributes_t {$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::object_attributes_t::Attributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long Attributes;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
boost::interprocess::winapi::object_attributes_t::Length	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long Length;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
boost::interprocess::winapi::object_attributes_t::ObjectName	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unicode_string_t *ObjectName;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
boost::interprocess::winapi::object_attributes_t::RootDirectory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void * RootDirectory;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
boost::interprocess::winapi::object_attributes_t::SecurityDescriptor	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *SecurityDescriptor;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
boost::interprocess::winapi::object_attributes_t::SecurityQualityOfService	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *SecurityQualityOfService;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
boost::interprocess::winapi::object_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_basic_information,$/;"	e	enum:boost::interprocess::winapi::object_information_class
boost::interprocess::winapi::object_data_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_data_information$/;"	e	enum:boost::interprocess::winapi::object_information_class
boost::interprocess::winapi::object_information_class	/usr/include/boost/interprocess/detail/win32_api.hpp	/^enum object_information_class$/;"	g	namespace:boost::interprocess::winapi
boost::interprocess::winapi::object_name_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_name_information,$/;"	e	enum:boost::interprocess::winapi::object_information_class
boost::interprocess::winapi::object_name_information_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct object_name_information_t$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::object_name_information_t::Name	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unicode_string_t Name;$/;"	m	struct:boost::interprocess::winapi::object_name_information_t	access:public
boost::interprocess::winapi::object_name_information_t::NameBuffer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   wchar_t NameBuffer[1];$/;"	m	struct:boost::interprocess::winapi::object_name_information_t	access:public
boost::interprocess::winapi::object_type_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_type_information,$/;"	e	enum:boost::interprocess::winapi::object_information_class
boost::interprocess::winapi::obj_case_insensitive	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long obj_case_insensitive = 0x00000040L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::OpenFileMappingA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall OpenFileMappingA (unsigned long, int, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long, int, const char *)
boost::interprocess::winapi::OpenMutexA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall OpenMutexA(unsigned long, int, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long, int, const char *)
boost::interprocess::winapi::OpenSemaphoreA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall OpenSemaphoreA(unsigned long, int, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long, int, const char *)
boost::interprocess::winapi::open_always	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long open_always       = 4;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::open_existing	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long open_existing     = 3;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::open_file_mapping	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void * open_file_mapping (unsigned long access, const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned long access, const char *name)
boost::interprocess::winapi::open_mutex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *open_mutex(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
boost::interprocess::winapi::open_semaphore	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *open_semaphore(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
boost::interprocess::winapi::page_readonly	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long page_readonly        = 0x02;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::page_readwrite	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long page_readwrite       = 0x04;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::page_writecopy	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long page_writecopy       = 0x08;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::RegCloseKey_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long          (__stdcall * RegCloseKey_t)(void *);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::RegOpenKeyEx_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long          (__stdcall * RegOpenKeyEx_t)(void *, const char *, unsigned long, unsigned long, void **);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::RegOpenKey_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long          (__stdcall * RegOpenKey_t)(void *, const char *, void **);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::RegQueryValueEx_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long          (__stdcall * RegQueryValueEx_t)(void *, const char *, unsigned long*, unsigned long*, unsigned char *, unsigned long*);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::RegQueryValue_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long          (__stdcall * RegQueryValue_t)(void *, const char *, char *, long*);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::reg_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct reg_closer$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::reg_closer::func_	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   RegCloseKey_t func_;$/;"	m	struct:boost::interprocess::winapi::reg_closer	access:public
boost::interprocess::winapi::reg_closer::key_	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *key_;$/;"	m	struct:boost::interprocess::winapi::reg_closer	access:public
boost::interprocess::winapi::reg_closer::reg_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   reg_closer(RegCloseKey_t func, void *key) : func_(func), key_(key){}$/;"	f	struct:boost::interprocess::winapi::reg_closer	access:public	signature:(RegCloseKey_t func, void *key)
boost::interprocess::winapi::reg_closer::~reg_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   ~reg_closer(){ (*func_)(key_);  }$/;"	f	struct:boost::interprocess::winapi::reg_closer	access:public	signature:()
boost::interprocess::winapi::ReleaseMutex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall ReleaseMutex(void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
boost::interprocess::winapi::ReleaseSemaphore	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall ReleaseSemaphore(void *, long, long *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, long, long *)
boost::interprocess::winapi::release_mutex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline int release_mutex(void *handle)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle)
boost::interprocess::winapi::release_semaphore	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline int release_semaphore(void *handle, long release_count, long *prev_count)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, long release_count, long *prev_count)
boost::interprocess::winapi::RemoveDirectoryA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall RemoveDirectoryA(const char *lpPathName);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *lpPathName)
boost::interprocess::winapi::remove_directory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool remove_directory(const char *lpPathName)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *lpPathName)
boost::interprocess::winapi::RtlAppendUnicodeToString_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *RtlAppendUnicodeToString_t)(unicode_string_t *Destination, const wchar_t *Source);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::RtlCreateUnicodeStringFromAsciiz_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *RtlCreateUnicodeStringFromAsciiz_t)(unicode_string_t *, const char *);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::RtlFreeUnicodeString_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef void (__stdcall *RtlFreeUnicodeString_t)(unicode_string_t *);$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::RtlInitUnicodeString_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef void (__stdcall *RtlInitUnicodeString_t)( unicode_string_t *, const wchar_t * );$/;"	t	namespace:boost::interprocess::winapi
boost::interprocess::winapi::rtl_init_empty_unicode_string	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void rtl_init_empty_unicode_string(unicode_string_t *ucStr, wchar_t *buf, unsigned short bufSize)$/;"	f	namespace:boost::interprocess::winapi	signature:(unicode_string_t *ucStr, wchar_t *buf, unsigned short bufSize)
boost::interprocess::winapi::sched_yield	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void sched_yield()$/;"	f	namespace:boost::interprocess::winapi	signature:()
boost::interprocess::winapi::section_all_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_all_access         = standard_rights_required |$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::section_extend_size	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_extend_size        = 0x0010;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::section_map_execute	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_map_execute        = 0x0008;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::section_map_read	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_map_read           = 0x0004;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::section_map_write	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_map_write          = 0x0002;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::section_query	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_query              = 0x0001;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::security_descriptor_revision	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long security_descriptor_revision = 1;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::semaphore_all_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long semaphore_all_access = (0x000F0000L)|(0x00100000L)|0x3;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::SetEndOfFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall SetEndOfFile(void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
boost::interprocess::winapi::SetFilePointerEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall SetFilePointerEx(void *, __int64 distance, __int64 *new_file_pointer, unsigned long move_method);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, __int64 distance, __int64 *new_file_pointer, unsigned long move_method)
boost::interprocess::winapi::SetFileValidData	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall SetFileValidData(void *, __int64 size);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, __int64 size)
boost::interprocess::winapi::SetSecurityDescriptorDacl	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall SetSecurityDescriptorDacl(interprocess_security_descriptor *pSecurityDescriptor, int bDaclPresent, interprocess_acl *pDacl, int bDaclDefaulted);$/;"	p	namespace:boost::interprocess::winapi	signature:(interprocess_security_descriptor *pSecurityDescriptor, int bDaclPresent, interprocess_acl *pDacl, int bDaclDefaulted)
boost::interprocess::winapi::set_end_of_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline int set_end_of_file(void *handle)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle)
boost::interprocess::winapi::set_file_pointer_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool set_file_pointer_ex(void *handle, __int64 distance, __int64 *new_file_pointer, unsigned long move_method)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, __int64 distance, __int64 *new_file_pointer, unsigned long move_method)
boost::interprocess::winapi::Sleep	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void __stdcall Sleep(unsigned long);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long)
boost::interprocess::winapi::standard_rights_required	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long standard_rights_required   = 0x000F0000L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::sublang_default	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long sublang_default      = (unsigned long)0x01;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::SystemTimeOfDayInfoLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long SystemTimeOfDayInfoLength  = 48;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::system_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_basic_information = 0,$/;"	e	enum:boost::interprocess::winapi::system_information_class
boost::interprocess::winapi::system_exception_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_exception_information = 33,$/;"	e	enum:boost::interprocess::winapi::system_information_class
boost::interprocess::winapi::system_info	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct system_info {$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::system_info::dwActiveProcessorMask	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long * dwActiveProcessorMask;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
boost::interprocess::winapi::system_info::dwAllocationGranularity	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long dwAllocationGranularity;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
boost::interprocess::winapi::system_info::dwNumberOfProcessors	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long dwNumberOfProcessors;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
boost::interprocess::winapi::system_info::dwPageSize	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long dwPageSize;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
boost::interprocess::winapi::system_info::dwProcessorType	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long dwProcessorType;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
boost::interprocess::winapi::system_info::lpMaximumApplicationAddress	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    void * lpMaximumApplicationAddress;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
boost::interprocess::winapi::system_info::lpMinimumApplicationAddress	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    void * lpMinimumApplicationAddress;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
boost::interprocess::winapi::system_info::wProcessorLevel	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned short wProcessorLevel;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
boost::interprocess::winapi::system_info::wProcessorRevision	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned short wProcessorRevision;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
boost::interprocess::winapi::system_info::__anon18::dummy	/usr/include/boost/interprocess/detail/win32_api.hpp	/^        } dummy;$/;"	m	union:boost::interprocess::winapi::system_info::__anon18	typeref:struct:boost::interprocess::winapi::system_info::__anon18::__anon19	access:public
boost::interprocess::winapi::system_info::__anon18::dwOemId	/usr/include/boost/interprocess/detail/win32_api.hpp	/^        unsigned long dwOemId;          \/\/ Obsolete field...do not use$/;"	m	union:boost::interprocess::winapi::system_info::__anon18	access:public
boost::interprocess::winapi::system_info::__anon18::__anon19::wProcessorArchitecture	/usr/include/boost/interprocess/detail/win32_api.hpp	/^            unsigned short wProcessorArchitecture;$/;"	m	struct:boost::interprocess::winapi::system_info::__anon18::__anon19	access:public
boost::interprocess::winapi::system_info::__anon18::__anon19::wReserved	/usr/include/boost/interprocess/detail/win32_api.hpp	/^            unsigned short wReserved;$/;"	m	struct:boost::interprocess::winapi::system_info::__anon18::__anon19	access:public
boost::interprocess::winapi::system_information_class	/usr/include/boost/interprocess/detail/win32_api.hpp	/^enum system_information_class {$/;"	g	namespace:boost::interprocess::winapi
boost::interprocess::winapi::system_interrupt_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_interrupt_information = 23,$/;"	e	enum:boost::interprocess::winapi::system_information_class
boost::interprocess::winapi::system_lookaside_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_lookaside_information = 45$/;"	e	enum:boost::interprocess::winapi::system_information_class
boost::interprocess::winapi::system_performance_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_performance_information = 2,$/;"	e	enum:boost::interprocess::winapi::system_information_class
boost::interprocess::winapi::system_processor_performance_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_processor_performance_information = 8,$/;"	e	enum:boost::interprocess::winapi::system_information_class
boost::interprocess::winapi::system_process_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_process_information = 5,$/;"	e	enum:boost::interprocess::winapi::system_information_class
boost::interprocess::winapi::system_registry_quota_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_registry_quota_information = 37,$/;"	e	enum:boost::interprocess::winapi::system_information_class
boost::interprocess::winapi::system_timeofday_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^union system_timeofday_information$/;"	u	namespace:boost::interprocess::winapi
boost::interprocess::winapi::system_timeofday_information::data	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   } data;$/;"	m	union:boost::interprocess::winapi::system_timeofday_information	typeref:struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
boost::interprocess::winapi::system_timeofday_information::data_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   struct data_t$/;"	s	union:boost::interprocess::winapi::system_timeofday_information	access:public
boost::interprocess::winapi::system_timeofday_information::data_t::dwReserved	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      unsigned long dwReserved;$/;"	m	struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
boost::interprocess::winapi::system_timeofday_information::data_t::liExpTimeZoneBias	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      __int64 liExpTimeZoneBias;$/;"	m	struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
boost::interprocess::winapi::system_timeofday_information::data_t::liKeBootTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      __int64 liKeBootTime;$/;"	m	struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
boost::interprocess::winapi::system_timeofday_information::data_t::liKeSystemTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      __int64 liKeSystemTime;$/;"	m	struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
boost::interprocess::winapi::system_timeofday_information::data_t::uCurrentTimeZoneId	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      unsigned long uCurrentTimeZoneId;$/;"	m	struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
boost::interprocess::winapi::system_timeofday_information::Reserved1	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char Reserved1[SystemTimeOfDayInfoLength];$/;"	m	union:boost::interprocess::winapi::system_timeofday_information	access:public
boost::interprocess::winapi::system_time_of_day_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_time_of_day_information = 3,$/;"	e	enum:boost::interprocess::winapi::system_information_class
boost::interprocess::winapi::truncate_existing	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long truncate_existing = 5;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::unicode_string_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct unicode_string_t {$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::unicode_string_t::Buffer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   wchar_t *Buffer;$/;"	m	struct:boost::interprocess::winapi::unicode_string_t	access:public
boost::interprocess::winapi::unicode_string_t::Length	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short Length;$/;"	m	struct:boost::interprocess::winapi::unicode_string_t	access:public
boost::interprocess::winapi::unicode_string_t::MaximumLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short MaximumLength;$/;"	m	struct:boost::interprocess::winapi::unicode_string_t	access:public
boost::interprocess::winapi::unlink_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool unlink_file(const char *filename)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *filename)
boost::interprocess::winapi::UnlockFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall UnlockFile(void *hnd, unsigned long offset_low, unsigned long offset_high, unsigned long size_low, unsigned long size_high);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long offset_low, unsigned long offset_high, unsigned long size_low, unsigned long size_high)
boost::interprocess::winapi::UnlockFileEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall UnlockFileEx(void *hnd, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped* overlapped);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped* overlapped)
boost::interprocess::winapi::unlock_file_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool unlock_file_ex(void *hnd, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped *overlapped)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped *overlapped)
boost::interprocess::winapi::UnmapViewOfFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall UnmapViewOfFile(void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
boost::interprocess::winapi::unmap_view_of_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline int unmap_view_of_file(void *address)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *address)
boost::interprocess::winapi::WaitForSingleObject	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall WaitForSingleObject(void *, unsigned long);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, unsigned long)
boost::interprocess::winapi::wait_abandoned	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long wait_abandoned       = 0x00000080L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::wait_failed	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long wait_failed          = (unsigned long)0xFFFFFFFF;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::wait_for_single_object	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long wait_for_single_object(void *handle, unsigned long time)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, unsigned long time)
boost::interprocess::winapi::wait_object_0	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long wait_object_0        = 0;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::wait_timeout	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long wait_timeout         = 258L;$/;"	m	namespace:boost::interprocess::winapi
boost::interprocess::winapi::win32_find_data_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct win32_find_data_t$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::win32_find_data_t::cAlternateFileName	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   char cAlternateFileName[14];$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
boost::interprocess::winapi::win32_find_data_t::cFileName	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   char cFileName[MaxPath];$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
boost::interprocess::winapi::win32_find_data_t::dwFileAttributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long dwFileAttributes;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
boost::interprocess::winapi::win32_find_data_t::dwReserved0	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long dwReserved0;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
boost::interprocess::winapi::win32_find_data_t::dwReserved1	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long dwReserved1;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
boost::interprocess::winapi::win32_find_data_t::ftCreationTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_filetime ftCreationTime;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
boost::interprocess::winapi::win32_find_data_t::ftLastAccessTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_filetime ftLastAccessTime;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
boost::interprocess::winapi::win32_find_data_t::ftLastWriteTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_filetime ftLastWriteTime;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
boost::interprocess::winapi::win32_find_data_t::nFileSizeHigh	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long nFileSizeHigh;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
boost::interprocess::winapi::win32_find_data_t::nFileSizeLow	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long nFileSizeLow;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
boost::interprocess::winapi::WriteFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall WriteFile(void *hnd, const void *buffer, unsigned long bytes_to_write, unsigned long *bytes_written, interprocess_overlapped* overlapped);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, const void *buffer, unsigned long bytes_to_write, unsigned long *bytes_written, interprocess_overlapped* overlapped)
boost::interprocess::winapi::write_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool write_file(void *hnd, const void *buffer, unsigned long bytes_to_write, unsigned long *bytes_written, interprocess_overlapped* overlapped)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hnd, const void *buffer, unsigned long bytes_to_write, unsigned long *bytes_written, interprocess_overlapped* overlapped)
boost::interprocess::winapi::_interprocess_acl	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef struct _interprocess_acl$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::_interprocess_acl::AceCount	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short AceCount;$/;"	m	struct:boost::interprocess::winapi::_interprocess_acl	access:public
boost::interprocess::winapi::_interprocess_acl::AclRevision	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char  AclRevision;$/;"	m	struct:boost::interprocess::winapi::_interprocess_acl	access:public
boost::interprocess::winapi::_interprocess_acl::AclSize	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short AclSize;$/;"	m	struct:boost::interprocess::winapi::_interprocess_acl	access:public
boost::interprocess::winapi::_interprocess_acl::Sbz1	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char  Sbz1;$/;"	m	struct:boost::interprocess::winapi::_interprocess_acl	access:public
boost::interprocess::winapi::_interprocess_acl::Sbz2	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short Sbz2;$/;"	m	struct:boost::interprocess::winapi::_interprocess_acl	access:public
boost::interprocess::winapi::_interprocess_security_descriptor	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef struct _interprocess_security_descriptor$/;"	s	namespace:boost::interprocess::winapi
boost::interprocess::winapi::_interprocess_security_descriptor::Control	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short Control;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
boost::interprocess::winapi::_interprocess_security_descriptor::Dacl	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_acl *Dacl;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
boost::interprocess::winapi::_interprocess_security_descriptor::Group	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *Group;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
boost::interprocess::winapi::_interprocess_security_descriptor::Owner	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *Owner;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
boost::interprocess::winapi::_interprocess_security_descriptor::Revision	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char Revision;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
boost::interprocess::winapi::_interprocess_security_descriptor::Sacl	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_acl *Sacl;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
boost::interprocess::winapi::_interprocess_security_descriptor::Sbz1	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char Sbz1;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
boost::interprocess::windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^class windows_shared_memory$/;"	c	namespace:boost::interprocess
boost::interprocess::windows_shared_memory::get_mapping_handle	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:() const
boost::interprocess::windows_shared_memory::get_mapping_handle	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline mapping_handle_t windows_shared_memory::get_mapping_handle() const$/;"	f	class:boost::interprocess::windows_shared_memory	signature:() const
boost::interprocess::windows_shared_memory::get_mode	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:() const
boost::interprocess::windows_shared_memory::get_mode	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline mode_t windows_shared_memory::get_mode() const$/;"	f	class:boost::interprocess::windows_shared_memory	signature:() const
boost::interprocess::windows_shared_memory::get_name	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   const char *get_name() const;$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:() const
boost::interprocess::windows_shared_memory::get_name	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline const char *windows_shared_memory::get_name() const$/;"	f	class:boost::interprocess::windows_shared_memory	signature:() const
boost::interprocess::windows_shared_memory::m_handle	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   void *         m_handle;$/;"	m	class:boost::interprocess::windows_shared_memory	access:private
boost::interprocess::windows_shared_memory::m_mode	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   mode_t         m_mode;$/;"	m	class:boost::interprocess::windows_shared_memory	access:private
boost::interprocess::windows_shared_memory::m_name	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   std::string    m_name;$/;"	m	class:boost::interprocess::windows_shared_memory	access:private
boost::interprocess::windows_shared_memory::priv_close	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::windows_shared_memory	access:private	signature:()
boost::interprocess::windows_shared_memory::priv_close	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline void windows_shared_memory::priv_close()$/;"	f	class:boost::interprocess::windows_shared_memory	signature:()
boost::interprocess::windows_shared_memory::priv_open_or_create	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   bool priv_open_or_create(detail::create_enum_t type, const char *filename, mode_t mode, std::size_t size);$/;"	p	class:boost::interprocess::windows_shared_memory	access:private	signature:(detail::create_enum_t type, const char *filename, mode_t mode, std::size_t size)
boost::interprocess::windows_shared_memory::priv_open_or_create	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline bool windows_shared_memory::priv_open_or_create$/;"	f	class:boost::interprocess::windows_shared_memory	signature:(detail::create_enum_t type, const char *filename, mode_t mode, std::size_t size)
boost::interprocess::windows_shared_memory::swap	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   void swap(windows_shared_memory &other);$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:(windows_shared_memory &other)
boost::interprocess::windows_shared_memory::swap	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline void windows_shared_memory::swap(windows_shared_memory &other)$/;"	f	class:boost::interprocess::windows_shared_memory	signature:(windows_shared_memory &other)
boost::interprocess::windows_shared_memory::windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   windows_shared_memory();$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:()
boost::interprocess::windows_shared_memory::windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   windows_shared_memory(create_only_t, const char *name, mode_t mode, std::size_t size)$/;"	f	class:boost::interprocess::windows_shared_memory	access:public	signature:(create_only_t, const char *name, mode_t mode, std::size_t size)
boost::interprocess::windows_shared_memory::windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   windows_shared_memory(open_only_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::windows_shared_memory	access:public	signature:(open_only_t, const char *name, mode_t mode)
boost::interprocess::windows_shared_memory::windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   windows_shared_memory(open_or_create_t, const char *name, mode_t mode, std::size_t size)$/;"	f	class:boost::interprocess::windows_shared_memory	access:public	signature:(open_or_create_t, const char *name, mode_t mode, std::size_t size)
boost::interprocess::windows_shared_memory::windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline windows_shared_memory::windows_shared_memory() $/;"	f	class:boost::interprocess::windows_shared_memory	signature:()
boost::interprocess::windows_shared_memory::~windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   ~windows_shared_memory();$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:()
boost::interprocess::windows_shared_memory::~windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline windows_shared_memory::~windows_shared_memory() $/;"	f	class:boost::interprocess::windows_shared_memory	signature:()
boost::interprocess::wmanaged_external_buffer	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_external_buffer;$/;"	t	namespace:boost::interprocess
boost::interprocess::wmanaged_heap_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_heap_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::wmanaged_mapped_file	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_mapped_file;$/;"	t	namespace:boost::interprocess
boost::interprocess::wmanaged_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_shared_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::wmanaged_windows_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_windows_shared_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::wmanaged_xsi_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_xsi_shared_memory;$/;"	t	namespace:boost::interprocess
boost::interprocess::wobufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_obufferstream<wchar_t> wobufferstream;$/;"	t	namespace:boost::interprocess
boost::interprocess::xsi	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^namespace xsi {$/;"	n	namespace:boost::interprocess
boost::interprocess::xsi	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^namespace xsi {$/;"	n	namespace:boost::interprocess
boost::interprocess::xsi::advanced_sem_op	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^inline bool advanced_sem_op(int id, int value, bool undo = true)$/;"	f	namespace:boost::interprocess::xsi	signature:(int id, int value, bool undo = true)
boost::interprocess::xsi::advanced_sem_open_or_create	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^inline bool advanced_sem_open_or_create(::key_t key, int initval, int &semid, int perm)$/;"	f	namespace:boost::interprocess::xsi	signature:(::key_t key, int initval, int &semid, int perm)
boost::interprocess::xsi::advanced_sem_rm	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^inline bool advanced_sem_rm(int id)$/;"	f	namespace:boost::interprocess::xsi	signature:(int id)
boost::interprocess::xsi::simple_sem_op	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^inline bool simple_sem_op(int id, int value, bool undo = true)$/;"	f	namespace:boost::interprocess::xsi	signature:(int id, int value, bool undo = true)
boost::interprocess::xsi::simple_sem_open_or_create	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^inline bool simple_sem_open_or_create(::key_t key, int initval, int &semid, int perm)$/;"	f	namespace:boost::interprocess::xsi	signature:(::key_t key, int initval, int &semid, int perm)
boost::interprocess::xsi::simple_sem_rm	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^inline bool simple_sem_rm(int id)$/;"	f	namespace:boost::interprocess::xsi	signature:(int id)
boost::interprocess::xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^class xsi_named_mutex$/;"	c	namespace:boost::interprocess
boost::interprocess::xsi_named_mutex::get_mapping_handle	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:() const
boost::interprocess::xsi_named_mutex::get_mapping_handle	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline mapping_handle_t xsi_named_mutex::get_mapping_handle() const$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:() const
boost::interprocess::xsi_named_mutex::get_path	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   const char *get_path() const;$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:() const
boost::interprocess::xsi_named_mutex::get_path	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline const char *xsi_named_mutex::get_path() const$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:() const
boost::interprocess::xsi_named_mutex::get_permissions	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   int get_permissions() const;$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:() const
boost::interprocess::xsi_named_mutex::get_permissions	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline int xsi_named_mutex::get_permissions() const$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:() const
boost::interprocess::xsi_named_mutex::lock	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:()
boost::interprocess::xsi_named_mutex::lock	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline void xsi_named_mutex::lock()$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
boost::interprocess::xsi_named_mutex::m_id	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   boost::uint8_t m_id;$/;"	m	class:boost::interprocess::xsi_named_mutex	access:private
boost::interprocess::xsi_named_mutex::m_key	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   key_t          m_key;$/;"	m	class:boost::interprocess::xsi_named_mutex	access:private
boost::interprocess::xsi_named_mutex::m_path	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   std::string    m_path;$/;"	m	class:boost::interprocess::xsi_named_mutex	access:private
boost::interprocess::xsi_named_mutex::m_perm	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   int            m_perm;$/;"	m	class:boost::interprocess::xsi_named_mutex	access:private
boost::interprocess::xsi_named_mutex::m_semid	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   int            m_semid;$/;"	m	class:boost::interprocess::xsi_named_mutex	access:private
boost::interprocess::xsi_named_mutex::operator =	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   xsi_named_mutex &operator=(xsi_named_mutex &);$/;"	p	class:boost::interprocess::xsi_named_mutex	access:private	signature:(xsi_named_mutex &)
boost::interprocess::xsi_named_mutex::priv_close	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:private	signature:()
boost::interprocess::xsi_named_mutex::priv_close	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline void xsi_named_mutex::priv_close()$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
boost::interprocess::xsi_named_mutex::priv_open_or_create	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   bool priv_open_or_create( detail::create_enum_t type$/;"	p	class:boost::interprocess::xsi_named_mutex	access:private	signature:( detail::create_enum_t type , const char *path , boost::uint8_t id , int perm)
boost::interprocess::xsi_named_mutex::priv_open_or_create	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline bool xsi_named_mutex::priv_open_or_create$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:(detail::create_enum_t type, const char *path, boost::uint8_t id, int perm)
boost::interprocess::xsi_named_mutex::remove	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   bool remove();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:()
boost::interprocess::xsi_named_mutex::remove	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline bool xsi_named_mutex::remove()$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
boost::interprocess::xsi_named_mutex::swap	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   void swap(xsi_named_mutex &other);$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:(xsi_named_mutex &other)
boost::interprocess::xsi_named_mutex::swap	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline void xsi_named_mutex::swap(xsi_named_mutex &other)$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:(xsi_named_mutex &other)
boost::interprocess::xsi_named_mutex::unlock	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:()
boost::interprocess::xsi_named_mutex::unlock	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline void xsi_named_mutex::unlock()$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
boost::interprocess::xsi_named_mutex::xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   xsi_named_mutex();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:()
boost::interprocess::xsi_named_mutex::xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   xsi_named_mutex(open_or_create_t, const char *path, boost::uint8_t id, int perm = 0666)$/;"	f	class:boost::interprocess::xsi_named_mutex	access:public	signature:(open_or_create_t, const char *path, boost::uint8_t id, int perm = 0666)
boost::interprocess::xsi_named_mutex::xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   xsi_named_mutex(xsi_named_mutex &);$/;"	p	class:boost::interprocess::xsi_named_mutex	access:private	signature:(xsi_named_mutex &)
boost::interprocess::xsi_named_mutex::xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline xsi_named_mutex::xsi_named_mutex() $/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
boost::interprocess::xsi_named_mutex::~xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   ~xsi_named_mutex();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:()
boost::interprocess::xsi_named_mutex::~xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline xsi_named_mutex::~xsi_named_mutex() $/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
boost::interprocess::xsi_shared_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^class xsi_shared_memory$/;"	c	namespace:boost::interprocess
boost::interprocess::xsi_shared_memory::get_mapping_handle	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:() const
boost::interprocess::xsi_shared_memory::get_mapping_handle	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^inline mapping_handle_t xsi_shared_memory::get_mapping_handle() const$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:() const
boost::interprocess::xsi_shared_memory::get_path	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   const char *get_path() const;$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:() const
boost::interprocess::xsi_shared_memory::get_permissions	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   int get_permissions() const;$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:() const
boost::interprocess::xsi_shared_memory::get_shmid	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   int get_shmid() const;$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:() const
boost::interprocess::xsi_shared_memory::get_shmid	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^inline int xsi_shared_memory::get_shmid() const$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:() const
boost::interprocess::xsi_shared_memory::get_shmid	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline int xsi_shared_memory::get_shmid() const$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:() const
boost::interprocess::xsi_shared_memory::m_shmid	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   int            m_shmid;$/;"	m	class:boost::interprocess::xsi_shared_memory	access:private
boost::interprocess::xsi_shared_memory::operator =	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   xsi_shared_memory &operator=(xsi_shared_memory &);$/;"	p	class:boost::interprocess::xsi_shared_memory	access:private	signature:(xsi_shared_memory &)
boost::interprocess::xsi_shared_memory::priv_open_or_create	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   bool priv_open_or_create( detail::create_enum_t type$/;"	p	class:boost::interprocess::xsi_shared_memory	access:private	signature:( detail::create_enum_t type , const char *filename , boost::uint8_t id , int perm , std::size_t size)
boost::interprocess::xsi_shared_memory::priv_open_or_create	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^inline bool xsi_shared_memory::priv_open_or_create$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:(detail::create_enum_t type, const char *filename, boost::uint8_t id, int perm, std::size_t size)
boost::interprocess::xsi_shared_memory::remove	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   static bool remove(int shmid);$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:(int shmid)
boost::interprocess::xsi_shared_memory::remove	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^inline bool xsi_shared_memory::remove(int shmid)$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:(int shmid)
boost::interprocess::xsi_shared_memory::swap	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   void swap(xsi_shared_memory &other);$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:(xsi_shared_memory &other)
boost::interprocess::xsi_shared_memory::swap	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^inline void xsi_shared_memory::swap(xsi_shared_memory &other)$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:(xsi_shared_memory &other)
boost::interprocess::xsi_shared_memory::xsi_shared_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   xsi_shared_memory();$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:()
boost::interprocess::xsi_shared_memory::xsi_shared_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   xsi_shared_memory(create_only_t, const char *path, boost::uint8_t id, std::size_t size, int perm = 0666)$/;"	f	class:boost::interprocess::xsi_shared_memory	access:public	signature:(create_only_t, const char *path, boost::uint8_t id, std::size_t size, int perm = 0666)
boost::interprocess::xsi_shared_memory::xsi_shared_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   xsi_shared_memory(open_only_t, const char *path, boost::uint8_t id, int perm = 0666)$/;"	f	class:boost::interprocess::xsi_shared_memory	access:public	signature:(open_only_t, const char *path, boost::uint8_t id, int perm = 0666)
boost::interprocess::xsi_shared_memory::xsi_shared_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   xsi_shared_memory(open_or_create_t, const char *path, boost::uint8_t id, std::size_t size, int perm = 0666)$/;"	f	class:boost::interprocess::xsi_shared_memory	access:public	signature:(open_or_create_t, const char *path, boost::uint8_t id, std::size_t size, int perm = 0666)
boost::interprocess::xsi_shared_memory::xsi_shared_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   xsi_shared_memory(xsi_shared_memory &);$/;"	p	class:boost::interprocess::xsi_shared_memory	access:private	signature:(xsi_shared_memory &)
boost::interprocess::xsi_shared_memory::xsi_shared_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^inline xsi_shared_memory::xsi_shared_memory() $/;"	f	class:boost::interprocess::xsi_shared_memory	signature:()
boost::interprocess::xsi_shared_memory::~xsi_shared_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   ~xsi_shared_memory();$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:()
boost::interprocess::xsi_shared_memory::~xsi_shared_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^inline xsi_shared_memory::~xsi_shared_memory() $/;"	f	class:boost::interprocess::xsi_shared_memory	signature:()
boost::interprocess::xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^class xsi_shared_memory_device$/;"	c	namespace:boost::interprocess
boost::interprocess::xsi_shared_memory_device::get_mapping_handle	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:() const
boost::interprocess::xsi_shared_memory_device::get_mapping_handle	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline mapping_handle_t xsi_shared_memory_device::get_mapping_handle() const$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:() const
boost::interprocess::xsi_shared_memory_device::get_mode	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:() const
boost::interprocess::xsi_shared_memory_device::get_mode	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline mode_t xsi_shared_memory_device::get_mode() const$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:() const
boost::interprocess::xsi_shared_memory_device::get_name	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   const char *get_name() const;$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:() const
boost::interprocess::xsi_shared_memory_device::get_name	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline const char *xsi_shared_memory_device::get_name() const$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:() const
boost::interprocess::xsi_shared_memory_device::get_shmid	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   int get_shmid() const;$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:() const
boost::interprocess::xsi_shared_memory_device::info_constants_t	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   struct info_constants_t$/;"	s	class:boost::interprocess::xsi_shared_memory_device	access:private
boost::interprocess::xsi_shared_memory_device::info_constants_t::FirstID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      static const std::size_t FirstID = 2;$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_constants_t	access:public
boost::interprocess::xsi_shared_memory_device::info_constants_t::FirstID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^const std::size_t xsi_shared_memory_device::info_constants_t<Dummy>::FirstID;$/;"	m	class:boost::interprocess::xsi_shared_memory_device::info_constants_t
boost::interprocess::xsi_shared_memory_device::info_constants_t::LastID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      static const std::size_t LastID  = 256;$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_constants_t	access:public
boost::interprocess::xsi_shared_memory_device::info_constants_t::LastID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^const std::size_t xsi_shared_memory_device::info_constants_t<Dummy>::LastID;$/;"	m	class:boost::interprocess::xsi_shared_memory_device::info_constants_t
boost::interprocess::xsi_shared_memory_device::info_constants_t::MaxName	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      static const std::size_t MaxName = 32;$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_constants_t	access:public
boost::interprocess::xsi_shared_memory_device::info_constants_t::MaxName	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^const std::size_t xsi_shared_memory_device::info_constants_t<Dummy>::MaxName;$/;"	m	class:boost::interprocess::xsi_shared_memory_device::info_constants_t
boost::interprocess::xsi_shared_memory_device::info_constants_t::NumID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      static const std::size_t NumID   = LastID - FirstID;$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_constants_t	access:public
boost::interprocess::xsi_shared_memory_device::info_constants_t::NumID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^const std::size_t xsi_shared_memory_device::info_constants_t<Dummy>::NumID;$/;"	m	class:boost::interprocess::xsi_shared_memory_device::info_constants_t
boost::interprocess::xsi_shared_memory_device::info_t	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   struct info_t$/;"	s	class:boost::interprocess::xsi_shared_memory_device	access:private
boost::interprocess::xsi_shared_memory_device::info_t::names	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      } names[info_constants_t<0>::NumID];$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_t	typeref:struct:boost::interprocess::xsi_shared_memory_device::info_t::names_t	access:public
boost::interprocess::xsi_shared_memory_device::info_t::names_t	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      struct names_t$/;"	s	struct:boost::interprocess::xsi_shared_memory_device::info_t	access:public
boost::interprocess::xsi_shared_memory_device::info_t::names_t::buf	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^         char buf[info_constants_t<0>::MaxName];$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_t::names_t	access:public
boost::interprocess::xsi_shared_memory_device::m_mode	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   mode_t            m_mode;$/;"	m	class:boost::interprocess::xsi_shared_memory_device	access:private
boost::interprocess::xsi_shared_memory_device::m_name	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   std::string       m_name;$/;"	m	class:boost::interprocess::xsi_shared_memory_device	access:private
boost::interprocess::xsi_shared_memory_device::m_shm	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory m_shm;$/;"	m	class:boost::interprocess::xsi_shared_memory_device	access:private
boost::interprocess::xsi_shared_memory_device::operator =	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device &operator=(xsi_shared_memory_device &);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:private	signature:(xsi_shared_memory_device &)
boost::interprocess::xsi_shared_memory_device::priv_obtain_index	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   static void priv_obtain_index(mapped_region &m, xsi_named_mutex &m, std::string &path);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:private	signature:(mapped_region &m, xsi_named_mutex &m, std::string &path)
boost::interprocess::xsi_shared_memory_device::priv_obtain_index	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline void xsi_shared_memory_device::priv_obtain_index$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(mapped_region &reg, xsi_named_mutex &mut, std::string &path)
boost::interprocess::xsi_shared_memory_device::priv_open_or_create_name_id	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   bool priv_open_or_create_name_id( detail::create_enum_t type$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:private	signature:( detail::create_enum_t type , const char *shmname , boost::uint8_t id , mode_t mode , std::size_t size)
boost::interprocess::xsi_shared_memory_device::priv_open_or_create_name_id	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline bool xsi_shared_memory_device::priv_open_or_create_name_id$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(detail::create_enum_t type, const char *filepath, mode_t mode, std::size_t size)
boost::interprocess::xsi_shared_memory_device::priv_open_or_create_name_only	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   bool priv_open_or_create_name_only( detail::create_enum_t type$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:private	signature:( detail::create_enum_t type , const char *shmname , mode_t mode , std::size_t size)
boost::interprocess::xsi_shared_memory_device::priv_open_or_create_name_only	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline bool xsi_shared_memory_device::priv_open_or_create_name_only$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(detail::create_enum_t type, const char *shmname, mode_t mode, std::size_t size)
boost::interprocess::xsi_shared_memory_device::priv_remove_dead_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   static bool priv_remove_dead_memory(info_t *info, const char *path);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:private	signature:(info_t *info, const char *path)
boost::interprocess::xsi_shared_memory_device::priv_remove_dead_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline bool xsi_shared_memory_device::priv_remove_dead_memory$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(xsi_shared_memory_device::info_t *info, const char *path)
boost::interprocess::xsi_shared_memory_device::remove	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   static bool remove(const char *shmname);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(const char *shmname)
boost::interprocess::xsi_shared_memory_device::remove	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   static bool remove(int shmid);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(int shmid)
boost::interprocess::xsi_shared_memory_device::remove	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline bool xsi_shared_memory_device::remove(const char *shmname)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(const char *shmname)
boost::interprocess::xsi_shared_memory_device::remove	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline bool xsi_shared_memory_device::remove(int shmid)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(int shmid)
boost::interprocess::xsi_shared_memory_device::swap	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   void swap(xsi_shared_memory_device &other);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(xsi_shared_memory_device &other)
boost::interprocess::xsi_shared_memory_device::swap	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline void xsi_shared_memory_device::swap(xsi_shared_memory_device &other)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(xsi_shared_memory_device &other)
boost::interprocess::xsi_shared_memory_device::xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device();$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:()
boost::interprocess::xsi_shared_memory_device::xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(create_only_t, const char *filepath, boost::uint8_t id, mode_t mode, std::size_t size)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(create_only_t, const char *filepath, boost::uint8_t id, mode_t mode, std::size_t size)
boost::interprocess::xsi_shared_memory_device::xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(create_only_t, const char *name, mode_t mode, std::size_t size)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(create_only_t, const char *name, mode_t mode, std::size_t size)
boost::interprocess::xsi_shared_memory_device::xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(open_only_t, const char *filepath, boost::uint8_t id, mode_t mode)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(open_only_t, const char *filepath, boost::uint8_t id, mode_t mode)
boost::interprocess::xsi_shared_memory_device::xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(open_only_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(open_only_t, const char *name, mode_t mode)
boost::interprocess::xsi_shared_memory_device::xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(open_or_create_t, const char *filepath, boost::uint8_t id, mode_t mode, std::size_t size)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(open_or_create_t, const char *filepath, boost::uint8_t id, mode_t mode, std::size_t size)
boost::interprocess::xsi_shared_memory_device::xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(open_or_create_t, const char *name, mode_t mode, std::size_t size)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(open_or_create_t, const char *name, mode_t mode, std::size_t size)
boost::interprocess::xsi_shared_memory_device::xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(xsi_shared_memory_device &);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:private	signature:(xsi_shared_memory_device &)
boost::interprocess::xsi_shared_memory_device::xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline xsi_shared_memory_device::xsi_shared_memory_device()$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:()
boost::interprocess::xsi_shared_memory_device::~xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   ~xsi_shared_memory_device();$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:()
boost::interprocess::xsi_shared_memory_device::~xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline xsi_shared_memory_device::~xsi_shared_memory_device() $/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:()
boost::interprocess::zero_memory	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type zero_memory        = boost::container::zero_memory;$/;"	m	namespace:boost::interprocess
boost::intrusive	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^namespace intrusive{ $/;"	n	namespace:boost
boost::intrusive	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^namespace intrusive{$/;"	n	namespace:boost
boost::intrusive	/usr/include/boost/interprocess/offset_ptr.hpp	/^namespace intrusive {$/;"	n	namespace:boost
boost::intrusive::max_pointer_plus_bits	/usr/include/boost/interprocess/offset_ptr.hpp	/^struct max_pointer_plus_bits<boost::interprocess::offset_ptr<void>, Alignment>$/;"	s	namespace:boost::intrusive
boost::intrusive::max_pointer_plus_bits::value	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static const std::size_t value = ::boost::interprocess::detail::ls_zeros<Alignment>::value - 1;$/;"	m	struct:boost::intrusive::max_pointer_plus_bits	access:public
boost::intrusive::pointer_plus_bits	/usr/include/boost/interprocess/offset_ptr.hpp	/^struct pointer_plus_bits<boost::interprocess::offset_ptr<T>, NumBits>$/;"	s	namespace:boost::intrusive
boost::intrusive::pointer_plus_bits::get_bits	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static std::size_t get_bits(const pointer &n)$/;"	f	struct:boost::intrusive::pointer_plus_bits	access:public	signature:(const pointer &n)
boost::intrusive::pointer_plus_bits::get_pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static pointer get_pointer(const pointer &n)$/;"	f	struct:boost::intrusive::pointer_plus_bits	access:public	signature:(const pointer &n)
boost::intrusive::pointer_plus_bits::Mask	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static const std::size_t Mask = ((std::size_t(1) << NumBits)-1)<<1u; $/;"	m	struct:boost::intrusive::pointer_plus_bits	access:public
boost::intrusive::pointer_plus_bits::pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef boost::interprocess::offset_ptr<T>         pointer;$/;"	t	struct:boost::intrusive::pointer_plus_bits	access:public
boost::intrusive::pointer_plus_bits::set_bits	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static void set_bits(pointer &n, std::size_t b)$/;"	f	struct:boost::intrusive::pointer_plus_bits	access:public	signature:(pointer &n, std::size_t b)
boost::intrusive::pointer_plus_bits::set_pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static void set_pointer(pointer &n, pointer p)$/;"	f	struct:boost::intrusive::pointer_plus_bits	access:public	signature:(pointer &n, pointer p)
boost::posix_time	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^namespace posix_time$/;"	n	namespace:boost
boost::posix_time	/usr/include/boost/interprocess/sync/lock_options.hpp	/^namespace posix_time$/;"	n	namespace:boost
boost::posix_time	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^namespace posix_time$/;"	n	namespace:boost
BOOST_CONTAINERS_ADVANCED_INSERT_INT_HPP	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	12;"	d
BOOST_CONTAINERS_ALLOCATION_TYPE_HPP	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	12;"	d
BOOST_CONTAINERS_AUX_PARAM_DEFINE	/usr/include/boost/interprocess/containers/container/detail/preprocessor.hpp	74;"	d
BOOST_CONTAINERS_AUX_PARAM_DEFINE	/usr/include/boost/interprocess/containers/container/detail/preprocessor.hpp	78;"	d
BOOST_CONTAINERS_AUX_PARAM_INC	/usr/include/boost/interprocess/containers/container/detail/preprocessor.hpp	69;"	d
BOOST_CONTAINERS_AUX_PARAM_INIT	/usr/include/boost/interprocess/containers/container/detail/preprocessor.hpp	60;"	d
BOOST_CONTAINERS_AUX_PARAM_INIT	/usr/include/boost/interprocess/containers/container/detail/preprocessor.hpp	64;"	d
BOOST_CONTAINERS_CONTAINERS_DETAIL_PAIR_HPP	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	14;"	d
BOOST_CONTAINERS_CONTAINERS_FWD_HPP	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	12;"	d
BOOST_CONTAINERS_CONTAINERS_VECTOR_HPP	/usr/include/boost/interprocess/containers/container/vector.hpp	40;"	d
BOOST_CONTAINERS_CONTAINER_DETAIL_CONFIG_INCLUDED	/usr/include/boost/interprocess/containers/container/detail/config_begin.hpp	11;"	d
BOOST_CONTAINERS_CONTAINER_DETAIL_MPL_HPP	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	14;"	d
BOOST_CONTAINERS_CONTAINER_DETAIL_TYPE_TRAITS_HPP	/usr/include/boost/interprocess/containers/container/detail/type_traits.hpp	16;"	d
BOOST_CONTAINERS_DEQUE_HPP	/usr/include/boost/interprocess/containers/container/deque.hpp	45;"	d
BOOST_CONTAINERS_DESTROYERS_HPP	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	14;"	d
BOOST_CONTAINERS_DETAIL_ALGORITHMS_HPP	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	14;"	d
BOOST_CONTAINERS_DETAIL_CRT_SECURE_NO_DEPRECATE	/usr/include/boost/interprocess/containers/container/detail/config_begin.hpp	17;"	d
BOOST_CONTAINERS_DETAIL_CRT_SECURE_NO_DEPRECATE	/usr/include/boost/interprocess/containers/container/detail/config_end.hpp	13;"	d
BOOST_CONTAINERS_DETAIL_ITERATORS_HPP	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	15;"	d
BOOST_CONTAINERS_DETAIL_MULTIALLOCATION_CHAIN_HPP	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	12;"	d
BOOST_CONTAINERS_DETAIL_NODE_ALLOC_HPP_	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	12;"	d
BOOST_CONTAINERS_DETAIL_PREPROCESSOR_HPP	/usr/include/boost/interprocess/containers/container/detail/preprocessor.hpp	12;"	d
BOOST_CONTAINERS_DETAIL_TRANSFORM_ITERATORS_HPP	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	15;"	d
BOOST_CONTAINERS_DETAIL_UTILITIES_HPP	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	12;"	d
BOOST_CONTAINERS_DETAIL_VALUE_INIT_HPP	/usr/include/boost/interprocess/containers/container/detail/value_init.hpp	14;"	d
BOOST_CONTAINERS_DETAIL_VARIADIC_TEMPLATES_TOOLS_HPP	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	12;"	d
BOOST_CONTAINERS_DETAIL_VERSION_TYPE_HPP	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	17;"	d
BOOST_CONTAINERS_DETAIL_WORKAROUND_HPP	/usr/include/boost/interprocess/containers/container/detail/workaround.hpp	12;"	d
BOOST_CONTAINERS_FLAT_MAP_HPP	/usr/include/boost/interprocess/containers/container/flat_map.hpp	12;"	d
BOOST_CONTAINERS_FLAT_SET_HPP	/usr/include/boost/interprocess/containers/container/flat_set.hpp	12;"	d
BOOST_CONTAINERS_FLAT_TREE_HPP	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	29;"	d
BOOST_CONTAINERS_LIST_HPP_	/usr/include/boost/interprocess/containers/container/list.hpp	44;"	d
BOOST_CONTAINERS_MAP_HPP	/usr/include/boost/interprocess/containers/container/map.hpp	44;"	d
BOOST_CONTAINERS_MAX_CONSTRUCTOR_PARAMETERS	/usr/include/boost/interprocess/containers/container/detail/preprocessor.hpp	31;"	d
BOOST_CONTAINERS_PARAM	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   pair( BOOST_CONTAINERS_PARAM(U, u)$/;"	p	struct:boost::container::containers_detail::pair	access:public	signature:(U, u)
BOOST_CONTAINERS_PARAM	/usr/include/boost/interprocess/containers/container/detail/preprocessor.hpp	50;"	d
BOOST_CONTAINERS_PARAM	/usr/include/boost/interprocess/containers/container/detail/preprocessor.hpp	54;"	d
BOOST_CONTAINERS_PERFECT_FORWARDING	/usr/include/boost/interprocess/containers/container/detail/workaround.hpp	18;"	d
BOOST_CONTAINERS_PP_MEMBER_FORWARD	/usr/include/boost/interprocess/containers/container/detail/preprocessor.hpp	87;"	d
BOOST_CONTAINERS_PP_MEMBER_IT_FORWARD	/usr/include/boost/interprocess/containers/container/detail/preprocessor.hpp	91;"	d
BOOST_CONTAINERS_PP_PARAM_FORWARD	/usr/include/boost/interprocess/containers/container/detail/preprocessor.hpp	83;"	d
BOOST_CONTAINERS_PP_PARAM_LIST	/usr/include/boost/interprocess/containers/container/detail/preprocessor.hpp	40;"	d
BOOST_CONTAINERS_PP_PARAM_LIST	/usr/include/boost/interprocess/containers/container/detail/preprocessor.hpp	44;"	d
BOOST_CONTAINERS_SET_HPP	/usr/include/boost/interprocess/containers/container/set.hpp	44;"	d
BOOST_CONTAINERS_SLIST_HPP	/usr/include/boost/interprocess/containers/container/slist.hpp	44;"	d
BOOST_CONTAINERS_STRING_HPP	/usr/include/boost/interprocess/containers/container/string.hpp	28;"	d
BOOST_CONTAINERS_TREE_HPP	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	43;"	d
BOOST_CONTAINER_ADAPTIVE_NODE_POOL_CHECK_INVARIANTS	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	438;"	d
BOOST_CONTAINER_DETAIL_ADAPTIVE_NODE_POOL_IMPL_HPP	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	12;"	d
BOOST_CONTAINER_DETAIL_MATH_FUNCTIONS_HPP	/usr/include/boost/interprocess/containers/container/detail/math_functions.hpp	17;"	d
BOOST_CONTAINER_DETAIL_NODE_POOL_COMMON_HPP	/usr/include/boost/interprocess/containers/container/detail/pool_common.hpp	12;"	d
BOOST_CONTAINER_DETAIL_NODE_POOL_IMPL_HPP	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	12;"	d
BOOST_CONTAINER_STABLE_VECTOR_HPP	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	19;"	d
BOOST_COPYABLE_AND_MOVABLE	/usr/include/boost/interprocess/detail/move.hpp	247;"	d
BOOST_COPYABLE_AND_MOVABLE	/usr/include/boost/interprocess/detail/move.hpp	261;"	d
BOOST_INTERPROCESS_ADAPTIVE_POOL_HPP	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	12;"	d
BOOST_INTERPROCESS_ALLOCATOR_DETAIL_ALLOCATOR_COMMON_HPP	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	12;"	d
BOOST_INTERPROCESS_ALLOCATOR_HPP	/usr/include/boost/interprocess/allocators/allocator.hpp	12;"	d
BOOST_INTERPROCESS_ANONYMOUS_SHARED_MEMORY_HPP	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	12;"	d
BOOST_INTERPROCESS_AUX_PARAM_DEFINE	/usr/include/boost/interprocess/detail/preprocessor.hpp	74;"	d
BOOST_INTERPROCESS_AUX_PARAM_DEFINE	/usr/include/boost/interprocess/detail/preprocessor.hpp	78;"	d
BOOST_INTERPROCESS_AUX_PARAM_INC	/usr/include/boost/interprocess/detail/preprocessor.hpp	69;"	d
BOOST_INTERPROCESS_AUX_PARAM_INIT	/usr/include/boost/interprocess/detail/preprocessor.hpp	60;"	d
BOOST_INTERPROCESS_AUX_PARAM_INIT	/usr/include/boost/interprocess/detail/preprocessor.hpp	64;"	d
BOOST_INTERPROCESS_BAD_WEAK_PTR_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/detail/bad_weak_ptr.hpp	14;"	d
BOOST_INTERPROCESS_BARRIER_HPP	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	27;"	d
BOOST_INTERPROCESS_BUFFERSTREAM_HPP	/usr/include/boost/interprocess/streams/bufferstream.hpp	36;"	d
BOOST_INTERPROCESS_CACHED_ADAPTIVE_POOL_HPP	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	12;"	d
BOOST_INTERPROCESS_CACHED_NODE_ALLOCATOR_HPP	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	12;"	d
BOOST_INTERPROCESS_CAST_TAGS_HPP	/usr/include/boost/interprocess/detail/cast_tags.hpp	12;"	d
BOOST_INTERPROCESS_CATCH_CONST_RLVALUE	/usr/include/boost/interprocess/detail/move.hpp	218;"	d
BOOST_INTERPROCESS_CONDITION_HPP	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	12;"	d
BOOST_INTERPROCESS_CONFIG_INCLUDED	/usr/include/boost/interprocess/detail/config_begin.hpp	11;"	d
BOOST_INTERPROCESS_CONTAINERS_ALLOCATION_TYPE_HPP	/usr/include/boost/interprocess/containers/allocation_type.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_CONTAINERS_FWD_HPP	/usr/include/boost/interprocess/containers/containers_fwd.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_DEQUE_HPP	/usr/include/boost/interprocess/containers/deque.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_FLAT_MAP_HPP	/usr/include/boost/interprocess/containers/flat_map.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_FLAT_SET_HPP	/usr/include/boost/interprocess/containers/flat_set.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_LIST_HPP	/usr/include/boost/interprocess/containers/list.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_MAP_HPP	/usr/include/boost/interprocess/containers/map.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_PAIR_HPP	/usr/include/boost/interprocess/containers/pair.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_SET_HPP	/usr/include/boost/interprocess/containers/set.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_SLIST_HPP	/usr/include/boost/interprocess/containers/slist.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_STABLE_VECTOR_HPP	/usr/include/boost/interprocess/containers/stable_vector.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_STRING_HPP	/usr/include/boost/interprocess/containers/string.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_VECTOR_HPP	/usr/include/boost/interprocess/containers/vector.hpp	12;"	d
BOOST_INTERPROCESS_CONTAINERS_VERSION_TYPE_HPP	/usr/include/boost/interprocess/containers/version_type.hpp	12;"	d
BOOST_INTERPROCESS_COPY_ASSIGN_REF	/usr/include/boost/interprocess/detail/move.hpp	186;"	d
BOOST_INTERPROCESS_COPY_ASSIGN_REF	/usr/include/boost/interprocess/detail/move.hpp	200;"	d
BOOST_INTERPROCESS_COPY_ASSIGN_REF_2_TEMPL_ARGS	/usr/include/boost/interprocess/detail/move.hpp	190;"	d
BOOST_INTERPROCESS_COPY_ASSIGN_REF_2_TEMPL_ARGS	/usr/include/boost/interprocess/detail/move.hpp	204;"	d
BOOST_INTERPROCESS_COPY_ASSIGN_REF_3_TEMPL_ARGS	/usr/include/boost/interprocess/detail/move.hpp	194;"	d
BOOST_INTERPROCESS_COPY_ASSIGN_REF_3_TEMPL_ARGS	/usr/include/boost/interprocess/detail/move.hpp	208;"	d
BOOST_INTERPROCESS_CREATION_TAGS_HPP	/usr/include/boost/interprocess/creation_tags.hpp	12;"	d
BOOST_INTERPROCESS_CRT_SECURE_NO_DEPRECATE	/usr/include/boost/interprocess/detail/config_begin.hpp	17;"	d
BOOST_INTERPROCESS_CRT_SECURE_NO_DEPRECATE	/usr/include/boost/interprocess/detail/config_end.hpp	13;"	d
BOOST_INTERPROCESS_DELETER_HPP	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	14;"	d
BOOST_INTERPROCESS_DETAIL_ADAPTIVE_NODE_POOL_HPP	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_ATOMIC_HPP	/usr/include/boost/interprocess/detail/atomic.hpp	15;"	d
BOOST_INTERPROCESS_DETAIL_FILE_WRAPPER_HPP	/usr/include/boost/interprocess/detail/file_wrapper.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_INTERPROCESS_TESTER_HPP	/usr/include/boost/interprocess/detail/interprocess_tester.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_MANAGED_MEMORY_IMPL_HPP	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_MATH_FUNCTIONS_HPP	/usr/include/boost/interprocess/detail/math_functions.hpp	17;"	d
BOOST_INTERPROCESS_DETAIL_MEM_ALGO_COMMON_HPP	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_MIN_MAX_HPP	/usr/include/boost/interprocess/detail/min_max.hpp	14;"	d
BOOST_INTERPROCESS_DETAIL_MPL_HPP	/usr/include/boost/interprocess/detail/mpl.hpp	14;"	d
BOOST_INTERPROCESS_DETAIL_NODE_POOL_HPP	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_NODE_TOOLS_HPP	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_OS_FILE_FUNCTIONS_HPP	/usr/include/boost/interprocess/detail/os_file_functions.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_OS_THREAD_FUNCTIONS_HPP	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_POINTER_TYPE_HPP	/usr/include/boost/interprocess/detail/pointer_type.hpp	15;"	d
BOOST_INTERPROCESS_DETAIL_PREPROCESSOR_HPP	/usr/include/boost/interprocess/detail/preprocessor.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_PTIME_TO_TIMESPEC_HPP	/usr/include/boost/interprocess/sync/posix/ptime_to_timespec.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_SHARED_COUNT_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	15;"	d
BOOST_INTERPROCESS_DETAIL_SP_COUNTED_BASE_ATOMIC_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	2;"	d
BOOST_INTERPROCESS_DETAIL_SP_COUNTED_BASE_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base.hpp	13;"	d
BOOST_INTERPROCESS_DETAIL_SP_COUNTED_IMPL_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	2;"	d
BOOST_INTERPROCESS_DETAIL_TMP_DIR_HELPERS_HPP	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_TRANSFORM_ITERATORS_HPP	/usr/include/boost/interprocess/detail/transform_iterator.hpp	15;"	d
BOOST_INTERPROCESS_DETAIL_TYPE_TRAITS_HPP	/usr/include/boost/interprocess/detail/type_traits.hpp	16;"	d
BOOST_INTERPROCESS_DETAIL_UTILITIES_HPP	/usr/include/boost/interprocess/detail/utilities.hpp	15;"	d
BOOST_INTERPROCESS_DETAIL_VARIADIC_TEMPLATES_TOOLS_HPP	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	12;"	d
BOOST_INTERPROCESS_DETAIL_WORKAROUND_HPP	/usr/include/boost/interprocess/detail/workaround.hpp	12;"	d
BOOST_INTERPROCESS_ENABLE_SHARED_FROM_THIS_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	15;"	d
BOOST_INTERPROCESS_ERRORS_HPP	/usr/include/boost/interprocess/errors.hpp	25;"	d
BOOST_INTERPROCESS_EXCEPTIONS_HPP	/usr/include/boost/interprocess/exceptions.hpp	12;"	d
BOOST_INTERPROCESS_FILESYSTEM_BASED_POSIX_SEMAPHORES	/usr/include/boost/interprocess/detail/workaround.hpp	108;"	d
BOOST_INTERPROCESS_FILESYSTEM_BASED_POSIX_SHARED_MEMORY	/usr/include/boost/interprocess/detail/workaround.hpp	102;"	d
BOOST_INTERPROCESS_FILE_LOCK_HPP	/usr/include/boost/interprocess/sync/file_lock.hpp	12;"	d
BOOST_INTERPROCESS_FILE_MAPPING_HPP	/usr/include/boost/interprocess/file_mapping.hpp	12;"	d
BOOST_INTERPROCESS_FLAT_MAP_INDEX_HPP	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	11;"	d
BOOST_INTERPROCESS_FWD_HPP	/usr/include/boost/interprocess/interprocess_fwd.hpp	12;"	d
BOOST_INTERPROCESS_FWD_REF	/usr/include/boost/interprocess/detail/move.hpp	214;"	d
BOOST_INTERPROCESS_HAS_BSD_KERNEL_BOOTTIME	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	28;"	d
BOOST_INTERPROCESS_HAS_KERNEL_BOOTTIME	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	23;"	d
BOOST_INTERPROCESS_HAS_KERNEL_BOOTTIME	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	29;"	d
BOOST_INTERPROCESS_HAS_WINDOWS_KERNEL_BOOTTIME	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	22;"	d
BOOST_INTERPROCESS_INTERMODULE_SINGLETON_HPP	/usr/include/boost/interprocess/detail/intermodule_singleton.hpp	20;"	d
BOOST_INTERPROCESS_INTERSEGMENT_PTR_HPP	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	12;"	d
BOOST_INTERPROCESS_INTRUSIVE_PTR_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	15;"	d
BOOST_INTERPROCESS_IN_PLACE_INTERFACE_HPP	/usr/include/boost/interprocess/detail/in_place_interface.hpp	12;"	d
BOOST_INTERPROCESS_ISET_INDEX_HPP	/usr/include/boost/interprocess/indexes/iset_index.hpp	12;"	d
BOOST_INTERPROCESS_IUNORDERED_SET_INDEX_HPP	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	12;"	d
BOOST_INTERPROCESS_LOCK_OPTIONS_HPP	/usr/include/boost/interprocess/sync/lock_options.hpp	12;"	d
BOOST_INTERPROCESS_MANAGED_EXTERNAL_BUFFER_HPP	/usr/include/boost/interprocess/managed_external_buffer.hpp	12;"	d
BOOST_INTERPROCESS_MANAGED_HEAP_MEMORY_HPP	/usr/include/boost/interprocess/managed_heap_memory.hpp	12;"	d
BOOST_INTERPROCESS_MANAGED_MAPPED_FILE_HPP	/usr/include/boost/interprocess/managed_mapped_file.hpp	12;"	d
BOOST_INTERPROCESS_MANAGED_MULTI_SHARED_MEMORY_HPP	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	12;"	d
BOOST_INTERPROCESS_MANAGED_OPEN_OR_CREATE_IMPL	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	12;"	d
BOOST_INTERPROCESS_MANAGED_SHARED_MEMORY_HPP	/usr/include/boost/interprocess/managed_shared_memory.hpp	12;"	d
BOOST_INTERPROCESS_MANAGED_WINDOWS_SHARED_MEMORY_HPP	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	12;"	d
BOOST_INTERPROCESS_MAPPED_REGION_HPP	/usr/include/boost/interprocess/mapped_region.hpp	12;"	d
BOOST_INTERPROCESS_MAP_INDEX_HPP	/usr/include/boost/interprocess/indexes/map_index.hpp	12;"	d
BOOST_INTERPROCESS_MAX_CONSTRUCTOR_PARAMETERS	/usr/include/boost/interprocess/detail/preprocessor.hpp	31;"	d
BOOST_INTERPROCESS_MEM_ALGO_DETAIL_SIMPLE_SEQ_FIT_IMPL_HPP	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	12;"	d
BOOST_INTERPROCESS_MEM_ALGO_DETAIL_SIMPLE_SEQ_FIT_IMPL_HPP	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	12;"	d
BOOST_INTERPROCESS_MEM_ALGO_RBTREE_BEST_FIT_HPP	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	12;"	d
BOOST_INTERPROCESS_MESSAGE_QUEUE_HPP	/usr/include/boost/interprocess/ipc/message_queue.hpp	12;"	d
BOOST_INTERPROCESS_MOVABLE_BUT_NOT_COPYABLE	/usr/include/boost/interprocess/detail/move.hpp	227;"	d
BOOST_INTERPROCESS_MULTI_SEGMENT_SERVICES_HPP	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	12;"	d
BOOST_INTERPROCESS_MULTI_SIMPLE_SEQ_FIT_HPP	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	12;"	d
BOOST_INTERPROCESS_MUTEX_FAMILY_HPP	/usr/include/boost/interprocess/sync/mutex_family.hpp	12;"	d
BOOST_INTERPROCESS_MUTEX_HPP	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	28;"	d
BOOST_INTERPROCESS_NAMED_CONDITION_HPP	/usr/include/boost/interprocess/sync/named_condition.hpp	12;"	d
BOOST_INTERPROCESS_NAMED_MUTEX_HPP	/usr/include/boost/interprocess/sync/named_mutex.hpp	12;"	d
BOOST_INTERPROCESS_NAMED_MUTEX_USES_POSIX_SEMAPHORES	/usr/include/boost/interprocess/detail/workaround.hpp	127;"	d
BOOST_INTERPROCESS_NAMED_MUTEX_USES_POSIX_SEMAPHORES	/usr/include/boost/interprocess/detail/workaround.hpp	133;"	d
BOOST_INTERPROCESS_NAMED_PROXY_HPP	/usr/include/boost/interprocess/detail/named_proxy.hpp	12;"	d
BOOST_INTERPROCESS_NAMED_RECURSIVE_MUTEX_HPP	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	12;"	d
BOOST_INTERPROCESS_NAMED_SEMAPHORE_HPP	/usr/include/boost/interprocess/sync/named_semaphore.hpp	12;"	d
BOOST_INTERPROCESS_NAMED_SEMAPHORE_USES_POSIX_SEMAPHORES	/usr/include/boost/interprocess/detail/workaround.hpp	134;"	d
BOOST_INTERPROCESS_named_upgradable_mutex_HPP	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	12;"	d
BOOST_INTERPROCESS_NODE_ALLOCATOR_HPP	/usr/include/boost/interprocess/allocators/node_allocator.hpp	12;"	d
BOOST_INTERPROCESS_NULL_INDEX_HPP	/usr/include/boost/interprocess/indexes/null_index.hpp	11;"	d
BOOST_INTERPROCESS_NULL_MUTEX_HPP	/usr/include/boost/interprocess/sync/null_mutex.hpp	12;"	d
BOOST_INTERPROCESS_PARAM	/usr/include/boost/interprocess/detail/preprocessor.hpp	50;"	d
BOOST_INTERPROCESS_PARAM	/usr/include/boost/interprocess/detail/preprocessor.hpp	54;"	d
BOOST_INTERPROCESS_PERFECT_FORWARDING	/usr/include/boost/interprocess/detail/workaround.hpp	120;"	d
BOOST_INTERPROCESS_POSIX_BARRIERS	/usr/include/boost/interprocess/detail/workaround.hpp	41;"	d
BOOST_INTERPROCESS_POSIX_NAMED_SEMAPHORES	/usr/include/boost/interprocess/detail/workaround.hpp	45;"	d
BOOST_INTERPROCESS_POSIX_PROCESS_SHARED	/usr/include/boost/interprocess/detail/workaround.hpp	36;"	d
BOOST_INTERPROCESS_POSIX_RECURSIVE_MUTEXES	/usr/include/boost/interprocess/detail/workaround.hpp	113;"	d
BOOST_INTERPROCESS_POSIX_SEMAPHORES_NO_UNLINK	/usr/include/boost/interprocess/detail/workaround.hpp	47;"	d
BOOST_INTERPROCESS_POSIX_SEMAPHORE_WRAPPER_HPP	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	12;"	d
BOOST_INTERPROCESS_POSIX_SEM_FAILED	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	23;"	d
BOOST_INTERPROCESS_POSIX_SEM_FAILED	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	25;"	d
BOOST_INTERPROCESS_POSIX_SEM_FAILED	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	272;"	d
BOOST_INTERPROCESS_POSIX_SHARED_MEMORY_OBJECTS	/usr/include/boost/interprocess/detail/workaround.hpp	71;"	d
BOOST_INTERPROCESS_POSIX_SHARED_MEMORY_OBJECTS	/usr/include/boost/interprocess/detail/workaround.hpp	76;"	d
BOOST_INTERPROCESS_POSIX_TIMEOUTS	/usr/include/boost/interprocess/detail/workaround.hpp	92;"	d
BOOST_INTERPROCESS_POSIX_TIMES_WRK_HPP	/usr/include/boost/interprocess/detail/posix_time_types_wrk.hpp	12;"	d
BOOST_INTERPROCESS_PP_MEMBER_FORWARD	/usr/include/boost/interprocess/detail/preprocessor.hpp	87;"	d
BOOST_INTERPROCESS_PP_MEMBER_IT_FORWARD	/usr/include/boost/interprocess/detail/preprocessor.hpp	91;"	d
BOOST_INTERPROCESS_PP_PARAM_FORWARD	/usr/include/boost/interprocess/detail/preprocessor.hpp	83;"	d
BOOST_INTERPROCESS_PP_PARAM_LIST	/usr/include/boost/interprocess/detail/preprocessor.hpp	40;"	d
BOOST_INTERPROCESS_PP_PARAM_LIST	/usr/include/boost/interprocess/detail/preprocessor.hpp	44;"	d
BOOST_INTERPROCESS_PRIVATE_ADAPTIVE_POOL_HPP	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	12;"	d
BOOST_INTERPROCESS_PRIVATE_NODE_ALLOCATOR_HPP	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	12;"	d
BOOST_INTERPROCESS_PTHREAD_HELPERS_HPP	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	12;"	d
BOOST_INTERPROCESS_PTIME_WRK_HPP	/usr/include/boost/interprocess/detail/ptime_wrk.hpp	12;"	d
BOOST_INTERPROCESS_RECURSIVE_MUTEX_HPP	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	28;"	d
BOOST_INTERPROCESS_RV_REF	/usr/include/boost/interprocess/detail/move.hpp	172;"	d
BOOST_INTERPROCESS_RV_REF_2_TEMPL_ARGS	/usr/include/boost/interprocess/detail/move.hpp	176;"	d
BOOST_INTERPROCESS_RV_REF_3_TEMPL_ARGS	/usr/include/boost/interprocess/detail/move.hpp	180;"	d
BOOST_INTERPROCESS_SCOPED_LOCK_HPP	/usr/include/boost/interprocess/sync/scoped_lock.hpp	17;"	d
BOOST_INTERPROCESS_SCOPED_PTR_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	16;"	d
BOOST_INTERPROCESS_SEGMENT_MANAGER_BASE_HPP	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	12;"	d
BOOST_INTERPROCESS_SEGMENT_MANAGER_HPP	/usr/include/boost/interprocess/segment_manager.hpp	12;"	d
BOOST_INTERPROCESS_SEMAPHORE_HPP	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	12;"	d
BOOST_INTERPROCESS_SHARABLE_LOCK_HPP	/usr/include/boost/interprocess/sync/sharable_lock.hpp	17;"	d
BOOST_INTERPROCESS_SHARED_MEMORY_OBJECT_HPP	/usr/include/boost/interprocess/shared_memory_object.hpp	12;"	d
BOOST_INTERPROCESS_SHARED_PTR_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	17;"	d
BOOST_INTERPROCESS_SIMPLE_SEQ_FIT_HPP	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	12;"	d
BOOST_INTERPROCESS_SYNC_NAMED_CREATION_FUNCTOR_HPP	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	12;"	d
BOOST_INTERPROCESS_SYNC_XSI_ADVANCED_XSI_SEMAPHORE_HPP	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	31;"	d
BOOST_INTERPROCESS_SYNC_XSI_SIMPLE_XSI_SEMAPHORE_HPP	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	2;"	d
BOOST_INTERPROCESS_UNIQUE_PTR_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	17;"	d
BOOST_INTERPROCESS_UNIX_64_BIT_OR_BIGGER_OFF_T	/usr/include/boost/interprocess/detail/workaround.hpp	61;"	d
BOOST_INTERPROCESS_UNORDERED_MAP_INDEX_HPP	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	12;"	d
BOOST_INTERPROCESS_UPGRADABLE_LOCK_HPP	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	17;"	d
BOOST_INTERPROCESS_UPGRADABLE_MUTEX_HPP	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	12;"	d
BOOST_INTERPROCESS_USE_GENERIC_EMULATION	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	104;"	d
BOOST_INTERPROCESS_USE_GENERIC_EMULATION	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	48;"	d
BOOST_INTERPROCESS_USE_GENERIC_EMULATION	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	168;"	d
BOOST_INTERPROCESS_USE_GENERIC_EMULATION	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	40;"	d
BOOST_INTERPROCESS_USE_GENERIC_EMULATION	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	126;"	d
BOOST_INTERPROCESS_USE_GENERIC_EMULATION	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	50;"	d
BOOST_INTERPROCESS_USE_GENERIC_EMULATION	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	125;"	d
BOOST_INTERPROCESS_USE_GENERIC_EMULATION	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	52;"	d
BOOST_INTERPROCESS_USE_GENERIC_EMULATION	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	108;"	d
BOOST_INTERPROCESS_USE_GENERIC_EMULATION	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	39;"	d
BOOST_INTERPROCESS_USE_POSIX	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	109;"	d
BOOST_INTERPROCESS_USE_POSIX	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	42;"	d
BOOST_INTERPROCESS_USE_POSIX	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	173;"	d
BOOST_INTERPROCESS_USE_POSIX	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	35;"	d
BOOST_INTERPROCESS_USE_POSIX	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	131;"	d
BOOST_INTERPROCESS_USE_POSIX	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	45;"	d
BOOST_INTERPROCESS_USE_POSIX	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	130;"	d
BOOST_INTERPROCESS_USE_POSIX	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	46;"	d
BOOST_INTERPROCESS_USE_POSIX	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	113;"	d
BOOST_INTERPROCESS_USE_POSIX	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	34;"	d
BOOST_INTERPROCESS_VECTORSTREAM_HPP	/usr/include/boost/interprocess/streams/vectorstream.hpp	37;"	d
BOOST_INTERPROCESS_WEAK_PTR_HPP_INCLUDED	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	16;"	d
BOOST_INTERPROCESS_WIN32_LEAN_AND_MEAN	/usr/include/boost/interprocess/detail/posix_time_types_wrk.hpp	19;"	d
BOOST_INTERPROCESS_WIN32_LEAN_AND_MEAN	/usr/include/boost/interprocess/detail/posix_time_types_wrk.hpp	38;"	d
BOOST_INTERPROCESS_WIN32_LEAN_AND_MEAN	/usr/include/boost/interprocess/detail/ptime_wrk.hpp	19;"	d
BOOST_INTERPROCESS_WIN32_LEAN_AND_MEAN	/usr/include/boost/interprocess/detail/ptime_wrk.hpp	28;"	d
BOOST_INTERPROCESS_WIN32_SYNC_PRIMITIVES_HPP	/usr/include/boost/interprocess/detail/win32_api.hpp	12;"	d
BOOST_INTERPROCESS_WINDOWS	/usr/include/boost/interprocess/detail/workaround.hpp	18;"	d
BOOST_INTERPROCESS_WINDOWS_SHARED_MEMORY_HPP	/usr/include/boost/interprocess/windows_shared_memory.hpp	12;"	d
BOOST_INTERPROCESS_XSI_SHARED_MEMORY_DEVICE_HPP	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	12;"	d
BOOST_INTERPROCESS_XSI_SHARED_MEMORY_HPP	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	12;"	d
BOOST_INTERPROCESS_XSI_SHARED_MEMORY_OBJECTS	/usr/include/boost/interprocess/detail/workaround.hpp	67;"	d
BOOST_INTERPROCESS_XSI_XSI_NAMED_MUTEX_HPP	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	12;"	d
BOOST_MOVE_HPP	/usr/include/boost/interprocess/detail/move.hpp	23;"	d
BOOST_OFFSET_PTR_HPP	/usr/include/boost/interprocess/offset_ptr.hpp	12;"	d
BOOST_PP_LOCAL_LIMITS	/usr/include/boost/interprocess/containers/container/deque.hpp	957;"	d
BOOST_PP_LOCAL_LIMITS	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	473;"	d
BOOST_PP_LOCAL_LIMITS	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	481;"	d
BOOST_PP_LOCAL_LIMITS	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	312;"	d
BOOST_PP_LOCAL_LIMITS	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	326;"	d
BOOST_PP_LOCAL_LIMITS	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	119;"	d
BOOST_PP_LOCAL_LIMITS	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	145;"	d
BOOST_PP_LOCAL_LIMITS	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	755;"	d
BOOST_PP_LOCAL_LIMITS	/usr/include/boost/interprocess/containers/container/flat_map.hpp	1209;"	d
BOOST_PP_LOCAL_LIMITS	/usr/include/boost/interprocess/containers/container/flat_map.hpp	583;"	d
BOOST_PP_LOCAL_LIMITS	/usr/include/boost/interprocess/containers/container/flat_set.hpp	1037;"	d
BOOST_PP_LOCAL_LIMITS	/usr/include/boost/interprocess/containers/container/flat_set.hpp	456;"	d
BOOST_PP_LOCAL_LIMITS	/usr/include/boost/interprocess/containers/container/list.hpp	917;"	d
BOOST_PP_LOCAL_LIMITS	/usr/include/boost/interprocess/containers/container/map.hpp	1120;"	d
BOOST_PP_LOCAL_LIMITS	/usr/include/boost/interprocess/containers/container/map.hpp	568;"	d
BOOST_PP_LOCAL_LIMITS	/usr/include/boost/interprocess/containers/container/set.hpp	1014;"	d
BOOST_PP_LOCAL_LIMITS	/usr/include/boost/interprocess/containers/container/set.hpp	466;"	d
BOOST_PP_LOCAL_LIMITS	/usr/include/boost/interprocess/containers/container/slist.hpp	892;"	d
BOOST_PP_LOCAL_LIMITS	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	807;"	d
BOOST_PP_LOCAL_LIMITS	/usr/include/boost/interprocess/containers/container/vector.hpp	1029;"	d
BOOST_PP_LOCAL_MACRO	/usr/include/boost/interprocess/containers/container/deque.hpp	903;"	d
BOOST_PP_LOCAL_MACRO	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	428;"	d
BOOST_PP_LOCAL_MACRO	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	466;"	d
BOOST_PP_LOCAL_MACRO	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	304;"	d
BOOST_PP_LOCAL_MACRO	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	315;"	d
BOOST_PP_LOCAL_MACRO	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	111;"	d
BOOST_PP_LOCAL_MACRO	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	139;"	d
BOOST_PP_LOCAL_MACRO	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	726;"	d
BOOST_PP_LOCAL_MACRO	/usr/include/boost/interprocess/containers/container/flat_map.hpp	1193;"	d
BOOST_PP_LOCAL_MACRO	/usr/include/boost/interprocess/containers/container/flat_map.hpp	567;"	d
BOOST_PP_LOCAL_MACRO	/usr/include/boost/interprocess/containers/container/flat_set.hpp	1028;"	d
BOOST_PP_LOCAL_MACRO	/usr/include/boost/interprocess/containers/container/flat_set.hpp	447;"	d
BOOST_PP_LOCAL_MACRO	/usr/include/boost/interprocess/containers/container/list.hpp	895;"	d
BOOST_PP_LOCAL_MACRO	/usr/include/boost/interprocess/containers/container/map.hpp	1111;"	d
BOOST_PP_LOCAL_MACRO	/usr/include/boost/interprocess/containers/container/map.hpp	559;"	d
BOOST_PP_LOCAL_MACRO	/usr/include/boost/interprocess/containers/container/set.hpp	1005;"	d
BOOST_PP_LOCAL_MACRO	/usr/include/boost/interprocess/containers/container/set.hpp	457;"	d
BOOST_PP_LOCAL_MACRO	/usr/include/boost/interprocess/containers/container/slist.hpp	864;"	d
BOOST_PP_LOCAL_MACRO	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	784;"	d
BOOST_PP_LOCAL_MACRO	/usr/include/boost/interprocess/containers/container/vector.hpp	1000;"	d
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   BOOST_STATIC_ASSERT((Version <=2));$/;"	p	class:boost::interprocess::detail::adaptive_pool_base	access:public	signature:(Version <=2)
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   BOOST_STATIC_ASSERT((Version <=2));$/;"	p	class:boost::interprocess::detail::node_allocator_base	access:public	signature:(Version <=2)
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   BOOST_STATIC_ASSERT((Version <=2));$/;"	p	class:boost::interprocess::detail::private_adaptive_pool_base	access:private	signature:(Version <=2)
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   BOOST_STATIC_ASSERT((Version <=2));$/;"	p	class:boost::interprocess::detail::private_node_allocator_base	access:private	signature:(Version <=2)
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/containers/container/string.hpp	/^   BOOST_STATIC_ASSERT((containers_detail::alignment_of<long_alignment_type>::value % $/;"	p	class:boost::container::containers_detail::basic_string_base	access:private	signature:(containers_detail::alignment_of<long_alignment_type>::value % containers_detail::alignment_of<long_t>::value) == 0
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   BOOST_STATIC_ASSERT(((size_t_bits - pow_size_bits - frc_size_bits) >= ctrl_bits ));$/;"	p	struct:boost::interprocess::intersegment_base	access:public	signature:((size_t_bits - pow_size_bits - frc_size_bits) >= ctrl_bits )
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   BOOST_STATIC_ASSERT((sizeof(std::size_t) == sizeof(void*)));$/;"	p	struct:boost::interprocess::intersegment_base	access:public	signature:(sizeof(std::size_t) == sizeof(void*))
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   BOOST_STATIC_ASSERT((sizeof(void*)*CHAR_BIT == 32 || sizeof(void*)*CHAR_BIT == 64));$/;"	p	struct:boost::interprocess::intersegment_base	access:public	signature:(sizeof(void*)*CHAR_BIT == 32 || sizeof(void*)*CHAR_BIT == 64)
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   BOOST_STATIC_ASSERT((0 == (Alignment & (Alignment - std::size_t(1u)))));$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(0 == (Alignment & (Alignment - std::size_t(1u))))
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   BOOST_STATIC_ASSERT((Alignment >= 4));$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(Alignment >= 4)
BOOST_STATIC_ASSERT	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   BOOST_STATIC_ASSERT((Alignment >= detail::alignment_of<void_pointer>::value));$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(Alignment >= detail::alignment_of<void_pointer>::value)
BootAndSystemstampLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long BootAndSystemstampLength   = 16;$/;"	m	namespace:boost::interprocess::winapi
BootstampLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long BootstampLength            = 8;$/;"	m	namespace:boost::interprocess::winapi
bucket_ptr	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::bucket_ptr               bucket_ptr;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
bucket_traits	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::bucket_traits            bucket_traits;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
bucket_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_t::bucket_type              bucket_type;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
bucket_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::bucket_type              bucket_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
buf	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      wchar_t buf[32767];$/;"	m	struct:boost::interprocess::winapi::ntquery_mem_t::ren_t	access:public
buf	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^         char buf[info_constants_t<0>::MaxName];$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_t::names_t	access:public
Buffer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   wchar_t *Buffer;$/;"	m	struct:boost::interprocess::winapi::unicode_string_t	access:public
buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::pair<CharT *, std::size_t> buffer() const$/;"	f	class:boost::interprocess::basic_bufferbuf	access:public	signature:() const
buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::pair<CharT *, std::size_t> buffer() const$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:() const
buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::pair<CharT *, std::size_t> buffer() const$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:() const
buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::pair<const CharT *, std::size_t> buffer() const$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:() const
buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   void buffer(CharT *buffer, std::size_t length)$/;"	f	class:boost::interprocess::basic_bufferbuf	access:public	signature:(CharT *buffer, std::size_t length)
buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   void buffer(CharT *buffer, std::size_t length)$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:(CharT *buffer, std::size_t length)
buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   void buffer(CharT *buffer, std::size_t length)$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:(CharT *buffer, std::size_t length)
buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   void buffer(const CharT *buffer, std::size_t length)$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:(const CharT *buffer, std::size_t length)
bufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_bufferbuf<char>        bufferbuf;$/;"	t	namespace:boost::interprocess
bufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_bufferstream<char>     bufferstream;$/;"	t	namespace:boost::interprocess
build_number_seq	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^struct build_number_seq<0, index_tuple<Indexes...> >$/;"	s	namespace:boost::container::containers_detail
build_number_seq	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^struct build_number_seq<Num, index_tuple<Indexes...> >$/;"	s	namespace:boost::container::containers_detail	inherits:build_number_seq
build_number_seq	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^struct build_number_seq<0, index_tuple<Indexes...> >$/;"	s	namespace:boost::interprocess::detail
build_number_seq	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^struct build_number_seq<Num, index_tuple<Indexes...> >$/;"	s	namespace:boost::interprocess::detail	inherits:build_number_seq
busy_error	/usr/include/boost/interprocess/errors.hpp	/^   busy_error,       \/\/ implies trying again might succeed$/;"	e	enum:boost::interprocess::error_code_t
c	/usr/include/boost/interprocess/containers/container/detail/type_traits.hpp	/^    char c;$/;"	m	struct:boost::container::containers_detail::alignment_of_hack	access:public
c	/usr/include/boost/interprocess/detail/type_traits.hpp	/^    char c;$/;"	m	struct:boost::interprocess::detail::alignment_of_hack	access:public
c	/usr/include/boost/interprocess/detail/utilities.hpp	/^   enum { c = 2*n < p };$/;"	e	enum:boost::interprocess::detail::ct_max_pow2_less::__anon15
cached_adaptive_pool	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   cached_adaptive_pool$/;"	f	class:boost::interprocess::cached_adaptive_pool	access:public	signature:(const cached_adaptive_pool<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
cached_adaptive_pool	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   cached_adaptive_pool(SegmentManager *segment_mngr,$/;"	f	class:boost::interprocess::cached_adaptive_pool	access:public	signature:(SegmentManager *segment_mngr, std::size_t max_cached_nodes = base_t::DEFAULT_MAX_CACHED_NODES)
cached_adaptive_pool	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^class cached_adaptive_pool$/;"	c	namespace:boost::interprocess	inherits:detail::cached_allocator_impl
cached_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   cached_adaptive_pool_v1$/;"	f	class:boost::interprocess::detail::cached_adaptive_pool_v1	access:public	signature:(const cached_adaptive_pool_v1 <T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
cached_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   cached_adaptive_pool_v1(SegmentManager *segment_mngr,$/;"	f	class:boost::interprocess::detail::cached_adaptive_pool_v1	access:public	signature:(SegmentManager *segment_mngr, std::size_t max_cached_nodes = base_t::DEFAULT_MAX_CACHED_NODES)
cached_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^class cached_adaptive_pool_v1$/;"	c	namespace:boost::interprocess::detail	inherits:detail::cached_allocator_impl
cached_allocation	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   multiallocation_chain cached_allocation(std::size_t n)$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:(std::size_t n)
cached_allocation	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void *cached_allocation()$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:()
cached_allocator_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cached_allocator_impl$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:(const cached_allocator_impl <T2, NodePool2, Version> &other)
cached_allocator_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cached_allocator_impl(const cached_allocator_impl &other)$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:(const cached_allocator_impl &other)
cached_allocator_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cached_allocator_impl(segment_manager *segment_mngr, std::size_t max_cached_nodes)$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:(segment_manager *segment_mngr, std::size_t max_cached_nodes)
cached_allocator_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^class cached_allocator_impl$/;"	c	namespace:boost::interprocess::detail	inherits:array_allocation_impl
cached_deallocation	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void cached_deallocation(multiallocation_chain chain)$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:(multiallocation_chain chain)
cached_deallocation	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void cached_deallocation(void *ptr)$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:(void *ptr)
cached_node_allocator	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   cached_node_allocator$/;"	f	class:boost::interprocess::cached_node_allocator	access:public	signature:(const cached_node_allocator<T2, SegmentManager, NodesPerBlock> &other)
cached_node_allocator	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   cached_node_allocator(SegmentManager *segment_mngr,$/;"	f	class:boost::interprocess::cached_node_allocator	access:public	signature:(SegmentManager *segment_mngr, std::size_t max_cached_nodes = base_t::DEFAULT_MAX_CACHED_NODES)
cached_node_allocator	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^class cached_node_allocator$/;"	c	namespace:boost::interprocess	inherits:detail::cached_allocator_impl
cached_node_allocator_v1	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   cached_node_allocator_v1$/;"	f	class:boost::interprocess::detail::cached_node_allocator_v1	access:public	signature:(const cached_node_allocator_v1 <T2, SegmentManager, NodesPerBlock> &other)
cached_node_allocator_v1	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   cached_node_allocator_v1(SegmentManager *segment_mngr,$/;"	f	class:boost::interprocess::detail::cached_node_allocator_v1	access:public	signature:(SegmentManager *segment_mngr, std::size_t max_cached_nodes = base_t::DEFAULT_MAX_CACHED_NODES)
cached_node_allocator_v1	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^class cached_node_allocator_v1$/;"	c	namespace:boost::interprocess::detail	inherits:detail::cached_allocator_impl
cache_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cache_impl(const cache_impl &other)$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:(const cache_impl &other)
cache_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cache_impl(segment_manager *segment_mngr, std::size_t max_cached_nodes)$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:(segment_manager *segment_mngr, std::size_t max_cached_nodes)
cache_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^class cache_impl$/;"	c	namespace:boost::interprocess::detail
calculate_alignment	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^inline std::size_t calculate_alignment$/;"	f	namespace:boost::container::containers_detail	signature:( std::size_t overhead_percent, std::size_t real_node_size , std::size_t hdr_size, std::size_t hdr_offset_size, std::size_t payload_per_allocation)
calculate_lcm_and_needs_backwards_lcmed	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static bool calculate_lcm_and_needs_backwards_lcmed$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(std::size_t backwards_multiple, std::size_t received_size, std::size_t size_to_achieve, std::size_t &lcm_out, std::size_t &needs_backwards_lcmed_out)
calculate_num_subblocks	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^inline void calculate_num_subblocks$/;"	f	namespace:boost::container::containers_detail	signature:(std::size_t alignment, std::size_t real_node_size, std::size_t elements_per_block , std::size_t &num_subblocks, std::size_t &real_num_node, std::size_t overhead_percent , std::size_t hdr_size, std::size_t hdr_offset_size, std::size_t payload_per_allocation)
calculate_size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static std::size_t calculate_size(std::size_t orig_size, std::size_t &pow, std::size_t &frc)$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:(std::size_t orig_size, std::size_t &pow, std::size_t &frc)
cAlternateFileName	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   char cAlternateFileName[14];$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
capacity	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   size_type capacity() const           $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
capacity	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   size_type capacity() const           $/;"	f	class:boost::container::flat_map	access:public	signature:() const
capacity	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   size_type capacity() const           $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
capacity	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   size_type capacity() const           $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
capacity	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   size_type capacity() const           $/;"	f	class:boost::container::flat_set	access:public	signature:() const
capacity	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   size_type capacity() const$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
capacity	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type capacity() const$/;"	f	class:boost::container::basic_string	access:public	signature:() const
capacity	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   size_type capacity() const $/;"	f	class:boost::container::vector	access:public	signature:() const
cast	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   static pointer cast(void_pointer p)$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:private	signature:(void_pointer p)
cast_functor	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^struct cast_functor$/;"	s	namespace:boost::container::containers_detail
cbefore_begin	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   const_iterator cbefore_begin() const$/;"	f	class:boost::container::slist	access:public	signature:() const
cbegin	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_iterator cbegin() const $/;"	f	class:boost::container::deque	access:public	signature:() const
cbegin	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_iterator cbegin() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
cbegin	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_iterator cbegin() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
cbegin	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator cbegin() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
cbegin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator cbegin() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
cbegin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator cbegin() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
cbegin	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const_iterator cbegin() const$/;"	f	class:boost::container::list	access:public	signature:() const
cbegin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator cbegin() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
cbegin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator cbegin() const $/;"	f	class:boost::container::set	access:public	signature:() const
cbegin	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   const_iterator cbegin() const $/;"	f	class:boost::container::slist	access:public	signature:() const
cbegin	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_iterator         cbegin()const {return this->begin();}$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
cbegin	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_iterator cbegin() const$/;"	f	class:boost::container::vector	access:public	signature:() const
ceil_units	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static std::size_t ceil_units(std::size_t size)$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(std::size_t size)
cend	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_iterator cend() const $/;"	f	class:boost::container::deque	access:public	signature:() const
cend	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_iterator cend() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
cend	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_iterator cend() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
cend	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator cend() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
cend	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator cend() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
cend	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator cend() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
cend	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const_iterator cend() const$/;"	f	class:boost::container::list	access:public	signature:() const
cend	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator cend() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
cend	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator cend() const $/;"	f	class:boost::container::set	access:public	signature:() const
cend	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   const_iterator cend() const$/;"	f	class:boost::container::slist	access:public	signature:() const
cend	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_iterator         cend()const   {return this->end();}$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
cend	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_iterator cend()   const$/;"	f	class:boost::container::vector	access:public	signature:() const
cFileName	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   char cFileName[MaxPath];$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
chain_builder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef allocator_destroyer_and_chain_builder<A> chain_builder;$/;"	t	class:boost::container::containers_detail::allocator_multialloc_chain_node_deallocator	access:private
char_if_void	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct char_if_void$/;"	s	namespace:boost::interprocess::detail
char_if_void	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct char_if_void<void>$/;"	s	namespace:boost::interprocess::detail
char_ptr	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      pointer_to_other<void_pointer, char>::type         char_ptr;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
char_ptr_holder	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   char_ptr_holder(const CharType *name) $/;"	f	class:boost::interprocess::detail::char_ptr_holder	access:public	signature:(const CharType *name)
char_ptr_holder	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   char_ptr_holder(const detail::anonymous_instance_t *) $/;"	f	class:boost::interprocess::detail::char_ptr_holder	access:public	signature:(const detail::anonymous_instance_t *)
char_ptr_holder	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   char_ptr_holder(const detail::unique_instance_t *) $/;"	f	class:boost::interprocess::detail::char_ptr_holder	access:public	signature:(const detail::unique_instance_t *)
char_ptr_holder	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^class char_ptr_holder$/;"	c	namespace:boost::interprocess::detail
char_ptr_holder_t	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^           segment_manager::char_ptr_holder_t         char_ptr_holder_t;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
char_ptr_holder_t	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   typedef typename base_t::char_ptr_holder_t   char_ptr_holder_t;$/;"	t	class:boost::interprocess::basic_managed_mapped_file	access:private
char_ptr_holder_t	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   typedef typename base_t::char_ptr_holder_t   char_ptr_holder_t;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:private
char_ptr_holder_t	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   typedef typename base_t::char_ptr_holder_t   char_ptr_holder_t;$/;"	t	class:boost::interprocess::basic_managed_windows_shared_memory	access:private
char_ptr_holder_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef detail::char_ptr_holder<CharType>                char_ptr_holder_t;$/;"	t	class:boost::interprocess::segment_manager	access:public
char_t	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef CharType                                   char_t;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
char_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef CharType                                   char_type;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
char_type	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   typedef typename SegmentManager::char_type char_type;$/;"	t	class:boost::interprocess::detail::named_proxy	access:private
char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef CharT                                         char_type;$/;"	t	struct:boost::interprocess::detail::index_config	access:public
char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef CharT                                         char_type;$/;"	t	struct:boost::interprocess::detail::index_key	access:public
char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef CharT char_type;$/;"	t	struct:boost::interprocess::detail::intrusive_compare_key	access:public
char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef CharType char_type;$/;"	t	struct:boost::interprocess::detail::intrusive_value_type_impl	access:public
char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename first_type::char_type       char_type;$/;"	t	class:boost::interprocess::detail::segment_manager_iterator_value_adaptor	access:private
char_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename iterator_val_t::char_type   char_type;$/;"	t	class:boost::interprocess::detail::segment_manager_iterator_value_adaptor	access:private
char_type	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename MapConfig::char_type                 char_type;$/;"	t	class:boost::interprocess::iset_index	access:private
char_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename MapConfig::char_type                 char_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
char_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename MapConfig::char_type              char_type;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
char_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef CharType                       char_type;$/;"	t	class:boost::interprocess::segment_manager	access:public
char_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^      <CharT, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_bufferstream	access:public
char_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^      <CharT, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:public
char_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^      <CharT, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_obufferstream	access:public
char_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef CharT                                         char_type;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
char_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^      <typename CharVector::value_type, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
char_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^      <typename CharVector::value_type, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
char_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^      <typename CharVector::value_type, CharTraits>::char_type          char_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
char_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename CharVector::value_type   char_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
check_alignment	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static bool check_alignment(const void *ptr)$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(const void *ptr)
check_sanity	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool check_sanity()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:()
check_sanity	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^    check_sanity()$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:()
check_sanity	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   bool check_sanity();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:()
check_sanity	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^    check_sanity()$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:()
check_sanity	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   bool check_sanity();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:()
check_sanity	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^    check_sanity()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
check_sanity	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   bool check_sanity();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:()
check_sanity	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool check_sanity()$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:()
clear	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void clear()$/;"	f	class:boost::container::deque	access:public	signature:()
clear	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   void clear()$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:()
clear	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void clear()$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:()
clear	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void clear()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
clear	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void clear(allocator_v1)$/;"	f	namespace:boost::container::containers_detail	signature:(allocator_v1)
clear	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void clear(allocator_v2)$/;"	f	namespace:boost::container::containers_detail	signature:(allocator_v2)
clear	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void clear() $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:()
clear	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   void clear() $/;"	f	class:boost::container::flat_map	access:public	signature:()
clear	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   void clear() $/;"	f	class:boost::container::flat_multimap	access:public	signature:()
clear	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   void clear() $/;"	f	class:boost::container::flat_multiset	access:public	signature:()
clear	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   void clear() $/;"	f	class:boost::container::flat_set	access:public	signature:()
clear	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void clear()$/;"	f	class:boost::container::list	access:public	signature:()
clear	/usr/include/boost/interprocess/containers/container/map.hpp	/^   void clear() $/;"	f	class:boost::container::map	access:public	signature:()
clear	/usr/include/boost/interprocess/containers/container/map.hpp	/^   void clear() $/;"	f	class:boost::container::multimap	access:public	signature:()
clear	/usr/include/boost/interprocess/containers/container/set.hpp	/^   void clear() $/;"	f	class:boost::container::multiset	access:public	signature:()
clear	/usr/include/boost/interprocess/containers/container/set.hpp	/^   void clear() $/;"	f	class:boost::container::set	access:public	signature:()
clear	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void clear() $/;"	f	class:boost::container::slist	access:public	signature:()
clear	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void clear()$/;"	f	class:boost::container::stable_vector	access:public	signature:()
clear	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void clear()$/;"	f	class:boost::container::basic_string	access:public	signature:()
clear	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void clear() $/;"	f	class:boost::container::vector	access:public	signature:()
clear	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void clear() $/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:()
clear	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void clear() $/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:()
clear	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void clear()$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:()
clear_free_memory	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void clear_free_memory();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:()
clear_free_memory	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::clear_free_memory()$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:()
clear_on_destroy	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   clear_on_destroy(C &c)$/;"	f	class:boost::container::stable_vector_detail::clear_on_destroy	access:public	signature:(C &c)
clear_on_destroy	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   clear_on_destroy(const clear_on_destroy &);$/;"	p	class:boost::container::stable_vector_detail::clear_on_destroy	access:private	signature:(const clear_on_destroy &)
clear_on_destroy	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^class clear_on_destroy$/;"	c	namespace:boost::container::stable_vector_detail
clear_pool	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void clear_pool()$/;"	f	class:boost::container::stable_vector	access:private	signature:()
clear_pool	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void clear_pool(allocator_v1)$/;"	f	class:boost::container::stable_vector	access:private	signature:(allocator_v1)
clear_pool	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void clear_pool(allocator_v2)$/;"	f	class:boost::container::stable_vector	access:private	signature:(allocator_v2)
clear_segments	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      void clear_segments()$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:()
cloner	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      cloner(node_alloc_holder &holder)$/;"	f	struct:boost::container::containers_detail::cloner	access:public	signature:(node_alloc_holder &holder)
cloner	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   struct cloner$/;"	s	namespace:boost::container::containers_detail	access:protected
CloseHandle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall CloseHandle(void*);$/;"	p	namespace:boost::interprocess::winapi	signature:(void*)
close_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool close_file(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd)
close_func	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      close_func(self_t * const frontend)$/;"	f	struct:boost::interprocess::basic_managed_multi_shared_memory::close_func	access:public	signature:(self_t * const frontend)
close_func	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   struct close_func$/;"	s	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
close_handle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned int close_handle(void* handle)$/;"	f	namespace:boost::interprocess::winapi	signature:(void* handle)
close_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool close_impl()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:()
compare	/usr/include/boost/interprocess/containers/container/string.hpp	/^   int compare(const basic_string& s) const $/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s) const
compare	/usr/include/boost/interprocess/containers/container/string.hpp	/^   int compare(const CharT* s) const $/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s) const
compare	/usr/include/boost/interprocess/containers/container/string.hpp	/^   int compare(size_type pos1, size_type n1, const basic_string& s) const $/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos1, size_type n1, const basic_string& s) const
compare	/usr/include/boost/interprocess/containers/container/string.hpp	/^   int compare(size_type pos1, size_type n1, const CharT* s,$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos1, size_type n1, const CharT* s, size_type n2 = npos) const
compare	/usr/include/boost/interprocess/containers/container/string.hpp	/^   int compare(size_type pos1, size_type n1,$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos1, size_type n1, const basic_string& s, size_type pos2, size_type n2) const
condattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      condattr_wrapper()$/;"	f	struct:boost::interprocess::detail::condattr_wrapper	access:public	signature:()
condattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   struct condattr_wrapper $/;"	s	namespace:boost::interprocess::detail
condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   interprocess_condition *condition() const$/;"	f	class:boost::interprocess::named_condition	access:private	signature:() const
condition_holder	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   struct condition_holder$/;"	s	class:boost::interprocess::named_condition	access:private
condition_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      condition_initializer(pthread_cond_t &cond, pthread_condattr_t &cond_attr) $/;"	f	class:boost::interprocess::detail::condition_initializer	access:public	signature:(pthread_cond_t &cond, pthread_condattr_t &cond_attr)
condition_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   class condition_initializer$/;"	c	namespace:boost::interprocess::detail
cond_	/usr/include/boost/interprocess/sync/named_condition.hpp	/^      interprocess_condition cond_;$/;"	m	struct:boost::interprocess::named_condition::condition_holder	access:public
constants	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   typedef base_constants_t<0> constants;$/;"	t	class:boost::interprocess::interprocess_upgradable_mutex	access:private
constant_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   constant_iterator()$/;"	f	class:boost::container::constant_iterator	access:public	signature:()
constant_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   explicit constant_iterator(const T &ref, Difference range_size)$/;"	f	class:boost::container::constant_iterator	access:public	signature:(const T &ref, Difference range_size)
constant_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^class constant_iterator$/;"	c	namespace:boost::container	inherits:std::iterator
construct	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void construct(const pointer &ptr)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &ptr)
construct	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void construct(const pointer &ptr, const_reference v)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &ptr, const_reference v)
construct	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void construct(const pointer &ptr)$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:(const pointer &ptr)
construct	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void construct(const pointer &ptr, const_reference v)$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:(const pointer &ptr, const_reference v)
construct	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   static void construct(const NodePtr &ptr)$/;"	f	namespace:boost::container::containers_detail	signature:(const NodePtr &ptr)
construct	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   static void construct(const NodePtr &ptr, Args &&...args)$/;"	f	namespace:boost::container::containers_detail	signature:(const NodePtr &ptr, Args &&...args)
construct	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   static void construct(const NodePtr &ptr,$/;"	f	namespace:boost::container::containers_detail	signature:(const NodePtr &ptr, BOOST_INTERPROCESS_RV_REF_2_TEMPL_ARGS(std::pair, Convertible1, Convertible2) value)
construct	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   static void construct(node_type *ptr, BOOST_INTERPROCESS_FWD_REF(Convertible) convertible)$/;"	f	struct:boost::container::containers_detail::rbtree_node	access:public	signature:(node_type *ptr, BOOST_INTERPROCESS_FWD_REF(Convertible) convertible)
construct	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void construct(pointer p, const value_type &value = value_type())$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(pointer p, const value_type &value = value_type())
construct	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      construct(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
construct	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      construct(char_ptr_holder_t name, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name, std::nothrow_t nothrow)
construct	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   void construct(void *mem, detail::false_, const index_tuple<IdxPack...>&)$/;"	f	struct:boost::interprocess::detail::CtorNArg	access:private	signature:(void *mem, detail::false_, const index_tuple<IdxPack...>&)
construct	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   void construct(void *mem, detail::true_, const index_tuple<IdxPack...>&)$/;"	f	struct:boost::interprocess::detail::CtorNArg	access:private	signature:(void *mem, detail::true_, const index_tuple<IdxPack...>&)
construct	/usr/include/boost/interprocess/segment_manager.hpp	/^      construct(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name)
construct	/usr/include/boost/interprocess/segment_manager.hpp	/^      construct(char_ptr_holder_t name, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name, std::nothrow_t)
construct	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^   void construct(void *address, typename enable_if_c<!is_same<ArgType, no_arg_t>::value>::type * = 0) const$/;"	f	class:boost::interprocess::detail::named_creation_functor	access:public	signature:(void *address, typename enable_if_c<!is_same<ArgType, no_arg_t>::value>::type * = 0) const
construct	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^   void construct(void *address, typename enable_if_c<is_same<ArgType, no_arg_t>::value>::type * = 0) const$/;"	f	class:boost::interprocess::detail::named_creation_functor	access:public	signature:(void *address, typename enable_if_c<is_same<ArgType, no_arg_t>::value>::type * = 0) const
construct_func_t	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   typedef detail::named_creation_functor<condition_holder> construct_func_t;$/;"	t	class:boost::interprocess::named_condition	access:private
construct_func_t	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   typedef detail::named_creation_functor<interprocess_mutex> construct_func_t;$/;"	t	class:boost::interprocess::named_mutex	access:private
construct_func_t	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   typedef detail::named_creation_functor<interprocess_recursive_mutex> construct_func_t;$/;"	t	class:boost::interprocess::named_recursive_mutex	access:private
construct_func_t	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   typedef detail::named_creation_functor<interprocess_semaphore, int> construct_func_t;$/;"	t	class:boost::interprocess::named_semaphore	access:private
construct_func_t	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   typedef detail::named_creation_functor<interprocess_upgradable_mutex> construct_func_t;$/;"	t	class:boost::interprocess::named_upgradable_mutex	access:private
construct_in_place	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^inline void construct_in_place(T *dest, default_construct_iterator<U, D>)$/;"	f	namespace:boost::container	signature:(T *dest, default_construct_iterator<U, D>)
construct_in_place	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^inline void construct_in_place(T *dest, emplace_iterator<U, E> ei)$/;"	f	namespace:boost::container	signature:(T *dest, emplace_iterator<U, E> ei)
construct_in_place	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^inline void construct_in_place(T* dest, InpIt source)$/;"	f	namespace:boost::container	signature:(T* dest, InpIt source)
construct_in_place	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void construct_in_place(T* ptr)$/;"	f	class:boost::container::emplace_iterator	access:public	signature:(T* ptr)
construct_in_place_impl	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^inline void construct_in_place_impl(T* dest, const InpIt &source, containers_detail::false_)$/;"	f	namespace:boost::container::containers_detail	signature:(T* dest, const InpIt &source, containers_detail::false_)
construct_in_place_impl	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^inline void construct_in_place_impl(T* dest, const InpIt &source, containers_detail::true_)$/;"	f	namespace:boost::container::containers_detail	signature:(T* dest, const InpIt &source, containers_detail::true_)
construct_it	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      construct_it(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
construct_it	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      construct_it(char_ptr_holder_t name, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name, std::nothrow_t nothrow)
construct_it	/usr/include/boost/interprocess/segment_manager.hpp	/^      construct_it(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name)
construct_it	/usr/include/boost/interprocess/segment_manager.hpp	/^      construct_it(char_ptr_holder_t name, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name, std::nothrow_t)
construct_iter_proxy	/usr/include/boost/interprocess/segment_manager.hpp	/^   struct construct_iter_proxy$/;"	s	class:boost::interprocess::segment_manager	access:public
construct_n	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   virtual void construct_n(void *, std::size_t, std::size_t &) {}$/;"	f	struct:boost::interprocess::detail::placement_destroy	access:public	signature:(void *, std::size_t, std::size_t &)
construct_n	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   virtual void construct_n(void *mem, std::size_t num, std::size_t &constructed) = 0;$/;"	p	struct:boost::interprocess::detail::in_place_interface	access:public	signature:(void *mem, std::size_t num, std::size_t &constructed)
construct_n	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   virtual void construct_n(void *mem$/;"	f	struct:boost::interprocess::detail::CtorNArg	access:public	signature:(void *mem , std::size_t num , std::size_t &constructed)
construct_proxy	/usr/include/boost/interprocess/segment_manager.hpp	/^   struct construct_proxy$/;"	s	class:boost::interprocess::segment_manager	access:public
const_allocator_pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^            <typename VoidAllocator::pointer, const VoidAllocator>::type   const_allocator_pointer;$/;"	t	class:boost::interprocess::detail::shared_count	access:private
const_allocator_pointer	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^            <typename A::pointer, const A>::type   const_allocator_pointer;$/;"	t	class:boost::interprocess::detail::sp_counted_impl_pd	access:private
const_allocator_pointer	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^            <typename VoidAllocator::pointer, const VoidAllocator>::type   const_allocator_pointer;$/;"	t	class:boost::interprocess::shared_ptr	access:public
const_cast_tag	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^struct const_cast_tag {};$/;"	s	namespace:boost::interprocess::detail
const_char_ptr_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^      pointer_to_other<VoidPointer, const CharT>::type   const_char_ptr_t;$/;"	t	struct:boost::interprocess::detail::index_key	access:public
const_deleter_pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^            <typename VoidAllocator::pointer, const Deleter>::type   const_deleter_pointer;$/;"	t	class:boost::interprocess::detail::shared_count	access:private
const_deleter_pointer	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^            <typename A::pointer, const D>::type   const_deleter_pointer;$/;"	t	class:boost::interprocess::detail::sp_counted_impl_pd	access:private
const_deleter_pointer	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^            <typename VoidAllocator::pointer, const Deleter>::type         const_deleter_pointer;$/;"	t	class:boost::interprocess::shared_ptr	access:public
const_impl_iterator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef typename impl_type::const_iterator         const_impl_iterator;$/;"	t	class:boost::container::stable_vector	access:private
const_iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      const_iterator() : m_cur(0), m_first(0), m_last(0), m_node(0) {}$/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:()
const_iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      const_iterator(const const_iterator& x)$/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(const const_iterator& x)
const_iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      const_iterator(val_alloc_ptr x, index_pointer y) $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(val_alloc_ptr x, index_pointer y)
const_iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   class const_iterator $/;"	c	class:boost::container::deque_base	inherits:std::iterator	access:public
const_iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Base::const_iterator        const_iterator;$/;"	t	class:boost::container::deque	access:public
const_iterator	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef typename vector_t::const_iterator          const_iterator;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
const_iterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      const_iterator()$/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:public	signature:()
const_iterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      explicit const_iterator(iiterator it)  : m_it(it){}$/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:protected	signature:(iiterator it)
const_iterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   class const_iterator$/;"	c	class:boost::container::containers_detail::rbtree	inherits:std::iterator	access:public
const_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::const_iterator         const_iterator;$/;"	t	class:boost::container::flat_map	access:public
const_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::const_iterator         const_iterator;$/;"	t	class:boost::container::flat_multimap	access:public
const_iterator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::const_iterator         const_iterator;$/;"	t	class:boost::container::flat_multiset	access:public
const_iterator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::const_iterator         const_iterator;$/;"	t	class:boost::container::flat_set	access:public
const_iterator	/usr/include/boost/interprocess/containers/container/list.hpp	/^      const_iterator()$/;"	f	class:boost::container::list::const_iterator	access:public	signature:()
const_iterator	/usr/include/boost/interprocess/containers/container/list.hpp	/^      explicit const_iterator(typename Icont::iterator it)  : m_it(it){}$/;"	f	class:boost::container::list::const_iterator	access:protected	signature:(typename Icont::iterator it)
const_iterator	/usr/include/boost/interprocess/containers/container/list.hpp	/^   class const_iterator$/;"	c	class:boost::container::list	inherits:std::iterator	access:public
const_iterator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::const_iterator         const_iterator;$/;"	t	class:boost::container::map	access:public
const_iterator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::const_iterator         const_iterator;$/;"	t	class:boost::container::multimap	access:public
const_iterator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::const_iterator         const_iterator;$/;"	t	class:boost::container::multiset	access:public
const_iterator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::const_iterator         const_iterator;$/;"	t	class:boost::container::set	access:public
const_iterator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      const_iterator()$/;"	f	class:boost::container::slist::const_iterator	access:public	signature:()
const_iterator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      explicit const_iterator(typename Icont::iterator it)  : m_it(it){}$/;"	f	class:boost::container::slist::const_iterator	access:protected	signature:(typename Icont::iterator it)
const_iterator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   class const_iterator$/;"	c	class:boost::container::slist	inherits:std::iterator	access:public
const_iterator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      <T,const T&, const_pointer>                     const_iterator;$/;"	t	class:boost::container::stable_vector	access:public
const_iterator	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef const_pointer                           const_iterator;$/;"	t	class:boost::container::basic_string	access:public
const_iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef containers_detail::vector_const_iterator<pointer>  const_iterator;$/;"	t	class:boost::container::vector	access:public
const_iterator	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename index_type::const_iterator           const_iterator;$/;"	t	class:boost::interprocess::iset_index	access:public
const_iterator	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::const_iterator           const_iterator;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
const_iterator	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   typedef const void * const_iterator;$/;"	t	class:boost::interprocess::null_index	access:public
const_named_iterator	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      const_named_iterator                            const_named_iterator;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
const_named_iterator	/usr/include/boost/interprocess/segment_manager.hpp	/^      <typename named_index_t::const_iterator, named_transform> const_named_iterator;$/;"	t	class:boost::interprocess::segment_manager	access:public
const_pointer	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      pointer_to_other<void_pointer, const T>::type      const_pointer;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
const_pointer	/usr/include/boost/interprocess/allocators/allocator.hpp	/^      pointer_to_other<pointer, const T>::type  const_pointer;$/;"	t	class:boost::interprocess::allocator	access:public
const_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      pointer_to_other<void_pointer, const T>::type      const_pointer;$/;"	t	class:boost::interprocess::detail::array_allocation_impl	access:public
const_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      pointer_to_other<void_pointer, const T>::type      const_pointer;$/;"	t	class:boost::interprocess::detail::node_pool_allocation_impl	access:public
const_pointer	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      pointer_to_other<void_pointer, const T>::type      const_pointer;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
const_pointer	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      pointer_to_other<void_pointer, const T>::type      const_pointer;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
const_pointer	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      pointer_to_other<void_pointer, const T>::type      const_pointer;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
const_pointer	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef val_alloc_cptr                       const_pointer;$/;"	t	class:boost::container::deque	access:public
const_pointer	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef typename vector_t::const_pointer           const_pointer;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
const_pointer	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename A::const_pointer                  const_pointer;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
const_pointer	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::const_pointer          const_pointer;$/;"	t	class:boost::container::flat_map	access:public
const_pointer	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::const_pointer          const_pointer;$/;"	t	class:boost::container::flat_multimap	access:public
const_pointer	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::const_pointer          const_pointer;$/;"	t	class:boost::container::flat_multiset	access:public
const_pointer	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::const_pointer          const_pointer;$/;"	t	class:boost::container::flat_set	access:public
const_pointer	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename A::const_pointer               const_pointer;$/;"	t	class:boost::container::list	access:public
const_pointer	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::const_pointer          const_pointer;$/;"	t	class:boost::container::map	access:public
const_pointer	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::const_pointer          const_pointer;$/;"	t	class:boost::container::multimap	access:public
const_pointer	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::const_pointer          const_pointer;$/;"	t	class:boost::container::multiset	access:public
const_pointer	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::const_pointer          const_pointer;$/;"	t	class:boost::container::set	access:public
const_pointer	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename A::const_pointer               const_pointer;$/;"	t	class:boost::container::slist	access:public
const_pointer	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef typename Allocator::const_pointer          const_pointer;$/;"	t	class:boost::container::stable_vector	access:public
const_pointer	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef typename A::const_pointer               const_pointer;$/;"	t	class:boost::container::basic_string	access:public
const_pointer	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename A::const_pointer               const_pointer;$/;"	t	class:boost::container::vector	access:public
const_pointer_cast	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^boost::interprocess::intersegment_ptr<T> const_pointer_cast(const boost::interprocess::intersegment_ptr<U> &r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::intersegment_ptr<U> &r)
const_pointer_cast	/usr/include/boost/interprocess/offset_ptr.hpp	/^   const_pointer_cast(boost::interprocess::offset_ptr<U> const & r)$/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::offset_ptr<U> const & r)
const_pointer_cast	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^shared_ptr<T, VoidAllocator, Deleter> const_pointer_cast(shared_ptr<U, VoidAllocator, Deleter> const & r)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<U, VoidAllocator, Deleter> const & r)
const_reference	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
const_reference	/usr/include/boost/interprocess/allocators/allocator.hpp	/^                     <const value_type>::type   const_reference;$/;"	t	class:boost::interprocess::allocator	access:public
const_reference	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::detail::array_allocation_impl	access:public
const_reference	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::detail::node_pool_allocation_impl	access:public
const_reference	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
const_reference	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
const_reference	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^                     <const value_type>::type            const_reference;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
const_reference	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef val_alloc_cref                       const_reference;$/;"	t	class:boost::container::deque	access:public
const_reference	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef typename vector_t::const_reference         const_reference;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
const_reference	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename A::const_reference                const_reference;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
const_reference	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::const_reference        const_reference;$/;"	t	class:boost::container::flat_map	access:public
const_reference	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::const_reference        const_reference;$/;"	t	class:boost::container::flat_multimap	access:public
const_reference	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::const_reference        const_reference;$/;"	t	class:boost::container::flat_multiset	access:public
const_reference	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::const_reference        const_reference;$/;"	t	class:boost::container::flat_set	access:public
const_reference	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename A::const_reference             const_reference;$/;"	t	class:boost::container::list	access:public
const_reference	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::const_reference        const_reference;$/;"	t	class:boost::container::map	access:public
const_reference	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::const_reference        const_reference;$/;"	t	class:boost::container::multimap	access:public
const_reference	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::const_reference        const_reference;$/;"	t	class:boost::container::multiset	access:public
const_reference	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::const_reference        const_reference;$/;"	t	class:boost::container::set	access:public
const_reference	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename A::const_reference             const_reference;$/;"	t	class:boost::container::slist	access:public
const_reference	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef typename Allocator::const_reference        const_reference;$/;"	t	class:boost::container::stable_vector	access:public
const_reference	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef typename A::const_reference             const_reference;$/;"	t	class:boost::container::basic_string	access:public
const_reference	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename A::const_reference             const_reference;$/;"	t	class:boost::container::vector	access:public
const_reference	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^                     <const value_type>::type                  const_reference;$/;"	t	class:boost::interprocess::shared_ptr	access:public
const_reference	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^                     <T>::type            const_reference;$/;"	t	class:boost::interprocess::weak_ptr	access:private
const_reverse_iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:boost::container::deque	access:public
const_reverse_iterator	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef std::reverse_iterator<const_iterator>      const_reverse_iterator;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
const_reverse_iterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
const_reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::container::flat_map	access:public
const_reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::container::flat_multimap	access:public
const_reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::container::flat_multiset	access:public
const_reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::container::flat_set	access:public
const_reverse_iterator	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;$/;"	t	class:boost::container::list	access:public
const_reverse_iterator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::container::map	access:public
const_reverse_iterator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::container::multimap	access:public
const_reverse_iterator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::container::multiset	access:public
const_reverse_iterator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::const_reverse_iterator const_reverse_iterator;$/;"	t	class:boost::container::set	access:public
const_reverse_iterator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef std::reverse_iterator<const_iterator>      const_reverse_iterator;$/;"	t	class:boost::container::stable_vector	access:public
const_reverse_iterator	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:boost::container::basic_string	access:public
const_reverse_iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      const_reverse_iterator;$/;"	t	class:boost::container::vector	access:public
const_this_allocator	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^      <const this_type>::other               const_this_allocator;$/;"	t	class:boost::interprocess::detail::sp_counted_impl_pd	access:private
const_type	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typedef typename add_const_reference<Element>::type            const_type;$/;"	t	class:boost::container::containers_detail::get_impl	access:public
const_type	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typedef typename add_const_reference<Head>::type   const_type;$/;"	t	class:boost::container::containers_detail::get_impl	access:public
const_type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename add_const_reference<Element>::type            const_type;$/;"	t	class:boost::interprocess::detail::get_impl	access:public
const_type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename add_const_reference<Head>::type   const_type;$/;"	t	class:boost::interprocess::detail::get_impl	access:public
const_unique_iterator	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      const_unique_iterator                           const_unique_iterator;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
const_unique_iterator	/usr/include/boost/interprocess/segment_manager.hpp	/^      <typename unique_index_t::const_iterator, unique_transform> const_unique_iterator;$/;"	t	class:boost::interprocess::segment_manager	access:public
container	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^namespace boost{ namespace container{ namespace containers_detail{$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^namespace container {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/deque.hpp	/^namespace container {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^namespace container {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^namespace boost { namespace container { namespace containers_detail {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^namespace container { $/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^namespace container { $/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^namespace container {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^namespace container { $/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^namespace container {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^namespace container { $/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/math_functions.hpp	/^namespace container {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^namespace container { $/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^namespace container {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^namespace container {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^namespace container {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^namespace container { $/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/pool_common.hpp	/^namespace container {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^namespace container { $/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^namespace container {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/type_traits.hpp	/^namespace container { $/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^namespace container {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/value_init.hpp	/^namespace container { $/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^namespace container { $/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^namespace container {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^namespace container {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^namespace container {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/list.hpp	/^namespace container {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/map.hpp	/^namespace container {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/set.hpp	/^namespace container {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   Container* container;$/;"	m	class:std::insert_iterator	access:protected
Container	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef boost::container::slist<T, A> Container;$/;"	t	class:std::insert_iterator	access:protected
container	/usr/include/boost/interprocess/containers/container/slist.hpp	/^namespace container {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^namespace container {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/string.hpp	/^namespace container {$/;"	n	namespace:boost
container	/usr/include/boost/interprocess/containers/container/vector.hpp	/^namespace container {$/;"	n	namespace:boost
containers_detail	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^namespace boost{ namespace container{ namespace containers_detail{$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^namespace boost { namespace container { namespace containers_detail {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^namespace containers_detail  {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/detail/math_functions.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/detail/pool_common.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/detail/type_traits.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/detail/value_init.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/list.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/slist.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/string.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
containers_detail	/usr/include/boost/interprocess/containers/container/vector.hpp	/^namespace containers_detail {$/;"	n	namespace:boost::container
container_m	/usr/include/boost/interprocess/detail/move.hpp	/^   C* container_m;$/;"	m	class:boost::interprocess::back_move_insert_iterator	access:private
container_m	/usr/include/boost/interprocess/detail/move.hpp	/^   C* container_m;$/;"	m	class:boost::interprocess::front_move_insert_iterator	access:private
container_m	/usr/include/boost/interprocess/detail/move.hpp	/^   C* container_m;$/;"	m	class:boost::interprocess::move_insert_iterator	access:private
container_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      >::type                                      container_type;$/;"	t	struct:boost::container::containers_detail::intrusive_rbtree_type	access:public
container_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^      >::type                                   container_type;$/;"	t	struct:boost::container::containers_detail::intrusive_list_type	access:public
container_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      >::type                                   container_type;$/;"	t	struct:boost::container::containers_detail::intrusive_slist_type	access:public
container_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef Container           container_type;$/;"	t	class:std::insert_iterator	access:public
container_type	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef C container_type;$/;"	t	class:boost::interprocess::back_move_insert_iterator	access:public
container_type	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef C container_type;$/;"	t	class:boost::interprocess::front_move_insert_iterator	access:public
container_type	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef C container_type;$/;"	t	class:boost::interprocess::move_insert_iterator	access:public
Control	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short Control;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
control_word_t	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   struct control_word_t$/;"	s	class:boost::interprocess::interprocess_upgradable_mutex	access:private
copy	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type copy(CharT* s, size_type n, size_type pos = 0) const $/;"	f	class:boost::container::basic_string	access:public	signature:(CharT* s, size_type n, size_type pos = 0) const
copy_all_to	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void copy_all_to(Iterator p) = 0;$/;"	p	struct:boost::container::containers_detail::advanced_insert_aux_int	access:public	signature:(Iterator p)
copy_all_to	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void copy_all_to(Iterator p)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:public	signature:(Iterator p)
copy_all_to	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void copy_all_to(Iterator p)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_proxy	access:public	signature:(Iterator p)
copy_all_to	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void copy_all_to(Iterator)$/;"	f	struct:boost::container::containers_detail::default_construct_aux_proxy	access:public	signature:(Iterator)
copy_n	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^OutIt copy_n(InIt first, typename std::iterator_traits<InIt>::difference_type length, OutIt dest)$/;"	f	namespace:boost::container	signature:(InIt first, typename std::iterator_traits<InIt>::difference_type length, OutIt dest)
copy_n_dispatch	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^OutIt copy_n_dispatch(InIt first, typename std::iterator_traits<InIt>::difference_type length, OutIt dest, containers_detail::bool_<false>)$/;"	f	namespace:boost::container	signature:(InIt first, typename std::iterator_traits<InIt>::difference_type length, OutIt dest, containers_detail::bool_<false>)
copy_n_dispatch	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^T *copy_n_dispatch(const T *first, typename std::iterator_traits<const T*>::difference_type length, T *dest, containers_detail::bool_<true>)$/;"	f	namespace:boost::container	signature:(const T *first, typename std::iterator_traits<const T*>::difference_type length, T *dest, containers_detail::bool_<true>)
copy_on_write	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , copy_on_write$/;"	e	enum:boost::interprocess::__anon10
copy_some_and_update	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void copy_some_and_update(Iterator , difference_type division_count, bool first_n)$/;"	f	struct:boost::container::containers_detail::default_construct_aux_proxy	access:public	signature:(Iterator , difference_type division_count, bool first_n)
copy_some_and_update	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void copy_some_and_update(Iterator p, difference_type division_count, bool first_n)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:public	signature:(Iterator p, difference_type division_count, bool first_n)
copy_some_and_update	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void copy_some_and_update(Iterator pos, difference_type division_count, bool first) = 0;$/;"	p	struct:boost::container::containers_detail::advanced_insert_aux_int	access:public	signature:(Iterator pos, difference_type division_count, bool first)
copy_some_and_update	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void copy_some_and_update(Iterator pos, difference_type division_count, bool first_n)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_proxy	access:public	signature:(Iterator pos, difference_type division_count, bool first_n)
CorruptedSegment	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^      CorruptedSegment$/;"	e	enum:boost::interprocess::detail::managed_open_or_create_impl::__anon7
corrupted_error	/usr/include/boost/interprocess/errors.hpp	/^   corrupted_error,$/;"	e	enum:boost::interprocess::error_code_t
count	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   size_type count(const key_type& k) const$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const key_type& k) const
count	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   size_type count(const key_type& k) const$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& k) const
count	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   size_type count(const key_type& x) const $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& x) const
count	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   size_type count(const key_type& x) const $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const key_type& x) const
count	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   size_type count(const key_type& x) const $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const key_type& x) const
count	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   size_type count(const key_type& x) const $/;"	f	class:boost::container::flat_set	access:public	signature:(const key_type& x) const
count	/usr/include/boost/interprocess/containers/container/map.hpp	/^   size_type count(const key_type& x) const $/;"	f	class:boost::container::map	access:public	signature:(const key_type& x) const
count	/usr/include/boost/interprocess/containers/container/map.hpp	/^   size_type count(const key_type& x) const $/;"	f	class:boost::container::multimap	access:public	signature:(const key_type& x) const
count	/usr/include/boost/interprocess/containers/container/set.hpp	/^   size_type count(const key_type& x) const $/;"	f	class:boost::container::multiset	access:public	signature:(const key_type& x) const
count	/usr/include/boost/interprocess/containers/container/set.hpp	/^   size_type count(const key_type& x) const $/;"	f	class:boost::container::set	access:public	signature:(const key_type& x) const
counted_base_ptr	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^      <typename VoidAllocator::pointer, sp_counted_base>::type counted_base_ptr;$/;"	t	class:boost::interprocess::detail::shared_count	access:private
counted_base_ptr	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^      <typename VoidAllocator::pointer, sp_counted_base>::type counted_base_ptr;$/;"	t	class:boost::interprocess::detail::weak_count	access:private
counted_impl	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   typedef sp_counted_impl_pd<VoidAllocator, Deleter>       counted_impl;$/;"	t	class:boost::interprocess::detail::shared_count	access:private
counted_impl	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   typedef sp_counted_impl_pd<VoidAllocator, Deleter>    counted_impl;$/;"	t	class:boost::interprocess::detail::weak_count	access:private
counted_impl_allocator	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^      <counted_impl>::other                        counted_impl_allocator;$/;"	t	class:boost::interprocess::detail::shared_count	access:private
counted_impl_ptr	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^      <typename VoidAllocator::pointer, counted_impl>::type    counted_impl_ptr;$/;"	t	class:boost::interprocess::detail::shared_count	access:private
counted_impl_ptr	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^      <typename VoidAllocator::pointer, counted_impl>::type    counted_impl_ptr;$/;"	t	class:boost::interprocess::detail::weak_count	access:private
count_	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   SizeType count_;$/;"	m	struct:boost::container::containers_detail::default_construct_aux_proxy	access:public
crbegin	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_reverse_iterator crbegin() const $/;"	f	class:boost::container::deque	access:public	signature:() const
crbegin	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_reverse_iterator crbegin() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
crbegin	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_reverse_iterator crbegin() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
crbegin	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_reverse_iterator crbegin() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
crbegin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_reverse_iterator crbegin() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
crbegin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_reverse_iterator crbegin() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
crbegin	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const_reverse_iterator crbegin() const$/;"	f	class:boost::container::list	access:public	signature:() const
crbegin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_reverse_iterator crbegin() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
crbegin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_reverse_iterator crbegin() const $/;"	f	class:boost::container::set	access:public	signature:() const
crbegin	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_reverse_iterator crbegin()const{return this->rbegin();}$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
crbegin	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_reverse_iterator crbegin()const$/;"	f	class:boost::container::vector	access:public	signature:() const
CreateDirectory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall CreateDirectory(const char *, interprocess_security_attributes*);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *, interprocess_security_attributes*)
CreateDirectoryA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall CreateDirectoryA(const char *, interprocess_security_attributes*);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *, interprocess_security_attributes*)
CreateFileA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall CreateFileA (const char *, unsigned long, unsigned long, struct interprocess_security_attributes*, unsigned long, unsigned long, void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *, unsigned long, unsigned long, struct interprocess_security_attributes*, unsigned long, unsigned long, void *)
CreateFileMappingA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall CreateFileMappingA (void *, interprocess_security_attributes*, unsigned long, unsigned long, unsigned long, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, interprocess_security_attributes*, unsigned long, unsigned long, unsigned long, const char *)
CreateMutexA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall CreateMutexA(interprocess_security_attributes*, int, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(interprocess_security_attributes*, int, const char *)
CreateSemaphoreA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall CreateSemaphoreA(interprocess_security_attributes*, long, long, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(interprocess_security_attributes*, long, long, const char *)
create_always	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long create_always     = 2;$/;"	m	namespace:boost::interprocess::winapi
create_buckets	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   static bucket_ptr create_buckets(allocator_type &alloc, std::size_t num)$/;"	f	class:boost::interprocess::iunordered_set_index	access:private	signature:(allocator_type &alloc, std::size_t num)
create_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   static void create_device(DeviceAbstraction &dev, const char *name, std::size_t size, detail::false_)$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:private	signature:(DeviceAbstraction &dev, const char *name, std::size_t size, detail::false_)
create_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   static void create_device(DeviceAbstraction &dev, const char *name, std::size_t, detail::true_)$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:private	signature:(DeviceAbstraction &dev, const char *name, std::size_t, detail::true_)
create_directory	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool create_directory(const char *path)$/;"	f	namespace:boost::interprocess::detail	signature:(const char *path)
create_directory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool create_directory(const char *name, interprocess_security_attributes* security)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name, interprocess_security_attributes* security)
create_enum_t	/usr/include/boost/interprocess/creation_tags.hpp	/^enum create_enum_t$/;"	g	namespace:boost::interprocess::detail
create_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *create_file(const char *name, unsigned long access, unsigned long creation_flags, unsigned long attributes = 0)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name, unsigned long access, unsigned long creation_flags, unsigned long attributes = 0)
create_file_mapping	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void * create_file_mapping (void * handle, unsigned long access, unsigned long high_size, unsigned long low_size, const char * name)$/;"	f	namespace:boost::interprocess::winapi	signature:(void * handle, unsigned long access, unsigned long high_size, unsigned long low_size, const char * name)
create_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool  create_impl   (void *addr, std::size_t size)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:(void *addr, std::size_t size)
create_mutex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *create_mutex(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
create_new	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long create_new        = 1;$/;"	m	namespace:boost::interprocess::winapi
create_new_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline file_handle_t create_new_file$/;"	f	namespace:boost::interprocess::detail	signature:(const char *name, mode_t mode = read_write, bool temporary = false)
create_new_segment	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      virtual std::pair<void *, std::size_t> create_new_segment(std::size_t alloc_size)$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:(std::size_t alloc_size)
create_new_segment	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^   virtual std::pair<void *, std::size_t> create_new_segment(std::size_t mem) = 0;$/;"	p	class:boost::interprocess::multi_segment_services	access:public	signature:(std::size_t mem)
create_node	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   NodePtr create_node()$/;"	f	namespace:boost::container::containers_detail	signature:()
create_node	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   NodePtr create_node(Args &&...args)$/;"	f	namespace:boost::container::containers_detail	signature:(Args &&....args)
create_node_and_deallocator	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   Deallocator create_node_and_deallocator()$/;"	f	namespace:boost::container::containers_detail	signature:()
create_node_from_it	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   NodePtr create_node_from_it(It it)$/;"	f	namespace:boost::container::containers_detail	signature:(It it)
create_only	/usr/include/boost/interprocess/creation_tags.hpp	/^static const create_only_t    create_only    = create_only_t();$/;"	m	namespace:boost::interprocess
create_only_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct create_only_t {};$/;"	s	namespace:boost::interprocess
create_open_func	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   create_open_func(BasicManagedMemoryImpl * const frontend, detail::create_enum_t type)$/;"	f	class:boost::interprocess::detail::create_open_func	access:public	signature:(BasicManagedMemoryImpl * const frontend, detail::create_enum_t type)
create_open_func	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^class create_open_func$/;"	c	namespace:boost::interprocess::detail
create_open_func	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      create_open_func(self_t * const    frontend,$/;"	f	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public	signature:(self_t * const frontend, type_t type, std::size_t segment_number)
create_open_func	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   struct create_open_func$/;"	s	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
create_open_func_t	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   typedef detail::create_open_func<base_t>        create_open_func_t;   $/;"	t	class:boost::interprocess::basic_managed_mapped_file	access:private
create_open_func_t	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   typedef detail::create_open_func<base_t>        create_open_func_t;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:private
create_open_func_t	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   typedef detail::create_open_func<base_t>        create_open_func_t;$/;"	t	class:boost::interprocess::basic_managed_windows_shared_memory	access:private
create_or_open_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline file_handle_t create_or_open_file$/;"	f	namespace:boost::interprocess::detail	signature:(const char *name, mode_t mode = read_write, bool temporary = false)
create_posix_mapped_region	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^         create_posix_mapped_region(void *address, offset_t offset, std::size_t size)$/;"	f	class:boost::interprocess::detail::raw_mapped_region_creator	access:public	signature:(void *address, offset_t offset, std::size_t size)
create_semaphore	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *create_semaphore(long initialCount, const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(long initialCount, const char *name)
create_tmp_dir_and_get_filename	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void create_tmp_dir_and_get_filename(const char *filename, std::string &tmp_name)$/;"	f	namespace:boost::interprocess::detail	signature:(const char *filename, std::string &tmp_name)
crend	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_reverse_iterator crend() const $/;"	f	class:boost::container::deque	access:public	signature:() const
crend	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_reverse_iterator crend() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
crend	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_reverse_iterator crend() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
crend	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_reverse_iterator crend() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
crend	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_reverse_iterator crend() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
crend	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_reverse_iterator crend() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
crend	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const_reverse_iterator crend() const$/;"	f	class:boost::container::list	access:public	signature:() const
crend	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_reverse_iterator crend() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
crend	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_reverse_iterator crend() const $/;"	f	class:boost::container::set	access:public	signature:() const
crend	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_reverse_iterator crend()const  {return this->rend();}$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
crend	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_reverse_iterator crend()  const$/;"	f	class:boost::container::vector	access:public	signature:() const
CtorNArg	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   CtorNArg(Args && ...args)$/;"	f	struct:boost::interprocess::detail::CtorNArg	access:public	signature:(Args && ....args)
CtorNArg	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^struct CtorNArg : public placement_destroy<T>$/;"	s	namespace:boost::interprocess::detail	inherits:placement_destroy
ctrl	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t ctrl     :  2;$/;"	m	struct:boost::interprocess::intersegment_base::direct_addressing	access:public
ctrl	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t ctrl     :  2;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
ctrl	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t ctrl     :  2;$/;"	m	struct:boost::interprocess::intersegment_base::segmented_addressing	access:public
ctrl_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t ctrl_bits = 2;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
ct_max_pow2_less	/usr/include/boost/interprocess/detail/utilities.hpp	/^struct ct_max_pow2_less$/;"	s	namespace:boost::interprocess::detail
ct_rounded_size	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^struct ct_rounded_size$/;"	s	namespace:boost::container::containers_detail
ct_rounded_size	/usr/include/boost/interprocess/detail/utilities.hpp	/^struct ct_rounded_size$/;"	s	namespace:boost::interprocess::detail
cvalue_iterator	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef constant_iterator<CharT, difference_type> cvalue_iterator;$/;"	t	class:boost::container::basic_string	access:private
cvalue_iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef constant_iterator<T, difference_type>   cvalue_iterator;$/;"	t	class:boost::container::vector	access:private
cvoid_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      pointer_to_other<void_pointer, const void>::type   cvoid_pointer;$/;"	t	class:boost::interprocess::detail::cached_allocator_impl	access:public
cvoid_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      pointer_to_other<void_pointer, const void>::type   cvoid_pointer;$/;"	t	class:boost::interprocess::detail::node_pool_allocation_impl	access:private
cvoid_ptr	/usr/include/boost/interprocess/allocators/allocator.hpp	/^         <aux_pointer_t, const void>::type   cvoid_ptr;$/;"	t	class:boost::interprocess::allocator	access:private
c_	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   multiallocation_chain &c_;$/;"	m	class:boost::container::containers_detail::allocator_destroyer_and_chain_builder	access:private
c_	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   multiallocation_chain c_;$/;"	m	class:boost::container::containers_detail::allocator_multialloc_chain_node_deallocator	access:private
c_	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   C &c_;$/;"	m	class:boost::container::stable_vector_detail::clear_on_destroy	access:private
c_str	/usr/include/boost/interprocess/containers/container/string.hpp	/^   const CharT* c_str() const $/;"	f	class:boost::container::basic_string	access:public	signature:() const
Dacl	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_acl *Dacl;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
Data	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      Data(const Compare &comp,$/;"	f	struct:boost::container::containers_detail::flat_tree::Data	access:public	signature:(const Compare &comp, const allocator_t &alloc)
Data	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      Data(const Compare &comp,$/;"	f	struct:boost::container::containers_detail::flat_tree::Data	access:public	signature:(const Compare &comp, const vector_t &vect)
Data	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      Data(const Data &d)$/;"	f	struct:boost::container::containers_detail::flat_tree::Data	access:public	signature:(const Data &d)
Data	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      Data(const value_compare &comp,$/;"	f	struct:boost::container::containers_detail::flat_tree::Data	access:public	signature:(const value_compare &comp, const vector_t &vect)
Data	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   struct Data $/;"	s	class:boost::container::containers_detail::flat_tree	inherits:value_compare	access:private
data	/usr/include/boost/interprocess/containers/container/string.hpp	/^      value_type     data[UnalignedFinalInternalBufferChars];$/;"	m	struct:boost::container::containers_detail::basic_string_base::short_t	access:public
data	/usr/include/boost/interprocess/containers/container/string.hpp	/^   const CharT* data()  const $/;"	f	class:boost::container::basic_string	access:public	signature:() const
data	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_pointer data()  const $/;"	f	class:boost::container::vector	access:public	signature:() const
data	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   pointer data()        $/;"	f	class:boost::container::vector	access:public	signature:()
data	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   } data;$/;"	m	union:boost::interprocess::winapi::system_timeofday_information	typeref:struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
data	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void * data(){ return this+1; }  \/\/$/;"	f	class:boost::interprocess::detail::msg_hdr_t	access:public	signature:()
data_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   struct data_t$/;"	s	union:boost::interprocess::winapi::system_timeofday_information	access:public
deallocate	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void deallocate(const pointer &ptr, size_type)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &ptr, size_type)
deallocate	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate(const pointer &ptr, size_type count)$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:(const pointer &ptr, size_type count)
deallocate	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate(const pointer &ptr, size_type count)$/;"	f	class:boost::interprocess::detail::node_pool_allocation_impl	access:public	signature:(const pointer &ptr, size_type count)
deallocate	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void deallocate(pointer p, std::size_t n) $/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(pointer p, std::size_t n)
deallocate	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void  deallocate           (void *addr)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(void *addr)
deallocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void   deallocate          (void *addr);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(void *addr)
deallocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^void simple_seq_fit_impl<MutexFamily, VoidPointer>::deallocate(void* addr)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(void* addr)
deallocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void   deallocate          (void *addr);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(void *addr)
deallocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^void simple_seq_fit_impl<MutexFamily, VoidPointer>::deallocate(void* addr)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(void* addr)
deallocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void   deallocate          (void *addr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(void *addr)
deallocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::deallocate(void* addr)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(void* addr)
deallocate	/usr/include/boost/interprocess/segment_manager.hpp	/^   void   deallocate          (void *addr)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(void *addr)
deallocate_all_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_all_cached_nodes()$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:()
deallocate_block	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void deallocate_block() $/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:()
deallocate_cache	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_cache()$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:()
deallocate_free_blocks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_blocks()$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:()
deallocate_free_blocks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_blocks()$/;"	f	class:boost::interprocess::detail::node_pool_allocation_impl	access:public	signature:()
deallocate_free_blocks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_blocks()$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:()
deallocate_free_blocks	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void deallocate_free_blocks()$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:()
deallocate_free_blocks	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void deallocate_free_blocks()$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:()
deallocate_free_chunks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_chunks()$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:()
deallocate_free_chunks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_chunks()$/;"	f	class:boost::interprocess::detail::node_pool_allocation_impl	access:public	signature:()
deallocate_free_chunks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_free_chunks()$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:()
deallocate_free_chunks	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void deallocate_free_chunks()$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:()
deallocate_free_chunks	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void deallocate_free_chunks()$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:private	signature:()
deallocate_individual	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void deallocate_individual(multiallocation_chain chain)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(multiallocation_chain chain)
deallocate_individual	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_individual(multiallocation_chain chain)$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:(multiallocation_chain chain)
deallocate_individual	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_individual(multiallocation_chain chain)$/;"	f	class:boost::interprocess::detail::node_pool_allocation_impl	access:public	signature:(multiallocation_chain chain)
deallocate_many	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void deallocate_many(multiallocation_chain chain)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(multiallocation_chain chain)
deallocate_many	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_many(multiallocation_chain chain)$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:(multiallocation_chain chain)
deallocate_many	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void deallocate_many(multiallocation_chain chain)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(multiallocation_chain chain)
deallocate_many	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void deallocate_many(MemoryAlgorithm *memory_algo, multiallocation_chain chain)$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(MemoryAlgorithm *memory_algo, multiallocation_chain chain)
deallocate_many	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   deallocate_many(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::multiallocation_chain chain)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::multiallocation_chain chain)
deallocate_many	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void deallocate_many(multiallocation_chain chain);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(multiallocation_chain chain)
deallocate_many	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   deallocate_many(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::multiallocation_chain chain)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::multiallocation_chain chain)
deallocate_many	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void deallocate_many(multiallocation_chain chain);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(multiallocation_chain chain)
deallocate_many	/usr/include/boost/interprocess/segment_manager.hpp	/^   void deallocate_many(multiallocation_chain chain)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(multiallocation_chain chain)
deallocate_node	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_node(void *ptr)$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:(void *ptr)
deallocate_node	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void deallocate_node(void *pElem)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:(void *pElem)
deallocate_node	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void deallocate_node(void *ptr)$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:(void *ptr)
deallocate_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_nodes(multiallocation_chain &nodes, std::size_t num)$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:(multiallocation_chain &nodes, std::size_t num)
deallocate_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_nodes(multiallocation_chain chain)$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:(multiallocation_chain chain)
deallocate_nodes	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void deallocate_nodes(multiallocation_chain nodes)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:(multiallocation_chain nodes)
deallocate_nodes	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void deallocate_nodes(multiallocation_chain chain)$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:(multiallocation_chain chain)
deallocate_one	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void deallocate_one(const pointer &p)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &p)
deallocate_one	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_one(const pointer &p)$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:(const pointer &p)
deallocate_one	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void deallocate_one(const pointer &p)$/;"	f	class:boost::interprocess::detail::node_pool_allocation_impl	access:public	signature:(const pointer &p)
deallocate_one	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void deallocate_one(NodePtr p)$/;"	f	namespace:boost::container::containers_detail	signature:(NodePtr p)
deallocate_one	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void deallocate_one(NodePtr p, allocator_v1)$/;"	f	namespace:boost::container::containers_detail	signature:(NodePtr p, allocator_v1)
deallocate_one	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void deallocate_one(NodePtr p, allocator_v2)$/;"	f	namespace:boost::container::containers_detail	signature:(NodePtr p, allocator_v2)
deallocate_one	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void deallocate_one(node_type_ptr_t p)$/;"	f	class:boost::container::stable_vector	access:private	signature:(node_type_ptr_t p)
deallocate_one	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void deallocate_one(node_type_ptr_t p, allocator_v1)$/;"	f	class:boost::container::stable_vector	access:private	signature:(node_type_ptr_t p, allocator_v1)
deallocate_one	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void deallocate_one(node_type_ptr_t p, allocator_v2)$/;"	f	class:boost::container::stable_vector	access:private	signature:(node_type_ptr_t p, allocator_v2)
Deallocator	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef containers_detail::scoped_deallocator<NodeAlloc>      Deallocator;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
decrement	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void decrement()$/;"	f	class:boost::container::constant_iterator	access:private	signature:()
decrement	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void decrement()$/;"	f	class:boost::container::default_construct_iterator	access:private	signature:()
decrement	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void decrement()$/;"	f	class:boost::container::emplace_iterator	access:private	signature:()
decrement	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void decrement()$/;"	f	class:boost::container::repeat_iterator	access:private	signature:()
decrement	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   void decrement()$/;"	f	class:boost::container::transform_iterator	access:private	signature:()
decrement	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void decrement()$/;"	f	class:boost::container::stable_vector_detail::iterator	access:private	signature:()
decrement	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   void decrement()$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:()
dec_offset	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void dec_offset(std::ptrdiff_t bytes)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(std::ptrdiff_t bytes)
dec_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^   void dec_offset(std::ptrdiff_t bytes)$/;"	f	class:boost::interprocess::offset_ptr	access:private	signature:(std::ptrdiff_t bytes)
dec_ref_count	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   std::size_t dec_ref_count()$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:()
default_construct_aux_proxy	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   default_construct_aux_proxy(SizeType count)$/;"	f	struct:boost::container::containers_detail::default_construct_aux_proxy	access:public	signature:(SizeType count)
default_construct_aux_proxy	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^struct default_construct_aux_proxy$/;"	s	namespace:boost::container::containers_detail	inherits:advanced_insert_aux_int
default_construct_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   default_construct_iterator()$/;"	f	class:boost::container::default_construct_iterator	access:public	signature:()
default_construct_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   explicit default_construct_iterator(Difference range_size)$/;"	f	class:boost::container::default_construct_iterator	access:public	signature:(Difference range_size)
default_construct_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^class default_construct_iterator$/;"	c	namespace:boost::container	inherits:std::iterator
DEFAULT_MAX_CACHED_NODES	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   enum { DEFAULT_MAX_CACHED_NODES = 64 };$/;"	e	enum:boost::interprocess::detail::cached_allocator_impl::__anon2
defer_lock	/usr/include/boost/interprocess/sync/lock_options.hpp	/^static const defer_lock_type      defer_lock      = defer_lock_type();$/;"	m	namespace:boost::interprocess
defer_lock_type	/usr/include/boost/interprocess/sync/lock_options.hpp	/^struct defer_lock_type{};$/;"	s	namespace:boost::interprocess
DeleteFileA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall    DeleteFileA (const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *)
deleter	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   struct deleter$/;"	s	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
deleter	/usr/include/boost/interprocess/segment_manager.hpp	/^   struct deleter$/;"	s	class:boost::interprocess::segment_manager	access:public
deleter	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^   deleter(segment_manager_pointer pmngr)$/;"	f	class:boost::interprocess::deleter	access:public	signature:(segment_manager_pointer pmngr)
deleter	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^class deleter$/;"	c	namespace:boost::interprocess
deleter	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef typename ManagedMemory::template deleter<T>::type      deleter;$/;"	t	struct:boost::interprocess::managed_shared_ptr	access:public
deleter_const_reference	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   typedef typename detail::add_reference<const D>::type deleter_const_reference;$/;"	t	class:boost::interprocess::unique_ptr	access:private
deleter_reference	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   typedef typename detail::add_reference<D>::type deleter_reference;$/;"	t	class:boost::interprocess::unique_ptr	access:private
deleter_type	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef Deleter deleter_type;$/;"	t	class:boost::interprocess::scoped_ptr	access:public
deleter_type	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   typedef D deleter_type;$/;"	t	class:boost::interprocess::unique_ptr	access:public
delete_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long delete_access = 0x00010000L;$/;"	m	namespace:boost::interprocess::winapi
delete_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool delete_file(const char *name)$/;"	f	namespace:boost::interprocess::detail	signature:(const char *name)
delete_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool delete_file(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
delete_group	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static bool delete_group(segment_group_id id)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(segment_group_id id)
delete_node	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void delete_node(void_ptr p)$/;"	f	class:boost::container::stable_vector	access:private	signature:(void_ptr p)
delete_subdirectories	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool delete_subdirectories(const std::string &refcstrRootDirectory, const char *dont_delete_this)$/;"	f	namespace:boost::interprocess::detail	signature:(const std::string &refcstrRootDirectory, const char *dont_delete_this)
delete_subdirectories_recursive	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool delete_subdirectories_recursive$/;"	f	namespace:boost::interprocess::detail	signature:(const std::string &refcstrRootDirectory, const char *dont_delete_this, unsigned int count)
deque	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   deque(const deque& x)$/;"	f	class:boost::container::deque	access:public	signature:(const deque& x)
deque	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   deque(InpIt first, InpIt last, const allocator_type& a = allocator_type())$/;"	f	class:boost::container::deque	access:public	signature:(InpIt first, InpIt last, const allocator_type& a = allocator_type())
deque	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   deque(size_type n, const value_type& value,$/;"	f	class:boost::container::deque	access:public	signature:(size_type n, const value_type& value, const allocator_type& a = allocator_type())
deque	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   explicit deque(const allocator_type& a = allocator_type()) $/;"	f	class:boost::container::deque	access:public	signature:(const allocator_type& a = allocator_type())
deque	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   explicit deque(size_type n) : Base(allocator_type(), n)$/;"	f	class:boost::container::deque	access:public	signature:(size_type n)
deque	/usr/include/boost/interprocess/containers/container/deque.hpp	/^class deque : protected deque_base<T, Alloc>$/;"	c	namespace:boost::container	inherits:deque_base
deque_base	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   deque_base(const allocator_type& a) $/;"	f	class:boost::container::deque_base	access:public	signature:(const allocator_type& a)
deque_base	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   deque_base(const allocator_type& a, std::size_t num_elements)$/;"	f	class:boost::container::deque_base	access:public	signature:(const allocator_type& a, std::size_t num_elements)
deque_base	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   deque_base(const deque_base&);$/;"	p	class:boost::container::deque_base	access:private	signature:(const deque_base&)
deque_base	/usr/include/boost/interprocess/containers/container/deque.hpp	/^class deque_base$/;"	c	namespace:boost::container
deque_buf_size	/usr/include/boost/interprocess/containers/container/deque.hpp	/^inline std::size_t deque_buf_size(std::size_t size) $/;"	f	namespace:boost::container	signature:(std::size_t size)
deque_value_traits	/usr/include/boost/interprocess/containers/container/deque.hpp	/^struct deque_value_traits$/;"	s	namespace:boost::container
dereference	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   const T & dereference() const$/;"	f	class:boost::container::constant_iterator	access:private	signature:() const
dereference	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   const T & dereference() const$/;"	f	class:boost::container::default_construct_iterator	access:private	signature:() const
dereference	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   const T & dereference() const$/;"	f	class:boost::container::emplace_iterator	access:private	signature:() const
dereference	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   T & dereference() const$/;"	f	class:boost::container::repeat_iterator	access:private	signature:() const
dereference	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   typename UnaryFunction::result_type dereference() const$/;"	f	class:boost::container::transform_iterator	access:private	signature:() const
dereference	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   reference dereference() const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:private	signature:() const
dereference	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   typename UnaryFunction::result_type dereference() const$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:() const
derivation_hook	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      >::type                                                  derivation_hook;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
derivation_hook	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      >::type        derivation_hook;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
derived	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   const Derived *derived() const$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:private	signature:() const
derived	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   const Derived *derived() const$/;"	f	class:boost::interprocess::detail::node_pool_allocation_impl	access:private	signature:() const
derived	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   Derived *derived()$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:private	signature:()
derived	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   Derived *derived()$/;"	f	class:boost::interprocess::detail::node_pool_allocation_impl	access:private	signature:()
destroy	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   void destroy(const pointer &ptr)$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &ptr)
destroy	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void destroy(const pointer &ptr)$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:(const pointer &ptr)
destroy	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   static void destroy(const NodePtr &ptr)$/;"	f	namespace:boost::container::containers_detail	signature:(const NodePtr &ptr)
destroy	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void destroy(pointer p)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(pointer p)
destroy	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void destroy(pointer p, size_type n)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(pointer p, size_type n)
destroy	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void destroy(value_type* p)$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:protected	signature:(value_type* p)
destroy	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   void destroy(void *mem)$/;"	f	struct:boost::interprocess::detail::placement_destroy	access:private	signature:(void *mem)
destroy	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool destroy(const CharType *name)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(const CharType *name)
destroy	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool destroy(const detail::unique_instance_t *const )$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(const detail::unique_instance_t *const )
destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool destroy(const CharType *name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const CharType *name)
destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool destroy(const detail::unique_instance_t *)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const detail::unique_instance_t *)
destroy	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void destroy() \/\/ nothrow$/;"	f	class:boost::interprocess::detail::sp_counted_impl_pd	access:public	signature:()
destroyer	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      destroyer(node_alloc_holder &holder)$/;"	f	struct:boost::container::containers_detail::destroyer	access:public	signature:(node_alloc_holder &holder)
destroyer	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   struct destroyer$/;"	s	namespace:boost::container::containers_detail	access:protected
Destroyer	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef allocator_destroyer<NodeAlloc>             Destroyer;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
Destroyer	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef containers_detail::allocator_destroyer<NodeAlloc>     Destroyer;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
Destroyer	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef containers_detail::allocator_destroyer<NodeAlloc>     Destroyer;$/;"	t	class:boost::container::list	access:private
Destroyer	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef containers_detail::allocator_destroyer<NodeAlloc>     Destroyer;$/;"	t	class:boost::container::slist	access:private
destroy_buckets	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   static void destroy_buckets$/;"	f	class:boost::interprocess::iunordered_set_index	access:private	signature:(allocator_type &alloc, bucket_ptr buckets, std::size_t num)
destroy_if_last_link_func	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   destroy_if_last_link_func(NodePool *pool) $/;"	f	struct:boost::interprocess::detail::destroy_if_last_link_func	access:public	signature:(NodePool *pool)
destroy_if_last_link_func	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct destroy_if_last_link_func$/;"	s	namespace:boost::interprocess::detail
destroy_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool destroy_impl()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:()
destroy_n	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void destroy_n(value_type* p, size_type n)$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:protected	signature:(value_type* p, size_type n)
destroy_n	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   virtual void destroy_n(void *mem, std::size_t num, std::size_t &destroyed) = 0;$/;"	p	struct:boost::interprocess::detail::in_place_interface	access:public	signature:(void *mem, std::size_t num, std::size_t &destroyed)
destroy_n	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   virtual void destroy_n(void *mem, std::size_t num, std::size_t &destroyed)$/;"	f	struct:boost::interprocess::detail::placement_destroy	access:public	signature:(void *mem, std::size_t num, std::size_t &destroyed)
destroy_node	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void destroy_node(NodePtr node)$/;"	f	namespace:boost::container::containers_detail	signature:(NodePtr node)
destroy_node_pool_if_last_link	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^inline void destroy_node_pool_if_last_link(NodePool *pool)$/;"	f	namespace:boost::interprocess::detail	signature:(NodePool *pool)
destroy_ptr	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void destroy_ptr(const T *ptr)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(const T *ptr)
destroy_ptr	/usr/include/boost/interprocess/segment_manager.hpp	/^   void destroy_ptr(const T *p)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const T *p)
detail	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/creation_tags.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/detail/atomic.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^namespace boost { namespace interprocess { namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/detail/intermodule_singleton.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/detail/interprocess_tester.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^namespace detail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/detail/math_functions.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/detail/mpl.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/detail/type_traits.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/detail/utilities.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/indexes/map_index.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/mapped_region.hpp	/^namespace detail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/mapped_region.hpp	/^namespace detail{ class raw_mapped_region_creator; }$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/sync/named_condition.hpp	/^namespace detail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^namespace detail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^namespace detail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^namespace detail{$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/sync/posix/ptime_to_timespec.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^namespace detail {$/;"	n	namespace:boost::interprocess
detail	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^namespace detail{ class interprocess_tester; }$/;"	n	namespace:boost::interprocess
detail_really_deep_namespace	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^namespace detail_really_deep_namespace {$/;"	n	namespace:boost::container
detail_really_deep_namespace	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^namespace detail_really_deep_namespace {$/;"	n	namespace:boost::interprocess
device_type	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   typedef detail::file_wrapper device_type;$/;"	t	class:boost::interprocess::basic_managed_mapped_file	access:public
device_type	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   typedef shared_memory_object                       device_type;$/;"	t	class:boost::interprocess::basic_managed_shared_memory	access:public
diff	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   std::ptrdiff_t diff(const self_t &other) const$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const self_t &other) const
difference_type	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef std::ptrdiff_t                                difference_type;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
difference_type	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef std::ptrdiff_t                       difference_type;$/;"	t	class:boost::interprocess::allocator	access:public
difference_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef std::ptrdiff_t                                difference_type;$/;"	t	class:boost::interprocess::detail::array_allocation_impl	access:public
difference_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef std::ptrdiff_t                                difference_type;$/;"	t	class:boost::interprocess::detail::node_pool_allocation_impl	access:public
difference_type	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef std::ptrdiff_t                                difference_type;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
difference_type	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef std::ptrdiff_t                                difference_type;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
difference_type	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef std::ptrdiff_t                                difference_type;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
difference_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef std::ptrdiff_t                    difference_type;$/;"	t	class:boost::container::deque_base::const_iterator	access:public
difference_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef std::ptrdiff_t                    difference_type;$/;"	t	class:boost::container::deque_base::iterator	access:public
difference_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef std::ptrdiff_t                       difference_type;$/;"	t	class:boost::container::deque	access:public
difference_type	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   typedef typename advanced_insert_aux_int<T, Iterator>::difference_type difference_type;$/;"	t	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:public
difference_type	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   typedef typename advanced_insert_aux_int<T, Iterator>::difference_type difference_type;$/;"	t	struct:boost::container::containers_detail::advanced_insert_aux_proxy	access:public
difference_type	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   typedef typename advanced_insert_aux_int<T, Iterator>::difference_type difference_type;$/;"	t	struct:boost::container::containers_detail::default_construct_aux_proxy	access:public
difference_type	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   typedef typename std::iterator_traits<Iterator>::difference_type difference_type;$/;"	t	struct:boost::container::containers_detail::advanced_insert_aux_int	access:public
difference_type	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef typename allocator_type::difference_type   difference_type;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
difference_type	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename NodeAlloc::difference_type        difference_type;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
difference_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      typedef rbtree_difference_type        difference_type;$/;"	t	class:boost::container::containers_detail::rbtree::const_iterator	access:public
difference_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename A::difference_type                difference_type;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
difference_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::difference_type        difference_type;$/;"	t	class:boost::container::flat_map	access:public
difference_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::difference_type        difference_type;$/;"	t	class:boost::container::flat_multimap	access:public
difference_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::difference_type        difference_type;$/;"	t	class:boost::container::flat_multiset	access:public
difference_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::difference_type        difference_type;$/;"	t	class:boost::container::flat_set	access:public
difference_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^      typedef list_difference_type        difference_type;$/;"	t	class:boost::container::list::const_iterator	access:public
difference_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename A::difference_type             difference_type;$/;"	t	class:boost::container::list	access:public
difference_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::difference_type        difference_type;$/;"	t	class:boost::container::map	access:public
difference_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::difference_type        difference_type;$/;"	t	class:boost::container::multimap	access:public
difference_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::difference_type        difference_type;$/;"	t	class:boost::container::multiset	access:public
difference_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::difference_type        difference_type;$/;"	t	class:boost::container::set	access:public
difference_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      typedef list_difference_type        difference_type;$/;"	t	class:boost::container::slist::const_iterator	access:public
difference_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename A::difference_type             difference_type;$/;"	t	class:boost::container::slist	access:public
difference_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef void                difference_type;$/;"	t	class:std::insert_iterator	access:public
difference_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      <Pointer>::difference_type             difference_type;$/;"	t	class:boost::container::stable_vector_detail::iterator	access:public
difference_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef typename iterator::difference_type         difference_type;$/;"	t	class:boost::container::stable_vector	access:public
difference_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef typename A::difference_type             difference_type;$/;"	t	class:boost::container::basic_string	access:public
difference_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename A::difference_type             difference_type;$/;"	t	class:boost::container::vector	access:public
difference_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename std::iterator_traits<Pointer>::difference_type   difference_type;$/;"	t	class:boost::container::containers_detail::vector_const_iterator	access:public
difference_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename vector_const_iterator<Pointer>::difference_type  difference_type;$/;"	t	class:boost::container::containers_detail::vector_iterator	access:public
difference_type	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef std::ptrdiff_t                          difference_type;$/;"	t	class:boost::interprocess::intersegment_ptr	access:public
difference_type	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef typename std::iterator_traits<iterator_type>::difference_type   difference_type;$/;"	t	class:boost::interprocess::move_iterator	access:public
difference_type	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef std::ptrdiff_t                    difference_type;$/;"	t	class:boost::interprocess::offset_ptr	access:public
direct	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      direct_addressing    direct;$/;"	m	union:boost::interprocess::intersegment_base::members_t	access:public
direct_addressing	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   struct direct_addressing$/;"	s	struct:boost::interprocess::intersegment_base	access:public
disable_if	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct disable_if : public enable_if_c<!Cond::value, T> {};$/;"	s	namespace:boost::container::containers_detail	inherits:enable_if_c
disable_if	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct disable_if : public enable_if_c<!Cond::value, T> {};$/;"	s	namespace:boost::interprocess::detail	inherits:enable_if_c
dispatch	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   static false_t dispatch(...);$/;"	p	class:boost::container::containers_detail::is_convertible	access:private	signature:(....)
dispatch	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   static true_t dispatch(U);$/;"	p	class:boost::container::containers_detail::is_convertible	access:private	signature:(U)
dispatch	/usr/include/boost/interprocess/detail/move.hpp	/^   static false_t dispatch(...);$/;"	p	class:boost::interprocess::move_detail::is_convertible	access:private	signature:(....)
dispatch	/usr/include/boost/interprocess/detail/move.hpp	/^   static true_t dispatch(U);$/;"	p	class:boost::interprocess::move_detail::is_convertible	access:private	signature:(U)
dispatch	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static false_t dispatch(...);$/;"	p	class:boost::interprocess::detail::is_convertible	access:private	signature:(....)
dispatch	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static true_t dispatch(U);$/;"	p	class:boost::interprocess::detail::is_convertible	access:private	signature:(U)
dispose	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void dispose() \/\/ nothrow$/;"	f	class:boost::interprocess::detail::sp_counted_impl_pd	access:public	signature:()
distance_to	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   Difference distance_to(const this_type &other)const$/;"	f	class:boost::container::constant_iterator	access:private	signature:(const this_type &other) const
distance_to	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   Difference distance_to(const this_type &other)const$/;"	f	class:boost::container::default_construct_iterator	access:private	signature:(const this_type &other) const
distance_to	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   Difference distance_to(const this_type &other)const$/;"	f	class:boost::container::repeat_iterator	access:private	signature:(const this_type &other) const
distance_to	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   std::ptrdiff_t distance_to(const this_type &other)const$/;"	f	class:boost::container::emplace_iterator	access:private	signature:(const this_type &other) const
distance_to	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   typename Iterator::difference_type distance_to(const transform_iterator &other)const$/;"	f	class:boost::container::transform_iterator	access:private	signature:(const transform_iterator &other) const
distance_to	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   std::ptrdiff_t distance_to(const iterator& x)const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:private	signature:(const iterator& x) const
distance_to	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   typename Iterator::difference_type distance_to(const transform_iterator &other)const$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:(const transform_iterator &other) const
DoCreate	/usr/include/boost/interprocess/creation_tags.hpp	/^{  DoCreate, DoOpen, DoOpenOrCreate   };$/;"	e	enum:boost::interprocess::detail::create_enum_t
DoCreate	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      enum type_t {  DoCreate, DoOpen, DoOpenOrCreate  };$/;"	e	enum:boost::interprocess::basic_managed_multi_shared_memory::create_open_func::type_t
dont_close_on_destruction	/usr/include/boost/interprocess/detail/interprocess_tester.hpp	/^   static void dont_close_on_destruction(T &t)$/;"	f	class:boost::interprocess::detail::interprocess_tester	access:public	signature:(T &t)
dont_close_on_destruction	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   void dont_close_on_destruction()$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/mapped_region.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void mapped_region::dont_close_on_destruction()$/;"	f	class:boost::interprocess::mapped_region	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_condition	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline void named_condition::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_condition	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_mutex	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline void named_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_mutex	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline void named_recursive_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_semaphore	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline void named_semaphore::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_semaphore	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void dont_close_on_destruction();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::dont_close_on_destruction()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
dont_close_on_destruction	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   void dont_close_on_destruction()$/;"	f	class:boost::interprocess::detail::named_semaphore_wrapper	access:private	signature:()
DoOpen	/usr/include/boost/interprocess/creation_tags.hpp	/^{  DoCreate, DoOpen, DoOpenOrCreate   };$/;"	e	enum:boost::interprocess::detail::create_enum_t
DoOpen	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      enum type_t {  DoCreate, DoOpen, DoOpenOrCreate  };$/;"	e	enum:boost::interprocess::basic_managed_multi_shared_memory::create_open_func::type_t
DoOpenOrCreate	/usr/include/boost/interprocess/creation_tags.hpp	/^{  DoCreate, DoOpen, DoOpenOrCreate   };$/;"	e	enum:boost::interprocess::detail::create_enum_t
DoOpenOrCreate	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      enum type_t {  DoCreate, DoOpen, DoOpenOrCreate  };$/;"	e	enum:boost::interprocess::basic_managed_multi_shared_memory::create_open_func::type_t
do_assign	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void do_assign(const pair<const A, B> &p)$/;"	f	struct:boost::container::containers_detail::rbtree_node	access:private	signature:(const pair<const A, B> &p)
do_assign	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void do_assign(const std::pair<const A, B> &p)$/;"	f	struct:boost::container::containers_detail::rbtree_node	access:private	signature:(const std::pair<const A, B> &p)
do_assign	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void do_assign(const V &v)$/;"	f	struct:boost::container::containers_detail::rbtree_node	access:private	signature:(const V &v)
do_clear_	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   bool do_clear_;$/;"	m	class:boost::container::stable_vector_detail::clear_on_destroy	access:private
do_destroy	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      void do_destroy(typename block_multiset_t::pointer to_deallocate, AlignOnlyFalse)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl::block_destroyer	access:private	signature:(typename block_multiset_t::pointer to_deallocate, AlignOnlyFalse)
do_destroy	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      void do_destroy(typename block_multiset_t::pointer to_deallocate, AlignOnlyTrue)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl::block_destroyer	access:private	signature:(typename block_multiset_t::pointer to_deallocate, AlignOnlyTrue)
do_increment	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   void do_increment(detail::false_, const index_tuple<IdxPack...>&)$/;"	f	struct:boost::interprocess::detail::CtorNArg	access:private	signature:(detail::false_, const index_tuple<IdxPack...>&)
do_increment	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   void do_increment(detail::true_, const index_tuple<IdxPack...>&)$/;"	f	struct:boost::interprocess::detail::CtorNArg	access:private	signature:(detail::true_, const index_tuple<IdxPack...>&)
do_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool do_receive(block_t block,$/;"	p	class:boost::interprocess::message_queue	access:private	signature:(block_t block, void *buffer, std::size_t buffer_size, std::size_t &recvd_size, unsigned int &priority, const ptime &abs_time)
do_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue::do_receive(block_t block,$/;"	f	class:boost::interprocess::message_queue	signature:(block_t block, void *buffer, std::size_t buffer_size, std::size_t &recvd_size, unsigned int &priority, const boost::posix_time::ptime &abs_time)
do_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool do_send(block_t block,$/;"	p	class:boost::interprocess::message_queue	access:private	signature:(block_t block, const void *buffer, std::size_t buffer_size, unsigned int priority, const ptime &abs_time)
do_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline bool message_queue::do_send(block_t block,$/;"	f	class:boost::interprocess::message_queue	signature:(block_t block, const void *buffer, std::size_t buffer_size, unsigned int priority, const boost::posix_time::ptime &abs_time)
do_swap	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^inline void do_swap(T& x, T& y)$/;"	f	namespace:boost::container::containers_detail	signature:(T& x, T& y)
do_swap	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline void do_swap(T& x, T& y)$/;"	f	namespace:boost::interprocess::detail	signature:(T& x, T& y)
do_timed_wait	/usr/include/boost/interprocess/sync/emulation/interprocess_condition.hpp	/^inline bool interprocess_condition::do_timed_wait$/;"	f	class:boost::interprocess::interprocess_condition	signature:(const boost::posix_time::ptime &abs_time, interprocess_mutex &mut)
do_timed_wait	/usr/include/boost/interprocess/sync/emulation/interprocess_condition.hpp	/^inline bool interprocess_condition::do_timed_wait(bool tout_enabled,$/;"	f	class:boost::interprocess::interprocess_condition	signature:(bool tout_enabled, const boost::posix_time::ptime &abs_time, interprocess_mutex &mut)
do_timed_wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      bool do_timed_wait(bool tout_enabled, const boost::posix_time::ptime &abs_time, interprocess_mutex &mut);$/;"	p	class:boost::interprocess::interprocess_condition	access:private	signature:(bool tout_enabled, const boost::posix_time::ptime &abs_time, interprocess_mutex &mut)
do_timed_wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   bool do_timed_wait(const boost::posix_time::ptime &abs_time, interprocess_mutex &mut);$/;"	p	class:boost::interprocess::interprocess_condition	access:private	signature:(const boost::posix_time::ptime &abs_time, interprocess_mutex &mut)
do_timed_wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   bool do_timed_wait(Lock& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::named_condition	access:private	signature:(Lock& lock, const boost::posix_time::ptime &abs_time)
do_timed_wait	/usr/include/boost/interprocess/sync/posix/interprocess_condition.hpp	/^inline bool interprocess_condition::do_timed_wait$/;"	f	class:boost::interprocess::interprocess_condition	signature:(const boost::posix_time::ptime &abs_time, interprocess_mutex &mut)
do_wait	/usr/include/boost/interprocess/sync/emulation/interprocess_condition.hpp	/^inline void interprocess_condition::do_wait(interprocess_mutex &mut)$/;"	f	class:boost::interprocess::interprocess_condition	signature:(interprocess_mutex &mut)
do_wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   void do_wait(interprocess_mutex  &mut);$/;"	p	class:boost::interprocess::interprocess_condition	access:private	signature:(interprocess_mutex &mut)
do_wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void do_wait(Lock& lock)$/;"	f	class:boost::interprocess::named_condition	access:private	signature:(Lock& lock)
do_wait	/usr/include/boost/interprocess/sync/posix/interprocess_condition.hpp	/^inline void interprocess_condition::do_wait(interprocess_mutex &mut)$/;"	f	class:boost::interprocess::interprocess_condition	signature:(interprocess_mutex &mut)
dummy	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^   dummy()$/;"	f	struct:boost::container::detail_really_deep_namespace::dummy	access:public	signature:()
dummy	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^struct dummy$/;"	s	namespace:boost::container::detail_really_deep_namespace
dummy	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   class false_t { char dummy[2]; };$/;"	m	class:boost::container::containers_detail::is_convertible::false_t	access:private
dummy	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^   void dummy(){}$/;"	f	struct:boost::container::containers_detail::impl::has_version	access:public	signature:()
dummy	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t dummy    :  sizeof(std::size_t)*CHAR_BIT - 2;$/;"	m	struct:boost::interprocess::intersegment_base::direct_addressing	access:public
dummy	/usr/include/boost/interprocess/detail/move.hpp	/^   class false_t { char dummy[2]; };$/;"	m	class:boost::interprocess::move_detail::is_convertible::false_t	access:private
dummy	/usr/include/boost/interprocess/detail/mpl.hpp	/^   class false_t { char dummy[2]; };$/;"	m	class:boost::interprocess::detail::is_convertible::false_t	access:private
dummy	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   dummy()$/;"	f	struct:boost::interprocess::detail_really_deep_namespace::dummy	access:public	signature:()
dummy	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct dummy$/;"	s	namespace:boost::interprocess::detail_really_deep_namespace
dummy	/usr/include/boost/interprocess/detail/win32_api.hpp	/^        } dummy;$/;"	m	union:boost::interprocess::winapi::system_info::__anon18	typeref:struct:boost::interprocess::winapi::system_info::__anon18::__anon19	access:public
dummy	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      }dummy;$/;"	m	union:boost::interprocess::winapi::interprocess_overlapped::__anon16	typeref:struct:boost::interprocess::winapi::interprocess_overlapped::__anon16::__anon17	access:public
DuplicateHandle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall DuplicateHandle$/;"	p	namespace:boost::interprocess::winapi	signature:( void *hSourceProcessHandle, void *hSourceHandle , void *hTargetProcessHandle, void **lpTargetHandle , unsigned long dwDesiredAccess, int bInheritHandle , unsigned long dwOptions)
duplicate_close_source	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long duplicate_close_source  = (unsigned long)0x00000001;$/;"	m	namespace:boost::interprocess::winapi
duplicate_current_process_handle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool duplicate_current_process_handle$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hSourceHandle, void **lpTargetHandle)
duplicate_same_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long duplicate_same_access   = (unsigned long)0x00000002;$/;"	m	namespace:boost::interprocess::winapi
dwActiveProcessorMask	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long * dwActiveProcessorMask;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
dwAllocationGranularity	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long dwAllocationGranularity;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
dwFileAttributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long dwFileAttributes;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
dwHighDateTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  dwHighDateTime;$/;"	m	struct:boost::interprocess::winapi::interprocess_filetime	access:public
dwLowDateTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  dwLowDateTime;  $/;"	m	struct:boost::interprocess::winapi::interprocess_filetime	access:public
dwNumberOfProcessors	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long dwNumberOfProcessors;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
dwOemId	/usr/include/boost/interprocess/detail/win32_api.hpp	/^        unsigned long dwOemId;          \/\/ Obsolete field...do not use$/;"	m	union:boost::interprocess::winapi::system_info::__anon18	access:public
dwPageSize	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long dwPageSize;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
dwProcessorType	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned long dwProcessorType;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
dwReserved	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      unsigned long dwReserved;$/;"	m	struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
dwReserved0	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long dwReserved0;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
dwReserved1	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long dwReserved1;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
dynamic_cast_tag	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^struct dynamic_cast_tag {};$/;"	s	namespace:boost::interprocess::detail
dynamic_pointer_cast	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^boost::interprocess::intersegment_ptr<T> dynamic_pointer_cast(const boost::interprocess::intersegment_ptr<U> &r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::intersegment_ptr<U> &r)
dynamic_pointer_cast	/usr/include/boost/interprocess/offset_ptr.hpp	/^   dynamic_pointer_cast(boost::interprocess::offset_ptr<U> const & r)$/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::offset_ptr<U> const & r)
dynamic_pointer_cast	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^shared_ptr<T, VoidAllocator, Deleter> dynamic_pointer_cast(shared_ptr<U, VoidAllocator, Deleter> const & r)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<U, VoidAllocator, Deleter> const & r)
ebo_holder	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      ebo_holder(const allocator_type &a)$/;"	f	struct:boost::container::stable_vector::ebo_holder	access:public	signature:(const allocator_type &a)
ebo_holder	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   struct ebo_holder$/;"	s	class:boost::container::stable_vector	inherits:node_allocator_type	access:private
ec	/usr/include/boost/interprocess/errors.hpp	/^   error_code_t   ec; $/;"	m	struct:boost::interprocess::ec_xlate	access:public
ec_table	/usr/include/boost/interprocess/errors.hpp	/^static const ec_xlate ec_table[] =$/;"	m	namespace:boost::interprocess
ec_xlate	/usr/include/boost/interprocess/errors.hpp	/^struct ec_xlate$/;"	s	namespace:boost::interprocess
Element	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typedef typename tuple_element<I-1, tuple<Values...> >::type   Element;$/;"	t	class:boost::container::containers_detail::get_impl	access:private
Element	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename tuple_element<I-1, tuple<Values...> >::type   Element;$/;"	t	class:boost::interprocess::detail::get_impl	access:private
element_type	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   typedef T element_type;$/;"	t	class:boost::interprocess::enable_shared_from_this	access:public
element_type	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   typedef T element_type;$/;"	t	class:boost::interprocess::intrusive_ptr	access:public
element_type	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef T element_type;$/;"	t	class:boost::interprocess::scoped_ptr	access:public
element_type	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef T                                                   element_type;$/;"	t	class:boost::interprocess::shared_ptr	access:public
element_type	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   typedef T element_type;$/;"	t	class:boost::interprocess::unique_ptr	access:public
element_type	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   typedef T element_type;$/;"	t	class:boost::interprocess::weak_ptr	access:public
emplace	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator emplace(const_iterator p)$/;"	f	class:boost::container::deque	access:public	signature:(const_iterator p)
emplace	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator emplace(const_iterator p, Args&&... args)$/;"	f	class:boost::container::deque	access:public	signature:(const_iterator p, Args&&... args)
emplace	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator emplace()$/;"	f	class:boost::container::flat_map	access:public	signature:()
emplace	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator emplace()$/;"	f	class:boost::container::flat_multimap	access:public	signature:()
emplace	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator emplace(Args&&... args)$/;"	f	class:boost::container::flat_map	access:public	signature:(Args&&.... args)
emplace	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator emplace(Args&&... args)$/;"	f	class:boost::container::flat_multimap	access:public	signature:(Args&&.... args)
emplace	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator emplace()$/;"	f	class:boost::container::flat_multiset	access:public	signature:()
emplace	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator emplace()$/;"	f	class:boost::container::flat_set	access:public	signature:()
emplace	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator emplace(Args&&... args)$/;"	f	class:boost::container::flat_multiset	access:public	signature:(Args&&.... args)
emplace	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator emplace(Args&&... args)$/;"	f	class:boost::container::flat_set	access:public	signature:(Args&&.... args)
emplace	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator emplace(const_iterator p)$/;"	f	class:boost::container::list	access:public	signature:(const_iterator p)
emplace	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator emplace(const_iterator p, Args&&... args)$/;"	f	class:boost::container::list	access:public	signature:(const_iterator p, Args&&... args)
emplace	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator emplace()$/;"	f	class:boost::container::map	access:public	signature:()
emplace	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator emplace()$/;"	f	class:boost::container::multimap	access:public	signature:()
emplace	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator emplace(Args&&... args)$/;"	f	class:boost::container::map	access:public	signature:(Args&&.... args)
emplace	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator emplace(Args&&... args)$/;"	f	class:boost::container::multimap	access:public	signature:(Args&&.... args)
emplace	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator emplace()$/;"	f	class:boost::container::multiset	access:public	signature:()
emplace	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator emplace()$/;"	f	class:boost::container::set	access:public	signature:()
emplace	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator emplace(Args&&... args)$/;"	f	class:boost::container::multiset	access:public	signature:(Args&&.... args)
emplace	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator emplace(Args&&... args)$/;"	f	class:boost::container::set	access:public	signature:(Args&&.... args)
emplace	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator emplace(const_iterator p)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator p)
emplace	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator emplace(const_iterator p, Args&&... args)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator p, Args&&... args)
emplace	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator emplace(const_iterator position)$/;"	f	class:boost::container::stable_vector	access:public	signature:(const_iterator position)
emplace	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator emplace(const_iterator position, Args && ...args)$/;"	f	class:boost::container::stable_vector	access:public	signature:(const_iterator position, Args && ...args)
emplace	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator emplace(const_iterator position)$/;"	f	class:boost::container::vector	access:public	signature:(const_iterator position)
emplace	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator emplace(const_iterator position, Args && ...args)$/;"	f	class:boost::container::vector	access:public	signature:(const_iterator position, Args && ...args)
emplace_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator emplace_after(const_iterator prev)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev)
emplace_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator emplace_after(const_iterator prev, Args&&... args)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev, Args&&... args)
emplace_back	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void emplace_back()$/;"	f	class:boost::container::deque	access:public	signature:()
emplace_back	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void emplace_back(Args&&... args)$/;"	f	class:boost::container::deque	access:public	signature:(Args&&.... args)
emplace_back	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void emplace_back()$/;"	f	class:boost::container::list	access:public	signature:()
emplace_back	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void emplace_back(Args&&... args)$/;"	f	class:boost::container::list	access:public	signature:(Args&&.... args)
emplace_back	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void emplace_back()$/;"	f	class:boost::container::stable_vector	access:public	signature:()
emplace_back	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void emplace_back(Args &&...args)$/;"	f	class:boost::container::stable_vector	access:public	signature:(Args &&....args)
emplace_back	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void emplace_back()$/;"	f	class:boost::container::vector	access:public	signature:()
emplace_back	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void emplace_back(Args &&...args)$/;"	f	class:boost::container::vector	access:public	signature:(Args &&....args)
emplace_equal	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator emplace_equal()$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:()
emplace_equal	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator emplace_equal(Args&&... args)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(Args&&.... args)
emplace_equal	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator emplace_equal()$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:()
emplace_equal	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator emplace_equal(Args&&... args)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(Args&&.... args)
emplace_front	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void emplace_front()$/;"	f	class:boost::container::deque	access:public	signature:()
emplace_front	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void emplace_front(Args&&... args)$/;"	f	class:boost::container::deque	access:public	signature:(Args&&.... args)
emplace_front	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void emplace_front()$/;"	f	class:boost::container::list	access:public	signature:()
emplace_front	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void emplace_front(Args&&... args)$/;"	f	class:boost::container::list	access:public	signature:(Args&&.... args)
emplace_front	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void emplace_front()$/;"	f	class:boost::container::slist	access:public	signature:()
emplace_front	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void emplace_front(Args&&... args)$/;"	f	class:boost::container::slist	access:public	signature:(Args&&.... args)
emplace_functor	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   emplace_functor()$/;"	f	struct:boost::container::emplace_functor	access:public	signature:()
emplace_functor	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   emplace_functor(Args&&... args)$/;"	f	struct:boost::container::emplace_functor	access:public	signature:(Args&&.... args)
emplace_functor	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^struct emplace_functor$/;"	s	namespace:boost::container
emplace_hint	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator emplace_hint(const_iterator hint)$/;"	f	class:boost::container::flat_map	access:public	signature:(const_iterator hint)
emplace_hint	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator emplace_hint(const_iterator hint)$/;"	f	class:boost::container::flat_multimap	access:public	signature:(const_iterator hint)
emplace_hint	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator emplace_hint(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::flat_map	access:public	signature:(const_iterator hint, Args&&... args)
emplace_hint	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator emplace_hint(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::flat_multimap	access:public	signature:(const_iterator hint, Args&&... args)
emplace_hint	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator emplace_hint(const_iterator hint)$/;"	f	class:boost::container::flat_multiset	access:public	signature:(const_iterator hint)
emplace_hint	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator emplace_hint(const_iterator hint)$/;"	f	class:boost::container::flat_set	access:public	signature:(const_iterator hint)
emplace_hint	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator emplace_hint(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::flat_multiset	access:public	signature:(const_iterator hint, Args&&... args)
emplace_hint	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator emplace_hint(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::flat_set	access:public	signature:(const_iterator hint, Args&&... args)
emplace_hint	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator emplace_hint(const_iterator hint)$/;"	f	class:boost::container::map	access:public	signature:(const_iterator hint)
emplace_hint	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator emplace_hint(const_iterator hint)$/;"	f	class:boost::container::multimap	access:public	signature:(const_iterator hint)
emplace_hint	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator emplace_hint(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::map	access:public	signature:(const_iterator hint, Args&&... args)
emplace_hint	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator emplace_hint(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::multimap	access:public	signature:(const_iterator hint, Args&&... args)
emplace_hint	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator emplace_hint(const_iterator hint)$/;"	f	class:boost::container::multiset	access:public	signature:(const_iterator hint)
emplace_hint	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator emplace_hint(const_iterator hint)$/;"	f	class:boost::container::set	access:public	signature:(const_iterator hint)
emplace_hint	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator emplace_hint(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::multiset	access:public	signature:(const_iterator hint, Args&&... args)
emplace_hint	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator emplace_hint(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::set	access:public	signature:(const_iterator hint, Args&&... args)
emplace_hint_equal	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator emplace_hint_equal(const_iterator hint)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const_iterator hint)
emplace_hint_equal	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator emplace_hint_equal(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const_iterator hint, Args&&... args)
emplace_hint_equal	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator emplace_hint_equal(const_iterator hint)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator hint)
emplace_hint_equal	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator emplace_hint_equal(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator hint, Args&&... args)
emplace_hint_unique	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator emplace_hint_unique(const_iterator hint)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const_iterator hint)
emplace_hint_unique	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator emplace_hint_unique(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const_iterator hint, Args&&... args)
emplace_hint_unique	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator emplace_hint_unique(const_iterator hint)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator hint)
emplace_hint_unique	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator emplace_hint_unique(const_iterator hint, Args&&... args)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator hint, Args&&... args)
emplace_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   emplace_iterator()$/;"	f	class:boost::container::emplace_iterator	access:public	signature:()
emplace_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   explicit emplace_iterator(E&e)$/;"	f	class:boost::container::emplace_iterator	access:public	signature:(E&e)
emplace_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^class emplace_iterator$/;"	c	namespace:boost::container	inherits:std::iterator
emplace_unique	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator emplace_unique()$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:()
emplace_unique	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator emplace_unique(Args&&... args)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(Args&&.... args)
emplace_unique	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator emplace_unique()$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:()
emplace_unique	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator emplace_unique(Args&&... args)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(Args&&.... args)
emplace_unique_hint_impl	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator emplace_unique_hint_impl(const_iterator hint, NodePtr p)$/;"	f	class:boost::container::containers_detail::rbtree	access:private	signature:(const_iterator hint, NodePtr p)
emplace_unique_impl	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator emplace_unique_impl(NodePtr p)$/;"	f	class:boost::container::containers_detail::rbtree	access:private	signature:(NodePtr p)
empty	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   bool empty() const $/;"	f	class:boost::container::deque	access:public	signature:() const
empty	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   bool empty() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
empty	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   bool empty() const$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:() const
empty	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   bool empty() const$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:() const
empty	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   bool empty() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
empty	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   bool empty() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
empty	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   bool empty() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
empty	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   bool empty() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
empty	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   bool empty() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
empty	/usr/include/boost/interprocess/containers/container/list.hpp	/^   bool empty() const $/;"	f	class:boost::container::list	access:public	signature:() const
empty	/usr/include/boost/interprocess/containers/container/map.hpp	/^   bool empty() const $/;"	f	class:boost::container::map	access:public	signature:() const
empty	/usr/include/boost/interprocess/containers/container/map.hpp	/^   bool empty() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
empty	/usr/include/boost/interprocess/containers/container/set.hpp	/^   bool empty() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
empty	/usr/include/boost/interprocess/containers/container/set.hpp	/^   bool empty() const $/;"	f	class:boost::container::set	access:public	signature:() const
empty	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   bool empty() const $/;"	f	class:boost::container::slist	access:public	signature:() const
empty	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   bool empty() const$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
empty	/usr/include/boost/interprocess/containers/container/string.hpp	/^   bool empty() const$/;"	f	class:boost::container::basic_string	access:public	signature:() const
empty	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   bool empty() const $/;"	f	class:boost::container::vector	access:public	signature:() const
enable_if	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct enable_if : public enable_if_c<Cond::value, T> {};$/;"	s	namespace:boost::container::containers_detail	inherits:enable_if_c
enable_if	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct enable_if : public enable_if_c<Cond::value, T> {};$/;"	s	namespace:boost::interprocess::detail	inherits:enable_if_c
enable_if_c	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct enable_if_c {$/;"	s	namespace:boost::container::containers_detail
enable_if_c	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct enable_if_c<false, T> {};$/;"	s	namespace:boost::container::containers_detail
enable_if_c	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct enable_if_c {$/;"	s	namespace:boost::interprocess::detail
enable_if_c	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct enable_if_c<false, T> {};$/;"	s	namespace:boost::interprocess::detail
enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   enable_shared_from_this()$/;"	f	class:boost::interprocess::enable_shared_from_this	access:protected	signature:()
enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   enable_shared_from_this(enable_shared_from_this const &)$/;"	f	class:boost::interprocess::enable_shared_from_this	access:protected	signature:(enable_shared_from_this const &)
enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^class enable_shared_from_this$/;"	c	namespace:boost::interprocess
end	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::deque	access:public	signature:() const
end	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator end() $/;"	f	class:boost::container::deque	access:public	signature:()
end	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
end	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator end() $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:()
end	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   iterator end()$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:()
end	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   iterator end()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
end	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_iterator end() const$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
end	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator end()$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:()
end	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
end	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
end	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator end() $/;"	f	class:boost::container::flat_map	access:public	signature:()
end	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator end() $/;"	f	class:boost::container::flat_multimap	access:public	signature:()
end	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
end	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
end	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator end() $/;"	f	class:boost::container::flat_multiset	access:public	signature:()
end	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator end() $/;"	f	class:boost::container::flat_set	access:public	signature:()
end	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const_iterator end() const$/;"	f	class:boost::container::list	access:public	signature:() const
end	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator end()$/;"	f	class:boost::container::list	access:public	signature:()
end	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::map	access:public	signature:() const
end	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
end	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator end() $/;"	f	class:boost::container::map	access:public	signature:()
end	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator end() $/;"	f	class:boost::container::multimap	access:public	signature:()
end	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
end	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::set	access:public	signature:() const
end	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator end() $/;"	f	class:boost::container::multiset	access:public	signature:()
end	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator end() $/;"	f	class:boost::container::set	access:public	signature:()
end	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   const_iterator end() const$/;"	f	class:boost::container::slist	access:public	signature:() const
end	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator end()$/;"	f	class:boost::container::slist	access:public	signature:()
end	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_iterator  end()const           {return const_iterator(get_end_node());}$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
end	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator        end()                {return iterator(get_end_node());}$/;"	f	class:boost::container::stable_vector	access:public	signature:()
end	/usr/include/boost/interprocess/containers/container/string.hpp	/^   const_iterator end() const $/;"	f	class:boost::container::basic_string	access:public	signature:() const
end	/usr/include/boost/interprocess/containers/container/string.hpp	/^   iterator end()$/;"	f	class:boost::container::basic_string	access:public	signature:()
end	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_iterator end()   const$/;"	f	class:boost::container::vector	access:public	signature:() const
end	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator end()        $/;"	f	class:boost::container::vector	access:public	signature:()
end	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   const_iterator end() const$/;"	f	class:boost::interprocess::null_index	access:public	signature:() const
end	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   iterator end()$/;"	f	class:boost::interprocess::null_index	access:public	signature:()
EndCtrlBlockBytes	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t EndCtrlBlockBytes   = detail::ct_rounded_size<sizeof(SizeHolder), Alignment>::value;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
EndCtrlBlockUnits	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t EndCtrlBlockUnits   = EndCtrlBlockBytes\/Alignment;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
end_	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^      const char *      end_;$/;"	m	struct:boost::container::containers_detail::private_node_pool_impl::is_between	access:private
end_node	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      node_type_base_t end_node;$/;"	m	struct:boost::container::stable_vector::ebo_holder	access:public
equal	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   bool equal(const this_type &other) const$/;"	f	class:boost::container::constant_iterator	access:private	signature:(const this_type &other) const
equal	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   bool equal(const this_type &other) const$/;"	f	class:boost::container::default_construct_iterator	access:private	signature:(const this_type &other) const
equal	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   bool equal(const this_type &other) const$/;"	f	class:boost::container::emplace_iterator	access:private	signature:(const this_type &other) const
equal	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   bool equal(const this_type &other) const$/;"	f	class:boost::container::repeat_iterator	access:private	signature:(const this_type &other) const
equal	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   bool equal(const transform_iterator &other) const$/;"	f	class:boost::container::transform_iterator	access:private	signature:(const transform_iterator &other) const
equal	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   bool equal(const iterator& x) const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:private	signature:(const iterator& x) const
equal	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool equal(const self_t &y) const$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const self_t &y) const
equal	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   bool equal(const transform_iterator &other) const$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:(const transform_iterator &other) const
equal_comp	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool equal_comp(const block_header &b) const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:(const block_header &b) const
equal_function	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   struct equal_function$/;"	s	struct:boost::interprocess::iunordered_set_index_aux	access:public
equal_function	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_aux::equal_function            equal_function;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
equal_range	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   std::pair<const_iterator, const_iterator> equal_range(const key_type& k) const$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const key_type& k) const
equal_range	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   std::pair<iterator,iterator> equal_range(const key_type& k)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const key_type& k)
equal_range	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   std::pair<const_iterator, const_iterator> equal_range(const key_type& k) const$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& k) const
equal_range	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   std::pair<iterator,iterator> equal_range(const key_type& k)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& k)
equal_range	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^      equal_range(const key_type& x) const $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const key_type& x) const
equal_range	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   std::pair<const_iterator,const_iterator> equal_range(const key_type& x) const $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& x) const
equal_range	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   std::pair<iterator,iterator> equal_range(const key_type& x) $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& x)
equal_range	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   std::pair<iterator,iterator> equal_range(const key_type& x) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const key_type& x)
equal_range	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^      equal_range(const key_type& x) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const key_type& x)
equal_range	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^      equal_range(const key_type& x) $/;"	f	class:boost::container::flat_set	access:public	signature:(const key_type& x)
equal_range	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^      equal_range(const key_type& x) const $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const key_type& x) const
equal_range	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^      equal_range(const key_type& x) const $/;"	f	class:boost::container::flat_set	access:public	signature:(const key_type& x) const
equal_range	/usr/include/boost/interprocess/containers/container/map.hpp	/^      equal_range(const key_type& x) const $/;"	f	class:boost::container::multimap	access:public	signature:(const key_type& x) const
equal_range	/usr/include/boost/interprocess/containers/container/map.hpp	/^   std::pair<const_iterator,const_iterator> equal_range(const key_type& x) const $/;"	f	class:boost::container::map	access:public	signature:(const key_type& x) const
equal_range	/usr/include/boost/interprocess/containers/container/map.hpp	/^   std::pair<iterator,iterator> equal_range(const key_type& x) $/;"	f	class:boost::container::map	access:public	signature:(const key_type& x)
equal_range	/usr/include/boost/interprocess/containers/container/map.hpp	/^   std::pair<iterator,iterator> equal_range(const key_type& x) $/;"	f	class:boost::container::multimap	access:public	signature:(const key_type& x)
equal_range	/usr/include/boost/interprocess/containers/container/set.hpp	/^      equal_range(const key_type& x) $/;"	f	class:boost::container::multiset	access:public	signature:(const key_type& x)
equal_range	/usr/include/boost/interprocess/containers/container/set.hpp	/^      equal_range(const key_type& x) $/;"	f	class:boost::container::set	access:public	signature:(const key_type& x)
equal_range	/usr/include/boost/interprocess/containers/container/set.hpp	/^      equal_range(const key_type& x) const $/;"	f	class:boost::container::multiset	access:public	signature:(const key_type& x) const
equal_range	/usr/include/boost/interprocess/containers/container/set.hpp	/^      equal_range(const key_type& x) const $/;"	f	class:boost::container::set	access:public	signature:(const key_type& x) const
equal_systemwide_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline bool equal_systemwide_thread_id(const OS_systemwide_thread_id_t &id1, const OS_systemwide_thread_id_t &id2)$/;"	f	namespace:boost::interprocess::detail	signature:(const OS_systemwide_thread_id_t &id1, const OS_systemwide_thread_id_t &id2)
equal_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline bool equal_thread_id(OS_thread_id_t id1, OS_thread_id_t id2)$/;"	f	namespace:boost::interprocess::detail	signature:(OS_thread_id_t id1, OS_thread_id_t id2)
equal_to_value	/usr/include/boost/interprocess/containers/container/list.hpp	/^      equal_to_value(const value_type &t)$/;"	f	class:boost::container::list::equal_to_value	access:public	signature:(const value_type &t)
equal_to_value	/usr/include/boost/interprocess/containers/container/list.hpp	/^   class equal_to_value$/;"	c	class:boost::container::list	access:private
equal_to_value	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      equal_to_value(const value_type &t)$/;"	f	class:boost::container::slist::equal_to_value	access:public	signature:(const value_type &t)
equal_to_value	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   class equal_to_value$/;"	c	class:boost::container::slist	access:private
Eq_traits	/usr/include/boost/interprocess/containers/container/string.hpp	/^   struct Eq_traits$/;"	s	class:boost::container::basic_string	inherits:std::binary_function	access:protected
erase	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::deque	access:public	signature:(const_iterator first, const_iterator last)
erase	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator erase(const_iterator pos) $/;"	f	class:boost::container::deque	access:public	signature:(const_iterator pos)
erase	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const_iterator first, const_iterator last)
erase	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator erase(const_iterator position)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const_iterator position)
erase	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   size_type erase(const key_type& k)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const key_type& k)
erase	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator first, const_iterator last)
erase	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator erase(const_iterator position)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator position)
erase	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   size_type erase(const key_type& k)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& k)
erase	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::flat_map	access:public	signature:(const_iterator first, const_iterator last)
erase	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::flat_multimap	access:public	signature:(const_iterator first, const_iterator last)
erase	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator erase(const_iterator position) $/;"	f	class:boost::container::flat_map	access:public	signature:(const_iterator position)
erase	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator erase(const_iterator position) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const_iterator position)
erase	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   size_type erase(const key_type& x) $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& x)
erase	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   size_type erase(const key_type& x) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const key_type& x)
erase	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator erase(const_iterator first, const_iterator last) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const_iterator first, const_iterator last)
erase	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator erase(const_iterator first, const_iterator last) $/;"	f	class:boost::container::flat_set	access:public	signature:(const_iterator first, const_iterator last)
erase	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator erase(const_iterator position) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const_iterator position)
erase	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator erase(const_iterator position) $/;"	f	class:boost::container::flat_set	access:public	signature:(const_iterator position)
erase	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   size_type erase(const key_type& x) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const key_type& x)
erase	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   size_type erase(const key_type& x) $/;"	f	class:boost::container::flat_set	access:public	signature:(const key_type& x)
erase	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::list	access:public	signature:(const_iterator first, const_iterator last)
erase	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator erase(const_iterator p) $/;"	f	class:boost::container::list	access:public	signature:(const_iterator p)
erase	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::map	access:public	signature:(const_iterator first, const_iterator last)
erase	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::multimap	access:public	signature:(const_iterator first, const_iterator last)
erase	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator erase(const_iterator position) $/;"	f	class:boost::container::map	access:public	signature:(const_iterator position)
erase	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator erase(const_iterator position) $/;"	f	class:boost::container::multimap	access:public	signature:(const_iterator position)
erase	/usr/include/boost/interprocess/containers/container/map.hpp	/^   size_type erase(const key_type& x) $/;"	f	class:boost::container::map	access:public	signature:(const key_type& x)
erase	/usr/include/boost/interprocess/containers/container/map.hpp	/^   size_type erase(const key_type& x) $/;"	f	class:boost::container::multimap	access:public	signature:(const key_type& x)
erase	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator erase(const_iterator first, const_iterator last) $/;"	f	class:boost::container::set	access:public	signature:(const_iterator first, const_iterator last)
erase	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::multiset	access:public	signature:(const_iterator first, const_iterator last)
erase	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator erase(const_iterator p) $/;"	f	class:boost::container::multiset	access:public	signature:(const_iterator p)
erase	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator erase(const_iterator p) $/;"	f	class:boost::container::set	access:public	signature:(const_iterator p)
erase	/usr/include/boost/interprocess/containers/container/set.hpp	/^   size_type erase(const key_type& x) $/;"	f	class:boost::container::multiset	access:public	signature:(const key_type& x)
erase	/usr/include/boost/interprocess/containers/container/set.hpp	/^   size_type erase(const key_type& x) $/;"	f	class:boost::container::set	access:public	signature:(const key_type& x)
erase	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator first, const_iterator last)
erase	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator erase(const_iterator p) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator p)
erase	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator erase(const_iterator first, const_iterator last)$/;"	f	class:boost::container::stable_vector	access:public	signature:(const_iterator first, const_iterator last)
erase	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator erase(const_iterator position)$/;"	f	class:boost::container::stable_vector	access:public	signature:(const_iterator position)
erase	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& erase(size_type pos = 0, size_type n = npos) $/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos = 0, size_type n = npos)
erase	/usr/include/boost/interprocess/containers/container/string.hpp	/^   iterator erase(iterator first, iterator last)$/;"	f	class:boost::container::basic_string	access:public	signature:(iterator first, iterator last)
erase	/usr/include/boost/interprocess/containers/container/string.hpp	/^   iterator erase(iterator position) $/;"	f	class:boost::container::basic_string	access:public	signature:(iterator position)
erase	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator erase(const_iterator first, const_iterator last) $/;"	f	class:boost::container::vector	access:public	signature:(const_iterator first, const_iterator last)
erase	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator erase(const_iterator position) $/;"	f	class:boost::container::vector	access:public	signature:(const_iterator position)
erase_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator erase_after(const_iterator before_first, const_iterator last) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator before_first, const_iterator last)
erase_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator erase_after(const_iterator prev_pos)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev_pos)
erase_key	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   size_type erase_key(const Key& k, const Comparator &comp, allocator_v1)$/;"	f	namespace:boost::container::containers_detail	signature:(const Key& k, const Comparator &comp, allocator_v1)
erase_key	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   size_type erase_key(const Key& k, const Comparator &comp, allocator_v2)$/;"	f	namespace:boost::container::containers_detail	signature:(const Key& k, const Comparator &comp, allocator_v2)
erase_last_mapping	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static bool erase_last_mapping(segment_group_id group_id)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(segment_group_id group_id)
erase_range	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   icont_iterator erase_range(icont_iterator first, icont_iterator last, allocator_v1)$/;"	f	namespace:boost::container::containers_detail	signature:(icont_iterator first, icont_iterator last, allocator_v1)
erase_range	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   icont_iterator erase_range(icont_iterator first, icont_iterator last, allocator_v2)$/;"	f	namespace:boost::container::containers_detail	signature:(icont_iterator first, icont_iterator last, allocator_v2)
error_already_exists	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_already_exists = 183L;$/;"	m	namespace:boost::interprocess::winapi
error_code_t	/usr/include/boost/interprocess/errors.hpp	/^enum error_code_t$/;"	g	namespace:boost::interprocess
error_file_not_found	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_file_not_found = 2u;$/;"	m	namespace:boost::interprocess::winapi
error_info	/usr/include/boost/interprocess/errors.hpp	/^   error_info(error_code_t ec = other_error )$/;"	f	struct:boost::interprocess::error_info	access:public	signature:(error_code_t ec = other_error )
error_info	/usr/include/boost/interprocess/errors.hpp	/^   error_info(native_error_t sys_err_code)$/;"	f	struct:boost::interprocess::error_info	access:public	signature:(native_error_t sys_err_code)
error_info	/usr/include/boost/interprocess/errors.hpp	/^struct error_info$/;"	s	namespace:boost::interprocess
error_lock_violation	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_lock_violation       = 33;$/;"	m	namespace:boost::interprocess::winapi
error_no_more_files	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_no_more_files  = 18u;$/;"	m	namespace:boost::interprocess::winapi
error_sharing_violation	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long error_sharing_violation = 32L;$/;"	m	namespace:boost::interprocess::winapi
error_sharing_violation_sleep_ms	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned int  error_sharing_violation_sleep_ms = 250u;$/;"	m	namespace:boost::interprocess::winapi
error_sharing_violation_tries	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned int  error_sharing_violation_tries = 3u;$/;"	m	namespace:boost::interprocess::winapi
exclusive_in	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      unsigned exclusive_in         : 1;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::control_word_t	access:public
exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      exclusive_rollback(control_word_t         &ctrl$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	access:public	signature:(control_word_t &ctrl ,interprocess_condition &first_gate)
exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   struct exclusive_rollback$/;"	s	class:boost::interprocess::interprocess_upgradable_mutex	access:private
expand_bwd	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type expand_bwd         = boost::container::expand_bwd;$/;"	m	namespace:boost::interprocess
expand_bwd	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^static const allocation_type expand_bwd         = (allocation_type)expand_bwd_v;$/;"	m	namespace:boost::container
expand_bwd_v	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^   expand_bwd_v     = 0x04,$/;"	e	enum:boost::container::allocation_type_v
expand_fwd	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type expand_fwd         = boost::container::expand_fwd;$/;"	m	namespace:boost::interprocess
expand_fwd	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^static const allocation_type expand_fwd         = (allocation_type)expand_fwd_v;$/;"	m	namespace:boost::container
expand_fwd_v	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^   expand_fwd_v     = 0x02,$/;"	e	enum:boost::container::allocation_type_v
expand_or_create_buckets	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   static bucket_ptr expand_or_create_buckets$/;"	f	class:boost::interprocess::iunordered_set_index	access:private	signature:( bucket_ptr old_buckets, const std::size_t old_num , allocator_type &alloc, const std::size_t new_num)
expansion_helper	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   void expansion_helper(ExpansionArgs &&...)$/;"	f	struct:boost::interprocess::detail::CtorNArg	access:private	signature:(ExpansionArgs &&....)
expired	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   bool expired() const \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:() const
extract_data	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   std::pair<void_pointer, void_pointer> extract_data()$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:()
extract_data	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   std::pair<void_pointer, void_pointer> extract_data()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
extract_multiallocation_chain	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   MultiallocationChain extract_multiallocation_chain()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
extract_version	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^struct extract_version$/;"	s	namespace:boost::container::containers_detail::impl
extract_version	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^struct extract_version<T, true>$/;"	s	namespace:boost::container::containers_detail::impl
ExtraPointers	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   static const size_type ExtraPointers = 3;$/;"	m	class:boost::container::stable_vector	access:private
false_	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^typedef bool_<false>       false_;$/;"	t	namespace:boost::container::containers_detail
false_	/usr/include/boost/interprocess/detail/mpl.hpp	/^typedef bool_<false>       false_;$/;"	t	namespace:boost::interprocess::detail
false_t	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   class false_t { char dummy[2]; };$/;"	c	class:boost::container::containers_detail::is_convertible	access:private
false_t	/usr/include/boost/interprocess/detail/move.hpp	/^   class false_t { char dummy[2]; };$/;"	c	class:boost::interprocess::move_detail::is_convertible	access:private
false_t	/usr/include/boost/interprocess/detail/mpl.hpp	/^   class false_t { char dummy[2]; };$/;"	c	class:boost::interprocess::detail::is_convertible	access:private
false_type	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^typedef false_ false_type;$/;"	t	namespace:boost::container::containers_detail
false_type	/usr/include/boost/interprocess/detail/mpl.hpp	/^typedef false_ false_type;$/;"	t	namespace:boost::interprocess::detail
FileName	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   wchar_t FileName[1];$/;"	m	struct:boost::interprocess::winapi::file_name_information_t	access:public
FileName	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   wchar_t FileName[1];$/;"	m	struct:boost::interprocess::winapi::file_rename_information_t	access:public
FileNameLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long FileNameLength;$/;"	m	struct:boost::interprocess::winapi::file_name_information_t	access:public
FileNameLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long FileNameLength;$/;"	m	struct:boost::interprocess::winapi::file_rename_information_t	access:public
FileTimeToLocalFileTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int  __stdcall FileTimeToLocalFileTime(const interprocess_filetime *in, const interprocess_filetime *out);$/;"	p	namespace:boost::interprocess::winapi	signature:(const interprocess_filetime *in, const interprocess_filetime *out)
file_access_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_access_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_alignment_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_alignment_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_allocation_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_allocation_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_all_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_all_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_alternate_name_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_alternate_name_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_attribute_archive	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_archive     = 0x00000020;$/;"	m	namespace:boost::interprocess::winapi
file_attribute_device	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_device      = 0x00000040;$/;"	m	namespace:boost::interprocess::winapi
file_attribute_directory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_directory   = 0x00000010;$/;"	m	namespace:boost::interprocess::winapi
file_attribute_hidden	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_hidden      = 0x00000002;$/;"	m	namespace:boost::interprocess::winapi
file_attribute_normal	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_normal      = 0x00000080;$/;"	m	namespace:boost::interprocess::winapi
file_attribute_readonly	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_readonly    = 0x00000001;$/;"	m	namespace:boost::interprocess::winapi
file_attribute_system	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_system      = 0x00000004;$/;"	m	namespace:boost::interprocess::winapi
file_attribute_temporary	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_attribute_temporary   = 0x00000100;$/;"	m	namespace:boost::interprocess::winapi
file_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_basic_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_begin	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^typedef enum { file_begin     = winapi::file_begin$/;"	e	enum:boost::interprocess::__anon11
file_begin	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_begin     = 0;$/;"	m	namespace:boost::interprocess::winapi
file_both_directory_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_both_directory_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_completion_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_completion_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_compression_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_compression_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_content_index_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_content_index_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_copy_on_write_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_copy_on_write_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_current	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , file_current   = winapi::file_current$/;"	e	enum:boost::interprocess::__anon11
file_current	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_current   = 1;$/;"	m	namespace:boost::interprocess::winapi
file_delete_on_close	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long file_delete_on_close = 0x00001000L;$/;"	m	namespace:boost::interprocess::winapi
file_directory_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_directory_information = 1,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_disposition_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_disposition_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_ea_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_ea_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_end	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , file_end       = winapi::file_end$/;"	e	enum:boost::interprocess::__anon11
file_end	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_end       = 2;$/;"	m	namespace:boost::interprocess::winapi
file_end_of_file_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_end_of_file_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_flag_backup_semantics	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_flag_backup_semantics = 0x02000000;$/;"	m	namespace:boost::interprocess::winapi
file_flag_delete_on_close	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long file_flag_delete_on_close = 0x04000000;$/;"	m	namespace:boost::interprocess::winapi
file_full_directory_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_full_directory_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_full_ea_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_full_ea_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_handle_from_mapping_handle	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline file_handle_t file_handle_from_mapping_handle(mapping_handle_t hnd)$/;"	f	namespace:boost::interprocess::detail	signature:(mapping_handle_t hnd)
file_handle_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^typedef void *             file_handle_t;$/;"	t	namespace:boost::interprocess
file_handle_t	/usr/include/boost/interprocess/file_mapping.hpp	/^      :  m_handle(file_handle_t(detail::invalid_file()))$/;"	f	class:boost::interprocess::file_mapping	access:public	signature:(detail::invalid_file(
file_handle_t	/usr/include/boost/interprocess/shared_memory_object.hpp	/^      :  m_handle(file_handle_t(detail::invalid_file()))$/;"	f	class:boost::interprocess::shared_memory_object	access:public	signature:(detail::invalid_file(
file_handle_t	/usr/include/boost/interprocess/sync/file_lock.hpp	/^      :  m_file_hnd(file_handle_t(detail::invalid_file()))$/;"	f	class:boost::interprocess::file_lock	access:public	signature:(detail::invalid_file(
file_information_class_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^enum file_information_class_t {$/;"	g	namespace:boost::interprocess::winapi
file_inherit_content_index_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_inherit_content_index_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_internal_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_internal_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_link_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_link_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   file_lock()$/;"	f	class:boost::interprocess::file_lock	access:public	signature:()
file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   file_lock(const char *name);$/;"	p	class:boost::interprocess::file_lock	access:public	signature:(const char *name)
file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^class file_lock$/;"	c	namespace:boost::interprocess
file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline file_lock::file_lock(const char *name)$/;"	f	class:boost::interprocess::file_lock	signature:(const char *name)
file_mailslot_query_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_mailslot_query_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_mailslot_set_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_mailslot_set_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^   file_mapping();$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:()
file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^   file_mapping(const char *filename, mode_t mode);$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:(const char *filename, mode_t mode)
file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^class file_mapping$/;"	c	namespace:boost::interprocess
file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^inline file_mapping::file_mapping$/;"	f	class:boost::interprocess::file_mapping	signature:(const char *filename, mode_t mode)
file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^inline file_mapping::file_mapping() $/;"	f	class:boost::interprocess::file_mapping	signature:()
file_map_all_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_map_all_access  = section_all_access;$/;"	m	namespace:boost::interprocess::winapi
file_map_copy	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_map_copy        = section_query;$/;"	m	namespace:boost::interprocess::winapi
file_map_read	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_map_read        = section_map_read;$/;"	m	namespace:boost::interprocess::winapi
file_map_write	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_map_write       = section_map_write;$/;"	m	namespace:boost::interprocess::winapi
file_maximum_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_maximum_information$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_mode_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_mode_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_move_cluster_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_move_cluster_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_names_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_names_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_name_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_name_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_name_information_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct file_name_information_t {$/;"	s	namespace:boost::interprocess::winapi
file_network_open_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_network_open_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_object_id_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_object_id_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_ole_directory_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_ole_directory_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_ole_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_ole_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_open_for_backup_intent	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_open_for_backup_intent = 0x00004000;$/;"	m	namespace:boost::interprocess::winapi
file_pipe_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_pipe_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_pipe_local_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_pipe_local_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_pipe_remote_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_pipe_remote_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_position_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_position_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_pos_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             } file_pos_t;$/;"	t	namespace:boost::interprocess	typeref:enum:boost::interprocess::__anon11
file_quota_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_quota_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_rename_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_rename_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_rename_information_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct file_rename_information_t {$/;"	s	namespace:boost::interprocess::winapi
file_reparse_point_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_reparse_point_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_share_delete	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_share_delete    = 0x00000004;$/;"	m	namespace:boost::interprocess::winapi
file_share_read	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_share_read      = 0x00000001;$/;"	m	namespace:boost::interprocess::winapi
file_share_valid_flags	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const int file_share_valid_flags = 0x00000007;$/;"	m	namespace:boost::interprocess::winapi
file_share_write	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long file_share_write     = 0x00000002;$/;"	m	namespace:boost::interprocess::winapi
file_standard_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_standard_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_stream_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_stream_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_time_to_local_file_time	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool file_time_to_local_file_time$/;"	f	namespace:boost::interprocess::winapi	signature:(const interprocess_filetime *in, const interprocess_filetime *out)
file_tracking_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   file_tracking_information,$/;"	e	enum:boost::interprocess::winapi::file_information_class_t
file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   file_wrapper();$/;"	p	class:boost::interprocess::detail::file_wrapper	access:public	signature:()
file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   file_wrapper(create_only_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::detail::file_wrapper	access:public	signature:(create_only_t, const char *name, mode_t mode)
file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   file_wrapper(open_only_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::detail::file_wrapper	access:public	signature:(open_only_t, const char *name, mode_t mode)
file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   file_wrapper(open_or_create_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::detail::file_wrapper	access:public	signature:(open_or_create_t, const char *name, mode_t mode)
file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^class file_wrapper$/;"	c	namespace:boost::interprocess::detail
file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline file_wrapper::file_wrapper() $/;"	f	class:boost::interprocess::detail::file_wrapper	signature:()
fill_system_message	/usr/include/boost/interprocess/errors.hpp	/^inline void fill_system_message( int system_error, std::string &str)$/;"	f	namespace:boost::interprocess	signature:( int system_error, std::string &str)
fill_system_message	/usr/include/boost/interprocess/errors.hpp	/^inline void fill_system_message(int sys_err_code, std::string &str)$/;"	f	namespace:boost::interprocess	signature:(int sys_err_code, std::string &str)
find	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_iterator find(const key_type& k) const$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const key_type& k) const
find	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator find(const key_type& k)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const key_type& k)
find	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_iterator find(const key_type& k) const$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& k) const
find	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator find(const key_type& k)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& k)
find	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator find(const key_type& x) const $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& x) const
find	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator find(const key_type& x) const $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const key_type& x) const
find	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator find(const key_type& x) $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& x)
find	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator find(const key_type& x)$/;"	f	class:boost::container::flat_multimap	access:public	signature:(const key_type& x)
find	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator find(const key_type& x) const $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const key_type& x) const
find	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator find(const key_type& x) const $/;"	f	class:boost::container::flat_set	access:public	signature:(const key_type& x) const
find	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator find(const key_type& x) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const key_type& x)
find	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator find(const key_type& x) $/;"	f	class:boost::container::flat_set	access:public	signature:(const key_type& x)
find	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_iterator find(const key_type& x) const $/;"	f	class:boost::container::map	access:public	signature:(const key_type& x) const
find	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_iterator find(const key_type& x) const $/;"	f	class:boost::container::multimap	access:public	signature:(const key_type& x) const
find	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator find(const key_type& x) $/;"	f	class:boost::container::map	access:public	signature:(const key_type& x)
find	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator find(const key_type& x) $/;"	f	class:boost::container::multimap	access:public	signature:(const key_type& x)
find	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator find(const key_type& x) const $/;"	f	class:boost::container::multiset	access:public	signature:(const key_type& x) const
find	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator find(const key_type& x) const $/;"	f	class:boost::container::set	access:public	signature:(const key_type& x) const
find	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator find(const key_type& x) $/;"	f	class:boost::container::multiset	access:public	signature:(const key_type& x)
find	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator find(const key_type& x) $/;"	f	class:boost::container::set	access:public	signature:(const key_type& x)
find	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find(CharT c, size_type pos = 0) const$/;"	f	class:boost::container::basic_string	access:public	signature:(CharT c, size_type pos = 0) const
find	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find(const basic_string& s, size_type pos = 0) const $/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s, size_type pos = 0) const
find	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find(const CharT* s, size_type pos = 0) const $/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos = 0) const
find	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find(const CharT* s, size_type pos, size_type n) const$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos, size_type n) const
find	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   std::pair<T*, std::size_t> find  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
find	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   const_iterator find(const intrusive_compare_key_type &key) const$/;"	f	class:boost::interprocess::iset_index	access:public	signature:(const intrusive_compare_key_type &key) const
find	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   iterator find(const intrusive_compare_key_type &key)$/;"	f	class:boost::interprocess::iset_index	access:public	signature:(const intrusive_compare_key_type &key)
find	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   const_iterator find(const intrusive_compare_key_type &key) const$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(const intrusive_compare_key_type &key) const
find	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   iterator find(const intrusive_compare_key_type &key)$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(const intrusive_compare_key_type &key)
find	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   std::pair<T*, std::size_t> find  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(char_ptr_holder_t name)
find	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   std::pair<T*, std::size_t> find  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(char_ptr_holder_t name)
find	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   std::pair<T*, std::size_t> find  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(char_ptr_holder_t name)
find	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, std::size_t> find  (const CharType* name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const CharType* name)
find	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, std::size_t> find (const detail::unique_instance_t* name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const detail::unique_instance_t* name)
FindClose	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int   __stdcall FindClose(void *hFindFile);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hFindFile)
FindFirstFileA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall FindFirstFileA(const char *lpFileName, win32_find_data_t *lpFindFileData);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *lpFileName, win32_find_data_t *lpFindFileData)
FindNextFileA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int   __stdcall FindNextFileA(void *hFindFile, win32_find_data_t *lpFindFileData);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hFindFile, win32_find_data_t *lpFindFileData)
find_close	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool find_close(void *handle)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle)
find_first_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void * find_first_file(const char *lpFileName, win32_find_data_t *lpFindFileData)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *lpFileName, win32_find_data_t *lpFindFileData)
find_first_not_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_first_not_of(CharT c, size_type pos = 0) const$/;"	f	class:boost::container::basic_string	access:public	signature:(CharT c, size_type pos = 0) const
find_first_not_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_first_not_of(const basic_string& s, $/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s, size_type pos = 0) const
find_first_not_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_first_not_of(const CharT* s, size_type pos = 0) const $/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos = 0) const
find_first_not_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_first_not_of(const CharT* s, size_type pos,$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos, size_type n) const
find_first_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_first_of(const basic_string& s, size_type pos = 0) const $/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s, size_type pos = 0) const
find_first_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_first_of(const CharT* s, size_type pos = 0) const $/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos = 0) const
find_first_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_first_of(const CharT* s, size_type pos, $/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos, size_type n) const
find_first_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^  size_type find_first_of(CharT c, size_type pos = 0) const $/;"	f	class:boost::container::basic_string	access:public	signature:(CharT c, size_type pos = 0) const
find_last_not_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_last_not_of(CharT c, size_type pos = npos) const$/;"	f	class:boost::container::basic_string	access:public	signature:(CharT c, size_type pos = npos) const
find_last_not_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_last_not_of(const basic_string& s, $/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s, size_type pos = npos) const
find_last_not_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_last_not_of(const CharT* s, size_type pos = npos) const$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos = npos) const
find_last_not_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_last_not_of(const CharT* s, size_type pos, size_type n) const$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos, size_type n) const
find_last_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_last_of(CharT c, size_type pos = npos) const $/;"	f	class:boost::container::basic_string	access:public	signature:(CharT c, size_type pos = npos) const
find_last_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_last_of(const basic_string& s,$/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s, size_type pos = npos) const
find_last_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_last_of(const CharT* s, size_type pos = npos) const $/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos = npos) const
find_last_of	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type find_last_of(const CharT* s, size_type pos, size_type n) const$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos, size_type n) const
find_next_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool find_next_file(void *hFindFile, win32_find_data_t *lpFindFileData)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hFindFile, win32_find_data_t *lpFindFileData)
find_no_lock	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   std::pair<T*, std::size_t> find_no_lock  (char_ptr_holder_t name)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
find_no_lock	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, std::size_t> find_no_lock  (const CharType* name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const CharType* name)
find_no_lock	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, std::size_t> find_no_lock (const detail::unique_instance_t* name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const detail::unique_instance_t* name)
find_or_construct	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      find_or_construct(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
find_or_construct	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      find_or_construct(char_ptr_holder_t name, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name, std::nothrow_t nothrow)
find_or_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^      find_or_construct(char_ptr_holder_t name, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name, std::nothrow_t)
find_or_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   typename construct_proxy<T>::type find_or_construct(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name)
find_or_construct_it	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      find_or_construct_it(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name)
find_or_construct_it	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      find_or_construct_it(char_ptr_holder_t name, std::nothrow_t nothrow)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(char_ptr_holder_t name, std::nothrow_t nothrow)
find_or_construct_it	/usr/include/boost/interprocess/segment_manager.hpp	/^      find_or_construct_it(char_ptr_holder_t name)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name)
find_or_construct_it	/usr/include/boost/interprocess/segment_manager.hpp	/^      find_or_construct_it(char_ptr_holder_t name, std::nothrow_t)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(char_ptr_holder_t name, std::nothrow_t)
first	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   T1 first;$/;"	m	struct:boost::container::containers_detail::pair	access:public
FirstID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      static const std::size_t FirstID = 2;$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_constants_t	access:public
FirstID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^const std::size_t xsi_shared_memory_device::info_constants_t<Dummy>::FirstID;$/;"	m	class:boost::interprocess::xsi_shared_memory_device::info_constants_t
first_	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   FwdIt first_, last_;$/;"	m	struct:boost::container::containers_detail::advanced_insert_aux_proxy	access:public
first_argument_type	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      typedef Value              first_argument_type;$/;"	t	class:boost::container::containers_detail::flat_tree::value_compare	access:private
first_type	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   typedef T1 first_type;$/;"	t	struct:boost::container::containers_detail::pair	access:public
first_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename iterator_val_t::first_type  first_type;$/;"	t	class:boost::interprocess::detail::segment_manager_iterator_value_adaptor	access:private
fixed_managed_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^fixed_managed_shared_memory;$/;"	t	namespace:boost::interprocess
flat_map	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   explicit flat_map(const Pred& comp = Pred(), const allocator_type& a = allocator_type()) $/;"	f	class:boost::container::flat_map	access:public	signature:(const Pred& comp = Pred(), const allocator_type& a = allocator_type())
flat_map	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   flat_map( ordered_unique_range_t, InputIterator first, InputIterator last$/;"	f	class:boost::container::flat_map	access:public	signature:( ordered_unique_range_t, InputIterator first, InputIterator last , const Pred& comp = Pred(), const allocator_type& a = allocator_type())
flat_map	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   flat_map(const flat_map<Key,T,Pred,Alloc>& x) $/;"	f	class:boost::container::flat_map	access:public	signature:(const flat_map<Key,T,Pred,Alloc>& x)
flat_map	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   flat_map(InputIterator first, InputIterator last, const Pred& comp = Pred(),$/;"	f	class:boost::container::flat_map	access:public	signature:(InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
flat_map	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^class flat_map $/;"	c	namespace:boost::container
flat_map_index	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   flat_map_index(segment_manager_base *segment_mngr)$/;"	f	class:boost::interprocess::flat_map_index	access:public	signature:(segment_manager_base *segment_mngr)
flat_map_index	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^class flat_map_index$/;"	c	namespace:boost::interprocess	inherits:flat_map_index_aux::index_t
flat_map_index_aux	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^struct flat_map_index_aux$/;"	s	namespace:boost::interprocess
flat_map_intersegment	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   flat_map_intersegment()$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:()
flat_map_intersegment	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^struct flat_map_intersegment$/;"	s	namespace:boost::interprocess	inherits:intersegment_base
flat_multimap	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   explicit flat_multimap(const Pred& comp = Pred(),$/;"	f	class:boost::container::flat_multimap	access:public	signature:(const Pred& comp = Pred(), const allocator_type& a = allocator_type())
flat_multimap	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   flat_multimap(const flat_multimap<Key,T,Pred,Alloc>& x) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const flat_multimap<Key,T,Pred,Alloc>& x)
flat_multimap	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   flat_multimap(InputIterator first, InputIterator last,$/;"	f	class:boost::container::flat_multimap	access:public	signature:(InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
flat_multimap	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   flat_multimap(ordered_range_t, InputIterator first, InputIterator last,$/;"	f	class:boost::container::flat_multimap	access:public	signature:(ordered_range_t, InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
flat_multimap	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^class flat_multimap $/;"	c	namespace:boost::container
flat_multiset	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   explicit flat_multiset(const Pred& comp = Pred(),$/;"	f	class:boost::container::flat_multiset	access:public	signature:(const Pred& comp = Pred(), const allocator_type& a = allocator_type())
flat_multiset	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   flat_multiset(const flat_multiset<T,Pred,Alloc>& x) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const flat_multiset<T,Pred,Alloc>& x)
flat_multiset	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   flat_multiset(InputIterator first, InputIterator last,$/;"	f	class:boost::container::flat_multiset	access:public	signature:(InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
flat_multiset	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   flat_multiset(ordered_range_t, InputIterator first, InputIterator last,$/;"	f	class:boost::container::flat_multiset	access:public	signature:(ordered_range_t, InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
flat_multiset	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^class flat_multiset $/;"	c	namespace:boost::container
flat_set	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   explicit flat_set(const Pred& comp = Pred(),$/;"	f	class:boost::container::flat_set	access:public	signature:(const Pred& comp = Pred(), const allocator_type& a = allocator_type())
flat_set	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   flat_set(const flat_set<T,Pred,Alloc>& x) $/;"	f	class:boost::container::flat_set	access:public	signature:(const flat_set<T,Pred,Alloc>& x)
flat_set	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   flat_set(InputIterator first, InputIterator last, $/;"	f	class:boost::container::flat_set	access:public	signature:(InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
flat_set	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   flat_set(ordered_unique_range_t, InputIterator first, InputIterator last, $/;"	f	class:boost::container::flat_set	access:public	signature:(ordered_unique_range_t, InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
flat_set	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^class flat_set $/;"	c	namespace:boost::container
flat_tree	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   flat_tree( ordered_range_t, InputIterator first, InputIterator last$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:( ordered_range_t, InputIterator first, InputIterator last , const Compare& comp = Compare() , const allocator_type& a = allocator_type())
flat_tree	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   flat_tree(const Compare& comp     = Compare(), $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const Compare& comp = Compare(), const allocator_type& a = allocator_type())
flat_tree	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   flat_tree(const flat_tree& x) $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const flat_tree& x)
flat_tree	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^class flat_tree$/;"	c	namespace:boost::container::containers_detail
floor_log2	/usr/include/boost/interprocess/containers/container/detail/math_functions.hpp	/^inline std::size_t floor_log2 (std::size_t x)$/;"	f	namespace:boost::container::containers_detail	signature:(std::size_t x)
floor_log2	/usr/include/boost/interprocess/detail/math_functions.hpp	/^inline std::size_t floor_log2 (std::size_t x)$/;"	f	namespace:boost::interprocess::detail	signature:(std::size_t x)
floor_units	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static std::size_t floor_units(std::size_t size)$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(std::size_t size)
flush	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   bool flush()$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:()
flush	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   bool flush()$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:()
flush	/usr/include/boost/interprocess/mapped_region.hpp	/^   bool flush(std::size_t mapping_offset = 0, std::size_t numbytes = 0);$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:(std::size_t mapping_offset = 0, std::size_t numbytes = 0)
flush	/usr/include/boost/interprocess/mapped_region.hpp	/^inline bool mapped_region::flush(std::size_t mapping_offset, std::size_t numbytes)$/;"	f	class:boost::interprocess::mapped_region	signature:(std::size_t mapping_offset, std::size_t numbytes)
FlushViewOfFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall FlushViewOfFile (void *, std::size_t);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, std::size_t)
flush_view_of_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline int flush_view_of_file(void *base_addr, std::size_t numbytes)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *base_addr, std::size_t numbytes)
force	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   static D &force(const S &s)$/;"	f	class:boost::container::flat_map	access:private	signature:(const S &s)
force	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   static D &force(const S &s)$/;"	f	class:boost::container::flat_multimap	access:private	signature:(const S &s)
force_copy	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   static D force_copy(S s)$/;"	f	class:boost::container::flat_map	access:private	signature:(S s)
force_copy	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   static D force_copy(S s)$/;"	f	class:boost::container::flat_multimap	access:private	signature:(S s)
FormatMessageA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall FormatMessageA$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long dwFlags, const void *lpSource, unsigned long dwMessageId, unsigned long dwLanguageId, char *lpBuffer, unsigned long nSize, std::va_list *Arguments)
format_message	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long format_message$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned long dwFlags, const void *lpSource, unsigned long dwMessageId, unsigned long dwLanguageId, char *lpBuffer, unsigned long nSize, std::va_list *Arguments)
format_message_allocate_buffer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_allocate_buffer$/;"	m	namespace:boost::interprocess::winapi
format_message_argument_array	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_argument_array$/;"	m	namespace:boost::interprocess::winapi
format_message_from_hmodule	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_from_hmodule$/;"	m	namespace:boost::interprocess::winapi
format_message_from_string	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_from_string$/;"	m	namespace:boost::interprocess::winapi
format_message_from_system	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_from_system$/;"	m	namespace:boost::interprocess::winapi
format_message_ignore_inserts	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_ignore_inserts$/;"	m	namespace:boost::interprocess::winapi
format_message_max_width_mask	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long format_message_max_width_mask$/;"	m	namespace:boost::interprocess::winapi
forward	/usr/include/boost/interprocess/detail/move.hpp	/^   forward(const typename move_detail::identity<T>::type &x)$/;"	f	namespace:boost::interprocess	signature:(const typename move_detail::identity<T>::type &x)
for_bool_	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   struct nat {int for_bool_;};$/;"	m	struct:boost::interprocess::unique_ptr::nat	access:public
frc	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t frc      :  frc_size_bits;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
frc_size_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t frc_size_bits =$/;"	m	struct:boost::interprocess::intersegment_base	access:public
FreeLibrary	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int   __stdcall FreeLibrary(void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
free_library	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool free_library(void *module)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *module)
free_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   msg_hdr_t * free_msg()$/;"	f	class:boost::interprocess::detail::mq_hdr_t	access:public	signature:()
free_nodes	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      free_nodes_t free_nodes;$/;"	m	struct:boost::container::containers_detail::adaptive_pool_types::block_info_t	access:public
free_nodes_t	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      typedef typename node_slist<void_pointer>::node_slist_t free_nodes_t;$/;"	t	struct:boost::container::containers_detail::adaptive_pool_types::block_info_t	access:public
free_nodes_t	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef typename node_slist<void_pointer>::node_slist_t free_nodes_t;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public
free_nodes_t	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   typedef typename node_slist<void_pointer>::node_slist_t        free_nodes_t;$/;"	t	class:boost::container::containers_detail::private_node_pool_impl	access:public
free_top_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void free_top_msg()$/;"	f	class:boost::interprocess::detail::mq_hdr_t	access:public	signature:()
from_first_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   static block_header *from_first_header(Header *header)$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:(Header *header)
front	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_reference front() const $/;"	f	class:boost::container::deque	access:public	signature:() const
front	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   reference front() { return *this->members_.m_start; }$/;"	f	class:boost::container::deque	access:public	signature:()
front	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   pointer front()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
front	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void *front()$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:()
front	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const_reference front() const $/;"	f	class:boost::container::list	access:public	signature:() const
front	/usr/include/boost/interprocess/containers/container/list.hpp	/^   reference front()             $/;"	f	class:boost::container::list	access:public	signature:()
front	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   const_reference front() const $/;"	f	class:boost::container::slist	access:public	signature:() const
front	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   reference front() $/;"	f	class:boost::container::slist	access:public	signature:()
front	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_reference front()const$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
front	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   reference front()$/;"	f	class:boost::container::stable_vector	access:public	signature:()
front	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_reference   front() const $/;"	f	class:boost::container::vector	access:public	signature:() const
front	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   reference         front()       $/;"	f	class:boost::container::vector	access:public	signature:()
frontend_t	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      typedef basic_managed_multi_shared_memory             frontend_t;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public
front_move_inserter	/usr/include/boost/interprocess/detail/move.hpp	/^inline front_move_insert_iterator<C> front_move_inserter(C& x)$/;"	f	namespace:boost::interprocess	signature:(C& x)
front_move_insert_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^   explicit front_move_insert_iterator(C& x) : container_m(&x) { }$/;"	f	class:boost::interprocess::front_move_insert_iterator	access:public	signature:(C& x)
front_move_insert_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^class front_move_insert_iterator$/;"	c	namespace:boost::interprocess	inherits:std::iterator
ftCreationTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_filetime ftCreationTime;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
ftLastAccessTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_filetime ftLastAccessTime;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
ftLastWriteTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_filetime ftLastWriteTime;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
func_	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   RegCloseKey_t func_;$/;"	m	struct:boost::interprocess::winapi::reg_closer	access:public
gcd	/usr/include/boost/interprocess/containers/container/detail/math_functions.hpp	/^inline Integer gcd(Integer A, Integer B)$/;"	f	namespace:boost::container::containers_detail	signature:(Integer A, Integer B)
gcd	/usr/include/boost/interprocess/detail/math_functions.hpp	/^inline Integer gcd(Integer A, Integer B)$/;"	f	namespace:boost::interprocess::detail	signature:(Integer A, Integer B)
generic_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   T *generic_construct(const CharType *name, $/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const CharType *name, std::size_t num, bool try2find, bool dothrow, detail::in_place_interface &table)
generic_read	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long generic_read         = 0x80000000L;$/;"	m	namespace:boost::interprocess::winapi
generic_write	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long generic_write        = 0x40000000L;$/;"	m	namespace:boost::interprocess::winapi
get	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      static type *get(void *p)$/;"	f	struct:boost::interprocess::detail::adaptive_pool_base::node_pool	access:public	signature:(void *p)
get	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      static type *get(void *p)$/;"	f	struct:boost::interprocess::detail::node_pool_allocation_impl::node_pool	access:public	signature:(void *p)
get	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      static type *get(void *p)$/;"	f	struct:boost::interprocess::detail::node_allocator_base::node_pool	access:public	signature:(void *p)
get	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      static type *get(void *p)$/;"	f	struct:boost::interprocess::detail::private_adaptive_pool_base::node_pool	access:public	signature:(void *p)
get	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      static type *get(void *p)$/;"	f	struct:boost::interprocess::detail::private_node_allocator_base::node_pool	access:public	signature:(void *p)
get	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   pointer get() const$/;"	f	struct:boost::container::containers_detail::scoped_deallocator	access:public	signature:() const
get	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      iiterator get()$/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:private	signature:()
get	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      iiterator get()$/;"	f	class:boost::container::containers_detail::rbtree::iterator	access:private	signature:()
get	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^   static pointer get (const SmartPtr &smartptr)$/;"	f	struct:boost::container::containers_detail::smart_ptr_type	access:public	signature:(const SmartPtr &smartptr)
get	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^   static pointer get (pointer ptr)$/;"	f	struct:boost::container::containers_detail::smart_ptr_type	access:public	signature:(pointer ptr)
get	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   static const_type get(const tuple<Head, Values...>& t)  { return Next::get(t.tail()); }$/;"	f	class:boost::container::containers_detail::get_impl	access:public	signature:(const tuple<Head, Values...>& t)
get	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   static const_type get(const tuple<Head, Values...>& t){ return t.head(); }$/;"	f	class:boost::container::containers_detail::get_impl	access:public	signature:(const tuple<Head, Values...>& t)
get	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   static type       get(tuple<Head, Values...>& t)      { return t.head(); }$/;"	f	class:boost::container::containers_detail::get_impl	access:public	signature:(tuple<Head, Values...>& t)
get	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   static type get(tuple<Head, Values...>& t)              { return Next::get(t.tail()); }$/;"	f	class:boost::container::containers_detail::get_impl	access:public	signature:(tuple<Head, Values...>& t)
get	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^typename get_impl<I, tuple<Values...> >::const_type get(const tuple<Values...>& t)$/;"	f	namespace:boost::container::containers_detail	signature:(const tuple<Values...>& t)
get	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^typename get_impl<I, tuple<Values...> >::type get(tuple<Values...>& t)$/;"	f	namespace:boost::container::containers_detail	signature:(tuple<Values...>& t)
get	/usr/include/boost/interprocess/containers/container/list.hpp	/^      typename Icont::iterator get()$/;"	f	class:boost::container::list::const_iterator	access:private	signature:()
get	/usr/include/boost/interprocess/containers/container/list.hpp	/^      typename Icont::iterator get()$/;"	f	class:boost::container::list::iterator	access:private	signature:()
get	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      typename Icont::iterator get()$/;"	f	class:boost::container::slist::const_iterator	access:private	signature:()
get	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      typename Icont::iterator get()$/;"	f	class:boost::container::slist::iterator	access:private	signature:()
get	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   static pointer get (const SmartPtr &smartptr)$/;"	f	struct:boost::container::stable_vector_detail::smart_ptr_type	access:public	signature:(const SmartPtr &smartptr)
get	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   static pointer get (pointer ptr)$/;"	f	struct:boost::container::stable_vector_detail::smart_ptr_type	access:public	signature:(pointer ptr)
get	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   pointer get()const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:() const
get	/usr/include/boost/interprocess/detail/utilities.hpp	/^   static pointer get (const SmartPtr &smartptr)$/;"	f	struct:boost::interprocess::detail::smart_ptr_type	access:public	signature:(const SmartPtr &smartptr)
get	/usr/include/boost/interprocess/detail/utilities.hpp	/^   static pointer get (pointer ptr)$/;"	f	struct:boost::interprocess::detail::smart_ptr_type	access:public	signature:(pointer ptr)
get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   static const_type get(const tuple<Head, Values...>& t)  { return Next::get(t.tail()); }$/;"	f	class:boost::interprocess::detail::get_impl	access:public	signature:(const tuple<Head, Values...>& t)
get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   static const_type get(const tuple<Head, Values...>& t){ return t.head(); }$/;"	f	class:boost::interprocess::detail::get_impl	access:public	signature:(const tuple<Head, Values...>& t)
get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   static type       get(tuple<Head, Values...>& t)      { return t.head(); }$/;"	f	class:boost::interprocess::detail::get_impl	access:public	signature:(tuple<Head, Values...>& t)
get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   static type get(tuple<Head, Values...>& t)              { return Next::get(t.tail()); }$/;"	f	class:boost::interprocess::detail::get_impl	access:public	signature:(tuple<Head, Values...>& t)
get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^typename get_impl<I, tuple<Values...> >::const_type get(const tuple<Values...>& t)$/;"	f	namespace:boost::interprocess::detail	signature:(const tuple<Values...>& t)
get	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^typename get_impl<I, tuple<Values...> >::type get(tuple<Values...>& t)$/;"	f	namespace:boost::interprocess::detail	signature:(tuple<Values...>& t)
get	/usr/include/boost/interprocess/offset_ptr.hpp	/^   pointer get()const$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
get	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   const pointer &get() const$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:() const
get	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   pointer &get()$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:()
get	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   const pointer & get() const$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:() const
get	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   pointer & get()$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:()
get	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   pointer get() const  \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
GetCurrentProcess	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall GetCurrentProcess();$/;"	p	namespace:boost::interprocess::winapi	signature:()
GetCurrentProcessId	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall GetCurrentProcessId();$/;"	p	namespace:boost::interprocess::winapi	signature:()
GetCurrentThreadId	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall GetCurrentThreadId();$/;"	p	namespace:boost::interprocess::winapi	signature:()
GetFileSizeEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall GetFileSizeEx (void *, __int64 *size);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, __int64 *size)
GetLastError	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall GetLastError();$/;"	p	namespace:boost::interprocess::winapi	signature:()
getline	/usr/include/boost/interprocess/containers/container/string.hpp	/^getline(std::basic_istream<CharT, Traits>& is, basic_string<CharT,Traits,A>& s)$/;"	f	namespace:boost::container	signature:(std::basic_istream<CharT, Traits>& is, basic_string<CharT,Traits,A>& s)
getline	/usr/include/boost/interprocess/containers/container/string.hpp	/^getline(std::istream& is, basic_string<CharT,Traits,A>& s,CharT delim)$/;"	f	namespace:boost::container	signature:(std::istream& is, basic_string<CharT,Traits,A>& s,CharT delim)
GetMappedFileName_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef unsigned long (__stdcall * GetMappedFileName_t)(void *, void *, wchar_t *, unsigned long);$/;"	t	namespace:boost::interprocess::winapi
GetModuleHandleA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall GetModuleHandleA(const char*);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char*)
GetProcAddress	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall GetProcAddress(void *, const char*);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, const char*)
GetSystemInfo	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void __stdcall GetSystemInfo (struct system_info *);$/;"	p	namespace:boost::interprocess::winapi	signature:(struct system_info *)
GetSystemTimeAsFileTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void __stdcall GetSystemTimeAsFileTime(interprocess_filetime*);$/;"	p	namespace:boost::interprocess::winapi	signature:(interprocess_filetime*)
GetTempPathA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall GetTempPathA(unsigned long length, char *buffer);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long length, char *buffer)
get_addr	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      void *get_addr() const$/;"	f	struct:boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	access:public	signature:() const
get_address	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void *   get_address   () const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:() const
get_address	/usr/include/boost/interprocess/mapped_region.hpp	/^   void*       get_address() const;$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:() const
get_address	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void*    mapped_region::get_address()  const  $/;"	f	class:boost::interprocess::mapped_region	signature:() const
get_address_from_handle	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void *    get_address_from_handle (handle_t offset) const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(handle_t offset) const
get_al	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const node_allocator_type &get_al() const  { return internal_data;  }$/;"	f	class:boost::container::stable_vector	access:private	signature:() const
get_al	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   node_allocator_type &get_al()              { return internal_data;  }$/;"	f	class:boost::container::stable_vector	access:private	signature:()
get_allocator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   allocator_type get_allocator() const { return Base::alloc(); }$/;"	f	class:boost::container::deque	access:private	signature:() const
get_allocator	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
get_allocator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
get_allocator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
get_allocator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
get_allocator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
get_allocator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
get_allocator	/usr/include/boost/interprocess/containers/container/list.hpp	/^   allocator_type get_allocator() const$/;"	f	class:boost::container::list	access:public	signature:() const
get_allocator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::map	access:public	signature:() const
get_allocator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
get_allocator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
get_allocator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::set	access:public	signature:() const
get_allocator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   allocator_type get_allocator() const$/;"	f	class:boost::container::slist	access:public	signature:() const
get_allocator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   allocator_type get_allocator()const  {return get_al();}$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
get_allocator	/usr/include/boost/interprocess/containers/container/string.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::basic_string	access:public	signature:() const
get_allocator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   allocator_type get_allocator() const $/;"	f	class:boost::container::vector	access:public	signature:() const
get_allocator	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      get_allocator()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:()
get_allocator	/usr/include/boost/interprocess/segment_manager.hpp	/^      get_allocator()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
get_allocator	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   const_allocator_pointer get_allocator() const$/;"	f	class:boost::interprocess::detail::sp_counted_impl_pd	access:public	signature:() const
get_bits	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static std::size_t get_bits(const pointer &n)$/;"	f	struct:boost::intrusive::pointer_plus_bits	access:public	signature:(const pointer &n)
get_block_from_addr	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      static block_ctrl *get_block_from_addr(void *addr)$/;"	f	struct:boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	access:public	signature:(void *addr)
get_block_from_hook	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void *get_block_from_hook (node_t *hook, std::size_t blocksize)$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:private	signature:(node_t *hook, std::size_t blocksize)
get_block_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   block_header *get_block_header() const$/;"	f	struct:boost::interprocess::detail::intrusive_value_type_impl	access:public	signature:() const
get_block_hook	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   static node_t & get_block_hook (void *block, std::size_t blocksize)$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:private	signature:(void *block, std::size_t blocksize)
get_bootstamp	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void get_bootstamp(std::string &s, bool add = false)$/;"	f	namespace:boost::interprocess::detail	signature:(std::string &s, bool add = false)
get_boot_and_system_time	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_boot_and_system_time(unsigned char (&bootsystemstamp) [BootAndSystemstampLength])$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned char (&bootsystemstamp) [BootAndSystemstampLength])
get_boot_and_system_time_wstr	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_boot_and_system_time_wstr(wchar_t *bootsystemstamp, std::size_t &s)  \/\/will write BootAndSystemstampLength chars$/;"	f	namespace:boost::interprocess::winapi	signature:(wchar_t *bootsystemstamp, std::size_t &s)
get_boot_time	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_boot_time(unsigned char (&bootstamp) [BootstampLength])$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned char (&bootstamp) [BootstampLength])
get_boot_time_str	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_boot_time_str(char *bootstamp_str, std::size_t &s) \/\/will write BootstampLength chars$/;"	f	namespace:boost::interprocess::winapi	signature:(char *bootstamp_str, std::size_t &s)
get_chain_builder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   chain_builder get_chain_builder()$/;"	f	class:boost::container::containers_detail::allocator_multialloc_chain_node_deallocator	access:public	signature:()
get_comp	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      Compare &get_comp()$/;"	f	class:boost::container::containers_detail::flat_tree::value_compare	access:public	signature:()
get_comp	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      const Compare &get_comp() const$/;"	f	class:boost::container::containers_detail::flat_tree::value_compare	access:public	signature:() const
get_current_process	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *get_current_process()$/;"	f	namespace:boost::interprocess::winapi	signature:()
get_current_process_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_process_id_t get_current_process_id()$/;"	f	namespace:boost::interprocess::detail	signature:()
get_current_process_id	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long get_current_process_id()$/;"	f	namespace:boost::interprocess::winapi	signature:()
get_current_systemwide_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_systemwide_thread_id_t get_current_systemwide_thread_id()$/;"	f	namespace:boost::interprocess::detail	signature:()
get_current_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_thread_id_t get_current_thread_id()$/;"	f	namespace:boost::interprocess::detail	signature:()
get_current_thread_id	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long get_current_thread_id()$/;"	f	namespace:boost::interprocess::winapi	signature:()
get_data	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const T &get_data() const$/;"	f	struct:boost::container::containers_detail::rbtree_node	access:public	signature:() const
get_data	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   T &get_data()$/;"	f	struct:boost::container::containers_detail::rbtree_node	access:public	signature:()
get_deleter	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      get_deleter()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:()
get_deleter	/usr/include/boost/interprocess/segment_manager.hpp	/^      get_deleter()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
get_deleter	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   const_deleter_pointer get_deleter() const$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:() const
get_deleter	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   const_deleter_pointer get_deleter() const$/;"	f	class:boost::interprocess::detail::sp_counted_impl_pd	access:public	signature:() const
get_deleter	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   const_deleter_pointer get_deleter() const$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
get_end_node	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   node_type_ptr_t get_end_node() const$/;"	f	class:boost::container::stable_vector	access:private	signature:() const
get_error_code	/usr/include/boost/interprocess/errors.hpp	/^   error_code_t   get_error_code()const$/;"	f	struct:boost::interprocess::error_info	access:public	signature:() const
get_error_code	/usr/include/boost/interprocess/exceptions.hpp	/^   error_code_t   get_error_code()  const { return m_err.get_error_code(); }$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:() const
get_file_name_from_handle_function	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_file_name_from_handle_function$/;"	f	namespace:boost::interprocess::winapi	signature:(void * hFile, wchar_t *pszFilename, std::size_t length, std::size_t &out_length)
get_file_pointer	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool get_file_pointer(file_handle_t hnd, offset_t &off)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd, offset_t &off)
get_file_size	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool get_file_size(file_handle_t hnd, offset_t &size)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd, offset_t &size)
get_file_size	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_file_size(void *handle, __int64 &size)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, __int64 &size)
get_free_memory	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   std::size_t get_free_memory() const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:() const
get_free_memory	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   std::size_t get_free_memory()  const;$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:() const
get_free_memory	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^inline std::size_t simple_seq_fit_impl<MutexFamily, VoidPointer>::get_free_memory()  const$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:() const
get_free_memory	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   std::size_t get_free_memory()  const;$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:() const
get_free_memory	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^inline std::size_t rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::get_free_memory()  const$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:() const
get_free_memory	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::size_t get_free_memory() const$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:() const
get_from_pool	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   node_type_ptr_t get_from_pool()$/;"	f	class:boost::container::stable_vector	access:private	signature:()
get_group	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      segment_group_id get_group() const$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:() const
get_handle_from_address	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   handle_t get_handle_from_address   (const void *ptr) const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(const void *ptr) const
get_impl	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^class get_impl<0, tuple<Head, Values...> >$/;"	c	namespace:boost::container::containers_detail
get_impl	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^class get_impl<I, tuple<Head, Values...> >$/;"	c	namespace:boost::container::containers_detail
get_impl	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^class get_impl<0, tuple<Head, Values...> >$/;"	c	namespace:boost::interprocess::detail
get_impl	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^class get_impl<I, tuple<Head, Values...> >$/;"	c	namespace:boost::interprocess::detail
get_instance_length	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static std::size_t get_instance_length(const T *ptr)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(const T *ptr)
get_instance_length	/usr/include/boost/interprocess/segment_manager.hpp	/^   static std::size_t get_instance_length(const T *ptr)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const T *ptr)
get_instance_name	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static const char_type *get_instance_name(const T *ptr)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(const T *ptr)
get_instance_name	/usr/include/boost/interprocess/segment_manager.hpp	/^   static const CharType *get_instance_name(const T *ptr)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const T *ptr)
get_instance_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static instance_type get_instance_type(const T *ptr)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(const T *ptr)
get_instance_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   static instance_type get_instance_type(const T *ptr)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(const T *ptr)
get_intrusive_value_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   static intrusive_value_type_impl *get_intrusive_value_type(block_header *hdr)$/;"	f	struct:boost::interprocess::detail::intrusive_value_type_impl	access:public	signature:(block_header *hdr)
get_invalid_process_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_process_id_t get_invalid_process_id()$/;"	f	namespace:boost::interprocess::detail	signature:()
get_invalid_systemwide_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_systemwide_thread_id_t get_invalid_systemwide_thread_id()$/;"	f	namespace:boost::interprocess::detail	signature:()
get_invalid_thread_id	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline OS_thread_id_t get_invalid_thread_id()$/;"	f	namespace:boost::interprocess::detail	signature:()
get_last_align	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_impl_iterator get_last_align() const$/;"	f	class:boost::container::stable_vector	access:private	signature:() const
get_last_align	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   impl_iterator get_last_align()$/;"	f	class:boost::container::stable_vector	access:private	signature:()
get_last_error	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long get_last_error()$/;"	f	namespace:boost::interprocess::winapi	signature:()
get_mapped_region	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   const mapped_region &get_mapped_region() const$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::detail::file_wrapper	access:public	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline mapping_handle_t file_wrapper::get_mapping_handle() const$/;"	f	class:boost::interprocess::detail::file_wrapper	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^inline mapping_handle_t xsi_shared_memory::get_mapping_handle() const$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline mapping_handle_t xsi_shared_memory_device::get_mapping_handle() const$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/file_mapping.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/file_mapping.hpp	/^inline mapping_handle_t file_mapping::get_mapping_handle() const$/;"	f	class:boost::interprocess::file_mapping	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline mapping_handle_t shared_memory_object::get_mapping_handle() const$/;"	f	class:boost::interprocess::shared_memory_object	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline mapping_handle_t xsi_named_mutex::get_mapping_handle() const$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   mapping_handle_t get_mapping_handle() const;$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:() const
get_mapping_handle	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline mapping_handle_t windows_shared_memory::get_mapping_handle() const$/;"	f	class:boost::interprocess::windows_shared_memory	signature:() const
get_max_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   std::size_t get_max_cached_nodes() const$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:() const
get_max_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   std::size_t get_max_cached_nodes() const$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:() const
get_max_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   std::size_t get_max_msg() const;$/;"	p	class:boost::interprocess::message_queue	access:public	signature:() const
get_max_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline std::size_t message_queue::get_max_msg() const$/;"	f	class:boost::interprocess::message_queue	signature:() const
get_max_msg_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   std::size_t get_max_msg_size() const;$/;"	p	class:boost::interprocess::message_queue	access:public	signature:() const
get_max_msg_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline std::size_t message_queue::get_max_msg_size() const$/;"	f	class:boost::interprocess::message_queue	signature:() const
get_mem_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   static std::size_t get_mem_size$/;"	f	class:boost::interprocess::detail::mq_hdr_t	access:public	signature:(std::size_t max_msg_size, std::size_t max_num_msg)
get_mem_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   static std::size_t get_mem_size(std::size_t max_msg_size, std::size_t max_num_msg);$/;"	p	class:boost::interprocess::message_queue	access:private	signature:(std::size_t max_msg_size, std::size_t max_num_msg)
get_mem_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline std::size_t message_queue::get_mem_size$/;"	f	class:boost::interprocess::message_queue	signature:(std::size_t max_msg_size, std::size_t max_num_msg)
get_min_segment_size	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      std::size_t get_min_segment_size() const$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:() const
get_min_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   get_min_size (std::size_t extra_hdr_bytes)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t extra_hdr_bytes)
get_min_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   static std::size_t get_min_size (std::size_t extra_hdr_bytes);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t extra_hdr_bytes)
get_min_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   get_min_size (std::size_t extra_hdr_bytes)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t extra_hdr_bytes)
get_min_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static std::size_t get_min_size (std::size_t extra_hdr_bytes);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t extra_hdr_bytes)
get_min_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   get_min_size (std::size_t extra_hdr_bytes)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(std::size_t extra_hdr_bytes)
get_min_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static std::size_t get_min_size (std::size_t extra_hdr_bytes);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(std::size_t extra_hdr_bytes)
get_min_size	/usr/include/boost/interprocess/segment_manager.hpp	/^   static std::size_t get_min_size (std::size_t size)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::size_t size)
get_min_size	/usr/include/boost/interprocess/segment_manager.hpp	/^   static std::size_t get_min_size()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
get_mode	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::detail::file_wrapper	access:public	signature:() const
get_mode	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline mode_t file_wrapper::get_mode() const$/;"	f	class:boost::interprocess::detail::file_wrapper	signature:() const
get_mode	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   std::size_t get_mode()const$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:() const
get_mode	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:() const
get_mode	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline mode_t xsi_shared_memory_device::get_mode() const$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:() const
get_mode	/usr/include/boost/interprocess/file_mapping.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:() const
get_mode	/usr/include/boost/interprocess/file_mapping.hpp	/^inline mode_t file_mapping::get_mode() const$/;"	f	class:boost::interprocess::file_mapping	signature:() const
get_mode	/usr/include/boost/interprocess/mapped_region.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:() const
get_mode	/usr/include/boost/interprocess/mapped_region.hpp	/^inline mode_t mapped_region::get_mode()  const  $/;"	f	class:boost::interprocess::mapped_region	signature:() const
get_mode	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:() const
get_mode	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline mode_t shared_memory_object::get_mode() const$/;"	f	class:boost::interprocess::shared_memory_object	signature:() const
get_mode	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   mode_t get_mode() const;$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:() const
get_mode	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline mode_t windows_shared_memory::get_mode() const$/;"	f	class:boost::interprocess::windows_shared_memory	signature:() const
get_module_handle	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *get_module_handle(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
get_multi_segment_services	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      multi_segment_services &get_multi_segment_services() const$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:() const
get_name	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   const char *get_name() const;$/;"	p	class:boost::interprocess::detail::file_wrapper	access:public	signature:() const
get_name	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline const char *file_wrapper::get_name() const$/;"	f	class:boost::interprocess::detail::file_wrapper	signature:() const
get_name	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   const char *get_name() const$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:() const
get_name	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   const char *get_name() const;$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:() const
get_name	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline const char *xsi_shared_memory_device::get_name() const$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:() const
get_name	/usr/include/boost/interprocess/file_mapping.hpp	/^   const char *get_name() const;$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:() const
get_name	/usr/include/boost/interprocess/file_mapping.hpp	/^inline const char *file_mapping::get_name() const$/;"	f	class:boost::interprocess::file_mapping	signature:() const
get_name	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   const char *get_name() const;$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:() const
get_name	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline const char *shared_memory_object::get_name() const$/;"	f	class:boost::interprocess::shared_memory_object	signature:() const
get_name	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   const char *get_name() const;$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:() const
get_name	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline const char *windows_shared_memory::get_name() const$/;"	f	class:boost::interprocess::windows_shared_memory	signature:() const
get_native_error	/usr/include/boost/interprocess/errors.hpp	/^   native_error_t get_native_error()const$/;"	f	struct:boost::interprocess::error_info	access:public	signature:() const
get_native_error	/usr/include/boost/interprocess/exceptions.hpp	/^   native_error_t get_native_error()const { return m_err.get_native_error(); }$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:() const
get_next_capacity	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^   get_next_capacity(const SizeType max_size$/;"	f	namespace:boost::container::containers_detail	signature:(const SizeType max_size ,const SizeType capacity ,const SizeType n)
get_node_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   void* get_node_pool() const$/;"	f	class:boost::interprocess::detail::adaptive_pool_base	access:public	signature:() const
get_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   NodePool *get_node_pool() const$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:() const
get_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   node_pool_t* get_node_pool() const$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:() const
get_node_pool	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   void* get_node_pool() const$/;"	f	class:boost::interprocess::detail::node_allocator_base	access:public	signature:() const
get_node_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   node_pool_t* get_node_pool() const$/;"	f	class:boost::interprocess::detail::private_adaptive_pool_base	access:public	signature:() const
get_node_pool	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   node_pool_t* get_node_pool() const$/;"	f	class:boost::interprocess::detail::private_node_allocator_base	access:public	signature:() const
get_num_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   std::size_t get_num_msg();$/;"	p	class:boost::interprocess::message_queue	access:public	signature:()
get_num_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline std::size_t message_queue::get_num_msg()$/;"	f	class:boost::interprocess::message_queue	signature:()
get_num_named_objects	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   std::size_t get_num_named_objects()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:()
get_num_named_objects	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::size_t get_num_named_objects()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
get_num_unique_objects	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   std::size_t get_num_unique_objects()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:()
get_num_unique_objects	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::size_t get_num_unique_objects()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
get_offset	/usr/include/boost/interprocess/mapped_region.hpp	/^   offset_t    get_offset() const;$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:() const
get_offset	/usr/include/boost/interprocess/mapped_region.hpp	/^inline offset_t mapped_region::get_offset()  const  $/;"	f	class:boost::interprocess::mapped_region	signature:() const
get_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^   std::ptrdiff_t get_offset()$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:()
get_or_create_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^inline NodePool *get_or_create_node_pool(typename NodePool::segment_manager *mgnr)$/;"	f	namespace:boost::interprocess::detail	signature:(typename NodePool::segment_manager *mgnr)
get_or_create_node_pool_func	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   get_or_create_node_pool_func(typename NodePool::segment_manager *mngr)$/;"	f	struct:boost::interprocess::detail::get_or_create_node_pool_func	access:public	signature:(typename NodePool::segment_manager *mngr)
get_or_create_node_pool_func	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct get_or_create_node_pool_func$/;"	s	namespace:boost::interprocess::detail
get_page_size	/usr/include/boost/interprocess/mapped_region.hpp	/^      static std::size_t get_page_size();$/;"	p	struct:boost::interprocess::mapped_region::page_size_holder	access:public	signature:()
get_page_size	/usr/include/boost/interprocess/mapped_region.hpp	/^   static std::size_t get_page_size();$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:()
get_page_size	/usr/include/boost/interprocess/mapped_region.hpp	/^inline std::size_t mapped_region::get_page_size()$/;"	f	class:boost::interprocess::mapped_region	signature:()
get_page_size	/usr/include/boost/interprocess/mapped_region.hpp	/^inline std::size_t mapped_region::page_size_holder<dummy>::get_page_size()$/;"	f	class:boost::interprocess::mapped_region::page_size_holder	signature:()
get_path	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   const char *get_path() const;$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:() const
get_path	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   const char *get_path() const;$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:() const
get_path	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline const char *xsi_named_mutex::get_path() const$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:() const
get_permissions	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   int get_permissions() const;$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:() const
get_permissions	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   int get_permissions() const;$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:() const
get_permissions	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline int xsi_named_mutex::get_permissions() const$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:() const
get_pointer	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^get_pointer(const Ptr &ptr)$/;"	f	namespace:boost::container::containers_detail	signature:(const Ptr &ptr)
get_pointer	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^inline typename smart_ptr_type<Ptr>::pointer get_pointer(const Ptr &ptr)$/;"	f	namespace:boost::container::stable_vector_detail	signature:(const Ptr &ptr)
get_pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void *get_pointer() const$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:() const
get_pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^T * get_pointer(boost::interprocess::intersegment_ptr<T> const & p)$/;"	f	namespace:boost	signature:(boost::interprocess::intersegment_ptr<T> const & p)
get_pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^T * get_pointer(boost::interprocess::intersegment_ptr<T> const & p)$/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::intersegment_ptr<T> const & p)
get_pointer	/usr/include/boost/interprocess/detail/utilities.hpp	/^get_pointer(const Ptr &ptr)$/;"	f	namespace:boost::interprocess::detail	signature:(const Ptr &ptr)
get_pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static pointer get_pointer(const pointer &n)$/;"	f	struct:boost::intrusive::pointer_plus_bits	access:public	signature:(const pointer &n)
get_pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^   void* get_pointer() const$/;"	f	class:boost::interprocess::offset_ptr	access:private	signature:() const
get_pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline T * get_pointer(boost::interprocess::offset_ptr<T> const & p)$/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::offset_ptr<T> const & p)
get_pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   const pointer &get_pointer() const$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:() const
get_pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   pointer &get_pointer()$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:()
get_pointer	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   get_pointer(intrusive_ptr<T, VP> p)$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> p)
get_pointer	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^inline T *get_pointer(boost::interprocess::intrusive_ptr<T, VP> p)$/;"	f	namespace:boost	signature:(boost::interprocess::intrusive_ptr<T, VP> p)
get_pointer	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^T *get_pointer(boost::interprocess::scoped_ptr<T, D> const & p)$/;"	f	namespace:boost	signature:(boost::interprocess::scoped_ptr<T, D> const & p)
get_pointer	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^typename scoped_ptr<T, D>::pointer get_pointer(scoped_ptr<T, D> const & p)$/;"	f	namespace:boost::interprocess	signature:(scoped_ptr<T, D> const & p)
get_pointer	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^T * get_pointer(boost::interprocess::shared_ptr<T, VoidAllocator, Deleter> const & p)$/;"	f	namespace:boost	signature:(boost::interprocess::shared_ptr<T, VoidAllocator, Deleter> const & p)
get_pointer	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^T * get_pointer(shared_ptr<T, VoidAllocator, Deleter> const & p)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<T, VoidAllocator, Deleter> const & p)
get_proc_address	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *get_proc_address(void *module, const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *module, const char *name)
get_ptr	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   Pointer get_ptr() const    {  return   m_ptr;  }$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:() const
get_real_address	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   void *get_real_address()  const$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:() const
get_real_num_node	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   std::size_t get_real_num_node() const$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:() const
get_real_num_node	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   std::size_t get_real_num_node() const$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:() const
get_real_size	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   std::size_t get_real_size()  const$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:() const
get_rounded_size	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^inline std::size_t get_rounded_size(std::size_t orig_size, std::size_t round_to)$/;"	f	namespace:boost::container::containers_detail	signature:(std::size_t orig_size, std::size_t round_to)
get_rounded_size	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline std::size_t get_rounded_size(std::size_t orig_size, std::size_t round_to)$/;"	f	namespace:boost::interprocess::detail	signature:(std::size_t orig_size, std::size_t round_to)
get_rounded_size_po2	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline std::size_t get_rounded_size_po2(std::size_t orig_size, std::size_t round_to)$/;"	f	namespace:boost::interprocess::detail	signature:(std::size_t orig_size, std::size_t round_to)
get_segment_info_and_offset	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static void get_segment_info_and_offset(const void *ptr, segment_info_t &segment, std::size_t &offset, void *&base)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const void *ptr, segment_info_t &segment, std::size_t &offset, void *&base)
get_segment_manager	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::detail::adaptive_pool_base	access:public	signature:() const
get_segment_manager	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::allocator	access:public	signature:() const
get_segment_manager	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   segment_manager* get_segment_manager() const$/;"	f	class:boost::interprocess::detail::private_adaptive_node_pool	access:public	signature:() const
get_segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   segment_manager *get_segment_manager() const$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:() const
get_segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:() const
get_segment_manager	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   segment_manager* get_segment_manager() const$/;"	f	class:boost::interprocess::detail::private_node_pool	access:public	signature:() const
get_segment_manager	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::detail::node_allocator_base	access:public	signature:() const
get_segment_manager	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::detail::private_adaptive_pool_base	access:public	signature:() const
get_segment_manager	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   segment_manager* get_segment_manager()const$/;"	f	class:boost::interprocess::detail::private_node_allocator_base	access:public	signature:() const
get_segment_manager	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   segment_manager *get_segment_manager() const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:() const
get_segment_manager_base	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   segment_manager_base_type* get_segment_manager_base()const$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:() const
get_segment_manager_base	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   segment_manager_base_type* get_segment_manager_base()const$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:() const
get_shared_documents_folder	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void get_shared_documents_folder(std::string &s)$/;"	f	namespace:boost::interprocess::winapi	signature:(std::string &s)
get_shmid	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   int get_shmid() const;$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:() const
get_shmid	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^inline int xsi_shared_memory::get_shmid() const$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:() const
get_shmid	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   int get_shmid() const;$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:() const
get_shmid	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline int xsi_shared_memory::get_shmid() const$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:() const
get_singleton_unique_name	/usr/include/boost/interprocess/detail/intermodule_singleton.hpp	/^const char *get_singleton_unique_name()$/;"	f	namespace:boost::interprocess::detail	signature:()
get_size	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   bool get_size(offset_t &size) const;$/;"	p	class:boost::interprocess::detail::file_wrapper	access:public	signature:(offset_t &size) const
get_size	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline bool file_wrapper::get_size(offset_t &size) const$/;"	f	class:boost::interprocess::detail::file_wrapper	signature:(offset_t &size) const
get_size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t get_size() const$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:() const
get_size	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   std::size_t   get_size   () const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:() const
get_size	/usr/include/boost/interprocess/mapped_region.hpp	/^   std::size_t get_size() const;$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:() const
get_size	/usr/include/boost/interprocess/mapped_region.hpp	/^inline std::size_t mapped_region::get_size()  const  $/;"	f	class:boost::interprocess::mapped_region	signature:() const
get_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   std::size_t get_size()  const;$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:() const
get_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^inline std::size_t simple_seq_fit_impl<MutexFamily, VoidPointer>::get_size()  const$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:() const
get_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   std::size_t get_size()  const;$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:() const
get_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^inline std::size_t simple_seq_fit_impl<MutexFamily, VoidPointer>::get_size()  const$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:() const
get_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   std::size_t get_size()  const;$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:() const
get_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^inline std::size_t rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::get_size()  const$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:() const
get_size	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::size_t get_size() const$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:() const
get_size	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   bool get_size(offset_t &size) const;$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:(offset_t &size) const
get_size	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline bool shared_memory_object::get_size(offset_t &size) const$/;"	f	class:boost::interprocess::shared_memory_object	signature:(offset_t &size) const
get_stored_allocator	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
get_stored_allocator	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:()
get_stored_allocator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
get_stored_allocator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:()
get_stored_allocator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
get_stored_allocator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
get_stored_allocator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::flat_map	access:public	signature:()
get_stored_allocator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::flat_multimap	access:public	signature:()
get_stored_allocator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
get_stored_allocator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
get_stored_allocator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::flat_multiset	access:public	signature:()
get_stored_allocator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::flat_set	access:public	signature:()
get_stored_allocator	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::list	access:public	signature:() const
get_stored_allocator	/usr/include/boost/interprocess/containers/container/list.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::list	access:public	signature:()
get_stored_allocator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::map	access:public	signature:() const
get_stored_allocator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
get_stored_allocator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::map	access:public	signature:()
get_stored_allocator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::multimap	access:public	signature:()
get_stored_allocator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
get_stored_allocator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::set	access:public	signature:() const
get_stored_allocator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::multiset	access:public	signature:()
get_stored_allocator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::set	access:public	signature:()
get_stored_allocator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::slist	access:public	signature:() const
get_stored_allocator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::slist	access:public	signature:()
get_stored_allocator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const stored_allocator_type &get_stored_allocator() const $/;"	f	class:boost::container::vector	access:public	signature:() const
get_stored_allocator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   stored_allocator_type &get_stored_allocator()$/;"	f	class:boost::container::vector	access:public	signature:()
get_system_info	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void get_system_info(system_info *info)$/;"	f	namespace:boost::interprocess::winapi	signature:(system_info *info)
get_system_time_as_file_time	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void get_system_time_as_file_time(interprocess_filetime *filetime)$/;"	f	namespace:boost::interprocess::winapi	signature:(interprocess_filetime *filetime)
get_system_time_of_day_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool get_system_time_of_day_information(system_timeofday_information &info)$/;"	f	namespace:boost::interprocess::winapi	signature:(system_timeofday_information &info)
get_temporary_path	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline const char *get_temporary_path()$/;"	f	namespace:boost::interprocess::detail	signature:()
get_temp_path	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long get_temp_path(unsigned long length, char *buffer)$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned long length, char *buffer)
get_this_pointer	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   basic_managed_multi_shared_memory *get_this_pointer()$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:private	signature:()
get_this_pointer	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   iunordered_set_index<MapConfig>* get_this_pointer()$/;"	f	class:boost::interprocess::iunordered_set_index	access:private	signature:()
get_this_pointer	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   basic_managed_mapped_file *get_this_pointer()$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:private	signature:()
get_this_pointer	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   basic_managed_shared_memory *get_this_pointer()$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:private	signature:()
get_this_pointer	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   basic_managed_windows_shared_memory *get_this_pointer()$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:private	signature:()
get_this_pointer	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager *get_this_pointer()$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:()
get_tmp_base_dir	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void get_tmp_base_dir(std::string &tmp_name)$/;"	f	namespace:boost::interprocess::detail	signature:(std::string &tmp_name)
get_total_bytes	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      std::size_t get_total_bytes() const$/;"	f	struct:boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	access:public	signature:() const
get_total_bytes	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      std::size_t get_total_bytes() const$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	access:public	signature:() const
get_truncated_size	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline std::size_t get_truncated_size(std::size_t orig_size, std::size_t multiple)$/;"	f	namespace:boost::interprocess::detail	signature:(std::size_t orig_size, std::size_t multiple)
get_truncated_size_po2	/usr/include/boost/interprocess/detail/utilities.hpp	/^inline std::size_t get_truncated_size_po2(std::size_t orig_size, std::size_t multiple)$/;"	f	namespace:boost::interprocess::detail	signature:(std::size_t orig_size, std::size_t multiple)
get_user_address	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   void *get_user_address()  const$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:() const
get_user_bytes	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      std::size_t get_user_bytes() const$/;"	f	struct:boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	access:public	signature:() const
get_user_bytes	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      std::size_t get_user_bytes() const$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	access:public	signature:() const
get_user_size	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   std::size_t get_user_size()  const$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:() const
group	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      segment_group_t *group;$/;"	m	struct:boost::interprocess::flat_map_intersegment::segment_info_t	access:public
Group	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *Group;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
group_services	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      group_services(frontend_t *const frontend)$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:(frontend_t *const frontend)
group_services	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   class group_services$/;"	c	class:boost::interprocess::basic_managed_multi_shared_memory	inherits:multi_segment_services	access:private
grow	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static bool grow(const char *filename, std::size_t extra_bytes)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:(const char *filename, std::size_t extra_bytes)
grow	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void grow(std::size_t extra_bytes)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:(std::size_t extra_bytes)
grow	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   void grow(std::size_t extra_bytes)$/;"	f	class:boost::interprocess::basic_managed_external_buffer	access:public	signature:(std::size_t extra_bytes)
grow	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   bool grow(std::size_t extra_bytes)$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:public	signature:(std::size_t extra_bytes)
grow	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   static bool grow(const char *filename, std::size_t extra_bytes)$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(const char *filename, std::size_t extra_bytes)
grow	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   static bool grow(const char *shmname, std::size_t extra_bytes)$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(const char *shmname, std::size_t extra_bytes)
grow	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void grow(std::size_t extra_size);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t extra_size)
grow	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::grow(std::size_t extra_size)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t extra_size)
grow	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void grow(std::size_t extra_size);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t extra_size)
grow	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::grow(std::size_t extra_size)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t extra_size)
grow	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void grow(std::size_t extra_size);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(std::size_t extra_size)
grow	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::grow(std::size_t extra_size)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(std::size_t extra_size)
grow	/usr/include/boost/interprocess/segment_manager.hpp	/^   void grow(std::size_t extra_size)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::size_t extra_size)
h	/usr/include/boost/interprocess/containers/container/string.hpp	/^      short_header   h; $/;"	m	struct:boost::container::containers_detail::basic_string_base::short_t	access:public
handle	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^   void *   handle;$/;"	m	struct:boost::interprocess::mapping_handle_impl_t	access:public
handle_	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *handle_;$/;"	m	class:boost::interprocess::winapi::handle_closer	access:private
handle_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   handle_closer(void *handle) : handle_(handle){}$/;"	f	class:boost::interprocess::winapi::handle_closer	access:public	signature:(void *handle)
handle_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^class handle_closer$/;"	c	namespace:boost::interprocess::winapi
handle_t	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef std::ptrdiff_t                             handle_t;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
hasher	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^    struct hasher$/;"	s	struct:boost::interprocess::unordered_map_index_aux	inherits:std::unary_function	access:public
hash_function	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^    struct hash_function$/;"	s	struct:boost::interprocess::iunordered_set_index_aux	inherits:std::unary_function	access:public
hash_function	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_aux::hash_function             hash_function;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
hash_value	/usr/include/boost/interprocess/containers/container/string.hpp	/^inline std::size_t hash_value(basic_string<Ch, std::char_traits<Ch>, A> const& v)$/;"	f	namespace:boost::container	signature:(basic_string<Ch, std::char_traits<Ch>, A> const& v)
has_nothrow_move	/usr/include/boost/interprocess/detail/move.hpp	/^struct has_nothrow_move : is_movable<T>$/;"	s	namespace:boost::interprocess	inherits:is_movable
has_own_construct_from_it	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^struct has_own_construct_from_it$/;"	s	namespace:boost::container
has_own_construct_from_it	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^struct has_own_construct_from_it$/;"	s	namespace:boost::container
has_pointer_type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct has_pointer_type$/;"	s	namespace:boost::interprocess::detail
has_trivial_constructor	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^struct has_trivial_constructor$/;"	s	namespace:boost	inherits:true_type
has_trivial_constructor	/usr/include/boost/interprocess/offset_ptr.hpp	/^struct has_trivial_constructor< boost::interprocess::offset_ptr<T> > $/;"	s	namespace:boost
has_trivial_destructor	/usr/include/boost/interprocess/allocators/allocator.hpp	/^struct has_trivial_destructor$/;"	s	namespace:boost
has_trivial_destructor	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^struct has_trivial_destructor$/;"	s	namespace:boost	inherits:true_type
has_trivial_destructor	/usr/include/boost/interprocess/offset_ptr.hpp	/^struct has_trivial_destructor< boost::interprocess::offset_ptr<T> > $/;"	s	namespace:boost
has_trivial_destructor_after_move	/usr/include/boost/interprocess/detail/move.hpp	/^struct has_trivial_destructor_after_move$/;"	s	namespace:boost::interprocess	inherits:::boost::has_trivial_destructor
has_trivial_destructor_after_move_ctor	/usr/include/boost/interprocess/detail/move.hpp	/^struct has_trivial_destructor_after_move_ctor$/;"	s	namespace:boost::interprocess	inherits:::boost::has_trivial_destructor
has_trivial_destructor_after_move_to_moved	/usr/include/boost/interprocess/detail/move.hpp	/^struct has_trivial_destructor_after_move_to_moved$/;"	s	namespace:boost::interprocess	inherits:has_trivial_destructor_after_move
has_version	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^struct has_version$/;"	s	namespace:boost::container::containers_detail::impl
HdrOffsetSize	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   static const std::size_t HdrOffsetSize = ((sizeof(hdr_offset_holder)-1)\/MaxAlign+1)*MaxAlign;$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
HdrSize	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   static const std::size_t HdrSize  = ((sizeof(block_info_t)-1)\/MaxAlign+1)*MaxAlign;$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
hdr_offset	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   std::size_t hdr_offset;$/;"	m	struct:boost::container::containers_detail::hdr_offset_holder	access:public
hdr_offset_holder	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   hdr_offset_holder(std::size_t offset = 0)$/;"	f	struct:boost::container::containers_detail::hdr_offset_holder	access:public	signature:(std::size_t offset = 0)
hdr_offset_holder	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^struct hdr_offset_holder$/;"	s	namespace:boost::container::containers_detail
head	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typename add_reference<const Head>::type head() const {  return m_head; }$/;"	f	class:boost::container::containers_detail::tuple	access:public	signature:() const
head	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typename add_reference<Head>::type head()             {  return m_head; }$/;"	f	class:boost::container::containers_detail::tuple	access:public	signature:()
head	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typename add_reference<const Head>::type head() const {  return m_head; }$/;"	f	class:boost::interprocess::detail::tuple	access:public	signature:() const
head	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typename add_reference<Head>::type head()             {  return m_head; }$/;"	f	class:boost::interprocess::detail::tuple	access:public	signature:()
header_t	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      header_t()$/;"	f	struct:boost::interprocess::detail::shared_pool_impl::header_t	access:public	signature:()
header_t	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   struct header_t : mutex_type$/;"	s	class:boost::interprocess::detail::shared_pool_impl	inherits:mutex_type	access:private
header_t	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   struct header_t : public interprocess_mutex$/;"	s	class:boost::interprocess::detail::simple_seq_fit_impl	inherits:interprocess_mutex	access:private
header_t	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   struct header_t : public interprocess_mutex$/;"	s	class:boost::interprocess::detail::simple_seq_fit_impl	inherits:interprocess_mutex	access:private
header_t	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   struct header_t : public interprocess_mutex$/;"	s	class:boost::interprocess::rbtree_best_fit	inherits:interprocess_mutex	access:private
header_t	/usr/include/boost/interprocess/segment_manager.hpp	/^      header_t(Base *restricted_segment_mngr)$/;"	f	struct:boost::interprocess::segment_manager::header_t	access:public	signature:(Base *restricted_segment_mngr)
header_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   struct header_t$/;"	s	class:boost::interprocess::segment_manager	inherits:rmutex	access:private
hkey_local_machine	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static void * const  hkey_local_machine = (void*)(unsigned long*)(long)(0x80000002);$/;"	m	namespace:boost::interprocess::winapi
holder_	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^      : holder_()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
holder_	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   MultiallocationChain   holder_;$/;"	m	class:boost::container::containers_detail::transform_multiallocation_chain	access:private
hook_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename rbtree_hook<VoidPointer>::type hook_type;$/;"	t	struct:boost::container::containers_detail::rbtree_node	access:public
h_event	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *h_event;$/;"	m	struct:boost::interprocess::winapi::interprocess_overlapped	access:public
ibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_ibufferstream<char>    ibufferstream;$/;"	t	namespace:boost::interprocess
iconst_iterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename Icont::const_iterator             iconst_iterator;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
icont	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   const ICont &icont() const$/;"	f	namespace:boost::container::containers_detail	access:protected	signature:() const
icont	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   ICont &icont()$/;"	f	namespace:boost::container::containers_detail	access:protected	signature:()
Icont	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^         >::type                                      Icont;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
Icont	/usr/include/boost/interprocess/containers/container/list.hpp	/^      containers_detail::intrusive_list_type<A>::type Icont;$/;"	t	class:boost::container::list	access:private
Icont	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      containers_detail::intrusive_slist_type<A>::type           Icont;$/;"	t	class:boost::container::slist	access:private
icont_	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      Icont &icont_;$/;"	m	class:boost::container::containers_detail::rbtree::back_insertion_functor	access:private
icont_	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      Icont &icont_;$/;"	m	class:boost::container::containers_detail::rbtree::insertion_functor	access:private
icont_	/usr/include/boost/interprocess/containers/container/list.hpp	/^      Icont &icont_;$/;"	m	class:boost::container::list::insertion_functor	access:private
icont_	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      Icont &icont_;$/;"	m	class:boost::container::slist::insertion_functor	access:private
icont_citerator	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename ICont::const_iterator             icont_citerator;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
icont_iterator	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename ICont::iterator                   icont_iterator;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
id	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t id;$/;"	m	struct:boost::interprocess::flat_map_intersegment::segment_info_t	access:public
identity	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct identity $/;"	s	namespace:boost::container::containers_detail
identity	/usr/include/boost/interprocess/detail/move.hpp	/^struct identity$/;"	s	namespace:boost::interprocess::move_detail
identity	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct identity $/;"	s	namespace:boost::interprocess::detail
if_	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct if_$/;"	s	namespace:boost::container::containers_detail
if_	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct if_$/;"	s	namespace:boost::interprocess::detail
if_c	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct if_c$/;"	s	namespace:boost::container::containers_detail
if_c	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct if_c<false,T1,T2>$/;"	s	namespace:boost::container::containers_detail
if_c	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct if_c$/;"	s	namespace:boost::interprocess::detail
if_c	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct if_c<false,T1,T2>$/;"	s	namespace:boost::interprocess::detail
iiterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      typedef typename Icont::iterator  iiterator;$/;"	t	class:boost::container::containers_detail::rbtree::const_iterator	access:protected
iiterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename Icont::iterator                   iiterator;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
impl	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^namespace impl{$/;"	n	namespace:boost::container::containers_detail
impl	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      : internal_data(x.get_al()),impl(x.get_al())$/;"	f	class:boost::container::stable_vector	access:public	signature:(x.get_al())
impl	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   impl_type                           impl;$/;"	m	class:boost::container::stable_vector	access:private
impl_allocator_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::allocator_type          impl_allocator_type;$/;"	t	class:boost::container::flat_map	access:private
impl_allocator_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::allocator_type          impl_allocator_type;$/;"	t	class:boost::container::flat_multimap	access:private
impl_const_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::const_iterator          impl_const_iterator;$/;"	t	class:boost::container::flat_map	access:private
impl_const_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::const_iterator          impl_const_iterator;$/;"	t	class:boost::container::flat_multimap	access:private
impl_const_pointer	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::const_pointer           impl_const_pointer;$/;"	t	class:boost::container::flat_map	access:private
impl_const_pointer	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::const_pointer           impl_const_pointer;$/;"	t	class:boost::container::flat_multimap	access:private
impl_const_reference	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::const_reference         impl_const_reference;$/;"	t	class:boost::container::flat_map	access:private
impl_const_reference	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::const_reference         impl_const_reference;$/;"	t	class:boost::container::flat_multimap	access:private
impl_const_reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::const_reverse_iterator  impl_const_reverse_iterator;$/;"	t	class:boost::container::flat_map	access:private
impl_const_reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::const_reverse_iterator  impl_const_reverse_iterator;$/;"	t	class:boost::container::flat_multimap	access:private
impl_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::iterator                impl_iterator;$/;"	t	class:boost::container::flat_map	access:private
impl_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::iterator                impl_iterator;$/;"	t	class:boost::container::flat_multimap	access:private
impl_iterator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef typename impl_type::iterator               impl_iterator;$/;"	t	class:boost::container::stable_vector	access:private
impl_pointer	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::pointer                 impl_pointer;$/;"	t	class:boost::container::flat_map	access:private
impl_pointer	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::pointer                 impl_pointer;$/;"	t	class:boost::container::flat_multimap	access:private
impl_reference	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::reference               impl_reference;$/;"	t	class:boost::container::flat_map	access:private
impl_reference	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::reference               impl_reference;$/;"	t	class:boost::container::flat_multimap	access:private
impl_reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::reverse_iterator        impl_reverse_iterator;$/;"	t	class:boost::container::flat_map	access:private
impl_reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::reverse_iterator        impl_reverse_iterator;$/;"	t	class:boost::container::flat_multimap	access:private
impl_tree_t	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^                              rebind<containers_detail::pair<Key, T> >::other> impl_tree_t;$/;"	t	class:boost::container::flat_map	access:private
impl_tree_t	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^                              rebind<containers_detail::pair<Key, T> >::other> impl_tree_t;$/;"	t	class:boost::container::flat_multimap	access:private
impl_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   >                                                  impl_type;$/;"	t	class:boost::container::stable_vector	access:private
impl_value_compare	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::value_compare           impl_value_compare;$/;"	t	class:boost::container::flat_map	access:private
impl_value_compare	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::value_compare           impl_value_compare;$/;"	t	class:boost::container::flat_multimap	access:private
impl_value_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::value_type              impl_value_type;$/;"	t	class:boost::container::flat_map	access:private
impl_value_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename impl_tree_t::value_type              impl_value_type;$/;"	t	class:boost::container::flat_multimap	access:private
Imultiset	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      <block_ctrl, bi::base_hook<TreeHook> >::type                Imultiset;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
imultiset_iterator	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef typename Imultiset::iterator                           imultiset_iterator;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
incorporate_after	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void incorporate_after(iterator after_this, void_pointer begin , iterator before_end)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:(iterator after_this, void_pointer begin , iterator before_end)
incorporate_after	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void incorporate_after(iterator after_this, void_pointer begin, void_pointer before_end, std::size_t n)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:(iterator after_this, void_pointer begin, void_pointer before_end, std::size_t n)
incorporate_after	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void incorporate_after(iterator after_this, void_pointer begin, void_pointer before_end, std::size_t n)$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:(iterator after_this, void_pointer begin, void_pointer before_end, std::size_t n)
increment	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void increment()$/;"	f	class:boost::container::constant_iterator	access:private	signature:()
increment	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void increment()$/;"	f	class:boost::container::default_construct_iterator	access:private	signature:()
increment	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void increment()$/;"	f	class:boost::container::emplace_iterator	access:private	signature:()
increment	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void increment()$/;"	f	class:boost::container::repeat_iterator	access:private	signature:()
increment	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   void increment()$/;"	f	class:boost::container::transform_iterator	access:private	signature:()
increment	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void increment()$/;"	f	class:boost::container::stable_vector_detail::iterator	access:private	signature:()
increment	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   void increment()$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:()
increment_size	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   void increment_size(size_type inc)$/;"	f	struct:boost::container::containers_detail::scoped_destructor_n	access:public	signature:(size_type inc)
increment_size	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   void increment_size(size_type)$/;"	f	struct:boost::container::containers_detail::null_scoped_destructor_n	access:public	signature:(size_type)
inc_offset	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void inc_offset(std::ptrdiff_t bytes)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(std::ptrdiff_t bytes)
inc_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^   void inc_offset(std::ptrdiff_t bytes)$/;"	f	class:boost::interprocess::offset_ptr	access:private	signature:(std::ptrdiff_t bytes)
inc_ref_count	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   std::size_t inc_ref_count()$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:()
index_aux	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef flat_map_index_aux<MapConfig>  index_aux;$/;"	t	class:boost::interprocess::flat_map_index	access:private
index_aux	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef iset_index_aux<MapConfig>                     index_aux;$/;"	t	class:boost::interprocess::iset_index	access:private
index_aux	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef iunordered_set_index_aux<MapConfig>           index_aux;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
index_aux	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef detail::map_index_aux<MapConfig>  index_aux;$/;"	t	class:boost::interprocess::map_index	access:private
index_aux	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef unordered_map_index_aux<MapConfig>   index_aux;$/;"	t	class:boost::interprocess::unordered_map_index	access:private
index_config	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct index_config$/;"	s	namespace:boost::interprocess::detail
index_config_named	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef detail::index_config<CharType, MemoryAlgorithm>  index_config_named;$/;"	t	class:boost::interprocess::segment_manager	access:private
index_config_unique	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef detail::index_config<char, MemoryAlgorithm>      index_config_unique;$/;"	t	class:boost::interprocess::segment_manager	access:private
index_data	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   index_data(void *ptr) : m_ptr(ptr){}$/;"	f	struct:boost::interprocess::detail::index_data	access:public	signature:(void *ptr)
index_data	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct index_data$/;"	s	namespace:boost::interprocess::detail
index_key	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   index_key (const char_type *name, std::size_t length)$/;"	f	struct:boost::interprocess::detail::index_key	access:public	signature:(const char_type *name, std::size_t length)
index_key	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct index_key$/;"	s	namespace:boost::interprocess::detail
index_pointer	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef ptr_alloc_ptr                     index_pointer;$/;"	t	class:boost::container::deque_base::const_iterator	access:public
index_pointer	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef ptr_alloc_ptr                     index_pointer;$/;"	t	class:boost::container::deque_base::iterator	access:public
index_pointer	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef ptr_alloc_ptr index_pointer;$/;"	t	class:boost::container::deque	access:private
index_t	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^                    key_less, allocator_type>      index_t;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
index_t	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      >::type                                                  index_t;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
index_t	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      >::type                                         index_t;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
index_t	/usr/include/boost/interprocess/indexes/map_index.hpp	/^       key_less, allocator_type>                   index_t;$/;"	t	struct:boost::interprocess::detail::map_index_aux	access:public
index_t	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^                         key_equal, allocator_type>      index_t;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
index_tuple	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^struct index_tuple{};$/;"	s	namespace:boost::container::containers_detail
index_tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^struct index_tuple{};$/;"	s	namespace:boost::interprocess::detail
index_tuple_t	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   typedef typename build_number_seq<sizeof...(Args)>::type             index_tuple_t;$/;"	t	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:public
index_tuple_t	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   typedef typename containers_detail::build_number_seq<sizeof...(Args)>::type index_tuple_t;$/;"	t	struct:boost::container::emplace_functor	access:public
index_tuple_t	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   typedef typename build_number_seq<sizeof...(Args)>::type index_tuple_t;$/;"	t	struct:boost::interprocess::detail::CtorNArg	access:public
index_type	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename index_aux::index_t                   index_type;$/;"	t	class:boost::interprocess::iset_index	access:private
index_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_aux::index_t                   index_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
index_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef IndexType<index_config_named>                    index_type;$/;"	t	class:boost::interprocess::segment_manager	access:private
infinite_time	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long infinite_time        = 0xFFFFFFFF;$/;"	m	namespace:boost::interprocess::winapi
info	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      file_rename_information_t info;$/;"	m	struct:boost::interprocess::winapi::ntquery_mem_t::ren_t	access:public
Information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long *Information;$/;"	m	struct:boost::interprocess::winapi::io_status_block_t	access:public
info_constants_t	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   struct info_constants_t$/;"	s	class:boost::interprocess::xsi_shared_memory_device	access:private
info_t	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   struct info_t$/;"	s	class:boost::interprocess::xsi_shared_memory_device	access:private
inherited	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typedef tuple<Tail...> inherited;$/;"	t	class:boost::container::containers_detail::tuple	access:private
inherited	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef tuple<Tail...> inherited;$/;"	t	class:boost::interprocess::detail::tuple	access:private
init	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void init()$/;"	f	class:boost::container::containers_detail::basic_string_base	access:private	signature:()
InitBufferSize	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   enum {   InitBufferSize = 64};$/;"	e	enum:boost::interprocess::iunordered_set_index::__anon22
initialization_func_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   initialization_func_t(std::size_t maxmsg = 0, $/;"	f	class:boost::interprocess::detail::initialization_func_t	access:public	signature:(std::size_t maxmsg = 0, std::size_t maxmsgsize = 0)
initialization_func_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^class initialization_func_t$/;"	c	namespace:boost::interprocess::detail
InitializedSegment	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^      InitializedSegment,$/;"	e	enum:boost::interprocess::detail::managed_open_or_create_impl::__anon7
InitializeSecurityDescriptor	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall InitializeSecurityDescriptor(interprocess_security_descriptor *pSecurityDescriptor, unsigned long dwRevision);$/;"	p	namespace:boost::interprocess::winapi	signature:(interprocess_security_descriptor *pSecurityDescriptor, unsigned long dwRevision)
initialize_end_node	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void initialize_end_node(size_type impl_capacity = 0)$/;"	f	class:boost::container::stable_vector	access:private	signature:(size_type impl_capacity = 0)
initialize_memory	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void initialize_memory()$/;"	f	class:boost::interprocess::detail::mq_hdr_t	access:public	signature:()
initialize_object_attributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void initialize_object_attributes$/;"	f	namespace:boost::interprocess::winapi	signature:( object_attributes_t *pobject_attr, unicode_string_t *name , unsigned long attr, void *rootdir, void *security_descr)
initialize_pointers	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void initialize_pointers()$/;"	f	class:boost::interprocess::basic_vectorbuf	access:private	signature:()
InitializingSegment	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^      InitializingSegment,  $/;"	e	enum:boost::interprocess::detail::managed_open_or_create_impl::__anon7
InitialMapSize	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   enum { InitialMapSize = 8 };$/;"	e	enum:boost::container::deque_base::__anon3
init_bucket	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      bucket_type init_bucket;$/;"	m	struct:boost::interprocess::iunordered_set_index_aux::allocator_holder	access:public
inplace_impl	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void inplace_impl(T* ptr, const containers_detail::index_tuple<IdxPack...>&)$/;"	f	struct:boost::container::emplace_functor	access:public	signature:(T* ptr, const containers_detail::index_tuple<IdxPack...>&)
insert	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator insert(const_iterator position, BOOST_INTERPROCESS_RV_REF(value_type) mx) $/;"	f	class:boost::container::deque	access:public	signature:(const_iterator position, BOOST_INTERPROCESS_RV_REF(value_type) mx)
insert	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator insert(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::deque	access:public	signature:(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
insert	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator insert(const_iterator position, insert_const_ref_type x) $/;"	f	class:boost::container::deque	access:public	signature:(const_iterator position, insert_const_ref_type x)
insert	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator insert(const_iterator position, T &x)$/;"	f	class:boost::container::deque	access:public	signature:(const_iterator position, T &x)
insert	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void insert(const_iterator pos, InpIt first, InpIt last) $/;"	f	class:boost::container::deque	access:public	signature:(const_iterator pos, InpIt first, InpIt last)
insert	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void insert(const_iterator pos, size_type n, const value_type& x)$/;"	f	class:boost::container::deque	access:public	signature:(const_iterator pos, size_type n, const value_type& x)
insert	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator insert(const value_type& x) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const value_type& x)
insert	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator insert(const_iterator position, BOOST_INTERPROCESS_RV_REF(impl_value_type) x) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const_iterator position, BOOST_INTERPROCESS_RV_REF(impl_value_type) x)
insert	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator insert(const_iterator position, BOOST_INTERPROCESS_RV_REF(impl_value_type) x)$/;"	f	class:boost::container::flat_map	access:public	signature:(const_iterator position, BOOST_INTERPROCESS_RV_REF(impl_value_type) x)
insert	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator insert(const_iterator position, BOOST_INTERPROCESS_RV_REF(value_type) x) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const_iterator position, BOOST_INTERPROCESS_RV_REF(value_type) x)
insert	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator insert(const_iterator position, BOOST_INTERPROCESS_RV_REF(value_type) x)$/;"	f	class:boost::container::flat_map	access:public	signature:(const_iterator position, BOOST_INTERPROCESS_RV_REF(value_type) x)
insert	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator insert(const_iterator position, const value_type& x) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const_iterator position, const value_type& x)
insert	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator insert(const_iterator position, const value_type& x)$/;"	f	class:boost::container::flat_map	access:public	signature:(const_iterator position, const value_type& x)
insert	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   std::pair<iterator,bool> insert(const value_type& x) $/;"	f	class:boost::container::flat_map	access:public	signature:(const value_type& x)
insert	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   void insert(InputIterator first, InputIterator last) $/;"	f	class:boost::container::flat_map	access:public	signature:(InputIterator first, InputIterator last)
insert	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   void insert(InputIterator first, InputIterator last) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(InputIterator first, InputIterator last)
insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::flat_multiset	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(const_iterator p, insert_const_ref_type x) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const_iterator p, insert_const_ref_type x)
insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(const_iterator p, insert_const_ref_type x) $/;"	f	class:boost::container::flat_set	access:public	signature:(const_iterator p, insert_const_ref_type x)
insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(const_iterator position, BOOST_INTERPROCESS_RV_REF(value_type) x) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const_iterator position, BOOST_INTERPROCESS_RV_REF(value_type) x)
insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(const_iterator position, BOOST_INTERPROCESS_RV_REF(value_type) x) $/;"	f	class:boost::container::flat_set	access:public	signature:(const_iterator position, BOOST_INTERPROCESS_RV_REF(value_type) x)
insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::flat_multiset	access:public	signature:(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::flat_set	access:public	signature:(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(const_iterator position, T &x)$/;"	f	class:boost::container::flat_multiset	access:public	signature:(const_iterator position, T &x)
insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(const_iterator position, T &x)$/;"	f	class:boost::container::flat_set	access:public	signature:(const_iterator position, T &x)
insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(insert_const_ref_type x) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(insert_const_ref_type x)
insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator insert(T &x)$/;"	f	class:boost::container::flat_multiset	access:public	signature:(T &x)
insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   std::pair<iterator, bool> insert(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::flat_set	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   std::pair<iterator, bool> insert(insert_const_ref_type x) $/;"	f	class:boost::container::flat_set	access:public	signature:(insert_const_ref_type x)
insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   std::pair<iterator, bool> insert(T &x)$/;"	f	class:boost::container::flat_set	access:public	signature:(T &x)
insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   void insert(InputIterator first, InputIterator last) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(InputIterator first, InputIterator last)
insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   void insert(InputIterator first, InputIterator last) $/;"	f	class:boost::container::flat_set	access:public	signature:(InputIterator first, InputIterator last)
insert	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator insert(const_iterator p, BOOST_INTERPROCESS_RV_REF(T) x) $/;"	f	class:boost::container::list	access:public	signature:(const_iterator p, BOOST_INTERPROCESS_RV_REF(T) x)
insert	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator insert(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::list	access:public	signature:(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
insert	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator insert(const_iterator position, insert_const_ref_type x) $/;"	f	class:boost::container::list	access:public	signature:(const_iterator position, insert_const_ref_type x)
insert	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator insert(const_iterator position, T &x) { return this->insert(position, const_cast<const T &>(x)); }$/;"	f	class:boost::container::list	access:public	signature:(const_iterator position, T &x)
insert	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void insert(const_iterator p, InpIt first, InpIt last) $/;"	f	class:boost::container::list	access:public	signature:(const_iterator p, InpIt first, InpIt last)
insert	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void insert(const_iterator p, size_type n, const T& x)$/;"	f	class:boost::container::list	access:public	signature:(const_iterator p, size_type n, const T& x)
insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(const nonconst_value_type& x) $/;"	f	class:boost::container::multimap	access:public	signature:(const nonconst_value_type& x)
insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(const value_type& x) $/;"	f	class:boost::container::multimap	access:public	signature:(const value_type& x)
insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(iterator position, BOOST_INTERPROCESS_RV_REF(nonconst_impl_value_type) x)$/;"	f	class:boost::container::map	access:public	signature:(iterator position, BOOST_INTERPROCESS_RV_REF(nonconst_impl_value_type) x)
insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(iterator position, BOOST_INTERPROCESS_RV_REF(nonconst_impl_value_type) x)$/;"	f	class:boost::container::multimap	access:public	signature:(iterator position, BOOST_INTERPROCESS_RV_REF(nonconst_impl_value_type) x)
insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(iterator position, BOOST_INTERPROCESS_RV_REF(nonconst_value_type) x)$/;"	f	class:boost::container::map	access:public	signature:(iterator position, BOOST_INTERPROCESS_RV_REF(nonconst_value_type) x)
insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(iterator position, BOOST_INTERPROCESS_RV_REF(nonconst_value_type) x)$/;"	f	class:boost::container::multimap	access:public	signature:(iterator position, BOOST_INTERPROCESS_RV_REF(nonconst_value_type) x)
insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(iterator position, BOOST_INTERPROCESS_RV_REF(value_type) x)$/;"	f	class:boost::container::map	access:public	signature:(iterator position, BOOST_INTERPROCESS_RV_REF(value_type) x)
insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(iterator position, const nonconst_value_type& x)$/;"	f	class:boost::container::map	access:public	signature:(iterator position, const nonconst_value_type& x)
insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(iterator position, const nonconst_value_type& x)$/;"	f	class:boost::container::multimap	access:public	signature:(iterator position, const nonconst_value_type& x)
insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(iterator position, const value_type& x)$/;"	f	class:boost::container::map	access:public	signature:(iterator position, const value_type& x)
insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator insert(iterator position, const value_type& x)$/;"	f	class:boost::container::multimap	access:public	signature:(iterator position, const value_type& x)
insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   std::pair<iterator,bool> insert(const nonconst_value_type& x) $/;"	f	class:boost::container::map	access:public	signature:(const nonconst_value_type& x)
insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   std::pair<iterator,bool> insert(const value_type& x) $/;"	f	class:boost::container::map	access:public	signature:(const value_type& x)
insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   void insert(InputIterator first, InputIterator last) $/;"	f	class:boost::container::map	access:public	signature:(InputIterator first, InputIterator last)
insert	/usr/include/boost/interprocess/containers/container/map.hpp	/^   void insert(InputIterator first, InputIterator last) $/;"	f	class:boost::container::multimap	access:public	signature:(InputIterator first, InputIterator last)
insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::multiset	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(const_iterator p, BOOST_INTERPROCESS_RV_REF(value_type) x) $/;"	f	class:boost::container::multiset	access:public	signature:(const_iterator p, BOOST_INTERPROCESS_RV_REF(value_type) x)
insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(const_iterator p, BOOST_INTERPROCESS_RV_REF(value_type) x) $/;"	f	class:boost::container::set	access:public	signature:(const_iterator p, BOOST_INTERPROCESS_RV_REF(value_type) x)
insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(const_iterator p, insert_const_ref_type x) $/;"	f	class:boost::container::multiset	access:public	signature:(const_iterator p, insert_const_ref_type x)
insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(const_iterator p, insert_const_ref_type x) $/;"	f	class:boost::container::set	access:public	signature:(const_iterator p, insert_const_ref_type x)
insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::multiset	access:public	signature:(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::set	access:public	signature:(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(const_iterator position, T &x)$/;"	f	class:boost::container::multiset	access:public	signature:(const_iterator position, T &x)
insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(const_iterator position, T &x)$/;"	f	class:boost::container::set	access:public	signature:(const_iterator position, T &x)
insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(insert_const_ref_type x) $/;"	f	class:boost::container::multiset	access:public	signature:(insert_const_ref_type x)
insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator insert(T &x)$/;"	f	class:boost::container::multiset	access:public	signature:(T &x)
insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   std::pair<iterator,bool> insert(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::set	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   std::pair<iterator,bool> insert(insert_const_ref_type x) $/;"	f	class:boost::container::set	access:public	signature:(insert_const_ref_type x)
insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   std::pair<iterator,bool> insert(T &x)$/;"	f	class:boost::container::set	access:public	signature:(T &x)
insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   void insert(InputIterator first, InputIterator last) $/;"	f	class:boost::container::multiset	access:public	signature:(InputIterator first, InputIterator last)
insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   void insert(InputIterator first, InputIterator last) $/;"	f	class:boost::container::set	access:public	signature:(InputIterator first, InputIterator last)
insert	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator insert(const_iterator p, BOOST_INTERPROCESS_RV_REF(value_type) x) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator p, BOOST_INTERPROCESS_RV_REF(value_type) x)
insert	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator insert(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
insert	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator insert(const_iterator position, insert_const_ref_type x) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator position, insert_const_ref_type x)
insert	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator insert(const_iterator position, T &x)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator position, T &x)
insert	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void insert(const_iterator p, InIter first, InIter last) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator p, InIter first, InIter last)
insert	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void insert(const_iterator p, size_type n, const value_type& x) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator p, size_type n, const value_type& x)
insert	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator insert(const_iterator position, BOOST_INTERPROCESS_RV_REF(T) x) $/;"	f	class:boost::container::stable_vector	access:public	signature:(const_iterator position, BOOST_INTERPROCESS_RV_REF(T) x)
insert	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator insert(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::stable_vector	access:public	signature:(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
insert	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator insert(const_iterator position, insert_const_ref_type x) $/;"	f	class:boost::container::stable_vector	access:public	signature:(const_iterator position, insert_const_ref_type x)
insert	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator insert(const_iterator position, T &x) { return this->insert(position, const_cast<const T &>(x)); }$/;"	f	class:boost::container::stable_vector	access:public	signature:(const_iterator position, T &x)
insert	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void insert(const_iterator position, size_type n, const T& t)$/;"	f	class:boost::container::stable_vector	access:public	signature:(const_iterator position, size_type n, const T& t)
insert	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void insert(const_iterator position,InputIterator first, InputIterator last)$/;"	f	class:boost::container::stable_vector	access:public	signature:(const_iterator position,InputIterator first, InputIterator last)
insert	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& insert(size_type pos, const basic_string& s) $/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos, const basic_string& s)
insert	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& insert(size_type pos, const basic_string& s,$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos, const basic_string& s, size_type beg, size_type n)
insert	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& insert(size_type pos, const CharT* s) $/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos, const CharT* s)
insert	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& insert(size_type pos, const CharT* s, size_type n) $/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos, const CharT* s, size_type n)
insert	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& insert(size_type pos, size_type n, CharT c) $/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos, size_type n, CharT c)
insert	/usr/include/boost/interprocess/containers/container/string.hpp	/^   iterator insert(iterator position, CharT c) $/;"	f	class:boost::container::basic_string	access:public	signature:(iterator position, CharT c)
insert	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void insert(iterator p, InputIter first, InputIter last) $/;"	f	class:boost::container::basic_string	access:public	signature:(iterator p, InputIter first, InputIter last)
insert	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void insert(iterator position, std::size_t n, CharT c)$/;"	f	class:boost::container::basic_string	access:public	signature:(iterator position, std::size_t n, CharT c)
insert	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator insert(const_iterator position, BOOST_INTERPROCESS_RV_REF(T) x) $/;"	f	class:boost::container::vector	access:public	signature:(const_iterator position, BOOST_INTERPROCESS_RV_REF(T) x)
insert	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator insert(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::vector	access:public	signature:(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
insert	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator insert(const_iterator position, insert_const_ref_type x) $/;"	f	class:boost::container::vector	access:public	signature:(const_iterator position, insert_const_ref_type x)
insert	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator insert(const_iterator position, T &x) { return this->insert(position, const_cast<const T &>(x)); }$/;"	f	class:boost::container::vector	access:public	signature:(const_iterator position, T &x)
insert	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void insert(const_iterator p, size_type n, const T& x)$/;"	f	class:boost::container::vector	access:public	signature:(const_iterator p, size_type n, const T& x)
insert	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void insert(const_iterator pos, InIt first, InIt last)$/;"	f	class:boost::container::vector	access:public	signature:(const_iterator pos, InIt first, InIt last)
insertion_functor	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      insertion_functor(Icont &icont)$/;"	f	class:boost::container::containers_detail::rbtree::insertion_functor	access:public	signature:(Icont &icont)
insertion_functor	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   class insertion_functor$/;"	c	class:boost::container::containers_detail::rbtree	access:private
insertion_functor	/usr/include/boost/interprocess/containers/container/list.hpp	/^      insertion_functor(Icont &icont, typename Icont::const_iterator pos)$/;"	f	class:boost::container::list::insertion_functor	access:public	signature:(Icont &icont, typename Icont::const_iterator pos)
insertion_functor	/usr/include/boost/interprocess/containers/container/list.hpp	/^   class insertion_functor$/;"	c	class:boost::container::list	access:private
insertion_functor	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      insertion_functor(Icont &icont, typename Icont::const_iterator prev)$/;"	f	class:boost::container::slist::insertion_functor	access:public	signature:(Icont &icont, typename Icont::const_iterator prev)
insertion_functor	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   class insertion_functor$/;"	c	class:boost::container::slist	access:private
insert_after	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   iterator insert_after(iterator it, pointer m)$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:(iterator it, pointer m)
insert_after	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   iterator insert_after(iterator it, void_pointer m)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:(iterator it, void_pointer m)
insert_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator insert_after(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator position, const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
insert_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator insert_after(const_iterator position, T &x)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator position, T &x)
insert_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator insert_after(const_iterator prev_pos, BOOST_INTERPROCESS_RV_REF(value_type) x) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev_pos, BOOST_INTERPROCESS_RV_REF(value_type) x)
insert_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator insert_after(const_iterator prev_pos, insert_const_ref_type x) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev_pos, insert_const_ref_type x)
insert_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void insert_after(const_iterator prev_pos, InIter first, InIter last) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev_pos, InIter first, InIter last)
insert_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void insert_after(const_iterator prev_pos, size_type n, const value_type& x)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev_pos, size_type n, const value_type& x)
insert_check	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   std::pair<iterator, bool>insert_check$/;"	f	class:boost::interprocess::iset_index	access:public	signature:(const intrusive_compare_key_type &key, insert_commit_data &commit_data)
insert_check	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   std::pair<iterator, bool>insert_check$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(const intrusive_compare_key_type &key, insert_commit_data &commit_data)
insert_commit	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   iterator insert_commit(value_type &val, insert_commit_data &commit_data)$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(value_type &val, insert_commit_data &commit_data)
insert_commit_data	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   struct insert_commit_data$/;"	s	class:boost::container::containers_detail::flat_tree	access:private
insert_commit_data	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename Icont::insert_commit_data insert_commit_data;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
insert_commit_data	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename index_type::insert_commit_data       insert_commit_data;$/;"	t	class:boost::interprocess::iset_index	access:public
insert_commit_data	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::insert_commit_data       insert_commit_data;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
insert_const_ref_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      move_const_ref_type<T>::type                    insert_const_ref_type;$/;"	t	class:boost::container::deque	access:private
insert_const_ref_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^      move_const_ref_type<T>::type insert_const_ref_type;$/;"	t	class:boost::container::flat_multiset	access:private
insert_const_ref_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^      move_const_ref_type<T>::type insert_const_ref_type;$/;"	t	class:boost::container::flat_set	access:private
insert_const_ref_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^      move_const_ref_type<T>::type                    insert_const_ref_type;$/;"	t	class:boost::container::list	access:private
insert_const_ref_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^      move_const_ref_type<T>::type insert_const_ref_type;$/;"	t	class:boost::container::multiset	access:private
insert_const_ref_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^      move_const_ref_type<T>::type insert_const_ref_type;$/;"	t	class:boost::container::set	access:private
insert_const_ref_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      move_const_ref_type<T>::type                    insert_const_ref_type;$/;"	t	class:boost::container::slist	access:private
insert_const_ref_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      move_const_ref_type<T>::type insert_const_ref_type;$/;"	t	class:boost::container::stable_vector	access:private
insert_const_ref_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      move_const_ref_type<T>::type insert_const_ref_type;$/;"	t	class:boost::container::vector	access:private
insert_equal	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator insert_equal(const value_type& val)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const value_type& val)
insert_equal	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator insert_equal(const_iterator pos, BOOST_INTERPROCESS_RV_REF(value_type) mval)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const_iterator pos, BOOST_INTERPROCESS_RV_REF(value_type) mval)
insert_equal	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator insert_equal(const_iterator pos, const value_type& val)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const_iterator pos, const value_type& val)
insert_equal	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   void insert_equal(InIt first, InIt last)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(InIt first, InIt last)
insert_equal	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator insert_equal(const value_type& v)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const value_type& v)
insert_equal	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator insert_equal(const_iterator hint, BOOST_INTERPROCESS_FWD_REF(MovableConvertible) mv)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator hint, BOOST_INTERPROCESS_FWD_REF(MovableConvertible) mv)
insert_equal	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator insert_equal(const_iterator hint, const value_type& v)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator hint, const value_type& v)
insert_equal	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void insert_equal(InputIterator first, InputIterator last)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(InputIterator first, InputIterator last)
insert_iter	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator insert_iter(const_iterator position, InputIterator first, InputIterator last, std::forward_iterator_tag)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const_iterator position, InputIterator first, InputIterator last, std::forward_iterator_tag)
insert_iter	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void insert_iter(const_iterator position, InputIterator first, InputIterator last, boost::mpl::false_)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const_iterator position, InputIterator first, InputIterator last, boost::mpl::false_)
insert_iter	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void insert_iter(const_iterator position,InputIterator first,InputIterator last, boost::mpl::true_)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const_iterator position,InputIterator first,InputIterator last, boost::mpl::true_)
insert_iter	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void insert_iter(const_iterator position,InputIterator first,InputIterator last,std::input_iterator_tag)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const_iterator position,InputIterator first,InputIterator last,std::input_iterator_tag)
insert_iterator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   insert_iterator(Container& x, $/;"	f	class:std::insert_iterator	access:public	signature:(Container& x, typename Container::iterator i, bool is_previous = false)
insert_iterator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^class insert_iterator<boost::container::slist<T, A> > $/;"	c	namespace:std
insert_iter_fwd	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void insert_iter_fwd(const impl_iterator it, FwdIterator first, FwdIterator last, difference_type n)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const impl_iterator it, FwdIterator first, FwdIterator last, difference_type n)
insert_iter_fwd_alloc	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void insert_iter_fwd_alloc(const impl_iterator it, FwdIterator first, FwdIterator last, difference_type n, allocator_v1)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const impl_iterator it, FwdIterator first, FwdIterator last, difference_type n, allocator_v1)
insert_iter_fwd_alloc	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void insert_iter_fwd_alloc(const impl_iterator it, FwdIterator first, FwdIterator last, difference_type n, allocator_v2)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const impl_iterator it, FwdIterator first, FwdIterator last, difference_type n, allocator_v2)
insert_iter_prolog	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void insert_iter_prolog(size_type n, difference_type d)$/;"	f	class:boost::container::stable_vector	access:private	signature:(size_type n, difference_type d)
insert_mapping	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static void insert_mapping(segment_group_id group_id, void *ptr, std::size_t size)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(segment_group_id group_id, void *ptr, std::size_t size)
insert_not_iter	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void insert_not_iter(const_iterator position, size_type n, const T& t)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const_iterator position, size_type n, const T& t)
insert_unique	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator insert_unique(const_iterator pos, BOOST_INTERPROCESS_RV_REF(value_type) mval)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const_iterator pos, BOOST_INTERPROCESS_RV_REF(value_type) mval)
insert_unique	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator insert_unique(const_iterator pos, const value_type& val)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const_iterator pos, const value_type& val)
insert_unique	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   std::pair<iterator,bool> insert_unique(const value_type& val)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const value_type& val)
insert_unique	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   void insert_unique(InIt first, InIt last)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(InIt first, InIt last)
insert_unique	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator insert_unique(const_iterator hint, BOOST_INTERPROCESS_FWD_REF(MovableConvertible) mv)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator hint, BOOST_INTERPROCESS_FWD_REF(MovableConvertible) mv)
insert_unique	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator insert_unique(const_iterator hint, const value_type& v)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator hint, const value_type& v)
insert_unique	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   std::pair<iterator,bool> insert_unique(const value_type& v)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const value_type& v)
insert_unique	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void insert_unique(InputIterator first, InputIterator last)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(InputIterator first, InputIterator last)
insert_unique_check	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   std::pair<iterator,bool> insert_unique_check$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& key, insert_commit_data &data)
insert_unique_check	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   std::pair<iterator,bool> insert_unique_check$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const_iterator hint, const key_type& key, insert_commit_data &data)
insert_unique_commit	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator insert_unique_commit(const value_type& v, insert_commit_data &data)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const value_type& v, insert_commit_data &data)
instance_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   instance_t(){}$/;"	f	class:boost::interprocess::detail::instance_t	access:private	signature:()
instance_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^class instance_t$/;"	c	namespace:boost::interprocess::detail
instance_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^enum instance_type {   anonymous_type, named_type, unique_type, max_allocation_type };$/;"	g	namespace:boost::interprocess
integral_constant	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct integral_constant$/;"	s	namespace:boost::container::containers_detail
integral_constant	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct integral_constant$/;"	s	namespace:boost::interprocess::detail
interlocked_compare_exchange	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long interlocked_compare_exchange(long volatile *addr, long val1, long val2)$/;"	f	namespace:boost::interprocess::winapi	signature:(long volatile *addr, long val1, long val2)
interlocked_decrement	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long interlocked_decrement(long volatile *addr)$/;"	f	namespace:boost::interprocess::winapi	signature:(long volatile *addr)
interlocked_exchange	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long interlocked_exchange(long volatile* addend, long value)$/;"	f	namespace:boost::interprocess::winapi	signature:(long volatile* addend, long value)
interlocked_exchange_add	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long interlocked_exchange_add(long volatile* addend, long value)$/;"	f	namespace:boost::interprocess::winapi	signature:(long volatile* addend, long value)
interlocked_increment	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline long interlocked_increment(long volatile *addr)$/;"	f	namespace:boost::interprocess::winapi	signature:(long volatile *addr)
internal	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long *internal;$/;"	m	struct:boost::interprocess::winapi::interprocess_overlapped	access:public
InternalBufferChars	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static const size_type InternalBufferChars = (sizeof(repr_t) - ShortDataOffset)\/sizeof(value_type);$/;"	m	class:boost::container::containers_detail::basic_string_base	access:protected
InternalBufferChars	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static const typename base_t::size_type InternalBufferChars = base_t::InternalBufferChars;$/;"	m	class:boost::container::basic_string	access:private
internal_data	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      : internal_data(x.get_al()),impl(x.get_al())$/;"	p	class:boost::container::stable_vector	access:public	signature:(x.get_al())
internal_data	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   } internal_data;$/;"	m	class:boost::container::stable_vector	typeref:struct:boost::container::stable_vector::ebo_holder	access:private
internal_equal	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   bool internal_equal (shared_count<T2, VoidAllocator2, Deleter2> const & other) const$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(shared_count<T2, VoidAllocator2, Deleter2> const & other) const
internal_equal	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   bool internal_equal (weak_count<T2, VoidAllocator2, Deleter2> const & other) const$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:(weak_count<T2, VoidAllocator2, Deleter2> const & other) const
internal_high	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long *internal_high;$/;"	m	struct:boost::interprocess::winapi::interprocess_overlapped	access:public
internal_less	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   bool internal_less  (shared_count<T2, VoidAllocator2, Deleter2> const & other) const$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(shared_count<T2, VoidAllocator2, Deleter2> const & other) const
internal_less	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   bool internal_less (weak_count<T2, VoidAllocator2, Deleter2> const & other) const$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:(weak_count<T2, VoidAllocator2, Deleter2> const & other) const
internal_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename rbtree_type<T>::type internal_type;$/;"	t	struct:boost::container::containers_detail::rbtree_node	access:public
interprocess	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/allocators/allocator.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/containers_fwd.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/deque.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/flat_map.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/flat_set.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/list.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/map.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/pair.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/set.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/slist.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/stable_vector.hpp	/^   namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/string.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/vector.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/containers/version_type.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/creation_tags.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/atomic.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^namespace boost { namespace interprocess { namespace detail {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/intermodule_singleton.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/interprocess_tester.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^namespace interprocess { $/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/math_functions.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/min_max.hpp	/^namespace interprocess { $/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/move.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/mpl.hpp	/^namespace interprocess { $/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^namespace interprocess { $/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/posix_time_types_wrk.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^namespace interprocess { $/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/type_traits.hpp	/^namespace interprocess { $/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/utilities.hpp	/^namespace interprocess { $/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^namespace interprocess { $/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/win32_api.hpp	/^namespace interprocess  {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/win32_api.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/errors.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/exceptions.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/file_mapping.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^namespace boost { namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^namespace boost { namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/indexes/map_index.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/indexes/null_index.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^namespace boost { namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^namespace boost{  namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/mapped_region.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/offset_ptr.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/segment_manager.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/shared_memory_object.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^namespace interprocess { $/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/detail/bad_weak_ptr.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^namespace interprocess{$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^namespace boost {  namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^namespace boost {  namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/emulation/interprocess_barrier.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/emulation/interprocess_condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/emulation/interprocess_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/emulation/interprocess_recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/emulation/interprocess_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/file_lock.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/lock_options.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/named_condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/posix/interprocess_barrier.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/posix/interprocess_condition.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/posix/interprocess_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/posix/interprocess_recursive_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/posix/interprocess_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/posix/ptime_to_timespec.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^namespace interprocess {$/;"	n	namespace:boost
interprocess_acl	/usr/include/boost/interprocess/detail/win32_api.hpp	/^} interprocess_acl;$/;"	t	namespace:boost::interprocess::winapi	typeref:struct:boost::interprocess::winapi::_interprocess_acl
interprocess_condition	/usr/include/boost/interprocess/sync/emulation/interprocess_condition.hpp	/^inline interprocess_condition::interprocess_condition()$/;"	f	class:boost::interprocess::interprocess_condition	signature:()
interprocess_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   interprocess_condition();$/;"	p	class:boost::interprocess::interprocess_condition	access:public	signature:()
interprocess_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   interprocess_condition(const interprocess_condition &);$/;"	p	class:boost::interprocess::interprocess_condition	access:private	signature:(const interprocess_condition &)
interprocess_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^class interprocess_condition$/;"	c	namespace:boost::interprocess
interprocess_condition	/usr/include/boost/interprocess/sync/posix/interprocess_condition.hpp	/^inline interprocess_condition::interprocess_condition()$/;"	f	class:boost::interprocess::interprocess_condition	signature:()
interprocess_exception	/usr/include/boost/interprocess/exceptions.hpp	/^   interprocess_exception(const error_info &err_info)$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:(const error_info &err_info)
interprocess_exception	/usr/include/boost/interprocess/exceptions.hpp	/^   interprocess_exception(error_code_t ec = other_error )$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:(error_code_t ec = other_error )
interprocess_exception	/usr/include/boost/interprocess/exceptions.hpp	/^   interprocess_exception(native_error_t sys_err_code)$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:(native_error_t sys_err_code)
interprocess_exception	/usr/include/boost/interprocess/exceptions.hpp	/^class interprocess_exception : public std::exception$/;"	c	namespace:boost::interprocess	inherits:std::exception
interprocess_filetime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_filetime$/;"	s	namespace:boost::interprocess::winapi
interprocess_memory_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_memory_basic_information$/;"	s	namespace:boost::interprocess::winapi
interprocess_mutex	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   typedef typename MutexFamily::mutex_type        interprocess_mutex;$/;"	t	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
interprocess_mutex	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   typedef typename MutexFamily::mutex_type        interprocess_mutex;$/;"	t	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
interprocess_mutex	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef typename MutexFamily::mutex_type                       interprocess_mutex;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
interprocess_mutex	/usr/include/boost/interprocess/sync/emulation/interprocess_mutex.hpp	/^inline interprocess_mutex::interprocess_mutex() $/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
interprocess_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   interprocess_mutex();$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:()
interprocess_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   interprocess_mutex(const interprocess_mutex &);$/;"	p	class:boost::interprocess::interprocess_mutex	access:private	signature:(const interprocess_mutex &)
interprocess_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^class interprocess_mutex$/;"	c	namespace:boost::interprocess
interprocess_mutex	/usr/include/boost/interprocess/sync/posix/interprocess_mutex.hpp	/^inline interprocess_mutex::interprocess_mutex()$/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
interprocess_overlapped	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_overlapped $/;"	s	namespace:boost::interprocess::winapi
interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/emulation/interprocess_recursive_mutex.hpp	/^inline interprocess_recursive_mutex::interprocess_recursive_mutex() $/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   interprocess_recursive_mutex();$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:()
interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   interprocess_recursive_mutex(const interprocess_recursive_mutex &);$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:private	signature:(const interprocess_recursive_mutex &)
interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^class interprocess_recursive_mutex$/;"	c	namespace:boost::interprocess
interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/posix/interprocess_recursive_mutex.hpp	/^inline interprocess_recursive_mutex::interprocess_recursive_mutex()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
interprocess_security_attributes	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct interprocess_security_attributes$/;"	s	namespace:boost::interprocess::winapi
interprocess_security_descriptor	/usr/include/boost/interprocess/detail/win32_api.hpp	/^} interprocess_security_descriptor;$/;"	t	namespace:boost::interprocess::winapi	typeref:struct:boost::interprocess::winapi::_interprocess_security_descriptor
interprocess_semaphore	/usr/include/boost/interprocess/sync/emulation/interprocess_semaphore.hpp	/^inline interprocess_semaphore::interprocess_semaphore(unsigned int initialCount)$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:(unsigned int initialCount)
interprocess_semaphore	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   interprocess_semaphore(const interprocess_semaphore &);$/;"	p	class:boost::interprocess::interprocess_semaphore	access:private	signature:(const interprocess_semaphore &)
interprocess_semaphore	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   interprocess_semaphore(unsigned int initialCount);$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:(unsigned int initialCount)
interprocess_semaphore	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^class interprocess_semaphore$/;"	c	namespace:boost::interprocess
interprocess_semaphore	/usr/include/boost/interprocess/sync/posix/interprocess_semaphore.hpp	/^inline interprocess_semaphore::interprocess_semaphore(unsigned int initialCount)$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:(unsigned int initialCount)
interprocess_tester	/usr/include/boost/interprocess/detail/interprocess_tester.hpp	/^class interprocess_tester$/;"	c	namespace:boost::interprocess::detail
interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_upgradable_mutex();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_upgradable_mutex(const interprocess_upgradable_mutex &);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:private	signature:(const interprocess_upgradable_mutex &)
interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^class interprocess_upgradable_mutex$/;"	c	namespace:boost::interprocess
interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline interprocess_upgradable_mutex::interprocess_upgradable_mutex()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
intersegment_base	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_base()$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:()
intersegment_base	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^struct intersegment_base$/;"	s	namespace:boost::interprocess
intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr& ptr) $/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr& ptr)
intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr<T2> &ptr) $/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<T2> &ptr)
intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr<U> &r, detail::const_cast_tag)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<U> &r, detail::const_cast_tag)
intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr<U> &r, detail::dynamic_cast_tag)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<U> &r, detail::dynamic_cast_tag)
intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr<U> &r, detail::reinterpret_cast_tag)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<U> &r, detail::reinterpret_cast_tag)
intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(const intersegment_ptr<U> &r, detail::static_cast_tag)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<U> &r, detail::static_cast_tag)
intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(pointer ptr = 0)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(pointer ptr = 0)
intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr(U *ptr){  base_t::set_from_pointer(pointer(ptr)); }$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(U *ptr)
intersegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^class intersegment_ptr : public flat_map_intersegment<interprocess_mutex>$/;"	c	namespace:boost::interprocess	inherits:flat_map_intersegment
intrusive	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^namespace intrusive{ $/;"	n	namespace:boost
intrusive	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^namespace intrusive{$/;"	n	namespace:boost
intrusive	/usr/include/boost/interprocess/offset_ptr.hpp	/^namespace intrusive {$/;"	n	namespace:boost
intrusive_compare_key	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   intrusive_compare_key(const CharT *str, std::size_t len)$/;"	f	struct:boost::interprocess::detail::intrusive_compare_key	access:public	signature:(const CharT *str, std::size_t len)
intrusive_compare_key	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct intrusive_compare_key$/;"	s	namespace:boost::interprocess::detail
intrusive_compare_key_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef intrusive_compare_key<CharT>            intrusive_compare_key_type;$/;"	t	struct:boost::interprocess::detail::index_config	access:public
intrusive_compare_key_type	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      intrusive_compare_key_type                         intrusive_compare_key_type;$/;"	t	class:boost::interprocess::iset_index	access:private
intrusive_compare_key_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      intrusive_compare_key_type                         intrusive_compare_key_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
intrusive_compare_key_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      intrusive_compare_key_type                      intrusive_compare_key_type;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
intrusive_key_value_less	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   struct intrusive_key_value_less$/;"	s	class:boost::interprocess::iset_index	access:private
intrusive_list_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^struct intrusive_list_type$/;"	s	namespace:boost::container::containers_detail
intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   intrusive_ptr(): m_ptr(0)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:()
intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   intrusive_ptr(const pointer &p, bool add_ref = true): m_ptr(p)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(const pointer &p, bool add_ref = true)
intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   intrusive_ptr(intrusive_ptr const & rhs)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(intrusive_ptr const & rhs)
intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   template<class U> intrusive_ptr$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(intrusive_ptr<U, VP> const & rhs)
intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^class intrusive_ptr$/;"	c	namespace:boost::interprocess
intrusive_rbtree_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^struct intrusive_rbtree_type$/;"	s	namespace:boost::container::containers_detail
intrusive_slist_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^struct intrusive_slist_type$/;"	s	namespace:boost::container::containers_detail
intrusive_value_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   struct intrusive_value_type$/;"	s	struct:boost::interprocess::detail::index_config	access:public
intrusive_value_type_impl	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   intrusive_value_type_impl(){}$/;"	f	struct:boost::interprocess::detail::intrusive_value_type_impl	access:public	signature:()
intrusive_value_type_impl	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   intrusive_value_type_impl(const intrusive_value_type_impl &);$/;"	p	struct:boost::interprocess::detail::intrusive_value_type_impl	access:private	signature:(const intrusive_value_type_impl &)
intrusive_value_type_impl	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct intrusive_value_type_impl$/;"	s	namespace:boost::interprocess::detail	inherits:Hook
int_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename CharTraits::int_type                 int_type;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
int_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_bufferstream	access:public
int_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:public
int_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_obufferstream	access:public
int_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename CharTraits::int_type     int_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
int_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
int_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
int_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::int_type     int_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
invalid_argument	/usr/include/boost/interprocess/errors.hpp	/^   invalid_argument$/;"	e	enum:boost::interprocess::error_code_t
invalid_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline file_handle_t invalid_file()$/;"	f	namespace:boost::interprocess::detail	signature:()
invalid_file	/usr/include/boost/interprocess/mapped_region.hpp	/^   ,  m_file_mapping_hnd(detail::invalid_file())$/;"	f	namespace:boost::interprocess	signature:()
invalid_file_size	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long invalid_file_size    = (unsigned long)0xFFFFFFFF;$/;"	m	namespace:boost::interprocess::winapi
invalid_handle_value	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static       void * const  invalid_handle_value = (void*)(long)(-1);$/;"	m	namespace:boost::interprocess::winapi
invalid_mode	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , invalid_mode   = 0xffff $/;"	e	enum:boost::interprocess::__anon10
invariant	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   bool invariant()const$/;"	f	class:boost::container::stable_vector	access:private	signature:() const
invariant_checker	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      invariant_checker(const stable_vector& v):p(&v){}$/;"	f	class:boost::container::stable_vector::invariant_checker	access:public	signature:(const stable_vector& v)
invariant_checker	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   class invariant_checker:private boost::noncopyable$/;"	c	class:boost::container::stable_vector	inherits:boost::noncopyable	access:private
in_place_interface	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   in_place_interface(std::size_t alignm, std::size_t sz, const char *tname)$/;"	f	struct:boost::interprocess::detail::in_place_interface	access:public	signature:(std::size_t alignm, std::size_t sz, const char *tname)
in_place_interface	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^struct in_place_interface$/;"	s	namespace:boost::interprocess::detail
io_error	/usr/include/boost/interprocess/errors.hpp	/^   io_error,$/;"	e	enum:boost::interprocess::error_code_t
io_status_block_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct io_status_block_t {$/;"	s	namespace:boost::interprocess::winapi
IsAlignOnly	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef bool_<AlignOnly>            IsAlignOnly;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
iset_index	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   iset_index(typename MapConfig::segment_manager_base *)$/;"	f	class:boost::interprocess::iset_index	access:public	signature:(typename MapConfig::segment_manager_base *)
iset_index	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^class iset_index$/;"	c	namespace:boost::interprocess	inherits:iset_index_aux::index_t
iset_index_aux	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^struct iset_index_aux$/;"	s	namespace:boost::interprocess
IsIterator	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   typedef detail::bool_<is_iterator> IsIterator;$/;"	t	struct:boost::interprocess::detail::CtorNArg	access:public
is_between	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^      is_between(const void *addr, std::size_t size)$/;"	f	struct:boost::container::containers_detail::private_node_pool_impl::is_between	access:public	signature:(const void *addr, std::size_t size)
is_between	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   struct is_between$/;"	s	class:boost::container::containers_detail::private_node_pool_impl	inherits:std::unary_function	access:private
is_convertible	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^class is_convertible$/;"	c	namespace:boost::container::containers_detail
is_convertible	/usr/include/boost/interprocess/detail/move.hpp	/^class is_convertible$/;"	c	namespace:boost::interprocess::move_detail
is_convertible	/usr/include/boost/interprocess/detail/mpl.hpp	/^class is_convertible$/;"	c	namespace:boost::interprocess::detail
is_directory_error	/usr/include/boost/interprocess/errors.hpp	/^   is_directory_error,$/;"	e	enum:boost::interprocess::error_code_t
is_empty	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool is_empty() const$/;"	f	class:boost::interprocess::detail::mq_hdr_t	access:public	signature:() const
is_full	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool is_full() const$/;"	f	class:boost::interprocess::detail::mq_hdr_t	access:public	signature:() const
is_intrusive_index	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^struct is_intrusive_index$/;"	s	namespace:boost::interprocess
is_intrusive_index	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^struct is_intrusive_index$/;"	s	namespace:boost::interprocess
is_intrusive_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef detail::bool_<is_intrusive_index<index_type>::value >    is_intrusive_t;$/;"	t	class:boost::interprocess::segment_manager	access:private
is_in_stack	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t is_in_stack         = 1;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
is_max_mode	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t is_max_mode         = 4;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
is_movable	/usr/include/boost/interprocess/detail/move.hpp	/^class is_movable$/;"	c	namespace:boost::interprocess	inherits:::boost::mpl::bool_
is_movable	/usr/include/boost/interprocess/detail/move.hpp	/^class is_movable< rv<T> >$/;"	c	namespace:boost::interprocess	inherits:::boost::mpl::bool_
is_move_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^struct is_move_iterator$/;"	s	namespace:boost::interprocess::move_detail	inherits:::boost::mpl::bool_
is_move_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^struct is_move_iterator< ::boost::interprocess::move_iterator<I> >$/;"	s	namespace:boost::interprocess::move_detail	inherits:::boost::mpl::bool_
is_multisegment_ptr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^struct is_multisegment_ptr$/;"	s	namespace:boost::interprocess
is_node_index	/usr/include/boost/interprocess/indexes/map_index.hpp	/^struct is_node_index$/;"	s	namespace:boost::interprocess
is_node_index	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^struct is_node_index$/;"	s	namespace:boost::interprocess
is_node_index_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef detail::bool_<is_node_index<index_type>::value>          is_node_index_t;$/;"	t	class:boost::interprocess::segment_manager	access:private
is_null	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool is_null() const$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:() const
is_pointee_outside	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t is_pointee_outside  = 0;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
is_relative	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t is_relative         = 2;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
is_rv	/usr/include/boost/interprocess/detail/move.hpp	/^struct is_rv$/;"	s	namespace:boost::interprocess::move_detail
is_rv	/usr/include/boost/interprocess/detail/move.hpp	/^struct is_rv< rv<T> >$/;"	s	namespace:boost::interprocess::move_detail
is_segmented	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t is_segmented        = 3;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
is_shm	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^   bool     is_shm;$/;"	m	struct:boost::interprocess::mapping_handle_impl_t	access:public
is_short	/usr/include/boost/interprocess/containers/container/string.hpp	/^      size_type      is_short  : 1;$/;"	m	struct:boost::container::containers_detail::basic_string_base::long_t	access:public
is_short	/usr/include/boost/interprocess/containers/container/string.hpp	/^      unsigned char  is_short  : 1;$/;"	m	struct:boost::container::containers_detail::basic_string_base::short_header	access:public
is_short	/usr/include/boost/interprocess/containers/container/string.hpp	/^   bool is_short() const$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:() const
is_short	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void is_short(bool yes)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(bool yes)
is_stateless_segment_manager	/usr/include/boost/interprocess/containers/container/detail/pool_common.hpp	/^struct is_stateless_segment_manager$/;"	s	namespace:boost::container::containers_detail
iter	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typename Container::iterator iter;$/;"	m	class:std::insert_iterator	access:protected
iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      explicit iterator(const const_iterator& x) : const_iterator(x){}$/;"	f	class:boost::container::deque_base::iterator	access:private	signature:(const const_iterator& x)
iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator() : const_iterator(){}$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:()
iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator(const iterator& x) : const_iterator(x){}$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:(const iterator& x)
iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator(val_alloc_ptr x, index_pointer y) : const_iterator(x, y){}$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:(val_alloc_ptr x, index_pointer y)
iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   class iterator : public const_iterator$/;"	c	class:boost::container::deque_base	inherits:const_iterator	access:public
iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Base::iterator              iterator;$/;"	t	class:boost::container::deque	access:public
iterator	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef typename vector_t::iterator                iterator;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
iterator	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^      , containers_detail::cast_functor <T> >                 iterator;$/;"	t	class:boost::container::containers_detail::transform_multiallocation_chain	access:public
iterator	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   typedef typename slist_impl_t::iterator iterator;$/;"	t	class:boost::container::containers_detail::basic_multiallocation_chain	access:public
iterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      explicit iterator(iiterator it)$/;"	f	class:boost::container::containers_detail::rbtree::iterator	access:private	signature:(iiterator it)
iterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      iterator(){}$/;"	f	class:boost::container::containers_detail::rbtree::iterator	access:public	signature:()
iterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   class iterator : public const_iterator$/;"	c	class:boost::container::containers_detail::rbtree	inherits:const_iterator	access:public
iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::iterator               iterator;$/;"	t	class:boost::container::flat_map	access:public
iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::iterator               iterator;$/;"	t	class:boost::container::flat_multimap	access:public
iterator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::iterator               iterator;$/;"	t	class:boost::container::flat_multiset	access:public
iterator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::iterator               iterator;$/;"	t	class:boost::container::flat_set	access:public
iterator	/usr/include/boost/interprocess/containers/container/list.hpp	/^      explicit iterator(typename Icont::iterator it)$/;"	f	class:boost::container::list::iterator	access:private	signature:(typename Icont::iterator it)
iterator	/usr/include/boost/interprocess/containers/container/list.hpp	/^      iterator(){}$/;"	f	class:boost::container::list::iterator	access:public	signature:()
iterator	/usr/include/boost/interprocess/containers/container/list.hpp	/^   class iterator$/;"	c	class:boost::container::list	inherits:const_iterator	access:public
iterator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::iterator               iterator;$/;"	t	class:boost::container::map	access:public
iterator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::iterator               iterator;$/;"	t	class:boost::container::multimap	access:public
iterator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::iterator               iterator;$/;"	t	class:boost::container::multiset	access:public
iterator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::iterator               iterator;$/;"	t	class:boost::container::set	access:public
iterator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      explicit iterator(typename Icont::iterator it)$/;"	f	class:boost::container::slist::iterator	access:private	signature:(typename Icont::iterator it)
iterator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      iterator(){}$/;"	f	class:boost::container::slist::iterator	access:public	signature:()
iterator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   class iterator$/;"	c	class:boost::container::slist	inherits:const_iterator	access:public
iterator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      <T,T&, pointer>                                 iterator;$/;"	t	class:boost::container::stable_vector	access:public
iterator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   explicit iterator(node_type_ptr_t pn)$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(node_type_ptr_t pn)
iterator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator()$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:()
iterator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator(const iterator<T, T&, typename boost::pointer_to_other<Pointer, T>::type >& x)$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(const iterator<T, T&, typename boost::pointer_to_other<Pointer, T>::type >& x)
iterator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^class iterator$/;"	c	namespace:boost::container::stable_vector_detail	inherits:std::iterator
iterator	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef pointer                                 iterator;$/;"	t	class:boost::container::basic_string	access:public
iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef containers_detail::vector_iterator<pointer>        iterator;$/;"	t	class:boost::container::vector	access:public
iterator	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename index_type::iterator                 iterator;$/;"	t	class:boost::interprocess::iset_index	access:public
iterator	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::iterator                 iterator;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
iterator	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   typedef void * iterator;$/;"	t	class:boost::interprocess::null_index	access:public
iterator_category	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef std::random_access_iterator_tag   iterator_category;$/;"	t	class:boost::container::deque_base::const_iterator	access:public
iterator_category	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef std::random_access_iterator_tag   iterator_category;$/;"	t	class:boost::container::deque_base::iterator	access:public
iterator_category	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef output_iterator_tag iterator_category;$/;"	t	class:std::insert_iterator	access:public
iterator_category	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef std::random_access_iterator_tag   iterator_category;$/;"	t	class:boost::container::stable_vector_detail::iterator	access:public
iterator_category	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef std::random_access_iterator_tag         iterator_category;$/;"	t	class:boost::interprocess::intersegment_ptr	access:public
iterator_category	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef typename std::iterator_traits<iterator_type>::iterator_category iterator_category;$/;"	t	class:boost::interprocess::move_iterator	access:public
iterator_category	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef std::random_access_iterator_tag   iterator_category;$/;"	t	class:boost::interprocess::offset_ptr	access:public
iterator_to	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   static iterator iterator_to(pointer p)$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:(pointer p)
iterator_to	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   static iterator iterator_to(void_pointer p)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:(void_pointer p)
iterator_type	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef It                                                              iterator_type;$/;"	t	class:boost::interprocess::move_iterator	access:public
iterator_val_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename Iterator::value_type        iterator_val_t;$/;"	t	class:boost::interprocess::detail::segment_manager_iterator_value_adaptor	access:private
iunordered_set_index	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   iunordered_set_index(segment_manager_base *mngr)$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(segment_manager_base *mngr)
iunordered_set_index	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^class iunordered_set_index$/;"	c	namespace:boost::interprocess	inherits:iunordered_set_index_aux::allocator_holder,iunordered_set_index_aux::index_t
iunordered_set_index_aux	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^struct iunordered_set_index_aux$/;"	s	namespace:boost::interprocess
KeyNodeCompare	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef key_node_compare<value_compare>  KeyNodeCompare;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
key_	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *key_;$/;"	m	struct:boost::interprocess::winapi::reg_closer	access:public
key_comp	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   Compare key_comp() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
key_comp	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const key_compare &key_comp() const$/;"	f	struct:boost::container::containers_detail::value_compare_impl	access:public	signature:() const
key_comp	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   key_compare &key_comp()$/;"	f	struct:boost::container::containers_detail::value_compare_impl	access:public	signature:()
key_comp	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   key_compare key_comp() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
key_comp	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   key_compare key_comp() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
key_comp	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   key_compare key_comp() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
key_comp	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   key_compare key_comp() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
key_comp	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   key_compare key_comp() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
key_comp	/usr/include/boost/interprocess/containers/container/map.hpp	/^   key_compare key_comp() const $/;"	f	class:boost::container::map	access:public	signature:() const
key_comp	/usr/include/boost/interprocess/containers/container/map.hpp	/^   key_compare key_comp() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
key_comp	/usr/include/boost/interprocess/containers/container/set.hpp	/^   key_compare key_comp() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
key_comp	/usr/include/boost/interprocess/containers/container/set.hpp	/^   key_compare key_comp() const $/;"	f	class:boost::container::set	access:public	signature:() const
key_compare	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef Compare                                    key_compare;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
key_compare	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef KeyCompare                                 key_compare;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
key_compare	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef KeyCompare   key_compare; $/;"	t	struct:boost::container::containers_detail::value_compare_impl	access:public
key_compare	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::key_compare            key_compare;$/;"	t	class:boost::container::flat_map	access:public
key_compare	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::key_compare            key_compare;$/;"	t	class:boost::container::flat_multimap	access:public
key_compare	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::key_compare            key_compare;$/;"	t	class:boost::container::flat_multiset	access:public
key_compare	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::key_compare            key_compare;$/;"	t	class:boost::container::flat_set	access:public
key_compare	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef Pred                                    key_compare;$/;"	t	class:boost::container::map	access:public
key_compare	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef Pred                                    key_compare;$/;"	t	class:boost::container::multimap	access:public
key_compare	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef Pred                                    key_compare;$/;"	t	class:boost::container::multiset	access:public
key_compare	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef Pred                                    key_compare;$/;"	t	class:boost::container::set	access:public
key_equal	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef std::equal_to<key_type>                 key_equal;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
key_less	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef std::less<key_type>                     key_less;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
key_less	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef std::less<key_type>                     key_less;$/;"	t	struct:boost::interprocess::detail::map_index_aux	access:public
key_node_compare	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      key_node_compare(KeyValueCompare comp)$/;"	f	struct:boost::container::containers_detail::rbtree::key_node_compare	access:public	signature:(KeyValueCompare comp)
key_node_compare	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   struct key_node_compare$/;"	s	class:boost::container::containers_detail::rbtree	inherits:KeyValueCompare	access:private
key_of_value	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename ValueCompare::key_of_value key_of_value;$/;"	t	struct:boost::container::containers_detail::node_compare	access:public
key_of_value	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef KeyOfValue   key_of_value;$/;"	t	struct:boost::container::containers_detail::value_compare_impl	access:public
key_query_value	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static unsigned long key_query_value    = 0x0001;$/;"	m	namespace:boost::interprocess::winapi
key_type	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef Key                                        key_type;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
key_type	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename ValueCompare::key_type     key_type;$/;"	t	struct:boost::container::containers_detail::node_compare	access:public
key_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef Key                                        key_type;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
key_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef Key          key_type;$/;"	t	struct:boost::container::containers_detail::value_compare_impl	access:public
key_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::key_type               key_type;$/;"	t	class:boost::container::flat_map	access:public
key_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::key_type               key_type;$/;"	t	class:boost::container::flat_multimap	access:public
key_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::key_type               key_type;$/;"	t	class:boost::container::flat_multiset	access:public
key_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::key_type               key_type;$/;"	t	class:boost::container::flat_set	access:public
key_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::key_type               key_type;$/;"	t	class:boost::container::map	access:public
key_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::key_type               key_type;$/;"	t	class:boost::container::multimap	access:public
key_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::key_type               key_type;$/;"	t	class:boost::container::multiset	access:public
key_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::key_type               key_type;$/;"	t	class:boost::container::set	access:public
key_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef detail::index_key<CharT, void_pointer>        key_type;$/;"	t	struct:boost::interprocess::detail::index_config	access:public
key_type	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef typename MapConfig::key_type            key_type;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
key_type	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef typename MapConfig::key_type            key_type;$/;"	t	struct:boost::interprocess::detail::map_index_aux	access:public
key_type	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef typename MapConfig::key_type            key_type;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
lang_neutral	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long lang_neutral         = (unsigned long)0x00;$/;"	m	namespace:boost::interprocess::winapi
last	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   iterator last()$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:()
last	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   iterator last()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
LastID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      static const std::size_t LastID  = 256;$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_constants_t	access:public
LastID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^const std::size_t xsi_shared_memory_device::info_constants_t<Dummy>::LastID;$/;"	m	class:boost::interprocess::xsi_shared_memory_device::info_constants_t
last_	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   FwdIt first_, last_;$/;"	m	struct:boost::container::containers_detail::advanced_insert_aux_proxy	access:public
last_it_	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^      typename free_nodes_t::iterator &last_it_;$/;"	m	struct:boost::container::containers_detail::private_node_pool_impl::push_in_list	access:private
lcm	/usr/include/boost/interprocess/containers/container/detail/math_functions.hpp	/^inline Integer lcm(const Integer & A, const Integer & B)$/;"	f	namespace:boost::container::containers_detail	signature:(const Integer & A, const Integer & B)
lcm	/usr/include/boost/interprocess/detail/math_functions.hpp	/^inline Integer lcm(const Integer & A, const Integer & B)$/;"	f	namespace:boost::interprocess::detail	signature:(const Integer & A, const Integer & B)
len	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   std::size_t             len;     \/\/ Message length$/;"	m	class:boost::interprocess::detail::msg_hdr_t	access:public
length	/usr/include/boost/interprocess/containers/container/string.hpp	/^      size_type      length    : (sizeof(size_type)*CHAR_BIT - 1);$/;"	m	struct:boost::container::containers_detail::basic_string_base::long_t	access:public
length	/usr/include/boost/interprocess/containers/container/string.hpp	/^      unsigned char  length    : (CHAR_BIT - 1);$/;"	m	struct:boost::container::containers_detail::basic_string_base::short_header	access:public
length	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type length() const$/;"	f	class:boost::container::basic_string	access:public	signature:() const
Length	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long Length;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
Length	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short Length;$/;"	m	struct:boost::interprocess::winapi::unicode_string_t	access:public
less	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   bool less(const this_type &other) const$/;"	f	class:boost::container::constant_iterator	access:private	signature:(const this_type &other) const
less	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   bool less(const this_type &other) const$/;"	f	class:boost::container::default_construct_iterator	access:private	signature:(const this_type &other) const
less	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   bool less(const this_type &other) const$/;"	f	class:boost::container::emplace_iterator	access:private	signature:(const this_type &other) const
less	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   bool less(const this_type &other) const$/;"	f	class:boost::container::repeat_iterator	access:private	signature:(const this_type &other) const
less	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   bool less(const transform_iterator &other) const$/;"	f	class:boost::container::transform_iterator	access:private	signature:(const transform_iterator &other) const
less	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool less(const self_t &y) const$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const self_t &y) const
less	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   bool less(const transform_iterator &other) const$/;"	f	class:boost::interprocess::transform_iterator	access:private	signature:(const transform_iterator &other) const
less_comp	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool less_comp(const block_header &b) const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:(const block_header &b) const
library_unloader	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   library_unloader(void *module) : lib_(module){}$/;"	f	struct:boost::interprocess::winapi::library_unloader	access:public	signature:(void *module)
library_unloader	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct library_unloader$/;"	s	namespace:boost::interprocess::winapi
lib_	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *lib_;$/;"	m	struct:boost::interprocess::winapi::library_unloader	access:public
liExpTimeZoneBias	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      __int64 liExpTimeZoneBias;$/;"	m	struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
liKeBootTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      __int64 liKeBootTime;$/;"	m	struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
liKeSystemTime	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      __int64 liKeSystemTime;$/;"	m	struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
list	/usr/include/boost/interprocess/containers/container/list.hpp	/^   explicit list(const allocator_type &a = A()) $/;"	f	class:boost::container::list	access:public	signature:(const allocator_type &a = A())
list	/usr/include/boost/interprocess/containers/container/list.hpp	/^   list(const list& x) $/;"	f	class:boost::container::list	access:public	signature:(const list& x)
list	/usr/include/boost/interprocess/containers/container/list.hpp	/^   list(InpIt first, InpIt last, const A &a = A())$/;"	f	class:boost::container::list	access:public	signature:(InpIt first, InpIt last, const A &a = A())
list	/usr/include/boost/interprocess/containers/container/list.hpp	/^   list(size_type n)$/;"	f	class:boost::container::list	access:public	signature:(size_type n)
list	/usr/include/boost/interprocess/containers/container/list.hpp	/^   list(size_type n, const T& value, const A& a = A())$/;"	f	class:boost::container::list	access:public	signature:(size_type n, const T& value, const A& a = A())
list	/usr/include/boost/interprocess/containers/container/list.hpp	/^class list $/;"	c	namespace:boost::container	inherits:containers_detail::node_alloc_holder
list_const_pointer	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef const_pointer                           list_const_pointer;$/;"	t	class:boost::container::list	access:private
list_const_pointer	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef const_pointer                           list_const_pointer;$/;"	t	class:boost::container::slist	access:private
list_const_reference	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef const_reference                         list_const_reference;$/;"	t	class:boost::container::list	access:private
list_const_reference	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef const_reference                         list_const_reference;$/;"	t	class:boost::container::slist	access:private
list_difference_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef difference_type                         list_difference_type;$/;"	t	class:boost::container::list	access:private
list_difference_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef difference_type                         list_difference_type;$/;"	t	class:boost::container::slist	access:private
list_hook	/usr/include/boost/interprocess/containers/container/list.hpp	/^struct list_hook$/;"	s	namespace:boost::container::containers_detail
list_node	/usr/include/boost/interprocess/containers/container/list.hpp	/^   list_node()$/;"	f	struct:boost::container::containers_detail::list_node	access:public	signature:()
list_node	/usr/include/boost/interprocess/containers/container/list.hpp	/^   list_node(Args &&...args)$/;"	f	struct:boost::container::containers_detail::list_node	access:public	signature:(Args &&....args)
list_node	/usr/include/boost/interprocess/containers/container/list.hpp	/^struct list_node$/;"	s	namespace:boost::container::containers_detail	inherits:list_hook::type
list_pointer	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef pointer                                 list_pointer;$/;"	t	class:boost::container::list	access:private
list_pointer	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef pointer                                 list_pointer;$/;"	t	class:boost::container::slist	access:private
list_reference	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef reference                               list_reference;$/;"	t	class:boost::container::list	access:private
list_reference	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef reference                               list_reference;$/;"	t	class:boost::container::slist	access:private
LoadLibraryA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall LoadLibraryA(const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *)
load_library	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *load_library(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
LocalFree	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void *__stdcall LocalFree (void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
local_free	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void * local_free(void *hmem)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hmem)
lock	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   shared_ptr<T, A, D> lock() const \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:() const
lock	/usr/include/boost/interprocess/sync/emulation/interprocess_mutex.hpp	/^inline void interprocess_mutex::lock(void)$/;"	f	class:boost::interprocess::interprocess_mutex	signature:(void)
lock	/usr/include/boost/interprocess/sync/emulation/interprocess_recursive_mutex.hpp	/^inline void interprocess_recursive_mutex::lock()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   void lock();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline void file_lock::lock()$/;"	f	class:boost::interprocess::file_lock	signature:()
lock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   void lock(void);$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:(void)
lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::lock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/named_condition.hpp	/^      void lock()    {   l_.unlock();   }$/;"	f	class:boost::interprocess::named_condition::lock_inverter	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline void named_mutex::lock()$/;"	f	class:boost::interprocess::named_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline void named_recursive_mutex::lock()$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void lock(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/posix/interprocess_mutex.hpp	/^inline void interprocess_mutex::lock()$/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/posix/interprocess_recursive_mutex.hpp	/^inline void interprocess_recursive_mutex::lock()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   void lock()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   void lock()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   void lock()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   void lock();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:()
lock	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline void xsi_named_mutex::lock()$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
LockFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall LockFile  (void *hnd, unsigned long offset_low, unsigned long offset_high, unsigned long size_low, unsigned long size_high);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long offset_low, unsigned long offset_high, unsigned long size_low, unsigned long size_high)
LockFileEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall LockFileEx(void *hnd, unsigned long flags, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped* overlapped);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long flags, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped* overlapped)
lockfile_exclusive_lock	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long lockfile_exclusive_lock    = 2;$/;"	m	namespace:boost::interprocess::winapi
lockfile_fail_immediately	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long lockfile_fail_immediately  = 1;$/;"	m	namespace:boost::interprocess::winapi
lock_error	/usr/include/boost/interprocess/errors.hpp	/^   lock_error,$/;"	e	enum:boost::interprocess::error_code_t
lock_exception	/usr/include/boost/interprocess/exceptions.hpp	/^   lock_exception()$/;"	f	class:boost::interprocess::lock_exception	access:public	signature:()
lock_exception	/usr/include/boost/interprocess/exceptions.hpp	/^class lock_exception : public interprocess_exception$/;"	c	namespace:boost::interprocess	inherits:interprocess_exception
lock_file_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool lock_file_ex(void *hnd, unsigned long flags, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped *overlapped)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long flags, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped *overlapped)
lock_inverter	/usr/include/boost/interprocess/sync/named_condition.hpp	/^      lock_inverter(Lock &l)$/;"	f	class:boost::interprocess::named_condition::lock_inverter	access:public	signature:(Lock &l)
lock_inverter	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   class lock_inverter$/;"	c	class:boost::interprocess::named_condition	access:private
lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   void lock_sharable();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline void file_lock::lock_sharable()$/;"	f	class:boost::interprocess::file_lock	signature:()
lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void lock_sharable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::lock_sharable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
lock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void lock_sharable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void lock_upgradable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::lock_upgradable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
lock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void lock_upgradable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
log2_ceil	/usr/include/boost/interprocess/containers/container/detail/math_functions.hpp	/^inline Integer log2_ceil(const Integer & A)$/;"	f	namespace:boost::container::containers_detail	signature:(const Integer & A)
log2_ceil	/usr/include/boost/interprocess/detail/math_functions.hpp	/^inline Integer log2_ceil(const Integer & A)$/;"	f	namespace:boost::interprocess::detail	signature:(const Integer & A)
long_alignment_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef void *long_alignment_type;$/;"	t	class:boost::container::containers_detail::basic_string_base	access:private
long_raw_t	/usr/include/boost/interprocess/containers/container/string.hpp	/^   struct long_raw_t$/;"	s	class:boost::container::containers_detail::basic_string_base	access:private
long_repr	/usr/include/boost/interprocess/containers/container/string.hpp	/^      long_t &long_repr() const$/;"	f	union:boost::container::containers_detail::basic_string_base::repr_t	access:public	signature:() const
long_t	/usr/include/boost/interprocess/containers/container/string.hpp	/^      long_t()$/;"	f	struct:boost::container::containers_detail::basic_string_base::long_t	access:public	signature:()
long_t	/usr/include/boost/interprocess/containers/container/string.hpp	/^      long_t(const long_t &other)$/;"	f	struct:boost::container::containers_detail::basic_string_base::long_t	access:public	signature:(const long_t &other)
long_t	/usr/include/boost/interprocess/containers/container/string.hpp	/^   struct long_t$/;"	s	class:boost::container::containers_detail::basic_string_base	access:private
lookup_error	/usr/include/boost/interprocess/errors.hpp	/^inline error_code_t lookup_error(native_error_t err)$/;"	f	namespace:boost::interprocess	signature:(native_error_t err)
lower_bound	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_iterator lower_bound(const key_type& k) const$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const key_type& k) const
lower_bound	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator lower_bound(const key_type& k)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const key_type& k)
lower_bound	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_iterator lower_bound(const key_type& k) const$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& k) const
lower_bound	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator lower_bound(const key_type& k)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& k)
lower_bound	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator lower_bound(const key_type& x) const $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& x) const
lower_bound	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator lower_bound(const key_type& x) const $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const key_type& x) const
lower_bound	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator lower_bound(const key_type& x) $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& x)
lower_bound	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator lower_bound(const key_type& x) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const key_type& x)
lower_bound	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator lower_bound(const key_type& x) const $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const key_type& x) const
lower_bound	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator lower_bound(const key_type& x) const $/;"	f	class:boost::container::flat_set	access:public	signature:(const key_type& x) const
lower_bound	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator lower_bound(const key_type& x) $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const key_type& x)
lower_bound	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator lower_bound(const key_type& x) $/;"	f	class:boost::container::flat_set	access:public	signature:(const key_type& x)
lower_bound	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_iterator lower_bound(const key_type& x) const $/;"	f	class:boost::container::map	access:public	signature:(const key_type& x) const
lower_bound	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_iterator lower_bound(const key_type& x) const $/;"	f	class:boost::container::multimap	access:public	signature:(const key_type& x) const
lower_bound	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator lower_bound(const key_type& x) $/;"	f	class:boost::container::map	access:public	signature:(const key_type& x)
lower_bound	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator lower_bound(const key_type& x) $/;"	f	class:boost::container::multimap	access:public	signature:(const key_type& x)
lower_bound	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator lower_bound(const key_type& x) const $/;"	f	class:boost::container::multiset	access:public	signature:(const key_type& x) const
lower_bound	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator lower_bound(const key_type& x) const $/;"	f	class:boost::container::set	access:public	signature:(const key_type& x) const
lower_bound	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator lower_bound(const key_type& x) $/;"	f	class:boost::container::multiset	access:public	signature:(const key_type& x)
lower_bound	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator lower_bound(const key_type& x) $/;"	f	class:boost::container::set	access:public	signature:(const key_type& x)
lpMaximumApplicationAddress	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    void * lpMaximumApplicationAddress;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
lpMinimumApplicationAddress	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    void * lpMinimumApplicationAddress;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
lpSecurityDescriptor	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *lpSecurityDescriptor;$/;"	m	struct:boost::interprocess::winapi::interprocess_security_attributes	access:public
ls_zeros	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct ls_zeros$/;"	s	namespace:boost::container::containers_detail
ls_zeros	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct ls_zeros<0>$/;"	s	namespace:boost::container::containers_detail
ls_zeros	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct ls_zeros<1>$/;"	s	namespace:boost::container::containers_detail
ls_zeros	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct ls_zeros$/;"	s	namespace:boost::interprocess::detail
ls_zeros	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct ls_zeros<0>$/;"	s	namespace:boost::interprocess::detail
ls_zeros	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct ls_zeros<1>$/;"	s	namespace:boost::interprocess::detail
l_	/usr/include/boost/interprocess/sync/named_condition.hpp	/^      Lock &l_;$/;"	m	class:boost::interprocess::named_condition::lock_inverter	access:private
make_lang_id	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long make_lang_id(unsigned long p, unsigned long s)$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned long p, unsigned long s)
make_managed_shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   make_managed_shared_ptr(T *constructed_object, ManagedMemory &managed_memory)$/;"	f	namespace:boost::interprocess	signature:(T *constructed_object, ManagedMemory &managed_memory)
make_managed_unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   make_managed_unique_ptr(T *constructed_object, ManagedMemory &managed_memory)$/;"	f	namespace:boost::interprocess	signature:(T *constructed_object, ManagedMemory &managed_memory)
make_managed_weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   make_managed_weak_ptr(T *constructed_object, ManagedMemory &managed_memory)$/;"	f	namespace:boost::interprocess	signature:(T *constructed_object, ManagedMemory &managed_memory)
make_move_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^move_iterator<It> make_move_iterator(const It &it)$/;"	f	namespace:boost::interprocess	signature:(const It &it)
make_pair	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^inline pair<T1, T2> make_pair(T1 x, T2 y)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(T1 x, T2 y)
make_transform_iterator	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^make_transform_iterator(Iterator it, UnaryFunc fun)$/;"	f	namespace:boost::container	signature:(Iterator it, UnaryFunc fun)
make_transform_iterator	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^make_transform_iterator(Iterator it, UnaryFunc fun)$/;"	f	namespace:boost::interprocess	signature:(Iterator it, UnaryFunc fun)
ManagedOpenOrCreateUserOffset	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^      ManagedOpenOrCreateUserOffset = $/;"	m	class:boost::interprocess::detail::managed_open_or_create_impl	access:public
managed_external_buffer	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_external_buffer;$/;"	t	namespace:boost::interprocess
managed_heap_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_heap_memory;$/;"	t	namespace:boost::interprocess
managed_impl	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      managed_open_or_create_impl<shared_memory_object>  managed_impl;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
managed_mapped_file	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_mapped_file;$/;"	t	namespace:boost::interprocess
managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   managed_multi_shared_memory;$/;"	t	namespace:boost::interprocess
managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl()$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:()
managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(create_only_t, $/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:(create_only_t, const char *name, std::size_t size, mode_t mode = read_write, const void *addr = 0)
managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(create_only_t, $/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:(create_only_t, const char *name, std::size_t size, mode_t mode, const void *addr, const ConstructFunc &construct_func)
managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(open_only_t, $/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:(open_only_t, const char *name, mode_t mode = read_write, const void *addr = 0)
managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(open_only_t, $/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:(open_only_t, const char *name, mode_t mode, const void *addr, const ConstructFunc &construct_func)
managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(open_or_create_t, $/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:(open_or_create_t, const char *name, std::size_t size, mode_t mode = read_write, const void *addr = 0)
managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   managed_open_or_create_impl(open_or_create_t, $/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:(open_or_create_t, const char *name, std::size_t size, mode_t mode, const void *addr, const ConstructFunc &construct_func)
managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^class managed_open_or_create_impl$/;"	c	namespace:boost::interprocess::detail
managed_open_or_create_type	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   typedef detail::managed_open_or_create_impl<detail::file_wrapper> managed_open_or_create_type;$/;"	t	class:boost::interprocess::basic_managed_mapped_file	access:private
managed_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_shared_memory;$/;"	t	namespace:boost::interprocess
managed_shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^struct managed_shared_ptr$/;"	s	namespace:boost::interprocess
managed_unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^struct managed_unique_ptr$/;"	s	namespace:boost::interprocess
managed_weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^struct managed_weak_ptr$/;"	s	namespace:boost::interprocess
managed_windows_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_windows_shared_memory;$/;"	t	namespace:boost::interprocess
managed_xsi_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^managed_xsi_shared_memory;$/;"	t	namespace:boost::interprocess
map	/usr/include/boost/interprocess/containers/container/map.hpp	/^   explicit map(const Pred& comp = Pred(),$/;"	f	class:boost::container::map	access:public	signature:(const Pred& comp = Pred(), const allocator_type& a = allocator_type())
map	/usr/include/boost/interprocess/containers/container/map.hpp	/^   map( ordered_unique_range_t, InputIterator first, InputIterator last$/;"	f	class:boost::container::map	access:public	signature:( ordered_unique_range_t, InputIterator first, InputIterator last , const Pred& comp = Pred(), const allocator_type& a = allocator_type())
map	/usr/include/boost/interprocess/containers/container/map.hpp	/^   map(const map<Key,T,Pred,Alloc>& x) $/;"	f	class:boost::container::map	access:public	signature:(const map<Key,T,Pred,Alloc>& x)
map	/usr/include/boost/interprocess/containers/container/map.hpp	/^   map(InputIterator first, InputIterator last, const Pred& comp = Pred(),$/;"	f	class:boost::container::map	access:public	signature:(InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
map	/usr/include/boost/interprocess/containers/container/map.hpp	/^class map $/;"	c	namespace:boost::container
mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^   mapped_region();$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:()
mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^   mapped_region(const MemoryMappable& mapping$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:(const MemoryMappable& mapping ,mode_t mode ,offset_t offset = 0 ,std::size_t size = 0 ,const void *address = 0)
mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^class mapped_region$/;"	c	namespace:boost::interprocess
mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^inline mapped_region::mapped_region$/;"	f	class:boost::interprocess::mapped_region	signature:(const MemoryMappable &mapping ,mode_t mode ,offset_t offset ,std::size_t size ,const void *address)
mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^inline mapped_region::mapped_region$/;"	f	class:boost::interprocess::mapped_region	signature:(const MemoryMappable &mapping, mode_t mode, offset_t offset, std::size_t size, const void *address)
mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^inline mapped_region::mapped_region()$/;"	f	class:boost::interprocess::mapped_region	signature:()
mapped_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef T                                       mapped_type;$/;"	t	class:boost::container::flat_map	access:public
mapped_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef T                                       mapped_type;$/;"	t	class:boost::container::flat_multimap	access:public
mapped_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef T                                       mapped_type;$/;"	t	class:boost::container::map	access:public
mapped_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef T                                       mapped_type;$/;"	t	class:boost::container::multimap	access:public
mapped_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef detail::index_data<void_pointer>              mapped_type;$/;"	t	struct:boost::interprocess::detail::index_config	access:public
mapped_type	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef typename MapConfig::mapped_type         mapped_type;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
mapped_type	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef typename MapConfig::mapped_type         mapped_type;$/;"	t	struct:boost::interprocess::detail::map_index_aux	access:public
mapped_type	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef typename MapConfig::mapped_type         mapped_type;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
mappings_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   struct mappings_t : Mutex$/;"	s	struct:boost::interprocess::flat_map_intersegment	inherits:Mutex	access:private
mapping_handle_from_file_handle	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline mapping_handle_t mapping_handle_from_file_handle(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd)
mapping_handle_from_shm_handle	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline mapping_handle_t mapping_handle_from_shm_handle(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd)
mapping_handle_impl_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^typedef struct mapping_handle_impl_t{$/;"	s	namespace:boost::interprocess
mapping_handle_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^}  mapping_handle_t;$/;"	t	namespace:boost::interprocess	typeref:struct:boost::interprocess::mapping_handle_impl_t
MapViewOfFileEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall MapViewOfFileEx (void *, unsigned long, unsigned long, unsigned long, std::size_t, void*);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, unsigned long, unsigned long, unsigned long, std::size_t, void*)
map_allocator_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      rebind<typename Alloc::pointer>::other map_allocator_type;$/;"	t	class:boost::container::deque_base	access:protected
map_index	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   map_index(segment_manager_base *segment_mngr)$/;"	f	class:boost::interprocess::map_index	access:public	signature:(segment_manager_base *segment_mngr)
map_index	/usr/include/boost/interprocess/indexes/map_index.hpp	/^class map_index$/;"	c	namespace:boost::interprocess	inherits:detail::map_index_aux::index_t
map_index_aux	/usr/include/boost/interprocess/indexes/map_index.hpp	/^struct map_index_aux$/;"	s	namespace:boost::interprocess::detail
map_view_of_file_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *map_view_of_file_ex(void *handle, unsigned long file_access, unsigned long highoffset, unsigned long lowoffset, std::size_t numbytes, void *base_addr)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, unsigned long file_access, unsigned long highoffset, unsigned long lowoffset, std::size_t numbytes, void *base_addr)
Mask	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static const std::size_t Mask = ((std::size_t(1) << NumBits)-1)<<1u; $/;"	m	struct:boost::intrusive::pointer_plus_bits	access:public
MaxAlign	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   static const std::size_t MaxAlign = alignment_of<node_t>::value;$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
MaximumLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short MaximumLength;$/;"	m	struct:boost::interprocess::winapi::unicode_string_t	access:public
MaxName	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      static const std::size_t MaxName = 32;$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_constants_t	access:public
MaxName	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^const std::size_t xsi_shared_memory_device::info_constants_t<Dummy>::MaxName;$/;"	m	class:boost::interprocess::xsi_shared_memory_device::info_constants_t
MaxPath	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long MaxPath           = 260;$/;"	m	namespace:boost::interprocess::winapi
max_allocation_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^enum instance_type {   anonymous_type, named_type, unique_type, max_allocation_type };$/;"	e	enum:boost::interprocess::instance_type
max_pointer_plus_bits	/usr/include/boost/interprocess/offset_ptr.hpp	/^struct max_pointer_plus_bits<boost::interprocess::offset_ptr<void>, Alignment>$/;"	s	namespace:boost::intrusive
max_readers	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      static const unsigned max_readers $/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::base_constants_t	access:public
max_readers	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^const unsigned interprocess_upgradable_mutex::base_constants_t<Dummy>::max_readers;$/;"	m	class:boost::interprocess::interprocess_upgradable_mutex::base_constants_t
max_segment_size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t max_segment_size = std::size_t(1) << max_segment_size_bits;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
max_segment_size_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t max_segment_size_bits = size_t_bits - 2;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
max_size	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   size_type max_size() const$/;"	f	class:boost::interprocess::allocator	access:public	signature:() const
max_size	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   size_type max_size() const$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:() const
max_size	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::deque	access:public	signature:() const
max_size	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
max_size	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   size_type max_size() const$/;"	f	namespace:boost::container::containers_detail	signature:() const
max_size	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
max_size	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
max_size	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
max_size	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
max_size	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
max_size	/usr/include/boost/interprocess/containers/container/list.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::list	access:public	signature:() const
max_size	/usr/include/boost/interprocess/containers/container/map.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::map	access:public	signature:() const
max_size	/usr/include/boost/interprocess/containers/container/map.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
max_size	/usr/include/boost/interprocess/containers/container/set.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
max_size	/usr/include/boost/interprocess/containers/container/set.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::set	access:public	signature:() const
max_size	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::slist	access:public	signature:() const
max_size	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   size_type max_size() const$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
max_size	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type max_size() const$/;"	f	class:boost::container::basic_string	access:public	signature:() const
max_size	/usr/include/boost/interprocess/containers/container/string.hpp	/^   std::size_t max_size() const$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:() const
max_size	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   size_type max_size() const $/;"	f	class:boost::container::vector	access:public	signature:() const
max_value	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^const T &max_value(const T &a, const T &b)$/;"	f	namespace:boost::container::containers_detail	signature:(const T &a, const T &b)
max_value	/usr/include/boost/interprocess/detail/min_max.hpp	/^const T &max_value(const T &a, const T &b)$/;"	f	namespace:boost::interprocess	signature:(const T &a, const T &b)
members	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   } members;$/;"	m	struct:boost::interprocess::intersegment_base	typeref:union:boost::interprocess::intersegment_base::members_t	access:public
members_	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   } members_;$/;"	m	class:boost::container::deque_base	typeref:struct:boost::container::deque_base::members_holder	access:protected
members_	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      : members_(a, typename ICont::value_compare(c))$/;"	f	namespace:boost::container::containers_detail	signature:(a, typename ICont::value_compare(c))
members_	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   } members_;$/;"	m	namespace:boost::container::containers_detail	typeref:struct:boost::container::containers_detail::members_holder	access:protected
members_	/usr/include/boost/interprocess/containers/container/string.hpp	/^      :  members_(b.members_)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:public	signature:(b.members_)
members_	/usr/include/boost/interprocess/containers/container/string.hpp	/^   } members_;$/;"	m	class:boost::container::containers_detail::basic_string_base	typeref:struct:boost::container::containers_detail::basic_string_base::members_holder	access:protected
members_	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   } members_;$/;"	m	struct:boost::container::containers_detail::vector_alloc_holder	typeref:struct:boost::container::containers_detail::vector_alloc_holder::members_holder	access:public
members_holder	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      members_holder(const allocator_type &a)$/;"	f	struct:boost::container::deque_base::members_holder	access:public	signature:(const allocator_type &a)
members_holder	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   struct members_holder$/;"	s	class:boost::container::deque_base	inherits:ptr_alloc_t,allocator_type	access:protected
members_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      members_holder(const ConvertibleToAlloc &c2alloc)$/;"	f	struct:boost::container::containers_detail::members_holder	access:public	signature:(const ConvertibleToAlloc &c2alloc)
members_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      members_holder(const ConvertibleToAlloc &c2alloc, const Pred &c)$/;"	f	struct:boost::container::containers_detail::members_holder	access:public	signature:(const ConvertibleToAlloc &c2alloc, const Pred &c)
members_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      members_holder(const members_holder&);$/;"	p	struct:boost::container::containers_detail::members_holder	access:private	signature:(const members_holder&)
members_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   struct members_holder$/;"	s	namespace:boost::container::containers_detail	inherits:NodeAlloc	access:protected
members_holder	/usr/include/boost/interprocess/containers/container/string.hpp	/^      members_holder(const A &a)$/;"	f	struct:boost::container::containers_detail::basic_string_base::members_holder	access:public	signature:(const A &a)
members_holder	/usr/include/boost/interprocess/containers/container/string.hpp	/^   struct members_holder$/;"	s	class:boost::container::containers_detail::basic_string_base	inherits:A	access:protected
members_holder	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      members_holder(const A &alloc)$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder::members_holder	access:public	signature:(const A &alloc)
members_holder	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      members_holder(const members_holder&);$/;"	p	struct:boost::container::containers_detail::vector_alloc_holder::members_holder	access:private	signature:(const members_holder&)
members_holder	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   struct members_holder$/;"	s	struct:boost::container::containers_detail::vector_alloc_holder	inherits:A	access:public
members_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   union members_t{$/;"	u	struct:boost::interprocess::intersegment_base	access:public
memory_algorithm	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef MemoryAlgorithm                            memory_algorithm;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
memory_algorithm	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef MemoryAlgorithm                memory_algorithm;$/;"	t	class:boost::interprocess::segment_manager	access:public
memory_algorithm	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef MemoryAlgorithm memory_algorithm;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
memory_algorithm_common	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^class memory_algorithm_common$/;"	c	namespace:boost::interprocess::detail
mem_algo_deallocator	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   mem_algo_deallocator(void *ptr, MemoryAlgorithm &algo)$/;"	f	class:boost::interprocess::detail::mem_algo_deallocator	access:public	signature:(void *ptr, MemoryAlgorithm &algo)
mem_algo_deallocator	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^class mem_algo_deallocator$/;"	c	namespace:boost::interprocess::detail
merge	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void merge(list &x, StrictWeakOrdering comp)$/;"	f	class:boost::container::list	access:public	signature:(list &x, StrictWeakOrdering comp)
merge	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void merge(list<T, A>& x)$/;"	f	class:boost::container::list	access:public	signature:(list<T, A>& x)
merge	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void merge(slist & x)$/;"	f	class:boost::container::slist	access:public	signature:(slist & x)
merge	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void merge(slist& x, StrictWeakOrdering comp)$/;"	f	class:boost::container::slist	access:public	signature:(slist& x, StrictWeakOrdering comp)
message_queue	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue();$/;"	p	class:boost::interprocess::message_queue	access:private	signature:()
message_queue	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue(create_only_t create_only,$/;"	p	class:boost::interprocess::message_queue	access:public	signature:(create_only_t create_only, const char *name, std::size_t max_num_msg, std::size_t max_msg_size)
message_queue	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue(open_only_t open_only,$/;"	p	class:boost::interprocess::message_queue	access:public	signature:(open_only_t open_only, const char *name)
message_queue	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue(open_or_create_t open_or_create,$/;"	p	class:boost::interprocess::message_queue	access:public	signature:(open_or_create_t open_or_create, const char *name, std::size_t max_num_msg, std::size_t max_msg_size)
message_queue	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^class message_queue$/;"	c	namespace:boost::interprocess
message_queue	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline message_queue::message_queue(create_only_t create_only,$/;"	f	class:boost::interprocess::message_queue	signature:(create_only_t create_only, const char *name, std::size_t max_num_msg, std::size_t max_msg_size)
message_queue	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline message_queue::message_queue(open_only_t open_only,$/;"	f	class:boost::interprocess::message_queue	signature:(open_only_t open_only, const char *name)
message_queue	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline message_queue::message_queue(open_or_create_t open_or_create,$/;"	f	class:boost::interprocess::message_queue	signature:(open_or_create_t open_or_create, const char *name, std::size_t max_num_msg, std::size_t max_msg_size)
microsec_clock	/usr/include/boost/interprocess/detail/posix_time_types_wrk.hpp	/^typedef boost::date_time::microsec_clock<boost::posix_time::ptime> microsec_clock;$/;"	t	namespace:boost::interprocess
MinAllocation	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static const size_type MinAllocation = InternalBufferChars*2;$/;"	m	class:boost::container::containers_detail::basic_string_base	access:private
MinBlockSize	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   enum { MinBlockSize   = BlockCtrlSize + Alignment  };$/;"	e	enum:boost::interprocess::detail::simple_seq_fit_impl::__anon29
MinBlockSize	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const std::size_t MinBlockSize   = MinBlockUnits*Alignment;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
MinBlockUnits	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const std::size_t MinBlockUnits          = MemoryAlgorithm::MinBlockUnits;$/;"	m	class:boost::interprocess::detail::memory_algorithm_common	access:public
MinBlockUnits	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const std::size_t MinBlockUnits  = BlockCtrlUnits;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
MinBlockUnits	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t MinBlockUnits       = BlockCtrlUnits;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
MinInternalBufferChars	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static const size_type  MinInternalBufferChars = 8;$/;"	m	class:boost::container::containers_detail::basic_string_base	access:protected
min_value	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^const T &min_value(const T &a, const T &b)$/;"	f	namespace:boost::container::containers_detail	signature:(const T &a, const T &b)
min_value	/usr/include/boost/interprocess/detail/min_max.hpp	/^const T &min_value(const T &a, const T &b)$/;"	f	namespace:boost::interprocess	signature:(const T &a, const T &b)
mode_error	/usr/include/boost/interprocess/errors.hpp	/^   mode_error,$/;"	e	enum:boost::interprocess::error_code_t
mode_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             } mode_t;$/;"	t	namespace:boost::interprocess	typeref:enum:boost::interprocess::__anon10
move	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      :  m_data(boost::interprocess::move(x.m_data))$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(x.m_data)
move	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^      : holder_(boost::interprocess::move(other))$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:(other)
move	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^      : first(boost::interprocess::move(p.first)), second(boost::interprocess::move(p.second))$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(p.second)
move	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^      : m_flat_tree(boost::interprocess::move(x.m_flat_tree))$/;"	f	class:boost::container::flat_map	access:public	signature:(x.m_flat_tree)
move	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^      : m_flat_tree(boost::interprocess::move(x.m_flat_tree))$/;"	f	class:boost::container::flat_multimap	access:public	signature:(x.m_flat_tree)
move	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^      : m_flat_tree(boost::interprocess::move(mx.m_flat_tree))$/;"	f	class:boost::container::flat_set	access:public	signature:(mx.m_flat_tree)
move	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^      : m_flat_tree(boost::interprocess::move(x.m_flat_tree))$/;"	f	class:boost::container::flat_multiset	access:public	signature:(x.m_flat_tree)
move	/usr/include/boost/interprocess/containers/container/list.hpp	/^      : AllocHolder(boost::interprocess::move(static_cast<AllocHolder&>(x)))$/;"	f	class:boost::container::list	access:public	signature:(static_cast<AllocHolder&>(
move	/usr/include/boost/interprocess/containers/container/map.hpp	/^      : m_tree(boost::interprocess::move(x.m_tree))$/;"	f	class:boost::container::map	access:public	signature:(x.m_tree)
move	/usr/include/boost/interprocess/containers/container/map.hpp	/^      : m_tree(boost::interprocess::move(x.m_tree))$/;"	f	class:boost::container::multimap	access:public	signature:(x.m_tree)
move	/usr/include/boost/interprocess/containers/container/set.hpp	/^      : m_tree(boost::interprocess::move(x.m_tree))$/;"	f	class:boost::container::multiset	access:public	signature:(x.m_tree)
move	/usr/include/boost/interprocess/containers/container/set.hpp	/^      : m_tree(boost::interprocess::move(x.m_tree))$/;"	f	class:boost::container::set	access:public	signature:(x.m_tree)
move	/usr/include/boost/interprocess/detail/move.hpp	/^O move(I f, I l, O result)$/;"	f	namespace:boost::interprocess	signature:(I f, I l, O result)
move	/usr/include/boost/interprocess/detail/move.hpp	/^typename ::boost::disable_if<is_movable<T>, T&>::type move(T& x)$/;"	f	namespace:boost::interprocess	signature:(T& x)
move	/usr/include/boost/interprocess/detail/move.hpp	/^typename enable_if<is_movable<T>, rv<T>&>::type move(rv<T>& x)$/;"	f	namespace:boost::interprocess	signature:(rv<T>& x)
move	/usr/include/boost/interprocess/detail/move.hpp	/^typename enable_if<is_movable<T>, rv<T>&>::type move(T& x)$/;"	f	namespace:boost::interprocess	signature:(T& x)
MoveFileExA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall    MoveFileExA (const char *, const char *, unsigned long);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *, const char *, unsigned long)
movefile_copy_allowed	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_copy_allowed            = 0x02;$/;"	m	namespace:boost::interprocess::winapi
movefile_create_hardlink	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_create_hardlink         = 0x10;$/;"	m	namespace:boost::interprocess::winapi
movefile_delay_until_reboot	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_delay_until_reboot      = 0x04;$/;"	m	namespace:boost::interprocess::winapi
movefile_fail_if_not_trackable	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_fail_if_not_trackable   = 0x20;$/;"	m	namespace:boost::interprocess::winapi
movefile_replace_existing	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_replace_existing        = 0x01;$/;"	m	namespace:boost::interprocess::winapi
movefile_write_through	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long movefile_write_through           = 0x08;$/;"	m	namespace:boost::interprocess::winapi
move_backward	/usr/include/boost/interprocess/detail/move.hpp	/^O move_backward(I f, I l, O result)$/;"	f	namespace:boost::interprocess	signature:(I f, I l, O result)
move_const_ref_type	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^struct move_const_ref_type$/;"	s	namespace:boost::container::containers_detail	inherits:if_c
move_detail	/usr/include/boost/interprocess/detail/move.hpp	/^namespace move_detail {$/;"	n	namespace:boost::interprocess
move_file_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool move_file_ex(const char *source_filename, const char *destination_filename, unsigned long flags)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *source_filename, const char *destination_filename, unsigned long flags)
move_inserter	/usr/include/boost/interprocess/detail/move.hpp	/^inline move_insert_iterator<C> move_inserter(C& x, typename C::iterator it)$/;"	f	namespace:boost::interprocess	signature:(C& x, typename C::iterator it)
move_insert_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^   explicit move_insert_iterator(C& x, typename C::iterator pos)$/;"	f	class:boost::interprocess::move_insert_iterator	access:public	signature:(C& x, typename C::iterator pos)
move_insert_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^class move_insert_iterator$/;"	c	namespace:boost::interprocess	inherits:std::iterator
move_it	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef boost::interprocess::move_iterator<r_iterator>    move_it;$/;"	t	class:boost::container::deque	access:private
move_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^   explicit move_iterator(It i)$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:(It i)
move_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^   move_iterator()$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:()
move_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^   move_iterator(const move_iterator<U>& u)$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:(const move_iterator<U>& u)
move_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^class move_iterator$/;"	c	namespace:boost::interprocess
mp_barrier	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_barrier_t *mp_barrier;$/;"	m	class:boost::interprocess::detail::barrier_initializer	access:private
mp_cond	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_cond_t *mp_cond;$/;"	m	class:boost::interprocess::detail::condition_initializer	access:private
mp_ctrl	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      control_word_t          *mp_ctrl;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	access:public
mp_ctrl	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      control_word_t          *mp_ctrl;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback	access:public
mp_frontend	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      frontend_t * const   mp_frontend;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:private
mp_frontend	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      self_t * const    mp_frontend;$/;"	m	struct:boost::interprocess::basic_managed_multi_shared_memory::close_func	access:public
mp_frontend	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      self_t * const    mp_frontend;$/;"	m	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public
mp_header	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   segment_manager *mp_header;$/;"	m	class:boost::interprocess::detail::basic_managed_memory_impl	access:private
mp_high_water	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   mutable char_type*      mp_high_water;$/;"	m	class:boost::interprocess::basic_vectorbuf	access:private
mp_impl	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      const this_type *mp_impl;$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl::block_destroyer	access:private
mp_index	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   offset_ptr<msg_hdr_ptr_t>  mp_index;$/;"	m	class:boost::interprocess::detail::mq_hdr_t	access:public
mp_mngr	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   alloc_ptr_t mp_mngr;$/;"	m	class:boost::interprocess::allocator	access:private
mp_mngr	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   SegmentManager *     mp_mngr;$/;"	m	class:boost::interprocess::detail::named_proxy	access:private
mp_mngr	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^   segment_manager_pointer mp_mngr;$/;"	m	class:boost::interprocess::deleter	access:private
mp_mut	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_mutex_t *mp_mut;$/;"	m	class:boost::interprocess::detail::mutex_initializer	access:private
mp_mutex	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   mutex_type *mp_mutex; $/;"	m	class:boost::interprocess::scoped_lock	access:private
mp_mutex	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   mutex_type *mp_mutex;$/;"	m	class:boost::interprocess::sharable_lock	access:private
mp_mutex	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   mutex_type *mp_mutex;$/;"	m	class:boost::interprocess::upgradable_lock	access:private
mp_name	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   const char_type *    mp_name;$/;"	m	class:boost::interprocess::detail::named_proxy	access:private
mp_node_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   void_pointer   mp_node_pool;$/;"	m	class:boost::interprocess::detail::adaptive_pool_base	access:private
mp_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   NodePool                            *mp_node_pool;$/;"	m	struct:boost::interprocess::detail::get_or_create_node_pool_func	access:public
mp_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   NodePool                           *mp_node_pool;$/;"	m	struct:boost::interprocess::detail::destroy_if_last_link_func	access:public
mp_node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   node_pool_ptr                 mp_node_pool;$/;"	m	class:boost::interprocess::detail::cache_impl	access:private
mp_node_pool	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   void_pointer   mp_node_pool;$/;"	m	class:boost::interprocess::detail::node_allocator_base	access:private
mp_segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typename NodePool::segment_manager  *mp_segment_manager;$/;"	m	struct:boost::interprocess::detail::get_or_create_node_pool_func	access:public
mp_segment_mngr_base	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   segment_mngr_base_ptr_t                mp_segment_mngr_base;   \/\/Segment manager$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
mp_segment_mngr_base	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   segment_mngr_base_ptr_t mp_segment_mngr_base;   \/\/Segment manager$/;"	m	class:boost::container::containers_detail::private_node_pool_impl	access:private
mp_sem	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   sem_t      *mp_sem;$/;"	m	class:boost::interprocess::detail::named_semaphore_wrapper	access:private
mp_str	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const CharT *  mp_str;$/;"	m	struct:boost::interprocess::detail::intrusive_compare_key	access:public
mp_str	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const_char_ptr_t  mp_str;$/;"	m	struct:boost::interprocess::detail::index_key	access:private
mq_hdr_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   mq_hdr_t(std::size_t max_num_msg, std::size_t max_msg_size)$/;"	f	class:boost::interprocess::detail::mq_hdr_t	access:public	signature:(std::size_t max_num_msg, std::size_t max_msg_size)
mq_hdr_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^class mq_hdr_t$/;"	c	namespace:boost::interprocess::detail	inherits:detail::priority_functor
msg_hdr_ptr_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef offset_ptr<msg_hdr_t> msg_hdr_ptr_t;$/;"	t	class:boost::interprocess::detail::mq_hdr_t	access:private
msg_hdr_t	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^class msg_hdr_t $/;"	c	namespace:boost::interprocess::detail
multiallocation_chain	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
multiallocation_chain	/usr/include/boost/interprocess/allocators/allocator.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::allocator	access:public
multiallocation_chain	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::detail::array_allocation_impl	access:public
multiallocation_chain	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::detail::node_pool_allocation_impl	access:public
multiallocation_chain	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      multiallocation_chain                     multiallocation_chain;$/;"	t	class:boost::interprocess::detail::shared_pool_impl	access:public
multiallocation_chain	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename base_t::multiallocation_chain        multiallocation_chain;$/;"	t	class:boost::interprocess::detail::cached_allocator_impl	access:public
multiallocation_chain	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename NodePool::multiallocation_chain  multiallocation_chain;$/;"	t	class:boost::interprocess::detail::cache_impl	access:private
multiallocation_chain	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
multiallocation_chain	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
multiallocation_chain	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      <typename SegmentManager::multiallocation_chain, T>multiallocation_chain;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
multiallocation_chain	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef typename SegmentManagerBase::multiallocation_chain     multiallocation_chain;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public
multiallocation_chain	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename A::multiallocation_chain    multiallocation_chain;$/;"	t	class:boost::container::containers_detail::allocator_destroyer_and_chain_builder	access:private
multiallocation_chain	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename A::multiallocation_chain    multiallocation_chain;$/;"	t	class:boost::container::containers_detail::allocator_multialloc_chain_node_deallocator	access:private
multiallocation_chain	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   typedef typename SegmentManagerBase::multiallocation_chain     multiallocation_chain;$/;"	t	class:boost::container::containers_detail::private_node_pool_impl	access:public
multiallocation_chain	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      >::type                                         multiallocation_chain;$/;"	t	class:boost::container::stable_vector	access:private
multiallocation_chain	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef typename segment_manager::multiallocation_chain  multiallocation_chain;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
multiallocation_chain	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   typedef typename MemoryAlgorithm::multiallocation_chain     multiallocation_chain;$/;"	t	class:boost::interprocess::detail::memory_algorithm_common	access:public
multiallocation_chain	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      basic_multiallocation_chain<VoidPointer>     multiallocation_chain;$/;"	t	class:boost::interprocess::detail::simple_seq_fit_impl	access:public
multiallocation_chain	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      basic_multiallocation_chain<VoidPointer>  multiallocation_chain;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:public
multiallocation_chain	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename MemoryAlgorithm::multiallocation_chain    multiallocation_chain;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
multialloc_cached_counted	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      <void_ptr>                                            multialloc_cached_counted;$/;"	t	struct:boost::container::stable_vector_detail::select_multiallocation_chain	access:public
multimap	/usr/include/boost/interprocess/containers/container/map.hpp	/^   explicit multimap(const Pred& comp = Pred(),$/;"	f	class:boost::container::multimap	access:public	signature:(const Pred& comp = Pred(), const allocator_type& a = allocator_type())
multimap	/usr/include/boost/interprocess/containers/container/map.hpp	/^   multimap(const multimap<Key,T,Pred,Alloc>& x) $/;"	f	class:boost::container::multimap	access:public	signature:(const multimap<Key,T,Pred,Alloc>& x)
multimap	/usr/include/boost/interprocess/containers/container/map.hpp	/^   multimap(InputIterator first, InputIterator last,$/;"	f	class:boost::container::multimap	access:public	signature:(InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
multimap	/usr/include/boost/interprocess/containers/container/map.hpp	/^   multimap(ordered_range_t ordered_range, InputIterator first, InputIterator last, const Pred& comp = Pred(),$/;"	f	class:boost::container::multimap	access:public	signature:(ordered_range_t ordered_range, InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
multimap	/usr/include/boost/interprocess/containers/container/map.hpp	/^class multimap $/;"	c	namespace:boost::container
multiple_of_units	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static std::size_t multiple_of_units(std::size_t size)$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(std::size_t size)
multiset	/usr/include/boost/interprocess/containers/container/set.hpp	/^   explicit multiset(const Pred& comp = Pred(),$/;"	f	class:boost::container::multiset	access:public	signature:(const Pred& comp = Pred(), const allocator_type& a = allocator_type())
multiset	/usr/include/boost/interprocess/containers/container/set.hpp	/^   multiset( ordered_range_t ordered_range, InputIterator first, InputIterator last$/;"	f	class:boost::container::multiset	access:public	signature:( ordered_range_t ordered_range, InputIterator first, InputIterator last , const Pred& comp = Pred() , const allocator_type& a = allocator_type())
multiset	/usr/include/boost/interprocess/containers/container/set.hpp	/^   multiset(const multiset& x) $/;"	f	class:boost::container::multiset	access:public	signature:(const multiset& x)
multiset	/usr/include/boost/interprocess/containers/container/set.hpp	/^   multiset(InputIterator first, InputIterator last,$/;"	f	class:boost::container::multiset	access:public	signature:(InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
multiset	/usr/include/boost/interprocess/containers/container/set.hpp	/^class multiset $/;"	c	namespace:boost::container
multiset_hook_t	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      , bi::link_mode<bi::normal_link> >::type multiset_hook_t;$/;"	t	struct:boost::container::containers_detail::adaptive_pool_types	access:public
multi_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   multi_allocate(std::size_t nbytes)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t nbytes)
multi_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* multi_allocate(std::size_t nbytes);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t nbytes)
multi_segment_services	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^class multi_segment_services$/;"	c	namespace:boost::interprocess
multi_simple_seq_fit	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^   multi_simple_seq_fit           (std::size_t size, std::size_t extra_hdr_bytes)$/;"	f	class:boost::interprocess::multi_simple_seq_fit	access:public	signature:(std::size_t size, std::size_t extra_hdr_bytes)
multi_simple_seq_fit	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit.hpp	/^class multi_simple_seq_fit $/;"	c	namespace:boost::interprocess	inherits:detail::simple_seq_fit_impl
mutex	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   interprocess_mutex *mutex() const$/;"	f	class:boost::interprocess::named_condition	access:private	signature:() const
mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   interprocess_mutex *mutex() const$/;"	f	class:boost::interprocess::named_mutex	access:private	signature:() const
mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   interprocess_recursive_mutex *mutex() const$/;"	f	class:boost::interprocess::named_recursive_mutex	access:private	signature:() const
mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   interprocess_upgradable_mutex *mutex() const$/;"	f	class:boost::interprocess::named_upgradable_mutex	access:private	signature:() const
mutex	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   mutex_type* mutex() const$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:() const
mutex	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   mutex_type* mutex() const$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:() const
mutex	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   mutex_type* mutex() const$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:() const
mutexattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      mutexattr_wrapper(bool recursive = false)$/;"	f	struct:boost::interprocess::detail::mutexattr_wrapper	access:public	signature:(bool recursive = false)
mutexattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   struct mutexattr_wrapper $/;"	s	namespace:boost::interprocess::detail
mutex_	/usr/include/boost/interprocess/sync/named_condition.hpp	/^      interprocess_mutex mutex_;$/;"	m	struct:boost::interprocess::named_condition::condition_holder	access:public
mutex_all_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long mutex_all_access     = (0x000F0000L)|(0x00100000L)|0x0001;$/;"	m	namespace:boost::interprocess::winapi
mutex_family	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef typename MemoryAlgorithm::mutex_family     mutex_family;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
mutex_family	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   typedef MutexFamily        mutex_family;$/;"	t	class:boost::interprocess::detail::simple_seq_fit_impl	access:public
mutex_family	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   typedef MutexFamily        mutex_family;$/;"	t	class:boost::interprocess::detail::simple_seq_fit_impl	access:public
mutex_family	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef MutexFamily        mutex_family;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:public
mutex_family	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename Base::mutex_family       mutex_family;$/;"	t	class:boost::interprocess::segment_manager	access:public
mutex_family	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename MemoryAlgorithm::mutex_family  mutex_family;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
mutex_family	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^struct mutex_family$/;"	s	namespace:boost::interprocess
mutex_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      mutex_initializer(pthread_mutex_t &mut, pthread_mutexattr_t &mut_attr)$/;"	f	class:boost::interprocess::detail::mutex_initializer	access:public	signature:(pthread_mutex_t &mut, pthread_mutexattr_t &mut_attr)
mutex_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^   class mutex_initializer$/;"	c	namespace:boost::interprocess::detail
mutex_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename segment_manager::mutex_family::mutex_type mutex_type;$/;"	t	class:boost::interprocess::detail::shared_pool_impl	access:private
mutex_type	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      typedef Mutex        mutex_type;$/;"	t	struct:boost::interprocess::flat_map_intersegment::mappings_t	access:public
mutex_type	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^   typedef boost::interprocess::interprocess_mutex                 mutex_type;$/;"	t	struct:boost::interprocess::mutex_family	access:public
mutex_type	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^   typedef boost::interprocess::null_mutex                   mutex_type;$/;"	t	struct:boost::interprocess::null_mutex_family	access:public
mutex_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   typedef Mutex mutex_type;$/;"	t	class:boost::interprocess::scoped_lock	access:public
mutex_type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   typedef SharableMutex mutex_type;$/;"	t	class:boost::interprocess::sharable_lock	access:public
mutex_type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   typedef UpgradableMutex mutex_type;$/;"	t	class:boost::interprocess::upgradable_lock	access:public
mv	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      (BOOST_INTERPROCESS_FWD_REF(MovableConvertible) mv, insert_commit_data &data)$/;"	m	class:boost::container::containers_detail::rbtree	access:public
mx	/usr/include/boost/interprocess/containers/container/string.hpp	/^   BOOST_INTERPROCESS_RV_REF_3_TEMPL_ARGS(basic_string, CharT, Traits, A) mx$/;"	m	namespace:boost::container
mx	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator+( BOOST_INTERPROCESS_RV_REF_3_TEMPL_ARGS(basic_string, CharT, Traits, A) mx$/;"	m	namespace:boost::container
mx	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator+(BOOST_INTERPROCESS_RV_REF_3_TEMPL_ARGS(basic_string, CharT, Traits, A) mx$/;"	m	namespace:boost::container
m_algo	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   MemoryAlgorithm & m_algo;$/;"	m	class:boost::interprocess::detail::mem_algo_deallocator	access:private
m_alloc	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   Allocator&  m_alloc;$/;"	m	struct:boost::container::containers_detail::scoped_array_deallocator	access:private
m_alloc	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      :  m_ptr(o.m_ptr), m_alloc(o.m_alloc)$/;"	f	struct:boost::container::containers_detail::scoped_deallocator	access:public	signature:(o.m_alloc)
m_alloc	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   Allocator&  m_alloc;$/;"	m	struct:boost::container::containers_detail::scoped_deallocator	access:public
m_alloc	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   Allocator& m_alloc;$/;"	m	struct:boost::interprocess::detail::scoped_ptr_dealloc_functor	access:public
m_allocated	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   std::size_t       m_allocated;      \/\/Used nodes for debugging$/;"	m	class:boost::container::containers_detail::private_node_pool_impl	access:private
m_allocated	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      std::size_t       m_allocated;$/;"	m	struct:boost::interprocess::detail::simple_seq_fit_impl::header_t	access:public
m_allocated	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      std::size_t       m_allocated;$/;"	m	struct:boost::interprocess::detail::simple_seq_fit_impl::header_t	access:public
m_allocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      std::size_t       m_allocated;$/;"	m	struct:boost::interprocess::rbtree_best_fit::header_t	access:public
m_allocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      std::size_t m_allocated :  1;$/;"	m	struct:boost::interprocess::rbtree_best_fit::SizeHolder	access:public
m_alloc_type_sizeof_char	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned char  m_alloc_type_sizeof_char;$/;"	m	struct:boost::interprocess::detail::block_header	access:public
m_arg	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^   Arg m_arg;$/;"	m	class:boost::interprocess::detail::named_creation_functor	access:private
m_attr	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_barrierattr_t m_attr;$/;"	m	struct:boost::interprocess::detail::barrierattr_wrapper	access:public
m_attr	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_condattr_t m_attr;$/;"	m	struct:boost::interprocess::detail::condattr_wrapper	access:public
m_attr	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      pthread_mutexattr_t m_attr;$/;"	m	struct:boost::interprocess::detail::mutexattr_wrapper	access:public
m_barrier	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^      pthread_barrier_t    m_barrier;$/;"	m	class:boost::interprocess::barrier	access:private
m_base	/usr/include/boost/interprocess/mapped_region.hpp	/^   :  m_base(MAP_FAILED), m_size(0), m_offset(0),  m_extra_offset(0), m_mode(read_only), m_is_xsi(false)$/;"	p	namespace:boost::interprocess	signature:(MAP_FAILED)
m_base	/usr/include/boost/interprocess/mapped_region.hpp	/^   void*             m_base;$/;"	m	class:boost::interprocess::mapped_region	access:private
m_blocklist	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   blockslist_t      m_blocklist;      \/\/Intrusive container of blocks$/;"	m	class:boost::container::containers_detail::private_node_pool_impl	access:private
m_block_multiset	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   block_multiset_t                       m_block_multiset;       \/\/Intrusive block list$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
m_buf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits> m_buf;$/;"	m	class:boost::interprocess::basic_bufferstream	access:private
m_buf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits> m_buf;$/;"	m	class:boost::interprocess::basic_ibufferstream	access:private
m_buf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits> m_buf;$/;"	m	class:boost::interprocess::basic_obufferstream	access:private
m_buf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf<CharVector, CharTraits> m_buf;$/;"	m	class:boost::interprocess::basic_ivectorstream	access:private
m_buf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf<CharVector, CharTraits> m_buf;$/;"	m	class:boost::interprocess::basic_ovectorstream	access:private
m_buf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf<CharVector, CharTraits> m_buf;$/;"	m	class:boost::interprocess::basic_vectorstream	access:private
m_buffer	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   CharT *                 m_buffer;$/;"	m	class:boost::interprocess::basic_bufferbuf	access:private
m_cache	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cache_impl<node_pool_t> m_cache;$/;"	m	class:boost::interprocess::detail::cached_allocator_impl	access:private
m_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   multiallocation_chain         m_cached_nodes;$/;"	m	class:boost::interprocess::detail::cache_impl	access:private
m_capacity	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      size_type   m_capacity;$/;"	m	struct:boost::container::containers_detail::vector_alloc_holder::members_holder	access:public
m_command	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      volatile boost::uint32_t    m_command;$/;"	m	class:boost::interprocess::interprocess_condition	access:private
m_cond	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^      interprocess_condition m_cond;$/;"	m	class:boost::interprocess::barrier	access:private
m_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      pthread_cond_t   m_condition;$/;"	m	class:boost::interprocess::interprocess_condition	access:private
m_cond_recv	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   interprocess_condition     m_cond_recv;$/;"	m	class:boost::interprocess::detail::mq_hdr_t	access:public
m_cond_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   interprocess_condition     m_cond_send;$/;"	m	class:boost::interprocess::detail::mq_hdr_t	access:public
m_count	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^      unsigned int m_count;$/;"	m	class:boost::interprocess::barrier	access:private
m_count	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   volatile boost::uint32_t m_count;$/;"	m	class:boost::interprocess::interprocess_semaphore	access:private
m_creation_type	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^   detail::create_enum_t m_creation_type;$/;"	m	class:boost::interprocess::detail::named_creation_functor	access:private
m_ctrl	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   }                       m_ctrl;$/;"	m	class:boost::interprocess::interprocess_upgradable_mutex	typeref:struct:boost::interprocess::interprocess_upgradable_mutex::control_word_t	access:private
m_cur	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      val_alloc_ptr  m_cur;$/;"	m	class:boost::container::deque_base::const_iterator	access:protected
m_cur_num_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   std::size_t                m_cur_num_msg;$/;"	m	class:boost::interprocess::detail::mq_hdr_t	access:public
m_data	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   Data m_data;$/;"	m	class:boost::container::containers_detail::flat_tree	access:private
m_data	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   internal_type m_data;$/;"	m	struct:boost::container::containers_detail::rbtree_node	access:private
m_data	/usr/include/boost/interprocess/containers/container/list.hpp	/^   T m_data;$/;"	m	struct:boost::container::containers_detail::list_node	access:public
m_data	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   T m_data;$/;"	m	struct:boost::container::containers_detail::slist_node	access:public
m_dothrow	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   const bool           m_dothrow;$/;"	m	class:boost::interprocess::detail::named_proxy	access:private
m_ec	/usr/include/boost/interprocess/errors.hpp	/^   error_code_t   m_ec;$/;"	m	struct:boost::interprocess::error_info	access:private
m_enter_mut	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      interprocess_mutex m_enter_mut;$/;"	m	class:boost::interprocess::interprocess_condition	access:private
m_err	/usr/include/boost/interprocess/exceptions.hpp	/^   error_info        m_err;$/;"	m	class:boost::interprocess::interprocess_exception	access:private
m_extra_hdr_bytes	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      std::size_t       m_extra_hdr_bytes;$/;"	m	struct:boost::interprocess::detail::simple_seq_fit_impl::header_t	access:public
m_extra_hdr_bytes	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      std::size_t       m_extra_hdr_bytes;$/;"	m	struct:boost::interprocess::rbtree_best_fit::header_t	access:public
m_extra_offset	/usr/include/boost/interprocess/mapped_region.hpp	/^   offset_t          m_extra_offset;$/;"	m	class:boost::interprocess::mapped_region	access:private
m_filename	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   std::string       m_filename;$/;"	m	class:boost::interprocess::detail::file_wrapper	access:private
m_filename	/usr/include/boost/interprocess/file_mapping.hpp	/^   std::string       m_filename;$/;"	m	class:boost::interprocess::file_mapping	access:private
m_filename	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   std::string    m_filename;$/;"	m	class:boost::interprocess::shared_memory_object	access:private
m_file_hnd	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   file_handle_t m_file_hnd;$/;"	m	class:boost::interprocess::file_lock	access:private
m_file_mapping_hnd	/usr/include/boost/interprocess/mapped_region.hpp	/^   file_handle_t     m_file_mapping_hnd;$/;"	m	class:boost::interprocess::mapped_region	access:private
m_find	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   const bool           m_find;$/;"	m	class:boost::interprocess::detail::named_proxy	access:private
m_finish	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator        m_finish;$/;"	m	struct:boost::container::deque_base::members_holder	access:public
m_first	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      val_alloc_ptr  m_first;$/;"	m	class:boost::container::deque_base::const_iterator	access:protected
m_first	/usr/include/boost/interprocess/containers/container/string.hpp	/^      const Pointer m_first;$/;"	m	struct:boost::container::basic_string::Not_within_traits	access:public
m_first_gate	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      interprocess_condition  &m_first_gate;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	access:public
m_first_gate	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_condition  m_first_gate;$/;"	m	class:boost::interprocess::interprocess_upgradable_mutex	access:private
m_flat_tree	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   impl_tree_t m_flat_tree;  \/\/ flat tree representing flat_map$/;"	m	class:boost::container::flat_map	access:private
m_flat_tree	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   impl_tree_t m_flat_tree;  \/\/ flat tree representing flat_map$/;"	m	class:boost::container::flat_multimap	access:private
m_flat_tree	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   tree_t m_flat_tree;  \/\/ flat tree representing flat_multiset$/;"	m	class:boost::container::flat_multiset	access:private
m_flat_tree	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   tree_t m_flat_tree;  \/\/ flat tree representing flat_set$/;"	m	class:boost::container::flat_set	access:private
m_freelist	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   free_nodes_t      m_freelist;       \/\/Intrusive container of free nods$/;"	m	class:boost::container::containers_detail::private_node_pool_impl	access:private
m_frontend	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   BasicManagedMemoryImpl *m_frontend;$/;"	m	class:boost::interprocess::detail::create_open_func	access:private
m_generation	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^      unsigned int m_generation;$/;"	m	class:boost::interprocess::barrier	access:private
m_group	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      segment_group_id     m_group;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:private
m_group_services	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   group_services m_group_services;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
m_handle	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   file_handle_t  m_handle;$/;"	m	class:boost::interprocess::detail::file_wrapper	access:private
m_handle	/usr/include/boost/interprocess/file_mapping.hpp	/^   file_handle_t  m_handle;$/;"	m	class:boost::interprocess::file_mapping	access:private
m_handle	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   file_handle_t  m_handle;$/;"	m	class:boost::interprocess::shared_memory_object	access:private
m_handle	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   void *         m_handle;$/;"	m	class:boost::interprocess::windows_shared_memory	access:private
m_head	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   Head m_head;$/;"	m	class:boost::container::containers_detail::tuple	access:protected
m_head	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   Head m_head;$/;"	m	class:boost::interprocess::detail::tuple	access:protected
m_header	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   } m_header;$/;"	m	class:boost::interprocess::detail::shared_pool_impl	typeref:struct:boost::interprocess::detail::shared_pool_impl::header_t	access:private
m_header	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   }  m_header;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	typeref:struct:boost::interprocess::detail::simple_seq_fit_impl::header_t	access:private
m_header	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   }  m_header;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	typeref:struct:boost::interprocess::detail::simple_seq_fit_impl::header_t	access:private
m_header	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   }  m_header;$/;"	m	class:boost::interprocess::rbtree_best_fit	typeref:struct:boost::interprocess::rbtree_best_fit::header_t	access:private
m_header	/usr/include/boost/interprocess/segment_manager.hpp	/^   }  m_header;$/;"	m	class:boost::interprocess::segment_manager	typeref:struct:boost::interprocess::segment_manager::header_t	access:private
m_heapmem	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   std::vector<char>  m_heapmem;$/;"	m	class:boost::interprocess::basic_managed_heap_memory	access:private
m_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      node_alloc_holder &m_holder;$/;"	m	struct:boost::container::containers_detail::cloner	access:public
m_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      node_alloc_holder &m_holder;$/;"	m	struct:boost::container::containers_detail::destroyer	access:public
m_holder	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      AllocHolder &m_holder;$/;"	m	class:boost::container::containers_detail::rbtree::RecyclingCloner	access:public
m_icont	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      ICont m_icont;$/;"	m	struct:boost::container::containers_detail::members_holder	access:public
m_icont	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      Icont &m_icont;$/;"	m	class:boost::container::containers_detail::rbtree::RecyclingCloner	access:public
m_id	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   boost::uint8_t m_id;$/;"	m	class:boost::interprocess::xsi_named_mutex	access:private
m_imultiset	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      Imultiset            m_imultiset;$/;"	m	struct:boost::interprocess::rbtree_best_fit::header_t	access:public
m_is_xsi	/usr/include/boost/interprocess/mapped_region.hpp	/^   :  m_base(MAP_FAILED), m_size(0), m_offset(0),  m_extra_offset(0), m_mode(read_only), m_is_xsi(false)$/;"	f	namespace:boost::interprocess	signature:(false)
m_is_xsi	/usr/include/boost/interprocess/mapped_region.hpp	/^   bool              m_is_xsi;$/;"	m	class:boost::interprocess::mapped_region	access:private
m_it	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   Iterator m_it;$/;"	m	class:boost::container::transform_iterator	access:private
m_it	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      iiterator m_it;$/;"	m	class:boost::container::containers_detail::rbtree::const_iterator	access:protected
m_it	/usr/include/boost/interprocess/containers/container/list.hpp	/^      typename Icont::iterator m_it;$/;"	m	class:boost::container::list::const_iterator	access:protected
m_it	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      typename Icont::iterator m_it;$/;"	m	class:boost::container::slist::const_iterator	access:protected
m_it	/usr/include/boost/interprocess/detail/move.hpp	/^   It m_it;$/;"	m	class:boost::interprocess::move_iterator	access:private
m_it	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   Iterator m_it;$/;"	m	class:boost::interprocess::transform_iterator	access:private
m_key	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   key_t          m_key;$/;"	m	class:boost::interprocess::xsi_named_mutex	access:private
m_last	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      val_alloc_ptr  m_last;$/;"	m	class:boost::container::deque_base::const_iterator	access:protected
m_last	/usr/include/boost/interprocess/containers/container/string.hpp	/^      const Pointer m_last;$/;"	m	struct:boost::container::basic_string::Not_within_traits	access:public
m_len	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t       m_len;$/;"	m	struct:boost::interprocess::detail::index_key	access:private
m_len	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t    m_len;$/;"	m	struct:boost::interprocess::detail::intrusive_compare_key	access:public
m_length	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   size_type   m_length;$/;"	m	struct:boost::container::containers_detail::scoped_array_deallocator	access:private
m_length	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::size_t             m_length;$/;"	m	class:boost::interprocess::basic_bufferbuf	access:private
m_locked	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^      : mp_mutex(0), m_locked(false)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(false)
m_locked	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^      : mp_mutex(0), m_locked(scop.owns())$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(scop.owns())
m_locked	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   bool        m_locked;$/;"	m	class:boost::interprocess::scoped_lock	access:private
m_locked	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^      : mp_mutex(0), m_locked(false)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(false)
m_locked	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^      : mp_mutex(0), m_locked(upgr.owns())$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(upgr.owns())
m_locked	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   bool        m_locked;$/;"	m	class:boost::interprocess::sharable_lock	access:private
m_locked	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^      : mp_mutex(0), m_locked(false)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(false)
m_locked	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^      : mp_mutex(0), m_locked(upgr.owns())$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(upgr.owns())
m_locked	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   bool        m_locked;$/;"	m	class:boost::interprocess::upgradable_lock	access:private
m_map	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      ptr_alloc_ptr   m_map;$/;"	m	struct:boost::container::deque_base::members_holder	access:public
m_mapped_region	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   mapped_region     m_mapped_region;$/;"	m	class:boost::interprocess::detail::managed_open_or_create_impl	access:private
m_map_size	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      std::size_t     m_map_size;$/;"	m	struct:boost::container::deque_base::members_holder	access:public
m_maxmsg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   const std::size_t m_maxmsg;$/;"	m	class:boost::interprocess::detail::initialization_func_t	access:public
m_maxmsgsize	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   const std::size_t m_maxmsgsize;$/;"	m	class:boost::interprocess::detail::initialization_func_t	access:public
m_max_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   std::size_t                   m_max_cached_nodes;$/;"	m	class:boost::interprocess::detail::cache_impl	access:private
m_max_free_blocks	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   const std::size_t m_max_free_blocks;$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
m_max_msg_size	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   const std::size_t          m_max_msg_size;$/;"	m	class:boost::interprocess::detail::mq_hdr_t	access:public
m_max_num_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   const std::size_t          m_max_num_msg;$/;"	m	class:boost::interprocess::detail::mq_hdr_t	access:public
m_mfile	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   managed_open_or_create_type m_mfile;$/;"	m	class:boost::interprocess::basic_managed_mapped_file	access:private
m_min_segment_size	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      std::size_t          m_min_segment_size;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:private
m_mode	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   mode_t      m_mode;$/;"	m	class:boost::interprocess::detail::file_wrapper	access:private
m_mode	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   mode_t            m_mode;$/;"	m	class:boost::interprocess::xsi_shared_memory_device	access:private
m_mode	/usr/include/boost/interprocess/file_mapping.hpp	/^   mode_t    m_mode;$/;"	m	class:boost::interprocess::file_mapping	access:private
m_mode	/usr/include/boost/interprocess/mapped_region.hpp	/^   ,  m_mode(read_only)$/;"	p	namespace:boost::interprocess	signature:(read_only)
m_mode	/usr/include/boost/interprocess/mapped_region.hpp	/^   :  m_base(MAP_FAILED), m_size(0), m_offset(0),  m_extra_offset(0), m_mode(read_only), m_is_xsi(false)$/;"	p	namespace:boost::interprocess	signature:(read_only)
m_mode	/usr/include/boost/interprocess/mapped_region.hpp	/^   mode_t            m_mode;$/;"	m	class:boost::interprocess::mapped_region	access:private
m_mode	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   mode_t         m_mode;$/;"	m	class:boost::interprocess::shared_memory_object	access:private
m_mode	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   std::ios_base::openmode m_mode;$/;"	m	class:boost::interprocess::basic_bufferbuf	access:private
m_mode	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   std::ios_base::openmode m_mode;$/;"	m	class:boost::interprocess::basic_vectorbuf	access:private
m_mode	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   mode_t         m_mode;$/;"	m	class:boost::interprocess::windows_shared_memory	access:private
m_ms_services	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      multi_segment_services &m_ms_services;$/;"	m	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:private
m_mut	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^      pthread_mutex_t   m_mut;$/;"	m	class:boost::interprocess::interprocess_mutex	access:private
m_mut	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   pthread_mutex_t m_mut;$/;"	m	class:boost::interprocess::interprocess_recursive_mutex	access:private
m_mut	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_mutex      m_mut;$/;"	m	class:boost::interprocess::interprocess_upgradable_mutex	access:private
m_mutex	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   interprocess_mutex         m_mutex;$/;"	m	class:boost::interprocess::detail::mq_hdr_t	access:public
m_mutex	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^      interprocess_mutex m_mutex;$/;"	m	class:boost::interprocess::barrier	access:private
m_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   interprocess_mutex                  m_mutex;$/;"	m	class:boost::interprocess::interprocess_recursive_mutex	access:private
m_n	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   size_type   m_n;$/;"	m	struct:boost::container::containers_detail::scoped_destructor_n	access:public
m_name	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   std::string       m_name;$/;"	m	class:boost::interprocess::detail::managed_open_or_create_impl	access:private
m_name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const CharType *m_name;$/;"	m	class:boost::interprocess::detail::char_ptr_holder	access:private
m_name	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   std::string       m_name;$/;"	m	class:boost::interprocess::xsi_shared_memory_device	access:private
m_name	/usr/include/boost/interprocess/file_mapping.hpp	/^   const char * m_name;$/;"	m	class:boost::interprocess::remove_file_on_destroy	access:private
m_name	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   const char * m_name;$/;"	m	class:boost::interprocess::remove_shared_memory_on_destroy	access:private
m_name	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   std::string    m_name;$/;"	m	class:boost::interprocess::windows_shared_memory	access:private
m_named_index	/usr/include/boost/interprocess/segment_manager.hpp	/^      named_index_t           m_named_index;$/;"	m	struct:boost::interprocess::segment_manager::header_t	access:public
m_nat	/usr/include/boost/interprocess/errors.hpp	/^   native_error_t m_nat;$/;"	m	struct:boost::interprocess::error_info	access:private
m_next	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      block_ctrl_ptr m_next;$/;"	m	struct:boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	access:public
m_next	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      block_ctrl_ptr m_next;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	access:public
m_nLockCount	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   unsigned int                        m_nLockCount;$/;"	m	class:boost::interprocess::interprocess_recursive_mutex	access:private
m_node	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      index_pointer  m_node;$/;"	m	class:boost::container::deque_base::const_iterator	access:protected
m_nodes_per_block	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   const std::size_t m_nodes_per_block;$/;"	m	class:boost::container::containers_detail::private_node_pool_impl	access:private
m_node_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   node_pool_t m_node_pool;$/;"	m	class:boost::interprocess::detail::private_adaptive_pool_base	access:private
m_node_pool	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   node_pool_t m_node_pool;$/;"	m	class:boost::interprocess::detail::private_node_allocator_base	access:private
m_nOwner	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   volatile detail::OS_systemwide_thread_id_t   m_nOwner;$/;"	m	class:boost::interprocess::interprocess_recursive_mutex	access:private
m_num	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   Difference  m_num;$/;"	m	class:boost::container::constant_iterator	access:private
m_num	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   Difference  m_num;$/;"	m	class:boost::container::default_construct_iterator	access:private
m_num	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   Difference  m_num;$/;"	m	class:boost::container::repeat_iterator	access:private
m_num	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   std::ptrdiff_t m_num;$/;"	m	class:boost::container::emplace_iterator	access:private
m_num	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   mutable std::size_t  m_num;$/;"	m	class:boost::interprocess::detail::named_proxy	access:private
m_num_char	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned short m_num_char;$/;"	m	struct:boost::interprocess::detail::block_header	access:public
m_num_subblocks	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   std::size_t m_num_subblocks;$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
m_num_waiters	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      volatile boost::uint32_t    m_num_waiters;$/;"	m	class:boost::interprocess::interprocess_condition	access:private
m_offset	/usr/include/boost/interprocess/mapped_region.hpp	/^   offset_t          m_offset;$/;"	m	class:boost::interprocess::mapped_region	access:private
m_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^   std::ptrdiff_t m_offset; \/\/Distance between this object and pointed address$/;"	m	class:boost::interprocess::offset_ptr	access:private
m_p	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   pointer     m_p;$/;"	m	struct:boost::container::containers_detail::scoped_destructor_n	access:public
m_path	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   std::string    m_path;$/;"	m	class:boost::interprocess::xsi_named_mutex	access:private
m_pe	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   E *            m_pe;$/;"	m	class:boost::container::emplace_iterator	access:private
m_perm	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   int            m_perm;$/;"	m	class:boost::interprocess::xsi_named_mutex	access:private
m_pi	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   counted_impl_ptr  m_pi;$/;"	m	class:boost::interprocess::detail::shared_count	access:private
m_pi	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   counted_impl_ptr  m_pi;$/;"	m	class:boost::interprocess::detail::weak_count	access:private
m_pn	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^      :  m_pn()$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:()
m_pn	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   detail::shared_count<T, VoidAllocator, Deleter>   m_pn;    \/\/ reference counter$/;"	m	class:boost::interprocess::shared_ptr	access:private
m_pn	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   detail::weak_count<T, A, D> m_pn;      \/\/ reference counter$/;"	m	class:boost::interprocess::weak_ptr	access:private
m_prev_allocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      std::size_t m_prev_allocated :  1;$/;"	m	struct:boost::interprocess::rbtree_best_fit::SizeHolder	access:public
m_prev_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      std::size_t m_prev_size :  sizeof(std::size_t)*CHAR_BIT;$/;"	m	struct:boost::interprocess::rbtree_best_fit::SizeHolder	access:public
m_ptr	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   pointer     m_ptr;$/;"	m	struct:boost::container::containers_detail::scoped_array_deallocator	access:private
m_ptr	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   const T *   m_ptr;$/;"	m	class:boost::container::constant_iterator	access:private
m_ptr	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   T *         m_ptr;$/;"	m	class:boost::container::repeat_iterator	access:private
m_ptr	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   pointer     m_ptr;$/;"	m	struct:boost::container::containers_detail::scoped_deallocator	access:public
m_ptr	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   Pointer m_ptr;$/;"	m	class:boost::container::containers_detail::vector_const_iterator	access:protected
m_ptr	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void *            m_ptr;$/;"	m	class:boost::interprocess::detail::mem_algo_deallocator	access:private
m_ptr	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void_pointer    m_ptr;$/;"	m	struct:boost::interprocess::detail::index_data	access:public
m_ptr	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   pointer m_ptr;$/;"	m	class:boost::interprocess::detail::sp_counted_impl_pd	access:private
m_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   pointer m_ptr;$/;"	m	class:boost::interprocess::intrusive_ptr	access:private
m_ptr	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   pointer m_ptr;$/;"	m	class:boost::interprocess::scoped_ptr	access:private
m_ptr_to_segment_info	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      ptr_to_segment_info_t      m_ptr_to_segment_info;$/;"	m	struct:boost::interprocess::flat_map_intersegment::mappings_t	access:public
m_px	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   pointer           m_px;$/;"	m	class:boost::interprocess::detail::shared_count	access:private
m_px	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   pointer           m_px;$/;"	m	class:boost::interprocess::detail::weak_count	access:private
m_real_block_alignment	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   const std::size_t m_real_block_alignment;$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
m_real_node_size	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   const std::size_t m_real_node_size;$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
m_real_node_size	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   const std::size_t m_real_node_size;$/;"	m	class:boost::container::containers_detail::private_node_pool_impl	access:private
m_real_num_node	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   std::size_t m_real_num_node;$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
m_ref	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      const value_type &m_ref;$/;"	m	struct:boost::container::slist::value_equal_to_this	access:public
m_repr	/usr/include/boost/interprocess/containers/container/string.hpp	/^      repr_t m_repr;$/;"	m	struct:boost::container::containers_detail::basic_string_base::members_holder	access:public
m_root	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      block_ctrl        m_root;$/;"	m	struct:boost::interprocess::detail::simple_seq_fit_impl::header_t	access:public
m_root	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      block_ctrl        m_root;$/;"	m	struct:boost::interprocess::detail::simple_seq_fit_impl::header_t	access:public
m_root_name	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   std::string    m_root_name;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
m_s	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^      volatile boost::uint32_t m_s;$/;"	m	class:boost::interprocess::interprocess_mutex	access:private
m_second_gate	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_condition  m_second_gate;$/;"	m	class:boost::interprocess::interprocess_upgradable_mutex	access:private
m_segments	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      vector<segment_data> m_segments;$/;"	m	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:private
m_segment_number	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      std::size_t       m_segment_number;$/;"	m	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public
m_sem	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   detail::semaphore_wrapper m_sem;$/;"	m	class:boost::interprocess::interprocess_semaphore	access:private
m_sem	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   detail::named_semaphore_wrapper m_sem;$/;"	m	class:boost::interprocess::named_mutex	access:private
m_sem	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   detail::named_semaphore_wrapper m_sem;$/;"	m	class:boost::interprocess::named_semaphore	access:private
m_sem	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   sem_t       m_sem;$/;"	m	class:boost::interprocess::detail::semaphore_wrapper	access:private
m_semid	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   int            m_semid;$/;"	m	class:boost::interprocess::xsi_named_mutex	access:private
m_shm	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory m_shm;$/;"	m	class:boost::interprocess::xsi_shared_memory_device	access:private
m_shmem	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   detail::managed_open_or_create_impl<shared_memory_object> m_shmem;$/;"	m	class:boost::interprocess::message_queue	access:private
m_shmem	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   detail::managed_open_or_create_impl<shared_memory_object> m_shmem;$/;"	m	class:boost::interprocess::named_condition	access:private
m_shmem	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   detail::managed_open_or_create_impl<shared_memory_object> m_shmem;$/;"	m	class:boost::interprocess::named_mutex	access:private
m_shmem	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   detail::managed_open_or_create_impl<shared_memory_object> m_shmem;$/;"	m	class:boost::interprocess::named_recursive_mutex	access:private
m_shmem	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   detail::managed_open_or_create_impl<shared_memory_object> m_shmem;$/;"	m	class:boost::interprocess::named_semaphore	access:private
m_shmem	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   detail::managed_open_or_create_impl<shared_memory_object> m_shmem;$/;"	m	class:boost::interprocess::named_upgradable_mutex	access:private
m_shmem_list	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   shmem_list_t   m_shmem_list;$/;"	m	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
m_shmid	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   int            m_shmid;$/;"	m	class:boost::interprocess::xsi_shared_memory	access:private
m_size	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      size_type   m_size;$/;"	m	struct:boost::container::containers_detail::vector_alloc_holder::members_holder	access:public
m_size	/usr/include/boost/interprocess/mapped_region.hpp	/^   std::size_t       m_size;$/;"	m	class:boost::interprocess::mapped_region	access:private
m_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      std::size_t       m_size;$/;"	m	struct:boost::interprocess::detail::simple_seq_fit_impl::header_t	access:public
m_size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      std::size_t    m_size;$/;"	m	struct:boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	access:public
m_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      std::size_t       m_size;$/;"	m	struct:boost::interprocess::detail::simple_seq_fit_impl::header_t	access:public
m_size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      std::size_t    m_size;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl::block_ctrl	access:public
m_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      std::size_t       m_size;$/;"	m	struct:boost::interprocess::rbtree_best_fit::header_t	access:public
m_size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      std::size_t m_size      :  sizeof(std::size_t)*CHAR_BIT - 2;$/;"	m	struct:boost::interprocess::rbtree_best_fit::SizeHolder	access:public
m_start	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator        m_start;$/;"	m	struct:boost::container::deque_base::members_holder	access:public
m_start	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      pointer     m_start;$/;"	m	struct:boost::container::containers_detail::vector_alloc_holder::members_holder	access:public
m_str	/usr/include/boost/interprocess/exceptions.hpp	/^   std::string       m_str;$/;"	m	class:boost::interprocess::interprocess_exception	access:private
m_t	/usr/include/boost/interprocess/containers/container/detail/value_init.hpp	/^   T m_t;$/;"	m	struct:boost::container::containers_detail::value_init	access:public
m_threshold	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^      unsigned int m_threshold;$/;"	m	class:boost::interprocess::barrier	access:private
m_totally_free_blocks	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   std::size_t                            m_totally_free_blocks;  \/\/Free blocks$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
m_tree	/usr/include/boost/interprocess/containers/container/map.hpp	/^   tree_t m_tree;  \/\/ red-black tree representing map$/;"	m	class:boost::container::map	access:private
m_tree	/usr/include/boost/interprocess/containers/container/map.hpp	/^   tree_t m_tree;  \/\/ red-black tree representing map$/;"	m	class:boost::container::multimap	access:private
m_tree	/usr/include/boost/interprocess/containers/container/set.hpp	/^   tree_t m_tree;  \/\/ red-black tree representing multiset$/;"	m	class:boost::container::multiset	access:private
m_tree	/usr/include/boost/interprocess/containers/container/set.hpp	/^   tree_t m_tree;  \/\/ red-black tree representing set$/;"	m	class:boost::container::set	access:private
m_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   detail::create_enum_t           m_type;$/;"	m	class:boost::interprocess::detail::create_open_func	access:private
m_type	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      type_t            m_type;$/;"	m	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public
m_unique_index	/usr/include/boost/interprocess/segment_manager.hpp	/^      unique_index_t          m_unique_index;$/;"	m	struct:boost::interprocess::segment_manager::header_t	access:public
m_usecount	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      std::size_t m_usecount;    \/\/Number of attached allocators$/;"	m	struct:boost::interprocess::detail::shared_pool_impl::header_t	access:public
m_val	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const typename Iterator::value_type *m_val;$/;"	m	class:boost::interprocess::detail::segment_manager_iterator_value_adaptor	access:public
m_value	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   mutable PseudoReference m_value;$/;"	m	struct:boost::container::operator_arrow_proxy	access:public
m_value	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   mutable T &m_value;$/;"	m	struct:boost::container::operator_arrow_proxy	access:public
m_value	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   mutable PseudoReference m_value;$/;"	m	struct:boost::interprocess::operator_arrow_proxy	access:public
m_value	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   mutable T &m_value;$/;"	m	struct:boost::interprocess::operator_arrow_proxy	access:public
m_value_alignment	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   unsigned char  m_value_alignment;$/;"	m	struct:boost::interprocess::detail::block_header	access:public
m_value_bytes	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t    m_value_bytes;$/;"	m	struct:boost::interprocess::detail::block_header	access:public
m_vect	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      vector_t m_vect;$/;"	m	struct:boost::container::containers_detail::flat_tree::Data	access:public
m_vect	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   mutable vector_type     m_vect;$/;"	m	class:boost::interprocess::basic_vectorbuf	access:private
m_wshm	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   detail::managed_open_or_create_impl<windows_shared_memory, false> m_wshm;$/;"	m	class:boost::interprocess::basic_managed_windows_shared_memory	access:private
name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   CharType *name() const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:() const
name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   CharType *name() const$/;"	f	struct:boost::interprocess::detail::intrusive_value_type_impl	access:public	signature:() const
name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const CharT *name() const$/;"	f	struct:boost::interprocess::detail::index_key	access:public	signature:() const
name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const char_type *name() const$/;"	f	class:boost::interprocess::detail::segment_manager_iterator_value_adaptor	access:public	signature:() const
name	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void name(const CharT *name)$/;"	f	struct:boost::interprocess::detail::index_key	access:public	signature:(const CharT *name)
name	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_name_information_t name;$/;"	m	union:boost::interprocess::winapi::ntquery_mem_t	access:public
Name	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unicode_string_t Name;$/;"	m	struct:boost::interprocess::winapi::object_name_information_t	access:public
NameBuffer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   wchar_t NameBuffer[1];$/;"	m	struct:boost::interprocess::winapi::object_name_information_t	access:public
named_begin	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   const_named_iterator named_begin() const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:() const
named_begin	/usr/include/boost/interprocess/segment_manager.hpp	/^   const_named_iterator named_begin() const$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:() const
named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition();$/;"	p	class:boost::interprocess::named_condition	access:private	signature:()
named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition(const named_condition &);$/;"	p	class:boost::interprocess::named_condition	access:private	signature:(const named_condition &)
named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition(create_only_t create_only, const char *name);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(create_only_t create_only, const char *name)
named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(open_only_t open_only, const char *name)
named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition(open_or_create_t open_or_create, const char *name);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(open_or_create_t open_or_create, const char *name)
named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^class named_condition$/;"	c	namespace:boost::interprocess
named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline named_condition::named_condition(create_only_t, const char *name)$/;"	f	class:boost::interprocess::named_condition	signature:(create_only_t, const char *name)
named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline named_condition::named_condition(open_only_t, const char *name)$/;"	f	class:boost::interprocess::named_condition	signature:(open_only_t, const char *name)
named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline named_condition::named_condition(open_or_create_t, const char *name)$/;"	f	class:boost::interprocess::named_condition	signature:(open_or_create_t, const char *name)
named_creation_functor	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^   named_creation_functor(detail::create_enum_t type, Arg arg = Arg())$/;"	f	class:boost::interprocess::detail::named_creation_functor	access:public	signature:(detail::create_enum_t type, Arg arg = Arg())
named_creation_functor	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^class named_creation_functor$/;"	c	namespace:boost::interprocess::detail
named_creation_functor_no_arg	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^struct named_creation_functor_no_arg{};$/;"	s	namespace:boost::interprocess::detail
named_end	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   const_named_iterator named_end() const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:() const
named_end	/usr/include/boost/interprocess/segment_manager.hpp	/^   const_named_iterator named_end() const$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:() const
named_index_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef IndexType<index_config_named>                    named_index_t;$/;"	t	class:boost::interprocess::segment_manager	access:public
named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex();$/;"	p	class:boost::interprocess::named_mutex	access:private	signature:()
named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex(const named_mutex &);$/;"	p	class:boost::interprocess::named_mutex	access:private	signature:(const named_mutex &)
named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex(create_only_t create_only, const char *name);$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:(create_only_t create_only, const char *name)
named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:(open_only_t open_only, const char *name)
named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex(open_or_create_t open_or_create, const char *name);$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name)
named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^class named_mutex$/;"	c	namespace:boost::interprocess
named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline named_mutex::named_mutex(create_only_t, const char *name)$/;"	f	class:boost::interprocess::named_mutex	signature:(create_only_t, const char *name)
named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline named_mutex::named_mutex(open_only_t, const char *name)$/;"	f	class:boost::interprocess::named_mutex	signature:(open_only_t, const char *name)
named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline named_mutex::named_mutex(open_or_create_t, const char *name)$/;"	f	class:boost::interprocess::named_mutex	signature:(open_or_create_t, const char *name)
named_proxy	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   named_proxy(SegmentManager *mngr, const char_type *name, bool find, bool dothrow)$/;"	f	class:boost::interprocess::detail::named_proxy	access:public	signature:(SegmentManager *mngr, const char_type *name, bool find, bool dothrow)
named_proxy	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^class named_proxy$/;"	c	namespace:boost::interprocess::detail
named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:private	signature:()
named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex(const named_recursive_mutex &);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:private	signature:(const named_recursive_mutex &)
named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex(create_only_t create_only, const char *name);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:(create_only_t create_only, const char *name)
named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:(open_only_t open_only, const char *name)
named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex(open_or_create_t open_or_create, const char *name);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name)
named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^class named_recursive_mutex$/;"	c	namespace:boost::interprocess
named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline named_recursive_mutex::named_recursive_mutex(create_only_t, const char *name)$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:(create_only_t, const char *name)
named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline named_recursive_mutex::named_recursive_mutex(open_only_t, const char *name)$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:(open_only_t, const char *name)
named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline named_recursive_mutex::named_recursive_mutex(open_or_create_t, const char *name)$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:(open_or_create_t, const char *name)
named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore();$/;"	p	class:boost::interprocess::named_semaphore	access:private	signature:()
named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore(const named_semaphore &);$/;"	p	class:boost::interprocess::named_semaphore	access:private	signature:(const named_semaphore &)
named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore(create_only_t, const char *name, unsigned int initialCount);$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:(create_only_t, const char *name, unsigned int initialCount)
named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore(open_only_t, const char *name);$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:(open_only_t, const char *name)
named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore(open_or_create_t, const char *name, unsigned int initialCount);$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:(open_or_create_t, const char *name, unsigned int initialCount)
named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^class named_semaphore$/;"	c	namespace:boost::interprocess
named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline named_semaphore::named_semaphore$/;"	f	class:boost::interprocess::named_semaphore	signature:(create_only_t, const char *name, unsigned int initialCount)
named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline named_semaphore::named_semaphore$/;"	f	class:boost::interprocess::named_semaphore	signature:(open_only_t, const char *name)
named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline named_semaphore::named_semaphore$/;"	f	class:boost::interprocess::named_semaphore	signature:(open_or_create_t, const char *name, unsigned int initialCount)
named_semaphore_wrapper	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   named_semaphore_wrapper$/;"	f	class:boost::interprocess::detail::named_semaphore_wrapper	access:public	signature:(detail::create_enum_t type, const char *name, mode_t mode, unsigned int count)
named_semaphore_wrapper	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   named_semaphore_wrapper();$/;"	p	class:boost::interprocess::detail::named_semaphore_wrapper	access:private	signature:()
named_semaphore_wrapper	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   named_semaphore_wrapper(const named_semaphore_wrapper&);$/;"	p	class:boost::interprocess::detail::named_semaphore_wrapper	access:private	signature:(const named_semaphore_wrapper&)
named_semaphore_wrapper	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^class named_semaphore_wrapper$/;"	c	namespace:boost::interprocess::detail
named_transform	/usr/include/boost/interprocess/segment_manager.hpp	/^      ,is_intrusive_index<index_type>::value>   named_transform;$/;"	t	class:boost::interprocess::segment_manager	access:public
named_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^enum instance_type {   anonymous_type, named_type, unique_type, max_allocation_type };$/;"	e	enum:boost::interprocess::instance_type
named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:()
named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(const named_upgradable_mutex &);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:(const named_upgradable_mutex &)
named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(create_only_t create_only, const char *name);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(create_only_t create_only, const char *name)
named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(open_only_t open_only, const char *name);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(open_only_t open_only, const char *name)
named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex(open_or_create_t open_or_create, const char *name);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(open_or_create_t open_or_create, const char *name)
named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^class named_upgradable_mutex$/;"	c	namespace:boost::interprocess
named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::named_upgradable_mutex$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(create_only_t, const char *name)
named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::named_upgradable_mutex$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(open_only_t, const char *name)
named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::named_upgradable_mutex$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(open_or_create_t, const char *name)
names	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      } names[info_constants_t<0>::NumID];$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_t	typeref:struct:boost::interprocess::xsi_shared_memory_device::info_t::names_t	access:public
names_t	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      struct names_t$/;"	s	struct:boost::interprocess::xsi_shared_memory_device::info_t	access:public
name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t name_length() const$/;"	f	class:boost::interprocess::detail::segment_manager_iterator_value_adaptor	access:public	signature:() const
name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t name_length() const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:() const
name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t name_length() const$/;"	f	struct:boost::interprocess::detail::index_key	access:public	signature:() const
name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t name_length() const$/;"	f	struct:boost::interprocess::detail::intrusive_value_type_impl	access:public	signature:() const
name_length	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void name_length(std::size_t len)$/;"	f	struct:boost::interprocess::detail::index_key	access:public	signature:(std::size_t len)
name_offset	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t name_offset() const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:() const
nat	/usr/include/boost/interprocess/containers/container/detail/type_traits.hpp	/^struct nat{};$/;"	s	namespace:boost::container::containers_detail
nat	/usr/include/boost/interprocess/detail/type_traits.hpp	/^struct nat{};$/;"	s	namespace:boost::interprocess::detail
nat	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   struct nat {int for_bool_;};$/;"	s	class:boost::interprocess::unique_ptr	access:private
native_error_t	/usr/include/boost/interprocess/errors.hpp	/^typedef int    native_error_t;$/;"	t	namespace:boost::interprocess
new_node	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void_ptr new_node(void_ptr up, Iter it)$/;"	f	class:boost::container::stable_vector	access:private	signature:(void_ptr up, Iter it)
new_segment_group	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static segment_group_id new_segment_group(multi_segment_services *services)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(multi_segment_services *services)
Next	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typedef get_impl<I-1, tuple<Values...> >                       Next;$/;"	t	class:boost::container::containers_detail::get_impl	access:private
Next	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef get_impl<I-1, tuple<Values...> >                       Next;$/;"	t	class:boost::interprocess::detail::get_impl	access:private
next_capacity	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type next_capacity(size_type additional_objects) const$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(size_type additional_objects) const
next_capacity	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   size_type next_capacity(size_type additional_objects) const$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:public	signature:(size_type additional_objects) const
nFileSizeHigh	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long nFileSizeHigh;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
nFileSizeLow	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long nFileSizeLow;$/;"	m	struct:boost::interprocess::winapi::win32_find_data_t	access:public
nLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long nLength;$/;"	m	struct:boost::interprocess::winapi::interprocess_security_attributes	access:public
node	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^                        > node;$/;"	t	class:boost::container::containers_detail::basic_multiallocation_chain	access:private
Node	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename ICont::value_type                 Node;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
Node	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename AllocHolder::Node                 Node;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
Node	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename AllocHolder::Node                 Node;$/;"	t	class:boost::container::list	access:private
Node	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename AllocHolder::Node                 Node;$/;"	t	class:boost::container::slist	access:private
NodeAlloc	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename A::template rebind<Node>::other   NodeAlloc;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
NodeAlloc	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename AllocHolder::NodeAlloc            NodeAlloc;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
NodeAlloc	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename AllocHolder::NodeAlloc            NodeAlloc;$/;"	t	class:boost::container::list	access:private
NodeAlloc	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename AllocHolder::NodeAlloc            NodeAlloc;$/;"	t	class:boost::container::slist	access:private
NodePtr	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename NodeAlloc::pointer                NodePtr;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
NodePtr	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename AllocHolder::NodePtr              NodePtr;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
NodePtr	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename AllocHolder::NodePtr              NodePtr;$/;"	t	class:boost::container::list	access:private
NodePtr	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename AllocHolder::NodePtr              NodePtr;$/;"	t	class:boost::container::slist	access:private
nodes_per_block	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   static const std::size_t nodes_per_block = NodesPerBlock;$/;"	m	class:boost::interprocess::detail::private_adaptive_node_pool	access:public
nodes_per_block	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   static const std::size_t nodes_per_block = NodesPerBlock;$/;"	m	class:boost::interprocess::detail::private_node_pool	access:public
nodes_per_chunk	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   static const std::size_t nodes_per_chunk = NodesPerBlock;$/;"	m	class:boost::interprocess::detail::private_adaptive_node_pool	access:public
nodes_per_chunk	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   static const std::size_t nodes_per_chunk = NodesPerBlock;$/;"	m	class:boost::interprocess::detail::private_node_pool	access:public
node_alloc	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   const NodeAlloc &node_alloc() const$/;"	f	namespace:boost::container::containers_detail	access:protected	signature:() const
node_alloc	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   NodeAlloc &node_alloc()$/;"	f	namespace:boost::container::containers_detail	access:protected	signature:()
node_allocator	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator$/;"	f	class:boost::interprocess::node_allocator	access:public	signature:(const node_allocator<T2, SegmentManager, NodesPerBlock> &other)
node_allocator	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator(SegmentManager *segment_mngr) $/;"	f	class:boost::interprocess::node_allocator	access:public	signature:(SegmentManager *segment_mngr)
node_allocator	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^class node_allocator$/;"	c	namespace:boost::interprocess	inherits:detail::node_allocator_base
node_allocator_base	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_base$/;"	f	class:boost::interprocess::detail::node_allocator_base	access:public	signature:(const node_allocator_base<Version, T2, SegmentManager, NodesPerBlock> &other)
node_allocator_base	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_base(const node_allocator_base &other) $/;"	f	class:boost::interprocess::detail::node_allocator_base	access:public	signature:(const node_allocator_base &other)
node_allocator_base	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_base(segment_manager *segment_mngr) $/;"	f	class:boost::interprocess::detail::node_allocator_base	access:public	signature:(segment_manager *segment_mngr)
node_allocator_base	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^class node_allocator_base$/;"	c	namespace:boost::interprocess::detail	inherits:node_pool_allocation_impl
node_allocator_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      template rebind<node_type_t>::other             node_allocator_type;$/;"	t	class:boost::container::stable_vector	access:private
node_allocator_v1	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_v1$/;"	f	class:boost::interprocess::detail::node_allocator_v1	access:public	signature:(const node_allocator_v1<T2, SegmentManager, NodesPerBlock> &other)
node_allocator_v1	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_v1(SegmentManager *segment_mngr) $/;"	f	class:boost::interprocess::detail::node_allocator_v1	access:public	signature:(SegmentManager *segment_mngr)
node_allocator_v1	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^class node_allocator_v1$/;"	c	namespace:boost::interprocess::detail	inherits:node_allocator_base
node_alloc_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   node_alloc_holder(const node_alloc_holder &other)$/;"	f	struct:boost::container::containers_detail::node_alloc_holder	access:public	signature:(const node_alloc_holder &other)
node_alloc_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   node_alloc_holder(const node_alloc_holder &other, const Pred &c)$/;"	f	namespace:boost::container::containers_detail	signature:(const node_alloc_holder &other, const Pred &c)
node_alloc_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   node_alloc_holder(const ValAlloc &a) $/;"	f	struct:boost::container::containers_detail::node_alloc_holder	access:public	signature:(const ValAlloc &a)
node_alloc_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   node_alloc_holder(const ValAlloc &a, const Pred &c) $/;"	f	namespace:boost::container::containers_detail	signature:(const ValAlloc &a, const Pred &c)
node_alloc_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^struct node_alloc_holder$/;"	s	namespace:boost::container::containers_detail
node_base_ptr_cast	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   static node_type_base_ptr_t node_base_ptr_cast(void_ptr p)$/;"	f	class:boost::container::stable_vector	access:private	signature:(void_ptr p)
node_compare	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   node_compare(const ValueCompare &pred)$/;"	f	struct:boost::container::containers_detail::node_compare	access:public	signature:(const ValueCompare &pred)
node_compare	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^struct node_compare$/;"	s	namespace:boost::container::containers_detail	inherits:ValueCompare
node_compare_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef node_compare<ValueCompare, node_type>   node_compare_type;$/;"	t	struct:boost::container::containers_detail::intrusive_rbtree_type	access:public
node_pool	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   struct node_pool$/;"	s	class:boost::interprocess::detail::adaptive_pool_base	access:public
node_pool	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   struct node_pool$/;"	s	class:boost::interprocess::detail::node_pool_allocation_impl	access:public
node_pool	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   struct node_pool$/;"	s	class:boost::interprocess::detail::node_allocator_base	access:public
node_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   struct node_pool$/;"	s	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
node_pool	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   struct node_pool$/;"	s	class:boost::interprocess::detail::private_node_allocator_base	access:public
node_pool_allocation_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^class node_pool_allocation_impl$/;"	c	namespace:boost::interprocess::detail	inherits:array_allocation_impl
node_pool_ptr	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      <void_pointer, NodePool>::type                        node_pool_ptr;$/;"	t	class:boost::interprocess::detail::cache_impl	access:private
node_pool_t	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef NodePool                                      node_pool_t;$/;"	t	class:boost::interprocess::detail::cached_allocator_impl	access:public
node_pool_t	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      > node_pool_t;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:private
node_pool_t	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      > node_pool_t;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:private
node_ptr_cast	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   static node_type_ptr_t node_ptr_cast(void_ptr p)$/;"	f	class:boost::container::stable_vector	access:private	signature:(void_ptr p)
node_ptr_cast	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   static node_type_ptr_t node_ptr_cast(void_ptr p)$/;"	f	class:boost::container::stable_vector_detail::iterator	access:private	signature:(void_ptr p)
node_slist	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^struct node_slist$/;"	s	namespace:boost::interprocess::detail
node_slist	/usr/include/boost/interprocess/containers/container/detail/pool_common.hpp	/^struct node_slist$/;"	s	namespace:boost::container::containers_detail
node_slist_t	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^      <node_t, bi::linear<true>, bi::base_hook<slist_hook_t> >::type node_slist_t;$/;"	t	struct:boost::interprocess::detail::node_slist	access:public
node_slist_t	/usr/include/boost/interprocess/containers/container/detail/pool_common.hpp	/^      <node_t, bi::linear<true>, bi::base_hook<slist_hook_t> >::type node_slist_t;$/;"	t	struct:boost::container::containers_detail::node_slist	access:public
node_t	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^   struct node_t$/;"	s	struct:boost::interprocess::detail::node_slist	inherits:slist_hook_t	access:public
node_t	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef typename node_slist<void_pointer>::node_t node_t;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public
node_t	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   typedef typename node_slist<void_pointer>::node_t              node_t;$/;"	t	class:boost::container::containers_detail::private_node_pool_impl	access:public
node_t	/usr/include/boost/interprocess/containers/container/detail/pool_common.hpp	/^   typedef slist_hook_t node_t;$/;"	t	struct:boost::container::containers_detail::node_slist	access:public
node_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^         <value_type, void_pointer>                node_type;$/;"	t	struct:boost::container::containers_detail::intrusive_rbtree_type	access:public
node_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef rbtree_node<T, VoidPointer> node_type;$/;"	t	struct:boost::container::containers_detail::rbtree_node	access:public
node_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^         <value_type, void_pointer>             node_type;$/;"	t	struct:boost::container::containers_detail::intrusive_list_type	access:public
node_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^         <value_type, void_pointer>             node_type;$/;"	t	struct:boost::container::containers_detail::intrusive_slist_type	access:public
node_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   node_type()$/;"	f	struct:boost::container::stable_vector_detail::node_type	access:public	signature:()
node_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   node_type(Args &&...args)$/;"	f	struct:boost::container::stable_vector_detail::node_type	access:public	signature:(Args &&....args)
node_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^struct node_type$/;"	s	namespace:boost::container::stable_vector_detail	inherits:node_type_base
node_type_base	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   node_type_base()$/;"	f	struct:boost::container::stable_vector_detail::node_type_base	access:public	signature:()
node_type_base	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^struct node_type_base$/;"	s	namespace:boost::container::stable_vector_detail
node_type_base_ptr_t	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      rebind<node_type_base_t>::other::pointer        node_type_base_ptr_t;$/;"	t	class:boost::container::stable_vector	access:private
node_type_base_t	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      <void_ptr>                                      node_type_base_t;$/;"	t	class:boost::container::stable_vector	access:private
node_type_ptr_t	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      <void_ptr, node_type_t>::type          node_type_ptr_t;$/;"	t	class:boost::container::stable_vector_detail::iterator	access:private
node_type_ptr_t	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      rebind<node_type_t>::other::pointer             node_type_ptr_t;$/;"	t	class:boost::container::stable_vector	access:private
node_type_t	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      <void_ptr, T>                                   node_type_t;$/;"	t	class:boost::container::stable_vector	access:private
node_type_t	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef node_type<void_ptr, T>            node_type_t;$/;"	t	class:boost::container::stable_vector_detail::iterator	access:private
nonconst_impl_value_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^      <key_type, mapped_type>                      nonconst_impl_value_type;$/;"	t	class:boost::container::map	access:public
nonconst_impl_value_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^      <key_type, mapped_type>                      nonconst_impl_value_type;$/;"	t	class:boost::container::multimap	access:public
nonconst_value_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef std::pair<key_type, mapped_type>        nonconst_value_type;$/;"	t	class:boost::container::map	access:public
nonconst_value_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef std::pair<key_type, mapped_type>        nonconst_value_type;$/;"	t	class:boost::container::multimap	access:public
non_blocking	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   enum block_t   {  blocking,   timed,   non_blocking   };$/;"	e	enum:boost::interprocess::message_queue::block_t
non_const_icont	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   ICont &non_const_icont() const$/;"	f	namespace:boost::container::containers_detail	access:protected	signature:() const
nothrow_allocation	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type nothrow_allocation = boost::container::nothrow_allocation;$/;"	m	namespace:boost::interprocess
nothrow_allocation	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^static const allocation_type nothrow_allocation = (allocation_type)nothrow_allocation_v;$/;"	m	namespace:boost::container
nothrow_allocation_v	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^   nothrow_allocation_v = 0x10,$/;"	e	enum:boost::container::allocation_type_v
nothrow_assign	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   static const bool nothrow_assign = has_nothrow_assign<value_type>::value;$/;"	m	struct:boost::container::deque_value_traits	access:public
nothrow_assign	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   static const bool nothrow_assign = has_nothrow_assign<value_type>::value;$/;"	m	struct:boost::container::containers_detail::vector_value_traits	access:public
nothrow_copy	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   static const bool nothrow_copy = has_nothrow_copy<value_type>::value;$/;"	m	struct:boost::container::deque_value_traits	access:public
nothrow_copy	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   static const bool nothrow_copy = has_nothrow_copy<value_type>::value;$/;"	m	struct:boost::container::containers_detail::vector_value_traits	access:public
notify	/usr/include/boost/interprocess/sync/emulation/interprocess_condition.hpp	/^inline void interprocess_condition::notify(boost::uint32_t command)$/;"	f	class:boost::interprocess::interprocess_condition	signature:(boost::uint32_t command)
notify	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      void notify(boost::uint32_t command);$/;"	p	class:boost::interprocess::interprocess_condition	access:private	signature:(boost::uint32_t command)
notify_all	/usr/include/boost/interprocess/sync/emulation/interprocess_condition.hpp	/^inline void interprocess_condition::notify_all()$/;"	f	class:boost::interprocess::interprocess_condition	signature:()
NOTIFY_ALL	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      enum { SLEEP = 0, NOTIFY_ONE, NOTIFY_ALL };$/;"	e	enum:boost::interprocess::interprocess_condition::__anon33
notify_all	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   void notify_all();$/;"	p	class:boost::interprocess::interprocess_condition	access:public	signature:()
notify_all	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void notify_all();$/;"	p	class:boost::interprocess::named_condition	access:public	signature:()
notify_all	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline void named_condition::notify_all()$/;"	f	class:boost::interprocess::named_condition	signature:()
notify_all	/usr/include/boost/interprocess/sync/posix/interprocess_condition.hpp	/^inline void interprocess_condition::notify_all()$/;"	f	class:boost::interprocess::interprocess_condition	signature:()
notify_one	/usr/include/boost/interprocess/sync/emulation/interprocess_condition.hpp	/^inline void interprocess_condition::notify_one()$/;"	f	class:boost::interprocess::interprocess_condition	signature:()
NOTIFY_ONE	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      enum { SLEEP = 0, NOTIFY_ONE, NOTIFY_ALL };$/;"	e	enum:boost::interprocess::interprocess_condition::__anon33
notify_one	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   void notify_one();$/;"	p	class:boost::interprocess::interprocess_condition	access:public	signature:()
notify_one	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void notify_one();$/;"	p	class:boost::interprocess::named_condition	access:public	signature:()
notify_one	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline void named_condition::notify_one()$/;"	f	class:boost::interprocess::named_condition	signature:()
notify_one	/usr/include/boost/interprocess/sync/posix/interprocess_condition.hpp	/^inline void interprocess_condition::notify_one()$/;"	f	class:boost::interprocess::interprocess_condition	signature:()
not_empty_error	/usr/include/boost/interprocess/errors.hpp	/^   not_empty_error,$/;"	e	enum:boost::interprocess::error_code_t
not_found_error	/usr/include/boost/interprocess/errors.hpp	/^   not_found_error,$/;"	e	enum:boost::interprocess::error_code_t
not_such_file_or_directory	/usr/include/boost/interprocess/errors.hpp	/^   not_such_file_or_directory,$/;"	e	enum:boost::interprocess::error_code_t
Not_within_traits	/usr/include/boost/interprocess/containers/container/string.hpp	/^      Not_within_traits(Pointer f, Pointer l) $/;"	f	struct:boost::container::basic_string::Not_within_traits	access:public	signature:(Pointer f, Pointer l)
Not_within_traits	/usr/include/boost/interprocess/containers/container/string.hpp	/^   struct Not_within_traits$/;"	s	class:boost::container::basic_string	inherits:std::unary_function	access:protected
no_arg_t	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^   typedef named_creation_functor_no_arg no_arg_t;$/;"	t	class:boost::interprocess::detail::named_creation_functor	access:private
no_error	/usr/include/boost/interprocess/errors.hpp	/^   no_error = 0,$/;"	e	enum:boost::interprocess::error_code_t
no_type	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct no_type$/;"	s	namespace:boost::container::containers_detail
no_type	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct no_type$/;"	s	namespace:boost::interprocess::detail
npos	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static const size_type npos;$/;"	m	class:boost::container::basic_string	access:public
npos	/usr/include/boost/interprocess/containers/container/string.hpp	/^basic_string<CharT,Traits,A>::npos $/;"	m	class:boost::container::basic_string
NtClose_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtClose_t) (void*);$/;"	t	namespace:boost::interprocess::winapi
NtDeleteFile_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtDeleteFile_t)(object_attributes_t *ObjectAttributes); $/;"	t	namespace:boost::interprocess::winapi
NtOpenFile_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtOpenFile_t)(void*,unsigned long ,object_attributes_t*,io_status_block_t*,unsigned long,unsigned long);$/;"	t	namespace:boost::interprocess::winapi
NtQueryInformationFile_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtQueryInformationFile_t)(void *,io_status_block_t *,void *, long, int);$/;"	t	namespace:boost::interprocess::winapi
NtQueryObject_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall * NtQueryObject_t)(void*, object_information_class, void *, unsigned long, unsigned long *); $/;"	t	namespace:boost::interprocess::winapi
NtQuerySystemInformation_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall * NtQuerySystemInformation_t)(int, void*, unsigned long, unsigned long *); $/;"	t	namespace:boost::interprocess::winapi
ntquery_mem_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^union ntquery_mem_t$/;"	u	namespace:boost::interprocess::winapi
NtSetInformationFile_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *NtSetInformationFile_t)(void *FileHandle, io_status_block_t *IoStatusBlock, void *FileInformation, unsigned long Length, int FileInformationClass ); $/;"	t	namespace:boost::interprocess::winapi
null_index	/usr/include/boost/interprocess/indexes/null_index.hpp	/^   null_index(segment_manager_base *){}$/;"	f	class:boost::interprocess::null_index	access:public	signature:(segment_manager_base *)
null_index	/usr/include/boost/interprocess/indexes/null_index.hpp	/^class null_index$/;"	c	namespace:boost::interprocess
null_mapped_region_function	/usr/include/boost/interprocess/mapped_region.hpp	/^struct null_mapped_region_function$/;"	s	namespace:boost::interprocess
null_mutex	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   null_mutex(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
null_mutex	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   null_mutex(const null_mutex&);$/;"	p	class:boost::interprocess::null_mutex	access:private	signature:(const null_mutex&)
null_mutex	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^class null_mutex$/;"	c	namespace:boost::interprocess
null_mutex_family	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^struct null_mutex_family$/;"	s	namespace:boost::interprocess
null_scoped_array_deallocator	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   null_scoped_array_deallocator(pointer, Allocator&, size_type)$/;"	f	struct:boost::container::containers_detail::null_scoped_array_deallocator	access:public	signature:(pointer, Allocator&, size_type)
null_scoped_array_deallocator	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^struct null_scoped_array_deallocator$/;"	s	namespace:boost::container::containers_detail
null_scoped_destructor_n	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   null_scoped_destructor_n(pointer, size_type)$/;"	f	struct:boost::container::containers_detail::null_scoped_destructor_n	access:public	signature:(pointer, size_type)
null_scoped_destructor_n	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^struct null_scoped_destructor_n$/;"	s	namespace:boost::container::containers_detail
NumID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^      static const std::size_t NumID   = LastID - FirstID;$/;"	m	struct:boost::interprocess::xsi_shared_memory_device::info_constants_t	access:public
NumID	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^const std::size_t xsi_shared_memory_device::info_constants_t<Dummy>::NumID;$/;"	m	class:boost::interprocess::xsi_shared_memory_device::info_constants_t
num_alloc	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   unsigned int num_alloc;$/;"	m	class:boost::container::vector	access:public
num_expand_bwd	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   unsigned int num_expand_bwd;$/;"	m	class:boost::container::vector	access:public
num_expand_fwd	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   unsigned int num_expand_fwd;$/;"	m	class:boost::container::vector	access:public
num_free_nodes	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   std::size_t num_free_nodes()$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:()
num_free_nodes	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   std::size_t num_free_nodes()$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:()
num_shrink	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   unsigned int num_shrink;$/;"	m	class:boost::container::vector	access:public
num_upr_shar	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      unsigned num_upr_shar         : sizeof(unsigned)*CHAR_BIT-2;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::control_word_t	access:public
o	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   scoped_deallocator(BOOST_INTERPROCESS_RV_REF(scoped_deallocator) o)$/;"	m	struct:boost::container::containers_detail::scoped_deallocator	access:public
ObjectName	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unicode_string_t *ObjectName;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
object_all_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_all_information,$/;"	e	enum:boost::interprocess::winapi::object_information_class
object_attributes_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct object_attributes_t {$/;"	s	namespace:boost::interprocess::winapi
object_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_basic_information,$/;"	e	enum:boost::interprocess::winapi::object_information_class
object_data_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_data_information$/;"	e	enum:boost::interprocess::winapi::object_information_class
object_information_class	/usr/include/boost/interprocess/detail/win32_api.hpp	/^enum object_information_class$/;"	g	namespace:boost::interprocess::winapi
object_name_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_name_information,$/;"	e	enum:boost::interprocess::winapi::object_information_class
object_name_information_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct object_name_information_t$/;"	s	namespace:boost::interprocess::winapi
object_type_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   object_type_information,$/;"	e	enum:boost::interprocess::winapi::object_information_class
obj_case_insensitive	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long obj_case_insensitive = 0x00000040L;$/;"	m	namespace:boost::interprocess::winapi
obufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_obufferstream<char>    obufferstream;$/;"	t	namespace:boost::interprocess
off	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::ptrdiff_t off   :  sizeof(ptrdiff_t)*CHAR_BIT - 2;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
off	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t off      :  sizeof(std::size_t)*CHAR_BIT - 2;$/;"	m	struct:boost::interprocess::intersegment_base::segmented_addressing	access:public
offset	/usr/include/boost/interprocess/detail/win32_api.hpp	/^         unsigned long offset;$/;"	m	struct:boost::interprocess::winapi::interprocess_overlapped::__anon16::__anon17	access:public
offset_high	/usr/include/boost/interprocess/detail/win32_api.hpp	/^         unsigned long offset_high;$/;"	m	struct:boost::interprocess::winapi::interprocess_overlapped::__anon16::__anon17	access:public
offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr& ptr) $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr& ptr)
offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr<T2> &ptr) $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<T2> &ptr)
offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr<Y> & r, detail::const_cast_tag)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<Y> & r, detail::const_cast_tag)
offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr<Y> & r, detail::dynamic_cast_tag)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<Y> & r, detail::dynamic_cast_tag)
offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr<Y> & r, detail::reinterpret_cast_tag)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<Y> & r, detail::reinterpret_cast_tag)
offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(const offset_ptr<Y> & r, detail::static_cast_tag)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<Y> & r, detail::static_cast_tag)
offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(pointer ptr = 0) {  this->set_offset(ptr); }$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(pointer ptr = 0)
offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr(T *ptr) $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(T *ptr)
offset_ptr	/usr/include/boost/interprocess/offset_ptr.hpp	/^class offset_ptr$/;"	c	namespace:boost::interprocess
offset_t	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^typedef long long          offset_t;$/;"	t	namespace:boost::interprocess
off_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename CharTraits::off_type                 off_type;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
off_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_bufferstream	access:public
off_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:public
off_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_obufferstream	access:public
off_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename CharTraits::off_type     off_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
off_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
off_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
off_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::off_type     off_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
OldArrayDestructor	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      >::type   OldArrayDestructor;$/;"	t	struct:boost::container::containers_detail::vector_value_traits	access:public
OpenFileMappingA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall OpenFileMappingA (unsigned long, int, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long, int, const char *)
OpenMutexA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall OpenMutexA(unsigned long, int, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long, int, const char *)
OpenSemaphoreA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void * __stdcall OpenSemaphoreA(unsigned long, int, const char *);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long, int, const char *)
open_always	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long open_always       = 4;$/;"	m	namespace:boost::interprocess::winapi
open_copy_on_write	/usr/include/boost/interprocess/creation_tags.hpp	/^static const open_copy_on_write_t open_copy_on_write = open_copy_on_write_t();$/;"	m	namespace:boost::interprocess
open_copy_on_write_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct open_copy_on_write_t {};$/;"	s	namespace:boost::interprocess
open_existing	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long open_existing     = 3;$/;"	m	namespace:boost::interprocess::winapi
open_existing_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline file_handle_t open_existing_file$/;"	f	namespace:boost::interprocess::detail	signature:(const char *name, mode_t mode = read_write, bool temporary = false)
open_file_mapping	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void * open_file_mapping (unsigned long access, const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(unsigned long access, const char *name)
open_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool  open_impl     (void *addr, std::size_t)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:(void *addr, std::size_t)
open_mutex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *open_mutex(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
open_only	/usr/include/boost/interprocess/creation_tags.hpp	/^static const open_only_t      open_only      = open_only_t();$/;"	m	namespace:boost::interprocess
open_only_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct open_only_t {};$/;"	s	namespace:boost::interprocess
open_or_create	/usr/include/boost/interprocess/creation_tags.hpp	/^static const open_or_create_t open_or_create = open_or_create_t();$/;"	m	namespace:boost::interprocess
open_or_create_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct open_or_create_t {};$/;"	s	namespace:boost::interprocess
open_read_only	/usr/include/boost/interprocess/creation_tags.hpp	/^static const open_read_only_t open_read_only = open_read_only_t();$/;"	m	namespace:boost::interprocess
open_read_only_t	/usr/include/boost/interprocess/creation_tags.hpp	/^struct open_read_only_t {};$/;"	s	namespace:boost::interprocess
open_semaphore	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void *open_semaphore(const char *name)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *name)
operator !	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool operator! () const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:() const
operator !	/usr/include/boost/interprocess/offset_ptr.hpp	/^   bool operator! () const$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
operator !	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   bool operator! () const$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:() const
operator !	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   bool operator! () const \/\/ never throws$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:() const
operator !	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   bool operator! () const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
operator !=	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^bool operator!=(const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^bool operator!=(const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc1, $/;"	f	namespace:boost::interprocess::detail	signature:(const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc1, const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/allocator.hpp	/^bool operator!=(const allocator<T, SegmentManager>  &alloc1, $/;"	f	namespace:boost::interprocess	signature:(const allocator<T, SegmentManager> &alloc1, const allocator<T, SegmentManager> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^bool operator!=(const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^bool operator!=(const cached_node_allocator<T, S, NPC> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const cached_node_allocator<T, S, NPC> &alloc1, const cached_node_allocator<T, S, NPC> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^bool operator!=(const cached_allocator_impl<T, N, V> &alloc1, $/;"	f	namespace:boost::interprocess::detail	signature:(const cached_allocator_impl<T, N, V> &alloc1, const cached_allocator_impl<T, N, V> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^bool operator!=(const node_allocator<T, S, NPC> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const node_allocator<T, S, NPC> &alloc1, const node_allocator<T, S, NPC> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^bool operator!=(const node_allocator_base<V, T, S, NPC> &alloc1, $/;"	f	namespace:boost::interprocess::detail	signature:(const node_allocator_base<V, T, S, NPC> &alloc1, const node_allocator_base<V, T, S, NPC> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^bool operator!=(const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^bool operator!=(const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc1, $/;"	f	namespace:boost::interprocess::detail	signature:(const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc1, const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^bool operator!=(const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc1, const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc2)
operator !=	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^bool operator!=(const private_node_allocator_base<V, T, S, NPC> &alloc1, $/;"	f	namespace:boost::interprocess::detail	signature:(const private_node_allocator_base<V, T, S, NPC> &alloc1, const private_node_allocator_base<V, T, S, NPC> &alloc2)
operator !=	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      bool operator!=(const self_t& x) const $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(const self_t& x) const
operator !=	/usr/include/boost/interprocess/containers/container/deque.hpp	/^inline bool operator!=(const deque<T, Alloc>& x,$/;"	f	namespace:boost::container	signature:(const deque<T, Alloc>& x, const deque<T, Alloc>& y)
operator !=	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^operator!=(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& y)
operator !=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator!= (const constant_iterator& i, const constant_iterator& i2)$/;"	f	class:boost::container::constant_iterator	access:friend	signature:(const constant_iterator& i, const constant_iterator& i2)
operator !=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator!= (const default_construct_iterator& i, const default_construct_iterator& i2)$/;"	f	class:boost::container::default_construct_iterator	access:friend	signature:(const default_construct_iterator& i, const default_construct_iterator& i2)
operator !=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator!= (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::emplace_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
operator !=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator!= (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::repeat_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
operator !=	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^inline bool operator!=(const pair<T1,T2>& x, const pair<T1,T2>& y)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(const pair<T1,T2>& x, const pair<T1,T2>& y)
operator !=	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   friend bool operator!= (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::container::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
operator !=	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      bool operator!=   (const const_iterator& r)  const$/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:public	signature:(const const_iterator& r) const
operator !=	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^operator!=(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& y)
operator !=	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator!=(const flat_map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_map<Key,T,Pred,Alloc>& x, const flat_map<Key,T,Pred,Alloc>& y)
operator !=	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator!=(const flat_multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multimap<Key,T,Pred,Alloc>& x, const flat_multimap<Key,T,Pred,Alloc>& y)
operator !=	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator!=(const flat_multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multiset<T,Pred,Alloc>& x, const flat_multiset<T,Pred,Alloc>& y)
operator !=	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator!=(const flat_set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_set<T,Pred,Alloc>& x, const flat_set<T,Pred,Alloc>& y)
operator !=	/usr/include/boost/interprocess/containers/container/list.hpp	/^      bool operator!=   (const const_iterator& r)  const$/;"	f	class:boost::container::list::const_iterator	access:public	signature:(const const_iterator& r) const
operator !=	/usr/include/boost/interprocess/containers/container/list.hpp	/^inline bool operator!=(const list<T,A>& x, const list<T,A>& y) $/;"	f	namespace:boost::container	signature:(const list<T,A>& x, const list<T,A>& y)
operator !=	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator!=(const map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const map<Key,T,Pred,Alloc>& x, const map<Key,T,Pred,Alloc>& y)
operator !=	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator!=(const multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multimap<Key,T,Pred,Alloc>& x, const multimap<Key,T,Pred,Alloc>& y)
operator !=	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator!=(const multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multiset<T,Pred,Alloc>& x, const multiset<T,Pred,Alloc>& y)
operator !=	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator!=(const set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const set<T,Pred,Alloc>& x, const set<T,Pred,Alloc>& y)
operator !=	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      bool operator!=   (const const_iterator& r)  const$/;"	f	class:boost::container::slist::const_iterator	access:public	signature:(const const_iterator& r) const
operator !=	/usr/include/boost/interprocess/containers/container/slist.hpp	/^operator!=(const slist<T,A>& sL1, const slist<T,A>& sL2) $/;"	f	namespace:boost::container	signature:(const slist<T,A>& sL1, const slist<T,A>& sL2)
operator !=	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   bool operator!=   (const iterator& r)  const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(const iterator& r) const
operator !=	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^bool operator!=(const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)$/;"	f	namespace:boost::container	signature:(const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)
operator !=	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator!=(const basic_string<CharT,Traits,A>& x, const CharT* s) $/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const CharT* s)
operator !=	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator!=(const basic_string<CharT,Traits,A>& x,$/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const basic_string<CharT,Traits,A>& y)
operator !=	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator!=(const CharT* s, const basic_string<CharT,Traits,A>& y) $/;"	f	namespace:boost::container	signature:(const CharT* s, const basic_string<CharT,Traits,A>& y)
operator !=	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   bool operator!=   (const vector_const_iterator& r)  const$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(const vector_const_iterator& r) const
operator !=	/usr/include/boost/interprocess/containers/container/vector.hpp	/^operator!=(const vector<T, A>& x, const vector<T, A>& y)$/;"	f	namespace:boost::container	signature:(const vector<T, A>& x, const vector<T, A>& y)
operator !=	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator!= (const intersegment_ptr<T1> &pt1, $/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &pt1, const intersegment_ptr<T2> &pt2)
operator !=	/usr/include/boost/interprocess/detail/move.hpp	/^   friend bool operator!=(const move_iterator& x, const move_iterator& y)$/;"	f	class:boost::interprocess::move_iterator	access:friend	signature:(const move_iterator& x, const move_iterator& y)
operator !=	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend bool operator!= (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
operator !=	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline bool operator!= (const offset_ptr<T1> &pt1, $/;"	f	namespace:boost::interprocess	signature:(const offset_ptr<T1> &pt1, const offset_ptr<T2> &pt2)
operator !=	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator!=(const typename intrusive_ptr<T, VP>::pointer &a,$/;"	f	namespace:boost::interprocess	signature:(const typename intrusive_ptr<T, VP>::pointer &a, intrusive_ptr<T, VP> const & b)
operator !=	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator!=(intrusive_ptr<T, VP> const & a,$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> const & a, const typename intrusive_ptr<T, VP>::pointer &b)
operator !=	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator!=(intrusive_ptr<T, VP> const & a,$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> const & a, intrusive_ptr<U, VP> const & b)
operator !=	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^bool operator!=(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)
operator !=	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator!=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
operator ()	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void operator()()$/;"	f	struct:boost::interprocess::detail::destroy_if_last_link_func	access:public	signature:()
operator ()	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void operator()()$/;"	f	struct:boost::interprocess::detail::get_or_create_node_pool_func	access:public	signature:()
operator ()	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      void operator()(typename block_multiset_t::pointer to_deallocate)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl::block_destroyer	access:public	signature:(typename block_multiset_t::pointer to_deallocate)
operator ()	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   void operator()(const typename A::pointer &p)$/;"	f	class:boost::container::containers_detail::allocator_destroyer	access:public	signature:(const typename A::pointer &p)
operator ()	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      bool operator()(const Value& lhs, const Value& rhs) const$/;"	f	class:boost::container::containers_detail::flat_tree::value_compare	access:public	signature:(const Value& lhs, const Value& rhs) const
operator ()	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   void operator()(T *ptr)$/;"	f	struct:boost::container::emplace_functor	access:public	signature:(T *ptr)
operator ()	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   const T& operator()(const T& x) const $/;"	f	struct:boost::container::containers_detail::identity	access:public	signature:(const T& x) const
operator ()	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   const typename Pair::first_type& operator()(const OtherPair& x) const $/;"	f	struct:boost::container::containers_detail::select1st	access:public	signature:(const OtherPair& x) const
operator ()	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   const typename Pair::first_type& operator()(const typename Pair::first_type& x) const $/;"	f	struct:boost::container::containers_detail::select1st	access:public	signature:(const typename Pair::first_type& x) const
operator ()	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   result_type operator()(U &ptr) const$/;"	f	struct:boost::container::containers_detail::cast_functor	access:public	signature:(U &ptr) const
operator ()	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      NodePtr operator()(const Node &other) const$/;"	f	struct:boost::container::containers_detail::cloner	access:public	signature:(const Node &other) const
operator ()	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^      void operator()(NodePtr n) const$/;"	f	struct:boost::container::containers_detail::destroyer	access:public	signature:(NodePtr n) const
operator ()	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   bool operator()(const Node &a, const Node &b) const$/;"	f	struct:boost::container::containers_detail::node_compare	access:public	signature:(const Node &a, const Node &b) const
operator ()	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void operator()(const typename A::pointer &p)$/;"	f	class:boost::container::containers_detail::allocator_destroyer_and_chain_builder	access:public	signature:(const typename A::pointer &p)
operator ()	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^      bool operator()(typename free_nodes_t::const_reference v) const$/;"	f	struct:boost::container::containers_detail::private_node_pool_impl::is_between	access:public	signature:(typename free_nodes_t::const_reference v) const
operator ()	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^      void operator()(typename free_nodes_t::pointer p) const$/;"	f	struct:boost::container::containers_detail::private_node_pool_impl::push_in_list	access:public	signature:(typename free_nodes_t::pointer p) const
operator ()	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      bool operator()(const KeyType &k, const Node &n) const$/;"	f	struct:boost::container::containers_detail::rbtree::key_node_compare	access:public	signature:(const KeyType &k, const Node &n) const
operator ()	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      bool operator()(const Node &n, const KeyType &k) const$/;"	f	struct:boost::container::containers_detail::rbtree::key_node_compare	access:public	signature:(const Node &n, const KeyType &k) const
operator ()	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      NodePtr operator()(const Node &other) const$/;"	f	class:boost::container::containers_detail::rbtree::RecyclingCloner	access:public	signature:(const Node &other) const
operator ()	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      void operator()(Node &n)$/;"	f	class:boost::container::containers_detail::rbtree::back_insertion_functor	access:public	signature:(Node &n)
operator ()	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      void operator()(Node &n)$/;"	f	class:boost::container::containers_detail::rbtree::insertion_functor	access:public	signature:(Node &n)
operator ()	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   bool operator()(const A &a, const B &b) const$/;"	f	struct:boost::container::containers_detail::value_compare_impl	access:public	signature:(const A &a, const B &b) const
operator ()	/usr/include/boost/interprocess/containers/container/list.hpp	/^      bool operator()(const Node &a) const$/;"	f	struct:boost::container::list::ValueCompareToNodeCompare	access:public	signature:(const Node &a) const
operator ()	/usr/include/boost/interprocess/containers/container/list.hpp	/^      bool operator()(const Node &a, const Node &b) const$/;"	f	struct:boost::container::list::ValueCompareToNodeCompare	access:public	signature:(const Node &a, const Node &b) const
operator ()	/usr/include/boost/interprocess/containers/container/list.hpp	/^      bool operator()(const value_type &a, const value_type &b) const$/;"	f	struct:boost::container::list::value_equal	access:public	signature:(const value_type &a, const value_type &b) const
operator ()	/usr/include/boost/interprocess/containers/container/list.hpp	/^      bool operator()(const value_type &a, const value_type &b) const$/;"	f	struct:boost::container::list::value_less	access:public	signature:(const value_type &a, const value_type &b) const
operator ()	/usr/include/boost/interprocess/containers/container/list.hpp	/^      bool operator()(const value_type &t)const$/;"	f	class:boost::container::list::equal_to_value	access:public	signature:(const value_type &t) const
operator ()	/usr/include/boost/interprocess/containers/container/list.hpp	/^      void operator()(Node &n)$/;"	f	class:boost::container::list::insertion_functor	access:public	signature:(Node &n)
operator ()	/usr/include/boost/interprocess/containers/container/map.hpp	/^      bool operator()(const value_type& x, const value_type& y) const {$/;"	f	class:boost::container::map::value_compare_impl	access:public	signature:(const value_type& x, const value_type& y) const
operator ()	/usr/include/boost/interprocess/containers/container/map.hpp	/^      bool operator()(const value_type& x, const value_type& y) const {$/;"	f	class:boost::container::multimap::value_compare_impl	access:public	signature:(const value_type& x, const value_type& y) const
operator ()	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      bool operator()(const Node &a) const$/;"	f	struct:boost::container::slist::ValueCompareToNodeCompare	access:public	signature:(const Node &a) const
operator ()	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      bool operator()(const Node &a, const Node &b) const$/;"	f	struct:boost::container::slist::ValueCompareToNodeCompare	access:public	signature:(const Node &a, const Node &b) const
operator ()	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      bool operator()(const value_type &a, const value_type &b) const$/;"	f	struct:boost::container::slist::value_equal	access:public	signature:(const value_type &a, const value_type &b) const
operator ()	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      bool operator()(const value_type &a, const value_type &b) const$/;"	f	struct:boost::container::slist::value_less	access:public	signature:(const value_type &a, const value_type &b) const
operator ()	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      bool operator()(const value_type &t)const$/;"	f	class:boost::container::slist::equal_to_value	access:public	signature:(const value_type &t) const
operator ()	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      bool operator()(const value_type &val) const$/;"	f	struct:boost::container::slist::value_equal_to_this	access:public	signature:(const value_type &val) const
operator ()	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      void operator()(Node &n)$/;"	f	class:boost::container::slist::insertion_functor	access:public	signature:(Node &n)
operator ()	/usr/include/boost/interprocess/containers/container/string.hpp	/^      bool operator()(const typename Tr::char_type& x) const $/;"	f	struct:boost::container::basic_string::Not_within_traits	access:public	signature:(const typename Tr::char_type& x) const
operator ()	/usr/include/boost/interprocess/containers/container/string.hpp	/^      bool operator()(const typename Tr::char_type& x,$/;"	f	struct:boost::container::basic_string::Eq_traits	access:public	signature:(const typename Tr::char_type& x, const typename Tr::char_type& y) const
operator ()	/usr/include/boost/interprocess/detail/intermodule_singleton.hpp	/^inline void atomic_functor<C>::operator()()$/;"	f	class:boost::interprocess::detail::atomic_functor	signature:()
operator ()	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   bool operator()(void *addr, std::size_t size, bool created) const$/;"	f	class:boost::interprocess::detail::create_open_func	access:public	signature:(void *addr, std::size_t size, bool created) const
operator ()	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      bool operator()(void *addr, std::size_t size, bool created) const$/;"	f	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public	signature:(void *addr, std::size_t size, bool created) const
operator ()	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      void operator()(const mapped_region &region, bool last) const$/;"	f	struct:boost::interprocess::basic_managed_multi_shared_memory::close_func	access:public	signature:(const mapped_region &region, bool last) const
operator ()	/usr/include/boost/interprocess/detail/mpl.hpp	/^   const T& operator()(const T& x) const $/;"	f	struct:boost::interprocess::detail::identity	access:public	signature:(const T& x) const
operator ()	/usr/include/boost/interprocess/detail/mpl.hpp	/^   const typename Pair::first_type& operator()(const OtherPair& x) const $/;"	f	struct:boost::interprocess::detail::select1st	access:public	signature:(const OtherPair& x) const
operator ()	/usr/include/boost/interprocess/detail/mpl.hpp	/^   const typename Pair::first_type& operator()(const typename Pair::first_type& x) const $/;"	f	struct:boost::interprocess::detail::select1st	access:public	signature:(const typename Pair::first_type& x) const
operator ()	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   T *operator()(Args &&...args) const$/;"	f	class:boost::interprocess::detail::named_proxy	access:public	signature:(Args &&....args) const
operator ()	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   result_type operator()(const typename Iterator::value_type &arg) const$/;"	f	struct:boost::interprocess::detail::segment_manager_iterator_transform	access:public	signature:(const typename Iterator::value_type &arg) const
operator ()	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      bool operator()(const intrusive_compare_key_type &i, const value_type &b) const$/;"	f	struct:boost::interprocess::iset_index::intrusive_key_value_less	access:public	signature:(const intrusive_compare_key_type &i, const value_type &b) const
operator ()	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      bool operator()(const value_type &b, const intrusive_compare_key_type &i) const$/;"	f	struct:boost::interprocess::iset_index::intrusive_key_value_less	access:public	signature:(const value_type &b, const intrusive_compare_key_type &i) const
operator ()	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^        std::size_t operator()(const intrusive_compare_key_type &i) const$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::hash_function	access:public	signature:(const intrusive_compare_key_type &i) const
operator ()	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^        std::size_t operator()(const value_type &val) const$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::hash_function	access:public	signature:(const value_type &val) const
operator ()	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      bool operator()(const intrusive_compare_key_type &i, const value_type &b) const$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::equal_function	access:public	signature:(const intrusive_compare_key_type &i, const value_type &b) const
operator ()	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      bool operator()(const value_type &b, const intrusive_compare_key_type &i) const$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::equal_function	access:public	signature:(const value_type &b, const intrusive_compare_key_type &i) const
operator ()	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      bool operator()(const value_type &b1, const value_type &b2) const$/;"	f	struct:boost::interprocess::iunordered_set_index_aux::equal_function	access:public	signature:(const value_type &b1, const value_type &b2) const
operator ()	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^        std::size_t operator()(const key_type &val) const$/;"	f	struct:boost::interprocess::unordered_map_index_aux::hasher	access:public	signature:(const key_type &val) const
operator ()	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool operator()(const offset_ptr<msg_hdr_t> &msg1, $/;"	f	class:boost::interprocess::detail::priority_functor	access:public	signature:(const offset_ptr<msg_hdr_t> &msg1, const offset_ptr<msg_hdr_t> &msg2) const
operator ()	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool operator()(void *address, std::size_t, bool created)$/;"	f	class:boost::interprocess::detail::initialization_func_t	access:public	signature:(void *address, std::size_t, bool created)
operator ()	/usr/include/boost/interprocess/mapped_region.hpp	/^   bool operator()(void *, std::size_t , bool) const$/;"	f	struct:boost::interprocess::null_mapped_region_function	access:public	signature:(void *, std::size_t , bool) const
operator ()	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      bool operator()(const block_ctrl &block, std::size_t size) const$/;"	f	struct:boost::interprocess::rbtree_best_fit::size_block_ctrl_compare	access:public	signature:(const block_ctrl &block, std::size_t size) const
operator ()	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      bool operator()(std::size_t size, const block_ctrl &block) const$/;"	f	struct:boost::interprocess::rbtree_best_fit::size_block_ctrl_compare	access:public	signature:(std::size_t size, const block_ctrl &block) const
operator ()	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^   void operator()(const pointer &p)$/;"	f	class:boost::interprocess::deleter	access:public	signature:(const pointer &p)
operator ()	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void operator()(pointer ptr)$/;"	f	struct:boost::interprocess::detail::scoped_ptr_dealloc_functor	access:public	signature:(pointer ptr)
operator ()	/usr/include/boost/interprocess/sync/emulation/named_creation_functor.hpp	/^   bool operator()(void *address, std::size_t, bool created) const$/;"	f	class:boost::interprocess::detail::named_creation_functor	access:public	signature:(void *address, std::size_t, bool created) const
operator *	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      reference operator*() const $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:() const
operator *	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      reference operator*() const { return *this->m_cur; }$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:() const
operator *	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   const T& operator*() const$/;"	f	class:boost::container::constant_iterator	access:public	signature:() const
operator *	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   const T& operator*() const$/;"	f	class:boost::container::default_construct_iterator	access:public	signature:() const
operator *	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   const T& operator*() const$/;"	f	class:boost::container::emplace_iterator	access:public	signature:() const
operator *	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   T& operator*() const$/;"	f	class:boost::container::repeat_iterator	access:public	signature:() const
operator *	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   typename UnaryFunction::result_type operator*() const$/;"	f	class:boost::container::transform_iterator	access:public	signature:() const
operator *	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      const_reference operator*()  const $/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:public	signature:() const
operator *	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      reference operator*()  const {  return  this->m_it->get_data();  }$/;"	f	class:boost::container::containers_detail::rbtree::iterator	access:public	signature:() const
operator *	/usr/include/boost/interprocess/containers/container/list.hpp	/^      const_reference operator*()  const $/;"	f	class:boost::container::list::const_iterator	access:public	signature:() const
operator *	/usr/include/boost/interprocess/containers/container/list.hpp	/^      reference operator*()  const {  return  this->m_it->m_data;  }$/;"	f	class:boost::container::list::iterator	access:public	signature:() const
operator *	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      const_reference operator*() const $/;"	f	class:boost::container::slist::const_iterator	access:public	signature:() const
operator *	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      reference operator*()  const {  return  this->m_it->m_data;  }$/;"	f	class:boost::container::slist::iterator	access:public	signature:() const
operator *	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   insert_iterator<Container>& operator*(){ return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:()
operator *	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   reference operator*()  const {  return  this->dereference();  }$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:() const
operator *	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   reference operator*()   const  $/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:() const
operator *	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   reference operator*()  const  $/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:() const
operator *	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   reference operator* () const           $/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:() const
operator *	/usr/include/boost/interprocess/detail/move.hpp	/^   back_move_insert_iterator& operator*()     { return *this; }$/;"	f	class:boost::interprocess::back_move_insert_iterator	access:public	signature:()
operator *	/usr/include/boost/interprocess/detail/move.hpp	/^   front_move_insert_iterator& operator*()     { return *this; }$/;"	f	class:boost::interprocess::front_move_insert_iterator	access:public	signature:()
operator *	/usr/include/boost/interprocess/detail/move.hpp	/^   move_insert_iterator& operator*()     { return *this; }$/;"	f	class:boost::interprocess::move_insert_iterator	access:public	signature:()
operator *	/usr/include/boost/interprocess/detail/move.hpp	/^   reference operator*() const$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:() const
operator *	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   typename UnaryFunction::result_type operator*() const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:() const
operator *	/usr/include/boost/interprocess/offset_ptr.hpp	/^   reference operator* () const           $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
operator *	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   T & operator*() const$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:() const
operator *	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   reference operator*() const$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:() const
operator *	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   reference operator* () const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
operator +	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      friend const_iterator operator+(std::ptrdiff_t n, const const_iterator& x)$/;"	f	class:boost::container::deque_base::const_iterator	access:friend	signature:(std::ptrdiff_t n, const const_iterator& x)
operator +	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      friend iterator operator+(difference_type off, const iterator& right)$/;"	f	class:boost::container::deque_base::iterator	access:friend	signature:(difference_type off, const iterator& right)
operator +	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator operator+(difference_type off) const$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:(difference_type off) const
operator +	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      self_t operator+(difference_type n) const$/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(difference_type n) const
operator +	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   constant_iterator operator+(Difference off) const$/;"	f	class:boost::container::constant_iterator	access:public	signature:(Difference off) const
operator +	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   default_construct_iterator operator+(Difference off) const$/;"	f	class:boost::container::default_construct_iterator	access:public	signature:(Difference off) const
operator +	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend constant_iterator operator+(Difference off, const constant_iterator& right)$/;"	f	class:boost::container::constant_iterator	access:friend	signature:(Difference off, const constant_iterator& right)
operator +	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend default_construct_iterator operator+(Difference off, const default_construct_iterator& right)$/;"	f	class:boost::container::default_construct_iterator	access:friend	signature:(Difference off, const default_construct_iterator& right)
operator +	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend this_type operator+(Difference off, const this_type& right)$/;"	f	class:boost::container::repeat_iterator	access:friend	signature:(Difference off, const this_type& right)
operator +	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend this_type operator+(std::ptrdiff_t off, const this_type& right)$/;"	f	class:boost::container::emplace_iterator	access:friend	signature:(std::ptrdiff_t off, const this_type& right)
operator +	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type operator+(Difference off) const$/;"	f	class:boost::container::repeat_iterator	access:public	signature:(Difference off) const
operator +	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type operator+(std::ptrdiff_t off) const$/;"	f	class:boost::container::emplace_iterator	access:public	signature:(std::ptrdiff_t off) const
operator +	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   friend transform_iterator operator+(typename Iterator::difference_type off, const transform_iterator& right)$/;"	f	class:boost::container::transform_iterator	access:friend	signature:(typename Iterator::difference_type off, const transform_iterator& right)
operator +	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   transform_iterator operator+(typename Iterator::difference_type off) const$/;"	f	class:boost::container::transform_iterator	access:public	signature:(typename Iterator::difference_type off) const
operator +	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   friend iterator operator+(difference_type off, const iterator& right)$/;"	f	class:boost::container::stable_vector_detail::iterator	access:friend	signature:(difference_type off, const iterator& right)
operator +	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator operator+(difference_type off) const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(difference_type off) const
operator +	/usr/include/boost/interprocess/containers/container/string.hpp	/^   operator+(const basic_string<CharT,Traits,A>& x,$/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, BOOST_INTERPROCESS_RV_REF_3_TEMPL_ARGS(basic_string, CharT, Traits, A) my)
operator +	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator+(CharT c, const basic_string<CharT,Traits,A>& y) $/;"	f	namespace:boost::container	signature:(CharT c, const basic_string<CharT,Traits,A>& y)
operator +	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator+(CharT c,$/;"	f	namespace:boost::container	signature:(CharT c, BOOST_INTERPROCESS_RV_REF_3_TEMPL_ARGS(basic_string, CharT, Traits, A) my)
operator +	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator+(const basic_string<CharT,Traits,A>& x, const CharT c) $/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const CharT c)
operator +	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator+(const basic_string<CharT,Traits,A>& x, const CharT* s) $/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const CharT* s)
operator +	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator+(const basic_string<CharT,Traits,A>& x,$/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const basic_string<CharT,Traits,A>& y)
operator +	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator+(const CharT* s, const basic_string<CharT,Traits,A>& y) $/;"	f	namespace:boost::container	signature:(const CharT* s, const basic_string<CharT,Traits,A>& y)
operator +	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator+(const CharT* s,$/;"	f	namespace:boost::container	signature:(const CharT* s, BOOST_INTERPROCESS_RV_REF_3_TEMPL_ARGS(basic_string, CharT, Traits, A) my)
operator +	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   friend vector_const_iterator operator+(difference_type off, const vector_const_iterator& right)$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:friend	signature:(difference_type off, const vector_const_iterator& right)
operator +	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   friend vector_iterator operator+(difference_type off, const vector_iterator& right)$/;"	f	class:boost::container::containers_detail::vector_iterator	access:friend	signature:(difference_type off, const vector_iterator& right)
operator +	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_const_iterator operator+(difference_type off) const$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(difference_type off) const
operator +	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_iterator operator+(difference_type off) const$/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:(difference_type off) const
operator +	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr operator+ (std::ptrdiff_t idx) const   $/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(std::ptrdiff_t idx) const
operator +	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^intersegment_ptr<T> operator+$/;"	f	namespace:boost::interprocess	signature:(std::ptrdiff_t diff, const intersegment_ptr<T>& right)
operator +	/usr/include/boost/interprocess/detail/move.hpp	/^   friend move_iterator operator+(difference_type n, const move_iterator& x)$/;"	f	class:boost::interprocess::move_iterator	access:friend	signature:(difference_type n, const move_iterator& x)
operator +	/usr/include/boost/interprocess/detail/move.hpp	/^   move_iterator<iterator_type>  operator+ (difference_type n) const$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:(difference_type n) const
operator +	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend transform_iterator operator+(typename Iterator::difference_type off, const transform_iterator& right)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(typename Iterator::difference_type off, const transform_iterator& right)
operator +	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator operator+(typename Iterator::difference_type off) const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(typename Iterator::difference_type off) const
operator +	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr operator+ (std::ptrdiff_t offset) const   $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(std::ptrdiff_t offset) const
operator +	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline offset_ptr<T> operator+(std::ptrdiff_t diff, const offset_ptr<T>& right)$/;"	f	namespace:boost::interprocess	signature:(std::ptrdiff_t diff, const offset_ptr<T>& right)
operator ++	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator operator++(int)$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator& operator++()  $/;"	f	class:boost::container::deque_base::iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      self_t operator++(int)  $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      self_t& operator++() $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   constant_iterator operator++(int)$/;"	f	class:boost::container::constant_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   constant_iterator& operator++() $/;"	f	class:boost::container::constant_iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   default_construct_iterator operator++(int)$/;"	f	class:boost::container::default_construct_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   default_construct_iterator& operator++() $/;"	f	class:boost::container::default_construct_iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type operator++(int)$/;"	f	class:boost::container::emplace_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type operator++(int)$/;"	f	class:boost::container::repeat_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type& operator++() $/;"	f	class:boost::container::emplace_iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type& operator++() $/;"	f	class:boost::container::repeat_iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   transform_iterator operator++(int)$/;"	f	class:boost::container::transform_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   transform_iterator& operator++() $/;"	f	class:boost::container::transform_iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      const_iterator operator++(int)      $/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      const_iterator& operator++()       $/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      iterator operator++(int)$/;"	f	class:boost::container::containers_detail::rbtree::iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      iterator& operator++()  $/;"	f	class:boost::container::containers_detail::rbtree::iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/containers/container/list.hpp	/^      const_iterator operator++(int)      $/;"	f	class:boost::container::list::const_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/containers/container/list.hpp	/^      const_iterator& operator++()       $/;"	f	class:boost::container::list::const_iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/containers/container/list.hpp	/^      iterator operator++(int)$/;"	f	class:boost::container::list::iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/containers/container/list.hpp	/^      iterator& operator++()  $/;"	f	class:boost::container::list::iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      const_iterator operator++(int)      $/;"	f	class:boost::container::slist::const_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      const_iterator& operator++()       $/;"	f	class:boost::container::slist::const_iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      iterator operator++(int)$/;"	f	class:boost::container::slist::iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      iterator& operator++()  $/;"	f	class:boost::container::slist::iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   insert_iterator<Container>& operator++(){ return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   insert_iterator<Container>& operator++(int){ return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator operator++(int)$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator& operator++()  $/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_const_iterator operator++(int)      $/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_const_iterator& operator++()       $/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_iterator operator++(int)$/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_iterator& operator++()  $/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr operator++ (int)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr& operator++ (void)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(void)
operator ++	/usr/include/boost/interprocess/detail/move.hpp	/^   back_move_insert_iterator& operator++()    { return *this; }$/;"	f	class:boost::interprocess::back_move_insert_iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/detail/move.hpp	/^   back_move_insert_iterator& operator++(int) { return *this; }$/;"	f	class:boost::interprocess::back_move_insert_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/detail/move.hpp	/^   front_move_insert_iterator& operator++()    { return *this; }$/;"	f	class:boost::interprocess::front_move_insert_iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/detail/move.hpp	/^   front_move_insert_iterator& operator++(int) { return *this; }$/;"	f	class:boost::interprocess::front_move_insert_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/detail/move.hpp	/^   move_insert_iterator& operator++()    { return *this; }$/;"	f	class:boost::interprocess::move_insert_iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/detail/move.hpp	/^   move_insert_iterator& operator++(int) { return *this; }$/;"	f	class:boost::interprocess::move_insert_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/detail/move.hpp	/^   move_iterator& operator++()$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/detail/move.hpp	/^   move_iterator<iterator_type>  operator++(int)$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   self_t  operator++(int) {  return ++*this;   *this;  }$/;"	f	struct:boost::interprocess::detail::CtorNArg	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   self_t& operator++()$/;"	f	struct:boost::interprocess::detail::CtorNArg	access:public	signature:()
operator ++	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator operator++(int)$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator& operator++() $/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:()
operator ++	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr operator++ (int)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(int)
operator ++	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr& operator++ (void) $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(void)
operator +=	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator& operator+=(difference_type off)$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:(difference_type off)
operator +=	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      self_t& operator+=(difference_type n)$/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(difference_type n)
operator +=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   constant_iterator& operator+=(Difference off)$/;"	f	class:boost::container::constant_iterator	access:public	signature:(Difference off)
operator +=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   default_construct_iterator& operator+=(Difference off)$/;"	f	class:boost::container::default_construct_iterator	access:public	signature:(Difference off)
operator +=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type& operator+=(Difference off)$/;"	f	class:boost::container::repeat_iterator	access:public	signature:(Difference off)
operator +=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type& operator+=(std::ptrdiff_t off)$/;"	f	class:boost::container::emplace_iterator	access:public	signature:(std::ptrdiff_t off)
operator +=	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   transform_iterator& operator+=(typename Iterator::difference_type off)$/;"	f	class:boost::container::transform_iterator	access:public	signature:(typename Iterator::difference_type off)
operator +=	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator& operator+=(difference_type off)$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(difference_type off)
operator +=	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& operator+=(CharT c)$/;"	f	class:boost::container::basic_string	access:public	signature:(CharT c)
operator +=	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& operator+=(const basic_string& s)$/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s)
operator +=	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& operator+=(const CharT* s)$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s)
operator +=	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_const_iterator& operator+=(difference_type off)$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(difference_type off)
operator +=	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_iterator& operator+=(difference_type off)$/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:(difference_type off)
operator +=	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr &operator+= (std::ptrdiff_t offset)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(std::ptrdiff_t offset)
operator +=	/usr/include/boost/interprocess/detail/move.hpp	/^   move_iterator& operator+=(difference_type n)$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:(difference_type n)
operator +=	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator& operator+=(typename Iterator::difference_type off)$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(typename Iterator::difference_type off)
operator +=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr &operator+= (std::ptrdiff_t offset)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(std::ptrdiff_t offset)
operator -	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      difference_type operator-(const const_iterator& right) const$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:(const const_iterator& right) const
operator -	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      difference_type operator-(const self_t& x) const $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(const self_t& x) const
operator -	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator operator-(difference_type off) const$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:(difference_type off) const
operator -	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      self_t operator-(difference_type n) const $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(difference_type n) const
operator -	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   constant_iterator operator-(Difference off) const$/;"	f	class:boost::container::constant_iterator	access:public	signature:(Difference off) const
operator -	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   default_construct_iterator operator-(Difference off) const$/;"	f	class:boost::container::default_construct_iterator	access:public	signature:(Difference off) const
operator -	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend Difference operator- (const constant_iterator& i, const constant_iterator& i2)$/;"	f	class:boost::container::constant_iterator	access:friend	signature:(const constant_iterator& i, const constant_iterator& i2)
operator -	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend Difference operator- (const default_construct_iterator& i, const default_construct_iterator& i2)$/;"	f	class:boost::container::default_construct_iterator	access:friend	signature:(const default_construct_iterator& i, const default_construct_iterator& i2)
operator -	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend Difference operator- (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::repeat_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
operator -	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend std::ptrdiff_t operator- (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::emplace_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
operator -	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type operator-(Difference off) const$/;"	f	class:boost::container::repeat_iterator	access:public	signature:(Difference off) const
operator -	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type operator-(std::ptrdiff_t off) const$/;"	f	class:boost::container::emplace_iterator	access:public	signature:(std::ptrdiff_t off) const
operator -	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   friend typename Iterator::difference_type operator- (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::container::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
operator -	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   transform_iterator operator-(typename Iterator::difference_type off) const$/;"	f	class:boost::container::transform_iterator	access:public	signature:(typename Iterator::difference_type off) const
operator -	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   difference_type operator-(const iterator& right) const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(const iterator& right) const
operator -	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator operator-(difference_type off) const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(difference_type off) const
operator -	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   difference_type operator-(const vector_const_iterator& right) const$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(const vector_const_iterator& right) const
operator -	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   difference_type operator-(const vector_const_iterator<Pointer>& right) const$/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:(const vector_const_iterator<Pointer>& right) const
operator -	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_const_iterator operator-(difference_type off) const$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(difference_type off) const
operator -	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_iterator operator-(difference_type off) const$/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:(difference_type off) const
operator -	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr operator- (std::ptrdiff_t idx) const   $/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(std::ptrdiff_t idx) const
operator -	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^std::ptrdiff_t operator- (const intersegment_ptr<T> &pt, $/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T> &pt, const intersegment_ptr<T2> &pt2)
operator -	/usr/include/boost/interprocess/detail/move.hpp	/^   friend difference_type operator-(const move_iterator& x, const move_iterator& y)$/;"	f	class:boost::interprocess::move_iterator	access:friend	signature:(const move_iterator& x, const move_iterator& y)
operator -	/usr/include/boost/interprocess/detail/move.hpp	/^   move_iterator<iterator_type>  operator- (difference_type n) const$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:(difference_type n) const
operator -	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend typename Iterator::difference_type operator- (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
operator -	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator operator-(typename Iterator::difference_type off) const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(typename Iterator::difference_type off) const
operator -	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr operator- (std::ptrdiff_t offset) const   $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(std::ptrdiff_t offset) const
operator -	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline std::ptrdiff_t operator- (const offset_ptr<T> &pt, const offset_ptr<T2> &pt2)$/;"	f	namespace:boost::interprocess	signature:(const offset_ptr<T> &pt, const offset_ptr<T2> &pt2)
operator --	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator operator--(int)$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:(int)
operator --	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator& operator--()$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:()
operator --	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      self_t operator--(int) $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(int)
operator --	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      self_t& operator--() $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:()
operator --	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      const_iterator operator--(int)$/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:public	signature:(int)
operator --	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      const_iterator& operator--()$/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:public	signature:()
operator --	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      iterator operator--(int)$/;"	f	class:boost::container::containers_detail::rbtree::iterator	access:public	signature:(int)
operator --	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      iterator& operator--()$/;"	f	class:boost::container::containers_detail::rbtree::iterator	access:public	signature:()
operator --	/usr/include/boost/interprocess/containers/container/list.hpp	/^      const_iterator operator--(int)$/;"	f	class:boost::container::list::const_iterator	access:public	signature:(int)
operator --	/usr/include/boost/interprocess/containers/container/list.hpp	/^      const_iterator& operator--()$/;"	f	class:boost::container::list::const_iterator	access:public	signature:()
operator --	/usr/include/boost/interprocess/containers/container/list.hpp	/^      iterator operator--(int)$/;"	f	class:boost::container::list::iterator	access:public	signature:(int)
operator --	/usr/include/boost/interprocess/containers/container/list.hpp	/^      iterator& operator--()$/;"	f	class:boost::container::list::iterator	access:public	signature:()
operator --	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator operator--(int)$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(int)
operator --	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator& operator--()$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:()
operator --	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_const_iterator operator--(int)$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(int)
operator --	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_const_iterator& operator--()$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:()
operator --	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_iterator operator--(int)$/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:(int)
operator --	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_iterator& operator--()$/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:()
operator --	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr operator-- (int)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(int)
operator --	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr& operator-- (void)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(void)
operator --	/usr/include/boost/interprocess/detail/move.hpp	/^   move_iterator& operator--()$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:()
operator --	/usr/include/boost/interprocess/detail/move.hpp	/^   move_iterator<iterator_type>  operator--(int)$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:(int)
operator --	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr operator-- (int)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(int)
operator --	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr& operator-- (void) $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(void)
operator -=	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      iterator& operator-=(difference_type off)$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:(difference_type off)
operator -=	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      self_t& operator-=(difference_type n) $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(difference_type n)
operator -=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   constant_iterator& operator-=(Difference off)$/;"	f	class:boost::container::constant_iterator	access:public	signature:(Difference off)
operator -=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   default_construct_iterator& operator-=(Difference off)$/;"	f	class:boost::container::default_construct_iterator	access:public	signature:(Difference off)
operator -=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type& operator-=(Difference off)$/;"	f	class:boost::container::repeat_iterator	access:public	signature:(Difference off)
operator -=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   this_type& operator-=(std::ptrdiff_t off)$/;"	f	class:boost::container::emplace_iterator	access:public	signature:(std::ptrdiff_t off)
operator -=	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   transform_iterator& operator-=(typename Iterator::difference_type off)$/;"	f	class:boost::container::transform_iterator	access:public	signature:(typename Iterator::difference_type off)
operator -=	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator& operator-=(difference_type off)$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(difference_type off)
operator -=	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_const_iterator& operator-=(difference_type off)$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(difference_type off)
operator -=	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_iterator& operator-=(difference_type off)$/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:(difference_type off)
operator -=	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr &operator-= (std::ptrdiff_t offset)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(std::ptrdiff_t offset)
operator -=	/usr/include/boost/interprocess/detail/move.hpp	/^   move_iterator& operator-=(difference_type n)$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:(difference_type n)
operator -=	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   transform_iterator& operator-=(typename Iterator::difference_type off)$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(typename Iterator::difference_type off)
operator -=	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr &operator-= (std::ptrdiff_t offset)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(std::ptrdiff_t offset)
operator ->	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      pointer operator->() const $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      pointer operator->() const { return this->m_cur; }$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   const T* operator->() const$/;"	f	class:boost::container::constant_iterator	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   const T* operator->() const$/;"	f	class:boost::container::default_construct_iterator	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   const T* operator->() const$/;"	f	class:boost::container::emplace_iterator	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   T *operator->() const$/;"	f	class:boost::container::repeat_iterator	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^      operator->() const$/;"	f	class:boost::container::transform_iterator	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   PseudoReference* operator->() const { return &m_value; }$/;"	f	struct:boost::container::operator_arrow_proxy	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   T* operator->() const { return &m_value; }$/;"	f	struct:boost::container::operator_arrow_proxy	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      const_pointer   operator->() const $/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      pointer   operator->() const {  return  pointer(&this->m_it->get_data());  }$/;"	f	class:boost::container::containers_detail::rbtree::iterator	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/containers/container/list.hpp	/^      const_pointer   operator->() const $/;"	f	class:boost::container::list::const_iterator	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/containers/container/list.hpp	/^      pointer   operator->() const {  return  pointer(&this->m_it->m_data);  }$/;"	f	class:boost::container::list::iterator	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      const_pointer   operator->() const $/;"	f	class:boost::container::slist::const_iterator	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      pointer   operator->() const {  return  pointer(&this->m_it->m_data);  }$/;"	f	class:boost::container::slist::iterator	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   pointer   operator->() const {  return  pointer(&this->dereference());  }$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const value_type * operator->()  const  $/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   value_type* operator->() const  $/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   pointer operator->() const           $/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/detail/move.hpp	/^   pointer   operator->() const$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^      operator->() const$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   PseudoReference* operator->() const { return &m_value; }$/;"	f	struct:boost::interprocess::operator_arrow_proxy	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   T* operator->() const { return &m_value; }$/;"	f	struct:boost::interprocess::operator_arrow_proxy	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/offset_ptr.hpp	/^   pointer operator->() const           $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   const pointer &operator->() const$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   pointer &operator->()$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:()
operator ->	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   const pointer &operator->() const$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:() const
operator ->	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   pointer &operator->()$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:()
operator ->	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   pointer operator-> () const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
operator <	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      bool operator<(const self_t& x) const $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(const self_t& x) const
operator <	/usr/include/boost/interprocess/containers/container/deque.hpp	/^inline bool operator<(const deque<T, Alloc>& x,$/;"	f	namespace:boost::container	signature:(const deque<T, Alloc>& x, const deque<T, Alloc>& y)
operator <	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      friend bool operator <(const block_info_t &l, const block_info_t &r)$/;"	f	struct:boost::container::containers_detail::adaptive_pool_types::block_info_t	access:friend	signature:(const block_info_t &l, const block_info_t &r)
operator <	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^operator<(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& y)
operator <	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator< (const constant_iterator& i, const constant_iterator& i2)$/;"	f	class:boost::container::constant_iterator	access:friend	signature:(const constant_iterator& i, const constant_iterator& i2)
operator <	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator< (const default_construct_iterator& i, const default_construct_iterator& i2)$/;"	f	class:boost::container::default_construct_iterator	access:friend	signature:(const default_construct_iterator& i, const default_construct_iterator& i2)
operator <	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator< (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::emplace_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
operator <	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator< (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::repeat_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
operator <	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^inline bool operator< (const pair<T1,T2>& x, const pair<T1,T2>& y)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(const pair<T1,T2>& x, const pair<T1,T2>& y)
operator <	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^operator<(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& y)
operator <	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   friend bool operator< (const flat_map<K1, T1, C1, A1>&,$/;"	p	class:boost::container::flat_map	access:friend	signature:(const flat_map<K1, T1, C1, A1>&, const flat_map<K1, T1, C1, A1>&)
operator <	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   friend bool operator< (const flat_multimap<K1, T1, C1, A1>& x,$/;"	p	class:boost::container::flat_multimap	access:friend	signature:(const flat_multimap<K1, T1, C1, A1>& x, const flat_multimap<K1, T1, C1, A1>& y)
operator <	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator<(const flat_map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_map<Key,T,Pred,Alloc>& x, const flat_map<Key,T,Pred,Alloc>& y)
operator <	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator<(const flat_map<Key,T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const flat_map<Key,T,Pred,Alloc>& x, const flat_map<Key,T,Pred,Alloc>& y)
operator <	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator<(const flat_multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multimap<Key,T,Pred,Alloc>& x, const flat_multimap<Key,T,Pred,Alloc>& y)
operator <	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator<(const flat_multimap<Key,T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const flat_multimap<Key,T,Pred,Alloc>& x, const flat_multimap<Key,T,Pred,Alloc>& y)
operator <	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   friend bool operator< (const flat_multiset<K1,C1,A1>&,$/;"	p	class:boost::container::flat_multiset	access:friend	signature:(const flat_multiset<K1,C1,A1>&, const flat_multiset<K1,C1,A1>&)
operator <	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   friend bool operator< (const flat_set<K1,C1,A1>&, const flat_set<K1,C1,A1>&);$/;"	p	class:boost::container::flat_set	access:friend	signature:(const flat_set<K1,C1,A1>&, const flat_set<K1,C1,A1>&)
operator <	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator<(const flat_multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multiset<T,Pred,Alloc>& x, const flat_multiset<T,Pred,Alloc>& y)
operator <	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator<(const flat_multiset<T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const flat_multiset<T,Pred,Alloc>& x, const flat_multiset<T,Pred,Alloc>& y)
operator <	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator<(const flat_set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_set<T,Pred,Alloc>& x, const flat_set<T,Pred,Alloc>& y)
operator <	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator<(const flat_set<T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const flat_set<T,Pred,Alloc>& x, const flat_set<T,Pred,Alloc>& y)
operator <	/usr/include/boost/interprocess/containers/container/list.hpp	/^inline bool operator<(const list<T,A>& x,$/;"	f	namespace:boost::container	signature:(const list<T,A>& x, const list<T,A>& y)
operator <	/usr/include/boost/interprocess/containers/container/map.hpp	/^   friend bool operator< (const map<K1, T1, C1, A1>&,$/;"	p	class:boost::container::map	access:friend	signature:(const map<K1, T1, C1, A1>&, const map<K1, T1, C1, A1>&)
operator <	/usr/include/boost/interprocess/containers/container/map.hpp	/^   friend bool operator< (const multimap<K1, T1, C1, A1>& x,$/;"	p	class:boost::container::multimap	access:friend	signature:(const multimap<K1, T1, C1, A1>& x, const multimap<K1, T1, C1, A1>& y)
operator <	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator<(const map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const map<Key,T,Pred,Alloc>& x, const map<Key,T,Pred,Alloc>& y)
operator <	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator<(const map<Key,T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const map<Key,T,Pred,Alloc>& x, const map<Key,T,Pred,Alloc>& y)
operator <	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator<(const multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multimap<Key,T,Pred,Alloc>& x, const multimap<Key,T,Pred,Alloc>& y)
operator <	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator<(const multimap<Key,T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const multimap<Key,T,Pred,Alloc>& x, const multimap<Key,T,Pred,Alloc>& y)
operator <	/usr/include/boost/interprocess/containers/container/set.hpp	/^   friend bool operator< (const multiset<K1,C1,A1>&,$/;"	p	class:boost::container::multiset	access:friend	signature:(const multiset<K1,C1,A1>&, const multiset<K1,C1,A1>&)
operator <	/usr/include/boost/interprocess/containers/container/set.hpp	/^   friend bool operator< (const set<K1,C1,A1>&, const set<K1,C1,A1>&);$/;"	p	class:boost::container::set	access:friend	signature:(const set<K1,C1,A1>&, const set<K1,C1,A1>&)
operator <	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator<(const multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multiset<T,Pred,Alloc>& x, const multiset<T,Pred,Alloc>& y)
operator <	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator<(const multiset<T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const multiset<T,Pred,Alloc>& x, const multiset<T,Pred,Alloc>& y)
operator <	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator<(const set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const set<T,Pred,Alloc>& x, const set<T,Pred,Alloc>& y)
operator <	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator<(const set<T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const set<T,Pred,Alloc>& x, const set<T,Pred,Alloc>& y)
operator <	/usr/include/boost/interprocess/containers/container/slist.hpp	/^operator<(const slist<T,A>& sL1, const slist<T,A>& sL2)$/;"	f	namespace:boost::container	signature:(const slist<T,A>& sL1, const slist<T,A>& sL2)
operator <	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   bool operator<    (const iterator& r)  const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(const iterator& r) const
operator <	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^bool operator< (const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)$/;"	f	namespace:boost::container	signature:(const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)
operator <	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator<(const basic_string<CharT,Traits,A>& x, const basic_string<CharT,Traits,A>& y) $/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const basic_string<CharT,Traits,A>& y)
operator <	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator<(const basic_string<CharT,Traits,A>& x,$/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const CharT* s)
operator <	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator<(const CharT* s, const basic_string<CharT,Traits,A>& y) $/;"	f	namespace:boost::container	signature:(const CharT* s, const basic_string<CharT,Traits,A>& y)
operator <	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   bool operator<    (const vector_const_iterator& r)  const$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(const vector_const_iterator& r) const
operator <	/usr/include/boost/interprocess/containers/container/vector.hpp	/^operator<(const vector<T, A>& x, const vector<T, A>& y)$/;"	f	namespace:boost::container	signature:(const vector<T, A>& x, const vector<T, A>& y)
operator <	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      friend bool operator< (const segment_group_t&l, const segment_group_t &r)$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:friend	signature:(const segment_group_t&l, const segment_group_t &r)
operator <	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator <(const intersegment_ptr<T1> &left,$/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &left, const intersegment_ptr<T2> &right)
operator <	/usr/include/boost/interprocess/detail/move.hpp	/^   friend bool operator< (const move_iterator& x, const move_iterator& y)$/;"	f	class:boost::interprocess::move_iterator	access:friend	signature:(const move_iterator& x, const move_iterator& y)
operator <	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool operator < (const index_key & right) const$/;"	f	struct:boost::interprocess::detail::index_key	access:public	signature:(const index_key & right) const
operator <	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool operator <(const intrusive_value_type_impl<Hook, CharType> & other) const$/;"	f	struct:boost::interprocess::detail::intrusive_value_type_impl	access:public	signature:(const intrusive_value_type_impl<Hook, CharType> & other) const
operator <	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      friend bool operator<(const block_ctrl &a, const block_ctrl &b)$/;"	f	struct:boost::interprocess::rbtree_best_fit::block_ctrl	access:friend	signature:(const block_ctrl &a, const block_ctrl &b)
operator <	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline bool operator< (const offset_ptr<T1> &pt1, $/;"	f	namespace:boost::interprocess	signature:(const offset_ptr<T1> &pt1, const offset_ptr<T2> &pt2)
operator <	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^bool operator<(shared_count<T, VoidAllocator, Deleter> const & a, shared_count<T2, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess::detail	signature:(shared_count<T, VoidAllocator, Deleter> const & a, shared_count<T2, VoidAllocator2, Deleter2> const & b)
operator <	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^bool operator<(weak_count<T, VoidAllocator, Deleter> const & a, weak_count<T2, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess::detail	signature:(weak_count<T, VoidAllocator, Deleter> const & a, weak_count<T2, VoidAllocator2, Deleter2> const & b)
operator <	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator<(intrusive_ptr<T, VP> const & a, $/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> const & a, intrusive_ptr<T, VP> const & b)
operator <	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^bool operator<(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)
operator <	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator <(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
operator <	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^bool operator<(weak_ptr<T, A, D> const & a, weak_ptr<U, A2, D2> const & b)$/;"	f	namespace:boost::interprocess	signature:(weak_ptr<T, A, D> const & a, weak_ptr<U, A2, D2> const & b)
operator <<	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator<<(std::basic_ostream<CharT, Traits>& os, const basic_string<CharT,Traits,A>& s)$/;"	f	namespace:boost::container	signature:(std::basic_ostream<CharT, Traits>& os, const basic_string<CharT,Traits,A>& s)
operator <<	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^std::basic_ostream<E, T> & operator<< $/;"	f	namespace:boost::interprocess	signature:(std::basic_ostream<E, T> & os, const intersegment_ptr<U> & p)
operator <<	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline std::basic_ostream<E, T> & operator<< $/;"	f	namespace:boost::interprocess	signature:(std::basic_ostream<E, T> & os, offset_ptr<Y> const & p)
operator <<	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^inline std::basic_ostream<E, T> & operator<< $/;"	f	namespace:boost::interprocess	signature:(std::basic_ostream<E, T> & os, intrusive_ptr<Y, VP> const & p)
operator <<	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^std::basic_ostream<E, T> & operator<< $/;"	f	namespace:boost::interprocess	signature:(std::basic_ostream<E, T> & os, shared_ptr<Y, VoidAllocator, Deleter> const & p)
operator <=	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      bool operator<=(const self_t& x) const $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(const self_t& x) const
operator <=	/usr/include/boost/interprocess/containers/container/deque.hpp	/^inline bool operator<=(const deque<T, Alloc>& x,$/;"	f	namespace:boost::container	signature:(const deque<T, Alloc>& x, const deque<T, Alloc>& y)
operator <=	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^operator<=(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& y)
operator <=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator<= (const constant_iterator& i, const constant_iterator& i2)$/;"	f	class:boost::container::constant_iterator	access:friend	signature:(const constant_iterator& i, const constant_iterator& i2)
operator <=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator<= (const default_construct_iterator& i, const default_construct_iterator& i2)$/;"	f	class:boost::container::default_construct_iterator	access:friend	signature:(const default_construct_iterator& i, const default_construct_iterator& i2)
operator <=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator<= (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::emplace_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
operator <=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator<= (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::repeat_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
operator <=	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^inline bool operator<=(const pair<T1,T2>& x, const pair<T1,T2>& y)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(const pair<T1,T2>& x, const pair<T1,T2>& y)
operator <=	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^operator<=(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& y)
operator <=	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator<=(const flat_map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_map<Key,T,Pred,Alloc>& x, const flat_map<Key,T,Pred,Alloc>& y)
operator <=	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator<=(const flat_multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multimap<Key,T,Pred,Alloc>& x, const flat_multimap<Key,T,Pred,Alloc>& y)
operator <=	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator<=(const flat_multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multiset<T,Pred,Alloc>& x, const flat_multiset<T,Pred,Alloc>& y)
operator <=	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator<=(const flat_set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_set<T,Pred,Alloc>& x, const flat_set<T,Pred,Alloc>& y)
operator <=	/usr/include/boost/interprocess/containers/container/list.hpp	/^inline bool operator<=(const list<T,A>& x, const list<T,A>& y) $/;"	f	namespace:boost::container	signature:(const list<T,A>& x, const list<T,A>& y)
operator <=	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator<=(const map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const map<Key,T,Pred,Alloc>& x, const map<Key,T,Pred,Alloc>& y)
operator <=	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator<=(const multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multimap<Key,T,Pred,Alloc>& x, const multimap<Key,T,Pred,Alloc>& y)
operator <=	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator<=(const multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multiset<T,Pred,Alloc>& x, const multiset<T,Pred,Alloc>& y)
operator <=	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator<=(const set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const set<T,Pred,Alloc>& x, const set<T,Pred,Alloc>& y)
operator <=	/usr/include/boost/interprocess/containers/container/slist.hpp	/^operator<=(const slist<T,A>& sL1, const slist<T,A>& sL2)$/;"	f	namespace:boost::container	signature:(const slist<T,A>& sL1, const slist<T,A>& sL2)
operator <=	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   bool operator<=   (const iterator& r)  const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(const iterator& r) const
operator <=	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^bool operator<=(const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)$/;"	f	namespace:boost::container	signature:(const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)
operator <=	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator<=(const basic_string<CharT,Traits,A>& x, const CharT* s) $/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const CharT* s)
operator <=	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator<=(const basic_string<CharT,Traits,A>& x,$/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const basic_string<CharT,Traits,A>& y)
operator <=	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator<=(const CharT* s, const basic_string<CharT,Traits,A>& y) $/;"	f	namespace:boost::container	signature:(const CharT* s, const basic_string<CharT,Traits,A>& y)
operator <=	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   bool operator<=   (const vector_const_iterator& r)  const$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(const vector_const_iterator& r) const
operator <=	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator<= (const intersegment_ptr<T1> &pt1, $/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &pt1, const intersegment_ptr<T2> &pt2)
operator <=	/usr/include/boost/interprocess/detail/move.hpp	/^   friend bool operator<=(const move_iterator& x, const move_iterator& y)$/;"	f	class:boost::interprocess::move_iterator	access:friend	signature:(const move_iterator& x, const move_iterator& y)
operator <=	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline bool operator<= (const offset_ptr<T1> &pt1, $/;"	f	namespace:boost::interprocess	signature:(const offset_ptr<T1> &pt1, const offset_ptr<T2> &pt2)
operator <=	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator<=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
operator =	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_base& operator=$/;"	p	class:boost::interprocess::detail::adaptive_pool_base	access:private	signature:(const adaptive_pool_base<Version2, T2, SegmentManager2, N2, F2, O2>&)
operator =	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   adaptive_pool_base& operator=(const adaptive_pool_base &other)$/;"	f	class:boost::interprocess::detail::adaptive_pool_base	access:public	signature:(const adaptive_pool_base &other)
operator =	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   allocator& operator=(const allocator&);$/;"	p	class:boost::interprocess::allocator	access:private	signature:(const allocator&)
operator =	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   allocator& operator=(const allocator<T2, SegmentManager2>&);$/;"	p	class:boost::interprocess::allocator	access:private	signature:(const allocator<T2, SegmentManager2>&)
operator =	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   private_adaptive_node_pool &operator=(const private_adaptive_node_pool &);$/;"	p	class:boost::interprocess::detail::private_adaptive_node_pool	access:private	signature:(const private_adaptive_node_pool &)
operator =	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   cached_allocator_impl & operator=(const cached_allocator_impl& other);$/;"	p	class:boost::interprocess::detail::cached_allocator_impl	access:private	signature:(const cached_allocator_impl& other)
operator =	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   private_node_pool &operator=(const private_node_pool &);$/;"	p	class:boost::interprocess::detail::private_node_pool	access:private	signature:(const private_node_pool &)
operator =	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_base& operator=$/;"	p	class:boost::interprocess::detail::node_allocator_base	access:private	signature:(const node_allocator_base<Version2, T2, SegmentManager2, N2>&)
operator =	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   node_allocator_base& operator=(const node_allocator_base &other)$/;"	f	class:boost::interprocess::detail::node_allocator_base	access:public	signature:(const node_allocator_base &other)
operator =	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_base& operator=$/;"	p	class:boost::interprocess::detail::private_adaptive_pool_base	access:private	signature:(const private_adaptive_pool_base<Version2, T2, MemoryAlgorithm2, N2, F2, OP2>&)
operator =	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_base& operator=(const private_adaptive_pool_base&);$/;"	p	class:boost::interprocess::detail::private_adaptive_pool_base	access:private	signature:(const private_adaptive_pool_base&)
operator =	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_base& operator=$/;"	p	class:boost::interprocess::detail::private_node_allocator_base	access:private	signature:(const private_node_allocator_base<Version2, T2, MemoryAlgorithm2, N2>&)
operator =	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_base& operator=(const private_node_allocator_base&);$/;"	p	class:boost::interprocess::detail::private_node_allocator_base	access:private	signature:(const private_node_allocator_base&)
operator =	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   private_adaptive_node_pool_impl &operator=(const private_adaptive_node_pool_impl &);$/;"	p	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(const private_adaptive_node_pool_impl &)
operator =	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   private_node_pool_impl &operator=(const private_node_pool_impl &);$/;"	p	class:boost::container::containers_detail::private_node_pool_impl	access:private	signature:(const private_node_pool_impl &)
operator =	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   rbtree_node &operator=(const rbtree_node &other)$/;"	f	struct:boost::container::containers_detail::rbtree_node	access:public	signature:(const rbtree_node &other)
operator =	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   tuple& operator=(const tuple<VValues...>& other)$/;"	f	class:boost::container::containers_detail::tuple	access:public	signature:(const tuple<VValues...>& other)
operator =	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      operator=(const typename Container::value_type& value) $/;"	f	class:std::insert_iterator	access:public	signature:(const typename Container::value_type& value)
operator =	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   clear_on_destroy &operator=(const clear_on_destroy &);$/;"	p	class:boost::container::stable_vector_detail::clear_on_destroy	access:private	signature:(const clear_on_destroy &)
operator =	/usr/include/boost/interprocess/containers/container/string.hpp	/^      long_t &operator =(const long_t &other)$/;"	f	struct:boost::container::containers_detail::basic_string_base::long_t	access:public	signature:(const long_t &other)
operator =	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& operator=(CharT c)$/;"	f	class:boost::container::basic_string	access:public	signature:(CharT c)
operator =	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& operator=(const CharT* s) $/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s)
operator =	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr& operator= (const intersegment_ptr &ptr)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr &ptr)
operator =	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr& operator= (const intersegment_ptr<T2> & ptr)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<T2> & ptr)
operator =	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   intersegment_ptr& operator= (pointer from)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(pointer from)
operator =	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   basic_managed_memory_impl &operator=(const basic_managed_memory_impl &);$/;"	p	class:boost::interprocess::detail::basic_managed_memory_impl	access:private	signature:(const basic_managed_memory_impl &)
operator =	/usr/include/boost/interprocess/detail/move.hpp	/^   back_move_insert_iterator& operator=(typename C::reference x)$/;"	f	class:boost::interprocess::back_move_insert_iterator	access:public	signature:(typename C::reference x)
operator =	/usr/include/boost/interprocess/detail/move.hpp	/^   front_move_insert_iterator& operator=(typename C::reference x)$/;"	f	class:boost::interprocess::front_move_insert_iterator	access:public	signature:(typename C::reference x)
operator =	/usr/include/boost/interprocess/detail/move.hpp	/^   move_insert_iterator& operator=(typename C::reference x)$/;"	f	class:boost::interprocess::move_insert_iterator	access:public	signature:(typename C::reference x)
operator =	/usr/include/boost/interprocess/detail/move.hpp	/^   void operator=(rv const&);$/;"	p	class:boost::interprocess::rv	access:private	signature:(rv const&)
operator =	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   block_header &operator= (const T& )$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:(const T& )
operator =	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   intrusive_value_type_impl& operator=(const intrusive_value_type_impl &);$/;"	p	struct:boost::interprocess::detail::intrusive_value_type_impl	access:private	signature:(const intrusive_value_type_impl &)
operator =	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   tuple& operator=(const tuple<VValues...>& other)$/;"	f	class:boost::interprocess::detail::tuple	access:public	signature:(const tuple<VValues...>& other)
operator =	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   xsi_shared_memory &operator=(xsi_shared_memory &);$/;"	p	class:boost::interprocess::xsi_shared_memory	access:private	signature:(xsi_shared_memory &)
operator =	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device &operator=(xsi_shared_memory_device &);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:private	signature:(xsi_shared_memory_device &)
operator =	/usr/include/boost/interprocess/errors.hpp	/^   error_info & operator =(error_code_t ec)$/;"	f	struct:boost::interprocess::error_info	access:public	signature:(error_code_t ec)
operator =	/usr/include/boost/interprocess/errors.hpp	/^   error_info & operator =(native_error_t sys_err_code)$/;"	f	struct:boost::interprocess::error_info	access:public	signature:(native_error_t sys_err_code)
operator =	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl &operator=(const simple_seq_fit_impl &);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(const simple_seq_fit_impl &)
operator =	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl &operator=(const simple_seq_fit_impl &);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(const simple_seq_fit_impl &)
operator =	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit &operator=(const rbtree_best_fit &);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(const rbtree_best_fit &)
operator =	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr& operator= (const offset_ptr & pt)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr & pt)
operator =	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr& operator= (const offset_ptr<T2> & pt)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(const offset_ptr<T2> & pt)
operator =	/usr/include/boost/interprocess/offset_ptr.hpp	/^   offset_ptr& operator= (pointer from)$/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(pointer from)
operator =	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager &operator=(const segment_manager &);$/;"	p	class:boost::interprocess::segment_manager	access:private	signature:(const segment_manager &)
operator =	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count & operator= (shared_count const & r) \/\/ nothrow$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(shared_count const & r)
operator =	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count & operator= (shared_count<Y, VoidAllocator, Deleter> const & r) \/\/ nothrow$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(shared_count<Y, VoidAllocator, Deleter> const & r)
operator =	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count & operator= (shared_count<Y, VoidAllocator, Deleter> const & r) \/\/ nothrow$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:(shared_count<Y, VoidAllocator, Deleter> const & r)
operator =	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count & operator= (weak_count const & r) \/\/ nothrow$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:(weak_count const & r)
operator =	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count & operator= (weak_count<Y, VoidAllocator, Deleter> const& r) \/\/ nothrow$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:(weak_count<Y, VoidAllocator, Deleter> const& r)
operator =	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    sp_counted_base & operator= ( sp_counted_base const & );$/;"	p	class:boost::interprocess::detail::sp_counted_base	access:private	signature:( sp_counted_base const & )
operator =	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   sp_counted_impl_pd & operator= ( sp_counted_impl_pd const & );$/;"	p	class:boost::interprocess::detail::sp_counted_impl_pd	access:private	signature:( sp_counted_impl_pd const & )
operator =	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   enable_shared_from_this & operator=(enable_shared_from_this const &)$/;"	f	class:boost::interprocess::enable_shared_from_this	access:protected	signature:(enable_shared_from_this const &)
operator =	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   intrusive_ptr & operator=(intrusive_ptr const & rhs)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(intrusive_ptr const & rhs)
operator =	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   intrusive_ptr & operator=(pointer rhs)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(pointer rhs)
operator =	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   template<class U> intrusive_ptr & operator=$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(intrusive_ptr<U, VP> const & rhs)
operator =	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   scoped_ptr & operator=(scoped_ptr const &);$/;"	p	class:boost::interprocess::scoped_ptr	access:private	signature:(scoped_ptr const &)
operator =	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr & operator=(shared_ptr<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r)
operator =	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   template <class U, class E> unique_ptr& operator=(unique_ptr<U, E>&);$/;"	p	class:boost::interprocess::unique_ptr	access:public	signature:(unique_ptr<U, E>&)
operator =	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   template <class U> typename detail::unique_ptr_error<U>::type operator=(U&);$/;"	p	class:boost::interprocess::unique_ptr	access:public	signature:(U&)
operator =	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   weak_ptr & operator=(shared_ptr<Y, A, D> const & r) \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(shared_ptr<Y, A, D> const & r)
operator =	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   weak_ptr & operator=(weak_ptr<Y, A, D> const & r) \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(weak_ptr<Y, A, D> const & r)
operator =	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf & operator =(const basic_vectorbuf&);$/;"	p	class:boost::interprocess::basic_vectorbuf	access:private	signature:(const basic_vectorbuf&)
operator =	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   interprocess_condition &operator=(const interprocess_condition &);$/;"	p	class:boost::interprocess::interprocess_condition	access:private	signature:(const interprocess_condition &)
operator =	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   interprocess_mutex &operator=(const interprocess_mutex &);$/;"	p	class:boost::interprocess::interprocess_mutex	access:private	signature:(const interprocess_mutex &)
operator =	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   interprocess_recursive_mutex &operator=(const interprocess_recursive_mutex &);$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:private	signature:(const interprocess_recursive_mutex &)
operator =	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   interprocess_semaphore &operator=(const interprocess_semaphore &);$/;"	p	class:boost::interprocess::interprocess_semaphore	access:private	signature:(const interprocess_semaphore &)
operator =	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   interprocess_upgradable_mutex &operator=(const interprocess_upgradable_mutex &);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:private	signature:(const interprocess_upgradable_mutex &)
operator =	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   named_condition &operator=(const named_condition &);$/;"	p	class:boost::interprocess::named_condition	access:private	signature:(const named_condition &)
operator =	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   named_mutex &operator=(const named_mutex &);$/;"	p	class:boost::interprocess::named_mutex	access:private	signature:(const named_mutex &)
operator =	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   named_recursive_mutex &operator=(const named_recursive_mutex &);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:private	signature:(const named_recursive_mutex &)
operator =	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   named_semaphore &operator=(const named_semaphore &);$/;"	p	class:boost::interprocess::named_semaphore	access:private	signature:(const named_semaphore &)
operator =	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   named_upgradable_mutex &operator=(const named_upgradable_mutex &);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:private	signature:(const named_upgradable_mutex &)
operator =	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   null_mutex &operator= (const null_mutex&);$/;"	p	class:boost::interprocess::null_mutex	access:private	signature:(const null_mutex&)
operator =	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   named_semaphore_wrapper &operator= (const named_semaphore_wrapper &);$/;"	p	class:boost::interprocess::detail::named_semaphore_wrapper	access:private	signature:(const named_semaphore_wrapper &)
operator =	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   semaphore_wrapper &operator= (const semaphore_wrapper &);$/;"	p	class:boost::interprocess::detail::semaphore_wrapper	access:private	signature:(const semaphore_wrapper &)
operator =	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   xsi_named_mutex &operator=(xsi_named_mutex &);$/;"	p	class:boost::interprocess::xsi_named_mutex	access:private	signature:(xsi_named_mutex &)
operator ==	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^bool operator==(const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^bool operator==(const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc1, $/;"	f	namespace:boost::interprocess::detail	signature:(const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc1, const adaptive_pool_base<V, T, S, NPC, F, OP> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/allocator.hpp	/^bool operator==(const allocator<T , SegmentManager>  &alloc1, $/;"	f	namespace:boost::interprocess	signature:(const allocator<T , SegmentManager> &alloc1, const allocator<T, SegmentManager> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^bool operator==(const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const cached_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^bool operator==(const cached_node_allocator<T, S, NPC> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const cached_node_allocator<T, S, NPC> &alloc1, const cached_node_allocator<T, S, NPC> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^bool operator==(const cached_allocator_impl<T, N, V> &alloc1, $/;"	f	namespace:boost::interprocess::detail	signature:(const cached_allocator_impl<T, N, V> &alloc1, const cached_allocator_impl<T, N, V> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^bool operator==(const node_allocator<T, S, NPC> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const node_allocator<T, S, NPC> &alloc1, const node_allocator<T, S, NPC> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^bool operator==(const node_allocator_base<V, T, S, NPC> &alloc1, $/;"	f	namespace:boost::interprocess::detail	signature:(const node_allocator_base<V, T, S, NPC> &alloc1, const node_allocator_base<V, T, S, NPC> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^bool operator==(const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc1, const private_adaptive_pool<T, S, NodesPerBlock, F, OP> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^bool operator==(const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc1, $/;"	f	namespace:boost::interprocess::detail	signature:(const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc1, const private_adaptive_pool_base<V, T, S, NodesPerBlock, F, OP> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^bool operator==(const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc1, $/;"	p	namespace:boost::interprocess	signature:(const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc1, const private_node_allocator<T, S, NodesPerBlock, F, OP> &alloc2)
operator ==	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^bool operator==(const private_node_allocator_base<V, T, S, NPC> &alloc1, $/;"	f	namespace:boost::interprocess::detail	signature:(const private_node_allocator_base<V, T, S, NPC> &alloc1, const private_node_allocator_base<V, T, S, NPC> &alloc2)
operator ==	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      bool operator==(const self_t& x) const $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(const self_t& x) const
operator ==	/usr/include/boost/interprocess/containers/container/deque.hpp	/^inline bool operator==(const deque<T, Alloc>& x,$/;"	f	namespace:boost::container	signature:(const deque<T, Alloc>& x, const deque<T, Alloc>& y)
operator ==	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^operator==(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& y)
operator ==	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator== (const constant_iterator& i, const constant_iterator& i2)$/;"	f	class:boost::container::constant_iterator	access:friend	signature:(const constant_iterator& i, const constant_iterator& i2)
operator ==	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator== (const default_construct_iterator& i, const default_construct_iterator& i2)$/;"	f	class:boost::container::default_construct_iterator	access:friend	signature:(const default_construct_iterator& i, const default_construct_iterator& i2)
operator ==	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator== (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::emplace_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
operator ==	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator== (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::repeat_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
operator ==	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^inline bool operator==(const pair<T1,T2>& x, const pair<T1,T2>& y)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(const pair<T1,T2>& x, const pair<T1,T2>& y)
operator ==	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   friend bool operator== (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::container::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
operator ==	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      bool operator==   (const const_iterator& r)  const$/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:public	signature:(const const_iterator& r) const
operator ==	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^operator==(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& y)
operator ==	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   friend bool operator== (const flat_map<K1, T1, C1, A1>&,$/;"	p	class:boost::container::flat_map	access:friend	signature:(const flat_map<K1, T1, C1, A1>&, const flat_map<K1, T1, C1, A1>&)
operator ==	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   friend bool operator== (const flat_multimap<K1, T1, C1, A1>& x,$/;"	p	class:boost::container::flat_multimap	access:friend	signature:(const flat_multimap<K1, T1, C1, A1>& x, const flat_multimap<K1, T1, C1, A1>& y)
operator ==	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator==(const flat_map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_map<Key,T,Pred,Alloc>& x, const flat_map<Key,T,Pred,Alloc>& y)
operator ==	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator==(const flat_map<Key,T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const flat_map<Key,T,Pred,Alloc>& x, const flat_map<Key,T,Pred,Alloc>& y)
operator ==	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator==(const flat_multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multimap<Key,T,Pred,Alloc>& x, const flat_multimap<Key,T,Pred,Alloc>& y)
operator ==	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator==(const flat_multimap<Key,T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const flat_multimap<Key,T,Pred,Alloc>& x, const flat_multimap<Key,T,Pred,Alloc>& y)
operator ==	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   friend bool operator== (const flat_multiset<K1,C1,A1>&,$/;"	p	class:boost::container::flat_multiset	access:friend	signature:(const flat_multiset<K1,C1,A1>&, const flat_multiset<K1,C1,A1>&)
operator ==	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   friend bool operator== (const flat_set<K1,C1,A1>&, const flat_set<K1,C1,A1>&);$/;"	p	class:boost::container::flat_set	access:friend	signature:(const flat_set<K1,C1,A1>&, const flat_set<K1,C1,A1>&)
operator ==	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator==(const flat_multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multiset<T,Pred,Alloc>& x, const flat_multiset<T,Pred,Alloc>& y)
operator ==	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator==(const flat_multiset<T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const flat_multiset<T,Pred,Alloc>& x, const flat_multiset<T,Pred,Alloc>& y)
operator ==	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator==(const flat_set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_set<T,Pred,Alloc>& x, const flat_set<T,Pred,Alloc>& y)
operator ==	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator==(const flat_set<T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const flat_set<T,Pred,Alloc>& x, const flat_set<T,Pred,Alloc>& y)
operator ==	/usr/include/boost/interprocess/containers/container/list.hpp	/^      bool operator==   (const const_iterator& r)  const$/;"	f	class:boost::container::list::const_iterator	access:public	signature:(const const_iterator& r) const
operator ==	/usr/include/boost/interprocess/containers/container/list.hpp	/^inline bool operator==(const list<T,A>& x, const list<T,A>& y)$/;"	f	namespace:boost::container	signature:(const list<T,A>& x, const list<T,A>& y)
operator ==	/usr/include/boost/interprocess/containers/container/map.hpp	/^   friend bool operator== (const map<K1, T1, C1, A1>&,$/;"	p	class:boost::container::map	access:friend	signature:(const map<K1, T1, C1, A1>&, const map<K1, T1, C1, A1>&)
operator ==	/usr/include/boost/interprocess/containers/container/map.hpp	/^   friend bool operator== (const multimap<K1, T1, C1, A1>& x,$/;"	p	class:boost::container::multimap	access:friend	signature:(const multimap<K1, T1, C1, A1>& x, const multimap<K1, T1, C1, A1>& y)
operator ==	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator==(const map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const map<Key,T,Pred,Alloc>& x, const map<Key,T,Pred,Alloc>& y)
operator ==	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator==(const map<Key,T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const map<Key,T,Pred,Alloc>& x, const map<Key,T,Pred,Alloc>& y)
operator ==	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator==(const multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multimap<Key,T,Pred,Alloc>& x, const multimap<Key,T,Pred,Alloc>& y)
operator ==	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator==(const multimap<Key,T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const multimap<Key,T,Pred,Alloc>& x, const multimap<Key,T,Pred,Alloc>& y)
operator ==	/usr/include/boost/interprocess/containers/container/set.hpp	/^   friend bool operator== (const multiset<K1,C1,A1>&,$/;"	p	class:boost::container::multiset	access:friend	signature:(const multiset<K1,C1,A1>&, const multiset<K1,C1,A1>&)
operator ==	/usr/include/boost/interprocess/containers/container/set.hpp	/^   friend bool operator== (const set<K1,C1,A1>&, const set<K1,C1,A1>&);$/;"	p	class:boost::container::set	access:friend	signature:(const set<K1,C1,A1>&, const set<K1,C1,A1>&)
operator ==	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator==(const multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multiset<T,Pred,Alloc>& x, const multiset<T,Pred,Alloc>& y)
operator ==	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator==(const multiset<T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const multiset<T,Pred,Alloc>& x, const multiset<T,Pred,Alloc>& y)
operator ==	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator==(const set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const set<T,Pred,Alloc>& x, const set<T,Pred,Alloc>& y)
operator ==	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator==(const set<T,Pred,Alloc>& x, $/;"	p	namespace:boost::container	signature:(const set<T,Pred,Alloc>& x, const set<T,Pred,Alloc>& y)
operator ==	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      bool operator==   (const const_iterator& r)  const$/;"	f	class:boost::container::slist::const_iterator	access:public	signature:(const const_iterator& r) const
operator ==	/usr/include/boost/interprocess/containers/container/slist.hpp	/^operator==(const slist<T,A>& x, const slist<T,A>& y)$/;"	f	namespace:boost::container	signature:(const slist<T,A>& x, const slist<T,A>& y)
operator ==	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   bool operator==   (const iterator& r)  const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(const iterator& r) const
operator ==	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^bool operator==(const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)$/;"	f	namespace:boost::container	signature:(const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)
operator ==	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator==(const basic_string<CharT,Traits,A>& x, const CharT* s) $/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const CharT* s)
operator ==	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator==(const basic_string<CharT,Traits,A>& x,$/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const basic_string<CharT,Traits,A>& y)
operator ==	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator==(const CharT* s, const basic_string<CharT,Traits,A>& y) $/;"	f	namespace:boost::container	signature:(const CharT* s, const basic_string<CharT,Traits,A>& y)
operator ==	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   bool operator==   (const vector_const_iterator& r)  const$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(const vector_const_iterator& r) const
operator ==	/usr/include/boost/interprocess/containers/container/vector.hpp	/^operator==(const vector<T, A>& x, const vector<T, A>& y)$/;"	f	namespace:boost::container	signature:(const vector<T, A>& x, const vector<T, A>& y)
operator ==	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator ==(const intersegment_ptr<T1> &left,$/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &left, const intersegment_ptr<T2> &right)
operator ==	/usr/include/boost/interprocess/detail/move.hpp	/^   friend bool operator==(const move_iterator& x, const move_iterator& y)$/;"	f	class:boost::interprocess::move_iterator	access:friend	signature:(const move_iterator& x, const move_iterator& y)
operator ==	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool operator == (const index_key & right) const$/;"	f	struct:boost::interprocess::detail::index_key	access:public	signature:(const index_key & right) const
operator ==	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   bool operator ==(const intrusive_value_type_impl<Hook, CharType> & other) const$/;"	f	struct:boost::interprocess::detail::intrusive_value_type_impl	access:public	signature:(const intrusive_value_type_impl<Hook, CharType> & other) const
operator ==	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   friend bool operator== (const transform_iterator& i, const transform_iterator& i2)$/;"	f	class:boost::interprocess::transform_iterator	access:friend	signature:(const transform_iterator& i, const transform_iterator& i2)
operator ==	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      friend bool operator==(const block_ctrl &a, const block_ctrl &b)$/;"	f	struct:boost::interprocess::rbtree_best_fit::block_ctrl	access:friend	signature:(const block_ctrl &a, const block_ctrl &b)
operator ==	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline bool operator== (const offset_ptr<T1> &pt1, $/;"	f	namespace:boost::interprocess	signature:(const offset_ptr<T1> &pt1, const offset_ptr<T2> &pt2)
operator ==	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^bool operator==(shared_count<T, VoidAllocator, Deleter> const & a, shared_count<T2, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess::detail	signature:(shared_count<T, VoidAllocator, Deleter> const & a, shared_count<T2, VoidAllocator2, Deleter2> const & b)
operator ==	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^bool operator==(weak_count<T, VoidAllocator, Deleter> const & a, weak_count<T2, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess::detail	signature:(weak_count<T, VoidAllocator, Deleter> const & a, weak_count<T2, VoidAllocator2, Deleter2> const & b)
operator ==	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator==(const typename intrusive_ptr<T, VP>::pointer &a,$/;"	f	namespace:boost::interprocess	signature:(const typename intrusive_ptr<T, VP>::pointer &a, intrusive_ptr<T, VP> const & b)
operator ==	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator==(intrusive_ptr<T, VP> const & a, $/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> const & a, intrusive_ptr<U, VP> const & b)
operator ==	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^bool operator==(intrusive_ptr<T, VP> const & a,$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> const & a, const typename intrusive_ptr<T, VP>::pointer &b)
operator ==	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^bool operator==(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<T, VoidAllocator, Deleter> const & a, shared_ptr<U, VoidAllocator2, Deleter2> const & b)
operator ==	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator==(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
operator >	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      bool operator>(const self_t& x) const  $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(const self_t& x) const
operator >	/usr/include/boost/interprocess/containers/container/deque.hpp	/^inline bool operator>(const deque<T, Alloc>& x,$/;"	f	namespace:boost::container	signature:(const deque<T, Alloc>& x, const deque<T, Alloc>& y)
operator >	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^operator>(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& y)
operator >	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator> (const constant_iterator& i, const constant_iterator& i2)$/;"	f	class:boost::container::constant_iterator	access:friend	signature:(const constant_iterator& i, const constant_iterator& i2)
operator >	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator> (const default_construct_iterator& i, const default_construct_iterator& i2)$/;"	f	class:boost::container::default_construct_iterator	access:friend	signature:(const default_construct_iterator& i, const default_construct_iterator& i2)
operator >	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator> (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::emplace_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
operator >	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator> (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::repeat_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
operator >	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^inline bool operator> (const pair<T1,T2>& x, const pair<T1,T2>& y)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(const pair<T1,T2>& x, const pair<T1,T2>& y)
operator >	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^operator>(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& y)
operator >	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator>(const flat_map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_map<Key,T,Pred,Alloc>& x, const flat_map<Key,T,Pred,Alloc>& y)
operator >	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator>(const flat_multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multimap<Key,T,Pred,Alloc>& x, const flat_multimap<Key,T,Pred,Alloc>& y)
operator >	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator>(const flat_multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multiset<T,Pred,Alloc>& x, const flat_multiset<T,Pred,Alloc>& y)
operator >	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator>(const flat_set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_set<T,Pred,Alloc>& x, const flat_set<T,Pred,Alloc>& y)
operator >	/usr/include/boost/interprocess/containers/container/list.hpp	/^inline bool operator>(const list<T,A>& x, const list<T,A>& y) $/;"	f	namespace:boost::container	signature:(const list<T,A>& x, const list<T,A>& y)
operator >	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator>(const map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const map<Key,T,Pred,Alloc>& x, const map<Key,T,Pred,Alloc>& y)
operator >	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator>(const multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multimap<Key,T,Pred,Alloc>& x, const multimap<Key,T,Pred,Alloc>& y)
operator >	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator>(const multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multiset<T,Pred,Alloc>& x, const multiset<T,Pred,Alloc>& y)
operator >	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator>(const set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const set<T,Pred,Alloc>& x, const set<T,Pred,Alloc>& y)
operator >	/usr/include/boost/interprocess/containers/container/slist.hpp	/^operator>(const slist<T,A>& sL1, const slist<T,A>& sL2) $/;"	f	namespace:boost::container	signature:(const slist<T,A>& sL1, const slist<T,A>& sL2)
operator >	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   bool operator>    (const iterator& r)  const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(const iterator& r) const
operator >	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^bool operator> (const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)$/;"	f	namespace:boost::container	signature:(const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)
operator >	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator>(const basic_string<CharT,Traits,A>& x, const CharT* s) $/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const CharT* s)
operator >	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator>(const basic_string<CharT,Traits,A>& x,$/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const basic_string<CharT,Traits,A>& y)
operator >	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator>(const CharT* s, const basic_string<CharT,Traits,A>& y) {$/;"	f	namespace:boost::container	signature:(const CharT* s, const basic_string<CharT,Traits,A>& y)
operator >	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   bool operator>    (const vector_const_iterator& r)  const$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(const vector_const_iterator& r) const
operator >	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator> (const intersegment_ptr<T1> &pt1, $/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &pt1, const intersegment_ptr<T2> &pt2)
operator >	/usr/include/boost/interprocess/detail/move.hpp	/^   friend bool operator> (const move_iterator& x, const move_iterator& y)$/;"	f	class:boost::interprocess::move_iterator	access:friend	signature:(const move_iterator& x, const move_iterator& y)
operator >	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline bool operator> (const offset_ptr<T1> &pt1, $/;"	f	namespace:boost::interprocess	signature:(const offset_ptr<T1> &pt1, const offset_ptr<T2> &pt2)
operator >	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator >(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
operator >=	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      bool operator>=(const self_t& x) const $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(const self_t& x) const
operator >=	/usr/include/boost/interprocess/containers/container/deque.hpp	/^inline bool operator>=(const deque<T, Alloc>& x,$/;"	f	namespace:boost::container	signature:(const deque<T, Alloc>& x, const deque<T, Alloc>& y)
operator >=	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^operator>=(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, const flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& y)
operator >=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator>= (const constant_iterator& i, const constant_iterator& i2)$/;"	f	class:boost::container::constant_iterator	access:friend	signature:(const constant_iterator& i, const constant_iterator& i2)
operator >=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator>= (const default_construct_iterator& i, const default_construct_iterator& i2)$/;"	f	class:boost::container::default_construct_iterator	access:friend	signature:(const default_construct_iterator& i, const default_construct_iterator& i2)
operator >=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator>= (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::emplace_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
operator >=	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   friend bool operator>= (const this_type& i, const this_type& i2)$/;"	f	class:boost::container::repeat_iterator	access:friend	signature:(const this_type& i, const this_type& i2)
operator >=	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^inline bool operator>=(const pair<T1,T2>& x, const pair<T1,T2>& y)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(const pair<T1,T2>& x, const pair<T1,T2>& y)
operator >=	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^operator>=(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, const rbtree<Key,Value,KeyOfValue,KeyCompare,A>& y)
operator >=	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator>=(const flat_map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_map<Key,T,Pred,Alloc>& x, const flat_map<Key,T,Pred,Alloc>& y)
operator >=	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline bool operator>=(const flat_multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multimap<Key,T,Pred,Alloc>& x, const flat_multimap<Key,T,Pred,Alloc>& y)
operator >=	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator>=(const flat_multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_multiset<T,Pred,Alloc>& x, const flat_multiset<T,Pred,Alloc>& y)
operator >=	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline bool operator>=(const flat_set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const flat_set<T,Pred,Alloc>& x, const flat_set<T,Pred,Alloc>& y)
operator >=	/usr/include/boost/interprocess/containers/container/list.hpp	/^inline bool operator>=(const list<T,A>& x, const list<T,A>& y) $/;"	f	namespace:boost::container	signature:(const list<T,A>& x, const list<T,A>& y)
operator >=	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator>=(const map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const map<Key,T,Pred,Alloc>& x, const map<Key,T,Pred,Alloc>& y)
operator >=	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline bool operator>=(const multimap<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multimap<Key,T,Pred,Alloc>& x, const multimap<Key,T,Pred,Alloc>& y)
operator >=	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator>=(const multiset<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const multiset<T,Pred,Alloc>& x, const multiset<T,Pred,Alloc>& y)
operator >=	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline bool operator>=(const set<T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(const set<T,Pred,Alloc>& x, const set<T,Pred,Alloc>& y)
operator >=	/usr/include/boost/interprocess/containers/container/slist.hpp	/^operator>=(const slist<T,A>& sL1, const slist<T,A>& sL2)$/;"	f	namespace:boost::container	signature:(const slist<T,A>& sL1, const slist<T,A>& sL2)
operator >=	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   bool operator>=   (const iterator& r)  const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(const iterator& r) const
operator >=	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^bool operator>=(const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)$/;"	f	namespace:boost::container	signature:(const stable_vector<T,Allocator>& x,const stable_vector<T,Allocator>& y)
operator >=	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator>=(const basic_string<CharT,Traits,A>& x, const CharT* s) $/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const CharT* s)
operator >=	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator>=(const basic_string<CharT,Traits,A>& x,$/;"	f	namespace:boost::container	signature:(const basic_string<CharT,Traits,A>& x, const basic_string<CharT,Traits,A>& y)
operator >=	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator>=(const CharT* s, const basic_string<CharT,Traits,A>& y) $/;"	f	namespace:boost::container	signature:(const CharT* s, const basic_string<CharT,Traits,A>& y)
operator >=	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   bool operator>=   (const vector_const_iterator& r)  const$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(const vector_const_iterator& r) const
operator >=	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^bool operator>= (const intersegment_ptr<T1> &pt1, $/;"	f	namespace:boost::interprocess	signature:(const intersegment_ptr<T1> &pt1, const intersegment_ptr<T2> &pt2)
operator >=	/usr/include/boost/interprocess/detail/move.hpp	/^   friend bool operator>=(const move_iterator& x, const move_iterator& y)$/;"	f	class:boost::interprocess::move_iterator	access:friend	signature:(const move_iterator& x, const move_iterator& y)
operator >=	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline bool operator>= (const offset_ptr<T1> &pt1, $/;"	f	namespace:boost::interprocess	signature:(const offset_ptr<T1> &pt1, const offset_ptr<T2> &pt2)
operator >=	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^bool operator>=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)$/;"	f	namespace:boost::interprocess	signature:(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y)
operator >>	/usr/include/boost/interprocess/containers/container/string.hpp	/^operator>>(std::basic_istream<CharT, Traits>& is, basic_string<CharT,Traits,A>& s)$/;"	f	namespace:boost::container	signature:(std::basic_istream<CharT, Traits>& is, basic_string<CharT,Traits,A>& s)
operator >>	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^std::basic_istream<E, T> & operator>> $/;"	f	namespace:boost::interprocess	signature:(std::basic_istream<E, T> & os, intersegment_ptr<U> & p)
operator >>	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline std::basic_istream<E, T> & operator>> $/;"	f	namespace:boost::interprocess	signature:(std::basic_istream<E, T> & is, offset_ptr<Y> & p)
operator const CharType *	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   operator const CharType *()$/;"	f	class:boost::interprocess::detail::char_ptr_holder	access:public	signature:()
operator pthread_barrierattr_t&	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      operator pthread_barrierattr_t&()  {  return m_attr;  }$/;"	f	struct:boost::interprocess::detail::barrierattr_wrapper	access:public	signature:()
operator pthread_condattr_t&	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      operator pthread_condattr_t&(){  return m_attr;  }$/;"	f	struct:boost::interprocess::detail::condattr_wrapper	access:public	signature:()
operator pthread_mutexattr_t&	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      operator pthread_mutexattr_t&()  {  return m_attr;  }$/;"	f	struct:boost::interprocess::detail::mutexattr_wrapper	access:public	signature:()
operator unspecified_bool_type	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   operator unspecified_bool_type() const  $/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:() const
operator unspecified_bool_type	/usr/include/boost/interprocess/offset_ptr.hpp	/^   operator unspecified_bool_type() const  $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:() const
operator unspecified_bool_type	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   operator unspecified_bool_type () const$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:() const
operator unspecified_bool_type	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:() const
operator unspecified_bool_type	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   operator unspecified_bool_type() const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
operator unspecified_bool_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:() const
operator unspecified_bool_type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:() const
operator unspecified_bool_type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   operator unspecified_bool_type() const$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:() const
operator []	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      reference operator[](difference_type n) const $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(difference_type n) const
operator []	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      reference operator[](difference_type n) const { return *(*this + n); }$/;"	f	class:boost::container::deque_base::iterator	access:public	signature:(difference_type n) const
operator []	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_reference operator[](size_type n) const $/;"	f	class:boost::container::deque	access:public	signature:(size_type n) const
operator []	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   reference operator[](size_type n)$/;"	f	class:boost::container::deque	access:public	signature:(size_type n)
operator []	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   T &operator[](const key_type& k) $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& k)
operator []	/usr/include/boost/interprocess/containers/container/map.hpp	/^   T& operator[](const key_type& k) $/;"	f	class:boost::container::map	access:public	signature:(const key_type& k)
operator []	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_reference operator[](size_type n)const{return value(impl[n]);}$/;"	f	class:boost::container::stable_vector	access:public	signature:(size_type n) const
operator []	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   reference operator[](difference_type off) const$/;"	f	class:boost::container::stable_vector_detail::iterator	access:public	signature:(difference_type off) const
operator []	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   reference operator[](size_type n){return value(impl[n]);}$/;"	f	class:boost::container::stable_vector	access:public	signature:(size_type n)
operator []	/usr/include/boost/interprocess/containers/container/string.hpp	/^   const_reference operator[](size_type n) const$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type n) const
operator []	/usr/include/boost/interprocess/containers/container/string.hpp	/^   reference operator[](size_type n)$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type n)
operator []	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_reference operator[](size_type n) const   $/;"	f	class:boost::container::vector	access:public	signature:(size_type n) const
operator []	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   reference operator[](difference_type off) const $/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:(difference_type off) const
operator []	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   reference operator[](difference_type off) const$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(difference_type off) const
operator []	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   reference operator[](size_type n)         $/;"	f	class:boost::container::vector	access:public	signature:(size_type n)
operator []	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   reference operator[](std::ptrdiff_t idx) const   $/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(std::ptrdiff_t idx) const
operator []	/usr/include/boost/interprocess/detail/move.hpp	/^   reference operator[](difference_type n) const$/;"	f	class:boost::interprocess::move_iterator	access:public	signature:(difference_type n) const
operator []	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   const named_proxy &operator[](std::size_t num) const$/;"	f	class:boost::interprocess::detail::named_proxy	access:public	signature:(std::size_t num) const
operator []	/usr/include/boost/interprocess/offset_ptr.hpp	/^   reference operator[](std::ptrdiff_t idx) const   $/;"	f	class:boost::interprocess::offset_ptr	access:public	signature:(std::ptrdiff_t idx) const
operator_arrow_proxy	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   operator_arrow_proxy(const PseudoReference &px)$/;"	f	struct:boost::container::operator_arrow_proxy	access:public	signature:(const PseudoReference &px)
operator_arrow_proxy	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   operator_arrow_proxy(T &px)$/;"	f	struct:boost::container::operator_arrow_proxy	access:public	signature:(T &px)
operator_arrow_proxy	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^struct operator_arrow_proxy$/;"	s	namespace:boost::container
operator_arrow_proxy	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^struct operator_arrow_proxy<T&>$/;"	s	namespace:boost::container
operator_arrow_proxy	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   operator_arrow_proxy(const PseudoReference &px)$/;"	f	struct:boost::interprocess::operator_arrow_proxy	access:public	signature:(const PseudoReference &px)
operator_arrow_proxy	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   operator_arrow_proxy(T &px)$/;"	f	struct:boost::interprocess::operator_arrow_proxy	access:public	signature:(T &px)
operator_arrow_proxy	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^struct operator_arrow_proxy$/;"	s	namespace:boost::interprocess
operator_arrow_proxy	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^struct operator_arrow_proxy<T&>$/;"	s	namespace:boost::interprocess
optimize_assign	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^struct optimize_assign$/;"	s	namespace:boost::container
optimize_assign	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^struct optimize_assign<const T*, T*>$/;"	s	namespace:boost::container
optimize_assign	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^struct optimize_assign<T*, T*>$/;"	s	namespace:boost::container	inherits:optimize_assign
optimize_copy	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^struct optimize_copy$/;"	s	namespace:boost::container
optimize_copy	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^struct optimize_copy<const T*, T*>$/;"	s	namespace:boost::container
optimize_copy	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^struct optimize_copy<T*, T*>$/;"	s	namespace:boost::container	inherits:optimize_copy
ordered_range	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^static const ordered_range_t ordered_range = 0;$/;"	m	namespace:boost::container
ordered_range_impl_t	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^struct ordered_range_impl_t {};$/;"	s	namespace:boost::container
ordered_range_t	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^typedef ordered_range_impl_t * ordered_range_t;$/;"	t	namespace:boost::container
ordered_unique_range	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^static const ordered_unique_range_t ordered_unique_range = 0;$/;"	m	namespace:boost::container
ordered_unique_range_impl_t	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^struct ordered_unique_range_impl_t{};$/;"	s	namespace:boost::container
ordered_unique_range_t	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^typedef ordered_unique_range_impl_t *ordered_unique_range_t;$/;"	t	namespace:boost::container
OS_process_id_t	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^typedef unsigned long OS_process_id_t;$/;"	t	namespace:boost::interprocess::detail
OS_systemwide_thread_id_t	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^typedef OS_thread_id_t OS_systemwide_thread_id_t;$/;"	t	namespace:boost::interprocess::detail
OS_thread_id_t	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^typedef unsigned long OS_thread_id_t;$/;"	t	namespace:boost::interprocess::detail
other	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      typedef adaptive_pool<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::adaptive_pool::rebind	access:public
other	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      typedef adaptive_pool_base<Version, T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>       other;$/;"	t	struct:boost::interprocess::detail::adaptive_pool_base::rebind	access:public
other	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      typedef adaptive_pool_v1<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::detail::adaptive_pool_v1::rebind	access:public
other	/usr/include/boost/interprocess/allocators/allocator.hpp	/^      typedef allocator<T2, SegmentManager>     other;$/;"	t	struct:boost::interprocess::allocator::rebind	access:public
other	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^         <T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::cached_adaptive_pool::rebind	access:public
other	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^         <T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::detail::cached_adaptive_pool_v1::rebind	access:public
other	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^         <T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::detail::cached_node_allocator_v1::rebind	access:public
other	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^      typedef cached_node_allocator<T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::cached_node_allocator::rebind	access:public
other	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      typedef node_allocator<T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::node_allocator::rebind	access:public
other	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      typedef node_allocator_base<Version, T2, SegmentManager, NodesPerBlock>       other;$/;"	t	struct:boost::interprocess::detail::node_allocator_base::rebind	access:public
other	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      typedef node_allocator_v1<T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::detail::node_allocator_v1::rebind	access:public
other	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^         <T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::private_adaptive_pool::rebind	access:public
other	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^         <Version, T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>   other;$/;"	t	struct:boost::interprocess::detail::private_adaptive_pool_base::rebind	access:public
other	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      typedef private_adaptive_pool_v1<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>  other;$/;"	t	struct:boost::interprocess::detail::private_adaptive_pool_v1::rebind	access:public
other	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^         <T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::private_node_allocator::rebind	access:public
other	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^         <Version, T2, SegmentManager, NodesPerBlock>   other;$/;"	t	struct:boost::interprocess::detail::private_node_allocator_base::rebind	access:public
other	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      typedef private_node_allocator_v1<T2, SegmentManager, NodesPerBlock>  other;$/;"	t	struct:boost::interprocess::detail::private_node_allocator_v1::rebind	access:public
other	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   node_alloc_holder(BOOST_INTERPROCESS_RV_REF(node_alloc_holder) other)$/;"	m	struct:boost::container::containers_detail::node_alloc_holder	access:public
other	/usr/include/boost/interprocess/mapped_region.hpp	/^   mapped_region &operator=(BOOST_INTERPROCESS_RV_REF(mapped_region) other);$/;"	m	class:boost::interprocess::mapped_region	access:public
other	/usr/include/boost/interprocess/mapped_region.hpp	/^   mapped_region(BOOST_INTERPROCESS_RV_REF(mapped_region) other);$/;"	m	class:boost::interprocess::mapped_region	access:public
other_error	/usr/include/boost/interprocess/errors.hpp	/^   other_error,      \/\/ library generated error$/;"	e	enum:boost::interprocess::error_code_t
out_of_memory_error	/usr/include/boost/interprocess/errors.hpp	/^   out_of_memory_error,$/;"	e	enum:boost::interprocess::error_code_t
out_of_resource_error	/usr/include/boost/interprocess/errors.hpp	/^   out_of_resource_error,$/;"	e	enum:boost::interprocess::error_code_t
out_of_space_error	/usr/include/boost/interprocess/errors.hpp	/^   out_of_space_error,$/;"	e	enum:boost::interprocess::error_code_t
overflow	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual int_type overflow(int_type c = CharTraits::eof())$/;"	f	class:boost::interprocess::basic_bufferbuf	access:protected	signature:(int_type c = CharTraits::eof())
overflow	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual int_type overflow(int_type c = CharTraits::eof())$/;"	f	class:boost::interprocess::basic_vectorbuf	access:protected	signature:(int_type c = CharTraits::eof())
Owner	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *Owner;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
owns	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   bool owns() const$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:() const
owns	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   bool owns() const$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:() const
owns	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   bool owns() const$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:() const
p	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   pair(BOOST_INTERPROCESS_RV_REF(pair) p)$/;"	m	struct:boost::container::containers_detail::pair	access:public
p	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   pair(BOOST_INTERPROCESS_RV_REF_2_TEMPL_ARGS(pair, D, S) p)$/;"	m	struct:boost::container::containers_detail::pair	access:public
p	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   pair(BOOST_INTERPROCESS_RV_REF_2_TEMPL_ARGS(std::pair, D, S) p)$/;"	m	struct:boost::container::containers_detail::pair	access:public
p	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      const stable_vector* p;$/;"	m	class:boost::container::stable_vector::invariant_checker	access:private
padding	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   char padding[8];$/;"	m	struct:boost::container::containers_detail::no_type	access:public
padding	/usr/include/boost/interprocess/detail/mpl.hpp	/^   char padding[8];$/;"	m	struct:boost::interprocess::detail::no_type	access:public
PageSize	/usr/include/boost/interprocess/mapped_region.hpp	/^      static const std::size_t PageSize;$/;"	m	struct:boost::interprocess::mapped_region::page_size_holder	access:public
PageSize	/usr/include/boost/interprocess/mapped_region.hpp	/^const std::size_t mapped_region::page_size_holder<dummy>::PageSize$/;"	m	class:boost::interprocess::mapped_region::page_size_holder
page_readonly	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long page_readonly        = 0x02;$/;"	m	namespace:boost::interprocess::winapi
page_readwrite	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long page_readwrite       = 0x04;$/;"	m	namespace:boost::interprocess::winapi
page_size_holder	/usr/include/boost/interprocess/mapped_region.hpp	/^   struct page_size_holder$/;"	s	class:boost::interprocess::mapped_region	access:private
page_writecopy	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long page_writecopy       = 0x08;$/;"	m	namespace:boost::interprocess::winapi
pair	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   pair()$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:()
pair	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   pair(const pair<T1, T2>& x)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(const pair<T1, T2>& x)
pair	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   pair(const std::pair<D, S>& p)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(const std::pair<D, S>& p)
pair	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   pair(pair<T1, T2>& x)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(pair<T1, T2>& x)
pair	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   pair(std::pair<T1, T2>& x)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(std::pair<T1, T2>& x)
pair	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   pair(U &&u, Args &&... args)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(U &&u, Args &&... args)
pair	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^struct pair$/;"	s	namespace:boost::container::containers_detail
path_error	/usr/include/boost/interprocess/errors.hpp	/^   path_error,$/;"	e	enum:boost::interprocess::error_code_t
PayloadPerAllocation	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   static const std::size_t PayloadPerAllocation = SegmentManagerBase::PayloadPerAllocation;$/;"	m	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
PayloadPerAllocation	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static const std::size_t PayloadPerAllocation = segment_manager::PayloadPerAllocation;$/;"	m	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
PayloadPerAllocation	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   enum {   PayloadPerAllocation = BlockCtrlBytes  };$/;"	e	enum:boost::interprocess::detail::simple_seq_fit_impl::__anon30
PayloadPerAllocation	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const std::size_t PayloadPerAllocation = BlockCtrlBytes;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	access:public
PayloadPerAllocation	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t PayloadPerAllocation = AllocatedCtrlBytes - UsableByPreviousChunk;$/;"	m	class:boost::interprocess::rbtree_best_fit	access:public
PayloadPerAllocation	/usr/include/boost/interprocess/segment_manager.hpp	/^   static const std::size_t PayloadPerAllocation = Base::PayloadPerAllocation;$/;"	m	class:boost::interprocess::segment_manager	access:public
PayloadPerAllocation	/usr/include/boost/interprocess/segment_manager.hpp	/^   static const std::size_t PayloadPerAllocation = MemoryAlgorithm::PayloadPerAllocation;$/;"	m	class:boost::interprocess::segment_manager_base	access:public
pbackfail	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual int_type pbackfail(int_type c = CharTraits::eof())$/;"	f	class:boost::interprocess::basic_bufferbuf	access:protected	signature:(int_type c = CharTraits::eof())
pbackfail	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual int_type pbackfail(int_type c = CharTraits::eof())$/;"	f	class:boost::interprocess::basic_vectorbuf	access:protected	signature:(int_type c = CharTraits::eof())
placement_destroy	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   placement_destroy()$/;"	f	struct:boost::interprocess::detail::placement_destroy	access:public	signature:()
placement_destroy	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^struct placement_destroy :  public in_place_interface$/;"	s	namespace:boost::interprocess::detail	inherits:in_place_interface
pn	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   node_type_ptr_t pn;$/;"	m	class:boost::container::stable_vector_detail::iterator	access:public
pointer	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      pointer_to_other<void_pointer, T>::type            pointer;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
pointer	/usr/include/boost/interprocess/allocators/allocator.hpp	/^      <cvoid_ptr, T>::type                      pointer;$/;"	t	class:boost::interprocess::allocator	access:public
pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      pointer_to_other<void_pointer, T>::type            pointer;$/;"	t	class:boost::interprocess::detail::array_allocation_impl	access:public
pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      pointer_to_other<void_pointer, T>::type            pointer;$/;"	t	class:boost::interprocess::detail::node_pool_allocation_impl	access:public
pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename base_t::pointer                      pointer;$/;"	t	class:boost::interprocess::detail::cached_allocator_impl	access:public
pointer	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      pointer_to_other<void_pointer, T>::type            pointer;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
pointer	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      pointer_to_other<void_pointer, T>::type            pointer;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
pointer	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      pointer_to_other<void_pointer, T>::type            pointer;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
pointer	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef val_alloc_cptr                    pointer;$/;"	t	class:boost::container::deque_base::const_iterator	access:public
pointer	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef val_alloc_ptr                     pointer;$/;"	t	class:boost::container::deque_base::iterator	access:public
pointer	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef val_alloc_ptr                        pointer;$/;"	t	class:boost::container::deque	access:public
pointer	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef typename Allocator::pointer    pointer;$/;"	t	struct:boost::container::containers_detail::null_scoped_array_deallocator	access:public
pointer	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef typename Allocator::pointer    pointer;$/;"	t	struct:boost::container::containers_detail::scoped_array_deallocator	access:public
pointer	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef typename Allocator::pointer    pointer;$/;"	t	struct:boost::container::containers_detail::scoped_destructor_n	access:public
pointer	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef typename Allocator::pointer pointer;$/;"	t	struct:boost::container::containers_detail::null_scoped_destructor_n	access:public
pointer	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef typename vector_t::pointer                 pointer;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
pointer	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^      <void_pointer, T>::type                            pointer;$/;"	t	class:boost::container::containers_detail::transform_multiallocation_chain	access:private
pointer	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename Allocator::pointer pointer;$/;"	t	struct:boost::container::containers_detail::scoped_deallocator	access:public
pointer	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      typedef rbtree_pointer       pointer;$/;"	t	class:boost::container::containers_detail::rbtree::iterator	access:public
pointer	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename A::pointer                        pointer;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
pointer	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^   typedef value_type *pointer;$/;"	t	struct:boost::container::containers_detail::smart_ptr_type	access:public
pointer	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::pointer                pointer;$/;"	t	class:boost::container::flat_map	access:public
pointer	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::pointer                pointer;$/;"	t	class:boost::container::flat_multimap	access:public
pointer	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::pointer                pointer;$/;"	t	class:boost::container::flat_multiset	access:public
pointer	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::pointer                pointer;$/;"	t	class:boost::container::flat_set	access:public
pointer	/usr/include/boost/interprocess/containers/container/list.hpp	/^      typedef list_pointer       pointer;$/;"	t	class:boost::container::list::iterator	access:public
pointer	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename A::pointer                     pointer;$/;"	t	class:boost::container::list	access:public
pointer	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::pointer                pointer;$/;"	t	class:boost::container::map	access:public
pointer	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::pointer                pointer;$/;"	t	class:boost::container::multimap	access:public
pointer	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::pointer                pointer;$/;"	t	class:boost::container::multiset	access:public
pointer	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::pointer                pointer;$/;"	t	class:boost::container::set	access:public
pointer	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      typedef list_pointer       pointer;$/;"	t	class:boost::container::slist::iterator	access:public
pointer	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename A::pointer                     pointer;$/;"	t	class:boost::container::slist	access:public
pointer	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef void                pointer;$/;"	t	class:std::insert_iterator	access:public
pointer	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef Pointer                           pointer;$/;"	t	class:boost::container::stable_vector_detail::iterator	access:public
pointer	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef typename Allocator::pointer                pointer;$/;"	t	class:boost::container::stable_vector	access:public
pointer	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef value_type *pointer;$/;"	t	struct:boost::container::stable_vector_detail::smart_ptr_type	access:public
Pointer	/usr/include/boost/interprocess/containers/container/string.hpp	/^      typedef const typename Tr::char_type* Pointer;$/;"	t	struct:boost::container::basic_string::Not_within_traits	access:public
pointer	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef typename A::pointer                     pointer;$/;"	t	class:boost::container::basic_string	access:public
pointer	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef typename A::pointer     pointer;$/;"	t	class:boost::container::containers_detail::basic_string_base	access:public
pointer	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef Pointer                                                   pointer;$/;"	t	class:boost::container::containers_detail::vector_iterator	access:public
pointer	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename A::pointer                     pointer;$/;"	t	class:boost::container::vector	access:public
pointer	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename A::pointer      pointer;$/;"	t	struct:boost::container::containers_detail::vector_alloc_holder	access:public
pointer	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename boost::pointer_to_other<Pointer, value_type>::type      pointer;$/;"	t	class:boost::container::containers_detail::vector_const_iterator	access:public
pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef T *                                     pointer;$/;"	t	class:boost::interprocess::intersegment_ptr	access:public
pointer	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef It                                                              pointer;$/;"	t	class:boost::interprocess::move_iterator	access:public
pointer	/usr/include/boost/interprocess/detail/utilities.hpp	/^   typedef value_type *pointer;$/;"	t	struct:boost::interprocess::detail::smart_ptr_type	access:public
pointer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      void *pointer;$/;"	m	union:boost::interprocess::winapi::interprocess_overlapped::__anon16	access:public
Pointer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      void *Pointer;$/;"	m	union:boost::interprocess::winapi::io_status_block_t::__anon20	access:public
pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef boost::interprocess::offset_ptr<T>         pointer;$/;"	t	struct:boost::intrusive::pointer_plus_bits	access:public
pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef PointedType *                     pointer;$/;"	t	class:boost::interprocess::offset_ptr	access:public
pointer	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^      <typename SegmentManager::void_pointer, T>::type   pointer;$/;"	t	class:boost::interprocess::deleter	access:public
pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^      <typename VoidAllocator::pointer, T>::type               pointer;$/;"	t	class:boost::interprocess::detail::shared_count	access:public
pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^      <typename VoidAllocator::pointer, T>::type            pointer;$/;"	t	class:boost::interprocess::detail::weak_count	access:public
pointer	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef typename Allocator::pointer pointer;$/;"	t	struct:boost::interprocess::detail::scoped_ptr_dealloc_functor	access:public
pointer	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef typename D::pointer   pointer;$/;"	t	class:boost::interprocess::detail::sp_counted_impl_pd	access:private
pointer	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   typedef typename boost::pointer_to_other<VoidPointer, T>::type pointer;$/;"	t	class:boost::interprocess::intrusive_ptr	access:public
pointer	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef typename detail::pointer_type<T, Deleter>::type pointer;$/;"	t	class:boost::interprocess::scoped_ptr	access:public
pointer	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^      <typename VoidAllocator::pointer, T>::type               pointer;$/;"	t	class:boost::interprocess::shared_ptr	access:public
pointer	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   typedef typename detail::pointer_type<T, D>::type pointer;$/;"	t	class:boost::interprocess::unique_ptr	access:public
pointer	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^      <typename A::pointer, T>::type      pointer;$/;"	t	class:boost::interprocess::weak_ptr	access:private
pointer_plus_bits	/usr/include/boost/interprocess/offset_ptr.hpp	/^struct pointer_plus_bits<boost::interprocess::offset_ptr<T>, NumBits>$/;"	s	namespace:boost::intrusive
pointer_type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct pointer_type$/;"	s	namespace:boost::interprocess::detail
pointer_type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct pointer_type$/;"	s	namespace:boost::interprocess::detail::pointer_type_imp
pointer_type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct pointer_type<T, D, false>$/;"	s	namespace:boost::interprocess::detail::pointer_type_imp
pointer_type_imp	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^namespace pointer_type_imp {$/;"	n	namespace:boost::interprocess::detail
pool_size	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      size_type pool_size;$/;"	m	struct:boost::container::stable_vector::ebo_holder	access:public
pop_back	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void pop_back() $/;"	f	class:boost::container::deque	access:public	signature:()
pop_back	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void pop_back()               $/;"	f	class:boost::container::list	access:public	signature:()
pop_back	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void pop_back()$/;"	f	class:boost::container::stable_vector	access:public	signature:()
pop_back	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void pop_back()$/;"	f	class:boost::container::basic_string	access:public	signature:()
pop_back	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void pop_back() $/;"	f	class:boost::container::vector	access:public	signature:()
pop_back	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      void pop_back()$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:()
pop_front	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void pop_front() $/;"	f	class:boost::container::deque	access:public	signature:()
pop_front	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void pop_front()$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:()
pop_front	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void pop_front()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
pop_front	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void pop_front()              $/;"	f	class:boost::container::list	access:public	signature:()
pop_front	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void pop_front()$/;"	f	class:boost::container::slist	access:public	signature:()
position	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      const_iterator position;$/;"	m	struct:boost::container::containers_detail::flat_tree::insert_commit_data	access:public
posix_time	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^namespace posix_time$/;"	n	namespace:boost
posix_time	/usr/include/boost/interprocess/sync/lock_options.hpp	/^namespace posix_time$/;"	n	namespace:boost
posix_time	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^namespace posix_time$/;"	n	namespace:boost
post	/usr/include/boost/interprocess/sync/emulation/interprocess_semaphore.hpp	/^inline void interprocess_semaphore::post()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
post	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   void post();$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:()
post	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   void post();$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:()
post	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline void named_semaphore::post()$/;"	f	class:boost::interprocess::named_semaphore	signature:()
post	/usr/include/boost/interprocess/sync/posix/interprocess_semaphore.hpp	/^inline void interprocess_semaphore::post()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
post	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   void post()$/;"	f	class:boost::interprocess::detail::named_semaphore_wrapper	access:public	signature:()
post	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   void post()$/;"	f	class:boost::interprocess::detail::semaphore_wrapper	access:public	signature:()
pos_	/usr/include/boost/interprocess/containers/container/list.hpp	/^      typename Icont::const_iterator pos_;$/;"	m	class:boost::container::list::insertion_functor	access:private
pos_	/usr/include/boost/interprocess/detail/move.hpp	/^   typename C::iterator pos_;$/;"	m	class:boost::interprocess::move_insert_iterator	access:private
pos_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename CharTraits::pos_type                 pos_type;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
pos_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_bufferstream	access:public
pos_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:public
pos_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_obufferstream	access:public
pos_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename CharTraits::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
pos_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
pos_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
pos_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::pos_type     pos_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
pow	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t pow      :  pow_size_bits;$/;"	m	struct:boost::interprocess::intersegment_base::relative_addressing	access:public
pow_size_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t pow_size_bits = $/;"	m	struct:boost::interprocess::intersegment_base	access:public
pow_size_bits_helper	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t pow_size_bits_helper = static_log2<max_segment_size_bits>::value;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
previous	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   const_iterator previous(const_iterator p) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator p)
previous	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator previous(iterator p) $/;"	f	class:boost::container::slist	access:public	signature:(iterator p)
prev_	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      typename Icont::const_iterator prev_;$/;"	m	class:boost::container::slist::insertion_functor	access:private
priority	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   unsigned int            priority;\/\/ Message priority$/;"	m	class:boost::interprocess::detail::msg_hdr_t	access:public
priority_functor	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^class priority_functor$/;"	c	namespace:boost::interprocess::detail
private_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   private_adaptive_node_pool();$/;"	p	class:boost::interprocess::detail::private_adaptive_node_pool	access:private	signature:()
private_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   private_adaptive_node_pool(const private_adaptive_node_pool &);$/;"	p	class:boost::interprocess::detail::private_adaptive_node_pool	access:private	signature:(const private_adaptive_node_pool &)
private_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   private_adaptive_node_pool(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::detail::private_adaptive_node_pool	access:public	signature:(segment_manager *segment_mngr)
private_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^class private_adaptive_node_pool$/;"	c	namespace:boost::interprocess::detail	inherits:boost::container::containers_detail::private_adaptive_node_pool_impl
private_adaptive_node_pool_impl	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   private_adaptive_node_pool_impl$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:( segment_manager_base_type *segment_mngr_base , std::size_t node_size , std::size_t nodes_per_block , std::size_t max_free_blocks , unsigned char overhead_percent )
private_adaptive_node_pool_impl	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   private_adaptive_node_pool_impl();$/;"	p	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:()
private_adaptive_node_pool_impl	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   private_adaptive_node_pool_impl(const private_adaptive_node_pool_impl &);$/;"	p	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(const private_adaptive_node_pool_impl &)
private_adaptive_node_pool_impl	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^class private_adaptive_node_pool_impl$/;"	c	namespace:boost::container::containers_detail
private_adaptive_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool$/;"	f	class:boost::interprocess::private_adaptive_pool	access:public	signature:(const private_adaptive_pool<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
private_adaptive_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool(SegmentManager *segment_mngr) $/;"	f	class:boost::interprocess::private_adaptive_pool	access:public	signature:(SegmentManager *segment_mngr)
private_adaptive_pool	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^class private_adaptive_pool$/;"	c	namespace:boost::interprocess	inherits:detail::private_adaptive_pool_base
private_adaptive_pool_base	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_base$/;"	f	class:boost::interprocess::detail::private_adaptive_pool_base	access:public	signature:(const private_adaptive_pool_base <Version, T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
private_adaptive_pool_base	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_base(const private_adaptive_pool_base &other)$/;"	f	class:boost::interprocess::detail::private_adaptive_pool_base	access:public	signature:(const private_adaptive_pool_base &other)
private_adaptive_pool_base	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_base(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::detail::private_adaptive_pool_base	access:public	signature:(segment_manager *segment_mngr)
private_adaptive_pool_base	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^class private_adaptive_pool_base$/;"	c	namespace:boost::interprocess::detail	inherits:node_pool_allocation_impl
private_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_v1$/;"	f	class:boost::interprocess::detail::private_adaptive_pool_v1	access:public	signature:(const private_adaptive_pool_v1<T2, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent> &other)
private_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   private_adaptive_pool_v1(SegmentManager *segment_mngr) $/;"	f	class:boost::interprocess::detail::private_adaptive_pool_v1	access:public	signature:(SegmentManager *segment_mngr)
private_adaptive_pool_v1	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^class private_adaptive_pool_v1$/;"	c	namespace:boost::interprocess::detail	inherits:private_adaptive_pool_base
private_node_allocator	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator$/;"	f	class:boost::interprocess::private_node_allocator	access:public	signature:(const private_node_allocator<T2, SegmentManager, NodesPerBlock> &other)
private_node_allocator	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator(SegmentManager *segment_mngr) $/;"	f	class:boost::interprocess::private_node_allocator	access:public	signature:(SegmentManager *segment_mngr)
private_node_allocator	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^class private_node_allocator$/;"	c	namespace:boost::interprocess	inherits:detail::private_node_allocator_base
private_node_allocator_base	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_base$/;"	f	class:boost::interprocess::detail::private_node_allocator_base	access:public	signature:(const private_node_allocator_base <Version, T2, SegmentManager, NodesPerBlock> &other)
private_node_allocator_base	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_base(const private_node_allocator_base &other)$/;"	f	class:boost::interprocess::detail::private_node_allocator_base	access:public	signature:(const private_node_allocator_base &other)
private_node_allocator_base	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_base(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::detail::private_node_allocator_base	access:public	signature:(segment_manager *segment_mngr)
private_node_allocator_base	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^class private_node_allocator_base$/;"	c	namespace:boost::interprocess::detail	inherits:node_pool_allocation_impl
private_node_allocator_v1	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_v1$/;"	f	class:boost::interprocess::detail::private_node_allocator_v1	access:public	signature:(const private_node_allocator_v1<T2, SegmentManager, NodesPerBlock> &other)
private_node_allocator_v1	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   private_node_allocator_v1(SegmentManager *segment_mngr) $/;"	f	class:boost::interprocess::detail::private_node_allocator_v1	access:public	signature:(SegmentManager *segment_mngr)
private_node_allocator_v1	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^class private_node_allocator_v1$/;"	c	namespace:boost::interprocess::detail	inherits:private_node_allocator_base
private_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   private_node_pool();$/;"	p	class:boost::interprocess::detail::private_node_pool	access:private	signature:()
private_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   private_node_pool(const private_node_pool &);$/;"	p	class:boost::interprocess::detail::private_node_pool	access:private	signature:(const private_node_pool &)
private_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   private_node_pool(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::detail::private_node_pool	access:public	signature:(segment_manager *segment_mngr)
private_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^class private_node_pool$/;"	c	namespace:boost::interprocess::detail	inherits:boost::container::containers_detail::private_node_pool_impl
private_node_pool_impl	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   private_node_pool_impl();$/;"	p	class:boost::container::containers_detail::private_node_pool_impl	access:private	signature:()
private_node_pool_impl	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   private_node_pool_impl(const private_node_pool_impl &);$/;"	p	class:boost::container::containers_detail::private_node_pool_impl	access:private	signature:(const private_node_pool_impl &)
private_node_pool_impl	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   private_node_pool_impl(segment_manager_base_type *segment_mngr_base, std::size_t node_size, std::size_t nodes_per_block)$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:(segment_manager_base_type *segment_mngr_base, std::size_t node_size, std::size_t nodes_per_block)
private_node_pool_impl	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^class private_node_pool_impl$/;"	c	namespace:boost::container::containers_detail
priv_addr	/usr/include/boost/interprocess/containers/container/string.hpp	/^   pointer priv_addr() const$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:() const
priv_addr	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_addr(pointer addr)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(pointer addr)
priv_add_segment	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void priv_add_segment(void *addr, std::size_t size);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(void *addr, std::size_t size)
priv_add_segment	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_add_segment(void *addr, std::size_t size)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(void *addr, std::size_t size)
priv_add_segment	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void priv_add_segment(void *addr, std::size_t size);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(void *addr, std::size_t size)
priv_add_segment	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_add_segment(void *addr, std::size_t size)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(void *addr, std::size_t size)
priv_add_segment	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_add_segment(void *addr, std::size_t size)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(void *addr, std::size_t size)
priv_add_segment	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void priv_add_segment(void *addr, std::size_t size);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(void *addr, std::size_t size)
priv_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   priv_allocate(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command ,std::size_t limit_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr)
priv_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   std::pair<void *, bool> priv_allocate(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(boost::interprocess::allocation_type command ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr = 0)
priv_allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_allocate(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command ,std::size_t limit_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr)
priv_allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   std::pair<void *, bool> priv_allocate(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(boost::interprocess::allocation_type command ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr = 0)
priv_allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_allocate(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(boost::interprocess::allocation_type command ,std::size_t limit_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr ,std::size_t backwards_multiple)
priv_allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   std::pair<void *, bool> priv_allocate(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(boost::interprocess::allocation_type command ,std::size_t limit_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr = 0 ,std::size_t backwards_multiple = 1)
priv_allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   priv_allocate_aligned(std::size_t nbytes, std::size_t alignment)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t nbytes, std::size_t alignment)
priv_allocate_aligned	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* priv_allocate_aligned     (std::size_t nbytes, std::size_t alignment);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(std::size_t nbytes, std::size_t alignment)
priv_allocate_many	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static multiallocation_chain priv_allocate_many$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:private	signature:( MemoryAlgorithm *memory_algo , const std::size_t *elem_sizes , std::size_t n_elements , std::size_t sizeof_element)
priv_allocate_map	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   ptr_alloc_ptr priv_allocate_map(std::size_t n) $/;"	f	class:boost::container::deque_base	access:protected	signature:(std::size_t n)
priv_allocate_node	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   val_alloc_ptr priv_allocate_node() $/;"	f	class:boost::container::deque_base	access:protected	signature:()
priv_allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_allocation_command (boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size, std::size_t &received_size, void *reuse_ptr, std::size_t sizeof_object)
priv_allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   std::pair<void *, bool> priv_allocation_command(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(boost::interprocess::allocation_type command ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr ,std::size_t sizeof_object)
priv_allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      priv_allocation_command(boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size,std::size_t &received_size, void *reuse_ptr, std::size_t sizeof_object)
priv_allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_allocation_command (boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size,std::size_t &received_size, void *reuse_ptr, std::size_t sizeof_object)
priv_alloc_block	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void priv_alloc_block(std::size_t n)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(std::size_t n)
priv_alloc_block	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void priv_alloc_block(std::size_t n, AlignOnlyFalse)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(std::size_t n, AlignOnlyFalse)
priv_alloc_block	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void priv_alloc_block(std::size_t n, AlignOnlyTrue)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(std::size_t n, AlignOnlyTrue)
priv_alloc_block	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void priv_alloc_block(std::size_t num_blocks = 1)$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:private	signature:(std::size_t num_blocks = 1)
priv_alloc_node	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   node_t *priv_alloc_node()$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:private	signature:()
priv_assign_aux	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_assign_aux(FwdIt first, FwdIt last, std::forward_iterator_tag)$/;"	f	class:boost::container::deque	access:private	signature:(FwdIt first, FwdIt last, std::forward_iterator_tag)
priv_assign_aux	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_assign_aux(InpIt first, InpIt last, std::input_iterator_tag)$/;"	f	class:boost::container::deque	access:private	signature:(InpIt first, InpIt last, std::input_iterator_tag)
priv_assign_aux	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_assign_aux(FwdIt first, FwdIt last, std::forward_iterator_tag)$/;"	f	class:boost::container::vector	access:private	signature:(FwdIt first, FwdIt last, std::forward_iterator_tag)
priv_assign_aux	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_assign_aux(InIt first, InIt last, std::input_iterator_tag)$/;"	f	class:boost::container::vector	access:private	signature:(InIt first, InIt last, std::input_iterator_tag)
priv_assign_dispatch	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_assign_dispatch(InpIt first, InpIt last, containers_detail::false_) $/;"	f	class:boost::container::deque	access:private	signature:(InpIt first, InpIt last, containers_detail::false_)
priv_assign_dispatch	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_assign_dispatch(Integer n, Integer val, containers_detail::true_)$/;"	f	class:boost::container::deque	access:private	signature:(Integer n, Integer val, containers_detail::true_)
priv_assign_dispatch	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_assign_dispatch(InputIter first2, InputIter last2, containers_detail::false_)$/;"	f	class:boost::container::list	access:private	signature:(InputIter first2, InputIter last2, containers_detail::false_)
priv_assign_dispatch	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_assign_dispatch(Integer n, Integer val, containers_detail::true_)$/;"	f	class:boost::container::list	access:private	signature:(Integer n, Integer val, containers_detail::true_)
priv_assign_dispatch	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_assign_dispatch(InpIt first, InpIt last, containers_detail::false_)$/;"	f	class:boost::container::slist	access:private	signature:(InpIt first, InpIt last, containers_detail::false_)
priv_assign_dispatch	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_assign_dispatch(Int n, Int val, containers_detail::true_)$/;"	f	class:boost::container::slist	access:private	signature:(Int n, Int val, containers_detail::true_)
priv_assign_dispatch	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& priv_assign_dispatch(InputIter f, InputIter l,$/;"	f	class:boost::container::basic_string	access:private	signature:(InputIter f, InputIter l, containers_detail::false_)
priv_assign_dispatch	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& priv_assign_dispatch(Integer n, Integer x, containers_detail::true_) $/;"	f	class:boost::container::basic_string	access:private	signature:(Integer n, Integer x, containers_detail::true_)
priv_assign_dispatch	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_assign_dispatch(InIt first, InIt last, containers_detail::false_)$/;"	f	class:boost::container::vector	access:private	signature:(InIt first, InIt last, containers_detail::false_)
priv_assign_dispatch	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_assign_dispatch(Integer n, Integer val, containers_detail::true_)$/;"	f	class:boost::container::vector	access:private	signature:(Integer n, Integer val, containers_detail::true_)
priv_block_end_offset	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   ::priv_block_end_offset() const$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:() const
priv_block_end_offset	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   std::size_t priv_block_end_offset() const;$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:() const
priv_block_from_node	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   block_info_t *priv_block_from_node(void *node) const$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(void *node) const
priv_block_from_node	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   block_info_t *priv_block_from_node(void *node, AlignOnlyFalse) const$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(void *node, AlignOnlyFalse) const
priv_block_from_node	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   block_info_t *priv_block_from_node(void *node, AlignOnlyTrue) const$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(void *node, AlignOnlyTrue) const
priv_capacity	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type priv_capacity() const$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:() const
priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* priv_check_and_allocate(std::size_t units$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(std::size_t units ,block_ctrl* prev ,block_ctrl* block ,std::size_t &received_size)
priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^void* simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_check_and_allocate$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t nunits ,typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl* prev ,typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl* block ,std::size_t &received_size)
priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void* priv_check_and_allocate(std::size_t units$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(std::size_t units ,block_ctrl* prev ,block_ctrl* block ,std::size_t &received_size)
priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^void* simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_check_and_allocate$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t nunits ,typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl* prev ,typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl* block ,std::size_t &received_size)
priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void* priv_check_and_allocate(std::size_t units$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(std::size_t units ,block_ctrl* block ,std::size_t &received_size)
priv_check_and_allocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void* rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_check_and_allocate$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(std::size_t nunits ,typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl* block ,std::size_t &received_size)
priv_check_range	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_check_range(size_type n) const $/;"	f	class:boost::container::vector	access:private	signature:(size_type n) const
priv_clear	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void priv_clear()$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:()
priv_close	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::detail::file_wrapper	access:private	signature:()
priv_close	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline void file_wrapper::priv_close()$/;"	f	class:boost::interprocess::detail::file_wrapper	signature:()
priv_close	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   void priv_close()$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:private	signature:()
priv_close	/usr/include/boost/interprocess/file_mapping.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::file_mapping	access:private	signature:()
priv_close	/usr/include/boost/interprocess/file_mapping.hpp	/^inline void file_mapping::priv_close()$/;"	f	class:boost::interprocess::file_mapping	signature:()
priv_close	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   void priv_close()$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:private	signature:()
priv_close	/usr/include/boost/interprocess/mapped_region.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::mapped_region	access:private	signature:()
priv_close	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void mapped_region::priv_close()$/;"	f	class:boost::interprocess::mapped_region	signature:()
priv_close	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::shared_memory_object	access:private	signature:()
priv_close	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline void shared_memory_object::priv_close()$/;"	f	class:boost::interprocess::shared_memory_object	signature:()
priv_close	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:private	signature:()
priv_close	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline void xsi_named_mutex::priv_close()$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
priv_close	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   void priv_close();$/;"	p	class:boost::interprocess::windows_shared_memory	access:private	signature:()
priv_close	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline void windows_shared_memory::priv_close()$/;"	f	class:boost::interprocess::windows_shared_memory	signature:()
priv_construct_null	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_construct_null(pointer p)$/;"	f	class:boost::container::basic_string	access:private	signature:(pointer p)
priv_copy	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_copy(const CharT* first, const CharT* last, CharT* result) $/;"	f	class:boost::container::basic_string	access:private	signature:(const CharT* first, const CharT* last, CharT* result)
priv_copy	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_copy(InputIterator first, InputIterator last, iterator result)$/;"	f	class:boost::container::basic_string	access:private	signature:(InputIterator first, InputIterator last, iterator result)
priv_copy_all_to	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   void priv_copy_all_to(const index_tuple<IdxPack...>&, Iterator p)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:private	signature:(const index_tuple<IdxPack...>&, Iterator p)
priv_copy_some_and_update	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   void priv_copy_some_and_update(const index_tuple<IdxPack...>&, Iterator p, difference_type division_count, bool first_n)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:private	signature:(const index_tuple<IdxPack...>&, Iterator p, difference_type division_count, bool first_n)
priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::containers_detail::rbtree	access:private	signature:(FwdIterator beg, FwdIterator end, bool unique, allocator_v2, std::forward_iterator_tag)
priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::containers_detail::rbtree	access:private	signature:(InpIterator beg, InpIterator end, bool unique, allocator_v1, std::input_iterator_tag)
priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::containers_detail::rbtree	access:private	signature:(InpIterator beg, InpIterator end, bool unique, allocator_v2, std::input_iterator_tag)
priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::list	access:private	signature:(const_iterator pos, FwdIterator beg, FwdIterator end, allocator_v2, std::forward_iterator_tag)
priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::list	access:private	signature:(const_iterator pos, InpIterator beg, InpIterator end)
priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::list	access:private	signature:(const_iterator pos, InpIterator beg, InpIterator end, allocator_v1, std::input_iterator_tag)
priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::list	access:private	signature:(const_iterator pos, InpIterator beg, InpIterator end, allocator_v2, std::input_iterator_tag)
priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_create_and_insert_nodes(const_iterator pos, size_type n)$/;"	f	class:boost::container::list	access:private	signature:(const_iterator pos, size_type n)
priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_create_and_insert_nodes(const_iterator pos, size_type n, const T& x)$/;"	f	class:boost::container::list	access:private	signature:(const_iterator pos, size_type n, const T& x)
priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev, FwdIterator beg, FwdIterator end, allocator_v2, std::forward_iterator_tag)
priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev, InpIterator beg, InpIterator end)
priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev, InpIterator beg, InpIterator end, allocator_v1, std::input_iterator_tag)
priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_create_and_insert_nodes$/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev, InpIterator beg, InpIterator end, allocator_v2, std::input_iterator_tag)
priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_create_and_insert_nodes(const_iterator prev, size_type n)$/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev, size_type n)
priv_create_and_insert_nodes	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_create_and_insert_nodes(const_iterator prev, size_type n, const T& x)$/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev, size_type n, const T& x)
priv_create_and_insert_ordered_nodes	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void priv_create_and_insert_ordered_nodes$/;"	f	class:boost::container::containers_detail::rbtree	access:private	signature:(FwdIterator beg, FwdIterator end, allocator_v2, std::forward_iterator_tag)
priv_create_and_insert_ordered_nodes	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void priv_create_and_insert_ordered_nodes$/;"	f	class:boost::container::containers_detail::rbtree	access:private	signature:(InpIterator beg, InpIterator end, allocator_v1, std::input_iterator_tag)
priv_create_and_insert_ordered_nodes	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void priv_create_and_insert_ordered_nodes$/;"	f	class:boost::container::containers_detail::rbtree	access:private	signature:(InpIterator beg, InpIterator end, allocator_v2, std::input_iterator_tag)
priv_create_nodes	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_create_nodes(ptr_alloc_ptr nstart, ptr_alloc_ptr nfinish)$/;"	f	class:boost::container::deque_base	access:protected	signature:(ptr_alloc_ptr nstart, ptr_alloc_ptr nfinish)
priv_deallocate	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   void priv_deallocate(const typename A::pointer &p, allocator_v1)$/;"	f	class:boost::container::containers_detail::allocator_destroyer	access:private	signature:(const typename A::pointer &p, allocator_v1)
priv_deallocate	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   void priv_deallocate(const typename A::pointer &p, allocator_v2)$/;"	f	class:boost::container::containers_detail::allocator_destroyer	access:private	signature:(const typename A::pointer &p, allocator_v2)
priv_deallocate	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void priv_deallocate(allocator_v1)$/;"	f	struct:boost::container::containers_detail::scoped_deallocator	access:private	signature:(allocator_v1)
priv_deallocate	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void priv_deallocate(allocator_v2)$/;"	f	struct:boost::container::containers_detail::scoped_deallocator	access:private	signature:(allocator_v2)
priv_deallocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void priv_deallocate(void *addr);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(void *addr)
priv_deallocate	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^void simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_deallocate(void* addr)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(void* addr)
priv_deallocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void priv_deallocate(void *addr);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(void *addr)
priv_deallocate	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^void simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_deallocate(void* addr)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(void* addr)
priv_deallocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void priv_deallocate(void *addr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(void *addr)
priv_deallocate	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_deallocate(void* addr)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(void* addr)
priv_deallocate	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void priv_deallocate(const typename Allocator::pointer &p, allocator_v1)$/;"	f	struct:boost::interprocess::detail::scoped_ptr_dealloc_functor	access:private	signature:(const typename Allocator::pointer &p, allocator_v1)
priv_deallocate	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void priv_deallocate(const typename Allocator::pointer &p, allocator_v2)$/;"	f	struct:boost::interprocess::detail::scoped_ptr_dealloc_functor	access:private	signature:(const typename Allocator::pointer &p, allocator_v2)
priv_deallocate_free_blocks	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void priv_deallocate_free_blocks(std::size_t max_free_blocks)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(std::size_t max_free_blocks)
priv_deallocate_many	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static void priv_deallocate_many(MemoryAlgorithm *memory_algo, multiallocation_chain chain)$/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:private	signature:(MemoryAlgorithm *memory_algo, multiallocation_chain chain)
priv_deallocate_map	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_deallocate_map(ptr_alloc_ptr p, std::size_t n) $/;"	f	class:boost::container::deque_base	access:protected	signature:(ptr_alloc_ptr p, std::size_t n)
priv_deallocate_node	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_deallocate_node(val_alloc_ptr p) $/;"	f	class:boost::container::deque_base	access:protected	signature:(val_alloc_ptr p)
priv_deallocate_n_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void priv_deallocate_n_nodes(std::size_t n)$/;"	f	class:boost::interprocess::detail::cache_impl	access:private	signature:(std::size_t n)
priv_deallocate_remaining_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void priv_deallocate_remaining_nodes()$/;"	f	class:boost::interprocess::detail::cache_impl	access:private	signature:()
priv_dealloc_node	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void priv_dealloc_node(void *pElem)$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:private	signature:(void *pElem)
priv_destroy_nodes	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_destroy_nodes(ptr_alloc_ptr nstart, ptr_alloc_ptr nfinish)$/;"	f	class:boost::container::deque_base	access:protected	signature:(ptr_alloc_ptr nstart, ptr_alloc_ptr nfinish)
priv_destroy_ptr	/usr/include/boost/interprocess/segment_manager.hpp	/^   void priv_destroy_ptr(const void *ptr, detail::in_place_interface &dtor)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const void *ptr, detail::in_place_interface &dtor)
priv_destroy_range	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_destroy_range(iterator p, iterator p2)$/;"	f	class:boost::container::deque	access:private	signature:(iterator p, iterator p2)
priv_destroy_range	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_destroy_range(pointer p, pointer p2)$/;"	f	class:boost::container::deque	access:private	signature:(pointer p, pointer p2)
priv_end_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   block_ctrl * priv_end_block(block_ctrl *first_segment_block);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *first_segment_block)
priv_end_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_end_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *first_segment_block)
priv_equal_range	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      priv_equal_range(RanIt first, RanIt last, const key_type& key) const$/;"	f	class:boost::container::containers_detail::flat_tree	access:private	signature:(RanIt first, RanIt last, const key_type& key) const
priv_erase	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator priv_erase(const_iterator first, const_iterator last, AllocatorVersion,$/;"	f	class:boost::container::stable_vector	access:private	signature:(const_iterator first, const_iterator last, AllocatorVersion, typename boost::container::containers_detail::enable_if_c <boost::container::containers_detail::is_same<AllocatorVersion, allocator_v2> ::value>::type * = 0)
priv_erase	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator priv_erase(const_iterator first, const_iterator last, allocator_v1)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const_iterator first, const_iterator last, allocator_v1)
priv_expand	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   bool priv_expand(void *ptr$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(void *ptr ,std::size_t min_size, std::size_t preferred_size ,std::size_t &received_size)
priv_expand	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   priv_expand (void *ptr$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(void *ptr ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size)
priv_expand	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   bool priv_expand(void *ptr$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(void *ptr ,std::size_t min_size, std::size_t preferred_size ,std::size_t &received_size)
priv_expand	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_expand (void *ptr$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(void *ptr ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size)
priv_expand	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   bool priv_expand(void *ptr$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(void *ptr ,const std::size_t min_size, const std::size_t preferred_size ,std::size_t &received_size)
priv_expand	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_expand (void *ptr$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(void *ptr ,const std::size_t min_size ,const std::size_t preferred_size ,std::size_t &received_size)
priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr ,bool only_preferred_backwards)
priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   void* priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(boost::interprocess::allocation_type command ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr ,bool only_preferred_backwards)
priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr ,bool only_preferred_backwards)
priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void* priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(boost::interprocess::allocation_type command ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr ,bool only_preferred_backwards)
priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(boost::interprocess::allocation_type command ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr ,bool only_preferred_backwards ,std::size_t backwards_multiple)
priv_expand_both_sides	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void* priv_expand_both_sides(boost::interprocess::allocation_type command$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(boost::interprocess::allocation_type command ,std::size_t min_size ,std::size_t preferred_size ,std::size_t &received_size ,void *reuse_ptr ,bool only_preferred_backwards ,std::size_t backwards_multiple)
priv_fill_assign	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_fill_assign(size_type n, const T& val)$/;"	f	class:boost::container::deque	access:private	signature:(size_type n, const T& val)
priv_fill_assign	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_fill_assign(size_type n, const T& val) $/;"	f	class:boost::container::list	access:private	signature:(size_type n, const T& val)
priv_fill_assign	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_fill_assign(size_type n, const T& val) $/;"	f	class:boost::container::slist	access:private	signature:(size_type n, const T& val)
priv_fill_initialize	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_fill_initialize(const value_type& value) $/;"	f	class:boost::container::deque	access:private	signature:(const value_type& value)
priv_fill_insert	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_fill_insert(const_iterator pos, size_type n, const value_type& x)$/;"	f	class:boost::container::deque	access:private	signature:(const_iterator pos, size_type n, const value_type& x)
priv_find_impl	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, std::size_t> priv_find_impl (const CharType* name, bool lock)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharType* name, bool lock)
priv_find__impl	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::pair<T*, std::size_t> priv_find__impl (const detail::unique_instance_t* name, bool lock)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const detail::unique_instance_t* name, bool lock)
priv_first_block_offset	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   ::priv_first_block_offset(const void *this_ptr, std::size_t extra_hdr_bytes)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(const void *this_ptr, std::size_t extra_hdr_bytes)
priv_first_block_offset	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static std::size_t priv_first_block_offset(const void *this_ptr, std::size_t extra_hdr_bytes);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(const void *this_ptr, std::size_t extra_hdr_bytes)
priv_first_block_offset	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   ::priv_first_block_offset(const void *this_ptr, std::size_t extra_hdr_bytes)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(const void *this_ptr, std::size_t extra_hdr_bytes)
priv_first_block_offset	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static std::size_t priv_first_block_offset(const void *this_ptr, std::size_t extra_hdr_bytes);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(const void *this_ptr, std::size_t extra_hdr_bytes)
priv_first_subblock_from_block	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   hdr_offset_holder *priv_first_subblock_from_block(block_info_t *block) const$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(block_info_t *block) const
priv_generic_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   void *priv_generic_construct(const CharType *name, $/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharType *name, std::size_t num, bool try2find, bool dothrow, detail::in_place_interface &table)
priv_generic_find	/usr/include/boost/interprocess/segment_manager.hpp	/^   void *priv_generic_find$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharT* name, IndexType<detail::index_config<CharT, MemoryAlgorithm> > &index, detail::in_place_interface &table, std::size_t &length, detail::false_ is_intrusive, bool use_lock)
priv_generic_find	/usr/include/boost/interprocess/segment_manager.hpp	/^   void *priv_generic_find$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharT* name, IndexType<detail::index_config<CharT, MemoryAlgorithm> > &index, detail::in_place_interface &table, std::size_t &length, detail::true_ is_intrusive, bool use_lock)
priv_generic_named_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * priv_generic_named_construct(std::size_t type,  $/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(std::size_t type, const CharT *name, std::size_t num, bool try2find, bool dothrow, detail::in_place_interface &table, IndexType<detail::index_config<CharT, MemoryAlgorithm> > &index, detail::false_ is_intrusive)
priv_generic_named_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * priv_generic_named_construct(std::size_t type,$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(std::size_t type, const CharT *name, std::size_t num, bool try2find, bool dothrow, detail::in_place_interface &table, IndexType<detail::index_config<CharT, MemoryAlgorithm> > &index, detail::true_ is_intrusive)
priv_generic_named_destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool priv_generic_named_destroy$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(block_header_t *block_header, IndexType<detail::index_config<CharT, MemoryAlgorithm> > &index, detail::in_place_interface &table, detail::false_ is_node_index)
priv_generic_named_destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool priv_generic_named_destroy$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(block_header_t *block_header, IndexType<detail::index_config<CharT, MemoryAlgorithm> > &index, detail::in_place_interface &table, detail::true_ is_node_index)
priv_generic_named_destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool priv_generic_named_destroy(const CharT *name, $/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharT *name, IndexType<detail::index_config<CharT, MemoryAlgorithm> > &index, detail::in_place_interface &table, detail::false_ is_intrusive_index)
priv_generic_named_destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool priv_generic_named_destroy(const CharT *name, $/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const CharT *name, IndexType<detail::index_config<CharT, MemoryAlgorithm> > &index, detail::in_place_interface &table, detail::true_ is_intrusive_index)
priv_generic_named_destroy_impl	/usr/include/boost/interprocess/segment_manager.hpp	/^   bool priv_generic_named_destroy_impl$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(const typename IndexType<detail::index_config<CharT, MemoryAlgorithm> >::iterator &it, IndexType<detail::index_config<CharT, MemoryAlgorithm> > &index, detail::in_place_interface &table)
priv_get_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_get_block(const void *ptr)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(const void *ptr)
priv_get_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static block_ctrl *priv_get_block(const void *ptr);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(const void *ptr)
priv_get_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_get_block(const void *ptr)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(const void *ptr)
priv_get_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static block_ctrl *priv_get_block(const void *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(const void *ptr)
priv_get_instance_length	/usr/include/boost/interprocess/segment_manager.hpp	/^   static std::size_t priv_get_instance_length(block_header_t *ctrl_data, std::size_t sizeofvalue)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(block_header_t *ctrl_data, std::size_t sizeofvalue)
priv_get_instance_name	/usr/include/boost/interprocess/segment_manager.hpp	/^   static const CharType *priv_get_instance_name(block_header_t *ctrl_data)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(block_header_t *ctrl_data)
priv_get_instance_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   static instance_type priv_get_instance_type(block_header_t *ctrl_data)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(block_header_t *ctrl_data)
priv_get_lock	/usr/include/boost/interprocess/segment_manager.hpp	/^   scoped_lock<rmutex> priv_get_lock(bool use_lock)$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:(bool use_lock)
priv_get_reserved_bytes	/usr/include/boost/interprocess/segment_manager.hpp	/^   static std::size_t priv_get_reserved_bytes()$/;"	f	class:boost::interprocess::segment_manager	access:private	signature:()
priv_get_total_units	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_get_total_units(std::size_t userbytes)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t userbytes)
priv_get_total_units	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static std::size_t priv_get_total_units(std::size_t userbytes);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(std::size_t userbytes)
priv_get_total_units	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_get_total_units(std::size_t userbytes)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(std::size_t userbytes)
priv_get_total_units	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static std::size_t priv_get_total_units(std::size_t userbytes);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(std::size_t userbytes)
priv_get_user_buffer	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      priv_get_user_buffer(const typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *block)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(const typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *block)
priv_get_user_buffer	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static void *priv_get_user_buffer(const block_ctrl *block);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(const block_ctrl *block)
priv_get_user_buffer	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      priv_get_user_buffer(const typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(const typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)
priv_get_user_buffer	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static void *priv_get_user_buffer(const block_ctrl *block);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(const block_ctrl *block)
priv_initialize_dispatch	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_initialize_dispatch(InpIt first, InpIt last, containers_detail::false_) $/;"	f	class:boost::container::deque	access:private	signature:(InpIt first, InpIt last, containers_detail::false_)
priv_initialize_dispatch	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_initialize_dispatch(Integer n, Integer x, containers_detail::true_) $/;"	f	class:boost::container::deque	access:private	signature:(Integer n, Integer x, containers_detail::true_)
priv_initialize_dispatch	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_initialize_dispatch(InputIter f, InputIter l, containers_detail::false_)$/;"	f	class:boost::container::basic_string	access:private	signature:(InputIter f, InputIter l, containers_detail::false_)
priv_initialize_dispatch	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_initialize_dispatch(Integer n, Integer x, containers_detail::true_)$/;"	f	class:boost::container::basic_string	access:private	signature:(Integer n, Integer x, containers_detail::true_)
priv_initialize_map	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_initialize_map(std::size_t num_elements)$/;"	f	class:boost::container::deque_base	access:protected	signature:(std::size_t num_elements)
priv_insert	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator priv_insert(const_iterator position, const value_type &x) $/;"	f	class:boost::container::deque	access:private	signature:(const_iterator position, const value_type &x)
priv_insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator priv_insert(const T &x) $/;"	f	class:boost::container::flat_multiset	access:private	signature:(const T &x)
priv_insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator priv_insert(const_iterator p, const T &x) $/;"	f	class:boost::container::flat_multiset	access:private	signature:(const_iterator p, const T &x)
priv_insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator priv_insert(const_iterator p, const T &x) $/;"	f	class:boost::container::flat_set	access:private	signature:(const_iterator p, const T &x)
priv_insert	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   std::pair<iterator, bool> priv_insert(const T &x) $/;"	f	class:boost::container::flat_set	access:private	signature:(const T &x)
priv_insert	/usr/include/boost/interprocess/containers/container/list.hpp	/^   iterator priv_insert(const_iterator p, const T &x) $/;"	f	class:boost::container::list	access:private	signature:(const_iterator p, const T &x)
priv_insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator priv_insert(const T &x) $/;"	f	class:boost::container::multiset	access:private	signature:(const T &x)
priv_insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator priv_insert(const_iterator p, const T &x) $/;"	f	class:boost::container::multiset	access:private	signature:(const_iterator p, const T &x)
priv_insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator priv_insert(const_iterator p, const T &x) $/;"	f	class:boost::container::set	access:private	signature:(const_iterator p, const T &x)
priv_insert	/usr/include/boost/interprocess/containers/container/set.hpp	/^   std::pair<iterator, bool> priv_insert(const T &x) $/;"	f	class:boost::container::set	access:private	signature:(const T &x)
priv_insert	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator priv_insert(const_iterator p, const value_type& x) $/;"	f	class:boost::container::slist	access:private	signature:(const_iterator p, const value_type& x)
priv_insert	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   iterator priv_insert(const_iterator position, const value_type &t)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const_iterator position, const value_type &t)
priv_insert	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_insert(iterator p, InputIter first, InputIter last, std::input_iterator_tag)$/;"	f	class:boost::container::basic_string	access:private	signature:(iterator p, InputIter first, InputIter last, std::input_iterator_tag)
priv_insert	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_insert(iterator position, ForwardIter first, $/;"	f	class:boost::container::basic_string	access:private	signature:(iterator position, ForwardIter first, ForwardIter last, std::forward_iterator_tag)
priv_insert	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   iterator priv_insert(const_iterator position, const T &x) $/;"	f	class:boost::container::vector	access:private	signature:(const_iterator position, const T &x)
priv_insert_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   iterator priv_insert_after(const_iterator prev_pos, const value_type& x) $/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev_pos, const value_type& x)
priv_insert_after_range_dispatch	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_insert_after_range_dispatch(const_iterator prev_pos, InIter first, InIter last, containers_detail::false_) $/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev_pos, InIter first, InIter last, containers_detail::false_)
priv_insert_after_range_dispatch	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_insert_after_range_dispatch(const_iterator prev_pos, Int n, Int x, containers_detail::true_) $/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev_pos, Int n, Int x, containers_detail::true_)
priv_insert_aux	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_insert_aux(const_iterator p, FwdIt first, FwdIt last)$/;"	f	class:boost::container::deque	access:private	signature:(const_iterator p, FwdIt first, FwdIt last)
priv_insert_aux	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_insert_aux(const_iterator pos, FwdIt first, FwdIt last, std::forward_iterator_tag) $/;"	f	class:boost::container::deque	access:private	signature:(const_iterator pos, FwdIt first, FwdIt last, std::forward_iterator_tag)
priv_insert_aux	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_insert_aux(const_iterator pos, InpIt first, InpIt last, std::input_iterator_tag)$/;"	f	class:boost::container::deque	access:private	signature:(const_iterator pos, InpIt first, InpIt last, std::input_iterator_tag)
priv_insert_aux	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_insert_aux(const_iterator pos, size_type n, const value_type& x)$/;"	f	class:boost::container::deque	access:private	signature:(const_iterator pos, size_type n, const value_type& x)
priv_insert_aux_impl	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_insert_aux_impl(const_iterator p, size_type n, advanced_insert_aux_int_t &interf)$/;"	f	class:boost::container::deque	access:private	signature:(const_iterator p, size_type n, advanced_insert_aux_int_t &interf)
priv_insert_commit	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator priv_insert_commit$/;"	f	class:boost::container::containers_detail::flat_tree	access:private	signature:(insert_commit_data &commit_data, BOOST_INTERPROCESS_FWD_REF(Convertible) convertible)
priv_insert_dispatch	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_insert_dispatch(const_iterator pos, Integer n, Integer x, containers_detail::true_) $/;"	f	class:boost::container::deque	access:private	signature:(const_iterator pos, Integer n, Integer x, containers_detail::true_)
priv_insert_dispatch	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_insert_dispatch(const_iterator pos,InpIt first, InpIt last, containers_detail::false_) $/;"	f	class:boost::container::deque	access:private	signature:(const_iterator pos,InpIt first, InpIt last, containers_detail::false_)
priv_insert_dispatch	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_insert_dispatch(const_iterator p, Integer n, Integer x, containers_detail::true_) $/;"	f	class:boost::container::list	access:private	signature:(const_iterator p, Integer n, Integer x, containers_detail::true_)
priv_insert_dispatch	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void priv_insert_dispatch(const_iterator p,$/;"	f	class:boost::container::list	access:private	signature:(const_iterator p, InputIter first, InputIter last, containers_detail::false_)
priv_insert_dispatch	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_insert_dispatch(const_iterator prev, Integer n, Integer x, containers_detail::true_) $/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev, Integer n, Integer x, containers_detail::true_)
priv_insert_dispatch	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_insert_dispatch(const_iterator prev,$/;"	f	class:boost::container::slist	access:private	signature:(const_iterator prev, InputIter first, InputIter last, containers_detail::false_)
priv_insert_dispatch	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_insert_dispatch(iterator p, InputIter first, InputIter last,$/;"	f	class:boost::container::basic_string	access:private	signature:(iterator p, InputIter first, InputIter last, containers_detail::false_)
priv_insert_dispatch	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_insert_dispatch(iterator p, Integer n, Integer x,$/;"	f	class:boost::container::basic_string	access:private	signature:(iterator p, Integer n, Integer x, containers_detail::true_)
priv_insert_dispatch	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_insert_dispatch(const_iterator pos, InIt first, $/;"	f	class:boost::container::vector	access:private	signature:(const_iterator pos, InIt first, InIt last, containers_detail::false_)
priv_insert_dispatch	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_insert_dispatch(const_iterator pos, Integer n, Integer val, containers_detail::true_) $/;"	f	class:boost::container::vector	access:private	signature:(const_iterator pos, Integer n, Integer val, containers_detail::true_)
priv_insert_equal	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   void priv_insert_equal(FwdIt first, FwdIt last, std::forward_iterator_tag)$/;"	f	class:boost::container::containers_detail::flat_tree	access:private	signature:(FwdIt first, FwdIt last, std::forward_iterator_tag)
priv_insert_equal	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   void priv_insert_equal(InIt first, InIt last, std::input_iterator_tag)$/;"	f	class:boost::container::containers_detail::flat_tree	access:private	signature:(InIt first, InIt last, std::input_iterator_tag)
priv_insert_equal_prepare	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   void priv_insert_equal_prepare$/;"	f	class:boost::container::containers_detail::flat_tree	access:private	signature:(const_iterator pos, const value_type& val, insert_commit_data &data)
priv_insert_unique_prepare	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   std::pair<iterator,bool> priv_insert_unique_prepare$/;"	f	class:boost::container::containers_detail::flat_tree	access:private	signature:(const value_type& val, insert_commit_data &commit_data)
priv_insert_unique_prepare	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   std::pair<iterator,bool> priv_insert_unique_prepare$/;"	f	class:boost::container::containers_detail::flat_tree	access:private	signature:(const_iterator beg, const_iterator end, const value_type& val, insert_commit_data &commit_data)
priv_insert_unique_prepare	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   std::pair<iterator,bool> priv_insert_unique_prepare$/;"	f	class:boost::container::containers_detail::flat_tree	access:private	signature:(const_iterator pos, const value_type& val, insert_commit_data &commit_data)
priv_invariants	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void priv_invariants()$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:()
priv_is_allocated_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   bool priv_is_allocated_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(block_ctrl *ptr)
priv_is_allocated_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^bool simple_seq_fit_impl<MutexFamily, VoidPointer>::priv_is_allocated_block$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *block)
priv_is_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   bool priv_is_allocated_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
priv_is_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^bool rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_is_allocated_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)
priv_is_prev_allocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   bool priv_is_prev_allocated(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
priv_is_prev_allocated	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^bool rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_is_prev_allocated$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *ptr)
priv_lower_bound	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   RanIt priv_lower_bound(RanIt first, RanIt last,$/;"	f	class:boost::container::containers_detail::flat_tree	access:private	signature:(RanIt first, RanIt last, const key_type & key) const
priv_mark_as_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void priv_mark_as_allocated_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
priv_mark_as_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_mark_as_allocated_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)
priv_mark_as_free_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void priv_mark_as_free_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
priv_mark_as_free_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_mark_as_free_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *block)
priv_mark_new_allocated_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   priv_mark_new_allocated_block(block_ctrl *new_block)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(block_ctrl *new_block)
priv_mark_new_allocated_block	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void priv_mark_new_allocated_block(block_ctrl *block);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(block_ctrl *block)
priv_mark_new_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   priv_mark_new_allocated_block(block_ctrl *new_block)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(block_ctrl *new_block)
priv_mark_new_allocated_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void priv_mark_new_allocated_block(block_ctrl *block);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *block)
priv_new_segment	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   bool  priv_new_segment(typename create_open_func::type_t type,$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:private	signature:(typename create_open_func::type_t type, std::size_t size, const void *addr)
priv_next_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   block_ctrl * priv_next_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
priv_next_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_next_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *ptr)
priv_next_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      priv_next_block_if_free$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *ptr)
priv_next_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   block_ctrl *priv_next_block_if_free(block_ctrl *ptr);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(block_ctrl *ptr)
priv_next_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      priv_next_block_if_free$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *ptr)
priv_next_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   block_ctrl *priv_next_block_if_free(block_ctrl *ptr);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(block_ctrl *ptr)
priv_null	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static CharT priv_null()$/;"	f	class:boost::container::basic_string	access:private	signature:()
priv_obtain_index	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   static void priv_obtain_index(mapped_region &m, xsi_named_mutex &m, std::string &path);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:private	signature:(mapped_region &m, xsi_named_mutex &m, std::string &path)
priv_obtain_index	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline void xsi_shared_memory_device::priv_obtain_index$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(mapped_region &reg, xsi_named_mutex &mut, std::string &path)
priv_open_or_create	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   bool priv_open_or_create(detail::create_enum_t type, const char *filename, mode_t mode);$/;"	p	class:boost::interprocess::detail::file_wrapper	access:private	signature:(detail::create_enum_t type, const char *filename, mode_t mode)
priv_open_or_create	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline bool file_wrapper::priv_open_or_create$/;"	f	class:boost::interprocess::detail::file_wrapper	signature:(detail::create_enum_t type, const char *filename, mode_t mode)
priv_open_or_create	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   bool  priv_open_or_create(typename create_open_func::type_t type, $/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:private	signature:(typename create_open_func::type_t type, const char *name, std::size_t size)
priv_open_or_create	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   void priv_open_or_create$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:private	signature:(detail::create_enum_t type, std::size_t size, mode_t mode, const void *addr, ConstructFunc construct_func)
priv_open_or_create	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   bool priv_open_or_create( detail::create_enum_t type$/;"	p	class:boost::interprocess::xsi_shared_memory	access:private	signature:( detail::create_enum_t type , const char *filename , boost::uint8_t id , int perm , std::size_t size)
priv_open_or_create	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^inline bool xsi_shared_memory::priv_open_or_create$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:(detail::create_enum_t type, const char *filename, boost::uint8_t id, int perm, std::size_t size)
priv_open_or_create	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   bool priv_open_or_create(detail::create_enum_t type, const char *filename, mode_t mode);$/;"	p	class:boost::interprocess::shared_memory_object	access:private	signature:(detail::create_enum_t type, const char *filename, mode_t mode)
priv_open_or_create	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline bool shared_memory_object::priv_open_or_create$/;"	f	class:boost::interprocess::shared_memory_object	signature:(detail::create_enum_t type, const char *filename, mode_t mode)
priv_open_or_create	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   bool priv_open_or_create( detail::create_enum_t type$/;"	p	class:boost::interprocess::xsi_named_mutex	access:private	signature:( detail::create_enum_t type , const char *path , boost::uint8_t id , int perm)
priv_open_or_create	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline bool xsi_named_mutex::priv_open_or_create$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:(detail::create_enum_t type, const char *path, boost::uint8_t id, int perm)
priv_open_or_create	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   bool priv_open_or_create(detail::create_enum_t type, const char *filename, mode_t mode, std::size_t size);$/;"	p	class:boost::interprocess::windows_shared_memory	access:private	signature:(detail::create_enum_t type, const char *filename, mode_t mode, std::size_t size)
priv_open_or_create	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline bool windows_shared_memory::priv_open_or_create$/;"	f	class:boost::interprocess::windows_shared_memory	signature:(detail::create_enum_t type, const char *filename, mode_t mode, std::size_t size)
priv_open_or_create_name_id	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   bool priv_open_or_create_name_id( detail::create_enum_t type$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:private	signature:( detail::create_enum_t type , const char *shmname , boost::uint8_t id , mode_t mode , std::size_t size)
priv_open_or_create_name_id	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline bool xsi_shared_memory_device::priv_open_or_create_name_id$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(detail::create_enum_t type, const char *filepath, mode_t mode, std::size_t size)
priv_open_or_create_name_only	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   bool priv_open_or_create_name_only( detail::create_enum_t type$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:private	signature:( detail::create_enum_t type , const char *shmname , mode_t mode , std::size_t size)
priv_open_or_create_name_only	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline bool xsi_shared_memory_device::priv_open_or_create_name_only$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(detail::create_enum_t type, const char *shmname, mode_t mode, std::size_t size)
priv_pop_back_aux	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_pop_back_aux()$/;"	f	class:boost::container::deque	access:private	signature:()
priv_pop_front_aux	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_pop_front_aux()$/;"	f	class:boost::container::deque	access:private	signature:()
priv_prev_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   block_ctrl * priv_prev_block(block_ctrl *ptr);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(block_ctrl *ptr)
priv_prev_block	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::priv_prev_block$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(typename rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::block_ctrl *ptr)
priv_prev_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^      priv_prev_block_if_free$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *ptr)
priv_prev_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   std::pair<block_ctrl*, block_ctrl*>priv_prev_block_if_free(block_ctrl *ptr);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(block_ctrl *ptr)
priv_prev_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      priv_prev_block_if_free$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(typename simple_seq_fit_impl<MutexFamily, VoidPointer>::block_ctrl *ptr)
priv_prev_block_if_free	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   std::pair<block_ctrl*, block_ctrl*>priv_prev_block_if_free(block_ctrl *ptr);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(block_ctrl *ptr)
priv_push_back	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_push_back(const value_type &t)$/;"	f	class:boost::container::deque	access:private	signature:(const value_type &t)
priv_push_back	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void priv_push_back(const value_type &t)$/;"	f	class:boost::container::stable_vector	access:private	signature:(const value_type &t)
priv_push_back	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_push_back(const T &x) $/;"	f	class:boost::container::vector	access:private	signature:(const T &x)
priv_push_back_simple_available	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   bool priv_push_back_simple_available() const$/;"	f	class:boost::container::deque	access:private	signature:() const
priv_push_back_simple_commit	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_push_back_simple_commit()$/;"	f	class:boost::container::deque	access:private	signature:()
priv_push_back_simple_pos	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void *priv_push_back_simple_pos() const$/;"	f	class:boost::container::deque	access:private	signature:() const
priv_push_front	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_push_front(const value_type &t)$/;"	f	class:boost::container::deque	access:private	signature:(const value_type &t)
priv_push_front	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void priv_push_front(const value_type &x)$/;"	f	class:boost::container::slist	access:private	signature:(const value_type &x)
priv_push_front_simple_available	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   bool priv_push_front_simple_available() const$/;"	f	class:boost::container::deque	access:private	signature:() const
priv_push_front_simple_commit	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_push_front_simple_commit()$/;"	f	class:boost::container::deque	access:private	signature:()
priv_push_front_simple_pos	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void *priv_push_front_simple_pos() const$/;"	f	class:boost::container::deque	access:private	signature:() const
priv_range_check	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_range_check(size_type n) const $/;"	f	class:boost::container::deque	access:public	signature:(size_type n) const
priv_range_initialize	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_range_initialize(FwdIt first, FwdIt last, std::forward_iterator_tag)$/;"	f	class:boost::container::deque	access:private	signature:(FwdIt first, FwdIt last, std::forward_iterator_tag)
priv_range_initialize	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_range_initialize(InpIt first, InpIt last, std::input_iterator_tag)$/;"	f	class:boost::container::deque	access:private	signature:(InpIt first, InpIt last, std::input_iterator_tag)
priv_range_initialize	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_range_initialize(ForwardIter f, ForwardIter l, $/;"	f	class:boost::container::basic_string	access:private	signature:(ForwardIter f, ForwardIter l, std::forward_iterator_tag)
priv_range_initialize	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_range_initialize(InputIter f, InputIter l)$/;"	f	class:boost::container::basic_string	access:private	signature:(InputIter f, InputIter l)
priv_range_initialize	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_range_initialize(InputIter f, InputIter l,$/;"	f	class:boost::container::basic_string	access:private	signature:(InputIter f, InputIter l, std::input_iterator_tag)
priv_range_insert	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_range_insert(const_iterator pos, InIt first, InIt last, std::input_iterator_tag)$/;"	f	class:boost::container::vector	access:private	signature:(const_iterator pos, InIt first, InIt last, std::input_iterator_tag)
priv_range_insert	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_range_insert(pointer pos, const size_type n, advanced_insert_aux_int_t &interf)$/;"	f	class:boost::container::vector	access:private	signature:(pointer pos, const size_type n, advanced_insert_aux_int_t &interf)
priv_range_insert	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_range_insert(pointer pos, FwdIt first, FwdIt last, std::forward_iterator_tag)$/;"	f	class:boost::container::vector	access:private	signature:(pointer pos, FwdIt first, FwdIt last, std::forward_iterator_tag)
priv_range_insert_expand_backwards	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_range_insert_expand_backwards$/;"	f	class:boost::container::vector	access:private	signature:(T* new_start, size_type new_capacity, T* pos, const size_type n, advanced_insert_aux_int_t &interf)
priv_range_insert_expand_forward	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_range_insert_expand_forward(T* pos, size_type n, advanced_insert_aux_int_t &interf)$/;"	f	class:boost::container::vector	access:private	signature:(T* pos, size_type n, advanced_insert_aux_int_t &interf)
priv_range_insert_new_allocation	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_range_insert_new_allocation$/;"	f	class:boost::container::vector	access:private	signature:(T* new_start, size_type new_cap, T* pos, size_type n, advanced_insert_aux_int_t &interf)
priv_reallocate_map	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void priv_reallocate_map(size_type nodes_to_add, bool add_at_front)$/;"	f	class:boost::container::deque	access:private	signature:(size_type nodes_to_add, bool add_at_front)
priv_reinsert_nodes_in_block	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void priv_reinsert_nodes_in_block(multiallocation_chain &chain, std::size_t n)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:(multiallocation_chain &chain, std::size_t n)
priv_remove_dead_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   static bool priv_remove_dead_memory(info_t *info, const char *path);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:private	signature:(info_t *info, const char *path)
priv_remove_dead_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline bool xsi_shared_memory_device::priv_remove_dead_memory$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(xsi_shared_memory_device::info_t *info, const char *path)
priv_replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& priv_replace(iterator first, iterator last,$/;"	f	class:boost::container::basic_string	access:private	signature:(iterator first, iterator last, ForwardIter f, ForwardIter l, std::forward_iterator_tag)
priv_replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& priv_replace(iterator first, iterator last,$/;"	f	class:boost::container::basic_string	access:private	signature:(iterator first, iterator last, InputIter f, InputIter l, std::input_iterator_tag)
priv_replace_dispatch	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& priv_replace_dispatch(iterator first, iterator last,$/;"	f	class:boost::container::basic_string	access:private	signature:(iterator first, iterator last, InputIter f, InputIter l, containers_detail::false_)
priv_replace_dispatch	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& priv_replace_dispatch(iterator first, iterator last,$/;"	f	class:boost::container::basic_string	access:private	signature:(iterator first, iterator last, Integer n, Integer x, containers_detail::true_)
priv_reserve_elements_at_back	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator priv_reserve_elements_at_back(size_type n) $/;"	f	class:boost::container::deque	access:private	signature:(size_type n)
priv_reserve_elements_at_front	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   iterator priv_reserve_elements_at_front(size_type n) $/;"	f	class:boost::container::deque	access:private	signature:(size_type n)
priv_set_node	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      void priv_set_node(index_pointer new_node) $/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:(index_pointer new_node)
priv_shrink	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   bool priv_shrink(void *ptr$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(void *ptr ,std::size_t max_size, std::size_t preferred_size ,std::size_t &received_size)
priv_shrink	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   priv_shrink (void *ptr$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(void *ptr ,std::size_t max_size ,std::size_t preferred_size ,std::size_t &received_size)
priv_shrink_to_fit	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_shrink_to_fit(allocator_v1)$/;"	f	class:boost::container::vector	access:private	signature:(allocator_v1)
priv_shrink_to_fit	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void priv_shrink_to_fit(allocator_v2)$/;"	f	class:boost::container::vector	access:private	signature:(allocator_v2)
priv_size	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type priv_size() const$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:() const
priv_size	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_size(size_type sz)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(size_type sz)
priv_storage	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type priv_storage() const$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:() const
priv_storage	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_storage(size_type storage)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(size_type storage)
priv_take_first_node	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   node_t *priv_take_first_node()$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private	signature:()
priv_terminate_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_terminate_string() $/;"	f	class:boost::container::basic_string	access:private	signature:()
priv_uninitialized_copy	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type priv_uninitialized_copy(InpIt first, InpIt last, FwdIt dest)$/;"	f	class:boost::container::basic_string	access:private	signature:(InpIt first, InpIt last, FwdIt dest)
priv_uninitialized_copy_all_to	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   void priv_uninitialized_copy_all_to(const index_tuple<IdxPack...>&, Iterator p)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:private	signature:(const index_tuple<IdxPack...>&, Iterator p)
priv_uninitialized_copy_some_and_update	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   void priv_uninitialized_copy_some_and_update(const index_tuple<IdxPack...>&, Iterator p, difference_type division_count, bool first_n)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:private	signature:(const index_tuple<IdxPack...>&, Iterator p, difference_type division_count, bool first_n)
priv_uninitialized_fill_n	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void priv_uninitialized_fill_n(FwdIt first, Count count, const CharT val)$/;"	f	class:boost::container::basic_string	access:private	signature:(FwdIt first, Count count, const CharT val)
priv_upper_bound	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   RanIt priv_upper_bound(RanIt first, RanIt last,$/;"	f	class:boost::container::containers_detail::flat_tree	access:private	signature:(RanIt first, RanIt last, const key_type & key) const
Protect	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  Protect;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
prot_anonymous_construct	/usr/include/boost/interprocess/segment_manager.hpp	/^   void * prot_anonymous_construct$/;"	f	class:boost::interprocess::segment_manager_base	access:protected	signature:(std::size_t num, bool dothrow, detail::in_place_interface &table)
prot_anonymous_destroy	/usr/include/boost/interprocess/segment_manager.hpp	/^   void prot_anonymous_destroy(const void *object, detail::in_place_interface &table)$/;"	f	class:boost::interprocess::segment_manager_base	access:protected	signature:(const void *object, detail::in_place_interface &table)
prot_deallocate	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void prot_deallocate()$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:protected	signature:()
prot_decr	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      void prot_decr() { --m_it; }$/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:protected	signature:()
prot_decr	/usr/include/boost/interprocess/containers/container/list.hpp	/^      void prot_decr() { --m_it; }$/;"	f	class:boost::container::list::const_iterator	access:protected	signature:()
prot_destroy_all	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void prot_destroy_all()$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:protected	signature:()
prot_incr	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      void prot_incr() { ++m_it; }$/;"	f	class:boost::container::containers_detail::rbtree::const_iterator	access:protected	signature:()
prot_incr	/usr/include/boost/interprocess/containers/container/list.hpp	/^      void prot_incr() { ++m_it; }$/;"	f	class:boost::container::list::const_iterator	access:protected	signature:()
prot_incr	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      void prot_incr(){ ++m_it; }$/;"	f	class:boost::container::slist::const_iterator	access:protected	signature:()
PT	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef flat_map_intersegment<interprocess_mutex> PT;$/;"	t	class:boost::interprocess::intersegment_ptr	access:private
ptime	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   typedef boost::posix_time::ptime ptime;$/;"	t	class:boost::interprocess::message_queue	access:private
ptime_to_timespec	/usr/include/boost/interprocess/sync/posix/ptime_to_timespec.hpp	/^inline timespec ptime_to_timespec (const boost::posix_time::ptime &tm)$/;"	f	namespace:boost::interprocess::detail	signature:(const boost::posix_time::ptime &tm)
ptr_	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^      : ptr_(u.release(), boost::interprocess::forward<D>(u.get_deleter()))$/;"	f	class:boost::interprocess::unique_ptr	access:public	signature:(u.release(), boost::interprocess::forward<D>(u.get_deleter()))
ptr_alloc	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const ptr_alloc_t &ptr_alloc() const $/;"	f	class:boost::container::deque_base	access:protected	signature:() const
ptr_alloc	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   ptr_alloc_t &ptr_alloc() $/;"	f	class:boost::container::deque_base	access:protected	signature:()
ptr_alloc_cptr	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename ptr_alloc_t::const_pointer     ptr_alloc_cptr;$/;"	t	class:boost::container::deque_base	access:public
ptr_alloc_cptr	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename ptr_alloc_t::const_pointer    ptr_alloc_cptr;$/;"	t	class:boost::container::deque	access:public
ptr_alloc_cref	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename ptr_alloc_t::const_reference   ptr_alloc_cref;$/;"	t	class:boost::container::deque_base	access:public
ptr_alloc_cref	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename ptr_alloc_t::const_reference  ptr_alloc_cref;$/;"	t	class:boost::container::deque	access:public
ptr_alloc_ptr	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename ptr_alloc_t::pointer           ptr_alloc_ptr;$/;"	t	class:boost::container::deque_base	access:public
ptr_alloc_ptr	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename ptr_alloc_t::pointer          ptr_alloc_ptr;$/;"	t	class:boost::container::deque	access:public
ptr_alloc_ref	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename ptr_alloc_t::reference         ptr_alloc_ref;$/;"	t	class:boost::container::deque_base	access:public
ptr_alloc_ref	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename ptr_alloc_t::reference        ptr_alloc_ref;$/;"	t	class:boost::container::deque	access:public
ptr_alloc_t	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      <typename Alloc::pointer>::other             ptr_alloc_t;$/;"	t	class:boost::container::deque_base	access:public
ptr_alloc_t	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      rebind<val_alloc_ptr>::other                ptr_alloc_t;$/;"	t	class:boost::container::deque	access:public
ptr_alloc_val	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename ptr_alloc_t::value_type        ptr_alloc_val;$/;"	t	class:boost::container::deque_base	access:public
ptr_alloc_val	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename ptr_alloc_t::value_type       ptr_alloc_val;$/;"	t	class:boost::container::deque	access:public
ptr_to_segment_info_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      ,std::less<const void *> >          ptr_to_segment_info_t;$/;"	t	struct:boost::interprocess::flat_map_intersegment	access:private
purge_blocks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void purge_blocks()$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:()
purge_blocks	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void purge_blocks()$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:()
purge_chunks	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void purge_chunks()$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:()
purge_chunks	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void purge_chunks()$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:private	signature:()
push_back	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void push_back(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::deque	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
push_back	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void push_back(insert_const_ref_type t)$/;"	f	class:boost::container::deque	access:public	signature:(insert_const_ref_type t)
push_back	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void push_back(T &x) { push_back(const_cast<const T &>(x)); }$/;"	f	class:boost::container::deque	access:public	signature:(T &x)
push_back	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void push_back(void_pointer m)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:(void_pointer m)
push_back	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void push_back (insert_const_ref_type x)   $/;"	f	class:boost::container::list	access:public	signature:(insert_const_ref_type x)
push_back	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void push_back(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::list	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
push_back	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void push_back(T &x) { push_back(const_cast<const T &>(x)); }$/;"	f	class:boost::container::list	access:public	signature:(T &x)
push_back	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void push_back(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::stable_vector	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
push_back	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void push_back(insert_const_ref_type x) $/;"	f	class:boost::container::stable_vector	access:public	signature:(insert_const_ref_type x)
push_back	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void push_back(T &x) { push_back(const_cast<const T &>(x)); }$/;"	f	class:boost::container::stable_vector	access:public	signature:(T &x)
push_back	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void push_back(CharT c)$/;"	f	class:boost::container::basic_string	access:public	signature:(CharT c)
push_back	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void push_back(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::vector	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
push_back	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void push_back(insert_const_ref_type x) $/;"	f	class:boost::container::vector	access:public	signature:(insert_const_ref_type x)
push_back	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void push_back(T &x) { push_back(const_cast<const T &>(x)); }$/;"	f	class:boost::container::vector	access:public	signature:(T &x)
push_back	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      void push_back(void *addr, std::size_t size)$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:(void *addr, std::size_t size)
push_front	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void push_front(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::deque	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
push_front	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void push_front(insert_const_ref_type t)$/;"	f	class:boost::container::deque	access:public	signature:(insert_const_ref_type t)
push_front	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void push_front(T &x) { push_front(const_cast<const T &>(x)); }$/;"	f	class:boost::container::deque	access:public	signature:(T &x)
push_front	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void push_front(pointer mem)$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:(pointer mem)
push_front	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void push_front(void_pointer m)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:(void_pointer m)
push_front	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void push_front(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::list	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
push_front	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void push_front(insert_const_ref_type x)   $/;"	f	class:boost::container::list	access:public	signature:(insert_const_ref_type x)
push_front	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void push_front(T &x) { push_front(const_cast<const T &>(x)); }$/;"	f	class:boost::container::list	access:public	signature:(T &x)
push_front	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void push_front(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)$/;"	f	class:boost::container::slist	access:public	signature:(const U &u, typename containers_detail::enable_if_c<containers_detail::is_same<T, U>::value && !::boost::interprocess::is_movable<U>::value >::type* =0)
push_front	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void push_front(insert_const_ref_type x)$/;"	f	class:boost::container::slist	access:public	signature:(insert_const_ref_type x)
push_front	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void push_front(T &x) { push_front(const_cast<const T &>(x)); }$/;"	f	class:boost::container::slist	access:public	signature:(T &x)
push_in_list	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^      push_in_list(free_nodes_t &l, typename free_nodes_t::iterator &it)$/;"	f	struct:boost::container::containers_detail::private_node_pool_impl::push_in_list	access:public	signature:(free_nodes_t &l, typename free_nodes_t::iterator &it)
push_in_list	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   struct push_in_list$/;"	s	class:boost::container::containers_detail::private_node_pool_impl	access:private
put_in_pool	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void put_in_pool(node_type_ptr_t p)$/;"	f	class:boost::container::stable_vector	access:private	signature:(node_type_ptr_t p)
queue_free_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void queue_free_msg()$/;"	f	class:boost::interprocess::detail::mq_hdr_t	access:public	signature:()
r	/usr/include/boost/interprocess/containers/container/string.hpp	/^      long_raw_t  r;$/;"	m	union:boost::container::containers_detail::basic_string_base::repr_t	access:public
raw_allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^      raw_allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_size,$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(boost::interprocess::allocation_type command, std::size_t limit_size, std::size_t preferred_size,std::size_t &received_size, void *reuse_ptr = 0, std::size_t sizeof_object = 1)
raw_allocation_command	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   raw_allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_objects,$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(boost::interprocess::allocation_type command, std::size_t limit_objects, std::size_t preferred_objects,std::size_t &received_objects, void *reuse_ptr, std::size_t sizeof_object)
raw_allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^     raw_allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_object,$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(boost::interprocess::allocation_type command, std::size_t limit_object, std::size_t preferred_object,std::size_t &received_object, void *reuse_ptr = 0, std::size_t sizeof_object = 1)
raw_allocation_command	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   raw_allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_objects,$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(boost::interprocess::allocation_type command, std::size_t limit_objects, std::size_t preferred_objects,std::size_t &received_objects, void *reuse_ptr, std::size_t sizeof_object)
raw_allocation_command	/usr/include/boost/interprocess/segment_manager.hpp	/^      raw_allocation_command  (boost::interprocess::allocation_type command,   std::size_t limit_objects,$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(boost::interprocess::allocation_type command, std::size_t limit_objects, std::size_t preferred_objects,std::size_t &received_objects, void *reuse_ptr = 0, std::size_t sizeof_object = 1)
raw_mapped_region_creator	/usr/include/boost/interprocess/anonymous_shared_memory.hpp	/^   class raw_mapped_region_creator$/;"	c	namespace:boost::interprocess::detail
rbegin	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::deque	access:public	signature:() const
rbegin	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   reverse_iterator rbegin() $/;"	f	class:boost::container::deque	access:public	signature:()
rbegin	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
rbegin	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   reverse_iterator rbegin() $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:()
rbegin	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_reverse_iterator rbegin() const$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
rbegin	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   reverse_iterator rbegin()$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:()
rbegin	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
rbegin	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
rbegin	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   reverse_iterator rbegin() $/;"	f	class:boost::container::flat_map	access:public	signature:()
rbegin	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   reverse_iterator rbegin() $/;"	f	class:boost::container::flat_multimap	access:public	signature:()
rbegin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
rbegin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
rbegin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   reverse_iterator rbegin() $/;"	f	class:boost::container::flat_multiset	access:public	signature:()
rbegin	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   reverse_iterator rbegin() $/;"	f	class:boost::container::flat_set	access:public	signature:()
rbegin	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const_reverse_iterator rbegin() const$/;"	f	class:boost::container::list	access:public	signature:() const
rbegin	/usr/include/boost/interprocess/containers/container/list.hpp	/^   reverse_iterator rbegin()$/;"	f	class:boost::container::list	access:public	signature:()
rbegin	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::map	access:public	signature:() const
rbegin	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
rbegin	/usr/include/boost/interprocess/containers/container/map.hpp	/^   reverse_iterator rbegin() $/;"	f	class:boost::container::map	access:public	signature:()
rbegin	/usr/include/boost/interprocess/containers/container/map.hpp	/^   reverse_iterator rbegin() $/;"	f	class:boost::container::multimap	access:public	signature:()
rbegin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
rbegin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::set	access:public	signature:() const
rbegin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   reverse_iterator rbegin() $/;"	f	class:boost::container::multiset	access:public	signature:()
rbegin	/usr/include/boost/interprocess/containers/container/set.hpp	/^   reverse_iterator rbegin() $/;"	f	class:boost::container::set	access:public	signature:()
rbegin	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_reverse_iterator rbegin()const {return const_reverse_iterator(this->end());}$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
rbegin	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   reverse_iterator       rbegin()      {return reverse_iterator(this->end());}$/;"	f	class:boost::container::stable_vector	access:public	signature:()
rbegin	/usr/include/boost/interprocess/containers/container/string.hpp	/^   const_reverse_iterator rbegin() const $/;"	f	class:boost::container::basic_string	access:public	signature:() const
rbegin	/usr/include/boost/interprocess/containers/container/string.hpp	/^   reverse_iterator rbegin()             $/;"	f	class:boost::container::basic_string	access:public	signature:()
rbegin	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_reverse_iterator rbegin()const$/;"	f	class:boost::container::vector	access:public	signature:() const
rbegin	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   reverse_iterator rbegin()     $/;"	f	class:boost::container::vector	access:public	signature:()
rbtree	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   rbtree( ordered_range_t, InputIterator first, InputIterator last$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:( ordered_range_t, InputIterator first, InputIterator last , const key_compare& comp = key_compare(), const allocator_type& a = allocator_type())
rbtree	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   rbtree(const key_compare& comp = key_compare(), $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_compare& comp = key_compare(), const allocator_type& a = allocator_type())
rbtree	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   rbtree(const rbtree& x) $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const rbtree& x)
rbtree	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   rbtree(InputIterator first, InputIterator last, const key_compare& comp,$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(InputIterator first, InputIterator last, const key_compare& comp, const allocator_type& a, bool unique_insertion)
rbtree	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^class rbtree$/;"	c	namespace:boost::container::containers_detail	inherits:containers_detail::node_alloc_holder
rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit           (std::size_t size, std::size_t extra_hdr_bytes);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(std::size_t size, std::size_t extra_hdr_bytes)
rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:()
rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit(const rbtree_best_fit &);$/;"	p	class:boost::interprocess::rbtree_best_fit	access:private	signature:(const rbtree_best_fit &)
rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   rbtree_best_fit(std::size_t size, std::size_t extra_hdr_bytes)$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(std::size_t size, std::size_t extra_hdr_bytes)
rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^class rbtree_best_fit$/;"	c	namespace:boost::interprocess
rbtree_const_pointer	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef const_pointer                              rbtree_const_pointer;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
rbtree_const_reference	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef const_reference                            rbtree_const_reference;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
rbtree_difference_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef difference_type                            rbtree_difference_type;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
rbtree_hook	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^struct rbtree_hook$/;"	s	namespace:boost::container::containers_detail
rbtree_node	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   rbtree_node()$/;"	f	struct:boost::container::containers_detail::rbtree_node	access:public	signature:()
rbtree_node	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   rbtree_node(Args &&...args)$/;"	f	struct:boost::container::containers_detail::rbtree_node	access:public	signature:(Args &&....args)
rbtree_node	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   rbtree_node(const rbtree_node &other)$/;"	f	struct:boost::container::containers_detail::rbtree_node	access:public	signature:(const rbtree_node &other)
rbtree_node	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^struct rbtree_node$/;"	s	namespace:boost::container::containers_detail	inherits:rbtree_hook::type
rbtree_pointer	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef pointer                                    rbtree_pointer;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
rbtree_reference	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef reference                                  rbtree_reference;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
rbtree_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^struct rbtree_type$/;"	s	namespace:boost::container::containers_detail
rbtree_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^struct rbtree_type< std::pair<T1, T2> >$/;"	s	namespace:boost::container::containers_detail
rdbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:() const
rdbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:() const
rdbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   basic_bufferbuf<CharT, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:() const
rdbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf<CharVector, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:() const
rdbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf<CharVector, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:() const
rdbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   basic_vectorbuf<CharVector, CharTraits>* rdbuf() const$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:() const
readjust_end_node	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void readjust_end_node()$/;"	f	class:boost::container::stable_vector	access:private	signature:()
read_only	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^typedef enum { read_only      = winapi::generic_read$/;"	e	enum:boost::interprocess::__anon10
read_only_error	/usr/include/boost/interprocess/errors.hpp	/^   read_only_error,$/;"	e	enum:boost::interprocess::error_code_t
read_write	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^             , read_write     = winapi::generic_read | winapi::generic_write$/;"	e	enum:boost::interprocess::__anon10
rebind	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::adaptive_pool	access:public
rebind	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::detail::adaptive_pool_base	access:public
rebind	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::detail::adaptive_pool_v1	access:public
rebind	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::allocator	access:public
rebind	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::cached_adaptive_pool	access:public
rebind	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::detail::cached_adaptive_pool_v1	access:public
rebind	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::cached_node_allocator	access:public
rebind	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::detail::cached_node_allocator_v1	access:public
rebind	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::detail::node_allocator_base	access:public
rebind	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::detail::node_allocator_v1	access:public
rebind	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::node_allocator	access:public
rebind	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
rebind	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::detail::private_adaptive_pool_v1	access:public
rebind	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::private_adaptive_pool	access:public
rebind	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::detail::private_node_allocator_base	access:public
rebind	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::detail::private_node_allocator_v1	access:public
rebind	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   struct rebind$/;"	s	class:boost::interprocess::private_node_allocator	access:public
receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void receive (void *buffer,           std::size_t buffer_size, $/;"	p	class:boost::interprocess::message_queue	access:public	signature:(void *buffer, std::size_t buffer_size, std::size_t &recvd_size,unsigned int &priority)
receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline void message_queue::receive(void *buffer,              std::size_t buffer_size, $/;"	f	class:boost::interprocess::message_queue	signature:(void *buffer, std::size_t buffer_size, std::size_t &recvd_size, unsigned int &priority)
recursive_mutex_type	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^   typedef boost::interprocess::interprocess_recursive_mutex       recursive_mutex_type;$/;"	t	struct:boost::interprocess::mutex_family	access:public
recursive_mutex_type	/usr/include/boost/interprocess/sync/mutex_family.hpp	/^   typedef boost::interprocess::null_mutex                   recursive_mutex_type;$/;"	t	struct:boost::interprocess::null_mutex_family	access:public
RecyclingCloner	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      RecyclingCloner(AllocHolder &holder, Icont &irbtree)$/;"	f	class:boost::container::containers_detail::rbtree::RecyclingCloner	access:public	signature:(AllocHolder &holder, Icont &irbtree)
RecyclingCloner	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   class RecyclingCloner$/;"	c	class:boost::container::containers_detail::rbtree	access:private
reference	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
reference	/usr/include/boost/interprocess/allocators/allocator.hpp	/^                     <value_type>::type         reference;$/;"	t	class:boost::interprocess::allocator	access:public
reference	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::detail::array_allocation_impl	access:public
reference	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::detail::node_pool_allocation_impl	access:public
reference	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
reference	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
reference	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^                     <value_type>::type                  reference;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
reference	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef val_alloc_cref                    reference;$/;"	t	class:boost::container::deque_base::const_iterator	access:public
reference	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef val_alloc_ref                     reference;$/;"	t	class:boost::container::deque_base::iterator	access:public
reference	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef val_alloc_ref                        reference;$/;"	t	class:boost::container::deque	access:public
reference	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef typename vector_t::reference               reference;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
reference	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      typedef rbtree_reference     reference;$/;"	t	class:boost::container::containers_detail::rbtree::iterator	access:public
reference	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename A::reference                      reference;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
reference	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::reference              reference;$/;"	t	class:boost::container::flat_map	access:public
reference	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::reference              reference;$/;"	t	class:boost::container::flat_multimap	access:public
reference	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::reference              reference;$/;"	t	class:boost::container::flat_multiset	access:public
reference	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::reference              reference;$/;"	t	class:boost::container::flat_set	access:public
reference	/usr/include/boost/interprocess/containers/container/list.hpp	/^      typedef list_reference     reference;$/;"	t	class:boost::container::list::iterator	access:public
reference	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename A::reference                   reference;$/;"	t	class:boost::container::list	access:public
reference	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::reference              reference;$/;"	t	class:boost::container::map	access:public
reference	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::reference              reference;$/;"	t	class:boost::container::multimap	access:public
reference	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::reference              reference;$/;"	t	class:boost::container::multiset	access:public
reference	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::reference              reference;$/;"	t	class:boost::container::set	access:public
reference	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      typedef list_reference     reference;$/;"	t	class:boost::container::slist::iterator	access:public
reference	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename A::reference                   reference;$/;"	t	class:boost::container::slist	access:public
reference	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef void                reference;$/;"	t	class:std::insert_iterator	access:public
reference	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef Reference                         reference;$/;"	t	class:boost::container::stable_vector_detail::iterator	access:public
reference	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef typename Allocator::reference              reference;$/;"	t	class:boost::container::stable_vector	access:public
reference	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef typename A::reference                   reference;$/;"	t	class:boost::container::basic_string	access:public
reference	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef const value_type&                                               reference;$/;"	t	class:boost::container::containers_detail::vector_const_iterator	access:public
reference	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename A::reference                   reference;$/;"	t	class:boost::container::vector	access:public
reference	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef value_type&                                               reference;$/;"	t	class:boost::container::containers_detail::vector_iterator	access:public
reference	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef typename detail::add_reference<T>::type reference;$/;"	t	class:boost::interprocess::intersegment_ptr	access:public
reference	/usr/include/boost/interprocess/detail/move.hpp	/^      , value_type & >::type                                               reference;$/;"	t	class:boost::interprocess::move_iterator	access:public
reference	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef value_type &&                                                   reference;$/;"	t	class:boost::interprocess::move_iterator	access:public
reference	/usr/include/boost/interprocess/offset_ptr.hpp	/^      add_reference<PointedType>::type       reference;$/;"	t	class:boost::interprocess::offset_ptr	access:public
reference	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef typename detail::add_reference<T>::type reference;$/;"	t	class:boost::interprocess::scoped_ptr	access:private
reference	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^                     <value_type>::type                        reference;$/;"	t	class:boost::interprocess::shared_ptr	access:public
reference	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^                     <T>::type            reference;$/;"	t	class:boost::interprocess::weak_ptr	access:private
ref_release	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^   bool ref_release() \/\/ nothrow$/;"	f	class:boost::interprocess::detail::sp_counted_base	access:public	signature:()
RegCloseKey_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long          (__stdcall * RegCloseKey_t)(void *);$/;"	t	namespace:boost::interprocess::winapi
RegionSize	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  RegionSize;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
RegOpenKeyEx_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long          (__stdcall * RegOpenKeyEx_t)(void *, const char *, unsigned long, unsigned long, void **);$/;"	t	namespace:boost::interprocess::winapi
RegOpenKey_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long          (__stdcall * RegOpenKey_t)(void *, const char *, void **);$/;"	t	namespace:boost::interprocess::winapi
RegQueryValueEx_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long          (__stdcall * RegQueryValueEx_t)(void *, const char *, unsigned long*, unsigned long*, unsigned char *, unsigned long*);$/;"	t	namespace:boost::interprocess::winapi
RegQueryValue_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long          (__stdcall * RegQueryValue_t)(void *, const char *, char *, long*);$/;"	t	namespace:boost::interprocess::winapi
reg_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   reg_closer(RegCloseKey_t func, void *key) : func_(func), key_(key){}$/;"	f	struct:boost::interprocess::winapi::reg_closer	access:public	signature:(RegCloseKey_t func, void *key)
reg_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct reg_closer$/;"	s	namespace:boost::interprocess::winapi
reinterpret_cast_tag	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^struct reinterpret_cast_tag {};$/;"	s	namespace:boost::interprocess::detail
reinterpret_pointer_cast	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^boost::interprocess::intersegment_ptr<T> reinterpret_pointer_cast(const boost::interprocess::intersegment_ptr<U> &r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::intersegment_ptr<U> &r)
reinterpret_pointer_cast	/usr/include/boost/interprocess/offset_ptr.hpp	/^   reinterpret_pointer_cast(boost::interprocess::offset_ptr<U> const & r)$/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::offset_ptr<U> const & r)
relative	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      relative_addressing  relative;$/;"	m	union:boost::interprocess::intersegment_base::members_t	access:public
relative_addressing	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   struct relative_addressing$/;"	s	struct:boost::interprocess::intersegment_base	access:public
relative_calculate_begin_addr	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void *relative_calculate_begin_addr() const$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:() const
relative_set_begin_from_base	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void relative_set_begin_from_base(void *addr)$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:(void *addr)
relative_size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   std::size_t relative_size() const$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:() const
relative_size_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t relative_size_bits =$/;"	m	struct:boost::interprocess::intersegment_base	access:public
release	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   void release()$/;"	f	struct:boost::container::containers_detail::null_scoped_array_deallocator	access:public	signature:()
release	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   void release()$/;"	f	struct:boost::container::containers_detail::null_scoped_destructor_n	access:public	signature:()
release	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   void release()$/;"	f	struct:boost::container::containers_detail::scoped_array_deallocator	access:public	signature:()
release	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   void release()$/;"	f	struct:boost::container::containers_detail::scoped_destructor_n	access:public	signature:()
release	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void release()$/;"	f	struct:boost::container::containers_detail::scoped_deallocator	access:public	signature:()
release	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void release()$/;"	f	class:boost::container::stable_vector_detail::clear_on_destroy	access:public	signature:()
release	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void release()$/;"	f	class:boost::interprocess::detail::mem_algo_deallocator	access:public	signature:()
release	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void release() \/\/ nothrow$/;"	f	class:boost::interprocess::detail::sp_counted_impl_pd	access:public	signature:()
release	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   pointer release()$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:()
release	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      void release()$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	access:public	signature:()
release	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      void release()$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback	access:public	signature:()
release	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      void release()       { mp_cond = 0; }$/;"	f	class:boost::interprocess::detail::condition_initializer	access:public	signature:()
release	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      void release() {mp_barrier = 0; }$/;"	f	class:boost::interprocess::detail::barrier_initializer	access:public	signature:()
release	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^      void release() {mp_mut = 0; }$/;"	f	class:boost::interprocess::detail::mutex_initializer	access:public	signature:()
release	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   mutex_type* release()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
release	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   mutex_type* release()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
release	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   mutex_type* release()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
ReleaseMutex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall ReleaseMutex(void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
ReleaseSemaphore	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall ReleaseSemaphore(void *, long, long *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, long, long *)
release_file_lock	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool release_file_lock(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd)
release_file_lock_sharable	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool release_file_lock_sharable(file_handle_t hnd)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd)
release_mutex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline int release_mutex(void *handle)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle)
release_semaphore	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline int release_semaphore(void *handle, long release_count, long *prev_count)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, long release_count, long *prev_count)
remove	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void remove(const T& value)$/;"	f	class:boost::container::list	access:public	signature:(const T& value)
remove	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void remove(const T& value)$/;"	f	class:boost::container::slist	access:public	signature:(const T& value)
remove	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::detail::file_wrapper	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline bool file_wrapper::remove(const char *filename)$/;"	f	class:boost::interprocess::detail::file_wrapper	signature:(const char *filename)
remove	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   static bool remove(int shmid);$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:(int shmid)
remove	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^inline bool xsi_shared_memory::remove(int shmid)$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:(int shmid)
remove	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   static bool remove(const char *shmname);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(const char *shmname)
remove	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   static bool remove(int shmid);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(int shmid)
remove	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline bool xsi_shared_memory_device::remove(const char *shmname)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(const char *shmname)
remove	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline bool xsi_shared_memory_device::remove(int shmid)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(int shmid)
remove	/usr/include/boost/interprocess/file_mapping.hpp	/^   static bool remove(const char *filename);$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:(const char *filename)
remove	/usr/include/boost/interprocess/file_mapping.hpp	/^inline bool file_mapping::remove(const char *filename)$/;"	f	class:boost::interprocess::file_mapping	signature:(const char *filename)
remove	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::message_queue	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline bool message_queue::remove(const char *name)$/;"	f	class:boost::interprocess::message_queue	signature:(const char *name)
remove	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline bool shared_memory_object::remove(const char *filename)$/;"	f	class:boost::interprocess::shared_memory_object	signature:(const char *filename)
remove	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline bool named_condition::remove(const char *name)$/;"	f	class:boost::interprocess::named_condition	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline bool named_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::named_mutex	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline bool named_recursive_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline bool named_semaphore::remove(const char *name)$/;"	f	class:boost::interprocess::named_semaphore	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   static bool remove(const char *name);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::remove(const char *name)$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   static bool remove(const char *name)$/;"	f	class:boost::interprocess::detail::named_semaphore_wrapper	access:public	signature:(const char *name)
remove	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   bool remove();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:()
remove	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline bool xsi_named_mutex::remove()$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
RemoveDirectoryA	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall RemoveDirectoryA(const char *lpPathName);$/;"	p	namespace:boost::interprocess::winapi	signature:(const char *lpPathName)
remove_directory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool remove_directory(const char *lpPathName)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *lpPathName)
remove_file_on_destroy	/usr/include/boost/interprocess/file_mapping.hpp	/^   remove_file_on_destroy(const char *name)$/;"	f	class:boost::interprocess::remove_file_on_destroy	access:public	signature:(const char *name)
remove_file_on_destroy	/usr/include/boost/interprocess/file_mapping.hpp	/^class remove_file_on_destroy$/;"	c	namespace:boost::interprocess
remove_if	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void remove_if(Pred pred)$/;"	f	class:boost::container::list	access:public	signature:(Pred pred)
remove_if	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void remove_if(Pred pred)$/;"	f	class:boost::container::slist	access:public	signature:(Pred pred)
remove_shared_memory_on_destroy	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   remove_shared_memory_on_destroy(const char *name)$/;"	f	class:boost::interprocess::remove_shared_memory_on_destroy	access:public	signature:(const char *name)
remove_shared_memory_on_destroy	/usr/include/boost/interprocess/shared_memory_object.hpp	/^class remove_shared_memory_on_destroy$/;"	c	namespace:boost::interprocess
ren	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   } ren;$/;"	m	union:boost::interprocess::winapi::ntquery_mem_t	typeref:struct:boost::interprocess::winapi::ntquery_mem_t::ren_t	access:public
rend	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   const_reverse_iterator rend() const $/;"	f	class:boost::container::deque	access:public	signature:() const
rend	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   reverse_iterator rend() $/;"	f	class:boost::container::deque	access:public	signature:()
rend	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_reverse_iterator rend() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
rend	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   reverse_iterator rend() $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:()
rend	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_reverse_iterator rend() const$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
rend	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   reverse_iterator rend()$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:()
rend	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_reverse_iterator rend() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
rend	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_reverse_iterator rend() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
rend	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   reverse_iterator rend() $/;"	f	class:boost::container::flat_map	access:public	signature:()
rend	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   reverse_iterator rend() $/;"	f	class:boost::container::flat_multimap	access:public	signature:()
rend	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_reverse_iterator rend() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
rend	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_reverse_iterator rend() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
rend	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   reverse_iterator rend()$/;"	f	class:boost::container::flat_multiset	access:public	signature:()
rend	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   reverse_iterator rend()$/;"	f	class:boost::container::flat_set	access:public	signature:()
rend	/usr/include/boost/interprocess/containers/container/list.hpp	/^   const_reverse_iterator rend() const$/;"	f	class:boost::container::list	access:public	signature:() const
rend	/usr/include/boost/interprocess/containers/container/list.hpp	/^   reverse_iterator rend()$/;"	f	class:boost::container::list	access:public	signature:()
rend	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_reverse_iterator rend() const $/;"	f	class:boost::container::map	access:public	signature:() const
rend	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_reverse_iterator rend() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
rend	/usr/include/boost/interprocess/containers/container/map.hpp	/^   reverse_iterator rend() $/;"	f	class:boost::container::map	access:public	signature:()
rend	/usr/include/boost/interprocess/containers/container/map.hpp	/^   reverse_iterator rend() $/;"	f	class:boost::container::multimap	access:public	signature:()
rend	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_reverse_iterator rend() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
rend	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_reverse_iterator rend() const $/;"	f	class:boost::container::set	access:public	signature:() const
rend	/usr/include/boost/interprocess/containers/container/set.hpp	/^   reverse_iterator rend() $/;"	f	class:boost::container::multiset	access:public	signature:()
rend	/usr/include/boost/interprocess/containers/container/set.hpp	/^   reverse_iterator rend() $/;"	f	class:boost::container::set	access:public	signature:()
rend	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   const_reverse_iterator rend()const   {return const_reverse_iterator(this->begin());}$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
rend	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   reverse_iterator       rend()        {return reverse_iterator(this->begin());}$/;"	f	class:boost::container::stable_vector	access:public	signature:()
rend	/usr/include/boost/interprocess/containers/container/string.hpp	/^   const_reverse_iterator rend()   const $/;"	f	class:boost::container::basic_string	access:public	signature:() const
rend	/usr/include/boost/interprocess/containers/container/string.hpp	/^   reverse_iterator rend()               $/;"	f	class:boost::container::basic_string	access:public	signature:()
rend	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   const_reverse_iterator rend()  const$/;"	f	class:boost::container::vector	access:public	signature:() const
rend	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   reverse_iterator rend()       $/;"	f	class:boost::container::vector	access:public	signature:()
ren_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   struct ren_t$/;"	s	union:boost::interprocess::winapi::ntquery_mem_t	access:public
repeat_it	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef repeat_iterator<T, difference_type>     repeat_it;$/;"	t	class:boost::container::vector	access:private
repeat_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   explicit repeat_iterator(T &ref, Difference range_size)$/;"	f	class:boost::container::repeat_iterator	access:public	signature:(T &ref, Difference range_size)
repeat_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   repeat_iterator()$/;"	f	class:boost::container::repeat_iterator	access:public	signature:()
repeat_iterator	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^class repeat_iterator$/;"	c	namespace:boost::container	inherits:std::iterator
repeat_move_it	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef boost::interprocess::move_iterator<repeat_it>         repeat_move_it;$/;"	t	class:boost::container::vector	access:private
replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& replace(iterator first, iterator last, $/;"	f	class:boost::container::basic_string	access:public	signature:(iterator first, iterator last, const basic_string& s)
replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& replace(iterator first, iterator last, $/;"	f	class:boost::container::basic_string	access:public	signature:(iterator first, iterator last, size_type n, CharT c)
replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& replace(iterator first, iterator last,$/;"	f	class:boost::container::basic_string	access:public	signature:(iterator first, iterator last, const CharT* s)
replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& replace(iterator first, iterator last,$/;"	f	class:boost::container::basic_string	access:public	signature:(iterator first, iterator last, const CharT* s, size_type n)
replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& replace(iterator first, iterator last,$/;"	f	class:boost::container::basic_string	access:public	signature:(iterator first, iterator last, InputIter f, InputIter l)
replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& replace(size_type pos, size_type n, $/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos, size_type n, const basic_string& s)
replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& replace(size_type pos, size_type n1,$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos, size_type n1, const CharT* s)
replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& replace(size_type pos, size_type n1,$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos, size_type n1, const CharT* s, size_type n2)
replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& replace(size_type pos, size_type n1,$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos, size_type n1, size_type n2, CharT c)
replace	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string& replace(size_type pos1, size_type n1,$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos1, size_type n1, const basic_string& s, size_type pos2, size_type n2)
Replace	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   int Replace;$/;"	m	struct:boost::interprocess::winapi::file_rename_information_t	access:public
repr_t	/usr/include/boost/interprocess/containers/container/string.hpp	/^   union repr_t$/;"	u	class:boost::container::containers_detail::basic_string_base	access:protected
reserve	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   void reserve(size_type count)       $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(size_type count)
reserve	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   void reserve(size_type count)       $/;"	f	class:boost::container::flat_map	access:public	signature:(size_type count)
reserve	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   void reserve(size_type count)       $/;"	f	class:boost::container::flat_multimap	access:public	signature:(size_type count)
reserve	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   void reserve(size_type count)       $/;"	f	class:boost::container::flat_multiset	access:public	signature:(size_type count)
reserve	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   void reserve(size_type count)       $/;"	f	class:boost::container::flat_set	access:public	signature:(size_type count)
reserve	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void reserve(size_type n)$/;"	f	class:boost::container::stable_vector	access:public	signature:(size_type n)
reserve	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void reserve(size_type res_arg)$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type res_arg)
reserve	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void reserve(size_type new_cap)$/;"	f	class:boost::container::vector	access:public	signature:(size_type new_cap)
reserve	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   void reserve(std::size_t n)$/;"	f	class:boost::interprocess::flat_map_index	access:public	signature:(std::size_t n)
reserve	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   void reserve(std::size_t)$/;"	f	class:boost::interprocess::iset_index	access:public	signature:(std::size_t)
reserve	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   void reserve(std::size_t new_n)$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:(std::size_t new_n)
reserve	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   void reserve(std::size_t)$/;"	f	class:boost::interprocess::map_index	access:public	signature:(std::size_t)
reserve	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   void reserve(std::size_t n)$/;"	f	class:boost::interprocess::unordered_map_index	access:public	signature:(std::size_t n)
reserve	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void reserve(typename vector_type::size_type size) $/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:(typename vector_type::size_type size)
reserve	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void reserve(typename vector_type::size_type size) $/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:(typename vector_type::size_type size)
reserve	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void reserve(typename vector_type::size_type size) $/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:(typename vector_type::size_type size)
reserve	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void reserve(typename vector_type::size_type size) $/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:(typename vector_type::size_type size)
Reserved1	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char Reserved1[SystemTimeOfDayInfoLength];$/;"	m	union:boost::interprocess::winapi::system_timeofday_information	access:public
reserve_named_objects	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void reserve_named_objects(std::size_t num)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(std::size_t num)
reserve_named_objects	/usr/include/boost/interprocess/segment_manager.hpp	/^   void reserve_named_objects(std::size_t num)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(std::size_t num)
reserve_t	/usr/include/boost/interprocess/containers/container/string.hpp	/^   struct reserve_t {};$/;"	s	class:boost::container::basic_string	access:public
reserve_unique_objects	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void reserve_unique_objects(std::size_t num)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:(std::size_t num)
reserve_unique_objects	/usr/include/boost/interprocess/segment_manager.hpp	/^   void reserve_unique_objects(std::size_t num)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(std::size_t num)
reset	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   void reset(const pointer &p = 0) \/\/ never throws$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:(const pointer &p = 0)
reset	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   void reset(const pointer &p, const Deleter &d) \/\/ never throws$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:(const pointer &p, const Deleter &d)
reset	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   void reset()$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:()
reset	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   void reset(const Pointer &p, const VoidAllocator &a = VoidAllocator(), const Deleter &d = Deleter())$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(const Pointer &p, const VoidAllocator &a = VoidAllocator(), const Deleter &d = Deleter())
reset	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   void reset(shared_ptr<Y, VoidAllocator, Deleter> const & r, const pointer &p)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r, const pointer &p)
reset	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   void reset() \/\/ never throws in 1.30+$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:()
reset_alloc_stats	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void reset_alloc_stats()$/;"	f	class:boost::container::vector	access:public	signature:()
resize	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void resize(size_type new_size) $/;"	f	class:boost::container::deque	access:public	signature:(size_type new_size)
resize	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void resize(size_type new_size, const value_type& x) $/;"	f	class:boost::container::deque	access:public	signature:(size_type new_size, const value_type& x)
resize	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void resize(size_type new_size)$/;"	f	class:boost::container::list	access:public	signature:(size_type new_size)
resize	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void resize(size_type new_size, const T& x)$/;"	f	class:boost::container::list	access:public	signature:(size_type new_size, const T& x)
resize	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void resize(size_type new_size)$/;"	f	class:boost::container::slist	access:public	signature:(size_type new_size)
resize	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void resize(size_type new_size, const T& x)$/;"	f	class:boost::container::slist	access:public	signature:(size_type new_size, const T& x)
resize	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void resize(size_type n)$/;"	f	class:boost::container::stable_vector	access:public	signature:(size_type n)
resize	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void resize(size_type n, const T& t)$/;"	f	class:boost::container::stable_vector	access:public	signature:(size_type n, const T& t)
resize	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void resize(size_type n)$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type n)
resize	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void resize(size_type n, CharT c)$/;"	f	class:boost::container::basic_string	access:public	signature:(size_type n, CharT c)
resize	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void resize(size_type new_size) $/;"	f	class:boost::container::vector	access:public	signature:(size_type new_size)
resize	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void resize(size_type new_size, const T& x) $/;"	f	class:boost::container::vector	access:public	signature:(size_type new_size, const T& x)
result_type	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   typedef typename containers_detail::add_reference<T>::type result_type;$/;"	t	struct:boost::container::containers_detail::cast_functor	access:public
result_type	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      typedef std::pair<void *, std::size_t>                result_type;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public
result_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef segment_manager_iterator_value_adaptor<Iterator, intrusive> result_type;$/;"	t	struct:boost::interprocess::detail::segment_manager_iterator_transform	access:public
return_type	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      typedef bool               return_type;$/;"	t	class:boost::container::containers_detail::flat_tree::value_compare	access:private
reverse	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void reverse()$/;"	f	class:boost::container::list	access:public	signature:()
reverse	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void reverse() $/;"	f	class:boost::container::slist	access:public	signature:()
reverse_iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef std::reverse_iterator<iterator>      reverse_iterator;$/;"	t	class:boost::container::deque	access:public
reverse_iterator	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef std::reverse_iterator<iterator>            reverse_iterator;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
reverse_iterator	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef std::reverse_iterator<iterator>        reverse_iterator;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::reverse_iterator       reverse_iterator;$/;"	t	class:boost::container::flat_map	access:public
reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::reverse_iterator       reverse_iterator;$/;"	t	class:boost::container::flat_multimap	access:public
reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::reverse_iterator       reverse_iterator;$/;"	t	class:boost::container::flat_multiset	access:public
reverse_iterator	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::reverse_iterator       reverse_iterator;$/;"	t	class:boost::container::flat_set	access:public
reverse_iterator	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef std::reverse_iterator<iterator>        reverse_iterator;$/;"	t	class:boost::container::list	access:public
reverse_iterator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::reverse_iterator       reverse_iterator;$/;"	t	class:boost::container::map	access:public
reverse_iterator	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::reverse_iterator       reverse_iterator;$/;"	t	class:boost::container::multimap	access:public
reverse_iterator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::reverse_iterator       reverse_iterator;$/;"	t	class:boost::container::multiset	access:public
reverse_iterator	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::reverse_iterator       reverse_iterator;$/;"	t	class:boost::container::set	access:public
reverse_iterator	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef std::reverse_iterator<iterator>            reverse_iterator;$/;"	t	class:boost::container::stable_vector	access:public
reverse_iterator	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef std::reverse_iterator<iterator>       reverse_iterator;$/;"	t	class:boost::container::basic_string	access:public
reverse_iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      reverse_iterator;$/;"	t	class:boost::container::vector	access:public
Revision	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char Revision;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
rfind	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type rfind(CharT c, size_type pos = npos) const$/;"	f	class:boost::container::basic_string	access:public	signature:(CharT c, size_type pos = npos) const
rfind	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type rfind(const basic_string& s, size_type pos = npos) const $/;"	f	class:boost::container::basic_string	access:public	signature:(const basic_string& s, size_type pos = npos) const
rfind	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type rfind(const CharT* s, size_type pos = npos) const $/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos = npos) const
rfind	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type rfind(const CharT* s, size_type pos, size_type n) const$/;"	f	class:boost::container::basic_string	access:public	signature:(const CharT* s, size_type pos, size_type n) const
rmutex	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename MemoryAlgorithm::mutex_family::recursive_mutex_type   rmutex;$/;"	t	class:boost::interprocess::segment_manager	access:private
RootDir	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *RootDir;$/;"	m	struct:boost::interprocess::winapi::file_rename_information_t	access:public
RootDirectory	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void * RootDirectory;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
round_size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static std::size_t round_size(std::size_t orig_size)$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:(std::size_t orig_size)
RtlAppendUnicodeToString_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *RtlAppendUnicodeToString_t)(unicode_string_t *Destination, const wchar_t *Source);$/;"	t	namespace:boost::interprocess::winapi
RtlCreateUnicodeStringFromAsciiz_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef long (__stdcall *RtlCreateUnicodeStringFromAsciiz_t)(unicode_string_t *, const char *);$/;"	t	namespace:boost::interprocess::winapi
RtlFreeUnicodeString_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef void (__stdcall *RtlFreeUnicodeString_t)(unicode_string_t *);$/;"	t	namespace:boost::interprocess::winapi
RtlInitUnicodeString_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef void (__stdcall *RtlInitUnicodeString_t)( unicode_string_t *, const wchar_t * );$/;"	t	namespace:boost::interprocess::winapi
rtl_init_empty_unicode_string	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void rtl_init_empty_unicode_string(unicode_string_t *ucStr, wchar_t *buf, unsigned short bufSize)$/;"	f	namespace:boost::interprocess::winapi	signature:(unicode_string_t *ucStr, wchar_t *buf, unsigned short bufSize)
rv	/usr/include/boost/interprocess/detail/move.hpp	/^   rv();$/;"	p	class:boost::interprocess::rv	access:private	signature:()
rv	/usr/include/boost/interprocess/detail/move.hpp	/^   rv(rv const&);$/;"	p	class:boost::interprocess::rv	access:private	signature:(rv const&)
rv	/usr/include/boost/interprocess/detail/move.hpp	/^class rv : public T$/;"	c	namespace:boost::interprocess	inherits:T
r_iterator	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef repeat_iterator<T, difference_type>  r_iterator;$/;"	t	class:boost::container::deque	access:private
s	/usr/include/boost/interprocess/containers/container/string.hpp	/^      short_t     s;$/;"	m	union:boost::container::containers_detail::basic_string_base::repr_t	access:public
Sacl	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   interprocess_acl *Sacl;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
Sbz1	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char  Sbz1;$/;"	m	struct:boost::interprocess::winapi::_interprocess_acl	access:public
Sbz1	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned char Sbz1;$/;"	m	struct:boost::interprocess::winapi::_interprocess_security_descriptor	access:public
Sbz2	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned short Sbz2;$/;"	m	struct:boost::interprocess::winapi::_interprocess_acl	access:public
sched_yield	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline void sched_yield()$/;"	f	namespace:boost::interprocess::winapi	signature:()
scop	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(BOOST_INTERPROCESS_RV_REF(scoped_lock<T>) scop$/;"	m	class:boost::interprocess::sharable_lock	access:public
scop	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock(BOOST_INTERPROCESS_RV_REF(scoped_lock<T>) scop$/;"	m	class:boost::interprocess::upgradable_lock	access:public
scoped_array_deallocator	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   scoped_array_deallocator(pointer p, Allocator& a, size_type length)$/;"	f	struct:boost::container::containers_detail::scoped_array_deallocator	access:public	signature:(pointer p, Allocator& a, size_type length)
scoped_array_deallocator	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^struct scoped_array_deallocator$/;"	s	namespace:boost::container::containers_detail
scoped_deallocator	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   scoped_deallocator(pointer p, Allocator& a)$/;"	f	struct:boost::container::containers_detail::scoped_deallocator	access:public	signature:(pointer p, Allocator& a)
scoped_deallocator	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^struct scoped_deallocator$/;"	s	namespace:boost::container::containers_detail
scoped_destructor_n	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   scoped_destructor_n(pointer p, size_type n)$/;"	f	struct:boost::container::containers_detail::scoped_destructor_n	access:public	signature:(pointer p, size_type n)
scoped_destructor_n	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^struct scoped_destructor_n$/;"	s	namespace:boost::container::containers_detail
scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   explicit scoped_lock(mutex_type& m)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(mutex_type& m)
scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(mutex_type& m, accept_ownership_type)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(mutex_type& m, accept_ownership_type)
scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(mutex_type& m, const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(mutex_type& m, const boost::posix_time::ptime& abs_time)
scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(mutex_type& m, defer_lock_type)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(mutex_type& m, defer_lock_type)
scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(mutex_type& m, try_to_lock_type)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(mutex_type& m, try_to_lock_type)
scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^class scoped_lock$/;"	c	namespace:boost::interprocess
scoped_lock_t	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   typedef scoped_lock<interprocess_mutex> scoped_lock_t;$/;"	t	class:boost::interprocess::interprocess_upgradable_mutex	access:private
scoped_ptr	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   explicit scoped_ptr(const pointer &p = 0, const Deleter &d = Deleter())$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:(const pointer &p = 0, const Deleter &d = Deleter())
scoped_ptr	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   scoped_ptr(scoped_ptr const &);$/;"	p	class:boost::interprocess::scoped_ptr	access:private	signature:(scoped_ptr const &)
scoped_ptr	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^class scoped_ptr$/;"	c	namespace:boost::interprocess	inherits:Deleter
scoped_ptr_dealloc_functor	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   scoped_ptr_dealloc_functor(Allocator& a)$/;"	f	struct:boost::interprocess::detail::scoped_ptr_dealloc_functor	access:public	signature:(Allocator& a)
scoped_ptr_dealloc_functor	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^struct scoped_ptr_dealloc_functor$/;"	s	namespace:boost::interprocess::detail
second	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   T2 second;$/;"	m	struct:boost::container::containers_detail::pair	access:public
second_argument_type	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      typedef Value              second_argument_type;$/;"	t	class:boost::container::containers_detail::flat_tree::value_compare	access:private
second_type	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^   typedef T2 second_type;$/;"	t	struct:boost::container::containers_detail::pair	access:public
second_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename iterator_val_t::second_type second_type;$/;"	t	class:boost::interprocess::detail::segment_manager_iterator_value_adaptor	access:private
section_all_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_all_access         = standard_rights_required |$/;"	m	namespace:boost::interprocess::winapi
section_extend_size	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_extend_size        = 0x0010;$/;"	m	namespace:boost::interprocess::winapi
section_map_execute	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_map_execute        = 0x0008;$/;"	m	namespace:boost::interprocess::winapi
section_map_read	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_map_read           = 0x0004;$/;"	m	namespace:boost::interprocess::winapi
section_map_write	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_map_write          = 0x0002;$/;"	m	namespace:boost::interprocess::winapi
section_query	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long section_query              = 0x0001;$/;"	m	namespace:boost::interprocess::winapi
SecurityDescriptor	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *SecurityDescriptor;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
SecurityQualityOfService	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   void *SecurityQualityOfService;$/;"	m	struct:boost::interprocess::winapi::object_attributes_t	access:public
security_descriptor_revision	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long security_descriptor_revision = 1;$/;"	m	namespace:boost::interprocess::winapi
security_error	/usr/include/boost/interprocess/errors.hpp	/^   security_error,   \/\/ includes access rights, permissions failures$/;"	e	enum:boost::interprocess::error_code_t
seekoff	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual pos_type seekoff(off_type off, std::ios_base::seekdir dir,$/;"	f	class:boost::interprocess::basic_bufferbuf	access:protected	signature:(off_type off, std::ios_base::seekdir dir, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
seekoff	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual pos_type seekoff(off_type off, std::ios_base::seekdir dir,$/;"	f	class:boost::interprocess::basic_vectorbuf	access:protected	signature:(off_type off, std::ios_base::seekdir dir, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
seekpos	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual pos_type seekpos(pos_type pos, std::ios_base::openmode mode $/;"	f	class:boost::interprocess::basic_bufferbuf	access:protected	signature:(pos_type pos, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
seekpos	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual pos_type seekpos(pos_type pos, std::ios_base::openmode mode $/;"	f	class:boost::interprocess::basic_vectorbuf	access:protected	signature:(pos_type pos, std::ios_base::openmode mode = std::ios_base::in | std::ios_base::out)
segment	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t segment  :  sizeof(std::size_t)*CHAR_BIT - 2;$/;"	m	struct:boost::interprocess::intersegment_base::segmented_addressing	access:public
segmented	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      segmented_addressing segmented;$/;"	m	union:boost::interprocess::intersegment_base::members_t	access:public
segmented_addressing	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   struct segmented_addressing$/;"	s	struct:boost::interprocess::intersegment_base	access:public
segment_data	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      struct segment_data$/;"	s	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:private
segment_groups_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef set<segment_group_t>  segment_groups_t;$/;"	t	struct:boost::interprocess::flat_map_intersegment	access:private
segment_group_id	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef segment_group_t*      segment_group_id;$/;"	t	struct:boost::interprocess::flat_map_intersegment	access:public
segment_group_id	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      typedef typename void_pointer::segment_group_id       segment_group_id;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public
segment_group_id	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   typedef typename void_pointer::segment_group_id       segment_group_id;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
segment_group_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      segment_group_t(multi_segment_services &ms_services)$/;"	f	class:boost::interprocess::flat_map_intersegment::segment_group_t	access:public	signature:(multi_segment_services &ms_services)
segment_group_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   class segment_group_t$/;"	c	struct:boost::interprocess::flat_map_intersegment	access:private
segment_info_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      segment_info_t()$/;"	f	struct:boost::interprocess::flat_map_intersegment::segment_info_t	access:public	signature:()
segment_info_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   struct segment_info_t$/;"	s	struct:boost::interprocess::flat_map_intersegment	access:private
segment_manager	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef SegmentManager                                segment_manager;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
segment_manager	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef SegmentManager                                segment_manager;$/;"	t	class:boost::interprocess::allocator	access:public
segment_manager	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   typedef SegmentManager segment_manager;$/;"	t	class:boost::interprocess::detail::private_adaptive_node_pool	access:public
segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      segment_manager                           segment_manager;$/;"	t	class:boost::interprocess::detail::shared_pool_impl	access:public
segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename NodePool::segment_manager            segment_manager;$/;"	t	class:boost::interprocess::detail::cached_allocator_impl	access:public
segment_manager	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename NodePool::segment_manager            segment_manager;$/;"	t	class:boost::interprocess::detail::cache_impl	access:public
segment_manager	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   typedef SegmentManager segment_manager;$/;"	t	class:boost::interprocess::detail::private_node_pool	access:public
segment_manager	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef SegmentManager                                segment_manager;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
segment_manager	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef SegmentManager                                segment_manager;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
segment_manager	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef SegmentManager                                segment_manager;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
segment_manager	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      <CharType, MemoryAlgorithm, IndexType>::type    segment_manager;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:public
segment_manager	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager();$/;"	p	class:boost::interprocess::segment_manager	access:private	signature:()
segment_manager	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager(const segment_manager &);$/;"	p	class:boost::interprocess::segment_manager	access:private	signature:(const segment_manager &)
segment_manager	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager(std::size_t size)$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:(std::size_t size)
segment_manager	/usr/include/boost/interprocess/segment_manager.hpp	/^class segment_manager$/;"	c	namespace:boost::interprocess	inherits:segment_manager_base
segment_manager_base	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^      <MemoryAlgorithm>::type                            segment_manager_base;$/;"	t	struct:boost::interprocess::detail::index_config	access:public
segment_manager_base	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^      segment_manager_base                   segment_manager_base;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
segment_manager_base	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^      segment_manager_base          segment_manager_base;$/;"	t	class:boost::interprocess::flat_map_index	access:private
segment_manager_base	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      MapConfig::segment_manager_base                          segment_manager_base;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
segment_manager_base	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      MapConfig::segment_manager_base                 segment_manager_base;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
segment_manager_base	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      segment_manager_base             segment_manager_base;$/;"	t	class:boost::interprocess::iunordered_set_index	access:private
segment_manager_base	/usr/include/boost/interprocess/indexes/map_index.hpp	/^      segment_manager_base          segment_manager_base;$/;"	t	class:boost::interprocess::map_index	access:private
segment_manager_base	/usr/include/boost/interprocess/indexes/null_index.hpp	/^      segment_manager_base    segment_manager_base;$/;"	t	class:boost::interprocess::null_index	access:private
segment_manager_base	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^      MapConfig::segment_manager_base     segment_manager_base;$/;"	t	class:boost::interprocess::unordered_map_index	access:private
segment_manager_base	/usr/include/boost/interprocess/segment_manager.hpp	/^   segment_manager_base(std::size_t size, std::size_t reserved_bytes)$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(std::size_t size, std::size_t reserved_bytes)
segment_manager_base	/usr/include/boost/interprocess/segment_manager.hpp	/^class segment_manager_base$/;"	c	namespace:boost::interprocess	inherits:MemoryAlgorithm
segment_manager_base_type	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef SegmentManagerBase                 segment_manager_base_type;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public
segment_manager_base_type	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   typedef SegmentManagerBase segment_manager_base_type;$/;"	t	class:boost::container::containers_detail::private_node_pool_impl	access:public
segment_manager_base_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct segment_manager_base_type$/;"	s	namespace:boost::interprocess::detail
segment_manager_base_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef segment_manager_base<MemoryAlgorithm>   segment_manager_base_type;$/;"	t	class:boost::interprocess::segment_manager	access:public
segment_manager_base_type	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef segment_manager_base<MemoryAlgorithm> segment_manager_base_type;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
segment_manager_iterator_transform	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^struct segment_manager_iterator_transform$/;"	s	namespace:boost::interprocess::detail	inherits:std::unary_function
segment_manager_iterator_value_adaptor	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   segment_manager_iterator_value_adaptor(const typename Iterator::value_type &val)$/;"	f	class:boost::interprocess::detail::segment_manager_iterator_value_adaptor	access:public	signature:(const typename Iterator::value_type &val)
segment_manager_iterator_value_adaptor	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^class segment_manager_iterator_value_adaptor$/;"	c	namespace:boost::interprocess::detail
segment_manager_iterator_value_adaptor	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^class segment_manager_iterator_value_adaptor<Iterator, false>$/;"	c	namespace:boost::interprocess::detail
segment_manager_pointer	/usr/include/boost/interprocess/smart_ptr/deleter.hpp	/^      <pointer, SegmentManager>::type   segment_manager_pointer;$/;"	t	class:boost::interprocess::deleter	access:private
segment_manager_type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^struct segment_manager_type$/;"	s	namespace:boost::interprocess::detail
segment_mngr_base_ptr_t	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^      <void_pointer, segment_manager_base_type>::type   segment_mngr_base_ptr_t;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
segment_mngr_base_ptr_t	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^      <void_pointer, segment_manager_base_type>::type   segment_mngr_base_ptr_t;$/;"	t	class:boost::container::containers_detail::private_node_pool_impl	access:private
select1st	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^struct select1st $/;"	s	namespace:boost::container::containers_detail
select1st	/usr/include/boost/interprocess/detail/mpl.hpp	/^struct select1st $/;"	s	namespace:boost::interprocess::detail
select_multiallocation_chain	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^struct select_multiallocation_chain$/;"	s	namespace:boost::container::stable_vector_detail
select_multiallocation_chain	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^struct select_multiallocation_chain<Allocator, 1>$/;"	s	namespace:boost::container::stable_vector_detail
self_t	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      <Version, T, SegmentManager, NodesPerBlock, MaxFreeBlocks, OverheadPercent>   self_t;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
self_t	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef allocator<T, SegmentManager>   self_t;$/;"	t	class:boost::interprocess::allocator	access:private
self_t	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      <Version, T, SegmentManager, NodesPerBlock>   self_t;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
self_t	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      , MaxFreeBlocks, OverheadPercent>                  self_t;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:private
self_t	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      < Version, T, SegmentManager, NodesPerBlock>       self_t;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:private
self_t	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef const_iterator                    self_t;$/;"	t	class:boost::container::deque_base::const_iterator	access:public
self_t	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef const_iterator                    self_t;$/;"	t	class:boost::container::deque_base::iterator	access:public
self_t	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef node_alloc_holder<A, ICont>                self_t;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
self_t	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef vector<T, A>                   self_t;$/;"	t	class:boost::container::vector	access:private
self_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef flat_map_intersegment<Mutex>   self_t;$/;"	t	struct:boost::interprocess::flat_map_intersegment	access:public
self_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef intersegment_base  self_t;$/;"	t	struct:boost::interprocess::intersegment_base	access:public
self_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef intersegment_ptr<T>                  self_t;$/;"	t	class:boost::interprocess::intersegment_ptr	access:private
self_t	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^               <CharType, MemoryAlgorithm, IndexType, Offset> self_t;$/;"	t	class:boost::interprocess::detail::basic_managed_memory_impl	access:private
self_t	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^               <CharType, MemoryAlgorithm, IndexType>    self_t;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
self_t	/usr/include/boost/interprocess/detail/named_proxy.hpp	/^   typedef CtorNArg<T, is_iterator, Args...> self_t;$/;"	t	struct:boost::interprocess::detail::CtorNArg	access:public
self_t	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef offset_ptr<PointedType>           self_t;$/;"	t	class:boost::interprocess::offset_ptr	access:private
semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   interprocess_semaphore *semaphore() const$/;"	f	class:boost::interprocess::named_semaphore	access:private	signature:() const
semaphore_all_access	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long semaphore_all_access = (0x000F0000L)|(0x00100000L)|0x3;$/;"	m	namespace:boost::interprocess::winapi
semaphore_close	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline void semaphore_close(sem_t *handle)$/;"	f	namespace:boost::interprocess::detail	signature:(sem_t *handle)
semaphore_destroy	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline void semaphore_destroy(sem_t *handle)$/;"	f	namespace:boost::interprocess::detail	signature:(sem_t *handle)
semaphore_init	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline void semaphore_init(sem_t *handle, unsigned int initialCount)$/;"	f	namespace:boost::interprocess::detail	signature:(sem_t *handle, unsigned int initialCount)
semaphore_open	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline bool semaphore_open$/;"	f	namespace:boost::interprocess::detail	signature:(sem_t *&handle, detail::create_enum_t type, const char *origname, mode_t mode, unsigned int count)
semaphore_post	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline void semaphore_post(sem_t *handle)$/;"	f	namespace:boost::interprocess::detail	signature:(sem_t *handle)
semaphore_timed_wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline bool semaphore_timed_wait(sem_t *handle, const boost::posix_time::ptime &abs_time)$/;"	f	namespace:boost::interprocess::detail	signature:(sem_t *handle, const boost::posix_time::ptime &abs_time)
semaphore_try_wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline bool semaphore_try_wait(sem_t *handle)$/;"	f	namespace:boost::interprocess::detail	signature:(sem_t *handle)
semaphore_unlink	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline bool semaphore_unlink(const char *semname)$/;"	f	namespace:boost::interprocess::detail	signature:(const char *semname)
semaphore_wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^inline void semaphore_wait(sem_t *handle)$/;"	f	namespace:boost::interprocess::detail	signature:(sem_t *handle)
semaphore_wrapper	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   semaphore_wrapper();$/;"	p	class:boost::interprocess::detail::semaphore_wrapper	access:private	signature:()
semaphore_wrapper	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   semaphore_wrapper(const semaphore_wrapper&);$/;"	p	class:boost::interprocess::detail::semaphore_wrapper	access:private	signature:(const semaphore_wrapper&)
semaphore_wrapper	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   semaphore_wrapper(unsigned int initialCount)$/;"	f	class:boost::interprocess::detail::semaphore_wrapper	access:public	signature:(unsigned int initialCount)
semaphore_wrapper	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^class semaphore_wrapper$/;"	c	namespace:boost::interprocess::detail
sem_error	/usr/include/boost/interprocess/errors.hpp	/^   sem_error,$/;"	e	enum:boost::interprocess::error_code_t
send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   void send (const void *buffer,     std::size_t buffer_size, $/;"	p	class:boost::interprocess::message_queue	access:public	signature:(const void *buffer, std::size_t buffer_size, unsigned int priority)
send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline void message_queue::send$/;"	f	class:boost::interprocess::message_queue	signature:(const void *buffer, std::size_t buffer_size, unsigned int priority)
set	/usr/include/boost/interprocess/containers/container/set.hpp	/^   explicit set(const Pred& comp = Pred(),$/;"	f	class:boost::container::set	access:public	signature:(const Pred& comp = Pred(), const allocator_type& a = allocator_type())
set	/usr/include/boost/interprocess/containers/container/set.hpp	/^   set( ordered_unique_range_t, InputIterator first, InputIterator last$/;"	f	class:boost::container::set	access:public	signature:( ordered_unique_range_t, InputIterator first, InputIterator last , const Pred& comp = Pred(), const allocator_type& a = allocator_type())
set	/usr/include/boost/interprocess/containers/container/set.hpp	/^   set(const set& x) $/;"	f	class:boost::container::set	access:public	signature:(const set& x)
set	/usr/include/boost/interprocess/containers/container/set.hpp	/^   set(InputIterator first, InputIterator last, const Pred& comp = Pred(),$/;"	f	class:boost::container::set	access:public	signature:(InputIterator first, InputIterator last, const Pred& comp = Pred(), const allocator_type& a = allocator_type())
set	/usr/include/boost/interprocess/containers/container/set.hpp	/^class set $/;"	c	namespace:boost::container
SetEndOfFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall SetEndOfFile(void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
SetFilePointerEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall SetFilePointerEx(void *, __int64 distance, __int64 *new_file_pointer, unsigned long move_method);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, __int64 distance, __int64 *new_file_pointer, unsigned long move_method)
SetFileValidData	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall SetFileValidData(void *, __int64 size);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, __int64 size)
SetSecurityDescriptorDacl	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall SetSecurityDescriptorDacl(interprocess_security_descriptor *pSecurityDescriptor, int bDaclPresent, interprocess_acl *pDacl, int bDaclDefaulted);$/;"	p	namespace:boost::interprocess::winapi	signature:(interprocess_security_descriptor *pSecurityDescriptor, int bDaclPresent, interprocess_acl *pDacl, int bDaclDefaulted)
set_bits	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static void set_bits(pointer &n, std::size_t b)$/;"	f	struct:boost::intrusive::pointer_plus_bits	access:public	signature:(pointer &n, std::size_t b)
set_end_of_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline int set_end_of_file(void *handle)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle)
set_file_pointer	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool set_file_pointer(file_handle_t hnd, offset_t off, file_pos_t pos)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd, offset_t off, file_pos_t pos)
set_file_pointer_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool set_file_pointer_ex(void *handle, __int64 distance, __int64 *new_file_pointer, unsigned long move_method)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, __int64 distance, __int64 *new_file_pointer, unsigned long move_method)
set_from_other	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void set_from_other(const self_t &other)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const self_t &other)
set_from_pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void set_from_pointer(const void *ptr)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const void *ptr)
set_from_pointer	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void set_from_pointer(const volatile void *ptr)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(const volatile void *ptr)
set_group	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      void set_group(segment_group_id group)$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:(segment_group_id group)
set_max_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void set_max_cached_nodes(std::size_t newmax)$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:public	signature:(std::size_t newmax)
set_max_cached_nodes	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   void set_max_cached_nodes(std::size_t newmax)$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:(std::size_t newmax)
set_min_segment_size	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      void set_min_segment_size(std::size_t min_segment_size)$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:(std::size_t min_segment_size)
set_mode	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void set_mode(std::size_t mode)$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:(std::size_t mode)
set_null	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void set_null()$/;"	f	struct:boost::interprocess::intersegment_base	access:public	signature:()
set_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^   void set_offset(const void *ptr)$/;"	f	class:boost::interprocess::offset_ptr	access:private	signature:(const void *ptr)
set_offset	/usr/include/boost/interprocess/offset_ptr.hpp	/^   void set_offset(const volatile void *ptr)$/;"	f	class:boost::interprocess::offset_ptr	access:private	signature:(const volatile void *ptr)
set_pointer	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void set_pointer(VoidPointer p)$/;"	f	struct:boost::container::stable_vector_detail::node_type	access:public	signature:(VoidPointer p)
set_pointer	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void set_pointer(VoidPtr p)$/;"	f	struct:boost::container::stable_vector_detail::node_type_base	access:public	signature:(VoidPtr p)
set_pointer	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static void set_pointer(pointer &n, pointer p)$/;"	f	struct:boost::intrusive::pointer_plus_bits	access:public	signature:(pointer &n, pointer p)
set_pointer	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   void set_pointer(const pointer &ptr)$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:(const pointer &ptr)
set_pointers	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   void set_pointers()$/;"	f	class:boost::interprocess::basic_bufferbuf	access:private	signature:()
shar	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_INTERPROCESS_RV_REF(sharable_lock<T>) shar, try_to_lock_type$/;"	m	class:boost::interprocess::scoped_lock	access:public
shar	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock( BOOST_INTERPROCESS_RV_REF(sharable_lock<T>) shar, try_to_lock_type$/;"	m	class:boost::interprocess::upgradable_lock	access:public
sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   explicit sharable_lock(mutex_type& m)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(mutex_type& m)
sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   explicit sharable_lock(scoped_lock<mutex_type>&);$/;"	p	class:boost::interprocess::sharable_lock	access:private	signature:(scoped_lock<mutex_type>&)
sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(mutex_type& m, accept_ownership_type)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(mutex_type& m, accept_ownership_type)
sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(mutex_type& m, const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(mutex_type& m, const boost::posix_time::ptime& abs_time)
sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(mutex_type& m, defer_lock_type)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(mutex_type& m, defer_lock_type)
sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(mutex_type& m, try_to_lock_type)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(mutex_type& m, try_to_lock_type)
sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^class sharable_lock$/;"	c	namespace:boost::interprocess
shared_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^   shared_adaptive_node_pool(SegmentManager *segment_mgnr)$/;"	f	class:boost::interprocess::detail::shared_adaptive_node_pool	access:public	signature:(SegmentManager *segment_mgnr)
shared_adaptive_node_pool	/usr/include/boost/interprocess/allocators/detail/adaptive_node_pool.hpp	/^class shared_adaptive_node_pool $/;"	c	namespace:boost::interprocess::detail	inherits:detail::shared_pool_impl
shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   explicit shared_count(const pointer & ptr, shared_count<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(const pointer & ptr, shared_count<Y, VoidAllocator, Deleter> const & r)
shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   explicit shared_count(shared_count<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(shared_count<Y, VoidAllocator, Deleter> const & r)
shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   explicit shared_count(weak_count<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(weak_count<Y, VoidAllocator, Deleter> const & r)
shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count()$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:()
shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count(const Ptr &p, const VoidAllocator &a, Deleter d)$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(const Ptr &p, const VoidAllocator &a, Deleter d)
shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count(const shared_count &other_shared_count, const Ptr &p)$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(const shared_count &other_shared_count, const Ptr &p)
shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   shared_count(shared_count const & r)$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(shared_count const & r)
shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^class shared_count$/;"	c	namespace:boost::interprocess::detail
shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   shared_ptr<T const, A, D> shared_from_this() const$/;"	f	class:boost::interprocess::enable_shared_from_this	access:public	signature:() const
shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   shared_ptr<T, A, D> shared_from_this()$/;"	f	class:boost::interprocess::enable_shared_from_this	access:public	signature:()
shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   shared_memory_object();$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:()
shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   shared_memory_object(create_only_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::shared_memory_object	access:public	signature:(create_only_t, const char *name, mode_t mode)
shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   shared_memory_object(open_only_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::shared_memory_object	access:public	signature:(open_only_t, const char *name, mode_t mode)
shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   shared_memory_object(open_or_create_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::shared_memory_object	access:public	signature:(open_or_create_t, const char *name, mode_t mode)
shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^class shared_memory_object$/;"	c	namespace:boost::interprocess
shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline shared_memory_object::shared_memory_object() $/;"	f	class:boost::interprocess::shared_memory_object	signature:()
shared_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^   shared_node_pool(SegmentManager *segment_mgnr)$/;"	f	class:boost::interprocess::detail::shared_node_pool	access:public	signature:(SegmentManager *segment_mgnr)
shared_node_pool	/usr/include/boost/interprocess/allocators/detail/node_pool.hpp	/^class shared_node_pool $/;"	c	namespace:boost::interprocess::detail	inherits:detail::shared_pool_impl
shared_pool_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   shared_pool_impl(segment_manager *segment_mngr)$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:(segment_manager *segment_mngr)
shared_pool_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^class shared_pool_impl$/;"	c	namespace:boost::interprocess::detail	inherits:private_node_allocator_t
shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   explicit shared_ptr(const pointer&p, const VoidAllocator &a = VoidAllocator(), const Deleter &d = Deleter())$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(const pointer&p, const VoidAllocator &a = VoidAllocator(), const Deleter &d = Deleter())
shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   explicit shared_ptr(weak_ptr<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(weak_ptr<Y, VoidAllocator, Deleter> const & r)
shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr()$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:()
shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(const shared_ptr &other, const pointer &p)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(const shared_ptr &other, const pointer &p)
shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(shared_ptr<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r)
shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(shared_ptr<Y, VoidAllocator, Deleter> const & r, detail::const_cast_tag)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r, detail::const_cast_tag)
shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(shared_ptr<Y, VoidAllocator, Deleter> const & r, detail::dynamic_cast_tag)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r, detail::dynamic_cast_tag)
shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   shared_ptr(shared_ptr<Y, VoidAllocator, Deleter> const & r, detail::static_cast_tag)$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<Y, VoidAllocator, Deleter> const & r, detail::static_cast_tag)
shared_ptr	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^class shared_ptr$/;"	c	namespace:boost::interprocess
shmem_list_t	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   typedef list<managed_impl> shmem_list_t;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
ShortDataOffset	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static const size_type  ShortDataOffset =$/;"	m	class:boost::container::containers_detail::basic_string_base	access:protected
short_header	/usr/include/boost/interprocess/containers/container/string.hpp	/^   struct short_header$/;"	s	class:boost::container::containers_detail::basic_string_base	access:private
short_repr	/usr/include/boost/interprocess/containers/container/string.hpp	/^      short_t &short_repr() const$/;"	f	union:boost::container::containers_detail::basic_string_base::repr_t	access:public	signature:() const
short_t	/usr/include/boost/interprocess/containers/container/string.hpp	/^   struct short_t$/;"	s	class:boost::container::containers_detail::basic_string_base	access:protected
shrink	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static bool shrink $/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(MemoryAlgorithm *memory_algo, void *ptr ,const std::size_t max_size, const std::size_t preferred_size ,std::size_t &received_size)
shrink_buckets	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   static std::size_t shrink_buckets$/;"	f	class:boost::interprocess::iunordered_set_index	access:private	signature:( bucket_ptr buckets, std::size_t old_size , allocator_type &alloc, std::size_t new_size)
shrink_in_place	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type shrink_in_place    = boost::container::shrink_in_place;$/;"	m	namespace:boost::interprocess
shrink_in_place	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^static const allocation_type shrink_in_place    = (allocation_type)shrink_in_place_v;$/;"	m	namespace:boost::container
shrink_in_place_v	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^   shrink_in_place_v = 0x08,$/;"	e	enum:boost::container::allocation_type_v
shrink_to_fit	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:()
shrink_to_fit	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::container::flat_map	access:public	signature:()
shrink_to_fit	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::container::flat_multimap	access:public	signature:()
shrink_to_fit	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::container::flat_multiset	access:public	signature:()
shrink_to_fit	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::container::flat_set	access:public	signature:()
shrink_to_fit	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::container::vector	access:public	signature:()
shrink_to_fit	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   static bool shrink_to_fit(const char *filename)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:(const char *filename)
shrink_to_fit	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:()
shrink_to_fit	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::flat_map_index	access:public	signature:()
shrink_to_fit	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::iset_index	access:public	signature:()
shrink_to_fit	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:()
shrink_to_fit	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::map_index	access:public	signature:()
shrink_to_fit	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::unordered_map_index	access:public	signature:()
shrink_to_fit	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   static bool shrink_to_fit(const char *filename)$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(const char *filename)
shrink_to_fit	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   static bool shrink_to_fit(const char *shmname)$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(const char *shmname)
shrink_to_fit	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void shrink_to_fit();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:()
shrink_to_fit	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^void simple_seq_fit_impl<MutexFamily, VoidPointer>::shrink_to_fit()$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:()
shrink_to_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void shrink_to_fit();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:()
shrink_to_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::shrink_to_fit()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
shrink_to_fit	/usr/include/boost/interprocess/segment_manager.hpp	/^   void shrink_to_fit()$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:()
shrink_to_fit_indexes	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void shrink_to_fit_indexes()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:()
shrink_to_fit_indexes	/usr/include/boost/interprocess/segment_manager.hpp	/^   void shrink_to_fit_indexes()$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:()
simple_sem_op	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^inline bool simple_sem_op(int id, int value, bool undo = true)$/;"	f	namespace:boost::interprocess::xsi	signature:(int id, int value, bool undo = true)
simple_sem_open_or_create	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^inline bool simple_sem_open_or_create(::key_t key, int initval, int &semid, int perm)$/;"	f	namespace:boost::interprocess::xsi	signature:(::key_t key, int initval, int &semid, int perm)
simple_sem_rm	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^inline bool simple_sem_rm(int id)$/;"	f	namespace:boost::interprocess::xsi	signature:(int id)
simple_seq_fit	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	/^   simple_seq_fit           (std::size_t size, std::size_t extra_hdr_bytes)$/;"	f	class:boost::interprocess::simple_seq_fit	access:public	signature:(std::size_t size, std::size_t extra_hdr_bytes)
simple_seq_fit	/usr/include/boost/interprocess/mem_algo/simple_seq_fit.hpp	/^class simple_seq_fit $/;"	c	namespace:boost::interprocess	inherits:detail::simple_seq_fit_impl
simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl           (std::size_t size, std::size_t extra_hdr_bytes);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t size, std::size_t extra_hdr_bytes)
simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:()
simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl(const simple_seq_fit_impl &);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(const simple_seq_fit_impl &)
simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl(std::size_t size, std::size_t extra_hdr_bytes)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t size, std::size_t extra_hdr_bytes)
simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^class simple_seq_fit_impl$/;"	c	namespace:boost::interprocess::detail
simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl           (std::size_t size, std::size_t extra_hdr_bytes);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(std::size_t size, std::size_t extra_hdr_bytes)
simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:()
simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl(const simple_seq_fit_impl &);$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:private	signature:(const simple_seq_fit_impl &)
simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   simple_seq_fit_impl(std::size_t size, std::size_t extra_hdr_bytes)$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(std::size_t size, std::size_t extra_hdr_bytes)
simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^class simple_seq_fit_impl$/;"	c	namespace:boost::interprocess::detail
size	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   size_type size(const pointer &p) const$/;"	f	class:boost::interprocess::allocator	access:public	signature:(const pointer &p) const
size	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   size_type size(const pointer &p) const$/;"	f	class:boost::interprocess::detail::array_allocation_impl	access:public	signature:(const pointer &p) const
size	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   size_type size() const $/;"	f	class:boost::container::deque	access:public	signature:() const
size	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   size_type size() const $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:() const
size	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   std::size_t size() const$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:() const
size	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   std::size_t size() const$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:() const
size	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   size_type size() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
size	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   size_type size() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
size	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   size_type size() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
size	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   size_type size() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
size	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   size_type size() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
size	/usr/include/boost/interprocess/containers/container/list.hpp	/^   size_type size() const $/;"	f	class:boost::container::list	access:public	signature:() const
size	/usr/include/boost/interprocess/containers/container/map.hpp	/^   size_type size() const $/;"	f	class:boost::container::map	access:public	signature:() const
size	/usr/include/boost/interprocess/containers/container/map.hpp	/^   size_type size() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
size	/usr/include/boost/interprocess/containers/container/set.hpp	/^   size_type size() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
size	/usr/include/boost/interprocess/containers/container/set.hpp	/^   size_type size() const $/;"	f	class:boost::container::set	access:public	signature:() const
size	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   size_type size() const $/;"	f	class:boost::container::slist	access:public	signature:() const
size	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   size_type size() const$/;"	f	class:boost::container::stable_vector	access:public	signature:() const
size	/usr/include/boost/interprocess/containers/container/string.hpp	/^   size_type size() const    $/;"	f	class:boost::container::basic_string	access:public	signature:() const
size	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   size_type size() const $/;"	f	class:boost::container::vector	access:public	signature:() const
size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^         std::size_t size;$/;"	m	struct:boost::interprocess::flat_map_intersegment::segment_group_t::segment_data	access:public
size	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      std::size_t size;$/;"	m	struct:boost::interprocess::flat_map_intersegment::segment_info_t	access:public
size	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   std::size_t size;$/;"	m	struct:boost::interprocess::detail::in_place_interface	access:public
size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   size(void *ptr) const$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(void *ptr) const
size	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   std::size_t size(void *ptr) const;$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(void *ptr) const
size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   size(const void *ptr) const$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:(const void *ptr) const
size	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   std::size_t size(const void *ptr) const;$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:(const void *ptr) const
size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   size(const void *ptr) const$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:(const void *ptr) const
size	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   std::size_t size(const void *ptr) const;$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:(const void *ptr) const
size	/usr/include/boost/interprocess/segment_manager.hpp	/^   std::size_t size(const void *ptr) const$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:(const void *ptr) const
SizeHolder	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   struct SizeHolder$/;"	s	class:boost::interprocess::rbtree_best_fit	access:private
sizeof	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   BOOST_STATIC_ASSERT(sizeof(members_t) == 2*sizeof(std::size_t));$/;"	m	struct:boost::interprocess::intersegment_base	access:public
sizeof_char	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t sizeof_char() const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:() const
sizeof_value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct sizeof_value$/;"	s	namespace:boost::interprocess
sizeof_value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct sizeof_value<const void>$/;"	s	namespace:boost::interprocess
sizeof_value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct sizeof_value<const volatile void>$/;"	s	namespace:boost::interprocess
sizeof_value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct sizeof_value<void>$/;"	s	namespace:boost::interprocess
sizeof_value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^struct sizeof_value<volatile void>$/;"	s	namespace:boost::interprocess
size_block_ctrl_compare	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   struct size_block_ctrl_compare$/;"	s	class:boost::interprocess::rbtree_best_fit	access:private
size_error	/usr/include/boost/interprocess/errors.hpp	/^   size_error,$/;"	e	enum:boost::interprocess::error_code_t
size_type	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef std::size_t                                   size_type;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
size_type	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef std::size_t                          size_type;$/;"	t	class:boost::interprocess::allocator	access:public
size_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef std::size_t                                   size_type;$/;"	t	class:boost::interprocess::detail::array_allocation_impl	access:public
size_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef std::size_t                                   size_type;$/;"	t	class:boost::interprocess::detail::node_pool_allocation_impl	access:public
size_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename base_t::size_type                    size_type;$/;"	t	class:boost::interprocess::detail::cached_allocator_impl	access:public
size_type	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef std::size_t                                   size_type;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
size_type	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef std::size_t                                   size_type;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
size_type	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef std::size_t                                   size_type;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
size_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef std::size_t                       size_type;$/;"	t	class:boost::container::deque_base::const_iterator	access:public
size_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef std::size_t                       size_type;$/;"	t	class:boost::container::deque_base::iterator	access:public
size_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef std::size_t                          size_type;$/;"	t	class:boost::container::deque	access:public
size_type	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef typename Allocator::size_type  size_type;$/;"	t	struct:boost::container::containers_detail::null_scoped_array_deallocator	access:public
size_type	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef typename Allocator::size_type  size_type;$/;"	t	struct:boost::container::containers_detail::scoped_array_deallocator	access:public
size_type	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef typename Allocator::size_type  size_type;$/;"	t	struct:boost::container::containers_detail::scoped_destructor_n	access:public
size_type	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef typename Allocator::size_type size_type;$/;"	t	struct:boost::container::containers_detail::null_scoped_destructor_n	access:public
size_type	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef typename allocator_type::size_type         size_type;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
size_type	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename NodeAlloc::size_type              size_type;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
size_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename A::size_type                      size_type;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
size_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::size_type              size_type;$/;"	t	class:boost::container::flat_map	access:public
size_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::size_type              size_type;$/;"	t	class:boost::container::flat_multimap	access:public
size_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::size_type              size_type;$/;"	t	class:boost::container::flat_multiset	access:public
size_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::size_type              size_type;$/;"	t	class:boost::container::flat_set	access:public
size_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename A::size_type                   size_type;$/;"	t	class:boost::container::list	access:public
size_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::size_type              size_type;$/;"	t	class:boost::container::map	access:public
size_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::size_type              size_type;$/;"	t	class:boost::container::multimap	access:public
size_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::size_type              size_type;$/;"	t	class:boost::container::multiset	access:public
size_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::size_type              size_type;$/;"	t	class:boost::container::set	access:public
size_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename A::size_type                   size_type;$/;"	t	class:boost::container::slist	access:public
size_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef typename impl_type::size_type              size_type;$/;"	t	class:boost::container::stable_vector	access:public
size_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef typename A::size_type                   size_type;$/;"	t	class:boost::container::basic_string	access:public
size_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef typename A::size_type   size_type;$/;"	t	class:boost::container::containers_detail::basic_string_base	access:public
size_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename A::size_type                   size_type;$/;"	t	class:boost::container::vector	access:public
size_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename A::size_type    size_type;$/;"	t	struct:boost::container::containers_detail::vector_alloc_holder	access:public
size_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::size_type                size_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
size_t_bits	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const std::size_t size_t_bits = (sizeof(void*)*CHAR_BIT == 32) ? 32 : 64;$/;"	m	struct:boost::interprocess::intersegment_base	access:public
Sleep	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) void __stdcall Sleep(unsigned long);$/;"	p	namespace:boost::interprocess::winapi	signature:(unsigned long)
SLEEP	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^      enum { SLEEP = 0, NOTIFY_ONE, NOTIFY_ALL };$/;"	e	enum:boost::interprocess::interprocess_condition::__anon33
slist	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   explicit slist(const allocator_type& a = allocator_type())$/;"	f	class:boost::container::slist	access:public	signature:(const allocator_type& a = allocator_type())
slist	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   explicit slist(size_type n)$/;"	f	class:boost::container::slist	access:public	signature:(size_type n)
slist	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   explicit slist(size_type n, const value_type& x, const allocator_type& a = allocator_type())$/;"	f	class:boost::container::slist	access:public	signature:(size_type n, const value_type& x, const allocator_type& a = allocator_type())
slist	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   slist(const slist& x) $/;"	f	class:boost::container::slist	access:public	signature:(const slist& x)
slist	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   slist(InpIt first, InpIt last,$/;"	f	class:boost::container::slist	access:public	signature:(InpIt first, InpIt last, const allocator_type& a = allocator_type())
slist	/usr/include/boost/interprocess/containers/container/slist.hpp	/^class slist $/;"	c	namespace:boost::container	inherits:containers_detail::node_alloc_holder
slist_	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^      free_nodes_t &slist_;$/;"	m	struct:boost::container::containers_detail::private_node_pool_impl::push_in_list	access:private
slist_hook	/usr/include/boost/interprocess/containers/container/slist.hpp	/^struct slist_hook$/;"	s	namespace:boost::container::containers_detail
slist_hook_t	/usr/include/boost/interprocess/allocators/detail/node_tools.hpp	/^      <bi::void_pointer<VoidPointer>, bi::link_mode<bi::normal_link> >::type slist_hook_t;$/;"	t	struct:boost::interprocess::detail::node_slist	access:public
slist_hook_t	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   typedef typename node_slist<void_pointer>::slist_hook_t        slist_hook_t;$/;"	t	class:boost::container::containers_detail::private_node_pool_impl	access:public
slist_hook_t	/usr/include/boost/interprocess/containers/container/detail/pool_common.hpp	/^      <bi::void_pointer<VoidPointer>, bi::link_mode<bi::normal_link> >::type slist_hook_t;$/;"	t	struct:boost::container::containers_detail::node_slist	access:public
slist_impl_	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^      :  slist_impl_()$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:()
slist_impl_	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   slist_impl_t slist_impl_;$/;"	m	class:boost::container::containers_detail::basic_multiallocation_chain	access:private
slist_impl_t	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^                    > slist_impl_t;$/;"	t	class:boost::container::containers_detail::basic_multiallocation_chain	access:private
slist_node	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   slist_node()$/;"	f	struct:boost::container::containers_detail::slist_node	access:public	signature:()
slist_node	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   slist_node(Args &&...args)$/;"	f	struct:boost::container::containers_detail::slist_node	access:public	signature:(Args &&....args)
slist_node	/usr/include/boost/interprocess/containers/container/slist.hpp	/^struct slist_node$/;"	s	namespace:boost::container::containers_detail	inherits:slist_hook::type
smart_ptr_type	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^struct smart_ptr_type$/;"	s	namespace:boost::container::containers_detail
smart_ptr_type	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^struct smart_ptr_type<T*>$/;"	s	namespace:boost::container::containers_detail
smart_ptr_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^struct smart_ptr_type$/;"	s	namespace:boost::container::stable_vector_detail
smart_ptr_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^struct smart_ptr_type<T*>$/;"	s	namespace:boost::container::stable_vector_detail
smart_ptr_type	/usr/include/boost/interprocess/detail/utilities.hpp	/^struct smart_ptr_type$/;"	s	namespace:boost::interprocess::detail
smart_ptr_type	/usr/include/boost/interprocess/detail/utilities.hpp	/^struct smart_ptr_type<T*>$/;"	s	namespace:boost::interprocess::detail
sort	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void sort()$/;"	f	class:boost::container::list	access:public	signature:()
sort	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void sort(StrictWeakOrdering comp)$/;"	f	class:boost::container::list	access:public	signature:(StrictWeakOrdering comp)
sort	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void sort()$/;"	f	class:boost::container::slist	access:public	signature:()
sort	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void sort(StrictWeakOrdering comp)$/;"	f	class:boost::container::slist	access:public	signature:(StrictWeakOrdering comp)
splice	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void splice(const_iterator p, ThisType &x, const_iterator first, const_iterator last) $/;"	f	class:boost::container::list	access:public	signature:(const_iterator p, ThisType &x, const_iterator first, const_iterator last)
splice	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void splice(const_iterator p, ThisType &x, const_iterator first, const_iterator last, size_type n) $/;"	f	class:boost::container::list	access:public	signature:(const_iterator p, ThisType &x, const_iterator first, const_iterator last, size_type n)
splice	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void splice(const_iterator p, ThisType &x, const_iterator i) $/;"	f	class:boost::container::list	access:public	signature:(const_iterator p, ThisType &x, const_iterator i)
splice	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void splice(iterator p, ThisType& x) $/;"	f	class:boost::container::list	access:public	signature:(iterator p, ThisType& x)
splice	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void splice(const_iterator p, slist& x, const_iterator first, const_iterator last)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator p, slist& x, const_iterator first, const_iterator last)
splice	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void splice(const_iterator p, slist& x, const_iterator i)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator p, slist& x, const_iterator i)
splice	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void splice(const_iterator p, ThisType& x) $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator p, ThisType& x)
splice_after	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void splice_after(iterator after_this, basic_multiallocation_chain &x)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:(iterator after_this, basic_multiallocation_chain &x)
splice_after	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void splice_after(iterator after_this, basic_multiallocation_chain &x, iterator before_begin, iterator before_end)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:(iterator after_this, basic_multiallocation_chain &x, iterator before_begin, iterator before_end)
splice_after	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void splice_after(iterator after_this, basic_multiallocation_chain &x, iterator before_begin, iterator before_end, std::size_t n)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:(iterator after_this, basic_multiallocation_chain &x, iterator before_begin, iterator before_end, std::size_t n)
splice_after	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void splice_after(iterator after_this, transform_multiallocation_chain &x, iterator before_begin, iterator before_end, std::size_t n)$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:(iterator after_this, transform_multiallocation_chain &x, iterator before_begin, iterator before_end, std::size_t n)
splice_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void splice_after(const_iterator prev_pos,      slist& x, $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev_pos, slist& x, const_iterator before_first, const_iterator before_last)
splice_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void splice_after(const_iterator prev_pos,      slist& x, $/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev_pos, slist& x, const_iterator before_first, const_iterator before_last, size_type n)
splice_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void splice_after(const_iterator prev_pos, slist& x)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev_pos, slist& x)
splice_after	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void splice_after(const_iterator prev_pos, slist& x, const_iterator prev)$/;"	f	class:boost::container::slist	access:public	signature:(const_iterator prev_pos, slist& x, const_iterator prev)
sp_counted_base	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    sp_counted_base( sp_counted_base const & );$/;"	p	class:boost::interprocess::detail::sp_counted_base	access:private	signature:( sp_counted_base const & )
sp_counted_base	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    sp_counted_base(): use_count_( 1 ), weak_count_( 1 )$/;"	f	class:boost::interprocess::detail::sp_counted_base	access:public	signature:()
sp_counted_base	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^class sp_counted_base$/;"	c	namespace:boost::interprocess::detail
sp_counted_impl_pd	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   sp_counted_impl_pd( sp_counted_impl_pd const & );$/;"	p	class:boost::interprocess::detail::sp_counted_impl_pd	access:private	signature:( sp_counted_impl_pd const & )
sp_counted_impl_pd	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   sp_counted_impl_pd(const Ptr & p, const A &a, const D &d )$/;"	f	class:boost::interprocess::detail::sp_counted_impl_pd	access:public	signature:(const Ptr & p, const A &a, const D &d )
sp_counted_impl_pd	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^class sp_counted_impl_pd $/;"	c	namespace:boost::interprocess::detail	inherits:sp_counted_base,A::,rebind::other,D
sp_enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^inline void sp_enable_shared_from_this$/;"	f	namespace:boost::interprocess::detail	signature:(shared_count<T, VoidAllocator, Deleter> const & pn ,enable_shared_from_this<T, VoidAllocator, Deleter> *pe ,T *ptr)
sp_enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^inline void sp_enable_shared_from_this(shared_count<T, VoidAllocator, Deleter> const &, ...)$/;"	f	namespace:boost::interprocess::detail	signature:(shared_count<T, VoidAllocator, Deleter> const &, ...)
stable_vector	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   explicit stable_vector(const Allocator& al=Allocator())$/;"	f	class:boost::container::stable_vector	access:public	signature:(const Allocator& al=Allocator())
stable_vector	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   explicit stable_vector(size_type n)$/;"	f	class:boost::container::stable_vector	access:public	signature:(size_type n)
stable_vector	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   stable_vector(const stable_vector& x)$/;"	f	class:boost::container::stable_vector	access:public	signature:(const stable_vector& x)
stable_vector	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   stable_vector(InputIterator first,InputIterator last,const Allocator& al=Allocator())$/;"	f	class:boost::container::stable_vector	access:public	signature:(InputIterator first,InputIterator last,const Allocator& al=Allocator())
stable_vector	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   stable_vector(size_type n, const T& t, const Allocator& al=Allocator())$/;"	f	class:boost::container::stable_vector	access:public	signature:(size_type n, const T& t, const Allocator& al=Allocator())
stable_vector	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^class stable_vector$/;"	c	namespace:boost::container
STABLE_VECTOR_CHECK_INVARIANT	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	1321;"	d
STABLE_VECTOR_CHECK_INVARIANT	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	338;"	d
stable_vector_detail	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^namespace stable_vector_detail{$/;"	n	namespace:boost::container
STABLE_VECTOR_USE_CONTAINERS_VECTOR	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	46;"	d
standard_rights_required	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long standard_rights_required   = 0x000F0000L;$/;"	m	namespace:boost::interprocess::winapi
start	/usr/include/boost/interprocess/containers/container/string.hpp	/^      pointer        start;$/;"	m	struct:boost::container::containers_detail::basic_string_base::long_t	access:public
State	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  State;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
static_cast_tag	/usr/include/boost/interprocess/detail/cast_tags.hpp	/^struct static_cast_tag {};$/;"	s	namespace:boost::interprocess::detail
static_pointer_cast	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^boost::interprocess::intersegment_ptr<T> static_pointer_cast(const boost::interprocess::intersegment_ptr<U> &r)$/;"	f	namespace:boost::interprocess	signature:(const boost::interprocess::intersegment_ptr<U> &r)
static_pointer_cast	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static_pointer_cast(boost::interprocess::offset_ptr<U> const & r)$/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::offset_ptr<U> const & r)
static_pointer_cast	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^shared_ptr<T, VoidAllocator, Deleter> static_pointer_cast(shared_ptr<U, VoidAllocator, Deleter> const & r)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<U, VoidAllocator, Deleter> const & r)
Status	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      long Status;$/;"	m	union:boost::interprocess::winapi::io_status_block_t::__anon20	access:public
std	/usr/include/boost/interprocess/containers/container/container_fwd.hpp	/^namespace std {$/;"	n
std	/usr/include/boost/interprocess/containers/container/slist.hpp	/^namespace std {$/;"	n
std	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^namespace std {$/;"	n
std::insert_iterator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^class insert_iterator<boost::container::slist<T, A> > $/;"	c	namespace:std
std::insert_iterator::container	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   Container* container;$/;"	m	class:std::insert_iterator	access:protected
std::insert_iterator::Container	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef boost::container::slist<T, A> Container;$/;"	t	class:std::insert_iterator	access:protected
std::insert_iterator::container_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef Container           container_type;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::difference_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef void                difference_type;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::insert_iterator	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   insert_iterator(Container& x, $/;"	f	class:std::insert_iterator	access:public	signature:(Container& x, typename Container::iterator i, bool is_previous = false)
std::insert_iterator::iter	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typename Container::iterator iter;$/;"	m	class:std::insert_iterator	access:protected
std::insert_iterator::iterator_category	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef output_iterator_tag iterator_category;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::operator *	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   insert_iterator<Container>& operator*(){ return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:()
std::insert_iterator::operator ++	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   insert_iterator<Container>& operator++(){ return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:()
std::insert_iterator::operator ++	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   insert_iterator<Container>& operator++(int){ return *this; }$/;"	f	class:std::insert_iterator	access:public	signature:(int)
std::insert_iterator::operator =	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      operator=(const typename Container::value_type& value) $/;"	f	class:std::insert_iterator	access:public	signature:(const typename Container::value_type& value)
std::insert_iterator::pointer	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef void                pointer;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::reference	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef void                reference;$/;"	t	class:std::insert_iterator	access:public
std::insert_iterator::value_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef void                value_type;$/;"	t	class:std::insert_iterator	access:public
storage	/usr/include/boost/interprocess/containers/container/string.hpp	/^      size_type      storage;$/;"	m	struct:boost::container::containers_detail::basic_string_base::long_t	access:public
stored_allocator_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef allocator_type                          stored_allocator_type;$/;"	t	class:boost::container::deque_base	access:public
stored_allocator_type	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef allocator_type                             stored_allocator_type;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
stored_allocator_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef NodeAlloc                                  stored_allocator_type;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
stored_allocator_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::stored_allocator_type  stored_allocator_type;$/;"	t	class:boost::container::flat_map	access:public
stored_allocator_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::stored_allocator_type  stored_allocator_type;$/;"	t	class:boost::container::flat_multimap	access:public
stored_allocator_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::stored_allocator_type  stored_allocator_type;$/;"	t	class:boost::container::flat_multiset	access:public
stored_allocator_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::stored_allocator_type  stored_allocator_type;$/;"	t	class:boost::container::flat_set	access:public
stored_allocator_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef NodeAlloc                               stored_allocator_type;$/;"	t	class:boost::container::list	access:public
stored_allocator_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::stored_allocator_type  stored_allocator_type;$/;"	t	class:boost::container::map	access:public
stored_allocator_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::stored_allocator_type  stored_allocator_type;$/;"	t	class:boost::container::multimap	access:public
stored_allocator_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::stored_allocator_type  stored_allocator_type;$/;"	t	class:boost::container::multiset	access:public
stored_allocator_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::stored_allocator_type  stored_allocator_type;$/;"	t	class:boost::container::set	access:public
stored_allocator_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef NodeAlloc                               stored_allocator_type;$/;"	t	class:boost::container::slist	access:public
stored_allocator_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef allocator_type                          stored_allocator_type;$/;"	t	class:boost::container::basic_string	access:public
stored_allocator_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef allocator_type                          stored_allocator_type;$/;"	t	class:boost::container::containers_detail::basic_string_base	access:public
stored_allocator_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef allocator_type                          stored_allocator_type;$/;"	t	class:boost::container::vector	access:public
string	/usr/include/boost/interprocess/containers/container/string.hpp	/^string;$/;"	t	namespace:boost::container
string_fill	/usr/include/boost/interprocess/containers/container/string.hpp	/^string_fill(std::basic_ostream<CharT, Traits>& os,$/;"	f	namespace:boost::container::containers_detail	signature:(std::basic_ostream<CharT, Traits>& os, std::basic_streambuf<CharT, Traits>* buf, std::size_t n)
sublang_default	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long sublang_default      = (unsigned long)0x01;$/;"	m	namespace:boost::interprocess::winapi
substr	/usr/include/boost/interprocess/containers/container/string.hpp	/^   basic_string substr(size_type pos = 0, size_type n = npos) const $/;"	f	class:boost::container::basic_string	access:public	signature:(size_type pos = 0, size_type n = npos) const
swap	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   friend void swap(self_t &alloc1, self_t &alloc2)$/;"	f	class:boost::interprocess::detail::adaptive_pool_base	access:friend	signature:(self_t &alloc1, self_t &alloc2)
swap	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   friend void swap(self_t &alloc1, self_t &alloc2)$/;"	f	class:boost::interprocess::allocator	access:friend	signature:(self_t &alloc1, self_t &alloc2)
swap	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   friend void swap(cached_allocator_impl &alloc1, cached_allocator_impl &alloc2)$/;"	f	class:boost::interprocess::detail::cached_allocator_impl	access:friend	signature:(cached_allocator_impl &alloc1, cached_allocator_impl &alloc2)
swap	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   friend void swap(self_t &alloc1, self_t &alloc2)$/;"	f	class:boost::interprocess::detail::node_allocator_base	access:friend	signature:(self_t &alloc1, self_t &alloc2)
swap	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   friend void swap(self_t &alloc1,self_t &alloc2)$/;"	f	class:boost::interprocess::detail::private_adaptive_pool_base	access:friend	signature:(self_t &alloc1,self_t &alloc2)
swap	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   friend void swap(self_t &alloc1,self_t &alloc2)$/;"	f	class:boost::interprocess::detail::private_node_allocator_base	access:friend	signature:(self_t &alloc1,self_t &alloc2)
swap	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   void swap(deque &x)$/;"	f	class:boost::container::deque	access:public	signature:(deque &x)
swap	/usr/include/boost/interprocess/containers/container/deque.hpp	/^inline void swap(deque<T, A>& x, deque<T, A>& y)$/;"	f	namespace:boost::container	signature:(deque<T, A>& x, deque<T, A>& y)
swap	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   void swap(private_adaptive_node_pool_impl &other)$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:(private_adaptive_node_pool_impl &other)
swap	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   void swap(flat_tree& other) $/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(flat_tree& other)
swap	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^swap(flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& x, flat_tree<Key,Value,KeyOfValue,Compare,Alloc>& y)
swap	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void swap(basic_multiallocation_chain &x)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:public	signature:(basic_multiallocation_chain &x)
swap	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   void swap(transform_multiallocation_chain &other_chain)$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:(transform_multiallocation_chain &other_chain)
swap	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   void swap(node_alloc_holder &x)$/;"	f	namespace:boost::container::containers_detail	signature:(node_alloc_holder &x)
swap	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   void swap(private_node_pool_impl &other)$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:(private_node_pool_impl &other)
swap	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^inline void swap(pair<T1, T2>& x, pair<T1, T2>& y)$/;"	f	struct:boost::container::containers_detail::pair	access:public	signature:(pair<T1, T2>& x, pair<T1, T2>& y)
swap	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   void swap(ThisType& x)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(ThisType& x)
swap	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^swap(rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, $/;"	f	namespace:boost::container::containers_detail	signature:(rbtree<Key,Value,KeyOfValue,KeyCompare,A>& x, rbtree<Key,Value,KeyOfValue,KeyCompare,A>& y)
swap	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   void swap(flat_map& x)$/;"	f	class:boost::container::flat_map	access:public	signature:(flat_map& x)
swap	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   void swap(flat_multimap& x)$/;"	f	class:boost::container::flat_multimap	access:public	signature:(flat_multimap& x)
swap	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline void swap(flat_map<Key,T,Pred,Alloc>& x, $/;"	f	namespace:boost::container	signature:(flat_map<Key,T,Pred,Alloc>& x, flat_map<Key,T,Pred,Alloc>& y)
swap	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^inline void swap(flat_multimap<Key,T,Pred,Alloc>& x, flat_multimap<Key,T,Pred,Alloc>& y) $/;"	f	namespace:boost::container	signature:(flat_multimap<Key,T,Pred,Alloc>& x, flat_multimap<Key,T,Pred,Alloc>& y)
swap	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   void swap(flat_multiset& x)$/;"	f	class:boost::container::flat_multiset	access:public	signature:(flat_multiset& x)
swap	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   void swap(flat_set& x)$/;"	f	class:boost::container::flat_set	access:public	signature:(flat_set& x)
swap	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline void swap(flat_multiset<T,Pred,Alloc>& x, flat_multiset<T,Pred,Alloc>& y) $/;"	f	namespace:boost::container	signature:(flat_multiset<T,Pred,Alloc>& x, flat_multiset<T,Pred,Alloc>& y)
swap	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^inline void swap(flat_set<T,Pred,Alloc>& x, flat_set<T,Pred,Alloc>& y) $/;"	f	namespace:boost::container	signature:(flat_set<T,Pred,Alloc>& x, flat_set<T,Pred,Alloc>& y)
swap	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void swap(ThisType& x)$/;"	f	class:boost::container::list	access:public	signature:(ThisType& x)
swap	/usr/include/boost/interprocess/containers/container/list.hpp	/^inline void swap(list<T, A>& x, list<T, A>& y)$/;"	f	namespace:boost::container	signature:(list<T, A>& x, list<T, A>& y)
swap	/usr/include/boost/interprocess/containers/container/map.hpp	/^   void swap(map& x)$/;"	f	class:boost::container::map	access:public	signature:(map& x)
swap	/usr/include/boost/interprocess/containers/container/map.hpp	/^   void swap(multimap& x)$/;"	f	class:boost::container::multimap	access:public	signature:(multimap& x)
swap	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline void swap(map<Key,T,Pred,Alloc>& x, map<Key,T,Pred,Alloc>& y) $/;"	f	namespace:boost::container	signature:(map<Key,T,Pred,Alloc>& x, map<Key,T,Pred,Alloc>& y)
swap	/usr/include/boost/interprocess/containers/container/map.hpp	/^inline void swap(multimap<Key,T,Pred,Alloc>& x, multimap<Key,T,Pred,Alloc>& y) $/;"	f	namespace:boost::container	signature:(multimap<Key,T,Pred,Alloc>& x, multimap<Key,T,Pred,Alloc>& y)
swap	/usr/include/boost/interprocess/containers/container/set.hpp	/^   void swap(multiset& x)$/;"	f	class:boost::container::multiset	access:public	signature:(multiset& x)
swap	/usr/include/boost/interprocess/containers/container/set.hpp	/^   void swap(set& x)$/;"	f	class:boost::container::set	access:public	signature:(set& x)
swap	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline void swap(multiset<T,Pred,Alloc>& x, multiset<T,Pred,Alloc>& y) $/;"	f	namespace:boost::container	signature:(multiset<T,Pred,Alloc>& x, multiset<T,Pred,Alloc>& y)
swap	/usr/include/boost/interprocess/containers/container/set.hpp	/^inline void swap(set<T,Pred,Alloc>& x, set<T,Pred,Alloc>& y) $/;"	f	namespace:boost::container	signature:(set<T,Pred,Alloc>& x, set<T,Pred,Alloc>& y)
swap	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void swap(slist& x)$/;"	f	class:boost::container::slist	access:public	signature:(slist& x)
swap	/usr/include/boost/interprocess/containers/container/slist.hpp	/^inline void swap(slist<T,A>& x, slist<T,A>& y) $/;"	f	namespace:boost::container	signature:(slist<T,A>& x, slist<T,A>& y)
swap	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   void swap(stable_vector & x)$/;"	f	class:boost::container::stable_vector	access:public	signature:(stable_vector & x)
swap	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^void swap(stable_vector<T,Allocator>& x,stable_vector<T,Allocator>& y)$/;"	f	namespace:boost::container	signature:(stable_vector<T,Allocator>& x,stable_vector<T,Allocator>& y)
swap	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void swap(basic_string& x)$/;"	f	class:boost::container::basic_string	access:public	signature:(basic_string& x)
swap	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void swap(basic_string_base& other)$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:(basic_string_base& other)
swap	/usr/include/boost/interprocess/containers/container/string.hpp	/^inline void swap(basic_string<CharT,Traits,A>& x, basic_string<CharT,Traits,A>& y) $/;"	f	namespace:boost::container	signature:(basic_string<CharT,Traits,A>& x, basic_string<CharT,Traits,A>& y)
swap	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   void swap(vector& x)$/;"	f	class:boost::container::vector	access:public	signature:(vector& x)
swap	/usr/include/boost/interprocess/containers/container/vector.hpp	/^inline void swap(vector<T, A>& x, vector<T, A>& y)$/;"	f	namespace:boost::container	signature:(vector<T, A>& x, vector<T, A>& y)
swap	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   void swap(file_wrapper &other);$/;"	p	class:boost::interprocess::detail::file_wrapper	access:public	signature:(file_wrapper &other)
swap	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline void file_wrapper::swap(file_wrapper &other)$/;"	f	class:boost::interprocess::detail::file_wrapper	signature:(file_wrapper &other)
swap	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void swap(intersegment_ptr &other)$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(intersegment_ptr &other)
swap	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void swap(self_t &other)$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:(self_t &other)
swap	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^void swap (boost::interprocess::intersegment_ptr<T> &pt, $/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::intersegment_ptr<T> &pt, boost::interprocess::intersegment_ptr<T> &pt2)
swap	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void swap(basic_managed_memory_impl &other)$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:(basic_managed_memory_impl &other)
swap	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   void swap(managed_open_or_create_impl &other)$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:(managed_open_or_create_impl &other)
swap	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^inline void swap(managed_open_or_create_impl<DeviceAbstraction> &x$/;"	f	namespace:boost::interprocess::detail	signature:(managed_open_or_create_impl<DeviceAbstraction> &x ,managed_open_or_create_impl<DeviceAbstraction> &y)
swap	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   void swap(xsi_shared_memory &other);$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:(xsi_shared_memory &other)
swap	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^inline void xsi_shared_memory::swap(xsi_shared_memory &other)$/;"	f	class:boost::interprocess::xsi_shared_memory	signature:(xsi_shared_memory &other)
swap	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   void swap(xsi_shared_memory_device &other);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(xsi_shared_memory_device &other)
swap	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline void xsi_shared_memory_device::swap(xsi_shared_memory_device &other)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:(xsi_shared_memory_device &other)
swap	/usr/include/boost/interprocess/file_mapping.hpp	/^   void swap(file_mapping &other);$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:(file_mapping &other)
swap	/usr/include/boost/interprocess/file_mapping.hpp	/^inline void file_mapping::swap(file_mapping &other)$/;"	f	class:boost::interprocess::file_mapping	signature:(file_mapping &other)
swap	/usr/include/boost/interprocess/managed_external_buffer.hpp	/^   void swap(basic_managed_external_buffer &other)$/;"	f	class:boost::interprocess::basic_managed_external_buffer	access:public	signature:(basic_managed_external_buffer &other)
swap	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   void swap(basic_managed_heap_memory &other)$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:public	signature:(basic_managed_heap_memory &other)
swap	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   void swap(basic_managed_mapped_file &other)$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:(basic_managed_mapped_file &other)
swap	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   void swap(basic_managed_shared_memory &other)$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:(basic_managed_shared_memory &other)
swap	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   void swap(basic_managed_windows_shared_memory &other)$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:(basic_managed_windows_shared_memory &other)
swap	/usr/include/boost/interprocess/mapped_region.hpp	/^   void swap(mapped_region &other);$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:(mapped_region &other)
swap	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void mapped_region::swap(mapped_region &other)$/;"	f	class:boost::interprocess::mapped_region	signature:(mapped_region &other)
swap	/usr/include/boost/interprocess/mapped_region.hpp	/^inline void swap(mapped_region &x, mapped_region &y)$/;"	f	namespace:boost::interprocess	signature:(mapped_region &x, mapped_region &y)
swap	/usr/include/boost/interprocess/offset_ptr.hpp	/^inline void swap (boost::interprocess::offset_ptr<T> &pt, $/;"	f	namespace:boost::interprocess	signature:(boost::interprocess::offset_ptr<T> &pt, boost::interprocess::offset_ptr<T> &pt2)
swap	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   void swap(shared_memory_object &moved);$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:(shared_memory_object &moved)
swap	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline void shared_memory_object::swap(shared_memory_object &other)$/;"	f	class:boost::interprocess::shared_memory_object	signature:(shared_memory_object &other)
swap	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   void swap(shared_count & r) \/\/ nothrow$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:(shared_count & r)
swap	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   void swap(weak_count & r) \/\/ nothrow$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:(weak_count & r)
swap	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   void swap(intrusive_ptr & rhs)$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:(intrusive_ptr & rhs)
swap	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^void swap(intrusive_ptr<T, VP> & lhs,$/;"	f	namespace:boost::interprocess	signature:(intrusive_ptr<T, VP> & lhs, intrusive_ptr<T, VP> & rhs)
swap	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   void swap(scoped_ptr & b) \/\/ never throws$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:(scoped_ptr & b)
swap	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^void swap(scoped_ptr<T, D> & a, scoped_ptr<T, D> & b)$/;"	f	namespace:boost::interprocess	signature:(scoped_ptr<T, D> & a, scoped_ptr<T, D> & b)
swap	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   void swap(shared_ptr<T, VoidAllocator, Deleter> & other) \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<T, VoidAllocator, Deleter> & other)
swap	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^void swap(shared_ptr<T, VoidAllocator, Deleter> & a, shared_ptr<T, VoidAllocator, Deleter> & b)$/;"	f	namespace:boost::interprocess	signature:(shared_ptr<T, VoidAllocator, Deleter> & a, shared_ptr<T, VoidAllocator, Deleter> & b)
swap	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^void swap(unique_ptr<T, D>& x, unique_ptr<T, D>& y)$/;"	f	namespace:boost::interprocess	signature:(unique_ptr<T, D>& x, unique_ptr<T, D>& y)
swap	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   void swap(this_type & other) \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(this_type & other)
swap	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^void swap(weak_ptr<T, A, D> & a, weak_ptr<T, A, D> & b)$/;"	f	namespace:boost::interprocess	signature:(weak_ptr<T, A, D> & a, weak_ptr<T, A, D> & b)
swap	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   void swap(file_lock &other)$/;"	f	class:boost::interprocess::file_lock	access:public	signature:(file_lock &other)
swap	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   void swap( scoped_lock<mutex_type> &other)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:( scoped_lock<mutex_type> &other)
swap	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   void swap(sharable_lock<mutex_type> &other)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(sharable_lock<mutex_type> &other)
swap	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   void swap(upgradable_lock<mutex_type> &other)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(upgradable_lock<mutex_type> &other)
swap	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   void swap(xsi_named_mutex &other);$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:(xsi_named_mutex &other)
swap	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline void xsi_named_mutex::swap(xsi_named_mutex &other)$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:(xsi_named_mutex &other)
swap	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   void swap(windows_shared_memory &other);$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:(windows_shared_memory &other)
swap	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline void windows_shared_memory::swap(windows_shared_memory &other)$/;"	f	class:boost::interprocess::windows_shared_memory	signature:(windows_shared_memory &other)
swap_impl	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   static void swap_impl(stable_vector& x,stable_vector& y)$/;"	f	class:boost::container::stable_vector	access:private	signature:(stable_vector& x,stable_vector& y)
swap_vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void swap_vector(vector_type &vect)$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:(vector_type &vect)
swap_vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void swap_vector(vector_type &vect)$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:(vector_type &vect)
swap_vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void swap_vector(vector_type &vect)$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:(vector_type &vect)
swap_vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   void swap_vector(vector_type &vect)$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:(vector_type &vect)
SystemTimeOfDayInfoLength	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const long SystemTimeOfDayInfoLength  = 48;$/;"	m	namespace:boost::interprocess::winapi
systemwide_thread_id_copy	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline void systemwide_thread_id_copy$/;"	f	namespace:boost::interprocess::detail	signature:(const volatile OS_systemwide_thread_id_t &from, volatile OS_systemwide_thread_id_t &to)
system_basic_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_basic_information = 0,$/;"	e	enum:boost::interprocess::winapi::system_information_class
system_error	/usr/include/boost/interprocess/errors.hpp	/^   system_error,     \/\/ system generated error; if possible, is translated$/;"	e	enum:boost::interprocess::error_code_t
system_error_code	/usr/include/boost/interprocess/errors.hpp	/^inline int system_error_code() \/\/ artifact of POSIX and WINDOWS error reporting$/;"	f	namespace:boost::interprocess	signature:()
system_exception_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_exception_information = 33,$/;"	e	enum:boost::interprocess::winapi::system_information_class
system_info	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct system_info {$/;"	s	namespace:boost::interprocess::winapi
system_information_class	/usr/include/boost/interprocess/detail/win32_api.hpp	/^enum system_information_class {$/;"	g	namespace:boost::interprocess::winapi
system_interrupt_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_interrupt_information = 23,$/;"	e	enum:boost::interprocess::winapi::system_information_class
system_lookaside_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_lookaside_information = 45$/;"	e	enum:boost::interprocess::winapi::system_information_class
system_performance_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_performance_information = 2,$/;"	e	enum:boost::interprocess::winapi::system_information_class
system_processor_performance_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_processor_performance_information = 8,$/;"	e	enum:boost::interprocess::winapi::system_information_class
system_process_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_process_information = 5,$/;"	e	enum:boost::interprocess::winapi::system_information_class
system_registry_quota_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_registry_quota_information = 37,$/;"	e	enum:boost::interprocess::winapi::system_information_class
system_timeofday_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^union system_timeofday_information$/;"	u	namespace:boost::interprocess::winapi
system_time_of_day_information	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   system_time_of_day_information = 3,$/;"	e	enum:boost::interprocess::winapi::system_information_class
sys_ec	/usr/include/boost/interprocess/errors.hpp	/^   native_error_t sys_ec;$/;"	m	struct:boost::interprocess::ec_xlate	access:public
s_buffer_size	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      static std::size_t s_buffer_size() { return deque_base<T, Alloc>::s_buffer_size(); }$/;"	f	class:boost::container::deque_base::const_iterator	access:public	signature:()
s_buffer_size	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   static std::size_t s_buffer_size() $/;"	f	class:boost::container::deque	access:private	signature:()
s_buffer_size	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   static std::size_t s_buffer_size() { return deque_buf_size(sizeof(T)); }$/;"	f	class:boost::container::deque_base	access:protected	signature:()
s_compare	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static int s_compare(const_pointer f1, const_pointer l1,$/;"	f	class:boost::container::basic_string	access:private	signature:(const_pointer f1, const_pointer l1, const_pointer f2, const_pointer l2)
s_groups	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   flat_map_intersegment<Mutex>::s_groups;$/;"	m	class:boost::interprocess::flat_map_intersegment
s_groups	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static segment_groups_t s_groups;$/;"	m	struct:boost::interprocess::flat_map_intersegment	access:private
s_map	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   flat_map_intersegment<Mutex>::s_map;$/;"	m	class:boost::interprocess::flat_map_intersegment
s_map	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static mappings_t       s_map;$/;"	m	struct:boost::interprocess::flat_map_intersegment	access:private
t	/usr/include/boost/interprocess/containers/container/detail/type_traits.hpp	/^    T t;$/;"	m	struct:boost::container::containers_detail::alignment_of_hack	access:public
t	/usr/include/boost/interprocess/detail/type_traits.hpp	/^    T t;$/;"	m	struct:boost::interprocess::detail::alignment_of_hack	access:public
tail	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   const inherited& tail() const { return *this; }$/;"	f	class:boost::container::containers_detail::tuple	access:public	signature:() const
tail	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   inherited& tail()             { return *this; }$/;"	f	class:boost::container::containers_detail::tuple	access:public	signature:()
tail	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   const inherited& tail() const { return *this; }$/;"	f	class:boost::interprocess::detail::tuple	access:public	signature:() const
tail	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   inherited& tail()             { return *this; }$/;"	f	class:boost::interprocess::detail::tuple	access:public	signature:()
test	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^   template <class U> static char test(const typename U::version*);$/;"	p	struct:boost::container::containers_detail::impl::has_version	access:private	signature:(const typename U::version*)
test	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^   template <class U> static two test(...);$/;"	p	struct:boost::container::containers_detail::impl::has_version	access:private	signature:(....)
test	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^template <class U> static char test(typename U::pointer* = 0);$/;"	p	namespace:boost::interprocess::detail::pointer_type_imp	signature:(typename U::pointer* = 0)
test	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^template <class U> static two  test(...);$/;"	p	namespace:boost::interprocess::detail::pointer_type_imp	signature:(....)
ThisType	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^                  , KeyCompare, A>                    ThisType;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
ThisType	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef list <T, A>                                ThisType;$/;"	t	class:boost::container::list	access:private
ThisType	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef slist <T, A>                               ThisType;$/;"	t	class:boost::container::slist	access:private
this_allocator	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^      <this_type>::other                     this_allocator;$/;"	t	class:boost::interprocess::detail::sp_counted_impl_pd	access:private
this_pointer	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef typename this_allocator::pointer  this_pointer;$/;"	t	class:boost::interprocess::detail::sp_counted_impl_pd	access:private
this_type	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef private_adaptive_node_pool_impl this_type;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
this_type	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   typedef  constant_iterator<T, Difference> this_type;$/;"	t	class:boost::container::constant_iterator	access:private
this_type	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   typedef  default_construct_iterator<T, Difference> this_type;$/;"	t	class:boost::container::default_construct_iterator	access:private
this_type	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   typedef emplace_iterator this_type;$/;"	t	class:boost::container::emplace_iterator	access:private
this_type	/usr/include/boost/interprocess/containers/container/detail/iterators.hpp	/^   typedef repeat_iterator<T, Difference> this_type;$/;"	t	class:boost::container::repeat_iterator	access:private
this_type	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   typedef memory_algorithm_common<MemoryAlgorithm>            this_type;$/;"	t	class:boost::interprocess::detail::memory_algorithm_common	access:public
this_type	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   typedef sp_counted_impl_pd<A, D>          this_type;$/;"	t	class:boost::interprocess::detail::sp_counted_impl_pd	access:private
this_type	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   typedef intrusive_ptr this_type;$/;"	t	class:boost::interprocess::intrusive_ptr	access:private
this_type	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef scoped_ptr<T, Deleter> this_type;$/;"	t	class:boost::interprocess::scoped_ptr	access:private
this_type	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef shared_ptr<T, VoidAllocator, Deleter> this_type;$/;"	t	class:boost::interprocess::shared_ptr	access:private
this_type	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   typedef weak_ptr<T, A, D> this_type;$/;"	t	class:boost::interprocess::weak_ptr	access:private
this_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   typedef scoped_lock<Mutex> this_type;$/;"	t	class:boost::interprocess::scoped_lock	access:private
this_type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   typedef sharable_lock<SharableMutex> this_type;$/;"	t	class:boost::interprocess::sharable_lock	access:private
this_type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   typedef upgradable_lock<UpgradableMutex> this_type;$/;"	t	class:boost::interprocess::upgradable_lock	access:private
thread_yield	/usr/include/boost/interprocess/detail/os_thread_functions.hpp	/^inline void thread_yield()$/;"	f	namespace:boost::interprocess::detail	signature:()
throw_length_error	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void throw_length_error() const$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:() const
throw_out_of_range	/usr/include/boost/interprocess/containers/container/string.hpp	/^   void throw_out_of_range() const$/;"	f	class:boost::container::containers_detail::basic_string_base	access:protected	signature:() const
tie_forward	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^tuple<Values&&...> tie_forward(Values&&... values)$/;"	f	namespace:boost::container::containers_detail	signature:(Values&&.... values)
tie_forward	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^tuple<Values&&...> tie_forward(Values&&... values)$/;"	f	namespace:boost::interprocess::detail	signature:(Values&&.... values)
timed	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   enum block_t   {  blocking,   timed,   non_blocking   };$/;"	e	enum:boost::interprocess::message_queue::block_t
timed_acquire_file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool timed_acquire_file_lock$/;"	f	class:boost::interprocess::file_lock	access:private	signature:(file_handle_t hnd, bool &acquired, const boost::posix_time::ptime &abs_time)
timed_acquire_file_lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool timed_acquire_file_lock_sharable$/;"	f	class:boost::interprocess::file_lock	access:private	signature:(file_handle_t hnd, bool &acquired, const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/emulation/interprocess_mutex.hpp	/^inline bool interprocess_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/emulation/interprocess_recursive_mutex.hpp	/^inline bool interprocess_recursive_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::file_lock	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline bool file_lock::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::file_lock	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::timed_lock$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline bool named_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::named_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline bool named_recursive_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_lock$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool timed_lock(const boost::posix_time::ptime &)$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:(const boost::posix_time::ptime &)
timed_lock	/usr/include/boost/interprocess/sync/posix/interprocess_mutex.hpp	/^inline bool interprocess_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/posix/interprocess_recursive_mutex.hpp	/^inline bool interprocess_recursive_mutex::timed_lock(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   bool timed_lock(const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:(const boost::posix_time::ptime& abs_time)
timed_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   bool timed_lock(const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:(const boost::posix_time::ptime& abs_time)
timed_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   bool timed_lock(const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(const boost::posix_time::ptime& abs_time)
timed_lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::file_lock	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline bool file_lock::timed_lock_sharable(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::file_lock	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::timed_lock_sharable$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_lock_sharable$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool timed_lock_sharable(const boost::posix_time::ptime &)$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:(const boost::posix_time::ptime &)
timed_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool timed_lock_upgradable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::timed_lock_upgradable$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool timed_lock_upgradable(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_lock_upgradable$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_lock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool timed_lock_upgradable(const boost::posix_time::ptime &)$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:(const boost::posix_time::ptime &)
timed_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool timed_receive (void *buffer,           std::size_t buffer_size, $/;"	p	class:boost::interprocess::message_queue	access:public	signature:(void *buffer, std::size_t buffer_size, std::size_t &recvd_size,unsigned int &priority, const boost::posix_time::ptime &abs_time)
timed_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue::timed_receive(void *buffer,              std::size_t buffer_size, $/;"	f	class:boost::interprocess::message_queue	signature:(void *buffer, std::size_t buffer_size, std::size_t &recvd_size, unsigned int &priority, const boost::posix_time::ptime &abs_time)
timed_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool timed_send    (const void *buffer,     std::size_t buffer_size, $/;"	p	class:boost::interprocess::message_queue	access:public	signature:(const void *buffer, std::size_t buffer_size, unsigned int priority, const boost::posix_time::ptime& abs_time)
timed_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline bool message_queue::timed_send$/;"	f	class:boost::interprocess::message_queue	signature:(const void *buffer, std::size_t buffer_size ,unsigned int priority, const boost::posix_time::ptime &abs_time)
timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool timed_unlock_upgradable_and_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::timed_unlock_upgradable_and_lock$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool timed_unlock_upgradable_and_lock(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::timed_unlock_upgradable_and_lock$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:(const boost::posix_time::ptime &abs_time)
timed_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool timed_unlock_upgradable_and_lock(const boost::posix_time::ptime &)$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:(const boost::posix_time::ptime &)
timed_wait	/usr/include/boost/interprocess/sync/emulation/interprocess_semaphore.hpp	/^inline bool interprocess_semaphore::timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:(const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
timed_wait	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   bool timed_wait(L& lock, const boost::posix_time::ptime &abs_time, Pr pred);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
timed_wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline bool named_condition::timed_wait$/;"	f	class:boost::interprocess::named_condition	signature:(L& lock, const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline bool named_condition::timed_wait$/;"	f	class:boost::interprocess::named_condition	signature:(L& lock, const boost::posix_time::ptime &abs_time, Pr pred)
timed_wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time);$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline bool named_semaphore::timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::named_semaphore	signature:(const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/posix/interprocess_semaphore.hpp	/^inline bool interprocess_semaphore::timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:(const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::detail::named_semaphore_wrapper	access:public	signature:(const boost::posix_time::ptime &abs_time)
timed_wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   bool timed_wait(const boost::posix_time::ptime &abs_time)$/;"	f	class:boost::interprocess::detail::semaphore_wrapper	access:public	signature:(const boost::posix_time::ptime &abs_time)
tmp_filename	/usr/include/boost/interprocess/detail/tmp_dir_helpers.hpp	/^inline void tmp_filename(const char *filename, std::string &tmp_name)$/;"	f	namespace:boost::interprocess::detail	signature:(const char *filename, std::string &tmp_name)
top_msg	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   msg_hdr_t * top_msg()$/;"	f	class:boost::interprocess::detail::mq_hdr_t	access:public	signature:()
total_size	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t total_size() const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:() const
total_size_with_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t total_size_with_header() const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:() const
touch	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      void touch(){}$/;"	f	class:boost::container::stable_vector::invariant_checker	access:public	signature:()
to_first_header	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   static Header *to_first_header(block_header *bheader)$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:(block_header *bheader)
to_node	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   static node & to_node(VoidPointer p)$/;"	f	class:boost::container::containers_detail::basic_multiallocation_chain	access:private	signature:(VoidPointer p)
traits_t	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef deque_value_traits<T, Alloc>            traits_t;$/;"	t	class:boost::container::deque_base	access:protected
traits_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef Traits                                  traits_type;$/;"	t	class:boost::container::basic_string	access:public
traits_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef CharTraits                                    traits_type;$/;"	t	class:boost::interprocess::basic_bufferbuf	access:public
traits_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_bufferstream	access:public
traits_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_ibufferstream	access:public
traits_type	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_obufferstream	access:public
traits_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef CharTraits                        traits_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
traits_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
traits_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
traits_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef typename std::basic_ios<char_type, CharTraits>::traits_type  traits_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
transform_iterator	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   explicit transform_iterator()$/;"	f	class:boost::container::transform_iterator	access:public	signature:()
transform_iterator	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^   explicit transform_iterator(const Iterator &it, const UnaryFunction &f = UnaryFunction())$/;"	f	class:boost::container::transform_iterator	access:public	signature:(const Iterator &it, const UnaryFunction &f = UnaryFunction())
transform_iterator	/usr/include/boost/interprocess/containers/container/detail/transform_iterator.hpp	/^class transform_iterator$/;"	c	namespace:boost::container	inherits:UnaryFunction,std::iterator
transform_iterator	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   explicit transform_iterator()$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:()
transform_iterator	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^   explicit transform_iterator(const Iterator &it, const UnaryFunction &f = UnaryFunction())$/;"	f	class:boost::interprocess::transform_iterator	access:public	signature:(const Iterator &it, const UnaryFunction &f = UnaryFunction())
transform_iterator	/usr/include/boost/interprocess/detail/transform_iterator.hpp	/^class transform_iterator$/;"	c	namespace:boost::interprocess	inherits:UnaryFunction,std::iterator
transform_multiallocation_chain	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   transform_multiallocation_chain()$/;"	f	class:boost::container::containers_detail::transform_multiallocation_chain	access:public	signature:()
transform_multiallocation_chain	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^class transform_multiallocation_chain$/;"	c	namespace:boost::container::containers_detail
TreeHook	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^      , bi::link_mode<bi::normal_link> >::type           TreeHook;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:private
tree_t	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^                           Alloc> tree_t;$/;"	t	class:boost::container::flat_map	access:private
tree_t	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^                           Alloc> tree_t;$/;"	t	class:boost::container::flat_multimap	access:private
tree_t	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef containers_detail::flat_tree<T, T, containers_detail::identity<T>, Pred, Alloc> tree_t;$/;"	t	class:boost::container::flat_multiset	access:private
tree_t	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef containers_detail::flat_tree<T, T, containers_detail::identity<T>, Pred, Alloc> tree_t;$/;"	t	class:boost::container::flat_set	access:private
tree_t	/usr/include/boost/interprocess/containers/container/map.hpp	/^                           Alloc> tree_t;$/;"	t	class:boost::container::map	access:private
tree_t	/usr/include/boost/interprocess/containers/container/map.hpp	/^                           Alloc> tree_t;$/;"	t	class:boost::container::multimap	access:private
tree_t	/usr/include/boost/interprocess/containers/container/set.hpp	/^                     containers_detail::identity<T>, Pred, Alloc> tree_t;$/;"	t	class:boost::container::multiset	access:private
tree_t	/usr/include/boost/interprocess/containers/container/set.hpp	/^                     containers_detail::identity<T>, Pred, Alloc> tree_t;$/;"	t	class:boost::container::set	access:private
trigger	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   static T trigger();$/;"	p	class:boost::container::containers_detail::is_convertible	access:private	signature:()
trigger	/usr/include/boost/interprocess/detail/move.hpp	/^   static T trigger();$/;"	p	class:boost::interprocess::move_detail::is_convertible	access:private	signature:()
trigger	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static T trigger();$/;"	p	class:boost::interprocess::detail::is_convertible	access:private	signature:()
trivial_assign	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   static const bool trivial_assign = has_trivial_assign<value_type>::value;$/;"	m	struct:boost::container::deque_value_traits	access:public
trivial_assign	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   static const bool trivial_assign = has_trivial_assign<value_type>::value;$/;"	m	struct:boost::container::containers_detail::vector_value_traits	access:public
trivial_copy	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   static const bool trivial_copy = has_trivial_copy<value_type>::value;$/;"	m	struct:boost::container::deque_value_traits	access:public
trivial_copy	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   static const bool trivial_copy = has_trivial_copy<value_type>::value;$/;"	m	struct:boost::container::containers_detail::vector_value_traits	access:public
trivial_dctr	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   static const bool trivial_dctr = boost::has_trivial_destructor<value_type>::value;$/;"	m	struct:boost::container::deque_value_traits	access:public
trivial_dctr	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   static const bool trivial_dctr = boost::has_trivial_destructor<value_type>::value;$/;"	m	struct:boost::container::containers_detail::vector_value_traits	access:public
trivial_dctr_after_move	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   static const bool trivial_dctr_after_move = false;$/;"	m	struct:boost::container::deque_value_traits	access:public
trivial_dctr_after_move	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   static const bool trivial_dctr_after_move = false;$/;"	m	struct:boost::container::containers_detail::vector_value_traits	access:public
true_	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^typedef bool_<true>        true_;$/;"	t	namespace:boost::container::containers_detail
true_	/usr/include/boost/interprocess/detail/mpl.hpp	/^typedef bool_<true>        true_;$/;"	t	namespace:boost::interprocess::detail
true_t	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   typedef char true_t;$/;"	t	class:boost::container::containers_detail::is_convertible	access:private
true_t	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef char true_t;$/;"	t	class:boost::interprocess::move_detail::is_convertible	access:private
true_t	/usr/include/boost/interprocess/detail/mpl.hpp	/^   typedef char true_t;$/;"	t	class:boost::interprocess::detail::is_convertible	access:private
true_type	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^typedef true_  true_type;$/;"	t	namespace:boost::container::containers_detail
true_type	/usr/include/boost/interprocess/detail/mpl.hpp	/^typedef true_  true_type;$/;"	t	namespace:boost::interprocess::detail
truncate	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   void truncate(offset_t length);$/;"	p	class:boost::interprocess::detail::file_wrapper	access:public	signature:(offset_t length)
truncate	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline void file_wrapper::truncate(offset_t length)$/;"	f	class:boost::interprocess::detail::file_wrapper	signature:(offset_t length)
truncate	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   void truncate(offset_t length);$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:(offset_t length)
truncate	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline void shared_memory_object::truncate(offset_t length)$/;"	f	class:boost::interprocess::shared_memory_object	signature:(offset_t length)
truncate_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   static void truncate_device(DeviceAbstraction &, std::size_t, detail::false_)$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:private	signature:(DeviceAbstraction &, std::size_t, detail::false_)
truncate_device	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   static void truncate_device(DeviceAbstraction &dev, std::size_t size, detail::true_)$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:private	signature:(DeviceAbstraction &dev, std::size_t size, detail::true_)
truncate_existing	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long truncate_existing = 5;$/;"	m	namespace:boost::interprocess::winapi
truncate_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool truncate_file (file_handle_t hnd, std::size_t size)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd, std::size_t size)
try_acquire_file_lock	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool try_acquire_file_lock(file_handle_t hnd, bool &acquired)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd, bool &acquired)
try_acquire_file_lock_sharable	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool try_acquire_file_lock_sharable(file_handle_t hnd, bool &acquired)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd, bool &acquired)
try_lock	/usr/include/boost/interprocess/sync/emulation/interprocess_mutex.hpp	/^inline bool interprocess_mutex::try_lock(void)$/;"	f	class:boost::interprocess::interprocess_mutex	signature:(void)
try_lock	/usr/include/boost/interprocess/sync/emulation/interprocess_recursive_mutex.hpp	/^inline bool interprocess_recursive_mutex::try_lock()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline bool file_lock::try_lock()$/;"	f	class:boost::interprocess::file_lock	signature:()
try_lock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   bool try_lock(void);$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:(void)
try_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_lock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline bool named_mutex::try_lock()$/;"	f	class:boost::interprocess::named_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline bool named_recursive_mutex::try_lock()$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_lock()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/posix/interprocess_mutex.hpp	/^inline bool interprocess_mutex::try_lock()$/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/posix/interprocess_recursive_mutex.hpp	/^inline bool interprocess_recursive_mutex::try_lock()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
try_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   bool try_lock()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   bool try_lock()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
try_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   bool try_lock()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
try_lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   bool try_lock_sharable();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
try_lock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline bool file_lock::try_lock_sharable()$/;"	f	class:boost::interprocess::file_lock	signature:()
try_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_lock_sharable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
try_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_lock_sharable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
try_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
try_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
try_lock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_lock_sharable()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
try_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_lock_upgradable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
try_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_lock_upgradable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
try_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
try_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
try_lock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_lock_upgradable()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
try_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool try_receive (void *buffer,           std::size_t buffer_size, $/;"	p	class:boost::interprocess::message_queue	access:public	signature:(void *buffer, std::size_t buffer_size, std::size_t &recvd_size,unsigned int &priority)
try_receive	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   message_queue::try_receive(void *buffer,              std::size_t buffer_size, $/;"	f	class:boost::interprocess::message_queue	signature:(void *buffer, std::size_t buffer_size, std::size_t &recvd_size, unsigned int &priority)
try_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   bool try_send    (const void *buffer,     std::size_t buffer_size, $/;"	p	class:boost::interprocess::message_queue	access:public	signature:(const void *buffer, std::size_t buffer_size, unsigned int priority)
try_send	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline bool message_queue::try_send$/;"	f	class:boost::interprocess::message_queue	signature:(const void *buffer, std::size_t buffer_size, unsigned int priority)
try_shrink	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static bool try_shrink $/;"	f	class:boost::interprocess::detail::memory_algorithm_common	access:public	signature:(MemoryAlgorithm *memory_algo, void *ptr ,const std::size_t max_size, const std::size_t preferred_size ,std::size_t &received_size)
try_shrink_in_place	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type try_shrink_in_place= boost::container::try_shrink_in_place;$/;"	m	namespace:boost::interprocess
try_shrink_in_place	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^static const allocation_type try_shrink_in_place= (allocation_type)try_shrink_in_place_v;$/;"	m	namespace:boost::container
try_shrink_in_place_v	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^   try_shrink_in_place_v = 0x40$/;"	e	enum:boost::container::allocation_type_v
try_to_lock	/usr/include/boost/interprocess/sync/lock_options.hpp	/^static const try_to_lock_type     try_to_lock    = try_to_lock_type();$/;"	m	namespace:boost::interprocess
try_to_lock_type	/usr/include/boost/interprocess/sync/lock_options.hpp	/^struct try_to_lock_type {};$/;"	s	namespace:boost::interprocess
try_to_lock_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_INTERPROCESS_RV_REF(sharable_lock<T>) shar, try_to_lock_type$/;"	m	class:boost::interprocess::scoped_lock	access:public
try_to_lock_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_INTERPROCESS_RV_REF(upgradable_lock<T>) upgr, try_to_lock_type$/;"	m	class:boost::interprocess::scoped_lock	access:public
try_to_lock_type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock( BOOST_INTERPROCESS_RV_REF(sharable_lock<T>) shar, try_to_lock_type$/;"	m	class:boost::interprocess::upgradable_lock	access:public
try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_unlock_sharable_and_lock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_unlock_sharable_and_lock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_unlock_sharable_and_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_unlock_sharable_and_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
try_unlock_sharable_and_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_unlock_sharable_and_lock()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_unlock_sharable_and_lock_upgradable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_unlock_sharable_and_lock_upgradable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_unlock_sharable_and_lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_unlock_sharable_and_lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
try_unlock_sharable_and_lock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_unlock_sharable_and_lock_upgradable()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   bool try_unlock_upgradable_and_lock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline bool interprocess_upgradable_mutex::try_unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   bool try_unlock_upgradable_and_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline bool named_upgradable_mutex::try_unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
try_unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   bool try_unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
try_wait	/usr/include/boost/interprocess/sync/emulation/interprocess_semaphore.hpp	/^inline bool interprocess_semaphore::try_wait()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
try_wait	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   bool try_wait();$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:()
try_wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   bool try_wait();$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:()
try_wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline bool named_semaphore::try_wait()$/;"	f	class:boost::interprocess::named_semaphore	signature:()
try_wait	/usr/include/boost/interprocess/sync/posix/interprocess_semaphore.hpp	/^inline bool interprocess_semaphore::try_wait()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
try_wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   bool try_wait()$/;"	f	class:boost::interprocess::detail::named_semaphore_wrapper	access:public	signature:()
try_wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   bool try_wait()$/;"	f	class:boost::interprocess::detail::semaphore_wrapper	access:public	signature:()
tuple	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   tuple() { }$/;"	f	class:boost::container::containers_detail::tuple	access:public	signature:()
tuple	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   tuple(const tuple<VValues...>& other)$/;"	f	class:boost::container::containers_detail::tuple	access:public	signature:(const tuple<VValues...>& other)
tuple	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   tuple(typename add_const_reference<Head>::type v,$/;"	f	class:boost::container::containers_detail::tuple	access:public	signature:(typename add_const_reference<Head>::type v, typename add_const_reference<Tail>::type... vtail)
tuple	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^class tuple<Head, Tail...>$/;"	c	namespace:boost::container::containers_detail	inherits:tuple
tuple	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^template<> class tuple<>$/;"	c	namespace:boost::container::containers_detail
tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   tuple() { }$/;"	f	class:boost::interprocess::detail::tuple	access:public	signature:()
tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   tuple(const tuple<VValues...>& other)$/;"	f	class:boost::interprocess::detail::tuple	access:public	signature:(const tuple<VValues...>& other)
tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   tuple(typename add_const_reference<Head>::type v,$/;"	f	class:boost::interprocess::detail::tuple	access:public	signature:(typename add_const_reference<Head>::type v, typename add_const_reference<Tail>::type... vtail)
tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^class tuple<Head, Tail...>$/;"	c	namespace:boost::interprocess::detail	inherits:tuple
tuple	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^template<> class tuple<>$/;"	c	namespace:boost::interprocess::detail
tuple_element	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^struct tuple_element<0, tuple<Head, Tail...> >$/;"	s	namespace:boost::container::containers_detail
tuple_element	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^struct tuple_element<I, tuple<Head, Tail...> >$/;"	s	namespace:boost::container::containers_detail
tuple_element	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^struct tuple_element<0, tuple<Head, Tail...> >$/;"	s	namespace:boost::interprocess::detail
tuple_element	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^struct tuple_element<I, tuple<Head, Tail...> >$/;"	s	namespace:boost::interprocess::detail
two	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^   struct two {char _[2];};$/;"	s	struct:boost::container::containers_detail::impl::has_version	access:private
two	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct two {char _[2];};$/;"	s	namespace:boost::interprocess::detail
type	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^      < SegmentManager, sizeof_value<T>::value, NodesPerBlock, MaxFreeBlocks, OverheadPercent> type;$/;"	t	struct:boost::interprocess::detail::adaptive_pool_base::node_pool	access:public
type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      typedef typename Derived::template node_pool<0>::type type;$/;"	t	struct:boost::interprocess::detail::node_pool_allocation_impl::node_pool	access:public
type	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^      < SegmentManager, sizeof_value<T>::value, NodesPerBlock> type;$/;"	t	struct:boost::interprocess::detail::node_allocator_base::node_pool	access:public
type	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      > type;$/;"	t	struct:boost::interprocess::detail::private_adaptive_pool_base::node_pool	access:public
type	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      > type;$/;"	t	struct:boost::interprocess::detail::private_node_allocator_base::node_pool	access:public
type	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^    typedef T1 type;$/;"	t	struct:boost::container::containers_detail::if_c	access:public
type	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^    typedef T2 type;$/;"	t	struct:boost::container::containers_detail::if_c	access:public
type	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   typedef integral_constant<T,val> type;$/;"	t	struct:boost::container::containers_detail::integral_constant	access:public
type	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   typedef T type;$/;"	t	struct:boost::container::containers_detail::identity	access:public
type	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   typedef typename if_c<0 != T1::value, T2, T3>::type type;$/;"	t	struct:boost::container::containers_detail::if_	access:public
type	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^  typedef T type;$/;"	t	struct:boost::container::containers_detail::enable_if_c	access:public
type	/usr/include/boost/interprocess/containers/container/detail/pair.hpp	/^          < containers_detail::is_same<U, ::boost::interprocess::rv<pair> > >::type* = 0$/;"	m	class:boost::container::containers_detail::pair::containers_detail::disable_if	access:public
type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      >::type  type;$/;"	t	struct:boost::container::containers_detail::rbtree_hook	access:public
type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef container_type                          type ;$/;"	t	struct:boost::container::containers_detail::intrusive_rbtree_type	access:public
type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef pair<T1, T2> type;$/;"	t	struct:boost::container::containers_detail::rbtree_type	access:public
type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef T type;$/;"	t	struct:boost::container::containers_detail::rbtree_type	access:public
type	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typedef Head type;$/;"	t	struct:boost::container::containers_detail::tuple_element	access:public
type	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typedef typename add_reference<Element>::type                  type;$/;"	t	class:boost::container::containers_detail::get_impl	access:public
type	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typedef typename add_reference<Head>::type         type;$/;"	t	class:boost::container::containers_detail::get_impl	access:public
type	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^   typedef typename tuple_element<I-1, tuple<Tail...> >::type type;$/;"	t	struct:boost::container::containers_detail::tuple_element	access:public
type	/usr/include/boost/interprocess/containers/container/detail/variadic_templates_tools.hpp	/^{  typedef index_tuple<Indexes...> type;  };$/;"	t	struct:boost::container::containers_detail::build_number_seq	access:public
type	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^    typedef T type;$/;"	t	struct:boost::container::containers_detail::version_type	access:public
type	/usr/include/boost/interprocess/containers/container/list.hpp	/^      <containers_detail::bi::void_pointer<VoidPointer>, containers_detail::bi::link_mode<containers_detail::bi::normal_link> >::type type;$/;"	t	struct:boost::container::containers_detail::list_hook	access:public
type	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef container_type                       type ;$/;"	t	struct:boost::container::containers_detail::intrusive_list_type	access:public
type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      <containers_detail::bi::void_pointer<VoidPointer>, containers_detail::bi::link_mode<containers_detail::bi::normal_link> >::type type;$/;"	t	struct:boost::container::containers_detail::slist_hook	access:public
type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef container_type                       type ;$/;"	t	struct:boost::container::containers_detail::intrusive_slist_type	access:public
type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      <multialloc_cached_counted, typename Allocator::value_type>   type;$/;"	t	struct:boost::container::stable_vector_detail::select_multiallocation_chain	access:public
type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef typename Allocator::multiallocation_chain type;$/;"	t	struct:boost::container::stable_vector_detail::select_multiallocation_chain	access:public
type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      typedef typename segment_manager::template allocator<T>::type type;$/;"	t	struct:boost::interprocess::detail::basic_managed_memory_impl::allocator	access:public
type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^      typedef typename segment_manager::template deleter<T>::type type;$/;"	t	struct:boost::interprocess::detail::basic_managed_memory_impl::deleter	access:public
type	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   typedef segment_manager<CharType, MemoryAlgorithm, IndexType> type;$/;"	t	struct:boost::interprocess::detail::segment_manager_type	access:public
type	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef T type;$/;"	t	struct:boost::interprocess::move_detail::identity	access:public
type	/usr/include/boost/interprocess/detail/mpl.hpp	/^    typedef T1 type;$/;"	t	struct:boost::interprocess::detail::if_c	access:public
type	/usr/include/boost/interprocess/detail/mpl.hpp	/^    typedef T2 type;$/;"	t	struct:boost::interprocess::detail::if_c	access:public
type	/usr/include/boost/interprocess/detail/mpl.hpp	/^   typedef integral_constant<T,val> type;$/;"	t	struct:boost::interprocess::detail::integral_constant	access:public
type	/usr/include/boost/interprocess/detail/mpl.hpp	/^   typedef T type;$/;"	t	struct:boost::interprocess::detail::identity	access:public
type	/usr/include/boost/interprocess/detail/mpl.hpp	/^   typedef typename if_c<0 != T1::value, T2, T3>::type type;$/;"	t	struct:boost::interprocess::detail::if_	access:public
type	/usr/include/boost/interprocess/detail/mpl.hpp	/^  typedef T type;$/;"	t	struct:boost::interprocess::detail::enable_if_c	access:public
type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^        typename detail::remove_reference<D>::type>::type type;$/;"	t	struct:boost::interprocess::detail::pointer_type	access:public
type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^    typedef T* type;$/;"	t	struct:boost::interprocess::detail::pointer_type_imp::pointer_type	access:public
type	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^    typedef typename D::pointer type;$/;"	t	struct:boost::interprocess::detail::pointer_type_imp::pointer_type	access:public
type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef char type;$/;"	t	struct:boost::interprocess::detail::char_if_void	access:public
type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef T type;$/;"	t	struct:boost::interprocess::detail::char_if_void	access:public
type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   {  typedef detail::intrusive_value_type_impl<HeaderBase, CharT>  type; };$/;"	t	struct:boost::interprocess::detail::index_config::intrusive_value_type	access:public
type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^{  typedef segment_manager_base<MemoryAlgorithm> type;   };$/;"	t	struct:boost::interprocess::detail::segment_manager_base_type	access:public
type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef Head type;$/;"	t	struct:boost::interprocess::detail::tuple_element	access:public
type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename add_reference<Element>::type                  type;$/;"	t	class:boost::interprocess::detail::get_impl	access:public
type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename add_reference<Head>::type         type;$/;"	t	class:boost::interprocess::detail::get_impl	access:public
type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^   typedef typename tuple_element<I-1, tuple<Tail...> >::type type;$/;"	t	struct:boost::interprocess::detail::tuple_element	access:public
type	/usr/include/boost/interprocess/detail/variadic_templates_tools.hpp	/^{  typedef index_tuple<Indexes...> type;  };$/;"	t	struct:boost::interprocess::detail::build_number_seq	access:public
Type	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   unsigned long  Type;$/;"	m	struct:boost::interprocess::winapi::interprocess_memory_basic_information	access:public
type	/usr/include/boost/interprocess/segment_manager.hpp	/^      typedef boost::interprocess::allocator<T, segment_manager> type;$/;"	t	struct:boost::interprocess::segment_manager::allocator	access:public
type	/usr/include/boost/interprocess/segment_manager.hpp	/^      typedef boost::interprocess::deleter<T, segment_manager> type;$/;"	t	struct:boost::interprocess::segment_manager::deleter	access:public
type	/usr/include/boost/interprocess/segment_manager.hpp	/^      typedef detail::named_proxy<segment_manager, T, false>   type;$/;"	t	struct:boost::interprocess::segment_manager::construct_proxy	access:public
type	/usr/include/boost/interprocess/segment_manager.hpp	/^      typedef detail::named_proxy<segment_manager, T, true>   type;$/;"	t	struct:boost::interprocess::segment_manager::construct_iter_proxy	access:public
type	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef shared_ptr< T, void_allocator, deleter>                type;$/;"	t	struct:boost::interprocess::managed_shared_ptr	access:public
type	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^            >::type = nat())$/;"	m	class:boost::interprocess::unique_ptr::detail::enable_if_c	access:public
type	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^    typedef unique_ptr<T, D> type;$/;"	t	struct:boost::interprocess::detail::unique_ptr_error	access:public
type	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   > type;$/;"	t	struct:boost::interprocess::managed_unique_ptr	access:public
type	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   > type;$/;"	t	struct:boost::interprocess::managed_weak_ptr	access:public
type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^               , typename detail::enable_if< detail::is_same<T, Mutex> >::type * = 0)$/;"	m	class:boost::interprocess::scoped_lock::detail::enable_if	access:public
type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^         , typename detail::enable_if< detail::is_same<T, Mutex> >::type * = 0)$/;"	m	class:boost::interprocess::scoped_lock::detail::enable_if	access:public
type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^      , typename detail::enable_if< detail::is_same<T, Mutex> >::type * = 0)$/;"	m	class:boost::interprocess::scoped_lock::detail::enable_if	access:public
type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^               , typename detail::enable_if< detail::is_same<T, SharableMutex> >::type * = 0)$/;"	m	class:boost::interprocess::sharable_lock::detail::enable_if	access:public
type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^      , typename detail::enable_if< detail::is_same<T, SharableMutex> >::type * = 0)$/;"	m	class:boost::interprocess::sharable_lock::detail::enable_if	access:public
type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^                  , typename detail::enable_if< detail::is_same<T, UpgradableMutex> >::type * = 0)$/;"	m	class:boost::interprocess::upgradable_lock::detail::enable_if	access:public
type_name	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   const char *type_name;$/;"	m	struct:boost::interprocess::detail::in_place_interface	access:public
type_t	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      enum type_t {  DoCreate, DoOpen, DoOpenOrCreate  };$/;"	g	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public
t_	/usr/include/boost/interprocess/containers/container/list.hpp	/^      const value_type &t_;$/;"	m	class:boost::container::list::equal_to_value	access:private
t_	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      const value_type &t_;$/;"	m	class:boost::container::slist::equal_to_value	access:private
u	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   unique_ptr(BOOST_INTERPROCESS_RV_REF_2_TEMPL_ARGS(unique_ptr, U, E) u,$/;"	m	class:boost::interprocess::unique_ptr	access:public
UCopiedArrayDeallocator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      >::type   UCopiedArrayDeallocator;$/;"	t	struct:boost::container::containers_detail::vector_value_traits	access:public
UCopiedArrayDestructor	/usr/include/boost/interprocess/containers/container/vector.hpp	/^      >::type   UCopiedArrayDestructor;$/;"	t	struct:boost::container::containers_detail::vector_value_traits	access:public
uCurrentTimeZoneId	/usr/include/boost/interprocess/detail/win32_api.hpp	/^      unsigned long uCurrentTimeZoneId;$/;"	m	struct:boost::interprocess::winapi::system_timeofday_information::data_t	access:public
UnalignedFinalInternalBufferChars	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static const size_type  UnalignedFinalInternalBufferChars = $/;"	m	class:boost::container::containers_detail::basic_string_base	access:protected
underflow	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual int_type underflow()$/;"	f	class:boost::interprocess::basic_bufferbuf	access:protected	signature:()
underflow	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual int_type underflow()$/;"	f	class:boost::interprocess::basic_vectorbuf	access:protected	signature:()
unicode_string_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct unicode_string_t {$/;"	s	namespace:boost::interprocess::winapi
UninitializedSegment	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^      UninitializedSegment,  $/;"	e	enum:boost::interprocess::detail::managed_open_or_create_impl::__anon7
uninitialized_copy_all_to	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void uninitialized_copy_all_to(Iterator p) = 0;$/;"	p	struct:boost::container::containers_detail::advanced_insert_aux_int	access:public	signature:(Iterator p)
uninitialized_copy_all_to	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void uninitialized_copy_all_to(Iterator p)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:public	signature:(Iterator p)
uninitialized_copy_all_to	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void uninitialized_copy_all_to(Iterator p)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_proxy	access:public	signature:(Iterator p)
uninitialized_copy_all_to	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void uninitialized_copy_all_to(Iterator p)$/;"	f	struct:boost::container::containers_detail::default_construct_aux_proxy	access:public	signature:(Iterator p)
uninitialized_copy_copy	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^FwdIt uninitialized_copy_copy$/;"	f	namespace:boost::container	signature:(InpIt1 first1, InpIt1 last1, InpIt2 first2, InpIt2 last2, FwdIt result)
uninitialized_copy_impl	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   void uninitialized_copy_impl(Iterator p, const SizeType n)$/;"	f	struct:boost::container::containers_detail::default_construct_aux_proxy	access:public	signature:(Iterator p, const SizeType n)
uninitialized_copy_n	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^FwdIt uninitialized_copy_n$/;"	f	namespace:boost::container	signature:(InIt first, typename std::iterator_traits<InIt>::difference_type count, FwdIt dest)
uninitialized_copy_n_dispatch	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^FwdIt uninitialized_copy_n_dispatch$/;"	f	namespace:boost::container	signature:(InIt first, typename std::iterator_traits<InIt>::difference_type count, FwdIt dest, containers_detail::bool_<false>)
uninitialized_copy_n_dispatch	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^T *uninitialized_copy_n_dispatch(const T *first, typename std::iterator_traits<const T*>::difference_type length, T *dest, containers_detail::bool_<true>)$/;"	f	namespace:boost::container	signature:(const T *first, typename std::iterator_traits<const T*>::difference_type length, T *dest, containers_detail::bool_<true>)
uninitialized_copy_or_move	/usr/include/boost/interprocess/detail/move.hpp	/^F uninitialized_copy_or_move(I f, I l, F r$/;"	f	namespace:boost::interprocess	signature:(I f, I l, F r ,typename disable_if< move_detail::is_move_iterator<I> >::type* = 0 )
uninitialized_copy_or_move	/usr/include/boost/interprocess/detail/move.hpp	/^F uninitialized_copy_or_move(I f, I l, F r,$/;"	f	namespace:boost::interprocess	signature:(I f, I l, F r, typename enable_if< move_detail::is_move_iterator<I> >::type* = 0)
uninitialized_copy_some_and_update	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void uninitialized_copy_some_and_update(Iterator p, difference_type division_count, bool first_n)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:public	signature:(Iterator p, difference_type division_count, bool first_n)
uninitialized_copy_some_and_update	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void uninitialized_copy_some_and_update(Iterator pos, difference_type division_count, bool first) = 0;$/;"	p	struct:boost::container::containers_detail::advanced_insert_aux_int	access:public	signature:(Iterator pos, difference_type division_count, bool first)
uninitialized_copy_some_and_update	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void uninitialized_copy_some_and_update(Iterator pos, difference_type division_count, bool first_n)$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_proxy	access:public	signature:(Iterator pos, difference_type division_count, bool first_n)
uninitialized_copy_some_and_update	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual void uninitialized_copy_some_and_update(Iterator pos, difference_type division_count, bool first_n)$/;"	f	struct:boost::container::containers_detail::default_construct_aux_proxy	access:public	signature:(Iterator pos, difference_type division_count, bool first_n)
uninitialized_move	/usr/include/boost/interprocess/detail/move.hpp	/^F uninitialized_move(I f, I l, F r$/;"	f	namespace:boost::interprocess	signature:(I f, I l, F r ,typename enable_if<is_movable<typename std::iterator_traits<I>::value_type> >::type* = 0 )
uninitialized_move	/usr/include/boost/interprocess/detail/move.hpp	/^F uninitialized_move(I f, I l, F r,$/;"	f	namespace:boost::interprocess	signature:(I f, I l, F r, typename disable_if<is_movable<typename std::iterator_traits<I>::value_type> >::type* = 0)
uninitialized_move_move_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^F uninitialized_move_move_iterator(I f, I l, F r,$/;"	f	namespace:boost::interprocess::move_detail	signature:(I f, I l, F r, typename disable_if< is_movable<typename I::value_type> >::type* = 0)
uninitialized_move_move_iterator	/usr/include/boost/interprocess/detail/move.hpp	/^F uninitialized_move_move_iterator(I f, I l, F r,$/;"	f	namespace:boost::interprocess::move_detail	signature:(I f, I l, F r, typename enable_if< is_movable<typename I::value_type> >::type* = 0)
unique	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void unique()$/;"	f	class:boost::container::list	access:public	signature:()
unique	/usr/include/boost/interprocess/containers/container/list.hpp	/^   void unique(BinaryPredicate binary_pred)$/;"	f	class:boost::container::list	access:public	signature:(BinaryPredicate binary_pred)
unique	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void unique()$/;"	f	class:boost::container::slist	access:public	signature:()
unique	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   void unique(Pred pred)$/;"	f	class:boost::container::slist	access:public	signature:(Pred pred)
unique	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   bool unique() const \/\/ nothrow$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:() const
unique	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   bool unique() const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
unique_begin	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   const_unique_iterator unique_begin() const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:() const
unique_begin	/usr/include/boost/interprocess/segment_manager.hpp	/^   const_unique_iterator unique_begin() const$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:() const
unique_end	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   const_unique_iterator unique_end() const$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:() const
unique_end	/usr/include/boost/interprocess/segment_manager.hpp	/^   const_unique_iterator unique_end() const$/;"	f	class:boost::interprocess::segment_manager	access:public	signature:() const
unique_index_t	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef IndexType<index_config_unique>                   unique_index_t;$/;"	t	class:boost::interprocess::segment_manager	access:public
unique_instance	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^static const detail::unique_instance_t      * unique_instance = 0;$/;"	m	namespace:boost::interprocess
unique_instance_t	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^typedef instance_t<unique_type>     unique_instance_t;$/;"	t	namespace:boost::interprocess::detail
unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   explicit unique_ptr(pointer p)$/;"	f	class:boost::interprocess::unique_ptr	access:public	signature:(pointer p)
unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   template <class U, class E> unique_ptr(unique_ptr<U, E>&);$/;"	p	class:boost::interprocess::unique_ptr	access:public	signature:(unique_ptr<U, E>&)
unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   template <class U> unique_ptr(U&, typename detail::unique_ptr_error<U>::type = 0);$/;"	p	class:boost::interprocess::unique_ptr	access:public	signature:(U&, typename detail::unique_ptr_error<U>::type = 0)
unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   unique_ptr()$/;"	f	class:boost::interprocess::unique_ptr	access:public	signature:()
unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^   unique_ptr(pointer p$/;"	f	class:boost::interprocess::unique_ptr	access:public	signature:(pointer p ,typename detail::if_<detail::is_reference<D> ,D ,typename detail::add_reference<const D>::type>::type d)
unique_ptr	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^class unique_ptr$/;"	c	namespace:boost::interprocess
unique_ptr_error	/usr/include/boost/interprocess/smart_ptr/unique_ptr.hpp	/^struct unique_ptr_error<const unique_ptr<T, D> >$/;"	s	namespace:boost::interprocess::detail
unique_transform	/usr/include/boost/interprocess/segment_manager.hpp	/^      ,is_intrusive_index<index_type>::value>   unique_transform;$/;"	t	class:boost::interprocess::segment_manager	access:public
unique_type	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^enum instance_type {   anonymous_type, named_type, unique_type, max_allocation_type };$/;"	e	enum:boost::interprocess::instance_type
unlink_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool unlink_file(const char *filename)$/;"	f	namespace:boost::interprocess::winapi	signature:(const char *filename)
unlock	/usr/include/boost/interprocess/sync/emulation/interprocess_mutex.hpp	/^inline void interprocess_mutex::unlock(void)$/;"	f	class:boost::interprocess::interprocess_mutex	signature:(void)
unlock	/usr/include/boost/interprocess/sync/emulation/interprocess_recursive_mutex.hpp	/^inline void interprocess_recursive_mutex::unlock()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline void file_lock::unlock()$/;"	f	class:boost::interprocess::file_lock	signature:()
unlock	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^   void unlock(void);$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:(void)
unlock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/named_condition.hpp	/^      void unlock()  {   l_.lock();     }$/;"	f	class:boost::interprocess::named_condition::lock_inverter	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline void named_mutex::unlock()$/;"	f	class:boost::interprocess::named_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline void named_recursive_mutex::unlock()$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/posix/interprocess_mutex.hpp	/^inline void interprocess_mutex::unlock()$/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/posix/interprocess_recursive_mutex.hpp	/^inline void interprocess_recursive_mutex::unlock()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
unlock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   void unlock()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   void unlock()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   void unlock()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   void unlock();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:()
unlock	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline void xsi_named_mutex::unlock()$/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
UnlockFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall UnlockFile(void *hnd, unsigned long offset_low, unsigned long offset_high, unsigned long size_low, unsigned long size_high);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long offset_low, unsigned long offset_high, unsigned long size_low, unsigned long size_high)
UnlockFileEx	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall UnlockFileEx(void *hnd, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped* overlapped);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped* overlapped)
unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_and_lock_sharable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_and_lock_sharable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_and_lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_and_lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
unlock_and_lock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_and_lock_sharable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_and_lock_upgradable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_and_lock_upgradable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_and_lock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_and_lock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
unlock_and_lock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_and_lock_upgradable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
unlock_file_ex	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool unlock_file_ex(void *hnd, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped *overlapped)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hnd, unsigned long reserved, unsigned long size_low, unsigned long size_high, interprocess_overlapped *overlapped)
unlock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   void unlock_sharable();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
unlock_sharable	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline void file_lock::unlock_sharable()$/;"	f	class:boost::interprocess::file_lock	signature:()
unlock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_sharable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
unlock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_sharable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
unlock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
unlock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
unlock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_sharable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
unlock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_upgradable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
unlock_upgradable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_upgradable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
unlock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_upgradable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
unlock_upgradable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_upgradable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
unlock_upgradable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_upgradable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_upgradable_and_lock();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_upgradable_and_lock();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_upgradable_and_lock()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
unlock_upgradable_and_lock	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_upgradable_and_lock(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   void unlock_upgradable_and_lock_sharable();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline void interprocess_upgradable_mutex::unlock_upgradable_and_lock_sharable()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   void unlock_upgradable_and_lock_sharable();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline void named_upgradable_mutex::unlock_upgradable_and_lock_sharable()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
unlock_upgradable_and_lock_sharable	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   void unlock_upgradable_and_lock_sharable(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
UnmapViewOfFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall UnmapViewOfFile(void *);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *)
unmap_view_of_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline int unmap_view_of_file(void *address)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *address)
unordered_map_index	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   unordered_map_index(segment_manager_base *segment_mngr)$/;"	f	class:boost::interprocess::unordered_map_index	access:public	signature:(segment_manager_base *segment_mngr)
unordered_map_index	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^class unordered_map_index$/;"	c	namespace:boost::interprocess	inherits:unordered_map_index_aux::index_t
unordered_map_index_aux	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^struct unordered_map_index_aux$/;"	s	namespace:boost::interprocess
unspecified_bool_type	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   typedef pointer this_type::*unspecified_bool_type;$/;"	t	class:boost::interprocess::intrusive_ptr::this_type	access:private
unspecified_bool_type	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   typedef pointer this_type::*unspecified_bool_type;$/;"	t	class:boost::interprocess::scoped_ptr::this_type	access:public
unspecified_bool_type	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   typedef bool this_type::*unspecified_bool_type;$/;"	t	class:boost::interprocess::scoped_lock::this_type	access:private
unspecified_bool_type	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   typedef bool this_type::*unspecified_bool_type;$/;"	t	class:boost::interprocess::sharable_lock::this_type	access:private
unspecified_bool_type	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   typedef bool this_type::*unspecified_bool_type;$/;"	t	class:boost::interprocess::upgradable_lock::this_type	access:private
unspecified_bool_type_func	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   void unspecified_bool_type_func() const {}$/;"	f	class:boost::interprocess::intersegment_ptr	access:private	signature:() const
unspecified_bool_type_func	/usr/include/boost/interprocess/offset_ptr.hpp	/^   void unspecified_bool_type_func() const {}$/;"	f	class:boost::interprocess::offset_ptr	access:private	signature:() const
unspecified_bool_type_func	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   void unspecified_bool_type_func() const {}$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
up	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   VoidPtr up;$/;"	m	struct:boost::container::stable_vector_detail::node_type_base	access:public
update_segments	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      virtual bool update_segments ()$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:()
update_segments	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^   virtual bool                           update_segments   () = 0;$/;"	p	class:boost::interprocess::multi_segment_services	access:public	signature:()
upgr	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   explicit scoped_lock(BOOST_INTERPROCESS_RV_REF(upgradable_lock<T>) upgr$/;"	m	class:boost::interprocess::scoped_lock	access:public
upgr	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_INTERPROCESS_RV_REF(upgradable_lock<T>) upgr, boost::posix_time::ptime &abs_time$/;"	m	class:boost::interprocess::scoped_lock	access:public
upgr	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   scoped_lock(BOOST_INTERPROCESS_RV_REF(upgradable_lock<T>) upgr, try_to_lock_type$/;"	m	class:boost::interprocess::scoped_lock	access:public
upgr	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   sharable_lock(BOOST_INTERPROCESS_RV_REF(upgradable_lock<T>) upgr$/;"	m	class:boost::interprocess::sharable_lock	access:public
upgradable_in	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      unsigned upgradable_in        : 1;$/;"	m	struct:boost::interprocess::interprocess_upgradable_mutex::control_word_t	access:public
upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   explicit upgradable_lock(mutex_type& m)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(mutex_type& m)
upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   explicit upgradable_lock(scoped_lock<mutex_type>&);$/;"	p	class:boost::interprocess::upgradable_lock	access:private	signature:(scoped_lock<mutex_type>&)
upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock(mutex_type& m, accept_ownership_type)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(mutex_type& m, accept_ownership_type)
upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock(mutex_type& m, const boost::posix_time::ptime& abs_time)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(mutex_type& m, const boost::posix_time::ptime& abs_time)
upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock(mutex_type& m, defer_lock_type)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(mutex_type& m, defer_lock_type)
upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   upgradable_lock(mutex_type& m, try_to_lock_type)$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:(mutex_type& m, try_to_lock_type)
upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^class upgradable_lock$/;"	c	namespace:boost::interprocess
upgradable_to_exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      upgradable_to_exclusive_rollback(control_word_t         &ctrl)$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback	access:public	signature:(control_word_t &ctrl)
upgradable_to_exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   struct upgradable_to_exclusive_rollback$/;"	s	class:boost::interprocess::interprocess_upgradable_mutex	access:private
upper_bound	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   const_iterator upper_bound(const key_type& k) const$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const key_type& k) const
upper_bound	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   iterator upper_bound(const key_type& k)$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:(const key_type& k)
upper_bound	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   const_iterator upper_bound(const key_type& k) const$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& k) const
upper_bound	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   iterator upper_bound(const key_type& k)$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:(const key_type& k)
upper_bound	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator upper_bound(const key_type& x) const $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& x) const
upper_bound	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   const_iterator upper_bound(const key_type& x) const $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const key_type& x) const
upper_bound	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator upper_bound(const key_type& x) $/;"	f	class:boost::container::flat_map	access:public	signature:(const key_type& x)
upper_bound	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   iterator upper_bound(const key_type& x) $/;"	f	class:boost::container::flat_multimap	access:public	signature:(const key_type& x)
upper_bound	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator upper_bound(const key_type& x) const $/;"	f	class:boost::container::flat_multiset	access:public	signature:(const key_type& x) const
upper_bound	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   const_iterator upper_bound(const key_type& x) const $/;"	f	class:boost::container::flat_set	access:public	signature:(const key_type& x) const
upper_bound	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator upper_bound(const key_type& x)$/;"	f	class:boost::container::flat_multiset	access:public	signature:(const key_type& x)
upper_bound	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   iterator upper_bound(const key_type& x)$/;"	f	class:boost::container::flat_set	access:public	signature:(const key_type& x)
upper_bound	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_iterator upper_bound(const key_type& x) const $/;"	f	class:boost::container::map	access:public	signature:(const key_type& x) const
upper_bound	/usr/include/boost/interprocess/containers/container/map.hpp	/^   const_iterator upper_bound(const key_type& x) const $/;"	f	class:boost::container::multimap	access:public	signature:(const key_type& x) const
upper_bound	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator upper_bound(const key_type& x) $/;"	f	class:boost::container::map	access:public	signature:(const key_type& x)
upper_bound	/usr/include/boost/interprocess/containers/container/map.hpp	/^   iterator upper_bound(const key_type& x) $/;"	f	class:boost::container::multimap	access:public	signature:(const key_type& x)
upper_bound	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator upper_bound(const key_type& x) const $/;"	f	class:boost::container::multiset	access:public	signature:(const key_type& x) const
upper_bound	/usr/include/boost/interprocess/containers/container/set.hpp	/^   const_iterator upper_bound(const key_type& x) const $/;"	f	class:boost::container::set	access:public	signature:(const key_type& x) const
upper_bound	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator upper_bound(const key_type& x)$/;"	f	class:boost::container::multiset	access:public	signature:(const key_type& x)
upper_bound	/usr/include/boost/interprocess/containers/container/set.hpp	/^   iterator upper_bound(const key_type& x)$/;"	f	class:boost::container::set	access:public	signature:(const key_type& x)
upper_power_of_2	/usr/include/boost/interprocess/containers/container/detail/math_functions.hpp	/^inline Integer upper_power_of_2(const Integer & A)$/;"	f	namespace:boost::container::containers_detail	signature:(const Integer & A)
upper_power_of_2	/usr/include/boost/interprocess/detail/math_functions.hpp	/^inline Integer upper_power_of_2(const Integer & A)$/;"	f	namespace:boost::interprocess::detail	signature:(const Integer & A)
UsableByPreviousChunk	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   static const std::size_t UsableByPreviousChunk  = MemoryAlgorithm::UsableByPreviousChunk;$/;"	m	class:boost::interprocess::detail::memory_algorithm_common	access:public
UsableByPreviousChunk	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   static const std::size_t UsableByPreviousChunk = 0;$/;"	m	class:boost::interprocess::detail::simple_seq_fit_impl	access:private
UsableByPreviousChunk	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   static const std::size_t UsableByPreviousChunk   = sizeof(std::size_t);$/;"	m	class:boost::interprocess::rbtree_best_fit	access:private
used_	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   bool used_;$/;"	m	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:private
use_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   long use_count() const \/\/ nothrow$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:() const
use_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   long use_count() const \/\/ nothrow$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:() const
use_count	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^   long use_count() const \/\/ nothrow$/;"	f	class:boost::interprocess::detail::sp_counted_base	access:public	signature:() const
use_count	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   long use_count() const \/\/ never throws$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:() const
use_count	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   long use_count() const \/\/ never throws$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:() const
use_count_	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    boost::uint32_t use_count_;        \/\/ #shared$/;"	m	class:boost::interprocess::detail::sp_counted_base	access:private
ValAlloc	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef A                                          ValAlloc;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
ValAlloc	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename AllocHolder::ValAlloc             ValAlloc;$/;"	t	class:boost::container::containers_detail::rbtree	access:private
ValAlloc	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename AllocHolder::ValAlloc             ValAlloc;$/;"	t	class:boost::container::list	access:private
ValAlloc	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename AllocHolder::ValAlloc             ValAlloc;$/;"	t	class:boost::container::slist	access:private
value	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   enum { value = true };$/;"	e	enum:boost::has_trivial_destructor::__anon1
value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   static const std::size_t value = sizeof(T);$/;"	m	struct:boost::interprocess::sizeof_value	access:public
value	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   static const std::size_t value = sizeof(void*);$/;"	m	struct:boost::interprocess::sizeof_value	access:public
value	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^   static const bool value = boost::has_trivial_assign<T>::value;$/;"	m	struct:boost::container::optimize_assign	access:public
value	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^   static const bool value = boost::has_trivial_copy<T>::value;$/;"	m	struct:boost::container::optimize_copy	access:public
value	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^   static const bool value = false;$/;"	m	struct:boost::container::has_own_construct_from_it	access:public
value	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^   static const bool value = false;$/;"	m	struct:boost::container::optimize_assign	access:public
value	/usr/include/boost/interprocess/containers/container/detail/algorithms.hpp	/^   static const bool value = false;$/;"	m	struct:boost::container::optimize_copy	access:public
value	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   enum { value = sizeof(dispatch(trigger())) == sizeof(true_t) };$/;"	e	enum:boost::container::containers_detail::is_convertible::__anon4
value	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   static const bool value = C_;$/;"	m	struct:boost::container::containers_detail::bool_	access:public
value	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   static const std::size_t value = (S & std::size_t(1)) ? 0 : (1u + ls_zeros<(S >> 1u)>::value);$/;"	m	struct:boost::container::containers_detail::ls_zeros	access:public
value	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   static const std::size_t value = 0;$/;"	m	struct:boost::container::containers_detail::ls_zeros	access:public
value	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^   static const T value = val;$/;"	m	struct:boost::container::containers_detail::integral_constant	access:public
value	/usr/include/boost/interprocess/containers/container/detail/pool_common.hpp	/^   static const bool value = false;$/;"	m	struct:boost::container::containers_detail::is_stateless_segment_manager	access:public
value	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   static const bool value = true;$/;"	m	struct:boost::container::has_own_construct_from_it	access:public
value	/usr/include/boost/interprocess/containers/container/detail/type_traits.hpp	/^    enum{   value = A < S ? A : S  };$/;"	e	enum:boost::container::containers_detail::alignment_logic::__anon5
value	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^   enum { value = ((OrigSize-1)\/RoundTo+1)*RoundTo };$/;"	e	enum:boost::container::containers_detail::ct_rounded_size::__anon6
value	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^   static const bool value = sizeof(test<T>(0)) == 1;$/;"	m	struct:boost::container::containers_detail::impl::has_version	access:public
value	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^   static const unsigned value = 1;$/;"	m	struct:boost::container::containers_detail::impl::extract_version	access:public
value	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^   static const unsigned value = 1;$/;"	m	struct:boost::container::containers_detail::impl::version	access:public
value	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^   static const unsigned value = extract_version<T>::value;$/;"	m	struct:boost::container::containers_detail::impl::version	access:public
value	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^   static const unsigned value = T::version::value;$/;"	m	struct:boost::container::containers_detail::impl::extract_version	access:public
value	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   static value_type& value(void_ptr p)$/;"	f	class:boost::container::stable_vector	access:private	signature:(void_ptr p)
value	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   T value;$/;"	m	struct:boost::container::stable_vector_detail::node_type	access:public
value	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   static const bool value = true;$/;"	m	struct:boost::interprocess::is_multisegment_ptr	access:public
value	/usr/include/boost/interprocess/detail/move.hpp	/^   enum { value = sizeof(dispatch(trigger())) == sizeof(true_t) };$/;"	e	enum:boost::interprocess::move_detail::is_convertible::__anon8
value	/usr/include/boost/interprocess/detail/move.hpp	/^   static const bool value = false;$/;"	m	struct:boost::interprocess::move_detail::is_rv	access:public
value	/usr/include/boost/interprocess/detail/move.hpp	/^   static const bool value = true;$/;"	m	struct:boost::interprocess::move_detail::is_rv	access:public
value	/usr/include/boost/interprocess/detail/mpl.hpp	/^   enum { value = sizeof(dispatch(trigger())) == sizeof(true_t) };$/;"	e	enum:boost::interprocess::detail::is_convertible::__anon9
value	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static const bool value = C_;$/;"	m	struct:boost::interprocess::detail::bool_	access:public
value	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static const std::size_t value = (S & std::size_t(1)) ? 0 : (1u + ls_zeros<(S >> 1u)>::value);$/;"	m	struct:boost::interprocess::detail::ls_zeros	access:public
value	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static const std::size_t value = 0;$/;"	m	struct:boost::interprocess::detail::ls_zeros	access:public
value	/usr/include/boost/interprocess/detail/mpl.hpp	/^   static const T value = val;$/;"	m	struct:boost::interprocess::detail::integral_constant	access:public
value	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^    static const bool value = sizeof(pointer_type_imp::test<T>(0)) == 1;$/;"	m	struct:boost::interprocess::detail::has_pointer_type	access:public
value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   const void *value() const$/;"	f	class:boost::interprocess::detail::segment_manager_iterator_value_adaptor	access:public	signature:() const
value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void *value() const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:() const
value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void *value() const$/;"	f	struct:boost::interprocess::detail::index_data	access:public	signature:() const
value	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   void *value() const$/;"	f	struct:boost::interprocess::detail::intrusive_value_type_impl	access:public	signature:() const
value	/usr/include/boost/interprocess/detail/type_traits.hpp	/^    enum{   value = A < S ? A : S  };$/;"	e	enum:boost::interprocess::detail::alignment_logic::__anon13
value	/usr/include/boost/interprocess/detail/utilities.hpp	/^   enum { value = ((OrigSize-1)\/RoundTo+1)*RoundTo };$/;"	e	enum:boost::interprocess::detail::ct_rounded_size::__anon14
value	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   enum{ value = true };$/;"	e	enum:boost::interprocess::is_intrusive_index::__anon21
value	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   enum{ value = true };$/;"	e	enum:boost::interprocess::is_intrusive_index::__anon23
value	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   enum {   value = true };$/;"	e	enum:boost::interprocess::is_node_index::__anon24
value	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   enum {   value = true };$/;"	e	enum:boost::interprocess::is_node_index::__anon25
value	/usr/include/boost/interprocess/offset_ptr.hpp	/^   enum { value = true };$/;"	e	enum:boost::has_trivial_constructor::__anon31
value	/usr/include/boost/interprocess/offset_ptr.hpp	/^   enum { value = true };$/;"	e	enum:boost::has_trivial_destructor::__anon32
value	/usr/include/boost/interprocess/offset_ptr.hpp	/^   static const std::size_t value = ::boost::interprocess::detail::ls_zeros<Alignment>::value - 1;$/;"	m	struct:boost::intrusive::max_pointer_plus_bits	access:public
ValueCompareToNodeCompare	/usr/include/boost/interprocess/containers/container/list.hpp	/^      ValueCompareToNodeCompare(Pred pred)$/;"	f	struct:boost::container::list::ValueCompareToNodeCompare	access:public	signature:(Pred pred)
ValueCompareToNodeCompare	/usr/include/boost/interprocess/containers/container/list.hpp	/^   struct ValueCompareToNodeCompare$/;"	s	class:boost::container::list	inherits:Pred	access:private
ValueCompareToNodeCompare	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      ValueCompareToNodeCompare(Pred pred)$/;"	f	struct:boost::container::slist::ValueCompareToNodeCompare	access:public	signature:(Pred pred)
ValueCompareToNodeCompare	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   struct ValueCompareToNodeCompare$/;"	s	class:boost::container::slist	inherits:Pred	access:private
value_bytes	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t value_bytes() const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:() const
value_comp	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   ValueCompare &value_comp() const$/;"	f	struct:boost::container::containers_detail::node_compare	access:public	signature:() const
value_comp	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   ValueCompare &value_comp()$/;"	f	struct:boost::container::containers_detail::node_compare	access:public	signature:()
value_comp	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   value_compare value_comp() const $/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:() const
value_comp	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   value_compare value_comp() const $/;"	f	class:boost::container::flat_map	access:public	signature:() const
value_comp	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   value_compare value_comp() const $/;"	f	class:boost::container::flat_multimap	access:public	signature:() const
value_comp	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   value_compare value_comp() const $/;"	f	class:boost::container::flat_multiset	access:public	signature:() const
value_comp	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   value_compare value_comp() const $/;"	f	class:boost::container::flat_set	access:public	signature:() const
value_comp	/usr/include/boost/interprocess/containers/container/map.hpp	/^   value_compare value_comp() const $/;"	f	class:boost::container::map	access:public	signature:() const
value_comp	/usr/include/boost/interprocess/containers/container/map.hpp	/^   value_compare value_comp() const $/;"	f	class:boost::container::multimap	access:public	signature:() const
value_comp	/usr/include/boost/interprocess/containers/container/set.hpp	/^   value_compare value_comp() const $/;"	f	class:boost::container::multiset	access:public	signature:() const
value_comp	/usr/include/boost/interprocess/containers/container/set.hpp	/^   value_compare value_comp() const $/;"	f	class:boost::container::set	access:public	signature:() const
value_compare	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^      value_compare(const Compare &pred) $/;"	f	class:boost::container::containers_detail::flat_tree::value_compare	access:public	signature:(const Compare &pred)
value_compare	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   class value_compare$/;"	c	class:boost::container::containers_detail::flat_tree	inherits:Compare	access:public
value_compare	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^                        , KeyCompare, KeyOfValue>     value_compare;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
value_compare	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::value_compare          value_compare;$/;"	t	class:boost::container::flat_map	access:public
value_compare	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::value_compare          value_compare;$/;"	t	class:boost::container::flat_multimap	access:public
value_compare	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::value_compare          value_compare;$/;"	t	class:boost::container::flat_multiset	access:public
value_compare	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::value_compare          value_compare;$/;"	t	class:boost::container::flat_set	access:public
value_compare	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef value_compare_impl                      value_compare;$/;"	t	class:boost::container::multimap	access:public
value_compare	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef value_compare_impl             value_compare;$/;"	t	class:boost::container::map	access:public
value_compare	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef Pred                                    value_compare;$/;"	t	class:boost::container::multiset	access:public
value_compare	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef Pred                                    value_compare;$/;"	t	class:boost::container::set	access:public
value_compare	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef std::less<value_type>                               value_compare;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
value_compare_impl	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   value_compare_impl(key_compare kcomp)$/;"	f	struct:boost::container::containers_detail::value_compare_impl	access:public	signature:(key_compare kcomp)
value_compare_impl	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^struct value_compare_impl$/;"	s	namespace:boost::container::containers_detail	inherits:KeyCompare
value_compare_impl	/usr/include/boost/interprocess/containers/container/map.hpp	/^      value_compare_impl(const Pred &c) : Pred(c) {}$/;"	f	class:boost::container::map::value_compare_impl	access:protected	signature:(const Pred &c)
value_compare_impl	/usr/include/boost/interprocess/containers/container/map.hpp	/^      value_compare_impl(const Pred &c) : Pred(c) {}$/;"	f	class:boost::container::multimap::value_compare_impl	access:protected	signature:(const Pred &c)
value_compare_impl	/usr/include/boost/interprocess/containers/container/map.hpp	/^   class value_compare_impl$/;"	c	class:boost::container::map	inherits:Pred,std::binary_function	access:public
value_compare_impl	/usr/include/boost/interprocess/containers/container/map.hpp	/^   class value_compare_impl$/;"	c	class:boost::container::multimap	inherits:Pred,std::binary_function	access:public
value_equal	/usr/include/boost/interprocess/containers/container/list.hpp	/^   struct value_equal$/;"	s	class:boost::container::list	access:private
value_equal	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   struct value_equal$/;"	s	class:boost::container::slist	access:private
value_equal	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef std::equal_to<value_type>                  value_equal;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
value_equal_to_this	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      explicit value_equal_to_this(const value_type &ref)$/;"	f	struct:boost::container::slist::value_equal_to_this	access:public	signature:(const value_type &ref)
value_equal_to_this	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   struct value_equal_to_this$/;"	s	class:boost::container::slist	access:private
value_init	/usr/include/boost/interprocess/containers/container/detail/value_init.hpp	/^   value_init()$/;"	f	struct:boost::container::containers_detail::value_init	access:public	signature:()
value_init	/usr/include/boost/interprocess/containers/container/detail/value_init.hpp	/^struct value_init$/;"	s	namespace:boost::container::containers_detail
value_less	/usr/include/boost/interprocess/containers/container/list.hpp	/^   struct value_less$/;"	s	class:boost::container::list	access:private
value_less	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   struct value_less$/;"	s	class:boost::container::slist	access:private
value_offset	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   std::size_t value_offset() const$/;"	f	struct:boost::interprocess::detail::block_header	access:public	signature:() const
value_traits	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef containers_detail::vector_value_traits<value_type, A> value_traits;$/;"	t	class:boost::container::vector	access:private
value_traits	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef vector_value_traits<value_type, A> value_traits;$/;"	t	struct:boost::container::containers_detail::vector_alloc_holder	access:public
value_type	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
value_type	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef T                                    value_type;$/;"	t	class:boost::interprocess::allocator	access:public
value_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::detail::array_allocation_impl	access:public
value_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::detail::node_pool_allocation_impl	access:public
value_type	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename base_t::value_type                   value_type;$/;"	t	class:boost::interprocess::detail::cached_allocator_impl	access:public
value_type	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
value_type	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
value_type	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef T                                             value_type;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
value_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef val_alloc_val                     value_type;$/;"	t	class:boost::container::deque_base::const_iterator	access:public
value_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^      typedef val_alloc_val                     value_type;$/;"	t	class:boost::container::deque_base::iterator	access:public
value_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef T                                    value_type;$/;"	t	class:boost::container::deque	access:public
value_type	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef T value_type;$/;"	t	struct:boost::container::deque_value_traits	access:public
value_type	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef typename A::value_type value_type;$/;"	t	class:boost::container::containers_detail::allocator_destroyer	access:private
value_type	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   typedef typename Allocator::value_type value_type;$/;"	t	struct:boost::container::containers_detail::scoped_destructor_n	access:public
value_type	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef typename vector_t::value_type              value_type;$/;"	t	class:boost::container::containers_detail::flat_tree	access:public
value_type	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename A::value_type                     value_type;$/;"	t	struct:boost::container::containers_detail::node_alloc_holder	access:public
value_type	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename A::value_type value_type;$/;"	t	class:boost::container::containers_detail::allocator_destroyer_and_chain_builder	access:private
value_type	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename A::value_type value_type;$/;"	t	class:boost::container::containers_detail::allocator_multialloc_chain_node_deallocator	access:private
value_type	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   typedef typename ValueCompare::value_type   value_type;$/;"	t	struct:boost::container::containers_detail::node_compare	access:public
value_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef T value_type;$/;"	t	struct:boost::container::containers_detail::rbtree_node	access:public
value_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef typename A::value_type                  value_type;$/;"	t	struct:boost::container::containers_detail::intrusive_rbtree_type	access:public
value_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef Value                                      value_type;$/;"	t	class:boost::container::containers_detail::rbtree	access:public
value_type	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   typedef Value        value_type;$/;"	t	struct:boost::container::containers_detail::value_compare_impl	access:public
value_type	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^   typedef T value_type;$/;"	t	struct:boost::container::containers_detail::smart_ptr_type	access:public
value_type	/usr/include/boost/interprocess/containers/container/detail/utilities.hpp	/^   typedef typename SmartPtr::value_type value_type;$/;"	t	struct:boost::container::containers_detail::smart_ptr_type	access:public
value_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::value_type             value_type;$/;"	t	class:boost::container::flat_map	access:public
value_type	/usr/include/boost/interprocess/containers/container/flat_map.hpp	/^   typedef typename tree_t::value_type             value_type;$/;"	t	class:boost::container::flat_multimap	access:public
value_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::value_type             value_type;$/;"	t	class:boost::container::flat_multiset	access:public
value_type	/usr/include/boost/interprocess/containers/container/flat_set.hpp	/^   typedef typename tree_t::value_type             value_type;$/;"	t	class:boost::container::flat_set	access:public
value_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^      typedef typename AllocHolder::value_type value_type;$/;"	t	class:boost::container::list::equal_to_value	access:private
value_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef T                                       value_type;$/;"	t	class:boost::container::list	access:public
value_type	/usr/include/boost/interprocess/containers/container/list.hpp	/^   typedef typename A::value_type               value_type;$/;"	t	struct:boost::container::containers_detail::intrusive_list_type	access:public
value_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::value_type             value_type;$/;"	t	class:boost::container::map	access:public
value_type	/usr/include/boost/interprocess/containers/container/map.hpp	/^   typedef typename tree_t::value_type             value_type;$/;"	t	class:boost::container::multimap	access:public
value_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::value_type             value_type;$/;"	t	class:boost::container::multiset	access:public
value_type	/usr/include/boost/interprocess/containers/container/set.hpp	/^   typedef typename tree_t::value_type             value_type;$/;"	t	class:boost::container::set	access:public
value_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      typedef typename AllocHolder::value_type value_type;$/;"	t	class:boost::container::slist::equal_to_value	access:private
value_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef T                                       value_type;$/;"	t	class:boost::container::slist	access:public
value_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef typename A::value_type               value_type;$/;"	t	struct:boost::container::containers_detail::intrusive_slist_type	access:public
value_type	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   typedef void                value_type;$/;"	t	class:std::insert_iterator	access:public
value_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef T                                          value_type;$/;"	t	class:boost::container::stable_vector	access:public
value_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef T                                 value_type;$/;"	t	class:boost::container::stable_vector_detail::iterator	access:public
value_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef T value_type;$/;"	t	struct:boost::container::stable_vector_detail::smart_ptr_type	access:public
value_type	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   typedef typename SmartPtr::value_type value_type;$/;"	t	struct:boost::container::stable_vector_detail::smart_ptr_type	access:public
value_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef CharT                                   value_type;$/;"	t	class:boost::container::basic_string	access:public
value_type	/usr/include/boost/interprocess/containers/container/string.hpp	/^   typedef typename A::value_type  value_type;$/;"	t	class:boost::container::containers_detail::basic_string_base	access:public
value_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef T                                       value_type;$/;"	t	class:boost::container::vector	access:public
value_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef T value_type;$/;"	t	struct:boost::container::containers_detail::vector_value_traits	access:public
value_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename A::value_type   value_type;$/;"	t	struct:boost::container::containers_detail::vector_alloc_holder	access:public
value_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename std::iterator_traits<Pointer>::value_type        value_type;$/;"	t	class:boost::container::containers_detail::vector_iterator	access:public
value_type	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   typedef typename std::iterator_traits<Pointer>::value_type  value_type;$/;"	t	class:boost::container::containers_detail::vector_const_iterator	access:public
value_type	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   typedef T                                       value_type;$/;"	t	class:boost::interprocess::intersegment_ptr	access:public
value_type	/usr/include/boost/interprocess/detail/move.hpp	/^   typedef typename std::iterator_traits<iterator_type>::value_type        value_type;$/;"	t	class:boost::interprocess::move_iterator	access:public
value_type	/usr/include/boost/interprocess/detail/utilities.hpp	/^   typedef T value_type;$/;"	t	struct:boost::interprocess::detail::smart_ptr_type	access:public
value_type	/usr/include/boost/interprocess/detail/utilities.hpp	/^   typedef typename SmartPtr::value_type value_type;$/;"	t	struct:boost::interprocess::detail::smart_ptr_type	access:public
value_type	/usr/include/boost/interprocess/indexes/flat_map_index.hpp	/^   typedef std::pair<key_type, mapped_type>        value_type;$/;"	t	struct:boost::interprocess::flat_map_index_aux	access:public
value_type	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      intrusive_value_type<derivation_hook>::type              value_type;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
value_type	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^   typedef typename index_type::value_type               value_type;$/;"	t	class:boost::interprocess::iset_index	access:public
value_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      intrusive_value_type<derivation_hook>::type     value_type;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
value_type	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   typedef typename index_type::value_type               value_type;$/;"	t	class:boost::interprocess::iunordered_set_index	access:public
value_type	/usr/include/boost/interprocess/indexes/map_index.hpp	/^   typedef std::pair<const key_type, mapped_type>  value_type;$/;"	t	struct:boost::interprocess::detail::map_index_aux	access:public
value_type	/usr/include/boost/interprocess/indexes/unordered_map_index.hpp	/^   typedef std::pair<const key_type, mapped_type>  value_type;$/;"	t	struct:boost::interprocess::unordered_map_index_aux	access:public
value_type	/usr/include/boost/interprocess/offset_ptr.hpp	/^   typedef PointedType                       value_type;$/;"	t	class:boost::interprocess::offset_ptr	access:public
value_type	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef T                                                   value_type;$/;"	t	class:boost::interprocess::shared_ptr	access:public
value_type	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   typedef T value_type;$/;"	t	class:boost::interprocess::weak_ptr	access:public
val_alloc_cptr	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::const_pointer           val_alloc_cptr;$/;"	t	class:boost::container::deque_base	access:public
val_alloc_cptr	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::const_pointer        val_alloc_cptr;$/;"	t	class:boost::container::deque	access:public
val_alloc_cref	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::const_reference         val_alloc_cref;$/;"	t	class:boost::container::deque_base	access:public
val_alloc_cref	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::const_reference      val_alloc_cref;$/;"	t	class:boost::container::deque	access:public
val_alloc_diff	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::value_type              val_alloc_diff;$/;"	t	class:boost::container::deque_base	access:public
val_alloc_ptr	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::pointer                 val_alloc_ptr;$/;"	t	class:boost::container::deque_base	access:public
val_alloc_ptr	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::pointer              val_alloc_ptr;$/;"	t	class:boost::container::deque	access:public
val_alloc_ref	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::reference               val_alloc_ref;$/;"	t	class:boost::container::deque_base	access:public
val_alloc_ref	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::reference            val_alloc_ref;$/;"	t	class:boost::container::deque	access:public
val_alloc_val	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::value_type              val_alloc_val;$/;"	t	class:boost::container::deque_base	access:public
val_alloc_val	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   typedef typename Alloc::value_type           val_alloc_val;$/;"	t	class:boost::container::deque	access:public
vector	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   explicit vector(const A& a = A())$/;"	f	class:boost::container::vector	access:public	signature:(const A& a = A())
vector	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   explicit vector(size_type n) $/;"	f	class:boost::container::vector	access:public	signature:(size_type n)
vector	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector(const vector<T, A>& x) $/;"	f	class:boost::container::vector	access:public	signature:(const vector<T, A>& x)
vector	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector(InIt first, InIt last, const allocator_type& a = allocator_type())$/;"	f	class:boost::container::vector	access:public	signature:(InIt first, InIt last, const allocator_type& a = allocator_type())
vector	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector(size_type n, const T& value, const allocator_type& a = allocator_type()) $/;"	f	class:boost::container::vector	access:public	signature:(size_type n, const T& value, const allocator_type& a = allocator_type())
vector	/usr/include/boost/interprocess/containers/container/vector.hpp	/^class vector : private containers_detail::vector_alloc_holder<A>$/;"	c	namespace:boost::container	inherits:containers_detail::vector_alloc_holder
vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   const vector_type &vector() const $/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:() const
vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   const vector_type &vector() const $/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:() const
vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   const vector_type &vector() const $/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:() const
vector	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   const vector_type &vector() const $/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:() const
vector_alloc_holder	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_alloc_holder(const A &a)$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:public	signature:(const A &a)
vector_alloc_holder	/usr/include/boost/interprocess/containers/container/vector.hpp	/^struct vector_alloc_holder $/;"	s	namespace:boost::container::containers_detail
vector_const_iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   explicit vector_const_iterator(Pointer ptr)  : m_ptr(ptr){}$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:(Pointer ptr)
vector_const_iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_const_iterator() : m_ptr(0){}$/;"	f	class:boost::container::containers_detail::vector_const_iterator	access:public	signature:()
vector_const_iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^class vector_const_iterator$/;"	c	namespace:boost::container::containers_detail	inherits:std::iterator
vector_iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   explicit vector_iterator(Pointer ptr)$/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:(Pointer ptr)
vector_iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   vector_iterator()$/;"	f	class:boost::container::containers_detail::vector_iterator	access:public	signature:()
vector_iterator	/usr/include/boost/interprocess/containers/container/vector.hpp	/^class vector_iterator$/;"	c	namespace:boost::container::containers_detail	inherits:vector_const_iterator
vector_t	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   typedef boost::container::vector<Value, Alloc>  vector_t;$/;"	t	class:boost::container::containers_detail::flat_tree	access:private
vector_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef CharVector                                                   vector_type;$/;"	t	class:boost::interprocess::basic_ivectorstream	access:public
vector_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef CharVector                                                   vector_type;$/;"	t	class:boost::interprocess::basic_ovectorstream	access:public
vector_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef CharVector                                                   vector_type;$/;"	t	class:boost::interprocess::basic_vectorstream	access:public
vector_type	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   typedef CharVector                        vector_type;$/;"	t	class:boost::interprocess::basic_vectorbuf	access:public
vector_value_traits	/usr/include/boost/interprocess/containers/container/vector.hpp	/^struct vector_value_traits$/;"	s	namespace:boost::container::containers_detail
version	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef boost::interprocess::version_type<adaptive_pool, 2>   version;$/;"	t	class:boost::interprocess::adaptive_pool	access:public
version	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef boost::interprocess::version_type<adaptive_pool_base, Version>   version;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
version	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef boost::interprocess::version_type<allocator, 2>   version;$/;"	t	class:boost::interprocess::allocator	access:public
version	/usr/include/boost/interprocess/allocators/cached_adaptive_pool.hpp	/^   typedef boost::interprocess::version_type<cached_adaptive_pool, 2>   version;$/;"	t	class:boost::interprocess::cached_adaptive_pool	access:public
version	/usr/include/boost/interprocess/allocators/cached_node_allocator.hpp	/^   typedef boost::interprocess::version_type<cached_node_allocator, 2>   version;$/;"	t	class:boost::interprocess::cached_node_allocator	access:public
version	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef boost::interprocess::version_type<node_allocator, 2>   version;$/;"	t	class:boost::interprocess::node_allocator	access:public
version	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef boost::interprocess::version_type<node_allocator_base, Version>   version;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
version	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^      <private_adaptive_pool_base, Version>              version;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
version	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef boost::interprocess::version_type<private_adaptive_pool, 2>   version;$/;"	t	class:boost::interprocess::private_adaptive_pool	access:public
version	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^      <private_node_allocator_base, Version>              version;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
version	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef boost::interprocess::version_type<private_node_allocator, 2>   version;$/;"	t	class:boost::interprocess::private_node_allocator	access:public
version	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^struct version$/;"	s	namespace:boost::container::containers_detail	inherits:containers_detail::integral_constant
version	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^struct version$/;"	s	namespace:boost::container::containers_detail::impl
version	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^struct version<T, true>$/;"	s	namespace:boost::container::containers_detail::impl
version_type	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^    version_type(const version_type<T, 0>&);$/;"	p	struct:boost::container::containers_detail::version_type	access:public	signature:(const version_type<T, 0>&)
version_type	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^struct version_type$/;"	s	namespace:boost::container::containers_detail	inherits:containers_detail::integral_constant
void_allocator	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   typedef typename ManagedMemory::template allocator<void>::type void_allocator;$/;"	t	struct:boost::interprocess::managed_shared_ptr	access:public
void_pointer	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::detail::adaptive_pool_base	access:public
void_pointer	/usr/include/boost/interprocess/allocators/allocator.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::allocator	access:public
void_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^      void_pointer                                          void_pointer;$/;"	t	class:boost::interprocess::detail::cache_impl	access:private
void_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::detail::array_allocation_impl	access:private
void_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::detail::node_pool_allocation_impl	access:private
void_pointer	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   typedef typename segment_manager::void_pointer        void_pointer;$/;"	t	class:boost::interprocess::detail::cached_allocator_impl	access:public
void_pointer	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::detail::node_allocator_base	access:public
void_pointer	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::detail::private_adaptive_pool_base	access:public
void_pointer	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   typedef typename SegmentManager::void_pointer         void_pointer;$/;"	t	class:boost::interprocess::detail::private_node_allocator_base	access:public
void_pointer	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef typename SegmentManagerBase::void_pointer void_pointer;$/;"	t	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:private
void_pointer	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   typedef VoidPointer void_pointer;$/;"	t	struct:boost::container::containers_detail::adaptive_pool_types	access:public
void_pointer	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   typedef typename MultiallocationChain::void_pointer   void_pointer;$/;"	t	class:boost::container::containers_detail::transform_multiallocation_chain	access:private
void_pointer	/usr/include/boost/interprocess/containers/container/detail/multiallocation_chain.hpp	/^   typedef VoidPointer  void_pointer;$/;"	t	class:boost::container::containers_detail::basic_multiallocation_chain	access:public
void_pointer	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   typedef typename SegmentManagerBase::void_pointer              void_pointer;$/;"	t	class:boost::container::containers_detail::private_node_pool_impl	access:public
void_pointer	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^      <typename A::pointer, void>::type            void_pointer;$/;"	t	struct:boost::container::containers_detail::intrusive_rbtree_type	access:public
void_pointer	/usr/include/boost/interprocess/containers/container/list.hpp	/^      <typename A::pointer, void>::type         void_pointer;$/;"	t	struct:boost::container::containers_detail::intrusive_list_type	access:public
void_pointer	/usr/include/boost/interprocess/containers/container/slist.hpp	/^      <typename A::pointer, void>::type         void_pointer;$/;"	t	struct:boost::container::containers_detail::intrusive_slist_type	access:public
void_pointer	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^         basic_managed_multi_shared_memory::void_pointer    void_pointer;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public
void_pointer	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^         basic_managed_multi_shared_memory::void_pointer   void_pointer;$/;"	t	struct:boost::interprocess::basic_managed_multi_shared_memory::close_func	access:public
void_pointer	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^         basic_managed_multi_shared_memory::void_pointer   void_pointer;$/;"	t	struct:boost::interprocess::basic_managed_multi_shared_memory::create_open_func	access:public
void_pointer	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   typedef typename MemoryAlgorithm::void_pointer        void_pointer;$/;"	t	class:boost::interprocess::basic_managed_multi_shared_memory	access:private
void_pointer	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef typename MemoryAlgorithm::void_pointer        void_pointer;$/;"	t	struct:boost::interprocess::detail::index_config	access:public
void_pointer	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   typedef VoidPointer void_pointer;$/;"	t	struct:boost::interprocess::detail::index_data	access:public
void_pointer	/usr/include/boost/interprocess/indexes/iset_index.hpp	/^      segment_manager_base::void_pointer                       void_pointer;$/;"	t	struct:boost::interprocess::iset_index_aux	access:public
void_pointer	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^      segment_manager_base::void_pointer              void_pointer;$/;"	t	struct:boost::interprocess::iunordered_set_index_aux	access:public
void_pointer	/usr/include/boost/interprocess/mem_algo/detail/mem_algo_common.hpp	/^   typedef typename MemoryAlgorithm::void_pointer              void_pointer;$/;"	t	class:boost::interprocess::detail::memory_algorithm_common	access:public
void_pointer	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   typedef VoidPointer        void_pointer;$/;"	t	class:boost::interprocess::detail::simple_seq_fit_impl	access:public
void_pointer	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   typedef VoidPointer        void_pointer;$/;"	t	class:boost::interprocess::detail::simple_seq_fit_impl	access:public
void_pointer	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   typedef VoidPointer        void_pointer;$/;"	t	class:boost::interprocess::rbtree_best_fit	access:public
void_pointer	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename Base::void_pointer    void_pointer;$/;"	t	class:boost::interprocess::segment_manager	access:public
void_pointer	/usr/include/boost/interprocess/segment_manager.hpp	/^   typedef typename MemoryAlgorithm::void_pointer  void_pointer;$/;"	t	class:boost::interprocess::segment_manager_base	access:public
void_ptr	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      <Pointer, void>::type                  void_ptr;$/;"	t	class:boost::container::stable_vector_detail::iterator	access:private
void_ptr	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      rebind<void>::other::pointer                          void_ptr;$/;"	t	struct:boost::container::stable_vector_detail::select_multiallocation_chain	access:public
void_ptr	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      rebind<void>::other::pointer                    void_ptr;$/;"	t	class:boost::container::stable_vector	access:private
void_ptr_ptr	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      <void_ptr, void_ptr>::type             void_ptr_ptr;$/;"	t	class:boost::container::stable_vector_detail::iterator	access:private
void_ptr_ptr	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      rebind<void_ptr>::other::pointer                void_ptr_ptr;$/;"	t	class:boost::container::stable_vector	access:private
void_ptr_ptr_cast	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   static void_ptr_ptr void_ptr_ptr_cast(void_ptr p)$/;"	f	class:boost::container::stable_vector_detail::iterator	access:private	signature:(void_ptr p)
VP	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   typedef VoidPointer VP;$/;"	t	class:boost::interprocess::intrusive_ptr	access:private
wait	/usr/include/boost/interprocess/sync/emulation/interprocess_barrier.hpp	/^inline bool barrier::wait()$/;"	f	class:boost::interprocess::barrier	signature:()
wait	/usr/include/boost/interprocess/sync/emulation/interprocess_semaphore.hpp	/^inline void interprocess_semaphore::wait()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
wait	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^   bool wait();$/;"	p	class:boost::interprocess::barrier	access:public	signature:()
wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   void wait(L& lock)$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:(L& lock)
wait	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   void wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::interprocess_condition	access:public	signature:(L& lock, Pr pred)
wait	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   void wait();$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:()
wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void wait(L& lock);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(L& lock)
wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   void wait(L& lock, Pr pred);$/;"	p	class:boost::interprocess::named_condition	access:public	signature:(L& lock, Pr pred)
wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline void named_condition::wait(L& lock)$/;"	f	class:boost::interprocess::named_condition	signature:(L& lock)
wait	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline void named_condition::wait(L& lock, Pr pred)$/;"	f	class:boost::interprocess::named_condition	signature:(L& lock, Pr pred)
wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   void wait();$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:()
wait	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline void named_semaphore::wait()$/;"	f	class:boost::interprocess::named_semaphore	signature:()
wait	/usr/include/boost/interprocess/sync/posix/interprocess_barrier.hpp	/^inline bool barrier::wait()$/;"	f	class:boost::interprocess::barrier	signature:()
wait	/usr/include/boost/interprocess/sync/posix/interprocess_semaphore.hpp	/^inline void interprocess_semaphore::wait()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   void wait()$/;"	f	class:boost::interprocess::detail::named_semaphore_wrapper	access:public	signature:()
wait	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   void wait()$/;"	f	class:boost::interprocess::detail::semaphore_wrapper	access:public	signature:()
WaitForSingleObject	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) unsigned long __stdcall WaitForSingleObject(void *, unsigned long);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *, unsigned long)
wait_abandoned	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long wait_abandoned       = 0x00000080L;$/;"	m	namespace:boost::interprocess::winapi
wait_failed	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long wait_failed          = (unsigned long)0xFFFFFFFF;$/;"	m	namespace:boost::interprocess::winapi
wait_for_single_object	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline unsigned long wait_for_single_object(void *handle, unsigned long time)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *handle, unsigned long time)
wait_object_0	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long wait_object_0        = 0;$/;"	m	namespace:boost::interprocess::winapi
wait_timeout	/usr/include/boost/interprocess/detail/win32_api.hpp	/^static const unsigned long wait_timeout         = 258L;$/;"	m	namespace:boost::interprocess::winapi
wbufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_bufferbuf<wchar_t>     wbufferbuf;$/;"	t	namespace:boost::interprocess
wbufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_bufferstream<wchar_t>  wbufferstream;$/;"	t	namespace:boost::interprocess
weak_add_ref	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^   void weak_add_ref() \/\/ nothrow$/;"	f	class:boost::interprocess::detail::sp_counted_base	access:public	signature:()
weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   explicit weak_count(shared_count<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:(shared_count<Y, VoidAllocator, Deleter> const & r)
weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count(): m_px(0), m_pi(0) \/\/ nothrow$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:()
weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count(weak_count const & r)$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:(weak_count const & r)
weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   weak_count(weak_count<Y, VoidAllocator, Deleter> const & r)$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:(weak_count<Y, VoidAllocator, Deleter> const & r)
weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^class weak_count$/;"	c	namespace:boost::interprocess::detail
weak_count_	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    boost::uint32_t weak_count_;       \/\/ #weak + (#shared != 0)$/;"	m	class:boost::interprocess::detail::sp_counted_base	access:private
weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   weak_ptr()$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:()
weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   weak_ptr(shared_ptr<Y, A, D> const & r)$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(shared_ptr<Y, A, D> const & r)
weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   weak_ptr(weak_ptr<Y, A, D> const & r)$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(weak_ptr<Y, A, D> const & r)
weak_ptr	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^class weak_ptr$/;"	c	namespace:boost::interprocess
weak_release	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^   bool weak_release() \/\/ nothrow$/;"	f	class:boost::interprocess::detail::sp_counted_base	access:public	signature:()
weak_release	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_impl.hpp	/^   void weak_release() \/\/ nothrow$/;"	f	class:boost::interprocess::detail::sp_counted_impl_pd	access:public	signature:()
wfixed_managed_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wfixed_managed_shared_memory;$/;"	t	namespace:boost::interprocess
what	/usr/include/boost/interprocess/exceptions.hpp	/^    virtual const char* what() const throw()$/;"	f	class:boost::interprocess::bad_alloc	access:public	signature:() const
what	/usr/include/boost/interprocess/exceptions.hpp	/^   virtual const char * what() const throw()$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:() const
what	/usr/include/boost/interprocess/exceptions.hpp	/^   virtual const char* what() const throw()$/;"	f	class:boost::interprocess::lock_exception	access:public	signature:() const
what	/usr/include/boost/interprocess/smart_ptr/detail/bad_weak_ptr.hpp	/^   virtual char const * what() const throw()$/;"	f	class:boost::interprocess::bad_weak_ptr	access:public	signature:() const
wibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_ibufferstream<wchar_t> wibufferstream;$/;"	t	namespace:boost::interprocess
win32_find_data_t	/usr/include/boost/interprocess/detail/win32_api.hpp	/^struct win32_find_data_t$/;"	s	namespace:boost::interprocess::winapi
WIN32_LEAN_AND_MEAN	/usr/include/boost/interprocess/detail/posix_time_types_wrk.hpp	18;"	d
WIN32_LEAN_AND_MEAN	/usr/include/boost/interprocess/detail/posix_time_types_wrk.hpp	37;"	d
WIN32_LEAN_AND_MEAN	/usr/include/boost/interprocess/detail/ptime_wrk.hpp	18;"	d
WIN32_LEAN_AND_MEAN	/usr/include/boost/interprocess/detail/ptime_wrk.hpp	27;"	d
winapi	/usr/include/boost/interprocess/detail/win32_api.hpp	/^namespace winapi {$/;"	n	namespace:boost::interprocess
windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   windows_shared_memory();$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:()
windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   windows_shared_memory(create_only_t, const char *name, mode_t mode, std::size_t size)$/;"	f	class:boost::interprocess::windows_shared_memory	access:public	signature:(create_only_t, const char *name, mode_t mode, std::size_t size)
windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   windows_shared_memory(open_only_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::windows_shared_memory	access:public	signature:(open_only_t, const char *name, mode_t mode)
windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   windows_shared_memory(open_or_create_t, const char *name, mode_t mode, std::size_t size)$/;"	f	class:boost::interprocess::windows_shared_memory	access:public	signature:(open_or_create_t, const char *name, mode_t mode, std::size_t size)
windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^class windows_shared_memory$/;"	c	namespace:boost::interprocess
windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline windows_shared_memory::windows_shared_memory() $/;"	f	class:boost::interprocess::windows_shared_memory	signature:()
wmanaged_external_buffer	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_external_buffer;$/;"	t	namespace:boost::interprocess
wmanaged_heap_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_heap_memory;$/;"	t	namespace:boost::interprocess
wmanaged_mapped_file	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_mapped_file;$/;"	t	namespace:boost::interprocess
wmanaged_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_shared_memory;$/;"	t	namespace:boost::interprocess
wmanaged_windows_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_windows_shared_memory;$/;"	t	namespace:boost::interprocess
wmanaged_xsi_shared_memory	/usr/include/boost/interprocess/interprocess_fwd.hpp	/^wmanaged_xsi_shared_memory;$/;"	t	namespace:boost::interprocess
wobufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^typedef basic_obufferstream<wchar_t> wobufferstream;$/;"	t	namespace:boost::interprocess
wProcessorArchitecture	/usr/include/boost/interprocess/detail/win32_api.hpp	/^            unsigned short wProcessorArchitecture;$/;"	m	struct:boost::interprocess::winapi::system_info::__anon18::__anon19	access:public
wProcessorLevel	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned short wProcessorLevel;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
wProcessorRevision	/usr/include/boost/interprocess/detail/win32_api.hpp	/^    unsigned short wProcessorRevision;$/;"	m	struct:boost::interprocess::winapi::system_info	access:public
wReserved	/usr/include/boost/interprocess/detail/win32_api.hpp	/^            unsigned short wReserved;$/;"	m	struct:boost::interprocess::winapi::system_info::__anon18::__anon19	access:public
WriteFile	/usr/include/boost/interprocess/detail/win32_api.hpp	/^extern "C" __declspec(dllimport) int __stdcall WriteFile(void *hnd, const void *buffer, unsigned long bytes_to_write, unsigned long *bytes_written, interprocess_overlapped* overlapped);$/;"	p	namespace:boost::interprocess::winapi	signature:(void *hnd, const void *buffer, unsigned long bytes_to_write, unsigned long *bytes_written, interprocess_overlapped* overlapped)
write_file	/usr/include/boost/interprocess/detail/os_file_functions.hpp	/^inline bool write_file(file_handle_t hnd, const void *data, std::size_t numdata)$/;"	f	namespace:boost::interprocess::detail	signature:(file_handle_t hnd, const void *data, std::size_t numdata)
write_file	/usr/include/boost/interprocess/detail/win32_api.hpp	/^inline bool write_file(void *hnd, const void *buffer, unsigned long bytes_to_write, unsigned long *bytes_written, interprocess_overlapped* overlapped)$/;"	f	namespace:boost::interprocess::winapi	signature:(void *hnd, const void *buffer, unsigned long bytes_to_write, unsigned long *bytes_written, interprocess_overlapped* overlapped)
wstring	/usr/include/boost/interprocess/containers/container/string.hpp	/^wstring;$/;"	t	namespace:boost::container
xsi	/usr/include/boost/interprocess/sync/xsi/advanced_xsi_semaphore.hpp	/^namespace xsi {$/;"	n	namespace:boost::interprocess
xsi	/usr/include/boost/interprocess/sync/xsi/simple_xsi_semaphore.hpp	/^namespace xsi {$/;"	n	namespace:boost::interprocess
xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   xsi_named_mutex();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:()
xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   xsi_named_mutex(open_or_create_t, const char *path, boost::uint8_t id, int perm = 0666)$/;"	f	class:boost::interprocess::xsi_named_mutex	access:public	signature:(open_or_create_t, const char *path, boost::uint8_t id, int perm = 0666)
xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   xsi_named_mutex(xsi_named_mutex &);$/;"	p	class:boost::interprocess::xsi_named_mutex	access:private	signature:(xsi_named_mutex &)
xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^class xsi_named_mutex$/;"	c	namespace:boost::interprocess
xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline xsi_named_mutex::xsi_named_mutex() $/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
xsi_shared_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   xsi_shared_memory();$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:()
xsi_shared_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   xsi_shared_memory(create_only_t, const char *path, boost::uint8_t id, std::size_t size, int perm = 0666)$/;"	f	class:boost::interprocess::xsi_shared_memory	access:public	signature:(create_only_t, const char *path, boost::uint8_t id, std::size_t size, int perm = 0666)
xsi_shared_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   xsi_shared_memory(open_only_t, const char *path, boost::uint8_t id, int perm = 0666)$/;"	f	class:boost::interprocess::xsi_shared_memory	access:public	signature:(open_only_t, const char *path, boost::uint8_t id, int perm = 0666)
xsi_shared_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   xsi_shared_memory(open_or_create_t, const char *path, boost::uint8_t id, std::size_t size, int perm = 0666)$/;"	f	class:boost::interprocess::xsi_shared_memory	access:public	signature:(open_or_create_t, const char *path, boost::uint8_t id, std::size_t size, int perm = 0666)
xsi_shared_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   xsi_shared_memory(xsi_shared_memory &);$/;"	p	class:boost::interprocess::xsi_shared_memory	access:private	signature:(xsi_shared_memory &)
xsi_shared_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^class xsi_shared_memory$/;"	c	namespace:boost::interprocess
xsi_shared_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^inline xsi_shared_memory::xsi_shared_memory() $/;"	f	class:boost::interprocess::xsi_shared_memory	signature:()
xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device();$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:()
xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(create_only_t, const char *filepath, boost::uint8_t id, mode_t mode, std::size_t size)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(create_only_t, const char *filepath, boost::uint8_t id, mode_t mode, std::size_t size)
xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(create_only_t, const char *name, mode_t mode, std::size_t size)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(create_only_t, const char *name, mode_t mode, std::size_t size)
xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(open_only_t, const char *filepath, boost::uint8_t id, mode_t mode)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(open_only_t, const char *filepath, boost::uint8_t id, mode_t mode)
xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(open_only_t, const char *name, mode_t mode)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(open_only_t, const char *name, mode_t mode)
xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(open_or_create_t, const char *filepath, boost::uint8_t id, mode_t mode, std::size_t size)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(open_or_create_t, const char *filepath, boost::uint8_t id, mode_t mode, std::size_t size)
xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(open_or_create_t, const char *name, mode_t mode, std::size_t size)$/;"	f	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:(open_or_create_t, const char *name, mode_t mode, std::size_t size)
xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   xsi_shared_memory_device(xsi_shared_memory_device &);$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:private	signature:(xsi_shared_memory_device &)
xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^class xsi_shared_memory_device$/;"	c	namespace:boost::interprocess
xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline xsi_shared_memory_device::xsi_shared_memory_device()$/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:()
yes_type	/usr/include/boost/interprocess/containers/container/detail/mpl.hpp	/^typedef char yes_type;$/;"	t	namespace:boost::container::containers_detail
yes_type	/usr/include/boost/interprocess/detail/mpl.hpp	/^typedef char yes_type;$/;"	t	namespace:boost::interprocess::detail
ZeroCostInternalBufferChars	/usr/include/boost/interprocess/containers/container/string.hpp	/^   static const size_type  ZeroCostInternalBufferChars =$/;"	m	class:boost::container::containers_detail::basic_string_base	access:protected
zero_free_memory	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   void zero_free_memory()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:public	signature:()
zero_free_memory	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   void zero_free_memory();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:()
zero_free_memory	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^inline void simple_seq_fit_impl<MutexFamily, VoidPointer>::zero_free_memory()$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:()
zero_free_memory	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   void zero_free_memory();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:()
zero_free_memory	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^inline void rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::zero_free_memory()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
zero_free_memory	/usr/include/boost/interprocess/segment_manager.hpp	/^   void zero_free_memory()$/;"	f	class:boost::interprocess::segment_manager_base	access:public	signature:()
zero_memory	/usr/include/boost/interprocess/containers/allocation_type.hpp	/^static const allocation_type zero_memory        = boost::container::zero_memory;$/;"	m	namespace:boost::interprocess
zero_memory	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^static const allocation_type zero_memory        = (allocation_type)zero_memory_v;$/;"	m	namespace:boost::container
zero_memory_v	/usr/include/boost/interprocess/containers/container/detail/allocation_type.hpp	/^   zero_memory_v = 0x20,$/;"	e	enum:boost::container::allocation_type_v
_	/usr/include/boost/interprocess/containers/container/detail/version_type.hpp	/^   struct two {char _[2];};$/;"	m	struct:boost::container::containers_detail::impl::has_version::two	access:public
_	/usr/include/boost/interprocess/detail/pointer_type.hpp	/^struct two {char _[2];};$/;"	m	struct:boost::interprocess::detail::two	access:public
_CRT_SECURE_NO_DEPRECATE	/usr/include/boost/interprocess/containers/container/detail/config_begin.hpp	18;"	d
_CRT_SECURE_NO_DEPRECATE	/usr/include/boost/interprocess/containers/container/detail/config_end.hpp	14;"	d
_CRT_SECURE_NO_DEPRECATE	/usr/include/boost/interprocess/detail/config_begin.hpp	18;"	d
_CRT_SECURE_NO_DEPRECATE	/usr/include/boost/interprocess/detail/config_end.hpp	14;"	d
_diff	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   ptrdiff_t _diff(const intersegment_ptr<T2> &other) const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<T2> &other) const
_equal	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool _equal(const intersegment_ptr<T2>&other) const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<T2>&other) const
_internal_assign	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   void _internal_assign(const detail::shared_count<Y, A, D> & pn2)$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(const detail::shared_count<Y, A, D> & pn2)
_internal_less	/usr/include/boost/interprocess/smart_ptr/shared_ptr.hpp	/^   bool _internal_less(shared_ptr<T2, A2, Deleter2> const & rhs) const$/;"	f	class:boost::interprocess::shared_ptr	access:public	signature:(shared_ptr<T2, A2, Deleter2> const & rhs) const
_internal_less	/usr/include/boost/interprocess/smart_ptr/weak_ptr.hpp	/^   bool _internal_less(weak_ptr<T2, A2, D2> const & rhs) const$/;"	f	class:boost::interprocess::weak_ptr	access:public	signature:(weak_ptr<T2, A2, D2> const & rhs) const
_internal_weak_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   mutable weak_ptr<element_type, A, D> _internal_weak_this;$/;"	m	class:boost::interprocess::enable_shared_from_this	access:public
_interprocess_acl	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef struct _interprocess_acl$/;"	s	namespace:boost::interprocess::winapi
_interprocess_security_descriptor	/usr/include/boost/interprocess/detail/win32_api.hpp	/^typedef struct _interprocess_security_descriptor$/;"	s	namespace:boost::interprocess::winapi
_less	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   bool _less(const intersegment_ptr<T2> &other) const$/;"	f	class:boost::interprocess::intersegment_ptr	access:public	signature:(const intersegment_ptr<T2> &other) const
~adaptive_pool_base	/usr/include/boost/interprocess/allocators/adaptive_pool.hpp	/^   ~adaptive_pool_base() $/;"	f	class:boost::interprocess::detail::adaptive_pool_base	access:public	signature:()
~advanced_insert_aux_emplace	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   ~advanced_insert_aux_emplace()$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_emplace	access:public	signature:()
~advanced_insert_aux_int	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual ~advanced_insert_aux_int() {}$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_int	access:public	signature:()
~advanced_insert_aux_proxy	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual ~advanced_insert_aux_proxy()$/;"	f	struct:boost::container::containers_detail::advanced_insert_aux_proxy	access:public	signature:()
~allocator_multialloc_chain_node_deallocator	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   ~allocator_multialloc_chain_node_deallocator()$/;"	f	class:boost::container::containers_detail::allocator_multialloc_chain_node_deallocator	access:public	signature:()
~barrier	/usr/include/boost/interprocess/sync/emulation/interprocess_barrier.hpp	/^inline barrier::~barrier(){}$/;"	f	class:boost::interprocess::barrier	signature:()
~barrier	/usr/include/boost/interprocess/sync/interprocess_barrier.hpp	/^   ~barrier();$/;"	p	class:boost::interprocess::barrier	access:public	signature:()
~barrier	/usr/include/boost/interprocess/sync/posix/interprocess_barrier.hpp	/^inline barrier::~barrier()$/;"	f	class:boost::interprocess::barrier	signature:()
~barrierattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~barrierattr_wrapper()  {  pthread_barrierattr_destroy(&m_attr);  }$/;"	f	struct:boost::interprocess::detail::barrierattr_wrapper	access:public	signature:()
~barrier_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~barrier_initializer() {  if(mp_barrier) pthread_barrier_destroy(mp_barrier);  }$/;"	f	class:boost::interprocess::detail::barrier_initializer	access:public	signature:()
~basic_bufferbuf	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   virtual ~basic_bufferbuf(){}$/;"	f	class:boost::interprocess::basic_bufferbuf	access:public	signature:()
~basic_bufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   ~basic_bufferstream(){}$/;"	f	class:boost::interprocess::basic_bufferstream	access:public	signature:()
~basic_ibufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   ~basic_ibufferstream(){};$/;"	f	class:boost::interprocess::basic_ibufferstream	access:public	signature:()
~basic_ivectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   ~basic_ivectorstream(){};$/;"	f	class:boost::interprocess::basic_ivectorstream	access:public	signature:()
~basic_managed_heap_memory	/usr/include/boost/interprocess/managed_heap_memory.hpp	/^   ~basic_managed_heap_memory()$/;"	f	class:boost::interprocess::basic_managed_heap_memory	access:public	signature:()
~basic_managed_mapped_file	/usr/include/boost/interprocess/managed_mapped_file.hpp	/^   ~basic_managed_mapped_file()$/;"	f	class:boost::interprocess::basic_managed_mapped_file	access:public	signature:()
~basic_managed_memory_impl	/usr/include/boost/interprocess/detail/managed_memory_impl.hpp	/^   ~basic_managed_memory_impl()$/;"	f	class:boost::interprocess::detail::basic_managed_memory_impl	access:protected	signature:()
~basic_managed_multi_shared_memory	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^   ~basic_managed_multi_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory	access:public	signature:()
~basic_managed_shared_memory	/usr/include/boost/interprocess/managed_shared_memory.hpp	/^   ~basic_managed_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_shared_memory	access:public	signature:()
~basic_managed_windows_shared_memory	/usr/include/boost/interprocess/managed_windows_shared_memory.hpp	/^   ~basic_managed_windows_shared_memory()$/;"	f	class:boost::interprocess::basic_managed_windows_shared_memory	access:public	signature:()
~basic_obufferstream	/usr/include/boost/interprocess/streams/bufferstream.hpp	/^   ~basic_obufferstream(){}$/;"	f	class:boost::interprocess::basic_obufferstream	access:public	signature:()
~basic_ovectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   ~basic_ovectorstream(){}$/;"	f	class:boost::interprocess::basic_ovectorstream	access:public	signature:()
~basic_string	/usr/include/boost/interprocess/containers/container/string.hpp	/^   ~basic_string() $/;"	f	class:boost::container::basic_string	access:public	signature:()
~basic_string_base	/usr/include/boost/interprocess/containers/container/string.hpp	/^   ~basic_string_base() $/;"	f	class:boost::container::containers_detail::basic_string_base	access:public	signature:()
~basic_vectorbuf	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   virtual ~basic_vectorbuf(){}$/;"	f	class:boost::interprocess::basic_vectorbuf	access:public	signature:()
~basic_vectorstream	/usr/include/boost/interprocess/streams/vectorstream.hpp	/^   ~basic_vectorstream(){}$/;"	f	class:boost::interprocess::basic_vectorstream	access:public	signature:()
~cache_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   ~cache_impl()$/;"	f	class:boost::interprocess::detail::cache_impl	access:public	signature:()
~clear_on_destroy	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   ~clear_on_destroy()$/;"	f	class:boost::container::stable_vector_detail::clear_on_destroy	access:public	signature:()
~condattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~condattr_wrapper() { pthread_condattr_destroy(&m_attr); }$/;"	f	struct:boost::interprocess::detail::condattr_wrapper	access:public	signature:()
~condition_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~condition_initializer()   {  if(mp_cond) pthread_cond_destroy(mp_cond);  }$/;"	f	class:boost::interprocess::detail::condition_initializer	access:public	signature:()
~default_construct_aux_proxy	/usr/include/boost/interprocess/containers/container/detail/advanced_insert_int.hpp	/^   virtual ~default_construct_aux_proxy()$/;"	f	struct:boost::container::containers_detail::default_construct_aux_proxy	access:public	signature:()
~deque	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   ~deque() $/;"	f	class:boost::container::deque	access:public	signature:()
~deque_base	/usr/include/boost/interprocess/containers/container/deque.hpp	/^   ~deque_base()$/;"	f	class:boost::container::deque_base	access:public	signature:()
~enable_shared_from_this	/usr/include/boost/interprocess/smart_ptr/enable_shared_from_this.hpp	/^   ~enable_shared_from_this()$/;"	f	class:boost::interprocess::enable_shared_from_this	access:protected	signature:()
~exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      ~exclusive_rollback()$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::exclusive_rollback	access:public	signature:()
~file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^   ~file_lock();$/;"	p	class:boost::interprocess::file_lock	access:public	signature:()
~file_lock	/usr/include/boost/interprocess/sync/file_lock.hpp	/^inline file_lock::~file_lock()$/;"	f	class:boost::interprocess::file_lock	signature:()
~file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^   ~file_mapping();$/;"	p	class:boost::interprocess::file_mapping	access:public	signature:()
~file_mapping	/usr/include/boost/interprocess/file_mapping.hpp	/^inline file_mapping::~file_mapping() $/;"	f	class:boost::interprocess::file_mapping	signature:()
~file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^   ~file_wrapper();$/;"	p	class:boost::interprocess::detail::file_wrapper	access:public	signature:()
~file_wrapper	/usr/include/boost/interprocess/detail/file_wrapper.hpp	/^inline file_wrapper::~file_wrapper() $/;"	f	class:boost::interprocess::detail::file_wrapper	signature:()
~flat_map_intersegment	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^   ~flat_map_intersegment()$/;"	f	struct:boost::interprocess::flat_map_intersegment	access:public	signature:()
~flat_tree	/usr/include/boost/interprocess/containers/container/detail/flat_tree.hpp	/^   ~flat_tree()$/;"	f	class:boost::container::containers_detail::flat_tree	access:public	signature:()
~group_services	/usr/include/boost/interprocess/detail/managed_multi_shared_memory.hpp	/^      virtual ~group_services(){}$/;"	f	class:boost::interprocess::basic_managed_multi_shared_memory::group_services	access:public	signature:()
~handle_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   ~handle_closer(){ close_handle(handle_);  }$/;"	f	class:boost::interprocess::winapi::handle_closer	access:public	signature:()
~interprocess_condition	/usr/include/boost/interprocess/sync/emulation/interprocess_condition.hpp	/^inline interprocess_condition::~interprocess_condition()$/;"	f	class:boost::interprocess::interprocess_condition	signature:()
~interprocess_condition	/usr/include/boost/interprocess/sync/interprocess_condition.hpp	/^   ~interprocess_condition();$/;"	p	class:boost::interprocess::interprocess_condition	access:public	signature:()
~interprocess_condition	/usr/include/boost/interprocess/sync/posix/interprocess_condition.hpp	/^inline interprocess_condition::~interprocess_condition()$/;"	f	class:boost::interprocess::interprocess_condition	signature:()
~interprocess_exception	/usr/include/boost/interprocess/exceptions.hpp	/^   virtual ~interprocess_exception() throw(){}$/;"	f	class:boost::interprocess::interprocess_exception	access:public	signature:()
~interprocess_mutex	/usr/include/boost/interprocess/sync/emulation/interprocess_mutex.hpp	/^inline interprocess_mutex::~interprocess_mutex() $/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
~interprocess_mutex	/usr/include/boost/interprocess/sync/interprocess_mutex.hpp	/^   ~interprocess_mutex();$/;"	p	class:boost::interprocess::interprocess_mutex	access:public	signature:()
~interprocess_mutex	/usr/include/boost/interprocess/sync/posix/interprocess_mutex.hpp	/^inline interprocess_mutex::~interprocess_mutex() $/;"	f	class:boost::interprocess::interprocess_mutex	signature:()
~interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/emulation/interprocess_recursive_mutex.hpp	/^inline interprocess_recursive_mutex::~interprocess_recursive_mutex(){}$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
~interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/interprocess_recursive_mutex.hpp	/^  ~interprocess_recursive_mutex();$/;"	p	class:boost::interprocess::interprocess_recursive_mutex	access:public	signature:()
~interprocess_recursive_mutex	/usr/include/boost/interprocess/sync/posix/interprocess_recursive_mutex.hpp	/^inline interprocess_recursive_mutex::~interprocess_recursive_mutex()$/;"	f	class:boost::interprocess::interprocess_recursive_mutex	signature:()
~interprocess_semaphore	/usr/include/boost/interprocess/sync/emulation/interprocess_semaphore.hpp	/^inline interprocess_semaphore::~interprocess_semaphore()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
~interprocess_semaphore	/usr/include/boost/interprocess/sync/interprocess_semaphore.hpp	/^   ~interprocess_semaphore();$/;"	p	class:boost::interprocess::interprocess_semaphore	access:public	signature:()
~interprocess_semaphore	/usr/include/boost/interprocess/sync/posix/interprocess_semaphore.hpp	/^inline interprocess_semaphore::~interprocess_semaphore()$/;"	f	class:boost::interprocess::interprocess_semaphore	signature:()
~interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^   ~interprocess_upgradable_mutex();$/;"	p	class:boost::interprocess::interprocess_upgradable_mutex	access:public	signature:()
~interprocess_upgradable_mutex	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^inline interprocess_upgradable_mutex::~interprocess_upgradable_mutex()$/;"	f	class:boost::interprocess::interprocess_upgradable_mutex	signature:()
~intrusive_ptr	/usr/include/boost/interprocess/smart_ptr/intrusive_ptr.hpp	/^   ~intrusive_ptr()$/;"	f	class:boost::interprocess::intrusive_ptr	access:public	signature:()
~invariant_checker	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^      ~invariant_checker(){BOOST_ASSERT(p->invariant());}$/;"	f	class:boost::container::stable_vector::invariant_checker	access:public	signature:()
~in_place_interface	/usr/include/boost/interprocess/detail/in_place_interface.hpp	/^   virtual ~in_place_interface(){}$/;"	f	struct:boost::interprocess::detail::in_place_interface	access:public	signature:()
~iunordered_set_index	/usr/include/boost/interprocess/indexes/iunordered_set_index.hpp	/^   ~iunordered_set_index()$/;"	f	class:boost::interprocess::iunordered_set_index	access:public	signature:()
~library_unloader	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   ~library_unloader(){ free_library(lib_);  }$/;"	f	struct:boost::interprocess::winapi::library_unloader	access:public	signature:()
~list	/usr/include/boost/interprocess/containers/container/list.hpp	/^   ~list()$/;"	f	class:boost::container::list	access:public	signature:()
~managed_open_or_create_impl	/usr/include/boost/interprocess/detail/managed_open_or_create_impl.hpp	/^   ~managed_open_or_create_impl()$/;"	f	class:boost::interprocess::detail::managed_open_or_create_impl	access:public	signature:()
~mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^   ~mapped_region();$/;"	p	class:boost::interprocess::mapped_region	access:public	signature:()
~mapped_region	/usr/include/boost/interprocess/mapped_region.hpp	/^inline mapped_region::~mapped_region() $/;"	f	class:boost::interprocess::mapped_region	signature:()
~mappings_t	/usr/include/boost/interprocess/detail/intersegment_ptr.hpp	/^      ~mappings_t()$/;"	f	struct:boost::interprocess::flat_map_intersegment::mappings_t	access:public	signature:()
~mem_algo_deallocator	/usr/include/boost/interprocess/detail/segment_manager_helper.hpp	/^   ~mem_algo_deallocator()$/;"	f	class:boost::interprocess::detail::mem_algo_deallocator	access:public	signature:()
~message_queue	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^   ~message_queue(); $/;"	p	class:boost::interprocess::message_queue	access:public	signature:()
~message_queue	/usr/include/boost/interprocess/ipc/message_queue.hpp	/^inline message_queue::~message_queue()$/;"	f	class:boost::interprocess::message_queue	signature:()
~multi_segment_services	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^   virtual ~multi_segment_services() = 0;$/;"	p	class:boost::interprocess::multi_segment_services	access:public	signature:()
~multi_segment_services	/usr/include/boost/interprocess/detail/multi_segment_services.hpp	/^inline multi_segment_services::~multi_segment_services()$/;"	f	class:boost::interprocess::multi_segment_services	signature:()
~mutexattr_wrapper	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~mutexattr_wrapper()  {  pthread_mutexattr_destroy(&m_attr);  }$/;"	f	struct:boost::interprocess::detail::mutexattr_wrapper	access:public	signature:()
~mutex_initializer	/usr/include/boost/interprocess/sync/posix/pthread_helpers.hpp	/^     ~mutex_initializer() {  if(mp_mut) pthread_mutex_destroy(mp_mut);  }$/;"	f	class:boost::interprocess::detail::mutex_initializer	access:public	signature:()
~named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^   ~named_condition();$/;"	p	class:boost::interprocess::named_condition	access:public	signature:()
~named_condition	/usr/include/boost/interprocess/sync/named_condition.hpp	/^inline named_condition::~named_condition()$/;"	f	class:boost::interprocess::named_condition	signature:()
~named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^   ~named_mutex();$/;"	p	class:boost::interprocess::named_mutex	access:public	signature:()
~named_mutex	/usr/include/boost/interprocess/sync/named_mutex.hpp	/^inline named_mutex::~named_mutex()$/;"	f	class:boost::interprocess::named_mutex	signature:()
~named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^   ~named_recursive_mutex();$/;"	p	class:boost::interprocess::named_recursive_mutex	access:public	signature:()
~named_recursive_mutex	/usr/include/boost/interprocess/sync/named_recursive_mutex.hpp	/^inline named_recursive_mutex::~named_recursive_mutex()$/;"	f	class:boost::interprocess::named_recursive_mutex	signature:()
~named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^   ~named_semaphore();$/;"	p	class:boost::interprocess::named_semaphore	access:public	signature:()
~named_semaphore	/usr/include/boost/interprocess/sync/named_semaphore.hpp	/^inline named_semaphore::~named_semaphore()$/;"	f	class:boost::interprocess::named_semaphore	signature:()
~named_semaphore_wrapper	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   ~named_semaphore_wrapper()$/;"	f	class:boost::interprocess::detail::named_semaphore_wrapper	access:public	signature:()
~named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^   ~named_upgradable_mutex();$/;"	p	class:boost::interprocess::named_upgradable_mutex	access:public	signature:()
~named_upgradable_mutex	/usr/include/boost/interprocess/sync/named_upgradable_mutex.hpp	/^inline named_upgradable_mutex::~named_upgradable_mutex()$/;"	f	class:boost::interprocess::named_upgradable_mutex	signature:()
~node_allocator_base	/usr/include/boost/interprocess/allocators/node_allocator.hpp	/^   ~node_allocator_base() $/;"	f	class:boost::interprocess::detail::node_allocator_base	access:public	signature:()
~node_alloc_holder	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   ~node_alloc_holder()$/;"	f	namespace:boost::container::containers_detail	signature:()
~null_mutex	/usr/include/boost/interprocess/sync/null_mutex.hpp	/^   ~null_mutex(){}$/;"	f	class:boost::interprocess::null_mutex	access:public	signature:()
~private_adaptive_node_pool_impl	/usr/include/boost/interprocess/containers/container/detail/adaptive_node_pool_impl.hpp	/^   ~private_adaptive_node_pool_impl()$/;"	f	class:boost::container::containers_detail::private_adaptive_node_pool_impl	access:public	signature:()
~private_adaptive_pool_base	/usr/include/boost/interprocess/allocators/private_adaptive_pool.hpp	/^   ~private_adaptive_pool_base() $/;"	f	class:boost::interprocess::detail::private_adaptive_pool_base	access:public	signature:()
~private_node_allocator_base	/usr/include/boost/interprocess/allocators/private_node_allocator.hpp	/^   ~private_node_allocator_base() $/;"	f	class:boost::interprocess::detail::private_node_allocator_base	access:public	signature:()
~private_node_pool_impl	/usr/include/boost/interprocess/containers/container/detail/node_pool_impl.hpp	/^   ~private_node_pool_impl()$/;"	f	class:boost::container::containers_detail::private_node_pool_impl	access:public	signature:()
~rbtree	/usr/include/boost/interprocess/containers/container/detail/tree.hpp	/^   ~rbtree()$/;"	f	class:boost::container::containers_detail::rbtree	access:public	signature:()
~rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^   ~rbtree_best_fit();$/;"	p	class:boost::interprocess::rbtree_best_fit	access:public	signature:()
~rbtree_best_fit	/usr/include/boost/interprocess/mem_algo/rbtree_best_fit.hpp	/^inline rbtree_best_fit<MutexFamily, VoidPointer, MemAlignment>::~rbtree_best_fit()$/;"	f	class:boost::interprocess::rbtree_best_fit	signature:()
~reg_closer	/usr/include/boost/interprocess/detail/win32_api.hpp	/^   ~reg_closer(){ (*func_)(key_);  }$/;"	f	struct:boost::interprocess::winapi::reg_closer	access:public	signature:()
~remove_file_on_destroy	/usr/include/boost/interprocess/file_mapping.hpp	/^   ~remove_file_on_destroy()$/;"	f	class:boost::interprocess::remove_file_on_destroy	access:public	signature:()
~remove_shared_memory_on_destroy	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   ~remove_shared_memory_on_destroy()$/;"	f	class:boost::interprocess::remove_shared_memory_on_destroy	access:public	signature:()
~rv	/usr/include/boost/interprocess/detail/move.hpp	/^   ~rv();$/;"	p	class:boost::interprocess::rv	access:private	signature:()
~scoped_array_deallocator	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   ~scoped_array_deallocator()$/;"	f	struct:boost::container::containers_detail::scoped_array_deallocator	access:public	signature:()
~scoped_deallocator	/usr/include/boost/interprocess/containers/container/detail/node_alloc_holder.hpp	/^   ~scoped_deallocator()$/;"	f	struct:boost::container::containers_detail::scoped_deallocator	access:public	signature:()
~scoped_destructor_n	/usr/include/boost/interprocess/containers/container/detail/destroyers.hpp	/^   ~scoped_destructor_n()$/;"	f	struct:boost::container::containers_detail::scoped_destructor_n	access:public	signature:()
~scoped_lock	/usr/include/boost/interprocess/sync/scoped_lock.hpp	/^   ~scoped_lock()$/;"	f	class:boost::interprocess::scoped_lock	access:public	signature:()
~scoped_ptr	/usr/include/boost/interprocess/smart_ptr/scoped_ptr.hpp	/^   ~scoped_ptr()$/;"	f	class:boost::interprocess::scoped_ptr	access:public	signature:()
~semaphore_wrapper	/usr/include/boost/interprocess/sync/posix/semaphore_wrapper.hpp	/^   ~semaphore_wrapper()$/;"	f	class:boost::interprocess::detail::semaphore_wrapper	access:public	signature:()
~sharable_lock	/usr/include/boost/interprocess/sync/sharable_lock.hpp	/^   ~sharable_lock()$/;"	f	class:boost::interprocess::sharable_lock	access:public	signature:()
~shared_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   ~shared_count() \/\/ nothrow$/;"	f	class:boost::interprocess::detail::shared_count	access:public	signature:()
~shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^   ~shared_memory_object();$/;"	p	class:boost::interprocess::shared_memory_object	access:public	signature:()
~shared_memory_object	/usr/include/boost/interprocess/shared_memory_object.hpp	/^inline shared_memory_object::~shared_memory_object() $/;"	f	class:boost::interprocess::shared_memory_object	signature:()
~shared_pool_impl	/usr/include/boost/interprocess/allocators/detail/allocator_common.hpp	/^   ~shared_pool_impl()$/;"	f	class:boost::interprocess::detail::shared_pool_impl	access:public	signature:()
~simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^   ~simple_seq_fit_impl();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:()
~simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/multi_simple_seq_fit_impl.hpp	/^inline simple_seq_fit_impl<MutexFamily, VoidPointer>::~simple_seq_fit_impl()$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:()
~simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^   ~simple_seq_fit_impl();$/;"	p	class:boost::interprocess::detail::simple_seq_fit_impl	access:public	signature:()
~simple_seq_fit_impl	/usr/include/boost/interprocess/mem_algo/detail/simple_seq_fit_impl.hpp	/^inline simple_seq_fit_impl<MutexFamily, VoidPointer>::~simple_seq_fit_impl()$/;"	f	class:boost::interprocess::detail::simple_seq_fit_impl	signature:()
~slist	/usr/include/boost/interprocess/containers/container/slist.hpp	/^   ~slist() $/;"	f	class:boost::container::slist	access:public	signature:()
~sp_counted_base	/usr/include/boost/interprocess/smart_ptr/detail/sp_counted_base_atomic.hpp	/^    ~sp_counted_base() \/\/ nothrow$/;"	f	class:boost::interprocess::detail::sp_counted_base	access:public	signature:()
~stable_vector	/usr/include/boost/interprocess/containers/container/stable_vector.hpp	/^   ~stable_vector()$/;"	f	class:boost::container::stable_vector	access:public	signature:()
~upgradable_lock	/usr/include/boost/interprocess/sync/upgradable_lock.hpp	/^   ~upgradable_lock()$/;"	f	class:boost::interprocess::upgradable_lock	access:public	signature:()
~upgradable_to_exclusive_rollback	/usr/include/boost/interprocess/sync/interprocess_upgradable_mutex.hpp	/^      ~upgradable_to_exclusive_rollback()$/;"	f	struct:boost::interprocess::interprocess_upgradable_mutex::upgradable_to_exclusive_rollback	access:public	signature:()
~vector	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   ~vector() $/;"	f	class:boost::container::vector	access:public	signature:()
~vector_alloc_holder	/usr/include/boost/interprocess/containers/container/vector.hpp	/^   ~vector_alloc_holder()$/;"	f	struct:boost::container::containers_detail::vector_alloc_holder	access:public	signature:()
~weak_count	/usr/include/boost/interprocess/smart_ptr/detail/shared_count.hpp	/^   ~weak_count() \/\/ nothrow$/;"	f	class:boost::interprocess::detail::weak_count	access:public	signature:()
~windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^   ~windows_shared_memory();$/;"	p	class:boost::interprocess::windows_shared_memory	access:public	signature:()
~windows_shared_memory	/usr/include/boost/interprocess/windows_shared_memory.hpp	/^inline windows_shared_memory::~windows_shared_memory() $/;"	f	class:boost::interprocess::windows_shared_memory	signature:()
~xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^   ~xsi_named_mutex();$/;"	p	class:boost::interprocess::xsi_named_mutex	access:public	signature:()
~xsi_named_mutex	/usr/include/boost/interprocess/sync/xsi/xsi_named_mutex.hpp	/^inline xsi_named_mutex::~xsi_named_mutex() $/;"	f	class:boost::interprocess::xsi_named_mutex	signature:()
~xsi_shared_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^   ~xsi_shared_memory();$/;"	p	class:boost::interprocess::xsi_shared_memory	access:public	signature:()
~xsi_shared_memory	/usr/include/boost/interprocess/detail/xsi_shared_memory.hpp	/^inline xsi_shared_memory::~xsi_shared_memory() $/;"	f	class:boost::interprocess::xsi_shared_memory	signature:()
~xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^   ~xsi_shared_memory_device();$/;"	p	class:boost::interprocess::xsi_shared_memory_device	access:public	signature:()
~xsi_shared_memory_device	/usr/include/boost/interprocess/detail/xsi_shared_memory_device.hpp	/^inline xsi_shared_memory_device::~xsi_shared_memory_device() $/;"	f	class:boost::interprocess::xsi_shared_memory_device	signature:()
